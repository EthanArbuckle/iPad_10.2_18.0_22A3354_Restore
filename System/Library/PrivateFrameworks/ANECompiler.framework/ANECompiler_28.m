mlir::Block *mlir::detail::ConversionPatternRewriterImpl::convertRegionTypes(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  mlir::Block *v11;
  char v12;
  uint64_t v13;
  mlir::Block *v14;

  v8 = a1 + 72;
  if ((_QWORD *)*a2 == a2)
    return 0;
  if ((_QWORD *)*a2 != a2)
  {
    v9 = *(_QWORD **)(a2[1] + 8);
    while (v9 != a2)
    {
      v10 = (_QWORD *)v9[1];
      if (v9)
        v11 = (mlir::Block *)(v9 - 1);
      else
        v11 = 0;
      mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(a1, v11, a3, 0);
      v9 = v10;
      if (!v12)
        return 0;
    }
  }
  v13 = a2[1];
  if (v13)
    v14 = (mlir::Block *)(v13 - 8);
  else
    v14 = 0;
  return mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(a1, v14, a3, a4);
}

_QWORD *`anonymous namespace'::ArgConverter::setConverter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v8 = *(_QWORD *)(a1 + 88);
  result = (_QWORD *)(a1 + 88);
  v7 = v8;
  v9 = *((_DWORD *)result + 4);
  if (!v9)
    goto LABEL_21;
  v10 = v9 - 1;
  v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (_QWORD *)(v7 + 16 * v11);
  v13 = *v12;
  if (*v12 == a2)
  {
LABEL_3:
    v12[1] = a3;
    return result;
  }
  v15 = 0;
  v16 = 1;
  while (v13 != -4096)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v13 == -8192;
    if (v17)
      v15 = v12;
    v18 = v11 + v16++;
    v11 = v18 & v10;
    v12 = (_QWORD *)(v7 + 16 * (v18 & v10));
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_3;
  }
  if (v15)
    v12 = v15;
  v19 = *(_DWORD *)(a1 + 96);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *(_DWORD *)(a1 + 100) > v9 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_21:
    v9 *= 2;
  }
  result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  v20 = *(_QWORD *)(a1 + 88);
  v21 = *(_DWORD *)(a1 + 104) - 1;
  v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  v12 = (_QWORD *)(v20 + 16 * v22);
  v23 = *v12;
  if (*v12 == a2)
  {
LABEL_23:
    ++*(_DWORD *)(a1 + 96);
    if (a2 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != -4096)
  {
    if (v24)
      v26 = 0;
    else
      v26 = v23 == -8192;
    if (v26)
      v24 = v12;
    v27 = v22 + v25++;
    v22 = v27 & v21;
    v12 = (_QWORD *)(v20 + 16 * (v27 & v21));
    v23 = *v12;
    if (*v12 == a2)
      goto LABEL_23;
  }
  if (v24)
    v12 = v24;
LABEL_6:
  v14 = *v12;
  ++*(_DWORD *)(a1 + 96);
  if (v14 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 100);
LABEL_8:
  *v12 = a2;
  v12[1] = 0;
  v12[1] = a3;
  return result;
}

void mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int **v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int **v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int **v42;
  unsigned int **v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = a2[9];
  v49 = a3;
  v50 = 0;
  if ((_DWORD)v6)
    v7 = (uint64_t)(a2 - 4);
  else
    v7 = 0;
  v51 = v7;
  v52 = 0;
  if (a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      if (v51 == v7 && v11 == v6)
        break;
      v15 = mlir::ValueRange::dereference_iterator(&v49, v10);
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v51, v52);
      if (v15)
      {
        v17 = NextResultAtOffset;
        v47 = NextResultAtOffset;
        v48 = 0;
        v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)&v47, &v48);
        v19 = v48;
        if ((v18 & 1) == 0)
        {
          v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&v47, (unint64_t *)&v47, v48);
          *v19 = v47;
          v19[1] = 0;
        }
        v19[1] = v15;
        v12 |= (*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v12 = 1;
      }
      v10 = v50 + 1;
      v11 = v52 + 1;
      ++v50;
      ++v52;
    }
    while (v49 != a3 || v10 != a4);
    if ((v12 & 1) != 0)
    {
      v20 = *(_DWORD *)(a1 + 360);
      v21 = *(unsigned int *)(a1 + 1200);
      if (v21 >= *(_DWORD *)(a1 + 1204))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1192, (void *)(a1 + 1208), v21 + 1, 4);
        LODWORD(v21) = *(_DWORD *)(a1 + 1200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 1192) + 4 * v21) = v20;
      ++*(_DWORD *)(a1 + 1200);
    }
  }
  v22 = *(unsigned int **)(a1 + 1224);
  v23 = *(_DWORD *)(a1 + 344);
  if (!v23)
    goto LABEL_48;
  v24 = *(_QWORD *)(a1 + 328);
  v25 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v26 = (unsigned int **)(v24 + 16 * v25);
  v27 = *v26;
  if (*v26 == a2)
    goto LABEL_41;
  v28 = 0;
  v29 = 1;
  while (v27 != (unsigned int *)-4096)
  {
    if (v28)
      v30 = 0;
    else
      v30 = v27 == (unsigned int *)-8192;
    if (v30)
      v28 = v26;
    v31 = v25 + v29++;
    v25 = v31 & (v23 - 1);
    v26 = (unsigned int **)(v24 + 16 * v25);
    v27 = *v26;
    if (*v26 == a2)
      goto LABEL_41;
  }
  v36 = v28 ? v28 : v26;
  v37 = *(_DWORD *)(a1 + 336);
  if (4 * v37 + 4 < 3 * v23)
  {
    if (v23 + ~v37 - *(_DWORD *)(a1 + 340) > v23 >> 3)
      goto LABEL_36;
  }
  else
  {
LABEL_48:
    v23 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1 + 328, v23);
  v38 = *(_QWORD *)(a1 + 328);
  v39 = *(_DWORD *)(a1 + 344) - 1;
  v40 = v39 & ((a2 >> 4) ^ (a2 >> 9));
  v36 = (unsigned int **)(v38 + 16 * v40);
  v41 = *v36;
  if (*v36 == a2)
  {
LABEL_50:
    ++*(_DWORD *)(a1 + 336);
    if (a2 == (unsigned int *)-4096)
      goto LABEL_38;
    goto LABEL_37;
  }
  v43 = 0;
  v44 = 1;
  while (v41 != (unsigned int *)-4096)
  {
    if (v43)
      v45 = 0;
    else
      v45 = v41 == (unsigned int *)-8192;
    if (v45)
      v43 = v36;
    v46 = v40 + v44++;
    v40 = v46 & v39;
    v36 = (unsigned int **)(v38 + 16 * (v46 & v39));
    v41 = *v36;
    if (*v36 == a2)
      goto LABEL_50;
  }
  if (v43)
    v36 = v43;
LABEL_36:
  v32 = *v36;
  ++*(_DWORD *)(a1 + 336);
  if (v32 != (unsigned int *)-4096)
LABEL_37:
    --*(_DWORD *)(a1 + 340);
LABEL_38:
  *v36 = a2;
  *((_DWORD *)v36 + 2) = 0;
  v33 = (_QWORD *)(a1 + 352);
  v34 = *(unsigned int *)(a1 + 360);
  *((_DWORD *)v36 + 2) = v34;
  if (v34 >= *(_DWORD *)(a1 + 364))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v33, (void *)(a1 + 368), v34 + 1, 16);
    v42 = (unsigned int **)(*(_QWORD *)(a1 + 352) + 16 * *(unsigned int *)(a1 + 360));
    *v42 = a2;
    v42[1] = v22;
    LODWORD(v34) = *(_DWORD *)(a1 + 360);
  }
  else
  {
    v35 = (unsigned int **)(*v33 + 16 * v34);
    *v35 = a2;
    v35[1] = v22;
  }
  *(_DWORD *)(a1 + 360) = v34 + 1;
LABEL_41:
  if ((a2[11] & 0x7FFFFF) != 0)
  {
    v49 = a1;
    mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::markNestedOpsIgnored(mlir::Operation *)::$_0>, (uint64_t)&v49, 1);
  }
}

__n128 mlir::detail::ConversionPatternRewriterImpl::notifyBlockIsBeingErased(mlir::detail::ConversionPatternRewriterImpl *this, mlir::Block *a2)
{
  unint64_t Parent;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  mlir::Block *v20;
  unint64_t v21;
  uint64_t v22;

  Parent = mlir::Block::getParent(a2);
  v5 = *(_QWORD *)(mlir::Block::getParent(a2) + 8);
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    v7 = v5 == (_QWORD)a2 + 8;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = v6 - 8;
  v19 = 1;
  v20 = a2;
  v21 = Parent;
  v22 = v8;
  v9 = *((unsigned int *)this + 106);
  v10 = *((_QWORD *)this + 52);
  v11 = &v19;
  if (v9 >= *((_DWORD *)this + 107))
  {
    v15 = (char *)this + 416;
    v16 = v9 + 1;
    v17 = v10 + 40 * v9 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v15, (char *)this + 432, v16, 40);
      v10 = *((_QWORD *)this + 52);
      v11 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v15, (char *)this + 432, v16, 40);
      v10 = *((_QWORD *)this + 52);
      v11 = &v19;
    }
  }
  v12 = v10 + 40 * *((unsigned int *)this + 106);
  result = *(__n128 *)v11;
  v14 = *((_OWORD *)v11 + 1);
  *(_QWORD *)(v12 + 32) = *((_QWORD *)v11 + 4);
  *(__n128 *)v12 = result;
  *(_OWORD *)(v12 + 16) = v14;
  ++*((_DWORD *)this + 106);
  return result;
}

__n128 mlir::detail::ConversionPatternRewriterImpl::notifyBlockBeingInlined(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ZinIrHalH13g *v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrHalH13g *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char *v19;
  _QWORD v20[5];

  v20[1] = a2;
  v5 = (ZinIrHalH13g *)(a3 + 32);
  if (*(_QWORD *)(a3 + 32) == a3 + 32)
  {
    v7 = 0;
  }
  else
  {
    ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(a3 + 40));
    v7 = v6;
    v8 = *(ZinIrHalH13g **)(a3 + 32);
    if (v8 != v5)
    {
      ZinIrHalH13g::~ZinIrHalH13g(v8);
      goto LABEL_6;
    }
  }
  v9 = 0;
LABEL_6:
  v20[0] = 2;
  v20[2] = a3;
  v20[3] = v7;
  v20[4] = v9;
  v10 = *(unsigned int *)(a1 + 424);
  v11 = *(_QWORD *)(a1 + 416);
  v12 = (char *)v20;
  if (v10 >= *(_DWORD *)(a1 + 428))
  {
    v16 = a1 + 416;
    v17 = v10 + 1;
    v18 = v11 + 40 * v10 > (unint64_t)v20;
    if (v11 <= (unint64_t)v20 && v18)
    {
      v19 = (char *)v20 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(a1 + 432), v17, 40);
      v11 = *(_QWORD *)(a1 + 416);
      v12 = &v19[v11];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16, (void *)(a1 + 432), v17, 40);
      v11 = *(_QWORD *)(a1 + 416);
      v12 = (char *)v20;
    }
  }
  v13 = v11 + 40 * *(unsigned int *)(a1 + 424);
  result = *(__n128 *)v12;
  v15 = *((_OWORD *)v12 + 1);
  *(_QWORD *)(v13 + 32) = *((_QWORD *)v12 + 4);
  *(__n128 *)v13 = result;
  *(_OWORD *)(v13 + 16) = v15;
  ++*(_DWORD *)(a1 + 424);
  return result;
}

__n128 mlir::detail::ConversionPatternRewriterImpl::notifyRegionIsBeingInlinedBefore(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  __n128 result;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  char *v29;
  int v30;
  _QWORD *v31;
  _QWORD **v32;
  _QWORD *v33;

  v2 = *a2;
  if (*a2 != a2)
  {
    v5 = v2 == 0;
    v8 = (_QWORD *)*v2;
    v6 = v2 - 1;
    v7 = v8;
    if (v5)
      v9 = 0;
    else
      v9 = v6;
    if (v7 != a2)
    {
      v10 = (unint64_t *)(a1 + 416);
      v11 = *(_DWORD *)(a1 + 424);
      while (1)
      {
        v12 = v9;
        if (v7)
          v9 = v7 - 1;
        else
          v9 = 0;
        v30 = 3;
        v31 = v12;
        v32 = a2;
        v33 = v9;
        v13 = *(_QWORD *)(a1 + 416);
        if (v11 >= *(_DWORD *)(a1 + 428))
        {
          v18 = v11 + 1;
          v19 = v13 + 40 * v11 > (unint64_t)&v30;
          if (v13 <= (unint64_t)&v30 && v19)
          {
            v20 = (char *)&v30 - v13;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 416, (void *)(a1 + 432), v18, 40);
            v13 = *v10;
            v14 = (int *)&v20[*v10];
            goto LABEL_12;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 416, (void *)(a1 + 432), v18, 40);
          v13 = *v10;
        }
        v14 = &v30;
LABEL_12:
        v15 = v13 + 40 * *(unsigned int *)(a1 + 424);
        v16 = *(_OWORD *)v14;
        v17 = *((_OWORD *)v14 + 1);
        *(_QWORD *)(v15 + 32) = *((_QWORD *)v14 + 4);
        *(_OWORD *)v15 = v16;
        *(_OWORD *)(v15 + 16) = v17;
        v11 = *(_DWORD *)(a1 + 424) + 1;
        *(_DWORD *)(a1 + 424) = v11;
        v7 = (_QWORD *)*v7;
        if (v7 == a2)
          goto LABEL_19;
      }
    }
    v11 = *(_DWORD *)(a1 + 424);
LABEL_19:
    v30 = 3;
    v31 = v9;
    v32 = a2;
    v33 = 0;
    v21 = *(_QWORD *)(a1 + 416);
    v22 = &v30;
    if (v11 >= *(_DWORD *)(a1 + 428))
    {
      v26 = a1 + 416;
      v27 = v11 + 1;
      v28 = v21 + 40 * v11 > (unint64_t)&v30;
      if (v21 <= (unint64_t)&v30 && v28)
      {
        v29 = (char *)&v30 - v21;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(a1 + 432), v27, 40);
        v21 = *(_QWORD *)(a1 + 416);
        v22 = (int *)&v29[v21];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v26, (void *)(a1 + 432), v27, 40);
        v21 = *(_QWORD *)(a1 + 416);
        v22 = &v30;
      }
    }
    v23 = v21 + 40 * *(unsigned int *)(a1 + 424);
    result = *(__n128 *)v22;
    v25 = *((_OWORD *)v22 + 1);
    *(_QWORD *)(v23 + 32) = *((_QWORD *)v22 + 4);
    *(__n128 *)v23 = result;
    *(_OWORD *)(v23 + 16) = v25;
    ++*(_DWORD *)(a1 + 424);
  }
  return result;
}

void mlir::ConversionPatternRewriter::~ConversionPatternRewriter(mlir::ConversionPatternRewriter *this)
{
  mlir::detail::ConversionPatternRewriterImpl *v2;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  mlir::detail::ConversionPatternRewriterImpl *v2;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'mlir::ConversionPatternRewriter::~ConversionPatternRewriter(mlir::ConversionPatternRewriter *this)
{
  mlir::detail::ConversionPatternRewriterImpl *v2;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  ZinIrHalH13g::~ZinIrHalH13g((mlir::ConversionPatternRewriter *)((char *)this - 40));
}

{
  mlir::detail::ConversionPatternRewriterImpl *v2;

  v2 = (mlir::detail::ConversionPatternRewriterImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v2);
  ZinIrHalH13g::~ZinIrHalH13g((mlir::ConversionPatternRewriter *)((char *)this - 40));
  JUMPOUT(0x20BD002F8);
}

void mlir::ConversionPatternRewriter::replaceOp(mlir::ConversionPatternRewriter *this, mlir::Operation *a2, mlir::Operation *a3)
{
  char *v5;
  unint64_t v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a3 + 9))
    v5 = (char *)a3 - 16;
  else
    v5 = 0;
  mlir::ValueRange::ValueRange(v6, (uint64_t)v5, *((unsigned int *)a3 + 9));
  mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(*((_QWORD *)this + 7), (unsigned int *)a2, v6[0], v6[1]);
}

void mlir::ConversionPatternRewriter::replaceOp(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(*(_QWORD *)(a1 + 56), a2, a3, a4);
}

void mlir::ConversionPatternRewriter::eraseOp(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7[2];
  void *v8;
  int v9;
  int v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)a2 + 9);
  v8 = v11;
  v10 = 1;
  if (v4 < 2)
  {
    if ((_DWORD)v4 == 1)
      v11[0] = 0;
    v5 = v11;
  }
  else
  {
    v9 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v8, v11, v4, 8);
    bzero(v8, 8 * v4);
    v5 = v8;
  }
  v9 = v4;
  v6 = *((_QWORD *)this + 7);
  mlir::ValueRange::ValueRange(v7, (uint64_t)v5, v4);
  mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(v6, (unsigned int *)a2, v7[0], v7[1]);
  if (v8 != v11)
    free(v8);
}

void mlir::ConversionPatternRewriter::eraseBlock(mlir::detail::ConversionPatternRewriterImpl **this, mlir::Block *a2)
{
  ZinIrHalH13g *i;
  mlir::Operation *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t Parent;
  uint64_t v10;
  _QWORD *v11;

  mlir::detail::ConversionPatternRewriterImpl::notifyBlockIsBeingErased(this[7], a2);
  for (i = (ZinIrHalH13g *)*((_QWORD *)a2 + 5);
        i != (mlir::Block *)((char *)a2 + 32);
        i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
  {
    ZinIrHalH13g::~ZinIrHalH13g(i);
    mlir::ConversionPatternRewriter::eraseOp((mlir::ConversionPatternRewriter *)this, v5);
  }
  v6 = (char *)a2 + 8;
  if (!a2)
    v6 = 0;
  v7 = v6 - 8;
  if (a2)
    v8 = (uint64_t)v7;
  else
    v8 = 0;
  Parent = mlir::Block::getParent(a2);
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(Parent, v8);
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD **)(v8 + 16);
  *v11 = v10;
  *(_QWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
}

uint64_t mlir::ConversionPatternRewriter::replaceUsesOfBlockArgument(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(v6 + 376);
  if (v7 >= *(_DWORD *)(v6 + 380))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 368, (void *)(v6 + 384), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 376);
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 368) + 8 * v7) = a2;
  ++*(_DWORD *)(v6 + 376);
  v8 = *(_QWORD *)(a1 + 56);
  do
  {
    v9 = a2;
    v12 = a2;
    v13 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v8, &v12, &v13))break;
    if (v13 == (_QWORD *)(*(_QWORD *)v8 + 16 * *(unsigned int *)(v8 + 16)))
      break;
    a2 = v13[1];
  }
  while (a2);
  v12 = v9;
  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v8, &v12, &v13);
  v11 = v13;
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v8, (uint64_t)&v12, &v12, v13);
    v11 = (_QWORD *)result;
    *(_QWORD *)result = v12;
    *(_QWORD *)(result + 8) = 0;
  }
  v11[1] = a3;
  return result;
}

__n128 mlir::ConversionPatternRewriter::notifyBlockCreated(mlir::ConversionPatternRewriter *this, mlir::Block *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  int v13;
  mlir::Block *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 7);
  v13 = 0;
  v14 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(v2 + 424);
  v4 = *(_QWORD *)(v2 + 416);
  v5 = (char *)&v13;
  if (v3 >= *(_DWORD *)(v2 + 428))
  {
    v9 = v2 + 416;
    v10 = v3 + 1;
    v11 = v4 + 40 * v3 > (unint64_t)&v13;
    if (v4 <= (unint64_t)&v13 && v11)
    {
      v12 = (char *)&v13 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = &v12[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = (char *)&v13;
    }
  }
  v6 = v4 + 40 * *(unsigned int *)(v2 + 424);
  result = *(__n128 *)v5;
  v8 = *((_OWORD *)v5 + 1);
  *(_QWORD *)(v6 + 32) = *((_QWORD *)v5 + 4);
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(v2 + 424);
  return result;
}

__n128 `non-virtual thunk to'mlir::ConversionPatternRewriter::notifyBlockCreated(mlir::ConversionPatternRewriter *this, mlir::Block *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  int v13;
  mlir::Block *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 2);
  v13 = 0;
  v14 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(v2 + 424);
  v4 = *(_QWORD *)(v2 + 416);
  v5 = (char *)&v13;
  if (v3 >= *(_DWORD *)(v2 + 428))
  {
    v9 = v2 + 416;
    v10 = v3 + 1;
    v11 = v4 + 40 * v3 > (unint64_t)&v13;
    if (v4 <= (unint64_t)&v13 && v11)
    {
      v12 = (char *)&v13 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = &v12[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v2 + 432), v10, 40);
      v4 = *(_QWORD *)(v2 + 416);
      v5 = (char *)&v13;
    }
  }
  v6 = v4 + 40 * *(unsigned int *)(v2 + 424);
  result = *(__n128 *)v5;
  v8 = *((_OWORD *)v5 + 1);
  *(_QWORD *)(v6 + 32) = *((_QWORD *)v5 + 4);
  *(__n128 *)v6 = result;
  *(_OWORD *)(v6 + 16) = v8;
  ++*(_DWORD *)(v2 + 424);
  return result;
}

uint64_t mlir::ConversionPatternRewriter::splitBlock(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  char *v17;
  _QWORD v18[5];

  v5 = mlir::RewriterBase::splitBlock(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 56);
  v18[0] = 4;
  v18[1] = v5;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = a2;
  v7 = *(unsigned int *)(v6 + 424);
  v8 = *(_QWORD *)(v6 + 416);
  v9 = (char *)v18;
  if (v7 >= *(_DWORD *)(v6 + 428))
  {
    v14 = v6 + 416;
    v15 = v7 + 1;
    v16 = v8 + 40 * v7 > (unint64_t)v18;
    if (v8 <= (unint64_t)v18 && v16)
    {
      v17 = (char *)v18 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v6 + 432), v15, 40);
      v8 = *(_QWORD *)(v6 + 416);
      v9 = &v17[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v6 + 432), v15, 40);
      v8 = *(_QWORD *)(v6 + 416);
      v9 = (char *)v18;
    }
  }
  v10 = v8 + 40 * *(unsigned int *)(v6 + 424);
  v11 = *(_OWORD *)v9;
  v12 = *((_OWORD *)v9 + 1);
  *(_QWORD *)(v10 + 32) = *((_QWORD *)v9 + 4);
  *(_OWORD *)v10 = v11;
  *(_OWORD *)(v10 + 16) = v12;
  ++*(_DWORD *)(v6 + 424);
  return v5;
}

void mlir::ConversionPatternRewriter::inlineBlockBefore(uint64_t *a1, _QWORD *a2, uint64_t a3, ZinIrHalH13g *a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  ZinIrHalH13g *v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrHalH13g *i;
  mlir::Operation *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Parent;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  mlir::detail::ConversionPatternRewriterImpl::notifyBlockBeingInlined(a1[7], a3, (uint64_t)a2);
  v13 = (unint64_t *)a2[6];
  v12 = (unint64_t *)a2[7];
  v31 = v13;
  v32 = a5;
  v33 = 0;
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      if (v32 == a5 && v14 == a6)
        break;
      v16 = mlir::ValueRange::dereference_iterator(&v32, v14);
      mlir::ConversionPatternRewriter::replaceUsesOfBlockArgument((uint64_t)a1, *v13, v16);
      v13 = v31 + 1;
      v14 = v33 + 1;
      v31 = v13;
      ++v33;
    }
    while (v13 != v12);
  }
  v17 = (ZinIrHalH13g *)(a2 + 4);
  if ((_QWORD *)a2[4] != a2 + 4 && v17 != a4)
  {
    v18 = a3 + 32;
    v19 = (ZinIrHalH13g *)a2[5];
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v18, (uint64_t)(a2 + 4), (uint64_t)v19, (uint64_t)(a2 + 4));
    if (v19 != v17)
    {
      v20 = *(_QWORD *)v17;
      v21 = *(_QWORD *)v19;
      *(_QWORD *)(v21 + 8) = v17;
      *(_QWORD *)v17 = v21;
      v22 = *(_QWORD *)a4;
      *(_QWORD *)(v20 + 8) = a4;
      *(_QWORD *)v19 = v22;
      *(_QWORD *)(v22 + 8) = v19;
      *(_QWORD *)a4 = v20;
    }
  }
  mlir::detail::ConversionPatternRewriterImpl::notifyBlockIsBeingErased((mlir::detail::ConversionPatternRewriterImpl *)a1[7], (mlir::Block *)a2);
  for (i = (ZinIrHalH13g *)a2[5]; i != v17; i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
  {
    ZinIrHalH13g::~ZinIrHalH13g(i);
    mlir::ConversionPatternRewriter::eraseOp((mlir::ConversionPatternRewriter *)a1, v24);
  }
  v25 = a2 + 1;
  if (!a2)
    v25 = 0;
  v26 = (uint64_t)(v25 - 1);
  if (a2)
    v27 = v26;
  else
    v27 = 0;
  Parent = mlir::Block::getParent((mlir::Block *)a2);
  llvm::ilist_traits<mlir::Block>::removeNodeFromList(Parent, v27);
  v29 = *(_QWORD *)(v27 + 8);
  v30 = *(_QWORD **)(v27 + 16);
  *v30 = v29;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
}

uint64_t mlir::ConversionPatternRewriter::inlineRegionBefore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  mlir::detail::ConversionPatternRewriterImpl::notifyRegionIsBeingInlinedBefore(*(_QWORD *)(a1 + 56), (_QWORD **)a2);
  return mlir::RewriterBase::inlineRegionBefore(a1, a2, a3, a4);
}

void mlir::ConversionPatternRewriter::cloneRegionBefore(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *i;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  ZinIrHalH13g *v38;
  ZinIrHalH13g *v39;
  ZinIrHalH13g *v40;
  mlir::ForwardIterator *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  char *v45;
  void *v46;
  void *v47;
  const void *v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  const void *v54;
  void *__p;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  void *v60;
  _BYTE *v61;
  void *v62;
  void *v63;
  void *v64;
  _BYTE *v65;
  _QWORD v66[5];

  if ((_QWORD *)*a2 == a2)
    return;
  mlir::RewriterBase::cloneRegionBefore(a1, (uint64_t)a2, a3, a4, a5);
  mlir::ForwardDominanceIterator<false>::makeIterable(a2, (uint64_t)&v58);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v52, &v54, (const llvm::SmallPtrSetImplBase *)&v58);
  __p = 0;
  v56 = 0;
  v57 = 0;
  v8 = v60;
  v9 = v61 - (_BYTE *)v60;
  if (v61 != v60)
  {
    if (v9 < 0)
      goto LABEL_58;
    v10 = (char *)operator new(v61 - (_BYTE *)v60);
    __p = v10;
    v56 = v10;
    v57 = &v10[32 * (v9 >> 5)];
    v11 = v9 & 0xFFFFFFFFFFFFFFE0;
    memcpy(v10, v8, v11);
    v56 = &v10[v11];
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v46, &v48, (const llvm::SmallPtrSetImplBase *)&v62);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v12 = v64;
  v13 = v65 - (_BYTE *)v64;
  if (v65 != v64)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      v14 = (char *)operator new(v65 - (_BYTE *)v64);
      v49 = v14;
      v50 = v14;
      v51 = &v14[32 * (v13 >> 5)];
      v15 = v13 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v14, v12, v15);
      i = &v14[v15];
      v50 = &v14[v15];
      goto LABEL_10;
    }
LABEL_58:
    abort();
  }
  v14 = 0;
  for (i = 0; ; i = v50)
  {
LABEL_10:
    if (v56 - (_BYTE *)__p != i - v14)
      goto LABEL_22;
    if (__p == v56)
      break;
    v17 = v14 + 16;
    v18 = (char *)__p + 16;
    while (1)
    {
      v19 = v18 - 16;
      if (*((_QWORD *)v18 - 2) != *((_QWORD *)v17 - 2))
        break;
      v20 = v17[8];
      if (v18[8])
        v21 = v20 == 0;
      else
        v21 = 1;
      if (v21)
      {
        if ((v18[8] != 0) != (v20 != 0))
          break;
      }
      else if (*((_QWORD *)v18 - 1) != *((_QWORD *)v17 - 1) || *(_QWORD *)v18 != *(_QWORD *)v17)
      {
        break;
      }
      v17 += 32;
      v18 += 32;
      if (v19 + 32 == v56)
        goto LABEL_41;
    }
LABEL_22:
    v22 = *(_QWORD *)(a5 + 24);
    v23 = *(unsigned int *)(a5 + 40);
    if ((_DWORD)v23)
    {
      v24 = *((_QWORD *)v56 - 4);
      LODWORD(v25) = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
      v26 = (uint64_t *)(v22 + 16 * v25);
      v27 = *v26;
      if (*v26 == v24)
        goto LABEL_29;
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v23 - 1);
        v27 = *(_QWORD *)(v22 + 16 * v25);
        if (v27 == v24)
        {
          v26 = (uint64_t *)(v22 + 16 * v25);
          goto LABEL_29;
        }
      }
    }
    v26 = (uint64_t *)(v22 + 16 * v23);
LABEL_29:
    if (v26 == (uint64_t *)(v22 + 16 * v23))
      v30 = 0;
    else
      v30 = v26[1];
    v31 = *(_QWORD *)(a1 + 56);
    LODWORD(v66[0]) = 0;
    v66[1] = v30;
    memset(&v66[2], 0, 24);
    v32 = *(unsigned int *)(v31 + 424);
    v33 = *(_QWORD *)(v31 + 416);
    if (v32 < *(_DWORD *)(v31 + 428))
      goto LABEL_33;
    v42 = v31 + 416;
    v43 = v32 + 1;
    v44 = v33 + 40 * v32 > (unint64_t)v66;
    if (v33 > (unint64_t)v66 || !v44)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v42, (void *)(v31 + 432), v43, 40);
      v33 = *(_QWORD *)(v31 + 416);
LABEL_33:
      v34 = (char *)v66;
      goto LABEL_34;
    }
    v45 = (char *)v66 - v33;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v42, (void *)(v31 + 432), v43, 40);
    v33 = *(_QWORD *)(v31 + 416);
    v34 = &v45[v33];
LABEL_34:
    v35 = v33 + 40 * *(unsigned int *)(v31 + 424);
    v36 = *(_OWORD *)v34;
    v37 = *((_OWORD *)v34 + 1);
    *(_QWORD *)(v35 + 32) = *((_QWORD *)v34 + 4);
    *(_OWORD *)v35 = v36;
    *(_OWORD *)(v35 + 16) = v37;
    ++*(_DWORD *)(v31 + 424);
    v66[0] = a1;
    v38 = (ZinIrHalH13g *)(v30 + 32);
    v39 = *(ZinIrHalH13g **)(v30 + 40);
    if (v39 != (ZinIrHalH13g *)(v30 + 32))
    {
      do
      {
        v40 = (ZinIrHalH13g *)*((_QWORD *)v39 + 1);
        ZinIrHalH13g::~ZinIrHalH13g(v39);
        mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(v41, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ConversionPatternRewriter::cloneRegionBefore(mlir::Region &,mlir::Region &,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>,mlir::IRMapping &)::$_0>, (uint64_t)v66, 0);
        v39 = v40;
      }
      while (v40 != v38);
    }
    llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext((uint64_t)&v52);
    v14 = v49;
  }
LABEL_41:
  if (v14)
  {
    v50 = v14;
    operator delete(v14);
  }
  if (v47 != v46)
    free(v47);
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
  if (v53 != v52)
    free(v53);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v63 != v62)
    free(v63);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v59 != v58)
    free(v59);
}

void mlir::ForwardDominanceIterator<false>::makeIterable(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[64];
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if ((_QWORD *)*a1 == a1)
  {
    v18 = 0;
    v19 = 0;
    memset(v17, 0, sizeof(v17));
    v14 = &v17[8];
    v15 = &v17[8];
    v16 = 8;
    v20 = 0;
    v21 = 0;
    memset(v9, 0, sizeof(v9));
    v6 = (char *)v9 + 8;
    v7 = (char *)v9 + 8;
    v8 = 8;
    v10 = 0;
    __p = 0;
    v12 = 0;
    v13 = 0;
    llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v14, (uint64_t)&v6, (uint64_t)&v22);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    if (v7 != v6)
      free(v7);
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v15 != v14)
      free(v15);
  }
  else
  {
    v3 = a1[1];
    if (v3)
      v4 = v3 - 8;
    else
      v4 = 0;
    v5 = v4;
    llvm::depth_first<mlir::Block *>(&v5, (uint64_t)&v22);
  }
  llvm::make_pointee_range<llvm::iterator_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>> &,llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((llvm::SmallPtrSetImplBase *)&v22, a2);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v27 != v26)
    free(v27);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v23 != v22)
    free(v23);
}

void mlir::ConversionPatternRewriter::notifyOperationInserted(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 7);
  v4 = *(unsigned int *)(v3 + 208);
  if (v4 >= *(_DWORD *)(v3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 200, (void *)(v3 + 216), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 208);
}

void `non-virtual thunk to'mlir::ConversionPatternRewriter::notifyOperationInserted(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 2);
  v4 = *(unsigned int *)(v3 + 208);
  if (v4 >= *(_DWORD *)(v3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 200, (void *)(v3 + 216), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 208);
}

void mlir::ConversionPatternRewriter::startRootUpdate(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v3;
  unsigned int v4;
  char *v5;
  int v6;
  void *v7;
  unint64_t v8;

  v3 = *((_QWORD *)this + 7);
  v4 = *(_DWORD *)(v3 + 640);
  if (v4 >= *(_DWORD *)(v3 + 644))
  {
    v8 = 0;
    v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v3 + 632, (void *)(v3 + 648), 0, 136, &v8);
    v6 = v8;
    v7 = *(void **)(v3 + 632);
    if (v7 != (void *)(v3 + 648))
      free(v7);
    *(_QWORD *)(v3 + 632) = v5;
    *(_DWORD *)(v3 + 644) = v6;
  }
  else
  {
  }
  ++*(_DWORD *)(v3 + 640);
}

void mlir::ConversionPatternRewriter::cancelRootUpdate(mlir::ConversionPatternRewriter *this, mlir::Operation *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v2 = *((_QWORD *)this + 7);
  v3 = *(_QWORD *)(v2 + 632);
  v4 = 136 * *(unsigned int *)(v2 + 640);
  while (v4)
  {
    v5 = *(mlir::Operation **)(v3 + v4 - 136);
    v4 -= 136;
    if (v5 == a2)
    {
      v3 += v4 + 136;
      break;
    }
  }
  v6 = *(_QWORD *)(v2 + 632);
  v7 = v6 + 136 * (int)(-252645135 * ((unint64_t)(v3 - v6 - 136) >> 3));
  v8 = *(_DWORD *)(v2 + 640);
  v9 = v6 + 136 * v8;
  if (v7 + 136 != v9)
  {
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)(v7 + 136);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 152);
      llvm::SmallVectorImpl<mlir::Value>::operator=(v7 + 24, v7 + 160);
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v7 + 104, v7 + 240);
      v10 = v7 + 272;
      v7 += 136;
    }
    while (v10 != v9);
    v8 = *(_DWORD *)(v2 + 640);
    v6 = *(_QWORD *)(v2 + 632);
  }
  v11 = v8 - 1;
  *(_DWORD *)(v2 + 640) = v8 - 1;
  v12 = v6 + 136 * (v8 - 1);
  v13 = *(void **)(v12 + 104);
  if (v13 != (void *)(v12 + 120))
    free(v13);
  v14 = v6 + 136 * v11;
  v15 = *(void **)(v14 + 24);
  if (v15 != (void *)(v14 + 40))
    free(v15);
}

uint64_t mlir::ConversionPatternRewriter::notifyMatchFailure()
{
  return 0;
}

uint64_t `non-virtual thunk to'mlir::ConversionPatternRewriter::notifyMatchFailure()
{
  return 0;
}

uint64_t mlir::ConversionPattern::matchAndRewrite(mlir::ConversionPattern *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a3 + 7);
  v7 = *(_QWORD *)(v6 + 1224);
  *(_QWORD *)(v6 + 1224) = *((_QWORD *)this + 12);
  v18 = v20;
  v19 = 0x400000000;
  v8 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v9 = *((_QWORD *)a2 + 9);
    v10 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange(v17, v9, v10);
  if (!mlir::detail::ConversionPatternRewriterImpl::remapValues(v6, v11, v12, v8, 1u, v13, v17[0], v17[1], (uint64_t)&v18))
  {
    v14 = 0;
    v15 = v18;
    if (v18 == v20)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = (*(uint64_t (**)(mlir::ConversionPattern *, mlir::Operation *, void *, _QWORD, mlir::PatternRewriter *))(*(_QWORD *)this + 56))(this, a2, v18, v19, a3);
  v15 = v18;
  if (v18 != v20)
LABEL_5:
    free(v15);
LABEL_6:
  *(_QWORD *)(v6 + 1224) = v7;
  return v14;
}

uint64_t mlir::TypeConverter::convertType(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v5 = v7;
  v6 = 0x100000000;
  if (!mlir::TypeConverter::convertType(a1, a2, (uint64_t)&v5) || (_DWORD)v6 != 1)
  {
    v3 = 0;
    if (v5 == v7)
      return v3;
    goto LABEL_8;
  }
  v3 = *(_QWORD *)v5;
  if (v5 != v7)
LABEL_8:
    free(v5);
  return v3;
}

BOOL mlir::TypeConverter::isLegal(mlir::TypeConverter *this, mlir::Operation *a2)
{
  mlir::detail::OpResultImpl *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  char *v8;
  mlir::detail::OpResultImpl *v9;
  uint64_t v10;
  mlir::detail::OpResultImpl *v11;
  uint64_t v12;
  uint64_t v13[4];
  uint64_t v14[2];

  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    v4 = (mlir::detail::OpResultImpl *)*((_QWORD *)a2 + 9);
    v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v9 = v4;
  v10 = v5;
  mlir::OperandRange::getTypes((uint64_t *)&v9, v13);
  result = _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_12OperandRangeEPNS1_9OpOperandENS1_5ValueES9_S9_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISI_PNS1_9OperationEEE5valueEbE4typeEOSI_EUlSJ_E_EEbSI_SI_T0_(v13[0], v13[1], v13[2], v13[3], (uint64_t)this);
  if ((_DWORD)result)
  {
    v7 = *((unsigned int *)a2 + 9);
    v8 = (char *)a2 - 16;
    if (!(_DWORD)v7)
      v8 = 0;
    v14[0] = (uint64_t)v8;
    v14[1] = v7;
    mlir::OperandRange::getTypes(v14, (uint64_t *)&v9);
    return _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_11ResultRangeEPNS1_6detail12OpResultImplENS1_8OpResultESA_SA_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISJ_PNS1_9OperationEEE5valueEbE4typeEOSJ_EUlSK_E_EEbSJ_SJ_T0_(v9, v10, v11, v12, (uint64_t)this);
  }
  return result;
}

BOOL mlir::TypeConverter::isSignatureLegal(uint64_t a1, uint64_t a2)
{
  uint64_t Inputs;
  uint64_t v4;
  uint64_t v5;
  uint64_t Results;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  _BOOL8 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v20);
  v5 = v4;
  Results = mlir::FunctionType::getResults((mlir::FunctionType *)&v20);
  v8 = v5 == 0;
  v9 = v7 == 0;
  if (!(v5 | v7))
    return 1;
  v10 = (void **)Results;
  v11 = Inputs + 8 * v5;
  v12 = Results + 8 * v7;
  while (1)
  {
    if (v9)
      v13 = 0;
    else
      v13 = v10;
    if (Inputs != 0 && !v8)
      v13 = (void **)Inputs;
    v14 = *v13;
    v21 = v23;
    v22 = 0x100000000;
    v15 = 0;
    if (mlir::TypeConverter::convertType(a1, v14, (uint64_t)&v21) && (_DWORD)v22 == 1)
      v15 = *(void **)v21;
    if (v21 != v23)
      free(v21);
    result = v15 == v14;
    if (v15 != v14)
      break;
    if (v8)
      v18 = (uint64_t)v10;
    else
      v18 = Inputs;
    v19 = v18 + 8;
    if (v8)
      v10 = (void **)v19;
    else
      Inputs = v19;
    v9 = v10 == (void **)v12;
    v8 = Inputs == v11;
    if (Inputs == v11 && v10 == (void **)v12)
      return 1;
  }
  return result;
}

uint64_t mlir::TypeConverter::convertSignatureArg(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *__src;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  __src = v18;
  v17 = 0x100000000;
  if (!mlir::TypeConverter::convertType(a1, a3, (uint64_t)&__src))
  {
    v13 = 0;
    v14 = __src;
    if (__src == v18)
      return v13;
    goto LABEL_8;
  }
  v6 = v17;
  if ((_DWORD)v17)
  {
    v7 = __src;
    v8 = *(_QWORD *)a4 + 32 * a2;
    v9 = *(unsigned __int8 *)(v8 + 24);
    *(_QWORD *)v8 = *(unsigned int *)(a4 + 152);
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(v8 + 16) = 0;
    if (v9)
    {
      v10 = 8 * v6;
      v11 = *(unsigned int *)(a4 + 152);
      v12 = v11 + v6;
      if (v11 + v6 <= (unint64_t)*(unsigned int *)(a4 + 156))
      {
LABEL_6:
        memcpy((void *)(*(_QWORD *)(a4 + 144) + 8 * v11), v7, v10);
        *(_DWORD *)(a4 + 152) += v6;
        goto LABEL_7;
      }
    }
    else
    {
      *(_BYTE *)(v8 + 24) = 1;
      v10 = 8 * v6;
      v11 = *(unsigned int *)(a4 + 152);
      v12 = v11 + v6;
      if (v11 + v6 <= (unint64_t)*(unsigned int *)(a4 + 156))
        goto LABEL_6;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 144, (void *)(a4 + 160), v12, 8);
    v11 = *(unsigned int *)(a4 + 152);
    goto LABEL_6;
  }
LABEL_7:
  v13 = 1;
  v14 = __src;
  if (__src != v18)
LABEL_8:
    free(v14);
  return v13;
}

void mlir::TypeConverter::convertBlockSignature(mlir::TypeConverter *this@<X0>, mlir::Block *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t ArgumentTypes;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  char v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *__src;
  uint64_t v34;
  _BYTE v35[128];
  void *v36;
  uint64_t v37;
  _BYTE v38[32];
  unint64_t v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6);
  v7 = v6 >> 3;
  __src = v35;
  v34 = 0x400000000;
  if ((v6 >> 3))
  {
    v8 = (v6 >> 3);
    if (v7 < 5)
    {
      v9 = 0;
      v10 = v35;
      if (!v8)
      {
LABEL_12:
        LODWORD(v34) = v7;
        goto LABEL_13;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v35, (v6 >> 3), 32);
      v9 = v34;
      v10 = __src;
      if (v34 == v8)
        goto LABEL_12;
    }
    v11 = 32 * v9;
    v12 = &v10[32 * v9];
    v13 = 32 * v8 - 32 - v11;
    if (!v13)
      goto LABEL_10;
    v14 = (v13 >> 5) + 1;
    v12 += 32 * (v14 & 0xFFFFFFFFFFFFFFELL);
    v15 = &v10[v11 + 32];
    v16 = v14 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v15 - 32) = 0;
      *v15 = 0;
      *(v15 - 8) = 0;
      v15[24] = 0;
      v15 += 64;
      v16 -= 2;
    }
    while (v16);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_10:
      v17 = &v10[32 * v8];
      do
      {
        *v12 = 0;
        v12[24] = 0;
        v12 += 32;
      }
      while (v12 != v17);
    }
    goto LABEL_12;
  }
LABEL_13:
  v36 = v38;
  v37 = 0x400000000;
  ArgumentTypes = mlir::Block::getArgumentTypes(a2);
  mlir::ValueRange::ValueRange(v39, ArgumentTypes, (v19 - ArgumentTypes) >> 3);
  mlir::TypeRange::TypeRange((unint64_t *)&v31, v39[0], v39[1]);
  v20 = v32;
  if (!v32)
  {
LABEL_17:
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x400000000;
    v24 = v34;
    if ((_DWORD)v34 && &__src != (void **)a3)
    {
      if (__src == v35)
      {
        v27 = v34;
        if (v34 < 5
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v34, 32),
              (v27 = v34) != 0))
        {
          memcpy(*(void **)a3, __src, 32 * v27);
        }
        *(_DWORD *)(a3 + 8) = v24;
      }
      else
      {
        *(_QWORD *)a3 = __src;
        v25 = HIDWORD(v34);
        *(_DWORD *)(a3 + 8) = v24;
        *(_DWORD *)(a3 + 12) = v25;
        __src = v35;
        HIDWORD(v34) = 0;
      }
      LODWORD(v34) = 0;
    }
    *(_QWORD *)(a3 + 144) = a3 + 160;
    *(_QWORD *)(a3 + 152) = 0x400000000;
    v26 = 1;
    if (&__src == (void **)a3)
      goto LABEL_38;
    v28 = v37;
    if (!(_DWORD)v37)
      goto LABEL_38;
    if (v36 != v38)
    {
      *(_QWORD *)(a3 + 144) = v36;
      v29 = HIDWORD(v37);
      *(_DWORD *)(a3 + 152) = v28;
      *(_DWORD *)(a3 + 156) = v29;
      v36 = v38;
      HIDWORD(v37) = 0;
LABEL_37:
      LODWORD(v37) = 0;
      v26 = 1;
      goto LABEL_38;
    }
    if (v37 < 5)
    {
      v30 = v37;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 144, (void *)(a3 + 160), v37, 8);
      v30 = v37;
      if (!(_DWORD)v37)
        goto LABEL_36;
    }
    memcpy(*(void **)(a3 + 144), v36, 8 * v30);
LABEL_36:
    *(_DWORD *)(a3 + 152) = v28;
    goto LABEL_37;
  }
  v21 = 0;
  v22 = v31;
  while (1)
  {
    v23 = (void *)mlir::TypeRange::dereference_iterator(v22, v21);
    if (!mlir::TypeConverter::convertSignatureArg((uint64_t)this, v21, v23, (uint64_t)&__src))
      break;
    if (v20 == ++v21)
      goto LABEL_17;
  }
  v26 = 0;
  *(_BYTE *)a3 = 0;
LABEL_38:
  *(_BYTE *)(a3 + 192) = v26;
  if (v36 != v38)
    free(v36);
  if (__src != v35)
    free(__src);
}

void mlir::populateFunctionOpInterfaceTypeConversionPattern(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;

  v8 = *a3;
  v9 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v43, 1);
  mlir::Pattern::Pattern(v9 + 8, a1, a2, (__int16)v43, v8, 0, 0);
  *(_QWORD *)(v9 + 96) = a4;
  *(_QWORD *)v9 = &off_24C02B170;
  if (*(_QWORD *)(v9 + 72))
  {
    v10 = *(unsigned int *)(v9 + 88);
    if (v10 <= *(_DWORD *)(v9 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 80, (void *)(v9 + 96), v10, 16);
    *(_DWORD *)(v9 + 88) = *(_DWORD *)(v9 + 88);
    v12 = (char *)a3[2];
    v11 = a3[3];
    if ((unint64_t)v12 < v11)
      goto LABEL_4;
    goto LABEL_15;
  }
  v43 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FunctionOpInterfaceSignatureConversion]";
  v44 = 111;
  v14 = llvm::StringRef::find((uint64_t *)&v43, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44 >= v14)
    v15 = v14;
  else
    v15 = v44;
  v16 = &v43[v15];
  v17 = v44 - v15;
  if (v44 - v15 >= 0x12)
    v18 = 18;
  else
    v18 = v44 - v15;
  v19 = &v16[v18];
  v20 = v17 - v18;
  if (v20 >= v20 - 1)
    --v20;
  *(_QWORD *)(v9 + 64) = v19;
  *(_QWORD *)(v9 + 72) = v20;
  v10 = *(unsigned int *)(v9 + 88);
  if (v10 > *(_DWORD *)(v9 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v9 + 88) = v10;
  v12 = (char *)a3[2];
  v11 = a3[3];
  if ((unint64_t)v12 < v11)
  {
LABEL_4:
    *(_QWORD *)v12 = v9;
    v13 = (uint64_t)(v12 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v21 = (char *)a3[1];
  v22 = (v12 - v21) >> 3;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 61)
    abort();
  v24 = v11 - (_QWORD)v21;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = (char *)operator new(8 * v25);
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v9;
    v13 = (uint64_t)(v27 + 1);
    v29 = (char *)(v12 - v21);
    if (v12 != v21)
      goto LABEL_24;
  }
  else
  {
    v26 = 0;
    v27 = (uint64_t *)(8 * v22);
    v28 = 0;
    *(_QWORD *)(8 * v22) = v9;
    v13 = 8 * v22 + 8;
    v29 = (char *)(v12 - v21);
    if (v12 != v21)
    {
LABEL_24:
      v30 = (unint64_t)(v29 - 8);
      if (v30 < 0x78
        || &v12[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v27
        && &v26[v12 - v21 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      {
        goto LABEL_44;
      }
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v33 = &v12[-v32];
      v27 = (uint64_t *)((char *)v27 - v32);
      v34 = &v26[8 * v22 - 16];
      v35 = v12 - 16;
      v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *((_OWORD *)v35 - 1);
        v37 = *(_OWORD *)v35;
        *((_OWORD *)v35 - 1) = 0uLL;
        *(_OWORD *)v35 = 0uLL;
        *((_OWORD *)v34 - 1) = v38;
        *(_OWORD *)v34 = v37;
        v34 -= 32;
        v35 -= 32;
        v36 -= 4;
      }
      while (v36);
      v12 = v33;
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v39 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *(_QWORD *)v12 = 0;
          *--v27 = v39;
        }
        while (v12 != v21);
      }
      v12 = (char *)a3[1];
      v40 = (char *)a3[2];
      a3[1] = (uint64_t)v27;
      a3[2] = v13;
      a3[3] = (uint64_t)v28;
      while (v40 != v12)
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        v41 = v42;
        *(_QWORD *)v40 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      }
      goto LABEL_37;
    }
  }
  a3[1] = (uint64_t)v27;
  a3[2] = v13;
  a3[3] = (uint64_t)v28;
LABEL_37:
  if (v12)
    operator delete(v12);
LABEL_39:
  a3[2] = v13;
}

_DWORD *mlir::ConversionTarget::setOpAction(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *result;
  uint64_t v5;

  v5 = a2;
  result = (_DWORD *)llvm::MapVector<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>>,llvm::SmallVector<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,0u>>::operator[](a1 + 8, &v5);
  *result = a3;
  return result;
}

uint64_t llvm::MapVector<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>>,llvm::SmallVector<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,0u>>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  char v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_29;
  v6 = *(_QWORD *)a1;
  v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v5 - 1);
  v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v9 = *v8;
  if (*v8 != v4)
  {
    v18 = 0;
    v19 = 1;
    while (v9 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v9 == -8192;
      if (v20)
        v18 = v8;
      v21 = v7 + v19++;
      v7 = v21 & (v5 - 1);
      v8 = (_QWORD *)(v6 + 16 * v7);
      v9 = *v8;
      if (*v8 == v4)
        goto LABEL_3;
    }
    if (v18)
      v22 = (uint64_t)v18;
    else
      v22 = (uint64_t)v8;
    v23 = *(_DWORD *)(a1 + 8);
    if (4 * v23 + 4 < 3 * v5)
    {
      if (v5 + ~v23 - *(_DWORD *)(a1 + 12) > v5 >> 3)
        goto LABEL_6;
      goto LABEL_30;
    }
LABEL_29:
    v5 *= 2;
LABEL_30:
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v5);
    v24 = *(_DWORD *)(a1 + 16) - 1;
    v25 = v24 & ((v4 >> 4) ^ (v4 >> 9));
    v22 = *(_QWORD *)a1 + 16 * v25;
    v26 = *(_QWORD *)v22;
    if (*(_QWORD *)v22 == v4)
    {
      v11 = v4;
LABEL_7:
      ++*(_DWORD *)(a1 + 8);
      if (v11 != -4096)
        --*(_DWORD *)(a1 + 12);
      *(_QWORD *)v22 = v4;
      *(_DWORD *)(v22 + 8) = 0;
      v31 = *a2;
      v32 = 2;
      v33 = 0;
      v35 = 0;
      llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::push_back(a1 + 24, (unint64_t)&v31);
      v15 = v35;
      if (v35 == v34)
      {
        v16 = 4;
        v15 = v34;
      }
      else
      {
        if (!v35)
        {
LABEL_14:
          v10 = *(_DWORD *)(a1 + 32) - 1;
          *(_DWORD *)(v22 + 8) = v10;
          return *(_QWORD *)(a1 + 24) + 48 * v10 + 8;
        }
        v16 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v12, v13, v14);
      goto LABEL_14;
    }
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v22;
      v30 = v25 + v28++;
      v25 = v30 & v24;
      v22 = *(_QWORD *)a1 + 16 * v25;
      v26 = *(_QWORD *)v22;
      v11 = v4;
      if (*(_QWORD *)v22 == v4)
        goto LABEL_7;
    }
    if (v27)
      v22 = v27;
LABEL_6:
    v11 = *(_QWORD *)v22;
    goto LABEL_7;
  }
LABEL_3:
  v10 = *(_DWORD *)(v6 + 16 * v7 + 8);
  return *(_QWORD *)(a1 + 24) + 48 * v10 + 8;
}

uint64_t *mlir::ConversionTarget::setDialectAction(uint64_t *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  const unsigned __int8 *v9;

  if (a3)
  {
    v5 = a2;
    v6 = a2 + 16 * a3;
    v7 = (uint64_t)(result + 9);
    do
    {
      v8 = *(int8x16_t **)v5;
      v9 = *(const unsigned __int8 **)(v5 + 8);
      v5 += 16;
      result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v7, v8, v9);
      *(_DWORD *)(*result + 8) = a4;
    }
    while (v5 != v6);
  }
  return result;
}

_QWORD *mlir::ConversionTarget::getOpInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  int8x16_t *DialectNamespace;
  const unsigned __int8 *v16;
  int Key;
  uint64_t v18;
  _QWORD *result;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int8x16_t *v28;
  const unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t *v46;
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v43 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (_QWORD *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (_QWORD *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (_QWORD *)(v5 + 16 * v6);
LABEL_8:
  v12 = v8 == (_QWORD *)(v5 + 16 * v6);
  v13 = (unsigned int *)(a1 + 40);
  if (!v12)
    v13 = (unsigned int *)(v8 + 1);
  v14 = *v13;
  if (v14 != *(_DWORD *)(a1 + 40))
  {
    v22 = *(_QWORD *)(a1 + 32);
    v23 = v22 + 48 * v14;
    v24 = *(_BYTE *)(v23 + 12);
    *(_DWORD *)a3 = *(_DWORD *)(v23 + 8);
    *(_BYTE *)(a3 + 4) = v24;
    v26 = *(_QWORD **)(v23 + 40);
    v25 = (_QWORD *)(v23 + 40);
    result = v26;
    if (v26)
    {
      if (result == (_QWORD *)(v22 + 48 * v14 + 16))
      {
        *(_QWORD *)(a3 + 32) = a3 + 8;
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25);
LABEL_35:
        *(_BYTE *)(a3 + 40) = 1;
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
LABEL_33:
      *(_QWORD *)(a3 + 32) = result;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  DialectNamespace = (int8x16_t *)mlir::OperationName::getDialectNamespace((mlir::OperationName *)&v43);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 72), DialectNamespace, v16);
  if (Key != -1)
  {
    v18 = Key;
    if (Key != (unint64_t)*(unsigned int *)(a1 + 80))
    {
      v27 = *(_QWORD *)(a1 + 72);
      v49 = 0;
      v28 = (int8x16_t *)mlir::OperationName::getDialectNamespace((mlir::OperationName *)&v43);
      v30 = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 96), v28, v29);
      if (v30 == -1 || v30 == (unint64_t)*(unsigned int *)(a1 + 104))
      {
        LODWORD(v44) = *(_DWORD *)(*(_QWORD *)(v27 + 8 * v18) + 8);
        BYTE4(v44) = 0;
LABEL_23:
        *(_DWORD *)a3 = v44;
        *(_BYTE *)(a3 + 4) = BYTE4(v44);
LABEL_24:
        *(_QWORD *)(a3 + 32) = 0;
LABEL_25:
        *(_BYTE *)(a3 + 40) = 1;
        goto LABEL_26;
      }
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v30);
      v35 = *(_QWORD *)(v34 + 32);
      if (v35)
      {
        v36 = v34 + 8;
        if (v35 == v36)
        {
          v46 = &v44;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 24))(v36, &v44);
        }
        else
        {
          v46 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        }
      }
      else
      {
        v46 = 0;
      }
      std::__function::__value_func<std::optional<BOOL> ()(mlir::Operation *)>::swap[abi:nn180100](&v44, v48);
      v37 = v46;
      if (v46 == &v44)
      {
        v38 = 4;
        v37 = &v44;
      }
      else
      {
        if (!v46)
          goto LABEL_54;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_54:
      LODWORD(v44) = *(_DWORD *)(*(_QWORD *)(v27 + 8 * v18) + 8);
      BYTE4(v44) = 0;
      if (!v49)
        goto LABEL_23;
      v39 = v45;
      if (v49 == v48)
      {
        v47 = v45;
        (*(void (**)(_QWORD *, _QWORD *))(v48[0] + 24))(v48, v45);
        v40 = v47;
      }
      else
      {
        v40 = (_QWORD *)(*(uint64_t (**)(void))(*v49 + 16))();
        v47 = v40;
      }
      *(_DWORD *)a3 = v44;
      *(_BYTE *)(a3 + 4) = BYTE4(v44);
      if (!v40)
        goto LABEL_24;
      if (v40 != v45)
      {
        *(_QWORD *)(a3 + 32) = v40;
        goto LABEL_25;
      }
      *(_QWORD *)(a3 + 32) = a3 + 8;
      (*(void (**)(_QWORD *))(v45[0] + 24))(v45);
      v41 = v47;
      *(_BYTE *)(a3 + 40) = 1;
      if (v41 == v45)
      {
        v42 = 4;
      }
      else
      {
        if (!v41)
          goto LABEL_26;
        v42 = 5;
        v39 = v41;
      }
      (*(void (**)(_QWORD *))(*v39 + 8 * v42))(v39);
LABEL_26:
      result = v49;
      if (v49 == v48)
      {
        v31 = 4;
        result = v48;
      }
      else
      {
        if (!v49)
          return result;
        v31 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
    }
  }
  result = *(_QWORD **)(a1 + 144);
  if (!result)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
    return result;
  }
  v20 = (_QWORD *)(a1 + 120);
  LODWORD(v44) = 1;
  BYTE4(v44) = 0;
  v21 = v45;
  if (result == v20)
  {
    v47 = v45;
    (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v45);
    result = v47;
    *(_DWORD *)a3 = v44;
    *(_BYTE *)(a3 + 4) = BYTE4(v44);
    if (result)
      goto LABEL_32;
LABEL_34:
    *(_QWORD *)(a3 + 32) = 0;
    goto LABEL_35;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  v47 = result;
  *(_DWORD *)a3 = v44;
  *(_BYTE *)(a3 + 4) = BYTE4(v44);
  if (!result)
    goto LABEL_34;
LABEL_32:
  if (result != v45)
    goto LABEL_33;
  *(_QWORD *)(a3 + 32) = a3 + 8;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v45[0] + 24))(v45);
  v32 = v47;
  *(_BYTE *)(a3 + 40) = 1;
  if (v32 == v45)
  {
    v33 = 4;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 8 * v33))(v21);
  }
  if (v32)
  {
    v33 = 5;
    v21 = v32;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 8 * v33))(v21);
  }
  return result;
}

uint64_t mlir::ConversionTarget::isLegal(mlir::ConversionTarget *this, mlir::Operation *a2)
{
  int v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  mlir::Operation *v23;
  int v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  mlir::ConversionTarget::getOpInfo((uint64_t)this, *((_QWORD *)a2 + 6), (uint64_t)&v24);
  if (!v28)
  {
    v7 = 0;
    v6 = 0;
    return v6 | (v7 << 8);
  }
  v4 = v24;
  if (v24 != 1)
  {
LABEL_6:
    if (v4)
      goto LABEL_7;
    goto LABEL_11;
  }
  v23 = a2;
  if (!v27)
    goto LABEL_38;
  v5 = (*(uint64_t (**)(_BYTE *, mlir::Operation **))(*(_QWORD *)v27 + 48))(v27, &v23);
  if (v5 <= 0xFFu)
  {
    v4 = v24;
    goto LABEL_6;
  }
  if (!(_BYTE)v5)
  {
LABEL_7:
    v6 = 0;
    v7 = 0;
    if (!v28)
      return v6 | (v7 << 8);
    goto LABEL_32;
  }
LABEL_11:
  if (!v25)
  {
    v6 = 0;
    v7 = 1;
    if (!v28)
      return v6 | (v7 << 8);
    goto LABEL_32;
  }
  v8 = *((_QWORD *)this + 6);
  v9 = *((_DWORD *)this + 16);
  if (v9)
  {
    v10 = *((_QWORD *)a2 + 6);
    v11 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
    v12 = (uint64_t *)(v8 + 40 * v11);
    v13 = *v12;
    if (v10 == *v12)
      goto LABEL_21;
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v9 - 1);
      v12 = (uint64_t *)(v8 + 40 * v11);
      v13 = *v12;
      if (v10 == *v12)
        goto LABEL_21;
    }
  }
  v12 = (uint64_t *)(v8 + 40 * v9);
LABEL_21:
  if (v12 == (uint64_t *)(v8 + 40 * v9))
  {
    v6 = 1;
    v7 = 1;
    if (!v28)
      return v6 | (v7 << 8);
    goto LABEL_32;
  }
  v23 = a2;
  v16 = v12[4];
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t, mlir::Operation **))(*(_QWORD *)v16 + 48))(v16, &v23);
    if ((_BYTE)v17)
      v18 = 0;
    else
      v18 = v17 >= 0x100u;
    v6 = !v18;
    v7 = 1;
    if (!v28)
      return v6 | (v7 << 8);
LABEL_32:
    v19 = v27;
    if (v27 == v26)
    {
      v20 = 4;
      v19 = v26;
      goto LABEL_36;
    }
    if (v27)
    {
      v20 = 5;
LABEL_36:
      (*(void (**)(_QWORD *))(*v19 + 8 * v20))(v19);
    }
    return v6 | (v7 << 8);
  }
LABEL_38:
  v22 = std::__throw_bad_function_call[abi:nn180100]();
  return mlir::ConversionTarget::setLegalityCallback(v22);
}

_QWORD *mlir::ConversionTarget::setLegalityCallback(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (_QWORD *)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (_QWORD *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  v7 = (_QWORD *)(v4 + 16 * v5);
LABEL_8:
  if (v7 == (_QWORD *)(v4 + 16 * v5))
    v11 = (unsigned int *)(a1 + 40);
  else
    v11 = (unsigned int *)(v7 + 1);
  v12 = *(_QWORD *)(a1 + 32) + 48 * *v11;
  v13 = (_QWORD *)(v12 + 16);
  v14 = *(_QWORD **)(v12 + 40);
  if (!v14)
  {
    v27 = 0;
    v15 = (_QWORD *)a3[3];
    if (v15)
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v14 == v13)
  {
    v27 = v26;
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v26);
    v15 = (_QWORD *)a3[3];
    if (v15)
      goto LABEL_16;
LABEL_19:
    v25 = 0;
    goto LABEL_21;
  }
  v27 = v14;
  v13[3] = 0;
  v15 = (_QWORD *)a3[3];
  if (!v15)
    goto LABEL_19;
LABEL_16:
  if (v15 == a3)
  {
    v25 = v24;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v24);
  }
  else
  {
    v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  }
LABEL_21:
  composeLegalityCallbacks(v28, v26, v24);
  v16 = (_QWORD *)v13[3];
  v13[3] = 0;
  if (v16 == v13)
  {
    v17 = 4;
    v16 = v13;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  if (!v29)
  {
    v13[3] = 0;
    goto LABEL_35;
  }
  if (v29 != v28)
  {
    v13[3] = v29;
    v29 = 0;
    goto LABEL_35;
  }
  v13[3] = v13;
  (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v13);
  v18 = v29;
  if (v29 == v28)
  {
    v19 = 4;
    v18 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_35;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_35:
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_40;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_40:
  result = v27;
  if (v27 == v26)
  {
    v23 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
}

_QWORD *composeLegalityCallbacks(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v4 = result;
  v30 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)a2[3];
  if (!v5)
  {
    v9 = (_QWORD *)a3[3];
    if (v9)
    {
      if (v9 == a3)
      {
        result[3] = result;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, result);
      }
      else
      {
        result[3] = v9;
        a3[3] = 0;
      }
    }
    else
    {
      result[3] = 0;
    }
    return result;
  }
  if (v5 != a2)
  {
    v27 = (_QWORD *)a2[3];
    a2[3] = 0;
    v6 = v28;
    v7 = (_QWORD *)a3[3];
    if (v7)
      goto LABEL_4;
LABEL_11:
    v29 = 0;
    v8 = v27;
    if (!v27)
      goto LABEL_16;
    goto LABEL_12;
  }
  v27 = v26;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v26);
  v6 = v28;
  v7 = (_QWORD *)a3[3];
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 == a3)
  {
    v29 = v28;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v28);
    v8 = v27;
    if (!v27)
      goto LABEL_16;
  }
  else
  {
    v29 = v7;
    a3[3] = 0;
    v8 = v27;
    if (!v27)
    {
LABEL_16:
      v23 = 0;
      v10 = v24;
      v11 = v29;
      if (v29)
        goto LABEL_17;
LABEL_20:
      v25 = 0;
      goto LABEL_22;
    }
  }
LABEL_12:
  if (v8 != v26)
  {
    v23 = v8;
    v27 = 0;
    v10 = v24;
    v11 = v29;
    if (v29)
      goto LABEL_17;
    goto LABEL_20;
  }
  v23 = v22;
  (*(void (**)(_QWORD *, _QWORD *))(v26[0] + 24))(v26, v22);
  v10 = v24;
  v11 = v29;
  if (!v29)
    goto LABEL_20;
LABEL_17:
  if (v11 == v28)
  {
    v25 = v24;
    (*(void (**)(_QWORD *, _QWORD *))(v28[0] + 24))(v28, v24);
  }
  else
  {
    v25 = v11;
    v29 = 0;
  }
LABEL_22:
  v12 = operator new(0x48uLL);
  v13 = v12;
  *v12 = &off_24C054540;
  v14 = v12 + 1;
  if (!v23)
  {
    v12[4] = 0;
    v15 = v25;
    if (v25)
      goto LABEL_27;
    goto LABEL_30;
  }
  if (v23 == v22)
  {
    v12[4] = v14;
    (*(void (**)(_QWORD *))(v22[0] + 24))(v22);
    v15 = v25;
    if (v25)
      goto LABEL_27;
LABEL_30:
    v13[8] = 0;
    v4[3] = v13;
    goto LABEL_38;
  }
  v12[4] = v23;
  v23 = 0;
  v15 = v25;
  if (!v25)
    goto LABEL_30;
LABEL_27:
  if (v15 != v24)
  {
    v13[8] = v15;
    v25 = 0;
    v4[3] = v13;
    goto LABEL_38;
  }
  v13[8] = v13 + 5;
  (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
  v16 = v25;
  v4[3] = v13;
  if (v16 == v24)
  {
    v17 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_38;
    v17 = 5;
    v10 = v16;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v17))(v10);
LABEL_38:
  v18 = v23;
  if (v23 == v22)
  {
    v19 = 4;
    v18 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_43;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
  if (v29 == v28)
  {
    v20 = 4;
    goto LABEL_47;
  }
  if (v29)
  {
    v20 = 5;
    v6 = v29;
LABEL_47:
    (*(void (**)(_QWORD *, _QWORD *))(*v6 + 8 * v20))(v6, v14);
  }
  result = v27;
  if (v27 == v26)
  {
    v21 = 4;
    result = v26;
  }
  else
  {
    if (!v27)
      return result;
    v21 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
}

_QWORD *mlir::ConversionTarget::setLegalityCallback(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  const unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = a2;
    v6 = (uint64_t)(result + 12);
    v7 = a2 + 16 * a3;
    do
    {
      v9 = *(int8x16_t **)v5;
      v10 = *(const unsigned __int8 **)(v5 + 8);
      v11 = llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::try_emplace<>(v6, *(int8x16_t **)v5, v10);
      v12 = *v11;
      v13 = *(_QWORD **)(*v11 + 32);
      if (v13)
      {
        if (v13 == (_QWORD *)(v12 + 8))
        {
          v27 = v26;
          (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v26);
          v14 = (_QWORD *)a4[3];
          if (!v14)
          {
LABEL_14:
            v25 = 0;
            goto LABEL_16;
          }
        }
        else
        {
          v27 = v13;
          *(_QWORD *)(v12 + 32) = 0;
          v14 = (_QWORD *)a4[3];
          if (!v14)
            goto LABEL_14;
        }
      }
      else
      {
        v27 = 0;
        v14 = (_QWORD *)a4[3];
        if (!v14)
          goto LABEL_14;
      }
      if (v14 == a4)
      {
        v25 = v24;
        (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v24);
      }
      else
      {
        v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
      }
LABEL_16:
      composeLegalityCallbacks(v28, v26, v24);
      v15 = llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::try_emplace<>(v6, v9, v10);
      v16 = *v15;
      v17 = *v15 + 8;
      v18 = *(_QWORD **)(*v15 + 32);
      *(_QWORD *)(v16 + 32) = 0;
      if (v18 == (_QWORD *)v17)
      {
        v18 = (_QWORD *)v17;
        v19 = 4;
      }
      else
      {
        if (!v18)
          goto LABEL_21;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_21:
      if (!v29)
      {
        *(_QWORD *)(v16 + 32) = 0;
        goto LABEL_30;
      }
      if (v29 != v28)
      {
        *(_QWORD *)(v16 + 32) = v29;
        v29 = 0;
        goto LABEL_30;
      }
      *(_QWORD *)(v16 + 32) = v17;
      (*(void (**)(_QWORD *, uint64_t))(v28[0] + 24))(v28, v17);
      v20 = v29;
      if (v29 == v28)
      {
        v20 = v28;
        v21 = 4;
      }
      else
      {
        if (!v29)
          goto LABEL_30;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_30:
      v22 = v25;
      if (v25 == v24)
      {
        v22 = v24;
        v23 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_35;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_35:
      result = v27;
      if (v27 == v26)
      {
        result = v26;
        v8 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_5;
        v8 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_5:
      v5 += 16;
    }
    while (v5 != v7);
  }
  return result;
}

void `anonymous namespace'::OperationConverter::OperationConverter(uint64_t a1, uint64_t a2, mlir::FrozenRewritePatternSet *a3)
{
  char *v4;
  char *v5;
  uint64_t *v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  unsigned int v31;
  llvm **v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t *v45;
  unint64_t v46;
  int64x2_t v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  const void **BucketFor;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64x2_t v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  char *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  char *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  BOOL v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  int v116;
  BOOL v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  llvm *buffer;
  unsigned int v125;
  uint64_t v126;
  llvm *v127;
  unint64_t v128;
  uint64_t v129;
  llvm *v130;
  llvm *v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  char *v135;
  int v136;
  BOOL v137;
  unsigned int v138;
  int v139;
  int v140;
  uint64_t **v141;
  int64x2_t v142;
  int64x2_t v143;
  llvm *v144[2];
  int v145;
  llvm *v146;
  int32x2_t v147;
  unsigned int v148;
  void *v149;
  uint64_t v150;
  llvm *v151;
  uint64_t v152;
  unsigned int v153;
  llvm *v154[2];
  int v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  int64x2_t v159;
  llvm **v160;
  llvm **v161;
  llvm **v162;
  unsigned __int8 v163;
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  v144[0] = 0;
  v144[1] = 0;
  v145 = 0;
  v156 = &v158;
  v157 = 0x100000000;
  v154[0] = 0;
  v154[1] = 0;
  v155 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = &v151;
  v150 = 0;
  v159.i64[0] = (uint64_t)&v156;
  v159.i64[1] = a1;
  v160 = &v151;
  v161 = v154;
  v162 = &v146;
  v141 = (uint64_t **)mlir::PatternApplicator::PatternApplicator((mlir::PatternApplicator *)(a1 + 104), a3);
  if ((_DWORD)v157)
  {
    if ((_DWORD)v150)
    {
      v4 = (char *)v149;
      v5 = (char *)v149 + 8 * v150;
      v142 = vdupq_n_s64(1uLL);
      while (1)
      {
        v6 = *(uint64_t **)v4;
        v7 = 0uLL;
        if (*(_DWORD *)(*(_QWORD *)v4 + 8) == 1)
        {
          v7.i64[1] = v142.i64[1];
          v7.i64[0] = *v6;
        }
        v159 = v7;
        if (!v145)
          break;
        v8 = (v145 - 1) & (((unsigned __int32)v7.i32[0] >> 4) ^ ((unsigned __int32)v7.i32[0] >> 9));
        v9 = (uint64_t *)((char *)v144[0] + 32 * v8);
        v10 = *v9;
        if (*v9 != v7.i64[0])
        {
          v11 = 0;
          v12 = 1;
          while (v10 != -4096)
          {
            if (v11)
              v13 = 0;
            else
              v13 = v10 == -8192;
            if (v13)
              v11 = v9;
            v14 = v8 + v12++;
            v8 = v14 & (v145 - 1);
            v9 = (uint64_t *)((char *)v144[0] + 32 * v8);
            v10 = *v9;
            if (*v9 == v7.i64[0])
              goto LABEL_19;
          }
          if (v11)
            v15 = v11;
          else
            v15 = v9;
          goto LABEL_18;
        }
LABEL_19:
        v16 = *((unsigned int *)v9 + 4);
        if (v16 >= *((unsigned int *)v9 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 1), v9 + 3, v16 + 1, 8);
          v16 = *((unsigned int *)v9 + 4);
        }
        *(_QWORD *)(v9[1] + 8 * v16) = v6;
        ++*((_DWORD *)v9 + 4);
        v4 += 8;
        if (v4 == v5)
          goto LABEL_250;
      }
      v15 = 0;
LABEL_18:
      v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)v144, v15, v159.i64);
      goto LABEL_19;
    }
LABEL_250:
    if (v149 != &v151)
      free(v149);
    llvm::deallocate_buffer(v146, (void *)(8 * v148));
  }
  v17 = v150;
  if (!(_DWORD)v150)
    goto LABEL_250;
  v143 = vdupq_n_s64(1uLL);
LABEL_29:
  v18 = (_DWORD *)*((_QWORD *)v149 + v17 - 1);
  if (v148)
  {
    LODWORD(v19) = ((v18 >> 4) ^ (v18 >> 9)) & (v148 - 1);
    v20 = (char *)v146 + 8 * v19;
    v21 = *(_DWORD **)v20;
    if (v18 != *(_DWORD **)v20)
    {
      v139 = 1;
      do
      {
        if (v21 == (_DWORD *)-4096)
          goto LABEL_32;
        v140 = v19 + v139++;
        v19 = v140 & (v148 - 1);
        v21 = (_DWORD *)*((_QWORD *)v146 + v19);
      }
      while (v18 != v21);
      v20 = (char *)v146 + 8 * v19;
    }
    *(_QWORD *)v20 = -8192;
    v147 = vadd_s32(v147, (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_32:
  LODWORD(v150) = v17 - 1;
  v22 = v18[8];
  if ((_DWORD)v22)
  {
    v23 = (uint64_t *)*((_QWORD *)v18 + 3);
    v24 = &v23[v22];
    while (1)
    {
      v28 = *v23;
      mlir::ConversionTarget::getOpInfo(*(_QWORD *)(a1 + 96), *v23, (uint64_t)&v159);
      v29 = v163;
      if (!v163)
        break;
      v30 = v159.i8[0];
      v31 = (unsigned __int32)v159.i32[0] >> 8;
      v32 = v162;
      if (v162 == (llvm **)&v159.u64[1])
      {
        v32 = (llvm **)&v159.i64[1];
        v33 = 4;
      }
      else
      {
        if (!v162)
          goto LABEL_41;
        v33 = 5;
      }
      (*((void (**)(void))*v32 + v33))();
      v34 = v145;
      if (!v145)
        goto LABEL_45;
LABEL_34:
      v25 = v34 - 1;
      v26 = v25 & ((v28 >> 4) ^ (v28 >> 9));
      v27 = *((_QWORD *)v144[0] + 4 * v26);
      if (v27 != v28)
      {
        v35 = 1;
        while (v27 != -4096)
        {
          v36 = v26 + v35++;
          v26 = v36 & v25;
          v27 = *((_QWORD *)v144[0] + 4 * v26);
          if (v27 == v28)
            goto LABEL_35;
        }
LABEL_45:
        if (!v29 || (v30 | (v31 << 8)) == 2)
          goto LABEL_28;
      }
LABEL_35:
      if (++v23 == v24)
        goto LABEL_52;
    }
    v31 = 0;
    v30 = 0;
LABEL_41:
    v34 = v145;
    if (!v145)
      goto LABEL_45;
    goto LABEL_34;
  }
LABEL_52:
  v37 = 0uLL;
  if (v18[2] == 1)
  {
    v37.i64[1] = v143.i64[1];
    v37.i64[0] = *(_QWORD *)v18;
  }
  v159 = v37;
  if (v145)
  {
    v38 = (v145 - 1) & (((unsigned __int32)v37.i32[0] >> 4) ^ ((unsigned __int32)v37.i32[0] >> 9));
    v39 = (uint64_t *)((char *)v144[0] + 32 * v38);
    v40 = *v39;
    if (*v39 == v37.i64[0])
      goto LABEL_67;
    v41 = 0;
    v42 = 1;
    while (v40 != -4096)
    {
      if (v41)
        v43 = 0;
      else
        v43 = v40 == -8192;
      if (v43)
        v41 = v39;
      v44 = v38 + v42++;
      v38 = v44 & (v145 - 1);
      v39 = (uint64_t *)((char *)v144[0] + 32 * v38);
      v40 = *v39;
      if (*v39 == v37.i64[0])
        goto LABEL_67;
    }
    if (v41)
      v45 = v41;
    else
      v45 = v39;
  }
  else
  {
    v45 = 0;
  }
  v39 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>((uint64_t)v144, v45, v159.i64);
LABEL_67:
  v46 = *((unsigned int *)v39 + 4);
  if (v46 >= *((unsigned int *)v39 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v39 + 1), v39 + 3, v46 + 1, 8);
    v46 = *((unsigned int *)v39 + 4);
  }
  *(_QWORD *)(v39[1] + 8 * v46) = v18;
  ++*((_DWORD *)v39 + 4);
  v47 = 0uLL;
  if (v18[2] == 1)
  {
    v47 = vdupq_n_s64(1uLL);
    v47.i64[0] = *(_QWORD *)v18;
  }
  v159 = v47;
  if (v153)
  {
    v48 = (v153 - 1) & (((unsigned __int32)v47.i32[0] >> 4) ^ ((unsigned __int32)v47.i32[0] >> 9));
    v49 = (char *)v151 + 56 * v48;
    v50 = *(_QWORD *)v49;
    if (*(_QWORD *)v49 == v47.i64[0])
      goto LABEL_84;
    v51 = 0;
    v52 = 1;
    while (v50 != -4096)
    {
      if (v51)
        v53 = 0;
      else
        v53 = v50 == -8192;
      if (v53)
        v51 = v49;
      v54 = v48 + v52++;
      v48 = v54 & (v153 - 1);
      v49 = (char *)v151 + 56 * v48;
      v50 = *(_QWORD *)v49;
      if (*(_QWORD *)v49 == v47.i64[0])
        goto LABEL_84;
    }
    if (v51)
      v55 = v51;
    else
      v55 = v49;
  }
  else
  {
    v55 = 0;
  }
  v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>((uint64_t)&v151, v55, v159.i64);
LABEL_84:
  v56 = *((_QWORD *)v49 + 2);
  if (v56 == *((_QWORD *)v49 + 1))
  {
    v61 = *((unsigned int *)v49 + 7);
    BucketFor = (const void **)(v56 + 8 * v61);
    if ((_DWORD)v61)
    {
      v62 = 0;
      v63 = 8 * v61;
      while (*(_DWORD **)(v56 + v62) != v18)
      {
        v62 += 8;
        if (v63 == v62)
          goto LABEL_235;
      }
      BucketFor = (const void **)(v56 + v62);
LABEL_235:
      if (BucketFor != (const void **)(*((_QWORD *)v49 + 2) + 8 * *((unsigned int *)v49 + 7)))
        goto LABEL_104;
      goto LABEL_105;
    }
    v58 = *((_QWORD *)v49 + 2);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)(v49 + 8), v18);
    v56 = *((_QWORD *)v49 + 1);
    v58 = *((_QWORD *)v49 + 2);
    if (*BucketFor != v18)
    {
      if (v58 == v56)
        v59 = 28;
      else
        v59 = 24;
      BucketFor = (const void **)(v58 + 8 * *(unsigned int *)&v49[v59]);
      if (v58 == v56)
        v60 = 28;
      else
        v60 = 24;
      if (BucketFor == (const void **)(v58 + 8 * *(unsigned int *)&v49[v60]))
        goto LABEL_105;
LABEL_104:
      *BucketFor = (const void *)-2;
      ++*((_DWORD *)v49 + 8);
      goto LABEL_105;
    }
  }
  if (v58 == v56)
    v64 = 28;
  else
    v64 = 24;
  if (BucketFor != (const void **)(v58 + 8 * *(unsigned int *)&v49[v64]))
    goto LABEL_104;
LABEL_105:
  v65 = 0uLL;
  if (v18[2] == 1)
  {
    v65 = vdupq_n_s64(1uLL);
    v65.i64[0] = *(_QWORD *)v18;
  }
  v159 = v65;
  if (v155)
  {
    v66 = (v155 - 1) & (((unsigned __int32)v65.i32[0] >> 4) ^ ((unsigned __int32)v65.i32[0] >> 9));
    v67 = (char *)v154[0] + 56 * v66;
    v68 = *(_QWORD *)v67;
    if (*(_QWORD *)v67 == v65.i64[0])
    {
LABEL_120:
      v74 = *((_QWORD *)v67 + 2);
      if (v74 == *((_QWORD *)v67 + 1))
        v75 = 28;
      else
        v75 = 24;
      v76 = *(unsigned int *)&v67[v75];
      if ((_DWORD)v76)
      {
        v77 = 8 * v76;
        v78 = (uint64_t *)*((_QWORD *)v67 + 2);
        while ((unint64_t)*v78 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v78;
          v77 -= 8;
          if (!v77)
            goto LABEL_28;
        }
      }
      else
      {
        v78 = (uint64_t *)*((_QWORD *)v67 + 2);
      }
      v79 = (uint64_t *)(v74 + 8 * v76);
      if (v78 == v79)
        goto LABEL_28;
      v80 = *v78;
      while (1)
      {
        v81 = (uint64_t *)v151;
        v82 = v153;
        if (!v153)
          goto LABEL_206;
        v83 = v153 - 1;
        v84 = ((v80 >> 4) ^ (v80 >> 9)) & (v153 - 1);
        v85 = (char *)v151 + 56 * v84;
        v86 = *(_QWORD *)v85;
        if (v80 != *(_QWORD *)v85)
          break;
LABEL_147:
        v93 = (uint64_t *)*((_QWORD *)v85 + 1);
        v92 = (uint64_t *)*((_QWORD *)v85 + 2);
        v94 = v85 + 28;
        v95 = v85 + 24;
        if (v92 == v93)
          v95 = v94;
        v96 = *(unsigned int *)v95;
        if ((_DWORD)v96)
        {
          v97 = 8 * v96;
          v98 = v92;
          while ((unint64_t)*v98 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v98;
            v97 -= 8;
            if (!v97)
              goto LABEL_199;
          }
        }
        else
        {
          v98 = v92;
        }
        v99 = &v92[v96];
        if (v98 == v99)
          goto LABEL_199;
        v100 = *v98;
        do
        {
          v101 = v148;
          if (!v148)
            goto LABEL_183;
          v102 = ((v100 >> 4) ^ (v100 >> 9)) & (v148 - 1);
          v103 = (_QWORD *)((char *)v146 + 8 * v102);
          v104 = *v103;
          if (v100 == *v103)
            goto LABEL_175;
          v105 = 0;
          v106 = 1;
          while (v104 != -4096)
          {
            if (v105)
              v107 = 0;
            else
              v107 = v104 == -8192;
            if (v107)
              v105 = v103;
            v108 = v102 + v106++;
            v102 = v108 & (v148 - 1);
            v103 = (_QWORD *)((char *)v146 + 8 * v102);
            v104 = *v103;
            if (v100 == *v103)
              goto LABEL_175;
          }
          v111 = (char *)(v105 ? v105 : v103);
          if (4 * v147.i32[0] + 4 < 3 * v148)
          {
            if (v148 + ~v147.i32[0] - v147.i32[1] > v148 >> 3)
              goto LABEL_170;
          }
          else
          {
LABEL_183:
            v101 = 2 * v148;
          }
          llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow((uint64_t)&v146, v101);
          v112 = v148 - 1;
          v113 = (v148 - 1) & ((v100 >> 4) ^ (v100 >> 9));
          v111 = (char *)v146 + 8 * v113;
          v114 = *(_QWORD *)v111;
          if (v100 == *(_QWORD *)v111)
          {
LABEL_185:
            ++v147.i32[0];
            if (v100 == -4096)
              goto LABEL_172;
LABEL_171:
            --v147.i32[1];
            goto LABEL_172;
          }
          v115 = 0;
          v116 = 1;
          while (v114 != -4096)
          {
            if (v115)
              v117 = 0;
            else
              v117 = v114 == -8192;
            if (v117)
              v115 = v111;
            v118 = v113 + v116++;
            v113 = v118 & v112;
            v111 = (char *)v146 + 8 * (v118 & v112);
            v114 = *(_QWORD *)v111;
            if (v100 == *(_QWORD *)v111)
              goto LABEL_185;
          }
          if (v115)
            v111 = v115;
LABEL_170:
          v109 = *(_QWORD *)v111;
          ++v147.i32[0];
          if (v109 != -4096)
            goto LABEL_171;
LABEL_172:
          *(_QWORD *)v111 = v100;
          v110 = v150;
          if (v150 >= (unint64_t)HIDWORD(v150))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, &v151, v150 + 1, 8);
            v110 = v150;
          }
          *((_QWORD *)v149 + v110) = v100;
          LODWORD(v150) = v150 + 1;
          do
          {
LABEL_175:
            if (++v98 == v99)
              goto LABEL_199;
            v100 = *v98;
          }
          while ((unint64_t)*v98 >= 0xFFFFFFFFFFFFFFFELL);
        }
        while (v98 != v99);
        do
        {
LABEL_199:
          if (++v78 == v79)
            goto LABEL_28;
          v80 = *v78;
        }
        while ((unint64_t)*v78 >= 0xFFFFFFFFFFFFFFFELL);
        if (v78 == v79)
        {
LABEL_28:
          v17 = v150;
          if (!(_DWORD)v150)
            goto LABEL_250;
          goto LABEL_29;
        }
      }
      v87 = 0;
      v88 = 1;
      while (v86 != -4096)
      {
        if (v87)
          v89 = 0;
        else
          v89 = v86 == -8192;
        if (v89)
          v87 = v85;
        v90 = v84 + v88++;
        v84 = v90 & v83;
        v85 = (char *)v151 + 56 * (v90 & v83);
        v86 = *(_QWORD *)v85;
        if (v80 == *(_QWORD *)v85)
          goto LABEL_147;
      }
      if (v87)
        v85 = v87;
      if (4 * (int)v152 + 4 < 3 * v153)
      {
        if (v153 + ~(_DWORD)v152 - HIDWORD(v152) > v153 >> 3)
          goto LABEL_144;
        v119 = v153;
      }
      else
      {
LABEL_206:
        v119 = 2 * v153;
      }
      v120 = (v119 - 1) | ((unint64_t)(v119 - 1) >> 1);
      v121 = v120 | (v120 >> 2) | ((v120 | (v120 >> 2)) >> 4);
      v122 = ((v121 | (v121 >> 8)) >> 16) | v121 | (v121 >> 8);
      if ((v122 + 1) > 0x40)
        v123 = v122 + 1;
      else
        v123 = 64;
      v153 = v123;
      buffer = (llvm *)llvm::allocate_buffer(56 * v123, (std::align_val_t)8uLL);
      v151 = buffer;
      if (v81)
      {
        llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::moveFromOldBuckets((uint64_t)&v151, v81, &v81[7 * v82]);
        llvm::deallocate_buffer((llvm *)v81, (void *)(56 * v82));
      }
      v152 = 0;
      v125 = v153;
      v126 = 56 * v153;
      v127 = buffer;
      if ((unint64_t)(v126 - 56) < 0x38)
        goto LABEL_217;
      v128 = (v126 - 56) / 0x38uLL + 1;
      v127 = (llvm *)((char *)buffer + 56 * (v128 & 0xFFFFFFFFFFFFFFELL));
      v129 = v128 & 0xFFFFFFFFFFFFFFELL;
      v130 = buffer;
      do
      {
        *(_QWORD *)v130 = -4096;
        *((_QWORD *)v130 + 7) = -4096;
        v130 = (llvm *)((char *)v130 + 112);
        v129 -= 2;
      }
      while (v129);
      if (v128 != (v128 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_217:
        v131 = (llvm *)((char *)buffer + v126);
        do
        {
          *(_QWORD *)v127 = -4096;
          v127 = (llvm *)((char *)v127 + 56);
        }
        while (v127 != v131);
      }
      v132 = v125 - 1;
      v133 = (v125 - 1) & ((v80 >> 4) ^ (v80 >> 9));
      v85 = (char *)buffer + 56 * v133;
      v134 = *(_QWORD *)v85;
      if (v80 == *(_QWORD *)v85)
      {
LABEL_220:
        LODWORD(v152) = v152 + 1;
        if (v80 == -4096)
          goto LABEL_146;
        goto LABEL_145;
      }
      v135 = 0;
      v136 = 1;
      while (v134 != -4096)
      {
        if (v135)
          v137 = 0;
        else
          v137 = v134 == -8192;
        if (v137)
          v135 = v85;
        v138 = v133 + v136++;
        v133 = v138 & v132;
        v85 = (char *)buffer + 56 * (v138 & v132);
        v134 = *(_QWORD *)v85;
        if (v80 == *(_QWORD *)v85)
          goto LABEL_220;
      }
      if (v135)
        v85 = v135;
LABEL_144:
      v91 = *(_QWORD *)v85;
      LODWORD(v152) = v152 + 1;
      if (v91 == -4096)
      {
LABEL_146:
        *(_QWORD *)v85 = v80;
        *((_QWORD *)v85 + 1) = v85 + 40;
        *((_QWORD *)v85 + 2) = v85 + 40;
        *((_QWORD *)v85 + 3) = 2;
        *((_DWORD *)v85 + 8) = 0;
        goto LABEL_147;
      }
LABEL_145:
      --HIDWORD(v152);
      goto LABEL_146;
    }
    v69 = 0;
    v70 = 1;
    while (v68 != -4096)
    {
      if (v69)
        v71 = 0;
      else
        v71 = v68 == -8192;
      if (v71)
        v69 = v67;
      v72 = v66 + v70++;
      v66 = v72 & (v155 - 1);
      v67 = (char *)v154[0] + 56 * v66;
      v68 = *(_QWORD *)v67;
      if (*(_QWORD *)v67 == v65.i64[0])
        goto LABEL_120;
    }
    if (v69)
      v73 = v69;
    else
      v73 = v67;
  }
  else
  {
    v73 = 0;
  }
  v67 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>((uint64_t)v154, v73, v159.i64);
  goto LABEL_120;
}

uint64_t sub_207559B40()
{
  uint64_t v0;
  int v2;
  uint64_t v3;

  *(_DWORD *)(v0 + 168) = v2;
  *(_QWORD *)(v0 + 176) = v3;
  return v0;
}

uint64_t `anonymous namespace'::OperationConverter::convertOperations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mlir::ForwardIterator *v12;
  mlir::ConversionPatternRewriter *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int64x2_t *v20;
  char *v21;
  int *v22;
  char *v23;
  __int128 v24;
  char *v25;
  int *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  _BOOL4 v39;
  char *v40;
  int *v41;
  char *v42;
  __int128 v43;
  char *v44;
  int *v45;
  char *v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  _anonymous_namespace_::OperationTransactionState *v63;
  uint64_t v64;
  uint64_t v65;
  mlir::Operation **v66;
  uint64_t v67;
  mlir::Operation *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _anonymous_namespace_::OperationTransactionState *v75;
  uint64_t v76;
  uint64_t v77;
  mlir::Operation **v78;
  uint64_t v79;
  mlir::Operation *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int **v97;
  unsigned int **v98;
  unsigned int *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  ZinIrHalH13g *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t j;
  _QWORD **NextResultAtOffset;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t k;
  uint64_t v125;
  uint64_t v126;
  ZinIrHalH13g *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t m;
  _QWORD **v134;
  _QWORD *v135;
  _QWORD *v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  int32x2_t *v142;
  __int32 v143;
  int32x2_t v144;
  __int32 v145;
  mlir::detail::ConversionPatternRewriterImpl *v146;
  mlir *v148;
  mlir::Operation *v149;
  const mlir::ConversionTarget *v150;
  const mlir::FrozenRewritePatternSet *v151;
  _QWORD v152[3];
  __int128 v153;
  void *v154;
  int v155;
  mlir::detail::ConversionPatternRewriterImpl *v156;
  _QWORD v157[4];
  __int16 v158;
  uint64_t *v159;
  int v160;
  const char *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _BYTE v165[48];
  void **v166;
  unsigned int v167[4];
  void *v168;
  unsigned int *v169;
  _BYTE v170[96];
  void *v171;
  _QWORD *v172;
  void *__p;
  _QWORD *v174;
  char v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 1;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 96);
  v163 = v165;
  v164 = 0x600000000;
  v11 = 8 * a3;
  do
  {
    v12 = *(mlir::ForwardIterator **)(a2 + v9);
    v166 = &v163;
    *(_QWORD *)v167 = v10;
    v9 += 8;
  }
  while (v11 != v9);
  v152[1] = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a2 + 24));
  v153 = 0u;
  v155 = 1;
  v152[0] = off_24C04F9E8;
  v154 = &unk_24C04FA88;
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_DWORD *)(v14 + 16) = 0;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_DWORD *)(v14 + 40) = 0;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_DWORD *)(v14 + 64) = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_DWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = v14 + 112;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_DWORD *)(v14 + 152) = 0;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_DWORD *)(v14 + 176) = 0;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_DWORD *)(v14 + 128) = 0;
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 184) = v152;
  *(_QWORD *)(v14 + 192) = v14 + 264;
  *(_QWORD *)(v14 + 200) = v14 + 216;
  *(_QWORD *)(v14 + 208) = 0x600000000;
  *(_QWORD *)(v14 + 264) = v14 + 280;
  *(_QWORD *)(v14 + 272) = 0x200000000;
  *(_DWORD *)(v14 + 344) = 0;
  *(_OWORD *)(v14 + 328) = 0u;
  *(_QWORD *)(v14 + 352) = v14 + 368;
  *(_QWORD *)(v14 + 360) = 0;
  *(_QWORD *)(v14 + 368) = v14 + 384;
  *(_QWORD *)(v14 + 376) = 0x400000000;
  *(_QWORD *)(v14 + 416) = v14 + 432;
  *(_QWORD *)(v14 + 424) = 0x400000000;
  *(_DWORD *)(v14 + 608) = 0;
  *(_OWORD *)(v14 + 592) = 0u;
  *(_QWORD *)(v14 + 616) = v14 + 632;
  *(_QWORD *)(v14 + 624) = 0;
  *(_QWORD *)(v14 + 632) = v14 + 648;
  *(_QWORD *)(v14 + 640) = 0x400000000;
  *(_QWORD *)(v14 + 1192) = v14 + 1208;
  *(_QWORD *)(v14 + 1200) = 0x400000000;
  *(_QWORD *)(v14 + 1224) = 0;
  v156 = (mlir::detail::ConversionPatternRewriterImpl *)v14;
  v152[2] = &v154;
  *(_QWORD *)(v14 + 1232) = a4;
  *(_QWORD *)(v14 + 1240) = a5;
  if ((_DWORD)v164)
  {
    v15 = (uint64_t **)v163;
    v16 = (uint64_t **)((char *)v163 + 8 * v164);
    while (1)
    {
      v17 = *v15;
      v159 = v17;
      v19 = *(_DWORD *)(a1 + 168);
      if (!v18)
        break;
      if (v19 == 2)
      {
        v20 = *(int64x2_t **)(a1 + 176);
LABEL_11:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v20, (uint64_t *)&v159, (uint64_t)&v166);
      }
LABEL_7:
      if (++v15 == v16)
        goto LABEL_94;
    }
    if (v19)
    {
      if (v19 != 1)
        goto LABEL_7;
      v158 = 257;
      mlir::Operation::emitError(v17, (uint64_t)v157, (uint64_t)&v166);
      if (v166)
      {
        v160 = 3;
        v161 = "failed to legalize operation '";
        v162 = 30;
        v21 = (char *)v168;
        if (v169 >= HIDWORD(v169))
        {
          v54 = v169 + 1;
          if (v168 <= &v160 && (char *)v168 + 24 * v169 > (char *)&v160)
          {
            v58 = (char *)&v160 - (_BYTE *)v168;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v54, 24);
            v21 = (char *)v168;
            v22 = (int *)((char *)v168 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v54, 24);
            v22 = &v160;
            v21 = (char *)v168;
          }
        }
        else
        {
          v22 = &v160;
        }
        v23 = &v21[24 * v169];
        v24 = *(_OWORD *)v22;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v23 = v24;
        LODWORD(v169) = (_DWORD)v169 + 1;
        if (v166)
        {
          mlir::Diagnostic::operator<<((uint64_t)v167, v159[6]);
          if (v166)
          {
            v160 = 3;
            v161 = "'";
            v162 = 1;
            v25 = (char *)v168;
            if (v169 >= HIDWORD(v169))
            {
              v55 = v169 + 1;
              if (v168 <= &v160 && (char *)v168 + 24 * v169 > (char *)&v160)
              {
                v59 = (char *)&v160 - (_BYTE *)v168;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v55, 24);
                v25 = (char *)v168;
                v26 = (int *)((char *)v168 + v59);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v55, 24);
                v26 = &v160;
                v25 = (char *)v168;
              }
            }
            else
            {
              v26 = &v160;
            }
            v27 = &v25[24 * v169];
            v28 = *(_OWORD *)v26;
            *((_QWORD *)v27 + 2) = *((_QWORD *)v26 + 2);
            *(_OWORD *)v27 = v28;
            LODWORD(v169) = (_DWORD)v169 + 1;
          }
        }
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v166);
      if (v166)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v166);
      if (!v175)
        goto LABEL_6;
      v30 = __p;
      if (__p)
      {
        v31 = v174;
        v32 = __p;
        if (v174 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v174 = v30;
        operator delete(v32);
      }
      v33 = v171;
      if (!v171)
        goto LABEL_74;
      v34 = v172;
      v35 = v171;
      if (v172 == v171)
        goto LABEL_73;
      do
      {
        v37 = *--v34;
        v36 = v37;
        *v34 = 0;
        if (v37)
          MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
      }
      while (v34 != v33);
      goto LABEL_72;
    }
    mlir::ConversionTarget::getOpInfo(*(_QWORD *)(a1 + 96), v17[6], (uint64_t)&v166);
    if (!v170[0])
      goto LABEL_47;
    if ((_DWORD)v166 == 1)
    {
      v157[0] = v17;
      if (!v169)
      {
        v148 = (mlir *)std::__throw_bad_function_call[abi:nn180100]();
        mlir::applyFullConversion(v148, v149, v150, v151);
      }
      v38 = (*(uint64_t (**)(unsigned int *, _QWORD *))(*(_QWORD *)v169 + 48))(v169, v157);
      if (v38 >= 0x100u)
      {
        v39 = v38 == 0;
        if (!v170[0])
          goto LABEL_49;
      }
      else
      {
        v39 = 0;
        if (!v170[0])
          goto LABEL_49;
      }
    }
    else
    {
      v39 = (_DWORD)v166 == 2;
    }
    if (v169 == v167)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v167 + 32))(v167);
      if (!v39)
      {
LABEL_47:
        v20 = *(int64x2_t **)(a1 + 176);
        if (!v20)
          goto LABEL_7;
        goto LABEL_11;
      }
      goto LABEL_50;
    }
    if (v169)
    {
      (*(void (**)(void))(*(_QWORD *)v169 + 40))();
      if (!v39)
        goto LABEL_47;
LABEL_50:
      v158 = 257;
      mlir::Operation::emitError(v159, (uint64_t)v157, (uint64_t)&v166);
      if (v166)
      {
        v160 = 3;
        v161 = "failed to legalize operation '";
        v162 = 30;
        v40 = (char *)v168;
        if (v169 >= HIDWORD(v169))
        {
          v56 = v169 + 1;
          if (v168 <= &v160 && (char *)v168 + 24 * v169 > (char *)&v160)
          {
            v60 = (char *)&v160 - (_BYTE *)v168;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v56, 24);
            v40 = (char *)v168;
            v41 = (int *)((char *)v168 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v56, 24);
            v41 = &v160;
            v40 = (char *)v168;
          }
        }
        else
        {
          v41 = &v160;
        }
        v42 = &v40[24 * v169];
        v43 = *(_OWORD *)v41;
        *((_QWORD *)v42 + 2) = *((_QWORD *)v41 + 2);
        *(_OWORD *)v42 = v43;
        LODWORD(v169) = (_DWORD)v169 + 1;
        if (v166)
        {
          mlir::Diagnostic::operator<<((uint64_t)v167, v159[6]);
          if (v166)
          {
            v160 = 3;
            v161 = "' that was explicitly marked illegal";
            v162 = 36;
            v44 = (char *)v168;
            if (v169 >= HIDWORD(v169))
            {
              v57 = v169 + 1;
              if (v168 <= &v160 && (char *)v168 + 24 * v169 > (char *)&v160)
              {
                v61 = (char *)&v160 - (_BYTE *)v168;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v57, 24);
                v44 = (char *)v168;
                v45 = (int *)((char *)v168 + v61);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, v170, v57, 24);
                v45 = &v160;
                v44 = (char *)v168;
              }
            }
            else
            {
              v45 = &v160;
            }
            v46 = &v44[24 * v169];
            v47 = *(_OWORD *)v45;
            *((_QWORD *)v46 + 2) = *((_QWORD *)v45 + 2);
            *(_OWORD *)v46 = v47;
            LODWORD(v169) = (_DWORD)v169 + 1;
          }
        }
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v166);
      if (v166)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v166);
      if (!v175)
      {
LABEL_6:
        if (!v29)
        {
          v88 = *(_DWORD *)(v14 + 640);
          if (v88)
          {
            v89 = *(uint64_t **)(v14 + 632);
            v90 = &v89[17 * v88];
            do
            {
              *(_QWORD *)(*v89 + 24) = v89[1];
              mlir::Operation::setAttrs(*v89, v89[2]);
              v91 = (uint64_t *)*v89;
              mlir::ValueRange::ValueRange((unint64_t *)&v166, v89[3], *((unsigned int *)v89 + 8));
              mlir::Operation::setOperands(v91, (uint64_t)v166, v167[0]);
              v92 = *((unsigned int *)v89 + 28);
              if ((_DWORD)v92)
              {
                v93 = 0;
                v94 = v89[13];
                v95 = 8 * v92;
                do
                {
                  mlir::Operation::setSuccessor((mlir::Operation *)*v89, *(mlir::Block **)(v94 + 8 * v93), v93);
                  ++v93;
                  v95 -= 8;
                }
                while (v95);
              }
              v89 += 17;
            }
            while (v89 != v90);
          }
          mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((mlir::detail::ConversionPatternRewriterImpl *)v14, 0);
          v96 = *(_DWORD *)(v14 + 272);
          if (v96)
          {
            v97 = *(unsigned int ***)(v14 + 264);
            v98 = &v97[3 * v96];
            do
            {
              v99 = *v97;
              v100 = (*v97)[11];
              if ((v100 & 0x7FFFFF) != 0)
              {
                v101 = (((unint64_t)&v99[4 * ((v100 >> 23) & 1) + 17] + ((v100 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v99[10];
                v102 = v101 + 24 * (v100 & 0x7FFFFF);
                do
                {
                  for (i = *(_QWORD *)(v101 + 8); i != v101; i = *(_QWORD *)(i + 8))
                  {
                    if (i)
                      v104 = i - 8;
                    else
                      v104 = 0;
                    for (; *(_QWORD *)(v104 + 32) != v104 + 32; v107[1] = 0)
                    {
                      ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v104 + 40));
                      v106 = (ZinIrHalH13g *)v105;
                      llvm::ilist_traits<mlir::Operation>::removeNodeFromList(v104 + 32, v105);
                      ZinIrHalH13g::~ZinIrHalH13g(v106);
                      v108 = *v107;
                      v109 = (uint64_t *)v107[1];
                      *v109 = *v107;
                      *(_QWORD *)(v108 + 8) = v109;
                      *v107 = 0;
                    }
                    mlir::Block::dropAllDefinedValueUses((_QWORD *)v104);
                  }
                  v101 += 24;
                }
                while (v101 != v102);
              }
              v110 = v99[9];
              if ((_DWORD)v110)
                v111 = (uint64_t)(v99 - 4);
              else
                v111 = 0;
              if ((_DWORD)v110)
              {
                for (j = 0; j != v110; ++j)
                {
                  NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v111, j);
                  while (1)
                  {
                    v114 = *NextResultAtOffset;
                    if (!*NextResultAtOffset)
                      break;
                    v115 = (_QWORD *)v114[1];
                    if (v115)
                    {
                      *v115 = *v114;
                      if (*v114)
                        *(_QWORD *)(*v114 + 8) = v114[1];
                    }
                    *v114 = 0;
                    v114[1] = 0;
                    v114[3] = 0;
                  }
                }
              }
              mlir::Operation::erase((mlir::Operation *)v99);
              v97 += 3;
            }
            while (v97 != v98);
          }
          v116 = *(unsigned int *)(v14 + 208);
          if ((_DWORD)v116)
          {
            v117 = *(_QWORD *)(v14 + 200);
            v118 = v117 + 8 * v116;
            do
            {
              v120 = *(unsigned int **)(v118 - 8);
              v118 -= 8;
              v119 = v120;
              v121 = v120[11];
              if ((v121 & 0x7FFFFF) != 0)
              {
                v122 = (((unint64_t)&v119[4 * ((v121 >> 23) & 1) + 17] + ((v121 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v119[10];
                v123 = v122 + 24 * (v121 & 0x7FFFFF);
                do
                {
                  for (k = *(_QWORD *)(v122 + 8); k != v122; k = *(_QWORD *)(k + 8))
                  {
                    if (k)
                      v125 = k - 8;
                    else
                      v125 = 0;
                    for (; *(_QWORD *)(v125 + 32) != v125 + 32; v128[1] = 0)
                    {
                      ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v125 + 40));
                      v127 = (ZinIrHalH13g *)v126;
                      llvm::ilist_traits<mlir::Operation>::removeNodeFromList(v125 + 32, v126);
                      ZinIrHalH13g::~ZinIrHalH13g(v127);
                      v129 = *v128;
                      v130 = (uint64_t *)v128[1];
                      *v130 = *v128;
                      *(_QWORD *)(v129 + 8) = v130;
                      *v128 = 0;
                    }
                    mlir::Block::dropAllDefinedValueUses((_QWORD *)v125);
                  }
                  v122 += 24;
                }
                while (v122 != v123);
              }
              v131 = v119[9];
              if ((_DWORD)v131)
                v132 = (uint64_t)(v119 - 4);
              else
                v132 = 0;
              if ((_DWORD)v131)
              {
                for (m = 0; m != v131; ++m)
                {
                  v134 = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v132, m);
                  while (1)
                  {
                    v135 = *v134;
                    if (!*v134)
                      break;
                    v136 = (_QWORD *)v135[1];
                    if (v136)
                    {
                      *v136 = *v135;
                      if (*v135)
                        *(_QWORD *)(*v135 + 8) = v135[1];
                    }
                    *v135 = 0;
                    v135[1] = 0;
                    v135[3] = 0;
                  }
                }
              }
              mlir::Operation::erase((mlir::Operation *)v119);
            }
            while (v118 != v117);
          }
LABEL_183:
          v73 = 0;
          goto LABEL_193;
        }
        goto LABEL_7;
      }
      v48 = __p;
      if (__p)
      {
        v49 = v174;
        v50 = __p;
        if (v174 != __p)
        {
          do
            v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          v50 = __p;
        }
        v174 = v48;
        operator delete(v50);
      }
      v33 = v171;
      if (!v171)
      {
LABEL_74:
        if (v168 != v170)
          free(v168);
        goto LABEL_6;
      }
      v51 = v172;
      v35 = v171;
      if (v172 == v171)
      {
LABEL_73:
        v172 = v33;
        operator delete(v35);
        goto LABEL_74;
      }
      do
      {
        v53 = *--v51;
        v52 = v53;
        *v51 = 0;
        if (v53)
          MEMORY[0x20BD002D4](v52, 0x1000C8077774924);
      }
      while (v51 != v33);
LABEL_72:
      v35 = v171;
      goto LABEL_73;
    }
LABEL_49:
    if (!v39)
      goto LABEL_47;
    goto LABEL_50;
  }
LABEL_94:
  {
    if (*(_DWORD *)(a1 + 168) == 2)
    {
      v62 = *(unsigned int *)(v14 + 640);
      if ((_DWORD)v62)
      {
        v63 = *(_anonymous_namespace_::OperationTransactionState **)(v14 + 632);
        v64 = 136 * v62;
        do
        {
          v63 = (_anonymous_namespace_::OperationTransactionState *)((char *)v63 + 136);
          v64 -= 136;
        }
        while (v64);
      }
      mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((mlir::detail::ConversionPatternRewriterImpl *)v14, 0);
      v65 = *(unsigned int *)(v14 + 272);
      if ((_DWORD)v65)
      {
        v66 = *(mlir::Operation ***)(v14 + 264);
        v67 = 24 * v65;
        do
        {
          v68 = *v66;
          v66 += 3;
          detachNestedAndErase(v68);
          v67 -= 24;
        }
        while (v67);
      }
      v69 = *(unsigned int *)(v14 + 208);
      if ((_DWORD)v69)
      {
        v70 = *(_QWORD *)(v14 + 200);
        v71 = 8 * v69;
        v72 = v70 - 8;
        do
        {
          detachNestedAndErase(*(mlir::Operation **)(v72 + v71));
          v71 -= 8;
        }
        while (v71);
LABEL_192:
        v73 = 1;
        goto LABEL_193;
      }
    }
    else
    {
      mlir::detail::ConversionPatternRewriterImpl::applyRewrites((mlir::detail::ConversionPatternRewriterImpl *)v14);
      v84 = *(_QWORD *)(a1 + 176);
      if (v84)
      {
        v85 = *(unsigned int *)(v14 + 360);
        if ((_DWORD)v85 && *(_DWORD *)(v84 + 16))
        {
          v86 = *(_QWORD **)(v14 + 352);
          v87 = &v86[2 * v85];
          do
          {
            v142 = *(int32x2_t **)(a1 + 176);
            v143 = v142[2].i32[0];
            if (v143)
            {
              v144 = *v142;
              v145 = v143 - 1;
              LODWORD(v139) = ((*v86 >> 4) ^ (*v86 >> 9)) & (v143 - 1);
              v141 = (uint64_t *)(*(_QWORD *)v142 + 8 * v139);
              v140 = *v141;
              if (*v86 == *v141)
              {
LABEL_187:
                *v141 = -8192;
                v142[1] = vadd_s32(v142[1], (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v138 = 1;
                while (v140 != -4096)
                {
                  v137 = v139 + v138++;
                  v139 = v137 & v145;
                  v140 = *(_QWORD *)(*(_QWORD *)&v144 + 8 * v139);
                  if (*v86 == v140)
                  {
                    v141 = (uint64_t *)(*(_QWORD *)&v144 + 8 * v139);
                    goto LABEL_187;
                  }
                }
              }
            }
            v86 += 2;
          }
          while (v86 != v87);
        }
        goto LABEL_192;
      }
    }
    v73 = 1;
    goto LABEL_193;
  }
  v74 = *(unsigned int *)(v14 + 640);
  if ((_DWORD)v74)
  {
    v75 = *(_anonymous_namespace_::OperationTransactionState **)(v14 + 632);
    v76 = 136 * v74;
    do
    {
      v75 = (_anonymous_namespace_::OperationTransactionState *)((char *)v75 + 136);
      v76 -= 136;
    }
    while (v76);
  }
  mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((mlir::detail::ConversionPatternRewriterImpl *)v14, 0);
  v77 = *(unsigned int *)(v14 + 272);
  if ((_DWORD)v77)
  {
    v78 = *(mlir::Operation ***)(v14 + 264);
    v79 = 24 * v77;
    do
    {
      v80 = *v78;
      v78 += 3;
      detachNestedAndErase(v80);
      v79 -= 24;
    }
    while (v79);
  }
  v81 = *(unsigned int *)(v14 + 208);
  if (!(_DWORD)v81)
    goto LABEL_183;
  v82 = *(_QWORD *)(v14 + 200);
  v73 = 8 * v81;
  v83 = v82 - 8;
  do
  {
    detachNestedAndErase(*(mlir::Operation **)(v83 + v73));
    v73 -= 8;
  }
  while (v73);
LABEL_193:
  v146 = v156;
  v156 = 0;
  if (v146)
    mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(v146);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v152);
  if (v163 != v165)
    free(v163);
  return v73;
}

void mlir::applyFullConversion(mlir *this, mlir::Operation *a2, const mlir::ConversionTarget *a3, const mlir::FrozenRewritePatternSet *a4)
{
  _BYTE v4[184];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
}

void sub_20755A9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  mlir::PatternApplicator::~PatternApplicator((mlir::PatternApplicator *)(v6 + 104));
}

void mlir::applyAnalysisConversion(uint64_t a1, uint64_t a2, mlir::FrozenRewritePatternSet *a3)
{
  _BYTE v3[184];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
}

void sub_20755AA4C(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v4 = va_arg(va1, _QWORD);
  mlir::PatternApplicator::~PatternApplicator((mlir::PatternApplicator *)(v3 + 104));
}

uint64_t mlir::ConversionPatternRewriter::canRecoverFromRewriteFailure(mlir::ConversionPatternRewriter *this)
{
  return 1;
}

uint64_t mlir::RewriterBase::Listener::notifyOperationReplaced(mlir::RewriterBase::Listener *this, mlir::Operation *a2, mlir::Operation *a3)
{
  char *v5;
  unint64_t v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a3 + 9))
    v5 = (char *)a3 - 16;
  else
    v5 = 0;
  mlir::ValueRange::ValueRange(v7, (uint64_t)v5, *((unsigned int *)a3 + 9));
  return (*(uint64_t (**)(mlir::RewriterBase::Listener *, mlir::Operation *, unint64_t, unint64_t))(*(_QWORD *)this + 48))(this, a2, v7[0], v7[1]);
}

_QWORD *llvm::MapVector<mlir::Block *,`anonymous namespace'::ArgConverter::ConvertedBlockInfo,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>>,llvm::SmallVector<std::pair<mlir::Block *,`anonymous namespace'::ArgConverter::ConvertedBlockInfo>,0u>>::erase(int32x2_t *a1, _QWORD *a2)
{
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int32x2_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v24;
  int v25;

  v4 = a1[2].i32[0];
  if (v4)
  {
    v5 = *a1;
    v6 = v4 - 1;
    LODWORD(v7) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
    v8 = (uint64_t *)(*(_QWORD *)a1 + 16 * v7);
    v9 = *v8;
    if (*a2 == *v8)
    {
LABEL_3:
      *v8 = -8192;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v24 = 1;
      while (v9 != -4096)
      {
        v25 = v7 + v24++;
        v7 = v25 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
        if (*a2 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
          goto LABEL_3;
        }
      }
    }
  }
  v10 = a2 + 8;
  v11 = a1[3];
  v12 = a1[4].u32[0];
  v13 = (_QWORD *)(*(_QWORD *)&v11 + (v12 << 6));
  if (a2 + 8 != v13)
  {
    do
    {
      *((_OWORD *)v10 - 4) = *(_OWORD *)v10;
      *(v10 - 1) = v10[7];
      v10 += 8;
    }
    while (v10 != v13);
    LODWORD(v12) = a1[4].i32[0];
    v11 = a1[3];
  }
  v14 = (v12 - 1);
  a1[4].i32[0] = v14;
  v15 = *(_QWORD *)&v11 + (v14 << 6);
  v16 = *(void **)(v15 + 16);
  if (v16 != (void *)(v15 + 32))
  {
    free(v16);
    v11 = a1[3];
    v14 = a1[4].u32[0];
  }
  if ((_QWORD *)(*(_QWORD *)&v11 + (v14 << 6)) != a2 && a1[1].i32[0])
  {
    v17 = a1[2].u32[0];
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = *a1;
      while ((**(_QWORD **)&v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)&v19 += 16;
        v18 -= 16;
        if (!v18)
          return a2;
      }
    }
    else
    {
      v19 = *a1;
    }
    v20 = *(_QWORD *)a1 + 16 * v17;
    if (*(_QWORD *)&v19 != v20)
    {
      v21 = ((uint64_t)a2 - *(_QWORD *)&v11) >> 6;
LABEL_19:
      v22 = *(unsigned int *)(*(_QWORD *)&v19 + 8);
      if (v21 < v22)
        *(_DWORD *)(*(_QWORD *)&v19 + 8) = v22 - 1;
      while (1)
      {
        *(_QWORD *)&v19 += 16;
        if (*(_QWORD *)&v19 == v20)
          break;
        if ((**(_QWORD **)&v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (*(_QWORD *)&v19 != v20)
            goto LABEL_19;
          return a2;
        }
      }
    }
  }
  return a2;
}

uint64_t llvm::SmallVectorImpl<std::optional<`anonymous namespace'::ArgConverter::ConvertedArgInfo>>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_16;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 24 * v8 - 7);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 24 * v9 - 7);
        v10 = *v7;
        if (v9 == v10)
        {
LABEL_15:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_16:
          *v7 = 0;
          return a1;
        }
      }
      else
      {
        v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7)
          goto LABEL_15;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7)
        goto LABEL_15;
    }
    memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*(_QWORD *)a2 + 24 * v9), *(_QWORD *)a2 + 24 * v10 - (*(_QWORD *)a2 + 24 * v9));
    goto LABEL_15;
  }
  return a1;
}

uint64_t buildUnresolvedMaterialization(unsigned int a1, mlir::Block *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ZinIrHalH13g *a8, uint64_t a9, uint64_t *a10)
{
  mlir::Region *Parent;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  uint64_t v18;
  ZinIrHalH13g **v19;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30[2];
  _QWORD v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  v30[0] = a5;
  v30[1] = a6;
  v29 = a7;
  if (a6 == 1 && a7 == (*(_QWORD *)(mlir::ValueRange::dereference_iterator(v30, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return mlir::ValueRange::dereference_iterator(v30, 0);
  Parent = (mlir::Region *)mlir::Block::getParent(this);
  v28[0] = mlir::Region::getContext(Parent);
  v28[1] = 0;
  v28[2] = this;
  v28[3] = a3;
  v16 = mlir::OpBuilder::create<mlir::UnrealizedConversionCastOp,mlir::Type &,mlir::ValueRange &>((mlir::OpBuilder *)v28, a4, (uint64_t)&v29, v30);
  v17 = v16;
  v18 = *((unsigned int *)a10 + 2);
  if (v18 >= *((_DWORD *)a10 + 3))
  {
    v31[0] = v16;
    v31[1] = a9 & 0xFFFFFFFFFFFFFFFBLL | (4 * a1);
    v31[2] = a8;
    v21 = v18 + 1;
    v22 = *a10 + 24 * (unint64_t)v18 > (unint64_t)v31;
    if (*a10 <= (unint64_t)v31 && v22)
    {
      v27 = (char *)v31 - *a10;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a10, a10 + 2, v21, 24);
      v23 = *a10;
      v24 = &v27[*a10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a10, a10 + 2, v21, 24);
      v23 = *a10;
      v24 = (char *)v31;
    }
    v25 = v23 + 24 * *((unsigned int *)a10 + 2);
    v26 = *(_OWORD *)v24;
    *(_QWORD *)(v25 + 16) = *((_QWORD *)v24 + 2);
    *(_OWORD *)v25 = v26;
  }
  else
  {
    v19 = (ZinIrHalH13g **)(*a10 + 24 * v18);
    *v19 = v16;
    v19[1] = (ZinIrHalH13g *)(a9 & 0xFFFFFFFFFFFFFFFBLL | (4 * a1));
    v19[2] = a8;
  }
  ++*((_DWORD *)a10 + 2);
  return (uint64_t)v17 - 16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::UnrealizedConversionCastOp,mlir::Type &,mlir::ValueRange &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  unint64_t v19[2];
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.unrealized_conversion_cast", (const unsigned __int8 *)0x22, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"builtin.unrealized_conversion_cast";
    v17[3] = 34;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::ValueRange::ValueRange(v19, a3, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v20, v19[0], v19[1], *a4, a4[1], 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v12;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::InsertIntoBucket<mlir::Region * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  v20 = buffer + 2;
  v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>,mlir::Region *,std::unique_ptr<mlir::Region>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::unique_ptr<mlir::Region>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v11 = &v7[2 * v10];
      v12 = v7 + 2;
      v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)result;
    }
    v14 = &v7[2 * v6];
    do
    {
      *v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(v5 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)v5 + 16 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v21 = 0;
          v22 = 1;
          while (v19 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v19 == -8192;
            if (v23)
              v21 = v18;
            v24 = v17 + v22++;
            v17 = v24 & v16;
            v18 = (_QWORD *)(*(_QWORD *)v5 + 16 * (v24 & v16));
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v21)
            v18 = v21;
        }
LABEL_15:
        *v18 = v15;
        v20 = v4[1];
        v4[1] = 0;
        v18[1] = v20;
        ++*(_DWORD *)(v5 + 8);
        result = v4[1];
        v4[1] = 0;
        if (result)
        {
          mlir::Region::~Region((mlir::Region *)result);
          result = MEMORY[0x20BD002F8]();
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

void llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;

  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a1);
  __p = *(_OWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a2);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3, (void *)(a3 + 32), 8, (uint64_t *)&v11);
  *(_OWORD *)(a3 + 96) = __p;
  *(_QWORD *)(a3 + 112) = v15;
  v15 = 0;
  __p = 0uLL;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a3 + 120, (void *)(a3 + 152), 8, (uint64_t *)&v6);
  *(_OWORD *)(a3 + 216) = v9;
  *(_QWORD *)(a3 + 232) = v10;
  v10 = 0;
  v9 = 0uLL;
  if (v7 != v6)
    free(v7);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v12 != v11)
    free(v12);
}

void llvm::depth_first<mlir::Block *>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;
  void *__p;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[8];
  void *v18;
  void *v19;
  char *v20;

  v3 = *a1;
  v13 = v17;
  v14 = v17;
  v16 = 0;
  v15 = 0x100000008;
  v17[0] = v3;
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = v3;
  v4[8] = 0;
  v4[24] = 0;
  v19 = v4 + 32;
  v20 = v4 + 32;
  v18 = v4;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  __p = 0;
  v5 = (char *)v8 + 8;
  v6 = (char *)v8 + 8;
  v7 = 8;
  v11 = 0;
  v12 = 0;
  llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v13, (uint64_t)&v5, a2);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v6 != v5)
    free(v6);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v14 != v13)
    free(v14);
}

void llvm::make_pointee_range<llvm::iterator_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>> &,llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>(llvm::SmallPtrSetImplBase *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  void *v14;
  void *v15;
  const void *v16;
  void *v17[2];
  char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 __p;
  char *v23;
  void *v24;
  void *v25;
  const void *v26;
  __int128 v27;
  char *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  void *v34;
  void *v35;
  _BYTE v36[64];
  __int128 v37;
  char *v38;

  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v24, &v26, a1);
  v27 = 0uLL;
  v28 = 0;
  v5 = (_BYTE *)*((_QWORD *)a1 + 12);
  v4 = (_BYTE *)*((_QWORD *)a1 + 13);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      goto LABEL_28;
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)&v27 = v7;
    *((_QWORD *)&v27 + 1) = v7;
    v28 = &v7[32 * (v6 >> 5)];
    v8 = v6 & 0xFFFFFFFFFFFFFFE0;
    memcpy(v7, v5, v8);
    *((_QWORD *)&v27 + 1) = &v7[v8];
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, v36, 8, (uint64_t *)&v24);
  v37 = v27;
  v38 = v28;
  v28 = 0;
  v27 = 0uLL;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v29, &v31, 8, (uint64_t *)&v34);
  v32 = v37;
  v33 = v38;
  v38 = 0;
  v37 = 0uLL;
  if (v35 != v34)
    free(v35);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v14, &v16, (llvm::SmallPtrSetImplBase *)((char *)a1 + 120));
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v10 = (_BYTE *)*((_QWORD *)a1 + 27);
  v9 = (_BYTE *)*((_QWORD *)a1 + 28);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      v12 = (char *)operator new(v9 - v10);
      v17[0] = v12;
      v17[1] = v12;
      v18 = &v12[32 * (v11 >> 5)];
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v12, v10, v13);
      v17[1] = &v12[v13];
      goto LABEL_9;
    }
LABEL_28:
    abort();
  }
LABEL_9:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v34, v36, 8, (uint64_t *)&v14);
  v37 = *(_OWORD *)v17;
  v38 = v18;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v19, &v21, 8, (uint64_t *)&v34);
  __p = v37;
  v23 = v38;
  v38 = 0;
  v37 = 0uLL;
  if (v35 != v34)
    free(v35);
  llvm::make_range<llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v29, (uint64_t)&v19, a2);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v20 != v19)
    free(v20);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v15 != v14)
    free(v15);
  if ((_QWORD)v32)
  {
    *((_QWORD *)&v32 + 1) = v32;
    operator delete((void *)v32);
  }
  if (v30 != v29)
    free(v30);
  if ((_QWORD)v27)
  {
    *((_QWORD *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
  if (v25 != v24)
    free(v25);
}

_QWORD *std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C054540;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C054540;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x48uLL);
  *v2 = &off_24C054540;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    v2[4] = 0;
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      goto LABEL_6;
LABEL_10:
    v2[8] = 0;
    return v2;
  }
  if (v4 == a1 + 8)
  {
    v2[4] = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      goto LABEL_6;
    goto LABEL_10;
  }
  v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  v5 = *(_QWORD *)(a1 + 64);
  if (!v5)
    goto LABEL_10;
LABEL_6:
  if (v5 == a1 + 40)
  {
    v2[8] = v2 + 5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    v2[8] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  return v2;
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  *a2 = &off_24C054540;
  v4 = a2 + 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    a2[4] = 0;
    result = *(_QWORD *)(a1 + 64);
    if (result)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v5 == a1 + 8)
  {
    a2[4] = v4;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    result = *(_QWORD *)(a1 + 64);
    if (result)
      goto LABEL_6;
LABEL_9:
    a2[8] = 0;
    return result;
  }
  a2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v4);
  result = *(_QWORD *)(a1 + 64);
  if (!result)
    goto LABEL_9;
LABEL_6:
  if (result == a1 + 40)
  {
    a2[8] = a2 + 5;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    a2[8] = result;
  }
  return result;
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::destroy(uint64_t *a1)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = a1[4];
  if ((uint64_t *)result == v2)
    return (*(uint64_t (**)(uint64_t *))(*v2 + 32))(v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = __p + 40;
  v4 = (char *)*((_QWORD *)__p + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v10 = *a2;
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v10);
    if (v5 > 0xFFu)
      return v5 | 0x100u;
    v10 = v3;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v10);
      return v7 | (HIBYTE(v7) << 8);
    }
  }
  v9 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::target(v9);
}

uint64_t std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL24composeLegalityCallbacksNSt3__18functionIFNS_8optionalIbEEPN4mlir9OperationEEEES7_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0,std::allocator<composeLegalityCallbacks(std::function<std::optional<BOOL> ()(mlir::Operation *)>,std::function<std::optional<BOOL> ()(mlir::Operation *)>)::$_0>,std::optional<BOOL> ()(mlir::Operation *)>::target_type()
{
}

void llvm::function_ref<void ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::buildLegalizationGraph(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  char *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void **v45;
  int64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54[2];
  uint64_t v55;
  _BYTE v56[24];
  _BYTE *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v5 = *(_DWORD *)(a2 + 8) == 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v7 = (void *)v6;
  else
    v7 = 0;
  v54[0] = v7;
  v54[1] = (void *)v5;
  if (!v5)
  {
    v11 = *a1;
    v12 = *(unsigned int *)(*a1 + 8);
    if (v12 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v11 + 16), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(v11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = a2;
    ++*(_DWORD *)(v11 + 8);
    return;
  }
  mlir::ConversionTarget::getOpInfo(*(_QWORD *)(v4 + 96), v6, (uint64_t)&v55);
  if (v58)
  {
    v8 = v55;
    v9 = v57;
    if (v57 == v56)
    {
      v10 = 4;
      v9 = v56;
    }
    else
    {
      if (!v57)
        goto LABEL_15;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
    if (!v8)
      return;
  }
  v13 = a1[2];
  v14 = *(_DWORD *)(v13 + 16);
  if (v14)
  {
    v15 = v14 - 1;
    v16 = ((LODWORD(v54[0]) >> 4) ^ (LODWORD(v54[0]) >> 9)) & v15;
    v17 = (char *)(*(_QWORD *)v13 + 56 * v16);
    v18 = *(void **)v17;
    if (v54[0] == *(void **)v17)
      goto LABEL_29;
    v19 = 0;
    v20 = 1;
    while (v18 != (void *)-4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == (void *)-8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & v15;
      v17 = (char *)(*(_QWORD *)v13 + 56 * v16);
      v18 = *(void **)v17;
      if (v54[0] == *(void **)v17)
        goto LABEL_29;
    }
    if (v19)
      v23 = v19;
    else
      v23 = v17;
  }
  else
  {
    v23 = 0;
  }
  v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>(a1[2], v23, (uint64_t *)v54);
LABEL_29:
  v24 = *((_QWORD *)v17 + 2);
  if (v24 != *((_QWORD *)v17 + 1))
  {
LABEL_30:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v17 + 8), (const void *)a2);
    goto LABEL_31;
  }
  v49 = *((unsigned int *)v17 + 7);
  if ((_DWORD)v49)
  {
    v50 = 0;
    v51 = 8 * v49;
    v52 = (uint64_t *)*((_QWORD *)v17 + 2);
    while (*v52 != a2)
    {
      if (*v52 == -2)
        v50 = v52;
      ++v52;
      v51 -= 8;
      if (!v51)
      {
        if (!v50)
          goto LABEL_75;
        *v50 = a2;
        --*((_DWORD *)v17 + 8);
        break;
      }
    }
  }
  else
  {
LABEL_75:
    if (v49 >= *((_DWORD *)v17 + 6))
      goto LABEL_30;
    *((_DWORD *)v17 + 7) = v49 + 1;
    *(_QWORD *)(v24 + 8 * v49) = a2;
  }
LABEL_31:
  v25 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v25)
  {
    v26 = *(uint64_t **)(a2 + 24);
    v27 = &v26[v25];
    while (1)
    {
      v28 = *v26;
      v55 = *v26;
      v29 = a1[3];
      v30 = *(_DWORD *)(v29 + 16);
      if (!v30)
        break;
      v31 = v30 - 1;
      v32 = v31 & ((v28 >> 4) ^ (v28 >> 9));
      v33 = (char *)(*(_QWORD *)v29 + 56 * v32);
      v34 = *(_QWORD *)v33;
      if (*(_QWORD *)v33 != v28)
      {
        v35 = 0;
        v36 = 1;
        while (v34 != -4096)
        {
          if (v35)
            v37 = 0;
          else
            v37 = v34 == -8192;
          if (v37)
            v35 = v33;
          v38 = v32 + v36++;
          v32 = v38 & v31;
          v33 = (char *)(*(_QWORD *)v29 + 56 * v32);
          v34 = *(_QWORD *)v33;
          if (*(_QWORD *)v33 == v28)
            goto LABEL_48;
        }
        if (v35)
          v39 = v35;
        else
          v39 = v33;
        goto LABEL_47;
      }
LABEL_48:
      v40 = *((_QWORD *)v33 + 2);
      v41 = v54[0];
      if (v40 != *((_QWORD *)v33 + 1))
        goto LABEL_33;
      v42 = *((unsigned int *)v33 + 7);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = 8 * v42;
        v45 = (void **)*((_QWORD *)v33 + 2);
        while (*v45 != v54[0])
        {
          if (*v45 == (void *)-2)
            v43 = v45;
          ++v45;
          v44 -= 8;
          if (!v44)
          {
            if (!v43)
              goto LABEL_57;
            *v43 = v54[0];
            --*((_DWORD *)v33 + 8);
            goto LABEL_34;
          }
        }
        goto LABEL_34;
      }
LABEL_57:
      if (v42 < *((_DWORD *)v33 + 6))
      {
        *((_DWORD *)v33 + 7) = v42 + 1;
        *(_QWORD *)(v40 + 8 * v42) = v41;
      }
      else
      {
LABEL_33:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v33 + 8), v54[0]);
      }
LABEL_34:
      if (++v26 == v27)
        goto LABEL_62;
    }
    v39 = 0;
LABEL_47:
    v33 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>(a1[3], v39, &v55);
    goto LABEL_48;
  }
LABEL_62:
  v46 = (int64x2_t *)a1[4];
  v53 = a2;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v46, &v53, (uint64_t)&v55);
  if (v56[8])
  {
    v47 = v53;
    v48 = v46[2].u32[0];
    if (v48 >= v46[2].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46[1].i64[1], &v46[2].u64[1], v48 + 1, 8);
      LODWORD(v48) = v46[2].i32[0];
    }
    *(_QWORD *)(v46[1].i64[1] + 8 * v48) = v47;
    ++v46[2].i32[0];
  }
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::InsertIntoBucket<mlir::OperationName const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(56 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 7 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 56 * v17 - 56;
  v19 = buffer;
  if (v18 < 0x38)
    goto LABEL_34;
  v20 = v18 / 0x38 + 1;
  v19 = &buffer[7 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[7] = -4096;
    v22 += 14;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 7;
    }
    while (v19 != &buffer[7 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[7 * v24];
  v25 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = (char *)&buffer[7 * v24];
      v25 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *((_QWORD *)a2 + 1) = a2 + 40;
  *((_QWORD *)a2 + 2) = a2 + 40;
  *((_QWORD *)a2 + 3) = 2;
  *((_DWORD *)a2 + 8) = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>,mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallPtrSet<mlir::OperationName,2u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  void *v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6 - 56;
    if (v8 < 0x38)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[7 * v6];
      do
      {
        *v9 = -4096;
        v9 += 7;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x38 + 1;
    v9 = &v7[7 * (v10 & 0xFFFFFFFFFFFFFFELL)];
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[7] = -4096;
      v12 += 14;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = *(_DWORD *)(a1 + 16);
        if (v15)
        {
          v16 = v15 - 1;
          v17 = v16 & ((v14 >> 4) ^ (v14 >> 9));
          v18 = (_QWORD *)(*(_QWORD *)a1 + 56 * v17);
          v19 = *v18;
          if (v14 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -4096)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -8192;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v16;
              v18 = (_QWORD *)(*(_QWORD *)a1 + 56 * v17);
              v19 = *v18;
              if (v14 == *v18)
                goto LABEL_25;
            }
            if (v20)
              v18 = v20;
          }
        }
        else
        {
          v18 = 0;
        }
LABEL_25:
        *v18 = v14;
        llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v18 + 1), v18 + 5, 2, v4 + 1);
        ++*(_DWORD *)(a1 + 8);
        v24 = (void *)v4[2];
        if (v24 != (void *)v4[1])
          free(v24);
      }
      v4 += 7;
    }
    while (v4 != a3);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(32 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = (char *)(32 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(_QWORD)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = buffer;
  if (((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v19 = ((v17 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v18 = &buffer[4 * (v19 & 0xFFFFFFFFFFFFFFELL)];
  v20 = buffer + 4;
  v21 = v19 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 4) = -4096;
    *v20 = -4096;
    v20 += 8;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -4096;
      v18 += 4;
    }
    while (v18 != &buffer[4 * v17]);
  }
  v7 = *a3;
  v22 = v17 - 1;
  v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[4 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[4 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x100000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[4 * v10];
      v12 = v7 + 4;
      v13 = v10;
      do
      {
        *(v12 - 4) = -4096;
        *v12 = -4096;
        v12 += 8;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_QWORD **)a1;
    }
    v14 = &v7[4 * v6];
    do
    {
      *v11 = -4096;
      v11 += 4;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v16 = *(_DWORD *)(a1 + 16) - 1;
        v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
        v19 = *v18;
        if (v15 != *v18)
        {
          v21 = 0;
          v22 = 1;
          while (v19 != -4096)
          {
            if (v21)
              v23 = 0;
            else
              v23 = v19 == -8192;
            if (v23)
              v21 = v18;
            v24 = v17 + v22++;
            v17 = v24 & v16;
            v18 = (_QWORD *)(*(_QWORD *)a1 + 32 * v17);
            v19 = *v18;
            if (v15 == *v18)
              goto LABEL_15;
          }
          if (v21)
            v18 = v21;
        }
LABEL_15:
        *v18 = v15;
        v18[1] = v18 + 3;
        v18[2] = 0x100000000;
        if (*((_DWORD *)v4 + 4))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(v18 + 1), (uint64_t)(v4 + 1));
        ++*(_DWORD *)(a1 + 8);
        v20 = (uint64_t *)v4[1];
        if (v20 != v4 + 3)
          free(v20);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t `anonymous namespace'::OperationLegalizer::computeOpLegalizationDepth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;

  v5 = *(_QWORD *)a2;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v8 = (uint64_t *)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a1)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == a1)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  if (v8 != (uint64_t *)(v5 + 16 * v6))
    return *((unsigned int *)v8 + 2);
  v13 = *(_QWORD *)a3;
  v14 = *(unsigned int *)(a3 + 16);
  if (!(_DWORD)v14)
    goto LABEL_16;
  v15 = v14 - 1;
  v16 = (uint64_t *)(v13 + 32 * (((_DWORD)v14 - 1) & ((a1 >> 4) ^ (a1 >> 9))));
  v17 = *v16;
  if (*v16 != a1)
  {
    v18 = 1;
    LODWORD(v19) = v15 & ((a1 >> 4) ^ (a1 >> 9));
    while (v17 != -4096)
    {
      v20 = v19 + v18++;
      v19 = v20 & v15;
      v17 = *(_QWORD *)(v13 + 32 * v19);
      if (v17 == a1)
      {
        v16 = (uint64_t *)(v13 + 32 * v19);
        goto LABEL_17;
      }
    }
LABEL_16:
    v16 = (uint64_t *)(v13 + 32 * v14);
  }
LABEL_17:
  if (v16 == (uint64_t *)(v13 + 32 * v14) || !*((_DWORD *)v16 + 4))
    return 0;
  v21 = (uint64_t)(v16 + 1);
  if (!(_DWORD)v6)
    goto LABEL_59;
  v22 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v23 = (_QWORD *)(v5 + 16 * v22);
  v24 = *v23;
  if (*v23 != a1)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -8192;
      if (v27)
        v25 = v23;
      v28 = v22 + v26++;
      v22 = v28 & (v6 - 1);
      v23 = (_QWORD *)(v5 + 16 * v22);
      v24 = *v23;
      if (*v23 == a1)
        goto LABEL_37;
    }
    if (v25)
      v40 = (uint64_t)v25;
    else
      v40 = (uint64_t)v23;
    v41 = *(_DWORD *)(a2 + 8);
    if (4 * v41 + 4 < (3 * v6))
    {
      if ((int)v6 + ~v41 - *(_DWORD *)(a2 + 12) > v6 >> 3)
        goto LABEL_33;
      goto LABEL_60;
    }
LABEL_59:
    LODWORD(v6) = 2 * v6;
LABEL_60:
    v57 = a3;
    v58 = v21;
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a2, v6);
    v42 = *(_DWORD *)(a2 + 16) - 1;
    v43 = v42 & ((a1 >> 4) ^ (a1 >> 9));
    v40 = *(_QWORD *)a2 + 16 * v43;
    v44 = *(_QWORD *)v40;
    if (*(_QWORD *)v40 == a1)
    {
      v29 = a1;
      a3 = v57;
      v21 = v58;
      goto LABEL_34;
    }
    v49 = 0;
    v50 = 1;
    a3 = v57;
    v21 = v58;
    while (v44 != -4096)
    {
      if (v49)
        v51 = 0;
      else
        v51 = v44 == -8192;
      if (v51)
        v49 = v40;
      v52 = v43 + v50++;
      v43 = v52 & v42;
      v40 = *(_QWORD *)a2 + 16 * (v52 & v42);
      v44 = *(_QWORD *)v40;
      v29 = a1;
      if (*(_QWORD *)v40 == a1)
        goto LABEL_34;
    }
    if (v49)
      v40 = v49;
    a3 = v57;
    v21 = v58;
LABEL_33:
    v29 = *(_QWORD *)v40;
LABEL_34:
    ++*(_DWORD *)(a2 + 8);
    if (v29 != -4096)
      --*(_DWORD *)(a2 + 12);
    *(_QWORD *)v40 = a1;
    *(_DWORD *)(v40 + 8) = -1;
  }
LABEL_37:
  v30 = *(_DWORD *)(a2 + 16);
  if (!v30)
    goto LABEL_65;
  v31 = v30 - 1;
  v32 = (v30 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v33 = *(_QWORD *)a2 + 16 * v32;
  v34 = *(_QWORD *)v33;
  if (*(_QWORD *)v33 == a1)
  {
LABEL_39:
    *(_DWORD *)(v33 + 8) = result;
    return result;
  }
  v36 = 0;
  v37 = 1;
  while (v34 != -4096)
  {
    if (v36)
      v38 = 0;
    else
      v38 = v34 == -8192;
    if (v38)
      v36 = v33;
    v39 = v32 + v37++;
    v32 = v39 & v31;
    v33 = *(_QWORD *)a2 + 16 * (v39 & v31);
    v34 = *(_QWORD *)v33;
    if (*(_QWORD *)v33 == a1)
      goto LABEL_39;
  }
  if (v36)
    v33 = v36;
  v45 = *(_DWORD *)(a2 + 8);
  if (4 * v45 + 4 < 3 * v30)
  {
    if (v30 + ~v45 - *(_DWORD *)(a2 + 12) > v30 >> 3)
      goto LABEL_42;
    v59 = result;
  }
  else
  {
LABEL_65:
    v59 = result;
    v30 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a2, v30);
  v46 = *(_DWORD *)(a2 + 16) - 1;
  v47 = v46 & ((a1 >> 4) ^ (a1 >> 9));
  v33 = *(_QWORD *)a2 + 16 * v47;
  v48 = *(_QWORD *)v33;
  if (*(_QWORD *)v33 == a1)
  {
    v35 = a1;
    result = v59;
    goto LABEL_43;
  }
  v53 = 0;
  v54 = 1;
  result = v59;
  while (v48 != -4096)
  {
    if (v53)
      v55 = 0;
    else
      v55 = v48 == -8192;
    if (v55)
      v53 = v33;
    v56 = v47 + v54++;
    v47 = v56 & v46;
    v33 = *(_QWORD *)a2 + 16 * (v56 & v46);
    v48 = *(_QWORD *)v33;
    v35 = a1;
    if (*(_QWORD *)v33 == a1)
      goto LABEL_43;
  }
  if (v53)
    v33 = v53;
LABEL_42:
  v35 = *(_QWORD *)v33;
LABEL_43:
  ++*(_DWORD *)(a2 + 8);
  if (v35 != -4096)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v33 = a1;
  *(_DWORD *)(v33 + 8) = 0;
  *(_DWORD *)(v33 + 8) = result;
  return result;
}

uint64_t `anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  char *v20;
  const std::nothrow_t *v21;
  unint64_t v22;
  _OWORD *v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v33 = v35;
  v34 = 0x400000000;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v6, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a1;
    v8 = *(_QWORD *)a1 + 8 * v6;
    LODWORD(v9) = -1;
    do
    {
      v10 = *v7;
      v32 = v10;
      v11 = 1;
      v31 = 1;
      v12 = *(unsigned int *)(v10 + 32);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)(v10 + 24);
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          if (v31 <= v16 + 1)
            v11 = v16 + 1;
          else
            v11 = v31;
          v31 = v11;
          v14 -= 8;
        }
        while (v14);
      }
      v17 = v34;
      if (v34 >= HIDWORD(v34))
      {
        llvm::SmallVectorTemplateBase<std::pair<mlir::Pattern const*,unsigned int>,true>::growAndEmplaceBack<mlir::Pattern const*&,unsigned int &>((uint64_t)&v33, &v32, &v31);
      }
      else
      {
        v18 = (char *)v33 + 16 * v34;
        *(_QWORD *)v18 = v32;
        *((_DWORD *)v18 + 2) = v11;
        LODWORD(v34) = v17 + 1;
      }
      if (v31 >= v9)
        v9 = v9;
      else
        v9 = v31;
      ++v7;
    }
    while (v7 != (uint64_t *)v8);
  }
  else
  {
    v9 = 0xFFFFFFFFLL;
  }
  v19 = v34;
  v20 = (char *)v33;
  if ((_DWORD)v34 != 1)
  {
    if (!(_DWORD)v34)
    {
LABEL_25:
      *(_DWORD *)(a1 + 8) = 0;
      v20 = (char *)v33;
      v25 = v34;
      if (!(_DWORD)v34)
        goto LABEL_33;
      goto LABEL_28;
    }
    v21 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v22 = v34;
    while (1)
    {
      v23 = operator new(16 * v22, v21);
      if (v23)
        break;
      v24 = v22 > 1;
      v22 >>= 1;
      if (!v24)
        goto LABEL_25;
    }
    v26 = v23;
    operator delete(v26);
    *(_DWORD *)(a1 + 8) = 0;
    v20 = (char *)v33;
    v25 = v34;
    if ((_DWORD)v34)
    {
LABEL_28:
      v27 = 0;
      v28 = 16 * v25;
      do
      {
        v29 = *(_QWORD *)v20;
        if (v27 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v27 + 1, 8);
          v27 = *(_DWORD *)(a1 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29;
        v27 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v27;
        v20 += 16;
        v28 -= 16;
      }
      while (v28);
      v20 = (char *)v33;
    }
  }
LABEL_33:
  if (v20 != (char *)v35)
    free(v20);
  return v9;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<mlir::Pattern const*,unsigned int>,true>::growAndEmplaceBack<mlir::Pattern const*&,unsigned int &>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,`anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0 &,std::pair<mlir::Pattern const*,unsigned int> *>(char *result, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int v29;
  char *v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *((_QWORD *)a2 - 2);
    v8 = *((_DWORD *)a2 - 2);
    v9 = *(_QWORD *)result;
    v10 = *((_DWORD *)result + 2);
    if (v8 == v10)
    {
      if (*(unsigned __int16 *)(v9 + 12) >= *(unsigned __int16 *)(v7 + 12))
        return result;
    }
    else if (v8 >= v10)
    {
      return result;
    }
    *(_QWORD *)result = v7;
    *((_QWORD *)a2 - 2) = v9;
    *((_DWORD *)result + 2) = v8;
    *((_DWORD *)a2 - 2) = v10;
    return result;
  }
  if ((uint64_t)a3 <= 0)
  {
    if (result == a2)
      return result;
    v17 = result + 16;
    if (result + 16 == a2)
      return result;
    v18 = 0;
    v19 = result;
    while (1)
    {
      v21 = v19;
      v19 = v17;
      v22 = *((_QWORD *)v21 + 2);
      v23 = *((_DWORD *)v21 + 6);
      v24 = *((_DWORD *)v21 + 2);
      if (v23 != v24)
        break;
      if (*(unsigned __int16 *)(*(_QWORD *)v21 + 12) >= *(unsigned __int16 *)(v22 + 12))
        goto LABEL_17;
      *((_QWORD *)v21 + 2) = *(_QWORD *)v21;
      *((_DWORD *)v19 + 2) = v24;
      v20 = result;
      if (v21 != result)
        goto LABEL_24;
LABEL_16:
      *(_QWORD *)v20 = v22;
      *((_DWORD *)v20 + 2) = v23;
LABEL_17:
      v17 = v19 + 16;
      v18 += 16;
      if (v19 + 16 == a2)
        return result;
    }
    if (v23 >= v24)
      goto LABEL_17;
    *((_QWORD *)v21 + 2) = *(_QWORD *)v21;
    *((_DWORD *)v19 + 2) = v24;
    v20 = result;
    if (v21 == result)
      goto LABEL_16;
LABEL_24:
    v25 = v18;
    while (1)
    {
      while (1)
      {
        v28 = &result[v25];
        v29 = *(_DWORD *)&result[v25 - 8];
        if (v23 == v29)
          break;
        if (v23 >= v29)
        {
          v20 = &result[v25];
          goto LABEL_16;
        }
        v21 -= 16;
        v30 = &result[v25];
        *(_QWORD *)v30 = *((_QWORD *)v28 - 2);
        *((_DWORD *)v30 + 2) = v29;
        v25 -= 16;
        if (!v25)
        {
LABEL_30:
          v20 = result;
          goto LABEL_16;
        }
      }
      v26 = *((_QWORD *)v28 - 2);
      if (*(unsigned __int16 *)(v26 + 12) >= *(unsigned __int16 *)(v22 + 12))
        break;
      v21 -= 16;
      v27 = &result[v25];
      *(_QWORD *)v27 = v26;
      *((_DWORD *)v27 + 2) = v29;
      v25 -= 16;
      if (!v25)
        goto LABEL_30;
    }
    v20 = v21;
    goto LABEL_16;
  }
  v13 = a4;
  v14 = a3 >> 1;
  v15 = &result[16 * (a3 >> 1)];
  v16 = a3 >> 1;
  if ((uint64_t)a3 <= a5)
  {
    v31 = &v13[v14];
    v32 = &v13[a3];
    v33 = v31;
    while (v33 != v32)
    {
      v34 = *(_QWORD *)v33;
      v35 = *((_DWORD *)v33 + 2);
      v36 = *(_QWORD *)v13;
      v37 = *((_DWORD *)v13 + 2);
      v38 = v35 >= v37;
      if (v35 == v37)
        v38 = *(unsigned __int16 *)(v36 + 12) >= *(unsigned __int16 *)(v34 + 12);
      if (v38)
      {
        *(_QWORD *)v6 = v36;
        *((_DWORD *)v6 + 2) = v37;
        ++v13;
        v6 += 16;
        if (v13 == v31)
        {
LABEL_40:
          if (v33 != v32)
          {
            v39 = 0;
            do
            {
              v40 = &v33[v39];
              v41 = &v6[v39 * 16];
              *(_QWORD *)v41 = *(_QWORD *)&v33[v39];
              *((_DWORD *)v41 + 2) = DWORD2(v33[v39++]);
            }
            while (v40 + 1 != v32);
          }
          return result;
        }
      }
      else
      {
        *(_QWORD *)v6 = v34;
        *((_DWORD *)v6 + 2) = v35;
        ++v33;
        v6 += 16;
        if (v13 == v31)
          goto LABEL_40;
      }
    }
    if (v13 != v31)
    {
      v42 = 0;
      do
      {
        v43 = &v6[v42 * 16];
        v44 = &v13[v42];
        *(_QWORD *)v43 = *(_QWORD *)&v13[v42];
        *((_DWORD *)v43 + 2) = DWORD2(v13[v42++]);
      }
      while (v44 + 1 != v31);
    }
  }
  else
  {
  }
  return result;
}

_DWORD *std::__stable_sort_move<std::_ClassicAlgPolicy,`anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0 &,std::pair<mlir::Pattern const*,unsigned int> *>(_DWORD *result, _DWORD *a2, unint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  _DWORD *v16;
  _OWORD *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  __int128 v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v8 = a2 - 4;
    v9 = *(a2 - 2);
    v10 = result[2];
    if (v9 == v10)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)result + 12) >= *(unsigned __int16 *)(*(_QWORD *)v8 + 12))
      {
LABEL_8:
        *a4 = *(_OWORD *)result;
        v11 = *(_OWORD *)v8;
LABEL_30:
        a4[1] = v11;
        return result;
      }
    }
    else if (v9 >= v10)
    {
      goto LABEL_8;
    }
    *a4 = *(_OWORD *)v8;
    v11 = *(_OWORD *)result;
    goto LABEL_30;
  }
  if (a3 == 1)
  {
    *a4 = *(_OWORD *)result;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v25 = a3 >> 1;
    v26 = 16 * (a3 >> 1);
    v27 = &result[(unint64_t)v26 / 4];
    v28 = &v7[(unint64_t)v26 / 4];
    while (v28 != a2)
    {
      v30 = v28[2];
      v31 = v7[2];
      v32 = v30 >= v31;
      if (v30 == v31)
        v32 = *(unsigned __int16 *)(*(_QWORD *)v7 + 12) >= *(unsigned __int16 *)(*(_QWORD *)v28 + 12);
      if (v32)
      {
        v33 = *(_OWORD *)v7;
        v7 += 4;
        *v4++ = v33;
        if (v7 == v27)
        {
LABEL_39:
          if (v28 != a2)
          {
            v34 = 0;
            do
            {
              v4[v34 / 4] = *(_OWORD *)&v28[v34];
              v34 += 4;
            }
            while (&v28[v34] != a2);
          }
          return result;
        }
      }
      else
      {
        v29 = *(_OWORD *)v28;
        v28 += 4;
        *v4++ = v29;
        if (v7 == v27)
          goto LABEL_39;
      }
    }
    if (v7 != v27)
    {
      v35 = 0;
      do
      {
        v4[v35 / 4] = *(_OWORD *)&v7[v35];
        v35 += 4;
      }
      while (&v7[v35] != v27);
    }
  }
  else if (result != a2)
  {
    *a4 = *(_OWORD *)result;
    v12 = result + 4;
    if (result + 4 != a2)
    {
      v13 = 0;
      v14 = a4;
      while (1)
      {
        v16 = v12;
        v17 = v14 + 4;
        v18 = v7[6];
        v19 = v14[2];
        if (v18 != v19)
          break;
        if (*(unsigned __int16 *)(*(_QWORD *)v14 + 12) < *(unsigned __int16 *)(*(_QWORD *)v16 + 12))
        {
LABEL_20:
          *v17 = *(_OWORD *)v14;
          v15 = (char *)a4;
          if (v14 == (_DWORD *)a4)
            goto LABEL_14;
          v20 = v13;
          while (1)
          {
            v22 = v7[6];
            v23 = *(_QWORD *)((char *)a4 + v20 - 16);
            v24 = *(_DWORD *)((char *)a4 + v20 - 8);
            if (v22 != v24)
              break;
            if (*(unsigned __int16 *)(v23 + 12) >= *(unsigned __int16 *)(*(_QWORD *)v16 + 12))
            {
              v15 = (char *)v14;
              goto LABEL_14;
            }
LABEL_23:
            v14 -= 4;
            v21 = (char *)a4 + v20;
            *(_QWORD *)v21 = v23;
            *((_DWORD *)v21 + 2) = v24;
            v20 -= 16;
            if (!v20)
            {
              v15 = (char *)a4;
              goto LABEL_14;
            }
          }
          if (v22 < v24)
            goto LABEL_23;
          v15 = (char *)a4 + v20;
LABEL_14:
          *(_QWORD *)v15 = *(_QWORD *)v16;
          *((_DWORD *)v15 + 2) = v7[6];
          v12 = v16 + 4;
          v13 += 16;
          v14 = v17;
          v7 = v16;
          if (v16 + 4 == a2)
            return result;
        }
        else
        {
LABEL_17:
          *v17 = *(_OWORD *)v16;
          v12 = v16 + 4;
          v13 += 16;
          v14 += 4;
          v7 = v16;
          if (v16 + 4 == a2)
            return result;
        }
      }
      if (v18 >= v19)
        goto LABEL_17;
      goto LABEL_20;
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,`anonymous namespace'::OperationLegalizer::applyCostModelToPatterns(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,unsigned int,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,unsigned int>> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0 &,std::pair<mlir::Pattern const*,unsigned int> *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unsigned int v33;
  BOOL v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *i;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  char *v64;
  unint64_t v65;
  unsigned int *v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;

  if (!a5)
    return result;
  while (2)
  {
    if (a5 <= a7 || a4 <= a7)
    {
      if (a4 <= a5)
      {
        if (result != a2)
        {
          v56 = 0;
          do
          {
            *(_OWORD *)&a6[v56] = *(_OWORD *)&result[v56 * 8];
            v56 += 2;
          }
          while (&result[v56 * 8] != a2);
          if (v56 * 8)
          {
            v57 = &a6[v56];
            v58 = (uint64_t)&a6[v56 - 2];
            while (a2 != a3)
            {
              v59 = *(_QWORD *)a2;
              v60 = *((_DWORD *)a2 + 2);
              v61 = *a6;
              v62 = *((_DWORD *)a6 + 2);
              v63 = v60 >= v62;
              if (v60 == v62)
                v63 = *(unsigned __int16 *)(v61 + 12) >= *(unsigned __int16 *)(v59 + 12);
              if (v63)
              {
                *(_QWORD *)result = v61;
                *((_DWORD *)result + 2) = v62;
                a6 += 2;
                result += 16;
                if (v57 == a6)
                  return result;
              }
              else
              {
                *(_QWORD *)result = v59;
                *((_DWORD *)result + 2) = v60;
                a2 += 16;
                result += 16;
                if (v57 == a6)
                  return result;
              }
            }
            v67 = 0;
            do
            {
              v68 = &result[v67 * 8];
              v69 = &a6[v67];
              *(_QWORD *)v68 = a6[v67];
              *((_DWORD *)v68 + 2) = a6[v67 + 1];
              v67 += 2;
            }
            while ((uint64_t *)v58 != v69);
          }
        }
      }
      else if (a2 != a3)
      {
        v48 = 0;
        do
        {
          *(_OWORD *)&a6[v48] = *(_OWORD *)&a2[v48 * 8];
          v48 += 2;
        }
        while (&a2[v48 * 8] != a3);
        if (v48 * 8)
        {
          v49 = &a6[v48];
          v50 = (unsigned int *)(a3 - 8);
          while (a2 != result)
          {
            v51 = a2 - 16;
            v52 = *((_QWORD *)a2 - 2);
            v53 = *((_DWORD *)a2 - 2);
            v54 = *((_DWORD *)v49 - 2);
            v55 = v54 >= v53;
            if (v54 == v53)
              v55 = *(unsigned __int16 *)(v52 + 12) >= *(unsigned __int16 *)(*(v49 - 2) + 12);
            if (v55)
            {
              v52 = *(v49 - 2);
              v53 = *((_DWORD *)v49 - 2);
              v51 = a2;
              v49 -= 2;
            }
            *((_QWORD *)v50 - 1) = v52;
            *v50 = v53;
            v50 -= 4;
            a2 = v51;
            if (v49 == a6)
              return result;
          }
          v65 = 0;
          do
          {
            v66 = &v50[v65 / 4];
            *((_QWORD *)v66 - 1) = v49[v65 / 8 - 2];
            *v66 = v49[v65 / 8 - 1];
            v65 -= 16;
          }
          while (&v49[v65 / 8] != a6);
        }
      }
      return result;
    }
    if (!a4)
      return result;
    v10 = 0;
    v11 = *(_QWORD *)a2;
    v12 = *((_DWORD *)a2 + 2);
    v13 = -a4;
    while (1)
    {
      v14 = *(_QWORD *)&result[v10];
      v15 = *(_DWORD *)&result[v10 + 8];
      if (v12 == v15)
      {
        if (*(unsigned __int16 *)(v14 + 12) < *(unsigned __int16 *)(v11 + 12))
          break;
        goto LABEL_7;
      }
      if (v12 < v15)
        break;
LABEL_7:
      v10 += 16;
      v34 = __CFADD__(v13++, 1);
      if (v34)
        return result;
    }
    v16 = &result[v10];
    if (-v13 < a5)
    {
      if (a5 >= 0)
        v17 = a5;
      else
        v17 = a5 + 1;
      v18 = v17 >> 1;
      v19 = &a2[16 * (v17 >> 1)];
      if (v16 != a2)
      {
        v20 = *((_DWORD *)v19 + 2);
        v21 = &result[v10];
        v22 = (a2 - result - v10) >> 4;
        v23 = v16;
        while (1)
        {
          v24 = v22 >> 1;
          v25 = &v23[16 * (v22 >> 1)];
          v26 = *((_DWORD *)v25 + 2);
          if (v26 == v20)
          {
            if (*(unsigned __int16 *)(*(_QWORD *)v25 + 12) < *(unsigned __int16 *)(*(_QWORD *)v19 + 12))
              goto LABEL_17;
          }
          else if (v26 > v20)
          {
            goto LABEL_17;
          }
          v23 = v25 + 16;
          v24 = v22 + ~v24;
LABEL_17:
          v22 = v24;
          if (!v24)
            goto LABEL_35;
        }
      }
      v21 = &result[v10];
      v23 = a2;
LABEL_35:
      v28 = (v23 - v21) >> 4;
      v35 = v19;
      if (v23 != a2)
        goto LABEL_39;
LABEL_55:
      a4 = -(v28 + v13);
      v45 = a5 - v18;
      if (v28 + v18 >= a5 - (v28 + v18) - v13)
      {
        a4 = v28;
        a3 = v35;
        a5 = v18;
        result = v16;
        a2 = v23;
        if (!v18)
          return result;
      }
      else
      {
        v46 = v16;
        v47 = a3;
        a3 = v47;
        a5 = v45;
        result = v35;
        a2 = v19;
        if (!v45)
          return result;
      }
      continue;
    }
    break;
  }
  if (v13 != -1)
  {
    if (v13 <= 0)
      v27 = -v13;
    else
      v27 = 1 - v13;
    v28 = v27 >> 1;
    v23 = &result[16 * (v27 >> 1) + v10];
    if (a3 == a2)
    {
      v19 = a3;
    }
    else
    {
      v29 = *((_DWORD *)v23 + 2);
      v30 = (a3 - a2) >> 4;
      v19 = a2;
      do
      {
        v31 = v30 >> 1;
        v32 = &v19[16 * (v30 >> 1)];
        v33 = *((_DWORD *)v32 + 2);
        v34 = v33 >= v29;
        if (v33 == v29)
          v34 = *(unsigned __int16 *)(*(_QWORD *)v23 + 12) >= *(unsigned __int16 *)(*(_QWORD *)v32 + 12);
        if (!v34)
        {
          v19 = v32 + 16;
          v31 = v30 + ~v31;
        }
        v30 = v31;
      }
      while (v31);
    }
    v18 = (v19 - a2) >> 4;
    v35 = v19;
    if (v23 == a2)
      goto LABEL_55;
LABEL_39:
    v35 = v23;
    if (a2 != v19)
    {
      v36 = *(_QWORD *)v23;
      *(_QWORD *)v23 = v11;
      *(_QWORD *)a2 = v36;
      v37 = *((_DWORD *)v23 + 2);
      *((_DWORD *)v23 + 2) = v12;
      *((_DWORD *)a2 + 2) = v37;
      v35 = v23 + 16;
      for (i = a2 + 16; i != v19; i += 16)
      {
        if (v35 == a2)
          a2 = i;
        v39 = *(_QWORD *)v35;
        *(_QWORD *)v35 = *(_QWORD *)i;
        *(_QWORD *)i = v39;
        LODWORD(v39) = *((_DWORD *)v35 + 2);
        *((_DWORD *)v35 + 2) = *((_DWORD *)i + 2);
        *((_DWORD *)i + 2) = v39;
        v35 += 16;
      }
      if (v35 != a2)
      {
        v40 = v35;
        v41 = a2;
        while (1)
        {
          v42 = *(_QWORD *)v40;
          *(_QWORD *)v40 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v42;
          LODWORD(v42) = *((_DWORD *)v40 + 2);
          *((_DWORD *)v40 + 2) = *((_DWORD *)a2 + 2);
          *((_DWORD *)a2 + 2) = v42;
          v40 += 16;
          a2 += 16;
          v43 = v40 == v41;
          if (a2 == v19)
          {
            if (v40 == v41)
              goto LABEL_55;
            a2 = v41 + 16;
            while (1)
            {
              v44 = *(_QWORD *)v40;
              *(_QWORD *)v40 = *(_QWORD *)v41;
              *(_QWORD *)v41 = v44;
              LODWORD(v44) = *((_DWORD *)v40 + 2);
              *((_DWORD *)v40 + 2) = *((_DWORD *)v41 + 2);
              *((_DWORD *)v41 + 2) = v44;
              v40 += 16;
              v43 = v40 == v41;
              if (a2 != v19)
                break;
              if (v40 == v41)
                goto LABEL_55;
            }
          }
          if (v43)
            v41 = a2;
        }
      }
      v35 = a2;
    }
    goto LABEL_55;
  }
  v64 = &result[v10];
  *(_QWORD *)v64 = v11;
  *(_QWORD *)a2 = v14;
  *((_DWORD *)v64 + 2) = v12;
  *((_DWORD *)a2 + 2) = v15;
  return result;
}

uint64_t llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::computeLegalizationGraphBenefit(llvm::SmallVector<mlir::Pattern const*,1u> &,llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26[2];

  v3 = *(_DWORD *)(a2 + 8) == 1;
  v4 = *(_QWORD *)a2;
  if (*(_DWORD *)(a2 + 8) == 1)
    v5 = *(_QWORD *)a2;
  else
    v5 = 0;
  v26[0] = v5;
  v26[1] = v3;
  if (v3)
  {
    v6 = *a1;
    v7 = *(_DWORD *)(v6 + 16);
    if (v7)
    {
      v8 = v7 - 1;
      v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
      v10 = (uint64_t *)(*(_QWORD *)v6 + 32 * v9);
      v11 = *v10;
      if (*v10 == v5)
        goto LABEL_26;
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (uint64_t *)(*(_QWORD *)v6 + 32 * v9);
        v11 = *v10;
        if (*v10 == v5)
          goto LABEL_26;
      }
      if (v12)
        v24 = v12;
      else
        v24 = v10;
    }
    else
    {
      v24 = 0;
    }
    v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>,mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::Pattern const*,1u>>>::InsertIntoBucket<mlir::OperationName>(v6, v24, v26);
LABEL_26:
    v25 = v10 + 1;
    v17 = (_QWORD *)v10[1];
    v18 = *((unsigned int *)v25 + 2);
    v19 = (uint64_t)&v17[v18];
    if ((_DWORD)v18)
      goto LABEL_18;
    return 0xFFFFLL;
  }
  v16 = a1[1];
  v17 = *(_QWORD **)v16;
  v18 = *(unsigned int *)(v16 + 8);
  v19 = *(_QWORD *)v16 + 8 * v18;
  if (!(_DWORD)v18)
    return 0xFFFFLL;
LABEL_18:
  v20 = 8 * v18;
  v21 = v17;
  while (*v21 != a2)
  {
    ++v21;
    v20 -= 8;
    if (!v20)
    {
      v21 = (_QWORD *)v19;
      break;
    }
  }
  v22 = v21 - v17;
  if (v22 == v18)
    return 0xFFFFLL;
  mlir::PatternBenefit::PatternBenefit(v26, (unint64_t)(v19 - (_QWORD)&v17[v22]) >> 3);
  return LOWORD(v26[0]);
}

uint64_t `anonymous namespace'::OperationConverter::finalize(_anonymous_namespace_::OperationConverter *this, mlir::ConversionPatternRewriter *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64x2_t v5;
  __guard *v6;
  _QWORD *v7;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  mlir::Block *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  mlir::Block *v49;
  int v50;
  uint64_t v51;
  int v52;
  __guard *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned __int8 v58;
  unint64_t v59;
  unint64_t v60;
  void **v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  ZinIrHalH13g *DefiningOp;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm *v79;
  llvm *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  llvm *v90;
  void **v91;
  char *v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  void **v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  void **v101;
  void **v102;
  void **v103;
  __int128 v104;
  void **v105;
  char *v106;
  char *v107;
  __int128 v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t NextResultAtOffset;
  unint64_t v116;
  uint64_t **v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  mlir::Block *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  int v128;
  int v129;
  mlir::Block *ParentOp;
  int v131;
  uint64_t v132;
  int v133;
  llvm *v134;
  void **v135;
  char *v136;
  char *v137;
  __int128 v138;
  int v139;
  _BYTE *v140;
  _BYTE *v141;
  int v142;
  int v143;
  _BYTE *v144;
  _BYTE *v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  llvm **v156;
  char *v157;
  char *v158;
  __int128 v159;
  llvm **v160;
  char *v161;
  char *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  llvm **v168;
  uint64_t v169;
  __int128 v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  void *v182;
  _QWORD *v183;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  llvm **v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  llvm **v199;
  uint64_t v200;
  __int128 v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  llvm **v205;
  uint64_t v206;
  __int128 v207;
  _QWORD *v208;
  _QWORD *v209;
  void *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v215;
  BOOL v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  BOOL v220;
  unint64_t v221;
  unint64_t v222;
  BOOL v223;
  unint64_t v224;
  unint64_t v225;
  BOOL v226;
  unint64_t v227;
  BOOL v228;
  unint64_t v229;
  BOOL v230;
  unint64_t v231;
  char *v232;
  int64_t v233;
  int64_t v234;
  int64_t v235;
  int64_t v236;
  char *v237;
  int64_t v238;
  char *v239;
  char *v240;
  char *v241;
  int64_t v242;
  int64x2_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  __guard *v247;
  uint64_t v248;
  _QWORD *v249;
  llvm *v250;
  uint64_t *v251;
  _QWORD *v252;
  uint64_t **v253;
  mlir::detail::OpResultImpl *v254[2];
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  llvm *v260[2];
  uint64_t v261;
  llvm *v262;
  const char *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  _BYTE v267[96];
  __int128 v268;
  uint64_t v269;
  void *__p[2];
  uint64_t v271;
  unsigned __int8 v272;
  void *__dst[2];
  uint64_t v274;
  void *v275;
  uint64_t v276;
  _BYTE v277[96];
  __int128 v278;
  uint64_t v279;
  void *v280[2];
  uint64_t v281;
  char v282;
  uint64_t v283;

  v283 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(v2 + 272))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    LODWORD(v274) = 0;
    llvm::deallocate_buffer(0, 0);
  }
  v3 = *(unsigned int *)(v2 + 104);
  if (!(_DWORD)v3)
  {
LABEL_111:
    v109 = *(_DWORD *)(v2 + 1200);
    v244 = 1;
    if (!v109)
      return v244;
    v110 = 0;
    while (1)
    {
      v246 = v110;
      v111 = *(_QWORD *)(v2 + 352) + 16 * *(unsigned int *)(*(_QWORD *)(v2 + 1192) + 4 * v110);
      v112 = *(unsigned int *)(*(_QWORD *)v111 + 36);
      v113 = *(_QWORD *)v111 - 16;
      if (!(_DWORD)v112)
        v113 = 0;
      v255 = v113;
      if ((_DWORD)v112)
        break;
LABEL_113:
      v110 = v246 + 1;
      if (v246 + 1 == v109)
        return 1;
    }
    v114 = 0;
    v253 = (uint64_t **)v111;
LABEL_119:
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v255, v114);
    if (v116)
    {
      if ((*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        __dst[0] = 0;
        __dst[1] = 0;
        LODWORD(v274) = 0;
        llvm::deallocate_buffer(0, 0);
      }
      goto LABEL_118;
    }
    v117 = *(uint64_t ***)NextResultAtOffset;
    if (!*(_QWORD *)NextResultAtOffset)
      goto LABEL_118;
    v251 = *v253;
    while (1)
    {
      v122 = v117[2];
      v123 = *(_QWORD *)(v2 + 328);
      v124 = *(unsigned int *)(v2 + 344);
      if (!(_DWORD)v124)
        goto LABEL_133;
      LODWORD(v125) = ((v122 >> 4) ^ (v122 >> 9)) & (v124 - 1);
      v126 = (uint64_t *)(v123 + 16 * v125);
      v127 = (uint64_t *)*v126;
      if ((uint64_t *)*v126 != v122)
        break;
LABEL_134:
      if (v126 == (uint64_t *)(v123 + 16 * v124))
      {
        ParentOp = (mlir::Block *)v122[2];
        if (ParentOp)
          ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
        v131 = *(_DWORD *)(v2 + 608);
        if (!v131)
          goto LABEL_140;
        v132 = *(_QWORD *)(v2 + 592);
        v133 = v131 - 1;
        v120 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v133;
        v121 = *(mlir::Block **)(v132 + 8 * v120);
        if (v121 != ParentOp)
        {
          v119 = 1;
          while (v121 != (mlir::Block *)-4096)
          {
            v118 = v120 + v119++;
            v120 = v118 & v133;
            v121 = *(mlir::Block **)(v132 + 8 * v120);
            if (v121 == ParentOp)
              goto LABEL_126;
          }
LABEL_140:
          if (v117)
          {
            v260[0] = (llvm *)"failed to legalize operation '";
            LOWORD(v261) = 259;
            mlir::Operation::emitError(v251, (uint64_t)v260, (uint64_t)&v262);
            v134 = v262;
            if (v262)
            {
              mlir::Diagnostic::operator<<((uint64_t)&v263, v251[6]);
              v134 = v262;
              if (v262)
              {
                LODWORD(__dst[0]) = 3;
                __dst[1] = "' marked as erased";
                v274 = 18;
                v135 = __dst;
                v136 = (char *)v265;
                if (v266 >= HIDWORD(v266))
                {
                  v231 = v266 + 1;
                  if (v265 <= __dst && (char *)v265 + 24 * v266 > (char *)__dst)
                  {
                    v242 = (char *)__dst - (_BYTE *)v265;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v231, 24);
                    v136 = (char *)v265;
                    v135 = (void **)((char *)v265 + v242);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v231, 24);
                    v135 = __dst;
                    v136 = (char *)v265;
                  }
                }
                v137 = &v136[24 * v266];
                v138 = *(_OWORD *)v135;
                *((_QWORD *)v137 + 2) = v135[2];
                *(_OWORD *)v137 = v138;
                LODWORD(v266) = v266 + 1;
                v134 = v262;
              }
            }
            __dst[0] = v134;
            LOBYTE(__dst[1]) = 0;
            v282 = 0;
            if (v272)
            {
              __dst[1] = (void *)v263;
              v139 = v266;
              LODWORD(v274) = v264;
              v140 = v277;
              v275 = v277;
              v276 = 0x400000000;
              if ((_DWORD)v266)
              {
                v141 = v267;
                if (v265 != v267)
                {
                  v275 = v265;
                  v276 = v266;
                  v265 = v267;
                  HIDWORD(v266) = 0;
                  v142 = 1;
                  goto LABEL_213;
                }
                if (v266 < 5)
                {
                  v179 = v266;
LABEL_211:
                  memcpy(v140, v141, 24 * v179);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v266, 24);
                  v179 = v266;
                  if ((_DWORD)v266)
                  {
                    v141 = v265;
                    v140 = v275;
                    goto LABEL_211;
                  }
                }
                LODWORD(v276) = v139;
                v142 = v272;
LABEL_213:
                LODWORD(v266) = 0;
              }
              else
              {
                v142 = 1;
              }
              v278 = v268;
              v279 = v269;
              v268 = 0uLL;
              *(_OWORD *)v280 = *(_OWORD *)__p;
              v281 = v271;
              v269 = 0;
              __p[0] = 0;
              __p[1] = 0;
              v271 = 0;
              v282 = 1;
              if (v142)
              {
                if (v265 != v267)
                  free(v265);
                v272 = 0;
              }
            }
            mlir::InFlightDiagnostic::abandon(&v262);
            if (v262)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v262);
            if (v272)
            {
              v180 = __p[0];
              if (__p[0])
              {
                v181 = __p[1];
                v182 = __p[0];
                if (__p[1] != __p[0])
                {
                  do
                    v181 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v181 - 1);
                  while (v181 != v180);
                  v182 = __p[0];
                }
                __p[1] = v180;
                operator delete(v182);
              }
              v183 = (_QWORD *)v268;
              if ((_QWORD)v268)
              {
                v184 = (_QWORD *)*((_QWORD *)&v268 + 1);
                v185 = (void *)v268;
                if (*((_QWORD *)&v268 + 1) != (_QWORD)v268)
                {
                  do
                  {
                    v187 = *--v184;
                    v186 = v187;
                    *v184 = 0;
                    if (v187)
                      MEMORY[0x20BD002D4](v186, 0x1000C8077774924);
                  }
                  while (v184 != v183);
                  v185 = (void *)v268;
                }
                *((_QWORD *)&v268 + 1) = v183;
                operator delete(v185);
              }
              if (v265 != v267)
                free(v265);
            }
            v188 = mlir::Diagnostic::attachNote((uint64_t *)&__dst[1], v117[2][3], 1);
            v189 = v188;
            v191 = v188 + 16;
            v190 = *(_QWORD *)(v188 + 16);
            LODWORD(v262) = 3;
            v263 = "found live user of result #";
            v264 = 27;
            v192 = *(unsigned int *)(v188 + 24);
            v193 = &v262;
            if (v192 >= *(_DWORD *)(v188 + 28))
            {
              v225 = v192 + 1;
              v226 = v190 + 24 * v192 > (unint64_t)&v262;
              if (v190 <= (unint64_t)&v262 && v226)
              {
                v239 = (char *)&v262 - v190;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v188 + 16, (void *)(v188 + 32), v225, 24);
                v190 = *(_QWORD *)(v189 + 16);
                v193 = (llvm **)&v239[v190];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v188 + 16, (void *)(v188 + 32), v225, 24);
                v190 = *(_QWORD *)(v189 + 16);
                v193 = &v262;
              }
            }
            v194 = v190 + 24 * *(unsigned int *)(v189 + 24);
            v195 = *(_OWORD *)v193;
            *(_QWORD *)(v194 + 16) = v193[2];
            *(_OWORD *)v194 = v195;
            v196 = (*(_DWORD *)(v189 + 24) + 1);
            *(_DWORD *)(v189 + 24) = v196;
            v197 = *(_QWORD *)(NextResultAtOffset + 8) & 7;
            if (v197 == 6)
              v197 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
            LODWORD(v262) = 5;
            v263 = (const char *)v197;
            v198 = *(_QWORD *)(v189 + 16);
            v199 = &v262;
            if (v196 >= *(_DWORD *)(v189 + 28))
            {
              v227 = v196 + 1;
              v228 = v198 + 24 * v196 > (unint64_t)&v262;
              if (v198 <= (unint64_t)&v262 && v228)
              {
                v240 = (char *)&v262 - v198;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v227, 24);
                v198 = *(_QWORD *)(v189 + 16);
                v199 = (llvm **)&v240[v198];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v227, 24);
                v198 = *(_QWORD *)(v189 + 16);
                v199 = &v262;
              }
            }
            v200 = v198 + 24 * *(unsigned int *)(v189 + 24);
            v201 = *(_OWORD *)v199;
            *(_QWORD *)(v200 + 16) = v199[2];
            *(_OWORD *)v200 = v201;
            v202 = *(_DWORD *)(v189 + 28);
            v203 = (*(_DWORD *)(v189 + 24) + 1);
            *(_DWORD *)(v189 + 24) = v203;
            LODWORD(v262) = 3;
            v263 = ": ";
            v264 = 2;
            v204 = *(_QWORD *)(v189 + 16);
            v205 = &v262;
            if (v203 >= v202)
            {
              v229 = v203 + 1;
              v230 = v204 + 24 * v203 > (unint64_t)&v262;
              if (v204 <= (unint64_t)&v262 && v230)
              {
                v241 = (char *)&v262 - v204;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v229, 24);
                v204 = *(_QWORD *)(v189 + 16);
                v205 = (llvm **)&v241[v204];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v191, (void *)(v189 + 32), v229, 24);
                v204 = *(_QWORD *)(v189 + 16);
                v205 = &v262;
              }
            }
            v206 = v204 + 24 * *(unsigned int *)(v189 + 24);
            v207 = *(_OWORD *)v205;
            *(_QWORD *)(v206 + 16) = v205[2];
            *(_OWORD *)v206 = v207;
            ++*(_DWORD *)(v189 + 24);
            mlir::Diagnostic::operator<<((mlir::Diagnostic *)v189, (mlir::Operation *)v117[2]);
            if (__dst[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
            if (v282)
            {
              v208 = v280[0];
              if (v280[0])
              {
                v209 = v280[1];
                v210 = v280[0];
                if (v280[1] != v280[0])
                {
                  do
                    v209 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v209 - 1);
                  while (v209 != v208);
                  v210 = v280[0];
                }
                v280[1] = v208;
                operator delete(v210);
              }
              v174 = (_QWORD *)v278;
              if ((_QWORD)v278)
              {
                v211 = (_QWORD *)*((_QWORD *)&v278 + 1);
                v176 = (void *)v278;
                if (*((_QWORD *)&v278 + 1) == (_QWORD)v278)
                {
LABEL_256:
                  *((_QWORD *)&v278 + 1) = v174;
                  operator delete(v176);
                  goto LABEL_257;
                }
                do
                {
                  v213 = *--v211;
                  v212 = v213;
                  *v211 = 0;
                  if (v213)
                    MEMORY[0x20BD002D4](v212, 0x1000C8077774924);
                }
                while (v211 != v174);
LABEL_255:
                v176 = (void *)v278;
                goto LABEL_256;
              }
              goto LABEL_257;
            }
            return 0;
          }
LABEL_118:
          if (++v114 == v112)
            goto LABEL_113;
          goto LABEL_119;
        }
      }
LABEL_126:
      v117 = (uint64_t **)*v117;
      if (!v117)
        goto LABEL_118;
    }
    v128 = 1;
    while (v127 != (uint64_t *)-4096)
    {
      v129 = v125 + v128++;
      v125 = v129 & (v124 - 1);
      v127 = *(uint64_t **)(v123 + 16 * v125);
      if (v127 == v122)
      {
        v126 = (uint64_t *)(v123 + 16 * v125);
        goto LABEL_134;
      }
    }
LABEL_133:
    v126 = (uint64_t *)(v123 + 16 * v124);
    goto LABEL_134;
  }
  v4 = *(_QWORD **)(v2 + 96);
  v249 = &v4[8 * v3];
  v5 = vdupq_n_s64(1uLL);
  v5.i64[0] = (uint64_t)&v258;
  v243 = v5;
  v7 = &unk_254519000;
  while (1)
  {
    v252 = v4;
    v257 = v4[1];
    v8 = *(_QWORD *)(v257 + 56) - *(_QWORD *)(v257 + 48);
    if ((v8 & 0x7FFFFFFF8) != 0)
      break;
LABEL_5:
    v4 = v252 + 8;
    if (v252 + 8 == v249)
      goto LABEL_111;
  }
  v9 = 0;
  v248 = *v4;
  v256 = (v8 >> 3);
  while (1)
  {
    v10 = *(_QWORD **)(*(_QWORD *)(v257 + 48) + 8 * (_QWORD)v9);
    v11 = *(_QWORD *)v2;
    LODWORD(v12) = *(_DWORD *)(v2 + 16);
    v13 = v10[1] & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = 0;
      v15 = *(_QWORD **)(*(_QWORD *)(v257 + 48) + 8 * (_QWORD)v9);
      do
      {
        v16 = (unint64_t)v15;
        if ((v15[1] & 0xFFFFFFFFFFFFFFF8) == v13)
          v14 = (unint64_t)v15;
        if (!(_DWORD)v12)
          break;
        if ((v17 & 1) == 0)
        {
          v7 = &unk_254519000;
          if (v24)
          {
            v25 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v25 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v25;
            v7 = (_QWORD *)&unk_254519000;
          }
        }
        v18 = 0x9DDFEA08EB382D69 * ((v7[373] + 8 * v16) ^ HIDWORD(v16));
        v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v18 >> 47) ^ v18);
        LODWORD(v19) = (-348639895 * ((v19 >> 47) ^ v19)) & (v12 - 1);
        v20 = (_QWORD *)(v11 + 16 * v19);
        v21 = (_QWORD *)*v20;
        if (v16 != *v20)
        {
          v22 = 1;
          while (v21 != (_QWORD *)-4096)
          {
            v23 = v19 + v22++;
            v19 = v23 & (v12 - 1);
            v21 = *(_QWORD **)(v11 + 16 * v19);
            if ((_QWORD *)v16 == v21)
            {
              v20 = (_QWORD *)(v11 + 16 * v19);
              v11 = *(_QWORD *)v2;
              v12 = *(unsigned int *)(v2 + 16);
              if (v20 != (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
                goto LABEL_18;
              goto LABEL_29;
            }
          }
          break;
        }
        v11 = *(_QWORD *)v2;
        v12 = *(unsigned int *)(v2 + 16);
        if (v20 == (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
          break;
LABEL_18:
        v15 = (_QWORD *)v20[1];
      }
      while (v15);
LABEL_29:
      if (!v14)
        v14 = v16;
    }
    else
    {
      v27 = *(_QWORD **)(*(_QWORD *)(v257 + 48) + 8 * (_QWORD)v9);
      do
      {
        v14 = (unint64_t)v27;
        if (!(_DWORD)v12)
          break;
        if ((v28 & 1) == 0)
        {
          v7 = &unk_254519000;
          if (v35)
          {
            v36 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v36 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v36;
            v7 = (_QWORD *)&unk_254519000;
          }
        }
        v29 = 0x9DDFEA08EB382D69 * ((v7[373] + 8 * v14) ^ HIDWORD(v14));
        v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v29 >> 47) ^ v29);
        LODWORD(v30) = (-348639895 * ((v30 >> 47) ^ v30)) & (v12 - 1);
        v31 = (_QWORD *)(v11 + 16 * v30);
        v32 = (_QWORD *)*v31;
        if (v14 != *v31)
        {
          v33 = 1;
          while (v32 != (_QWORD *)-4096)
          {
            v34 = v30 + v33++;
            v30 = v34 & (v12 - 1);
            v32 = *(_QWORD **)(v11 + 16 * v30);
            if ((_QWORD *)v14 == v32)
            {
              v31 = (_QWORD *)(v11 + 16 * v30);
              v11 = *(_QWORD *)v2;
              v12 = *(unsigned int *)(v2 + 16);
              if (v31 != (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
                goto LABEL_41;
              goto LABEL_31;
            }
          }
          break;
        }
        v11 = *(_QWORD *)v2;
        v12 = *(unsigned int *)(v2 + 16);
        if (v31 == (_QWORD *)(*(_QWORD *)v2 + 16 * v12))
          break;
LABEL_41:
        v27 = (_QWORD *)v31[1];
      }
      while (v27);
    }
LABEL_31:
    if ((_QWORD *)v14 != v10)
    {
      if (v13)
      {
        if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) == v13)
          goto LABEL_9;
      }
      else if (v14)
      {
        goto LABEL_9;
      }
    }
    v26 = (_QWORD *)*v10;
    if (*v10)
      break;
LABEL_9:
    v9 = (char *)v9 + 1;
    if (v9 == (void *)v256)
      goto LABEL_5;
  }
  while (1)
  {
    v41 = v26[2];
    v42 = *(_QWORD *)(v2 + 328);
    v43 = *(unsigned int *)(v2 + 344);
    if (!(_DWORD)v43)
      goto LABEL_61;
    LODWORD(v44) = ((v41 >> 4) ^ (v41 >> 9)) & (v43 - 1);
    v45 = (uint64_t *)(v42 + 16 * v44);
    v46 = *v45;
    if (*v45 != v41)
    {
      v47 = 1;
      while (v46 != -4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(_QWORD *)(v42 + 16 * v44);
        if (v46 == v41)
        {
          v45 = (uint64_t *)(v42 + 16 * v44);
          goto LABEL_62;
        }
      }
LABEL_61:
      v45 = (uint64_t *)(v42 + 16 * v43);
    }
LABEL_62:
    if (v45 == (uint64_t *)(v42 + 16 * v43))
    {
      v49 = *(mlir::Block **)(v41 + 16);
      if (v49)
      {
        v49 = (mlir::Block *)mlir::Block::getParentOp(v49);
        v7 = &unk_254519000;
      }
      v50 = *(_DWORD *)(v2 + 608);
      if (!v50)
        goto LABEL_68;
      v51 = *(_QWORD *)(v2 + 592);
      v52 = v50 - 1;
      v39 = ((v49 >> 4) ^ (v49 >> 9)) & v52;
      v40 = *(mlir::Block **)(v51 + 8 * v39);
      if (v40 != v49)
        break;
    }
LABEL_54:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_9;
  }
  v38 = 1;
  while (v40 != (mlir::Block *)-4096)
  {
    v37 = v39 + v38++;
    v39 = v37 & v52;
    v40 = *(mlir::Block **)(v51 + 8 * v39);
    if (v40 == v49)
      goto LABEL_54;
  }
LABEL_68:
  if (!v26)
    goto LABEL_9;
  v53 = (__guard *)v26[2];
  if (!v53)
    goto LABEL_9;
  v54 = *(_QWORD *)v2;
  LODWORD(v55) = *(_DWORD *)(v2 + 16);
  v56 = v10;
  do
  {
    v57 = (unint64_t)v56;
    if (!(_DWORD)v55)
      break;
    if ((v58 & 1) == 0)
    {
      v7 = &unk_254519000;
      if (v65)
      {
        v66 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v66 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v66;
        v7 = (_QWORD *)&unk_254519000;
      }
    }
    v59 = 0x9DDFEA08EB382D69 * ((v7[373] + 8 * v57) ^ HIDWORD(v57));
    v60 = 0x9DDFEA08EB382D69 * (HIDWORD(v57) ^ (v59 >> 47) ^ v59);
    LODWORD(v60) = (-348639895 * ((v60 >> 47) ^ v60)) & (v55 - 1);
    v61 = (void **)(v54 + 16 * v60);
    v62 = *v61;
    if ((void *)v57 != *v61)
    {
      v63 = 1;
      while (v62 != (void *)-4096)
      {
        v64 = v60 + v63++;
        v60 = v64 & (v55 - 1);
        v62 = *(void **)(v54 + 16 * v60);
        if ((void *)v57 == v62)
        {
          v61 = (void **)(v54 + 16 * v60);
          v54 = *(_QWORD *)v2;
          v55 = *(unsigned int *)(v2 + 16);
          if (v61 != (void **)(*(_QWORD *)v2 + 16 * v55))
            goto LABEL_75;
          goto LABEL_86;
        }
      }
      break;
    }
    v54 = *(_QWORD *)v2;
    v55 = *(unsigned int *)(v2 + 16);
    if (v61 == (void **)(*(_QWORD *)v2 + 16 * v55))
      break;
LABEL_75:
    v56 = v61[1];
  }
  while (v56);
LABEL_86:
  v258 = v57;
  v67 = *(_QWORD *)(v2 + 184);
  v250 = (llvm *)v10;
  v245 = v57;
  v247 = v53;
  if ((_QWORD *)v57 == v10)
  {
    v73 = *(_QWORD *)(v248 + 40);
    *(_QWORD *)(v67 + 24) = v248;
    *(_QWORD *)(v67 + 32) = v73;
    v72 = v252[7];
    if (!v72)
      goto LABEL_102;
    v74 = *(_QWORD *)(v2 + 184);
    v75 = v10[4];
    v76 = v10[1];
    mlir::ValueRange::ValueRange((unint64_t *)v260, 0, 0);
    *(_OWORD *)v254 = *(_OWORD *)v260;
  }
  else
  {
    __dst[0] = (void *)v57;
    DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)__dst);
    if (DefiningOp)
    {
      v69 = *((_QWORD *)DefiningOp + 2);
      ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
      v71 = *(_QWORD *)(v70 + 8);
      *(_QWORD *)(v67 + 24) = v69;
      *(_QWORD *)(v67 + 32) = v71;
      v72 = v252[7];
      if (!v72)
        goto LABEL_102;
    }
    else
    {
      v77 = *((_QWORD *)__dst[0] + 2);
      v78 = *(_QWORD *)(v77 + 40);
      *(_QWORD *)(v67 + 24) = v77;
      *(_QWORD *)(v67 + 32) = v78;
      v72 = v252[7];
      if (!v72)
        goto LABEL_102;
    }
    v74 = *(_QWORD *)(v2 + 184);
    v75 = *((_QWORD *)v250 + 4);
    v76 = *((_QWORD *)v250 + 1);
    *(int64x2_t *)v254 = v243;
    v260[0] = (llvm *)&v258;
    v260[1] = (llvm *)1;
  }
  v79 = (llvm *)(v74 + 8);
  v80 = (llvm *)(v76 & 0xFFFFFFFFFFFFFFF8);
  v81 = 32 * *(unsigned int *)(v72 + 240);
  v82 = *(_QWORD *)(v72 + 232) + v81;
  v83 = -v81;
  do
  {
    if (!v83)
      goto LABEL_102;
    v262 = v80;
    *(_OWORD *)__dst = *(_OWORD *)v254;
    v259 = v75;
    v84 = *(_QWORD *)(v82 - 8);
    if (!v84)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_277;
    }
    v82 -= 32;
    v85 = (*(uint64_t (**)(uint64_t, llvm *, llvm **, void **, uint64_t *))(*(_QWORD *)v84 + 48))(v84, v79, &v262, __dst, &v259);
    v83 += 32;
  }
  while (!v86);
  v87 = v85;
  if (v85)
  {
    v262 = v250;
    __dst[0] = 0;
    v88 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v2, (unint64_t *)&v262, __dst);
    v89 = __dst[0];
    if ((v88 & 1) == 0)
    {
      v89 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v2, (uint64_t)&v262, (unint64_t *)&v262, (_QWORD *)__dst[0]);
      *v89 = v262;
      v89[1] = 0;
    }
    v7 = (_QWORD *)&unk_254519000;
    v89[1] = v87;
    goto LABEL_9;
  }
LABEL_102:
  mlir::emitError(*((_QWORD *)v250 + 4), (uint64_t)&v262);
  v90 = v262;
  if (v262)
  {
    v83 = (uint64_t)&v265;
    LODWORD(__dst[0]) = 3;
    __dst[1] = "failed to materialize conversion for block argument #";
    v274 = 53;
    v91 = __dst;
    v92 = (char *)v265;
    if (v266 >= HIDWORD(v266))
    {
      v217 = v266 + 1;
      if (v265 <= __dst && (char *)v265 + 24 * v266 > (char *)__dst)
      {
        v233 = (char *)__dst - (_BYTE *)v265;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v217, 24);
        v92 = (char *)v265;
        v91 = (void **)((char *)v265 + v233);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v217, 24);
        v91 = __dst;
        v92 = (char *)v265;
      }
    }
    v79 = (llvm *)v245;
    v6 = v247;
    v93 = &v92[24 * v266];
    v94 = *(_OWORD *)v91;
    *((_QWORD *)v93 + 2) = v91[2];
    *(_OWORD *)v93 = v94;
    v95 = (v266 + 1);
    LODWORD(v266) = v266 + 1;
    v90 = v262;
    if (v262)
    {
      LODWORD(__dst[0]) = 5;
      __dst[1] = v9;
      v96 = __dst;
      v97 = (char *)v265;
      if (v95 >= HIDWORD(v266))
      {
        v219 = v95 + 1;
        v220 = (char *)v265 + 24 * v95 > (char *)__dst;
        if (v265 <= __dst && v220)
        {
          v235 = (char *)__dst - (_BYTE *)v265;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v219, 24);
          v97 = (char *)v265;
          v96 = (void **)((char *)v265 + v235);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, v267, v219, 24);
          v96 = __dst;
          v97 = (char *)v265;
        }
      }
      v98 = &v97[24 * v266];
      v99 = *(_OWORD *)v96;
      *((_QWORD *)v98 + 2) = v96[2];
      *(_OWORD *)v98 = v99;
      v100 = (v266 + 1);
      LODWORD(v266) = v266 + 1;
      v90 = v262;
      if (v262)
      {
        LODWORD(__dst[0]) = 3;
        __dst[1] = " that remained live after conversion, type was ";
        v274 = 47;
        v101 = __dst;
        v102 = (void **)v265;
        if (v100 >= HIDWORD(v266))
        {
LABEL_277:
          v222 = v100 + 1;
          v223 = &v102[3 * v100] > v101;
          if (v102 <= v101 && v223)
          {
            v237 = (char *)((char *)__dst - (char *)v102);
            llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v222, 24);
            v102 = (void **)v265;
            v101 = (void **)&v237[(_QWORD)v265];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v222, 24);
            v101 = __dst;
            v102 = (void **)v265;
          }
        }
        v103 = &v102[3 * v266];
        v104 = *(_OWORD *)v101;
        v103[2] = v101[2];
        *(_OWORD *)v103 = v104;
        LODWORD(v266) = v266 + 1;
        v90 = v262;
        if (v262)
        {
          v105 = __dst;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)__dst, *((_QWORD *)v250 + 1) & 0xFFFFFFFFFFFFFFF8);
          v106 = (char *)v265;
          if (v266 >= HIDWORD(v266))
          {
            v224 = v266 + 1;
            if (v265 <= __dst && (char *)v265 + 24 * v266 > (char *)__dst)
            {
              v238 = (char *)__dst - (_BYTE *)v265;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v224, 24);
              v106 = (char *)v265;
              v105 = (void **)((char *)v265 + v238);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v83, v267, v224, 24);
              v105 = __dst;
              v106 = (char *)v265;
            }
          }
          v107 = &v106[24 * v266];
          v108 = *(_OWORD *)v105;
          *((_QWORD *)v107 + 2) = v105[2];
          *(_OWORD *)v107 = v108;
          LODWORD(v266) = v266 + 1;
          v90 = v262;
        }
      }
    }
  }
  else
  {
    v79 = (llvm *)v245;
    v6 = v247;
  }
  __dst[0] = v90;
  LOBYTE(__dst[1]) = 0;
  v282 = 0;
  if (v272)
  {
    __dst[1] = (void *)v263;
    v143 = v266;
    LODWORD(v274) = v264;
    v144 = v277;
    v275 = v277;
    v276 = 0x400000000;
    if ((_DWORD)v266)
    {
      v145 = v267;
      if (v265 != v267)
      {
        v275 = v265;
        v276 = v266;
        v265 = v267;
        HIDWORD(v266) = 0;
        v146 = 1;
        goto LABEL_162;
      }
      if (v266 < 5)
      {
        v147 = v266;
LABEL_160:
        memcpy(v144, v145, 24 * v147);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v266, 24);
        v147 = v266;
        if ((_DWORD)v266)
        {
          v145 = v265;
          v144 = v275;
          goto LABEL_160;
        }
      }
      LODWORD(v276) = v143;
      v146 = v272;
LABEL_162:
      LODWORD(v266) = 0;
    }
    else
    {
      v146 = 1;
    }
    v278 = v268;
    v279 = v269;
    v268 = 0uLL;
    *(_OWORD *)v280 = *(_OWORD *)__p;
    v281 = v271;
    v269 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v271 = 0;
    v282 = 1;
    if (v146)
    {
      if (v265 != v267)
        free(v265);
      v272 = 0;
    }
  }
  mlir::InFlightDiagnostic::abandon(&v262);
  if (v262)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v262);
  if (v272)
  {
    v148 = __p[0];
    if (__p[0])
    {
      v149 = __p[1];
      v150 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v149 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v149 - 1);
        while (v149 != v148);
        v150 = __p[0];
      }
      __p[1] = v148;
      operator delete(v150);
    }
    v151 = (_QWORD *)v268;
    if ((_QWORD)v268)
    {
      v152 = (_QWORD *)*((_QWORD *)&v268 + 1);
      v153 = (void *)v268;
      if (*((_QWORD *)&v268 + 1) != (_QWORD)v268)
      {
        do
        {
          v155 = *--v152;
          v154 = v155;
          *v152 = 0;
          if (v155)
            MEMORY[0x20BD002D4](v154, 0x1000C8077774924);
        }
        while (v152 != v151);
        v153 = (void *)v268;
      }
      *((_QWORD *)&v268 + 1) = v151;
      operator delete(v153);
    }
    if (v265 != v267)
      free(v265);
  }
  if (v79 != v250 && __dst[0])
  {
    LODWORD(v262) = 3;
    v263 = ", with target type ";
    v264 = 19;
    v156 = &v262;
    v157 = (char *)v275;
    if (v276 >= HIDWORD(v276))
    {
      v218 = v276 + 1;
      if (v275 <= &v262 && (char *)v275 + 24 * v276 > (char *)&v262)
      {
        v234 = (char *)&v262 - (_BYTE *)v275;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v218, 24);
        v157 = (char *)v275;
        v156 = (llvm **)((char *)v275 + v234);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v218, 24);
        v156 = &v262;
        v157 = (char *)v275;
      }
    }
    v158 = &v157[24 * v276];
    v159 = *(_OWORD *)v156;
    *((_QWORD *)v158 + 2) = v156[2];
    *(_OWORD *)v158 = v159;
    LODWORD(v276) = v276 + 1;
    if (__dst[0])
    {
      v160 = &v262;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v262, *(_QWORD *)(v258 + 8) & 0xFFFFFFFFFFFFFFF8);
      v161 = (char *)v275;
      if (v276 >= HIDWORD(v276))
      {
        v221 = v276 + 1;
        if (v275 <= &v262 && (char *)v275 + 24 * v276 > (char *)&v262)
        {
          v236 = (char *)&v262 - (_BYTE *)v275;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v221, 24);
          v161 = (char *)v275;
          v160 = (llvm **)((char *)v275 + v236);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v275, v277, v221, 24);
          v160 = &v262;
          v161 = (char *)v275;
        }
      }
      v162 = &v161[24 * v276];
      v163 = *(_OWORD *)v160;
      *((_QWORD *)v162 + 2) = v160[2];
      *(_OWORD *)v162 = v163;
      LODWORD(v276) = v276 + 1;
    }
  }
  v164 = mlir::Diagnostic::attachNote((uint64_t *)&__dst[1], v6[3], 1);
  v165 = v164 + 16;
  v166 = *(_QWORD *)(v164 + 16);
  LODWORD(v262) = 3;
  v263 = "see existing live user here: ";
  v264 = 29;
  v167 = *(unsigned int *)(v164 + 24);
  v168 = &v262;
  if (v167 >= *(_DWORD *)(v164 + 28))
  {
    v215 = v167 + 1;
    v216 = v166 + 24 * v167 > (unint64_t)&v262;
    if (v166 <= (unint64_t)&v262 && v216)
    {
      v232 = (char *)&v262 - v166;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v165, (void *)(v164 + 32), v215, 24);
      v166 = *(_QWORD *)(v164 + 16);
      v168 = (llvm **)&v232[v166];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v165, (void *)(v164 + 32), v215, 24);
      v166 = *(_QWORD *)(v164 + 16);
      v168 = &v262;
    }
  }
  v169 = v166 + 24 * *(unsigned int *)(v164 + 24);
  v170 = *(_OWORD *)v168;
  *(_QWORD *)(v169 + 16) = v168[2];
  *(_OWORD *)v169 = v170;
  ++*(_DWORD *)(v164 + 24);
  mlir::Diagnostic::operator<<((mlir::Diagnostic *)v164, (mlir::Operation *)v6);
  if (__dst[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__dst);
  if (v282)
  {
    v171 = v280[0];
    if (v280[0])
    {
      v172 = v280[1];
      v173 = v280[0];
      if (v280[1] != v280[0])
      {
        do
          v172 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v172 - 1);
        while (v172 != v171);
        v173 = v280[0];
      }
      v280[1] = v171;
      operator delete(v173);
    }
    v174 = (_QWORD *)v278;
    if ((_QWORD)v278)
    {
      v175 = (_QWORD *)*((_QWORD *)&v278 + 1);
      v176 = (void *)v278;
      if (*((_QWORD *)&v278 + 1) == (_QWORD)v278)
        goto LABEL_256;
      do
      {
        v178 = *--v175;
        v177 = v178;
        *v175 = 0;
        if (v178)
          MEMORY[0x20BD002D4](v177, 0x1000C8077774924);
      }
      while (v175 != v174);
      goto LABEL_255;
    }
LABEL_257:
    if (v275 != v277)
      free(v275);
  }
  return 0;
}

uint64_t mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  uint64_t Iterable;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  ZinIrHalH13g *v25;
  ZinIrHalH13g *v26;
  ZinIrHalH13g *v27;
  int v28;
  char v29;
  uint64_t result;
  mlir::ForwardIterator *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  const void *v35;
  void *__p;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  const void *v41;
  void *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  void *v47;
  _BYTE *v48;
  void *v49;
  void *v50;
  void *v51;
  _BYTE *v52;

  if (!a4)
  {
    result = ((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)result == 2)
      return 1;
  }
  v31 = a1;
  Iterable = mlir::ForwardIterator::makeIterable(a1, a2);
  if (!v9)
  {
LABEL_48:
    if (a4 == 1)
      return ((uint64_t (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, v31);
    return 1;
  }
  v10 = (_QWORD *)Iterable;
  v32 = (_QWORD *)(Iterable + 24 * v9);
  while (1)
  {
    mlir::ForwardDominanceIterator<false>::makeIterable(v10, (uint64_t)&v45);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v39, &v41, (const llvm::SmallPtrSetImplBase *)&v45);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v11 = v47;
    v12 = v48 - (_BYTE *)v47;
    if (v48 != v47)
    {
      if (v12 < 0)
        goto LABEL_55;
      v13 = (char *)operator new(v48 - (_BYTE *)v47);
      v42 = v13;
      v43 = v13;
      v44 = &v13[32 * (v12 >> 5)];
      v14 = v12 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v13, v11, v14);
      v43 = &v13[v14];
    }
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v33, &v35, (const llvm::SmallPtrSetImplBase *)&v49);
    __p = 0;
    v37 = 0;
    v38 = 0;
    v15 = v51;
    v16 = v52 - (_BYTE *)v51;
    if (v52 == v51)
    {
      v17 = 0;
      v19 = 0;
    }
    else
    {
      if (v16 < 0)
LABEL_55:
        abort();
      v17 = (char *)operator new(v52 - (_BYTE *)v51);
      __p = v17;
      v37 = v17;
      v38 = &v17[32 * (v16 >> 5)];
      v18 = v16 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v17, v15, v18);
      v19 = &v17[v18];
      v37 = &v17[v18];
    }
LABEL_12:
    if (v43 - (_BYTE *)v42 == v19 - v17)
    {
      if (v42 == v43)
      {
LABEL_46:
        v29 = 1;
        if (v17)
          goto LABEL_28;
        goto LABEL_29;
      }
      v20 = 0;
      while (1)
      {
        v21 = (char *)v42 + v20;
        if (*(_QWORD *)((char *)v42 + v20) != *(_QWORD *)&v17[v20])
          break;
        v22 = v17[v20 + 24];
        if (v21[24])
          v23 = v22 == 0;
        else
          v23 = 1;
        if (v23)
        {
          if ((v21[24] != 0) != (v22 != 0))
            break;
        }
        else if (*(_QWORD *)((char *)v42 + v20 + 8) != *(_QWORD *)&v17[v20 + 8]
               || *(_QWORD *)((char *)v42 + v20 + 16) != *(_QWORD *)&v17[v20 + 16])
        {
          break;
        }
        v20 += 32;
        if (v21 + 32 == v43)
          goto LABEL_46;
      }
    }
    v24 = *((_QWORD *)v43 - 4);
    v25 = (ZinIrHalH13g *)(v24 + 32);
    v26 = *(ZinIrHalH13g **)(v24 + 40);
    do
    {
      if (v26 == v25)
      {
        llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext((uint64_t)&v39);
        v17 = (char *)__p;
        v19 = v37;
        goto LABEL_12;
      }
      v27 = (ZinIrHalH13g *)*((_QWORD *)v26 + 1);
      ZinIrHalH13g::~ZinIrHalH13g(v26);
      v28 = mlir::detail::walk<mlir::ForwardDominanceIterator<false>>();
      v26 = v27;
    }
    while (v28);
    v29 = 0;
    v17 = (char *)__p;
    if (__p)
    {
LABEL_28:
      v37 = v17;
      operator delete(v17);
    }
LABEL_29:
    if (v34 != v33)
      free(v34);
    if (v42)
    {
      v43 = (char *)v42;
      operator delete(v42);
    }
    if (v40 != v39)
      free(v40);
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v50 != v49)
      free(v50);
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v46 != v45)
      free(v46);
    if ((v29 & 1) == 0)
      return 0;
    v10 += 3;
    if (v10 == v32)
      goto LABEL_48;
  }
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation *>,llvm::function_ref<void ()(mlir::Diagnostic &)>)::$_0>(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 isLegal;
  BOOL v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 8);
  if (v5 >= *(_DWORD *)(*a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v4 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = a2;
  ++*(_DWORD *)(v4 + 8);
  isLegal = mlir::ConversionTarget::isLegal((mlir::ConversionTarget *)a1[1], a2);
  if ((_BYTE)isLegal)
    v7 = isLegal >= 0x100u;
  else
    v7 = 0;
  if (v7)
    return 2;
  else
    return 1;
}

BOOL `anonymous namespace'::OperationLegalizer::legalize(mlir::ConversionTarget **this, mlir::Block **a2, mlir::ConversionPatternRewriter *a3)
{
  unsigned __int16 isLegal;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::Operation **v11;
  mlir::Operation *v12;
  int v13;
  int v14;
  uint64_t v15;
  mlir::Block *ParentOp;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  mlir::Block *v21;
  int v22;
  unsigned int v23;
  int32x2_t *v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  mlir::Block *v28;
  uint64_t v29;
  uint64_t v30;
  __int32 v31;
  unsigned __int32 v32;
  int v33;
  _DWORD *v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  _QWORD v46[3];
  __int32 v47;
  __int32 v48;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  mlir::Operation *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[3];
  _anonymous_namespace_::OperationLegalizer *v58;
  mlir::Operation **v59;
  mlir::ConversionPatternRewriter *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  isLegal = mlir::ConversionTarget::isLegal(this[12], (mlir::Operation *)a2);
  if (isLegal < 0x100u)
  {
    v7 = *((_QWORD *)a3 + 7);
    v8 = *(_QWORD *)(v7 + 328);
    v9 = *(unsigned int *)(v7 + 344);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (mlir::Operation **)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == (mlir::Operation *)a2)
        goto LABEL_12;
      v13 = 1;
      while (v12 != (mlir::Operation *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(mlir::Operation **)(v8 + 16 * v10);
        if (v12 == (mlir::Operation *)a2)
        {
          v11 = (mlir::Operation **)(v8 + 16 * v10);
          goto LABEL_12;
        }
      }
    }
    v11 = (mlir::Operation **)(v8 + 16 * v9);
LABEL_12:
    if (v11 != (mlir::Operation **)(v8 + 16 * v9))
      return 1;
    ParentOp = a2[2];
    if (ParentOp)
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    v17 = *(_DWORD *)(v7 + 608);
    if (v17)
    {
      v18 = *(_QWORD *)(v7 + 592);
      v19 = v17 - 1;
      v20 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v19;
      v21 = *(mlir::Block **)(v18 + 8 * v20);
      if (v21 == ParentOp)
        return 1;
      v22 = 1;
      v15 = 1;
      while (v21 != (mlir::Block *)-4096)
      {
        v23 = v20 + v22++;
        v20 = v23 & v19;
        v21 = *(mlir::Block **)(v18 + 8 * v20);
        if (v21 == ParentOp)
          return v15;
      }
    }
    v24 = (int32x2_t *)*((_QWORD *)a3 + 7);
    v25 = v24[26].i32[0];
    v26 = v24[45].i32[0];
    v27 = v24[47].i32[0];
    v44 = v24[53].i32[0];
    v45 = v24[34].i32[0];
    v42 = v24[80].i32[0];
    v43 = v24[78].i32[0];
    v55 = v57;
    v56 = 0x200000000;
    v28 = a2[2];
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a2);
    *((_QWORD *)a3 + 3) = v28;
    *((_QWORD *)a3 + 4) = v29;
    if (mlir::OpBuilder::tryFold((_QWORD *)a3 + 1, (uint64_t)a2, (uint64_t)&v55))
    {
      mlir::ValueRange::ValueRange((unint64_t *)&v58, (uint64_t)v55, v56);
      mlir::detail::ConversionPatternRewriterImpl::notifyOpReplaced(*((_QWORD *)a3 + 7), (unsigned int *)a2, (uint64_t)v58, (uint64_t)v59);
      v31 = v24[26].i32[0];
      if (v25 == v31)
      {
LABEL_26:
        v33 = 0;
        goto LABEL_29;
      }
      v32 = v25;
      {
        if (v31 == ++v32)
          goto LABEL_26;
      }
      v47 = v25;
      v48 = v45;
      v49 = v26;
      v50 = v27;
      v51 = v44;
      v52 = v43;
      v53 = v42;
      mlir::detail::ConversionPatternRewriterImpl::resetState(v24, &v47);
    }
    v33 = 1;
LABEL_29:
    if (v55 != v57)
      free(v55);
    if (v33)
    {
      v54 = (mlir::Operation *)a2;
      v34 = (_DWORD *)*((_QWORD *)a3 + 7);
      v58 = (_anonymous_namespace_::OperationLegalizer *)this;
      v59 = &v54;
      v60 = a3;
      v35 = v34[68];
      v36 = v34[90];
      v37 = v34[94];
      v38 = v34[106];
      v39 = v34[156];
      v40 = v34[160];
      v47 = v34[52];
      v48 = v35;
      v49 = v36;
      v50 = v37;
      v51 = v38;
      v52 = v39;
      v53 = v40;
      v46[0] = v34;
      v46[1] = &v47;
      v46[2] = this;
      v55 = this;
      v56 = (uint64_t)&v54;
      v57[0] = a3;
      v57[1] = &v47;
      v57[2] = v34;
    }
    return 1;
  }
  if (!(_BYTE)isLegal || (*((_DWORD *)a2 + 11) & 0x7FFFFF) == 0)
    return 1;
  v55 = (void *)*((_QWORD *)a3 + 7);
  v15 = 1;
  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::markNestedOpsIgnored(mlir::Operation *)::$_0>, (uint64_t)&v55, 1);
  return v15;
}

void mlir::detail::ConversionPatternRewriterImpl::resetState(int32x2_t *this, _DWORD *a2)
{
  _DWORD *v2;
  unsigned int v4;
  __int32 v5;
  int32x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  __int32 v14;
  int32x2_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t NextResultAtOffset;
  __int32 v32;
  unint64_t v33;
  int32x2_t v34;
  unsigned __int8 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  __int32 v43;
  __int32 v44;
  uint64_t v45;
  unsigned int v46;
  __int32 v47;
  __int32 v48;
  unsigned __int32 v49;
  uint64_t *v50;
  int32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned __int32 v57;
  unsigned int j;
  __int32 v59;
  unsigned __int32 v60;
  __int32 v61;
  unsigned __int32 v62;
  int32x2_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int32 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int32x2_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unint64_t v89;
  unsigned __int32 v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  unint64_t v96;
  _QWORD *v97;

  v2 = a2;
  v4 = a2[6];
  v5 = this[80].i32[0];
  if (v4 != v5)
  {
    v6 = this + 79;
    do
    while (v5 != v4);
    v7 = v2[6];
    v8 = this[80].u32[0];
    if ((_DWORD)v8 != (_DWORD)v7)
    {
      if (v8 > v7)
      {
        v9 = 136 * v8;
        v10 = v9 + *(_QWORD *)v6 - 112;
        v11 = 136 * v7 - v9;
        do
        {
          v12 = *(void **)(v10 + 80);
          if ((void *)(v10 + 96) != v12)
            free(v12);
          if (v10 + 16 != *(_QWORD *)v10)
            free(*(void **)v10);
          v10 -= 136;
          v11 += 136;
        }
        while (v11);
        goto LABEL_20;
      }
      if (this[80].i32[1] >= v7)
      {
        v13 = (char *)*v6;
        if (v8 == v7)
        {
LABEL_20:
          this[80].i32[0] = v7;
          goto LABEL_21;
        }
      }
      else
      {
        v97 = 0;
        v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&this[79], &this[81], v7, 136, (unint64_t *)&v97);
        v14 = (int)v97;
        v15 = (int32x2_t *)this[79];
        if (v15 != &this[81])
          free(v15);
        this[79] = (int32x2_t)v13;
        this[80].i32[1] = v14;
        v8 = this[80].u32[0];
        if (v8 == v7)
          goto LABEL_20;
      }
      v16 = &v13[136 * v8];
      do
      {
        *((_OWORD *)v16 + 6) = 0uLL;
        *((_OWORD *)v16 + 7) = 0uLL;
        *((_QWORD *)v16 + 16) = 0;
        *((_OWORD *)v16 + 4) = 0uLL;
        *((_OWORD *)v16 + 5) = 0uLL;
        *((_OWORD *)v16 + 2) = 0uLL;
        *((_OWORD *)v16 + 3) = 0uLL;
        *(_OWORD *)v16 = 0uLL;
        *((_OWORD *)v16 + 1) = 0uLL;
        *((_QWORD *)v16 + 3) = v16 + 40;
        *((_DWORD *)v16 + 9) = 8;
        *((_QWORD *)v16 + 13) = v16 + 120;
        *((_DWORD *)v16 + 29) = 2;
        v16 += 136;
      }
      while (v16 != &v13[136 * v7]);
      goto LABEL_20;
    }
  }
LABEL_21:
  v17 = v2[3];
  v18 = this[47].u32[0];
  if ((_DWORD)v17 != (_DWORD)v18)
  {
    v19 = 8 * v17;
    v20 = (unint64_t *)(*(_QWORD *)&this[46] + v19);
    v21 = 8 * v18 - v19;
    do
    {
      v96 = *v20;
      v97 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v96, &v97))
      {
        *v97 = -8192;
        this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v22 = v2[3];
    v23 = this[47].u32[0];
    if (v23 != (_DWORD)v22)
    {
      if (v23 <= v22)
      {
        if (this[47].i32[1] < v22)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&this[46], &this[48], v2[3], 8);
          v23 = this[47].u32[0];
        }
        if (v23 != (_DWORD)v22)
          bzero((void *)(*(_QWORD *)&this[46] + 8 * v23), 8 * (v22 - v23));
      }
      this[47].i32[0] = v22;
    }
  }
  mlir::detail::ConversionPatternRewriterImpl::undoBlockActions((mlir::detail::ConversionPatternRewriterImpl *)this, v2[4]);
  v24 = v2[2];
  v25 = this[45].u32[0];
  v95 = v2;
  if ((_DWORD)v24 != (_DWORD)v25)
  {
    v26 = this[44];
    v93 = *(_QWORD *)&v26 + 16 * v25;
    v27 = *(_QWORD *)&v26 + 16 * v24;
    do
    {
      v28 = *(unsigned int *)(*(_QWORD *)v27 + 36);
      if ((_DWORD)v28)
        v29 = *(_QWORD *)v27 - 16;
      else
        v29 = 0;
      if ((_DWORD)v28)
      {
        for (i = 0; i != v28; ++i)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v29, i);
          v32 = this[2].i32[0];
          if (v32)
          {
            v33 = NextResultAtOffset;
            v34 = *this;
            if ((v35 & 1) == 0
            {
              v42 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v42 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v42;
            }
            v36 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v33) ^ HIDWORD(v33));
            v37 = 0x9DDFEA08EB382D69 * (HIDWORD(v33) ^ (v36 >> 47) ^ v36);
            LODWORD(v37) = (-348639895 * ((v37 >> 47) ^ v37)) & (v32 - 1);
            v38 = (uint64_t *)(*(_QWORD *)&v34 + 16 * v37);
            v39 = *v38;
            if (v33 != *v38)
            {
              v40 = 1;
              do
              {
                if (v39 == -4096)
                  goto LABEL_42;
                v41 = v37 + v40++;
                v37 = v41 & (v32 - 1);
                v39 = *(_QWORD *)(*(_QWORD *)&v34 + 16 * v37);
              }
              while (v33 != v39);
              v38 = (uint64_t *)(*(_QWORD *)&v34 + 16 * v37);
            }
            *v38 = -8192;
            this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
          }
LABEL_42:
          ;
        }
      }
      v27 += 16;
    }
    while (v27 != v93);
    v43 = v2[2];
    v44 = this[45].i32[0];
    if (v44 == v43)
      goto LABEL_65;
    v45 = this[43].u32[0];
    v46 = v45 - 1;
    v47 = this[42].i32[0] + v43;
    v48 = v44 + this[42].i32[1];
    v49 = this[45].u32[0];
    while (1)
    {
      v51 = this[41];
      if ((_DWORD)v45)
      {
        v52 = *(_QWORD *)(*(_QWORD *)&this[44] + 16 * v49 - 16);
        LODWORD(v53) = ((v52 >> 4) ^ (v52 >> 9)) & v46;
        v50 = (uint64_t *)(*(_QWORD *)&v51 + 16 * v53);
        v54 = *v50;
        if (*v50 == v52)
          goto LABEL_57;
        v55 = 1;
        while (v54 != -4096)
        {
          v56 = v53 + v55++;
          v53 = v56 & v46;
          v54 = *(_QWORD *)(*(_QWORD *)&v51 + 16 * v53);
          if (v54 == v52)
          {
            v50 = (uint64_t *)(*(_QWORD *)&v51 + 16 * v53);
            goto LABEL_57;
          }
        }
      }
      v50 = (uint64_t *)(*(_QWORD *)&v51 + 16 * v45);
LABEL_57:
      *v50 = -8192;
      if (--v49 == v43)
      {
        this[45].i32[0] = v43;
        this[42].i32[0] = v47 - v44;
        this[42].i32[1] = v48 - v43;
        break;
      }
    }
  }
LABEL_65:
  v57 = this[34].u32[0];
  if (v57 != v2[1])
  {
    v70 = (_QWORD *)&unk_254519000;
    do
    {
      v71 = *(_QWORD *)&this[33] + 24 * v57;
      v72 = *(_QWORD *)(v71 - 24);
      v73 = *(_QWORD *)(v71 - 16);
      this[34].i32[0] = v57 - 1;
      if ((v73 & 4) != 0 && (*(_BYTE *)(v72 + 46) & 0x80) != 0)
      {
        v74 = *(unsigned int *)(v72 + 68);
        if ((_DWORD)v74)
        {
          v75 = this[2].i32[0];
          if (v75)
          {
            v76 = 0;
            v77 = *(_QWORD *)(v72 + 72);
LABEL_86:
            v78 = *(_QWORD *)(v77 + 32 * v76 + 24);
            v79 = *this;
            if ((v80 & 1) == 0)
            {
              v94 = v72;
              v70 = &unk_254519000;
              v88 = v87;
              v72 = v94;
              if (v88)
              {
                v89 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v89 = 0xFF51AFD7ED558CCDLL;
                llvm::hashing::detail::get_execution_seed(void)::seed = v89;
                v70 = (_QWORD *)&unk_254519000;
                v72 = v94;
              }
            }
            v81 = 0x9DDFEA08EB382D69 * ((v70[373] + 8 * v78) ^ HIDWORD(v78));
            v82 = 0x9DDFEA08EB382D69 * (HIDWORD(v78) ^ (v81 >> 47) ^ v81);
            LODWORD(v82) = (-348639895 * ((v82 >> 47) ^ v82)) & (v75 - 1);
            v83 = (uint64_t *)(*(_QWORD *)&v79 + 16 * v82);
            v84 = *v83;
            if (v78 == *v83)
            {
LABEL_88:
              *v83 = -8192;
              this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
              goto LABEL_89;
            }
            v85 = 1;
            while (v84 != -4096)
            {
              v86 = v82 + v85++;
              v82 = v86 & (v75 - 1);
              v84 = *(_QWORD *)(*(_QWORD *)&v79 + 16 * v82);
              if (v78 == v84)
              {
                v83 = (uint64_t *)(*(_QWORD *)&v79 + 16 * v82);
                goto LABEL_88;
              }
            }
LABEL_89:
            while (++v76 != v74)
            {
              v75 = this[2].i32[0];
              if (v75)
                goto LABEL_86;
            }
          }
        }
      }
      detachNestedAndErase((mlir::Operation *)v72);
      v70 = &unk_254519000;
      v57 = this[34].u32[0];
      v2 = v95;
    }
    while (v57 != v95[1]);
  }
  for (j = this[26].u32[0]; j != *v2; this[26].i32[0] = j)
  {
    detachNestedAndErase(*(mlir::Operation **)(*(_QWORD *)&this[25] + 8 * j - 8));
    j = this[26].i32[0] - 1;
  }
  v59 = v2[5];
  v60 = this[78].u32[0];
  if (v60 != v59)
  {
    v61 = this[76].i32[0];
    if (v61)
    {
      v62 = v61 - 1;
      do
      {
        v63 = this[74];
        v64 = *(_QWORD *)(*(_QWORD *)&this[77] + 8 * v60 - 8);
        LODWORD(v65) = ((v64 >> 4) ^ (v64 >> 9)) & v62;
        v66 = (uint64_t *)(*(_QWORD *)&v63 + 8 * v65);
        v67 = *v66;
        if (v64 == *v66)
        {
LABEL_72:
          *v66 = -8192;
          this[75] = vadd_s32(this[75], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v68 = 1;
          while (v67 != -4096)
          {
            v69 = v65 + v68++;
            v65 = v69 & v62;
            v67 = *(_QWORD *)(*(_QWORD *)&v63 + 8 * v65);
            if (v64 == v67)
            {
              v66 = (uint64_t *)(*(_QWORD *)&v63 + 8 * v65);
              goto LABEL_72;
            }
          }
        }
        --v60;
      }
      while (v60 != v59);
    }
    this[78].i32[0] = v59;
  }
  v90 = this[150].u32[0];
  if (v90)
  {
    v91 = *(_QWORD *)&this[149] - 4;
    v92 = v2[2];
    do
    {
      if (*(_DWORD *)(v91 + 4 * v90) < v92)
        break;
      this[150].i32[0] = --v90;
    }
    while (v90);
  }
}

void llvm::SmallVectorTemplateBase<`anonymous namespace'::OperationTransactionState,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 136 * v2;
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      v10 = *(_OWORD *)(v6 + v5);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + v5 + 16);
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(a2 + v5 + 24) = a2 + v5 + 40;
      *(_QWORD *)(v9 + 32) = 0x800000000;
      if (*(_DWORD *)(v6 + v5 + 32))
        llvm::SmallVectorImpl<mlir::Value>::operator=(a2 + v5 + 24, v8 + 24);
      *(_QWORD *)(v9 + 104) = v9 + 120;
      v11 = v9 + 104;
      *(_QWORD *)(v11 + 8) = 0x200000000;
      if (*(_DWORD *)(v8 + 112))
        llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v11, v6 + v5 + 104);
      v5 += 136;
    }
    while (v8 + 136 != v7);
    v12 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v12)
    {
      v13 = *a1;
      v14 = 136 * v12;
      do
      {
        v15 = v13 + v14;
        v16 = *(void **)(v13 + v14 - 32);
        if ((void *)(v13 + v14 - 16) != v16)
          free(v16);
        v17 = *(void **)(v15 - 112);
        if ((void *)(v15 - 96) != v17)
          free(v17);
        v14 -= 136;
      }
      while (v14);
    }
  }
}

BOOL llvm::function_ref<BOOL ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::legalizeWithPattern(mlir::Operation *,mlir::ConversionPatternRewriter &)::$_0>(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if ((a2[16] & 4) != 0)
    return 1;
  v2 = *a1;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 != *(_QWORD *)v2)
    goto LABEL_3;
  v6 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 8 * v6;
    v9 = *(_QWORD **)(v2 + 8);
    while ((_BYTE *)*v9 != a2)
    {
      if (*v9 == -2)
        v7 = v9;
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        if (!v7)
          goto LABEL_14;
        *v7 = a2;
        --*(_DWORD *)(v2 + 24);
        return 1;
      }
    }
    return 0;
  }
LABEL_14:
  if (v6 >= *(_DWORD *)(v2 + 16))
  {
LABEL_3:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v2, a2);
    return v4 != 0;
  }
  *(_DWORD *)(v2 + 20) = v6 + 1;
  *(_QWORD *)(v3 + 8 * v6) = a2;
  return 1;
}

const void **llvm::function_ref<void ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::legalizeWithPattern(mlir::Operation *,mlir::ConversionPatternRewriter &)::$_1>(uint64_t a1, const void *a2)
{
  _OWORD *v3;
  llvm::SmallPtrSetImplBase *v4;
  int32x2_t *v5;
  uint64_t v6;
  const void **result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];

  v3 = *(_OWORD **)(a1 + 8);
  v4 = *(llvm::SmallPtrSetImplBase **)(a1 + 16);
  v5 = *(int32x2_t **)a1;
  v15[0] = *v3;
  *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)((char *)v3 + 12);
  mlir::detail::ConversionPatternRewriterImpl::resetState(v5, v15);
  v6 = *((_QWORD *)v4 + 1);
  if (v6 == *(_QWORD *)v4)
  {
    v10 = *((unsigned int *)v4 + 5);
    result = (const void **)(v6 + 8 * v10);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      while (*(const void **)(v6 + v11) != a2)
      {
        v11 += 8;
        if (v12 == v11)
          goto LABEL_12;
      }
      result = (const void **)(v6 + v11);
    }
LABEL_12:
    v8 = *((_QWORD *)v4 + 1);
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(v4, a2);
    v6 = *(_QWORD *)v4;
    v8 = *((_QWORD *)v4 + 1);
    if (*result != a2)
    {
      v9 = 16;
      if (v8 == v6)
        v9 = 20;
      result = (const void **)(v8 + 8 * *(unsigned int *)((char *)v4 + v9));
    }
  }
  v13 = v8 == v6;
  v14 = 16;
  if (v13)
    v14 = 20;
  if (result != (const void **)(v8 + 8 * *(unsigned int *)((char *)v4 + v14)))
  {
    *result = (const void *)-2;
    ++*((_DWORD *)v4 + 6);
  }
  return result;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::Pattern const&)>::callback_fn<`anonymous namespace'::OperationLegalizer::legalizeWithPattern(mlir::Operation *,mlir::ConversionPatternRewriter &)::$_2>(uint64_t **a1, void *a2)
{
  const void *v2;
  uint64_t **v3;
  _anonymous_namespace_::OperationLegalizer *v4;
  uint64_t v5;
  unsigned int *v6;
  mlir::ConversionPatternRewriter *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Block **v17;
  mlir::Block *v18;
  uint64_t ParentOp;
  BOOL v20;
  void *v21;
  unint64_t Parent;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const void **v37;
  const void **i;
  const void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  int v53;
  uint64_t v54;
  int v55;
  const void **BucketFor;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int32x2_t *v63;
  uint64_t *v64;
  int v66;
  int v69;
  unsigned int *v70;
  _BYTE v71[28];
  _BYTE v72[144];

  v2 = a2;
  v3 = a1;
  v4 = (_anonymous_namespace_::OperationLegalizer *)*a1;
  v5 = *a1[1];
  v7 = (mlir::ConversionPatternRewriter *)a1[2];
  v6 = (unsigned int *)a1[3];
  v8 = *((_QWORD *)v7 + 7);
  v69 = *(_DWORD *)(v8 + 208);
  v9 = *(_DWORD *)(v8 + 424);
  v10 = *(_DWORD *)(v8 + 640);
  *(_QWORD *)v71 = v72;
  *(_QWORD *)&v71[8] = v72;
  *(_QWORD *)&v71[16] = 16;
  *(_DWORD *)&v71[24] = 0;
  v70 = v6;
  v11 = (int)v6[4];
  if ((_DWORD)v11 == v9)
  {
    v12 = (int *)v6;
    v13 = (int)v6[6];
    if (v10 == (_DWORD)v13)
      goto LABEL_56;
LABEL_53:
    v46 = v10 - v13;
    v47 = 136 * v13;
    {
      v47 += 136;
      if (!--v46)
        goto LABEL_56;
    }
    v50 = 0;
    v49 = 1;
    v51 = *((_QWORD *)v4 + 1);
    if (v51 == *(_QWORD *)v4)
      goto LABEL_74;
    goto LABEL_67;
  }
  v66 = v10;
  do
  {
    v15 = *(_QWORD *)(v8 + 416);
    if ((*(_DWORD *)(v15 + 40 * v11) | 4) == 5)
      goto LABEL_6;
    v16 = v15 + 40 * v11;
    v18 = *(mlir::Block **)(v16 + 8);
    v17 = (mlir::Block **)(v16 + 8);
    ParentOp = mlir::Block::getParentOp(v18);
    v20 = !ParentOp || ParentOp == v5;
    if (v20)
      goto LABEL_6;
    v21 = (void *)ParentOp;
    if (((*((_QWORD *)*v17 + 7) - *((_QWORD *)*v17 + 6)) & 0x7FFFFFFF8) == 0)
      goto LABEL_6;
    Parent = mlir::Block::getParent(*v17);
    v23 = *(_DWORD *)(v8 + 176);
    if (v23)
    {
      v24 = *(_QWORD *)(v8 + 160);
      v25 = v23 - 1;
      v26 = ((Parent >> 4) ^ (Parent >> 9)) & (v23 - 1);
      v27 = *(_QWORD *)(v24 + 16 * v26);
      if (v27 == Parent)
      {
LABEL_15:
        v28 = *(_QWORD *)(v24 + 16 * v26 + 8);
        if (v28)
        {
          mlir::detail::ConversionPatternRewriterImpl::convertBlockSignature(v8, *v17, v28, 0);
          if (!v14)
            goto LABEL_71;
          goto LABEL_6;
        }
      }
      else
      {
        v44 = 1;
        while (v27 != -4096)
        {
          v45 = v26 + v44++;
          v26 = v45 & v25;
          v27 = *(_QWORD *)(v24 + 16 * v26);
          if (v27 == Parent)
            goto LABEL_15;
        }
      }
    }
    if (*(_DWORD *)&v71[20] == *(_DWORD *)&v71[24])
    {
      v29 = *(unsigned int *)(v8 + 208);
      v30 = *v70;
      if ((_DWORD)v30 != (_DWORD)v29)
      {
        v36 = *(_QWORD *)(v8 + 200);
        v37 = (const void **)(v36 + 8 * v29);
        for (i = (const void **)(v36 + 8 * v30); i != v37; ++i)
        {
          v39 = *i;
          if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
            goto LABEL_31;
          v40 = *(unsigned int *)&v71[20];
          if (*(_DWORD *)&v71[20])
          {
            v41 = 0;
            v42 = 8 * *(unsigned int *)&v71[20];
            v43 = *(_QWORD **)&v71[8];
            while ((const void *)*v43 != v39)
            {
              if (*v43 == -2)
                v41 = v43;
              ++v43;
              v42 -= 8;
              if (!v42)
              {
                if (!v41)
                  goto LABEL_42;
                *v41 = v39;
                --*(_DWORD *)&v71[24];
                goto LABEL_32;
              }
            }
            continue;
          }
LABEL_42:
          if (*(_DWORD *)&v71[20] < *(_DWORD *)&v71[16])
          {
            ++*(_DWORD *)&v71[20];
            *(_QWORD *)(*(_QWORD *)&v71[8] + 8 * v40) = v39;
          }
          else
          {
LABEL_31:
            llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v71, v39);
          }
LABEL_32:
          ;
        }
      }
    }
    if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
      goto LABEL_19;
    v32 = *(unsigned int *)&v71[20];
    if (*(_DWORD *)&v71[20])
    {
      v33 = 0;
      v34 = 8 * *(unsigned int *)&v71[20];
      v35 = *(_QWORD **)&v71[8];
      while ((void *)*v35 != v21)
      {
        if (*v35 == -2)
          v33 = v35;
        ++v35;
        v34 -= 8;
        if (!v34)
        {
          if (!v33)
            goto LABEL_44;
          *v33 = v21;
          --*(_DWORD *)&v71[24];
          goto LABEL_20;
        }
      }
      goto LABEL_6;
    }
LABEL_44:
    if (*(_DWORD *)&v71[20] < *(_DWORD *)&v71[16])
    {
      ++*(_DWORD *)&v71[20];
      *(_QWORD *)(*(_QWORD *)&v71[8] + 8 * v32) = v21;
    }
    else
    {
LABEL_19:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)v71, v21);
      if (!v31)
        goto LABEL_6;
    }
LABEL_20:
    {
LABEL_71:
      if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
        free(*(void **)&v71[8]);
      v50 = 0;
      v49 = 1;
      v2 = a2;
      v3 = a1;
      v51 = *((_QWORD *)v4 + 1);
      if (v51 == *(_QWORD *)v4)
        goto LABEL_74;
      goto LABEL_67;
    }
LABEL_6:
    ++v11;
  }
  while (v9 != (_DWORD)v11);
  if (*(_QWORD *)&v71[8] != *(_QWORD *)v71)
    free(*(void **)&v71[8]);
  v2 = a2;
  v3 = a1;
  v12 = (int *)v70;
  v10 = v66;
  v13 = (int)v70[6];
  if (v66 != (_DWORD)v13)
    goto LABEL_53;
LABEL_56:
  v48 = *v12;
  if (v69 != (_DWORD)v48)
  {
    v52 = v2;
    v53 = v69 - v48;
    v54 = 8 * v48;
    while (1)
    {
      v49 = v55 == 0;
      if (!v55)
        break;
      v54 += 8;
      if (!--v53)
      {
        v49 = 0;
        v50 = 1;
        v2 = v52;
        v51 = *((_QWORD *)v4 + 1);
        if (v51 != *(_QWORD *)v4)
          goto LABEL_67;
        goto LABEL_74;
      }
    }
    v50 = 0;
    v2 = v52;
    v51 = *((_QWORD *)v4 + 1);
    if (v51 == *(_QWORD *)v4)
      goto LABEL_74;
    goto LABEL_67;
  }
  v49 = 0;
  v50 = 1;
  v51 = *((_QWORD *)v4 + 1);
  if (v51 != *(_QWORD *)v4)
  {
LABEL_67:
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(v4, v2);
    v51 = *(_QWORD *)v4;
    v57 = *((_QWORD *)v4 + 1);
    if (*BucketFor != v2)
    {
      v58 = 16;
      if (v57 == v51)
        v58 = 20;
      BucketFor = (const void **)(v57 + 8 * *(unsigned int *)((char *)v4 + v58));
    }
    goto LABEL_81;
  }
LABEL_74:
  v59 = *((unsigned int *)v4 + 5);
  BucketFor = (const void **)(v51 + 8 * v59);
  if ((_DWORD)v59)
  {
    v60 = 0;
    v61 = 8 * v59;
    while (*(const void **)(v51 + v60) != v2)
    {
      v60 += 8;
      if (v61 == v60)
        goto LABEL_80;
    }
    BucketFor = (const void **)(v51 + v60);
  }
LABEL_80:
  v57 = v51;
LABEL_81:
  v20 = v57 == v51;
  v62 = 16;
  if (v20)
    v62 = 20;
  if (BucketFor != (const void **)(v57 + 8 * *(unsigned int *)((char *)v4 + v62)))
  {
    *BucketFor = (const void *)-2;
    ++*((_DWORD *)v4 + 6);
  }
  if (v49)
  {
    v64 = v3[3];
    v63 = (int32x2_t *)v3[4];
    *(_OWORD *)v71 = *(_OWORD *)v64;
    *(_OWORD *)&v71[12] = *(_OWORD *)((char *)v64 + 12);
    mlir::detail::ConversionPatternRewriterImpl::resetState(v63, v71);
  }
  return v50;
}

void `anonymous namespace'::ConversionValueMapping::getInverse(_anonymous_namespace_::ConversionValueMapping *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      for (i = *(_QWORD **)a2; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
      {
        v4 -= 16;
        if (!v4)
          return;
      }
    }
    else
    {
      i = *(_QWORD **)a2;
    }
    v6 = *(_QWORD *)a2 + 16 * v3;
    if (i != (_QWORD *)v6)
    {
LABEL_9:
      v13 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)this, i + 1, &v13) & 1) != 0)
      {
        v8 = v13 + 2;
        v7 = *((unsigned int *)v13 + 4);
        v9 = v13 + 1;
        v10 = *i;
        if (v7 >= *((unsigned int *)v13 + 5))
        {
          v11 = v13;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v13 + 1), v13 + 3, v7 + 1, 8);
          v7 = *((unsigned int *)v11 + 4);
        }
      }
      else
      {
        v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)(i + 1), i + 1, v13);
        v7 = 0;
        *v12 = i[1];
        v12[1] = v12 + 3;
        v9 = v12 + 1;
        v12[2] = 0x600000000;
        v8 = v12 + 2;
        v10 = *i;
      }
      *(_QWORD *)(*v9 + 8 * v7) = v10;
      ++*v8;
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v6)
          break;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != (_QWORD *)v6)
            goto LABEL_9;
          return;
        }
      }
    }
  }
}

uint64_t legalizeUnresolvedMaterialization(uint64_t *a1, uint64_t *a2, uint64_t a3, int64x2_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t DefiningOp;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v33;
  ZinIrHalH13g *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  int v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  mlir::Block *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  mlir::Block *ParentOp;
  __int32 v104;
  uint64_t v105;
  __int32 v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (**v123)(uint64_t);
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v131;
  int64_t v132;
  int64_t v133;
  char *v134;
  int64_t v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146[2];
  _QWORD *v147[2];
  uint64_t v148;
  unint64_t v149;
  _OWORD v150[2];
  uint64_t v151;
  __int128 v152;
  void *__src[2];
  uint64_t v154;
  uint64_t v155[4];
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  void *__p[2];
  uint64_t v160;
  unsigned __int8 v161;
  __int128 v162;
  uint64_t v163;
  void *__dst;
  uint64_t v165;
  _BYTE v166[96];
  __int128 v167;
  uint64_t v168;
  void *v169[2];
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  llvm *v174[2];
  unint64_t v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
     + 2;
  v174[0] = (llvm *)a4;
       + 2;
  v10 = *a1;
  *(_QWORD *)&v152 = *a1;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a4 + 37, (uint64_t *)&v152, (uint64_t)&v162);
  if (!(_BYTE)v163)
  {
    v38 = 1;
       + 2 >= 8)
      goto LABEL_147;
    return v38;
  }
  v12 = v152;
  v13 = a4[39].u32[0];
  if (v13 >= a4[39].i32[1])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a4[38].i64[1], &a4[39].u64[1], v13 + 1, 8);
    LODWORD(v13) = a4[39].i32[0];
  }
  *(_QWORD *)(a4[38].i64[1] + 8 * v13) = v12;
  ++a4[39].i32[0];
  v138 = v10 - 16;
  if ((*(_BYTE *)(v10 + 46) & 0x80) != 0)
  {
    v14 = *(_QWORD *)(v10 + 72);
    v15 = *(unsigned int *)(v10 + 68);
    v148 = v14;
    v149 = v15;
    v16 = v10;
    v17 = *(_QWORD *)(v10 - 8);
    if ((_DWORD)v15)
    {
      v18 = 0;
      while (1)
      {
        *(_QWORD *)&v162 = *(_QWORD *)(v14 + 32 * v18 + 24);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v162);
        if (DefiningOp)
        {
          v20 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
          v21 = v20 == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id ? DefiningOp : 0;
          if (v20 == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
            break;
        }
LABEL_7:
        if (++v18 == v15)
          goto LABEL_23;
      }
      v22 = *a2;
      v23 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v23)
      {
        LODWORD(v24) = (v23 - 1) & ((DefiningOp >> 4) ^ (DefiningOp >> 9));
        v25 = (uint64_t *)(v22 + 16 * v24);
        v26 = *v25;
        if (*v25 == v21)
        {
LABEL_20:
          if (v25 != (uint64_t *)(v22 + 16 * v23)
            && !legalizeUnresolvedMaterialization(v25[1], a2, a3, a4, a5))
          {
            goto LABEL_145;
          }
          goto LABEL_7;
        }
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v23 - 1);
          v26 = *(_QWORD *)(v22 + 16 * v24);
          if (v26 == v21)
          {
            v25 = (uint64_t *)(v22 + 16 * v24);
            goto LABEL_20;
          }
        }
      }
      v25 = (uint64_t *)(v22 + 16 * v23);
      goto LABEL_20;
    }
LABEL_23:
    v29 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (v149 == 1)
    {
      v30 = (v175 & 2) != 0 ? (uint64_t *)v174 : (uint64_t *)v174[0];
      v31 = (*(unint64_t (**)(uint64_t *, unint64_t, uint64_t))(v175 & 0xFFFFFFFFFFFFFFF8))(v30, *(_QWORD *)(v148 + 24), v17 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)&v162 = v31;
      if (v31 && v138 != v31)
      {
        mlir::ResultRange::ResultRange(v147, v138);
        v38 = 1;
        replaceMaterialization((uint64_t)a4, v147[0], (uint64_t)v147[1], (uint64_t)&v162, 1, a5);
        goto LABEL_146;
      }
    }
    v10 = v16;
    v33 = a1[1] & 0xFFFFFFFFFFFFFFF8;
    if (!v33)
      goto LABEL_54;
  }
  else
  {
    v148 = 0;
    v149 = 0;
    v29 = *(_QWORD *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8;
    v33 = a1[1] & 0xFFFFFFFFFFFFFFF8;
    if (!v33)
      goto LABEL_54;
  }
  v137 = v10;
  if (v149 == 1)
  {
    *(_QWORD *)&v162 = *(_QWORD *)(v148 + 24);
    v34 = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v162);
    if (v34)
    {
      v35 = *((_QWORD *)v34 + 2);
      ZinIrHalH13g::~ZinIrHalH13g(v34);
      v37 = (uint64_t *)(v36 + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v162 + 16);
      v37 = (uint64_t *)(v35 + 40);
    }
    v41 = *v37;
    *(_QWORD *)(a3 + 24) = v35;
    *(_QWORD *)(a3 + 32) = v41;
    if ((a1[1] & 4) == 0)
      goto LABEL_42;
  }
  else
  {
    v39 = *(_QWORD *)(v10 + 16);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v10);
    *(_QWORD *)(a3 + 24) = v39;
    *(_QWORD *)(a3 + 32) = v40;
    if ((a1[1] & 4) == 0)
    {
LABEL_42:
      v42 = *(_QWORD *)(v10 + 24);
      v43 = a1[2];
      mlir::ValueRange::ValueRange((unint64_t *)&v173, v148, v149);
      v140 = v173;
      v44 = *(_QWORD *)(v33 + 152) + 32 * *(unsigned int *)(v33 + 160);
      v45 = -32 * *(unsigned int *)(v33 + 160);
      do
      {
        if (!v45)
          goto LABEL_47;
        *(_QWORD *)&v152 = v43;
        v162 = v140;
        *(_QWORD *)&v150[0] = v42;
        v46 = *(_QWORD *)(v44 - 8);
        if (!v46)
LABEL_172:
          std::__throw_bad_function_call[abi:nn180100]();
        v44 -= 32;
        v47 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, _OWORD *))(*(_QWORD *)v46 + 48))(v46, a3 + 8, &v152, &v162, v150);
        v45 += 32;
      }
      while (!v48);
      v142 = v47;
      if (v47)
      {
LABEL_52:
        mlir::ResultRange::ResultRange(v146, v138);
        v38 = 1;
        replaceMaterialization((uint64_t)a4, v146[0], (uint64_t)v146[1], (uint64_t)&v142, 1, a5);
        goto LABEL_146;
      }
    }
  }
LABEL_47:
  v49 = a3 + 8;
  v50 = *(_QWORD *)(v137 + 24);
  mlir::ValueRange::ValueRange((unint64_t *)&v172, v148, v149);
  v141 = v172;
  v51 = *(_QWORD *)(v33 + 312) + 32 * *(unsigned int *)(v33 + 320);
  v52 = -32 * *(unsigned int *)(v33 + 320);
  do
  {
    if (!v52)
      goto LABEL_53;
    *(_QWORD *)&v152 = v29;
    v162 = v141;
    *(_QWORD *)&v150[0] = v50;
    v53 = *(_QWORD *)(v51 - 8);
    if (!v53)
      goto LABEL_172;
    v51 -= 32;
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *, _OWORD *))(*(_QWORD *)v53 + 48))(v53, v49, &v152, &v162, v150);
    v52 += 32;
  }
  while (!v55);
  v142 = v54;
  if (v54)
    goto LABEL_52;
LABEL_53:
  v10 = v137;
LABEL_54:
  LOWORD(v151) = 257;
  mlir::Operation::emitError((uint64_t *)v10, (uint64_t)v150, (uint64_t)&v152);
  if ((_QWORD)v152)
  {
    LODWORD(v162) = 3;
    *((_QWORD *)&v162 + 1) = "failed to legalize unresolved materialization from ";
    v163 = 51;
    v56 = (char *)&v162;
    v57 = (char *)__src[1];
    if (v154 >= HIDWORD(v154))
    {
      v125 = v154 + 1;
      if (__src[1] <= &v162 && (char *)__src[1] + 24 * v154 > (char *)&v162)
      {
        v132 = (char *)&v162 - (char *)__src[1];
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v125, 24);
        v57 = (char *)__src[1];
        v56 = (char *)__src[1] + v132;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v125, 24);
        v56 = (char *)&v162;
        v57 = (char *)__src[1];
      }
    }
    v58 = &v57[24 * v154];
    v59 = *(_OWORD *)v56;
    *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
    *(_OWORD *)v58 = v59;
    LODWORD(v154) = v154 + 1;
  }
  mlir::OperandRange::getTypes(&v148, &v142);
  v60 = v152;
  if ((_QWORD)v152)
  {
    *(_QWORD *)&v162 = ", ";
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(v142, v143, v144, v145, (uint64_t)&v152 + 8, (uint64_t)&v152 + 8, (const char **)&v162);
    v60 = v152;
    if ((_QWORD)v152)
    {
      LODWORD(v162) = 3;
      *((_QWORD *)&v162 + 1) = " to ";
      v163 = 4;
      v61 = (char *)&v162;
      v62 = (char *)__src[1];
      if (v154 >= HIDWORD(v154))
      {
        v126 = v154 + 1;
        if (__src[1] <= &v162 && (char *)__src[1] + 24 * v154 > (char *)&v162)
        {
          v133 = (char *)&v162 - (char *)__src[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v126, 24);
          v62 = (char *)__src[1];
          v61 = (char *)__src[1] + v133;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v126, 24);
          v61 = (char *)&v162;
          v62 = (char *)__src[1];
        }
      }
      v63 = &v62[24 * v154];
      v64 = *(_OWORD *)v61;
      *((_QWORD *)v63 + 2) = *((_QWORD *)v61 + 2);
      *(_OWORD *)v63 = v64;
      LODWORD(v154) = v154 + 1;
      v60 = v152;
      if ((_QWORD)v152)
      {
        v65 = (char *)&v162;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v162, v29);
        v66 = (char *)__src[1];
        if (v154 >= HIDWORD(v154))
        {
          v129 = v154 + 1;
          if (__src[1] <= &v162 && (char *)__src[1] + 24 * v154 > (char *)&v162)
          {
            v135 = (char *)&v162 - (char *)__src[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v129, 24);
            v66 = (char *)__src[1];
            v65 = (char *)__src[1] + v135;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v129, 24);
            v65 = (char *)&v162;
            v66 = (char *)__src[1];
          }
        }
        v67 = &v66[24 * v154];
        v68 = *(_OWORD *)v65;
        *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
        *(_OWORD *)v67 = v68;
        v69 = (v154 + 1);
        LODWORD(v154) = v154 + 1;
        v60 = v152;
        if ((_QWORD)v152)
        {
          LODWORD(v162) = 3;
          *((_QWORD *)&v162 + 1) = " that remained live after conversion";
          v163 = 36;
          v70 = (char *)&v162;
          v71 = (char *)__src[1];
          if (v69 >= HIDWORD(v154))
          {
            v130 = v69 + 1;
            v131 = (char *)__src[1] + 24 * v69 > (char *)&v162;
            if (__src[1] <= &v162 && v131)
            {
              v136 = (char *)&v162 - (char *)__src[1];
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v130, 24);
              v71 = (char *)__src[1];
              v70 = (char *)__src[1] + v136;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src[1], v155, v130, 24);
              v70 = (char *)&v162;
              v71 = (char *)__src[1];
            }
          }
          v72 = &v71[24 * v154];
          v73 = *(_OWORD *)v70;
          *((_QWORD *)v72 + 2) = *((_QWORD *)v70 + 2);
          *(_OWORD *)v72 = v73;
          LODWORD(v154) = v154 + 1;
          v60 = v152;
        }
      }
    }
  }
  *(_QWORD *)&v162 = v60;
  BYTE8(v162) = 0;
  v171 = 0;
  if (!v161)
    goto LABEL_81;
  *((_QWORD *)&v162 + 1) = *((_QWORD *)&v152 + 1);
  v74 = v154;
  LODWORD(v163) = __src[0];
  __dst = v166;
  v165 = 0x400000000;
  if (!(_DWORD)v154)
  {
    v75 = 1;
    goto LABEL_77;
  }
  if (__src[1] == v155)
  {
    if (v154 < 5)
    {
      v76 = v154;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v166, v154, 24);
      v76 = v154;
      if (!(_DWORD)v154)
        goto LABEL_75;
    }
    memcpy(__dst, __src[1], 24 * v76);
LABEL_75:
    LODWORD(v165) = v74;
    v75 = v161;
    goto LABEL_76;
  }
  __dst = __src[1];
  v165 = v154;
  __src[1] = v155;
  HIDWORD(v154) = 0;
  v75 = 1;
LABEL_76:
  LODWORD(v154) = 0;
LABEL_77:
  v167 = v157;
  v168 = v158;
  v157 = 0uLL;
  *(_OWORD *)v169 = *(_OWORD *)__p;
  v170 = v160;
  v158 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v160 = 0;
  v171 = 1;
  if (v75)
  {
    if (__src[1] != v155)
      free(__src[1]);
    v161 = 0;
  }
LABEL_81:
  mlir::InFlightDiagnostic::abandon(&v152);
  if ((_QWORD)v152)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v152);
  if (v161)
  {
    v77 = __p[0];
    if (__p[0])
    {
      v78 = __p[1];
      v79 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
        while (v78 != v77);
        v79 = __p[0];
      }
      __p[1] = v77;
      operator delete(v79);
    }
    v80 = (_QWORD *)v157;
    if ((_QWORD)v157)
    {
      v81 = (_QWORD *)*((_QWORD *)&v157 + 1);
      v82 = (void *)v157;
      if (*((_QWORD *)&v157 + 1) != (_QWORD)v157)
      {
        do
        {
          v84 = *--v81;
          v83 = v84;
          *v81 = 0;
          if (v84)
            MEMORY[0x20BD002D4](v83, 0x1000C8077774924);
        }
        while (v81 != v80);
        v82 = (void *)v157;
      }
      *((_QWORD *)&v157 + 1) = v80;
      operator delete(v82);
    }
    if (__src[1] != v155)
      free(__src[1]);
  }
  v85 = *(unsigned int *)(v10 + 36);
  if ((_DWORD)v85)
    v86 = v138;
  else
    v86 = 0;
  v142 = v86;
  v143 = v85;
  mlir::ResultRange::use_begin(&v142, (uint64_t *)v150);
  v87 = *(unsigned int *)(v10 + 36);
  if ((_DWORD)v87)
    v88 = v138;
  else
    v88 = 0;
  v142 = v88;
  v143 = v87;
  mlir::ResultRange::use_end(&v142, v155);
  v89 = v151;
  v154 = v151;
  v152 = v150[0];
  *(_OWORD *)__src = v150[1];
  v90 = v156;
  while (v89 != v90)
  {
    v95 = *(_QWORD *)(v89 + 16);
    v96 = a4[20].i64[1];
    v97 = a4[21].u32[2];
    if (!(_DWORD)v97)
      goto LABEL_116;
    LODWORD(v98) = ((v95 >> 4) ^ (v95 >> 9)) & (v97 - 1);
    v99 = (uint64_t *)(v96 + 16 * v98);
    v100 = *v99;
    if (*v99 != v95)
    {
      v101 = 1;
      while (v100 != -4096)
      {
        v102 = v98 + v101++;
        v98 = v102 & (v97 - 1);
        v100 = *(_QWORD *)(v96 + 16 * v98);
        if (v100 == v95)
        {
          v99 = (uint64_t *)(v96 + 16 * v98);
          goto LABEL_117;
        }
      }
LABEL_116:
      v99 = (uint64_t *)(v96 + 16 * v97);
    }
LABEL_117:
    if (v99 == (uint64_t *)(v96 + 16 * v97))
    {
      ParentOp = *(mlir::Block **)(v95 + 16);
      if (ParentOp)
        ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
      v104 = a4[38].i32[0];
      if (!v104)
        break;
      v105 = a4[37].i64[0];
      v106 = v104 - 1;
      v93 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v106;
      v94 = *(mlir::Block **)(v105 + 8 * v93);
      if (v94 != ParentOp)
      {
        v92 = 1;
        while (v94 != (mlir::Block *)-4096)
        {
          v91 = v93 + v92++;
          v93 = v91 & v106;
          v94 = *(mlir::Block **)(v105 + 8 * v93);
          if (v94 == ParentOp)
            goto LABEL_108;
        }
        break;
      }
    }
LABEL_108:
    mlir::ResultRange::UseIterator::operator++((uint64_t *)v150);
    v89 = v151;
  }
  if (v151 != v156)
  {
    v107 = *(uint64_t **)(v151 + 16);
    if (v107)
    {
      v108 = mlir::Diagnostic::attachNote((uint64_t *)&v162 + 1, v107[3], 1);
      v109 = v108 + 16;
      v110 = *(_QWORD *)(v108 + 16);
      LODWORD(v152) = 3;
      *((_QWORD *)&v152 + 1) = "see existing live user here: ";
      __src[0] = (void *)29;
      v111 = *(unsigned int *)(v108 + 24);
      v112 = (char *)&v152;
      if (v111 >= *(_DWORD *)(v108 + 28))
      {
        v127 = v111 + 1;
        v128 = v110 + 24 * v111 > (unint64_t)&v152;
        if (v110 <= (unint64_t)&v152 && v128)
        {
          v134 = (char *)&__src[-2] - v110;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v109, (void *)(v108 + 32), v127, 24);
          v110 = *(_QWORD *)(v108 + 16);
          v112 = &v134[v110];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v109, (void *)(v108 + 32), v127, 24);
          v110 = *(_QWORD *)(v108 + 16);
          v112 = (char *)&v152;
        }
      }
      v113 = v110 + 24 * *(unsigned int *)(v108 + 24);
      v114 = *(_OWORD *)v112;
      *(_QWORD *)(v113 + 16) = *((_QWORD *)v112 + 2);
      *(_OWORD *)v113 = v114;
      ++*(_DWORD *)(v108 + 24);
      mlir::Diagnostic::operator<<((mlir::Diagnostic *)v108, (mlir::Operation *)v107);
    }
  }
  if ((_QWORD)v162)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
  if (v171)
  {
    v115 = v169[0];
    if (v169[0])
    {
      v116 = v169[1];
      v117 = v169[0];
      if (v169[1] != v169[0])
      {
        do
          v116 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v116 - 1);
        while (v116 != v115);
        v117 = v169[0];
      }
      v169[1] = v115;
      operator delete(v117);
    }
    v118 = (_QWORD *)v167;
    if ((_QWORD)v167)
    {
      v119 = (_QWORD *)*((_QWORD *)&v167 + 1);
      v120 = (void *)v167;
      if (*((_QWORD *)&v167 + 1) != (_QWORD)v167)
      {
        do
        {
          v122 = *--v119;
          v121 = v122;
          *v119 = 0;
          if (v122)
            MEMORY[0x20BD002D4](v121, 0x1000C8077774924);
        }
        while (v119 != v118);
        v120 = (void *)v167;
      }
      *((_QWORD *)&v167 + 1) = v118;
      operator delete(v120);
    }
    if (__dst != v166)
      free(__dst);
  }
LABEL_145:
  v38 = 0;
LABEL_146:
  v9 = v175;
  if (v175 >= 8)
  {
LABEL_147:
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0)
        v123 = (uint64_t (**)(uint64_t))v174;
      else
        v123 = (uint64_t (**)(uint64_t))v174[0];
      (*(void (**)(uint64_t (**)(uint64_t), uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v123, v11);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v174[0], v174[1]);
  }
  return v38;
}

uint64_t llvm::SetVector<`anonymous namespace'::UnresolvedMaterialization *,llvm::SmallVector<`anonymous namespace'::UnresolvedMaterialization *,0u>,llvm::DenseSet<`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<`anonymous namespace'::UnresolvedMaterialization *,void>>,0u>::insert(uint64_t a1, uint64_t *a2)
{
  llvm *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  char *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  int64x2_t *buffer;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int64x2_t *v30;
  int64x2_t v31;
  uint64_t v32;
  int v33;
  int v34;
  llvm *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  int v55;
  BOOL v56;
  unsigned int v57;

  v4 = *(llvm **)a1;
  v5 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v5)
    goto LABEL_27;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v5 - 1);
  v7 = (_QWORD *)((char *)v4 + 8 * v6);
  v8 = *v7;
  if (*v7 == *a2)
    return 0;
  v15 = 0;
  v16 = 1;
  while (v8 != -4096)
  {
    result = 0;
    if (v15)
      v17 = 0;
    else
      v17 = v8 == -8192;
    if (v17)
      v15 = v7;
    v18 = v6 + v16++;
    v6 = v18 & (v5 - 1);
    v7 = (_QWORD *)((char *)v4 + 8 * v6);
    v8 = *v7;
    if (*v7 == *a2)
      return result;
  }
  v19 = (char *)(v15 ? v15 : v7);
  v20 = *(_DWORD *)(a1 + 8);
  if (4 * v20 + 4 < (3 * v5))
  {
    v10 = (int)v5 + ~v20 - *(_DWORD *)(a1 + 12) > v5 >> 3;
    v11 = v5;
    if (v10)
      goto LABEL_8;
  }
  else
  {
LABEL_27:
    v11 = 2 * v5;
  }
  v21 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
  v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
  v23 = ((v22 | (v22 >> 8)) >> 16) | v22 | (v22 >> 8);
  if ((v23 + 1) > 0x40)
    v24 = v23 + 1;
  else
    v24 = 64;
  *(_DWORD *)(a1 + 16) = v24;
  buffer = (int64x2_t *)llvm::allocate_buffer(8 * v24, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v26 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v26)
    {
      v27 = (v26 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v28 = (char *)buffer;
      if (v27 < 3)
        goto LABEL_78;
      v29 = v27 + 1;
      v28 = &buffer->i8[8 * (v29 & 0x3FFFFFFFFFFFFFFCLL)];
      v30 = buffer + 1;
      v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30[-1] = v31;
        *v30 = v31;
        v30 += 2;
        v32 -= 4;
      }
      while (v32);
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_78:
        do
        {
          *(_QWORD *)v28 = -4096;
          v28 += 8;
        }
        while (v28 != (char *)buffer + 8 * v26);
      }
    }
    if ((_DWORD)v5)
    {
      v33 = 0;
      v34 = v26 - 1;
      v35 = v4;
      do
      {
        v44 = *(_QWORD *)v35;
        if ((*(_QWORD *)v35 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v45 = ((v44 >> 4) ^ (v44 >> 9)) & v34;
          v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
          v46 = *v43;
          if (*v43 != v44)
          {
            v47 = 0;
            v48 = 1;
            while (v46 != -4096)
            {
              if (v47)
                v49 = 0;
              else
                v49 = v46 == -8192;
              if (v49)
                v47 = v43;
              v50 = v45 + v48++;
              v45 = v50 & v34;
              v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v50 & v34));
              v46 = *v43;
              if (*v43 == v44)
                goto LABEL_49;
            }
            if (v47)
              v43 = v47;
          }
LABEL_49:
          *v43 = v44;
          *(_DWORD *)(a1 + 8) = ++v33;
        }
        v35 = (llvm *)((char *)v35 + 8);
      }
      while (v35 != (llvm *)((char *)v4 + 8 * v5));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v5));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v36 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v36)
  {
    v37 = (v36 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v38 = (char *)buffer;
    if (v37 < 3)
      goto LABEL_79;
    v39 = v37 + 1;
    v38 = &buffer->i8[8 * (v39 & 0x3FFFFFFFFFFFFFFCLL)];
    v40 = buffer + 1;
    v41 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40[-1] = v41;
      *v40 = v41;
      v40 += 2;
      v42 -= 4;
    }
    while (v42);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_79:
      do
      {
        *(_QWORD *)v38 = -4096;
        v38 += 8;
      }
      while (v38 != (char *)buffer + 8 * v36);
    }
  }
  v12 = *a2;
  v51 = v36 - 1;
  v52 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v36 - 1);
  v19 = &buffer->i8[8 * v52];
  v53 = *(_QWORD *)v19;
  if (*(_QWORD *)v19 == *a2)
    goto LABEL_9;
  v54 = 0;
  v55 = 1;
  while (v53 != -4096)
  {
    if (v54)
      v56 = 0;
    else
      v56 = v53 == -8192;
    if (v56)
      v54 = v19;
    v57 = v52 + v55++;
    v52 = v57 & v51;
    v19 = &buffer->i8[8 * (v57 & v51)];
    v53 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 == v12)
      goto LABEL_9;
  }
  if (v54)
    v19 = v54;
LABEL_8:
  v12 = *(_QWORD *)v19;
LABEL_9:
  ++*(_DWORD *)(a1 + 8);
  if (v12 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v19 = *a2;
  v13 = *a2;
  v14 = *(unsigned int *)(a1 + 32);
  if (v14 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v14) = v13;
  ++*(_DWORD *)(a1 + 32);
  return 1;
}

_QWORD *replaceMaterialization(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t NextResultAtOffset;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  unint64_t *v51;
  int v52;
  int v53;
  unint64_t *v54;
  int v55;
  unint64_t v56;
  unint64_t *v57;
  int v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v68 = a2;
  v69 = a3;
  v76 = a4;
  v77 = a5;
  result = mlir::ResultRange::replaceAllUsesWith<mlir::ValueRange &>(&v68, &v76);
  v63 = v76;
  v64 = v68;
  v72 = v68;
  v73 = 0;
  v74 = v76;
  v75 = 0;
  v62 = v69;
  if (v69)
  {
    v8 = 0;
    v9 = 0;
    v61 = v77;
    result = v68;
    while (1)
    {
      if (v74 == v63 && v9 == v61)
        return result;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, v8);
      v13 = mlir::ValueRange::dereference_iterator(&v74, v75);
      v66 = NextResultAtOffset;
      v67 = v13;
      v71 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v66, &v71))
      {
        if (v71 != *(_QWORD *)a6 + 72 * *(unsigned int *)(a6 + 16))
        {
          v14 = *(unsigned int *)(v71 + 16);
          if ((_DWORD)v14)
            break;
        }
      }
LABEL_3:
      result = v72;
      v8 = v73 + 1;
      v9 = v75 + 1;
      ++v73;
      ++v75;
      if (v72 == v64 && v8 == v62)
        return result;
    }
    v15 = *(unint64_t **)(v71 + 8);
    v16 = &v15[v14];
    while (1)
    {
      v17 = *v15;
      v18 = v67;
      if (v67)
      {
        v19 = v67;
        while (1)
        {
          v20 = *(_QWORD *)a1;
          v21 = *(_DWORD *)(a1 + 16);
          if (v19 == v17)
            break;
          if (!v21)
          {
            v44 = 0;
            v70 = v17;
            goto LABEL_61;
          }
          if ((v22 & 1) == 0)
          {
            v60 = v16;
            v16 = v60;
            if (v30)
            {
              v31 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v31 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v31;
              v16 = v60;
            }
          }
          v23 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v19) ^ HIDWORD(v19));
          v24 = 0x9DDFEA08EB382D69 * (HIDWORD(v19) ^ (v23 >> 47) ^ v23);
          LODWORD(v24) = (-348639895 * ((v24 >> 47) ^ v24)) & (v21 - 1);
          v25 = (uint64_t *)(v20 + 16 * v24);
          v26 = *v25;
          if (v19 != *v25)
          {
            v28 = 1;
            while (v26 != -4096)
            {
              v29 = v24 + v28++;
              v24 = v29 & (v21 - 1);
              v26 = *(_QWORD *)(v20 + 16 * v24);
              if (v19 == v26)
              {
                v25 = (uint64_t *)(v20 + 16 * v24);
                v27 = *(unsigned int *)(a1 + 16);
                if (v25 != (uint64_t *)(*(_QWORD *)a1 + 16 * v27))
                  goto LABEL_25;
                goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
          v27 = *(unsigned int *)(a1 + 16);
          if (v25 == (uint64_t *)(*(_QWORD *)a1 + 16 * v27))
            goto LABEL_37;
LABEL_25:
          v19 = v25[1];
          if (!v19)
            goto LABEL_36;
        }
        if (v21)
        {
          if ((v45 & 1) == 0)
          {
            v57 = v16;
            v16 = v57;
            if (v58)
            {
              v59 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v59 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v59;
              v16 = v57;
            }
          }
          v46 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ HIDWORD(v17));
          v47 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v46 >> 47) ^ v46);
          LODWORD(v47) = (-348639895 * ((v47 >> 47) ^ v47)) & (v21 - 1);
          v48 = (uint64_t *)(v20 + 16 * v47);
          v49 = *v48;
          if (v17 == *v48)
          {
LABEL_53:
            *v48 = -8192;
            *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v52 = 1;
            while (v49 != -4096)
            {
              v53 = v47 + v52++;
              v47 = v53 & (v21 - 1);
              v49 = *(_QWORD *)(v20 + 16 * v47);
              if (v17 == v49)
              {
                v48 = (uint64_t *)(v20 + 16 * v47);
                goto LABEL_53;
              }
            }
          }
        }
        goto LABEL_17;
      }
LABEL_36:
      LODWORD(v27) = *(_DWORD *)(a1 + 16);
LABEL_37:
      v70 = v17;
      if (!(_DWORD)v27)
        break;
      v32 = *(_QWORD *)a1;
      if ((v33 & 1) == 0)
      {
        v54 = v16;
        v16 = v54;
        if (v55)
        {
          v56 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v56 = 0xFF51AFD7ED558CCDLL;
          llvm::hashing::detail::get_execution_seed(void)::seed = v56;
          v16 = v54;
        }
      }
      v34 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v17) ^ HIDWORD(v17));
      v35 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v34 >> 47) ^ v34);
      v36 = v27 - 1;
      v37 = (-348639895 * ((v35 >> 47) ^ v35)) & (v27 - 1);
      v38 = (_QWORD *)(v32 + 16 * v37);
      v39 = *v38;
      if (v70 == *v38)
        goto LABEL_16;
      v40 = 0;
      v41 = 1;
      while (v39 != -4096)
      {
        if (v40)
          v42 = 0;
        else
          v42 = v39 == -8192;
        if (v42)
          v40 = v38;
        v43 = v37 + v41++;
        v37 = v43 & v36;
        v38 = (_QWORD *)(v32 + 16 * (v43 & v36));
        v39 = *v38;
        if (v70 == *v38)
          goto LABEL_16;
      }
      if (v40)
        v38 = v40;
      v44 = *(_DWORD *)(a1 + 16);
      v50 = *(_DWORD *)(a1 + 8);
      if (4 * v50 + 4 >= 3 * v44)
        goto LABEL_61;
      if (v44 + ~v50 - *(_DWORD *)(a1 + 12) <= v44 >> 3)
        goto LABEL_62;
      ++*(_DWORD *)(a1 + 8);
      if (*v38 != -4096)
        goto LABEL_57;
LABEL_15:
      *v38 = v70;
      v38[1] = 0;
LABEL_16:
      v38[1] = v18;
LABEL_17:
      if (++v15 == v16)
        goto LABEL_3;
    }
    v44 = 0;
LABEL_61:
    v44 *= 2;
LABEL_62:
    v51 = v16;
    llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow(a1, v44);
    v71 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, &v70, &v71);
    v16 = v51;
    v38 = (_QWORD *)v71;
    ++*(_DWORD *)(a1 + 8);
    if (*v38 == -4096)
      goto LABEL_15;
LABEL_57:
    --*(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::Value,mlir::Value,mlir::Value,mlir::Type>::CallImpl<computeNecessaryMaterializations(llvm::DenseMap<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *>> &,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> &,llvm::SetVector<`anonymous namespace'::UnresolvedMaterialization *,llvm::SmallVector<`anonymous namespace'::UnresolvedMaterialization *,0u>,llvm::DenseSet<`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<`anonymous namespace'::UnresolvedMaterialization *,void>>,0u> &)::$_1>(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t DefiningOp;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v16 = a3;
  v7 = *a1;
  if (a4)
  {
    v8 = 0;
    do
    {
      v9 = a3;
      if ((*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8) == a4)
        v8 = a3;
      v17 = a3;
      v18 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v7, &v17, &v18))break;
      if (v18 == *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 16))
        break;
      a3 = *(_QWORD *)(v18 + 8);
    }
    while (a3);
    if (!v8)
      v8 = v9;
  }
  else
  {
    do
    {
      v8 = a3;
      v17 = a3;
      v18 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v7, &v17, &v18))break;
      if (v18 == *(_QWORD *)v7 + 16 * *(unsigned int *)(v7 + 16))
        break;
      a3 = *(_QWORD *)(v18 + 8);
    }
    while (a3);
  }
  if ((*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8) != a4 || v8 == a2)
  {
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
    if (DefiningOp
      && (v12 = DefiningOp,
          *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::UnrealizedConversionCastOp,void>::id)
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 1)
    {
      v13 = (_QWORD *)a1[1];
      v14 = v13[3];
      if ((v14 & 2) == 0)
        v13 = (_QWORD *)*v13;
      return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(v14 & 0xFFFFFFFFFFFFFFF8))(v13, a2, *(_QWORD *)(*(_QWORD *)(v12 + 72) + 24), a4);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

_QWORD *mlir::ResultRange::replaceAllUsesWith<mlir::ValueRange &>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **NextResultAtOffset;
  uint64_t *i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = (_QWORD *)*result;
  v4 = result[1];
  v16 = (_QWORD *)*result;
  v17 = 0;
  v18 = *a2;
  v19 = 0;
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = a2[1];
    result = v3;
    do
    {
      if (v18 == v2 && v7 == v8)
        break;
      NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, v6);
      for (i = (uint64_t *)mlir::ValueRange::dereference_iterator(&v18, v19); ; *i = (uint64_t)v13)
      {
        v13 = *NextResultAtOffset;
        if (!*NextResultAtOffset)
          break;
        v14 = (uint64_t *)v13[1];
        if (v14)
        {
          *v14 = *v13;
          if (*v13)
            *(_QWORD *)(*v13 + 8) = v13[1];
        }
        v13[3] = (uint64_t)i;
        v13[1] = (uint64_t)i;
        v15 = *i;
        *v13 = *i;
        if (v15)
          *(_QWORD *)(v15 + 8) = v13;
      }
      result = v16;
      v6 = v17 + 1;
      v7 = v19 + 1;
      ++v17;
      ++v19;
    }
    while (v16 != v3 || v6 != v4);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 72 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 72 * v11 - 72;
    if (v12 < 0x48)
    {
      v13 = result;
LABEL_12:
      v17 = &result[9 * v11];
      do
      {
        *v13 = -4096;
        v13 += 9;
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x48 + 1;
    v13 = &result[9 * (v14 & 0x7FFFFFFFFFFFFFELL)];
    v15 = v14 & 0x7FFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = -4096;
      v16[9] = -4096;
      v16 += 18;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>,mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = (_QWORD *)(v7 + 72 * v6);
      do
      {
        *v9 = -4096;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x48 + 1;
    v9 = (_QWORD *)(v7 + 72 * (v10 & 0x7FFFFFFFFFFFFFELL));
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -4096;
      v12[9] = -4096;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>,mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<llvm::SMLoc,6u>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v4, &v17);
        v14 = v17;
        *v17 = *(_QWORD *)v4;
        v14[2] = 0x600000000;
        v14[1] = v14 + 3;
        v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 16))
          llvm::SmallVectorImpl<mlir::Value>::operator=(v15, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v16 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v16)
          free(v16);
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

_QWORD *llvm::find_if_not<llvm::iterator_range<mlir::ValueUserIterator<mlir::ValueUseIterator<mlir::OpOperand>,mlir::OpOperand>>,computeNecessaryMaterializations(llvm::DenseMap<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization *>> &,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> &,llvm::SetVector<`anonymous namespace'::UnresolvedMaterialization *,llvm::SmallVector<`anonymous namespace'::UnresolvedMaterialization *,0u>,llvm::DenseSet<`anonymous namespace'::UnresolvedMaterialization *,llvm::DenseMapInfo<`anonymous namespace'::UnresolvedMaterialization *,void>>,0u> &)::$_0::operator() const(mlir::Value)::{lambda(mlir::Operation *)#1}>(_QWORD *a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  mlir::Block *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  mlir::Block *ParentOp;
  int v35;
  uint64_t v36;
  int v37;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  while (1)
  {
    v12 = v3[2];
    v13 = *v5;
    v14 = *((unsigned int *)v5 + 4);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = ((v12 >> 4) ^ (v12 >> 9)) & (v14 - 1);
      v16 = (uint64_t *)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v12)
        goto LABEL_13;
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(_QWORD *)(v13 + 16 * v15);
        if (v17 == v12)
        {
          v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_13;
        }
      }
    }
    v16 = (uint64_t *)(v13 + 16 * v14);
LABEL_13:
    if (v16 == (uint64_t *)(v13 + 16 * v14))
      break;
    v20 = *((_DWORD *)v6 + 4);
    if (v20)
    {
      v21 = v16[1];
      v22 = v20 - 1;
      v23 = ((v21 >> 4) ^ (v21 >> 9)) & v22;
      v24 = *(_QWORD *)(*v6 + 8 * v23);
      if (v24 == v21)
        return v3;
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v23 + v25++;
        v23 = v26 & v22;
        v24 = *(_QWORD *)(*v6 + 8 * v23);
        if (v24 == v21)
          return v3;
      }
    }
LABEL_5:
    v3 = (_QWORD *)*v3;
    if (v3 == a2)
      return a2;
  }
  v27 = v7[41];
  v28 = *((unsigned int *)v7 + 86);
  if (!(_DWORD)v28)
    goto LABEL_26;
  LODWORD(v29) = (v28 - 1) & ((v12 >> 4) ^ (v12 >> 9));
  v30 = (uint64_t *)(v27 + 16 * v29);
  v31 = *v30;
  if (*v30 != v12)
  {
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v28 - 1);
      v31 = *(_QWORD *)(v27 + 16 * v29);
      if (v31 == v12)
      {
        v30 = (uint64_t *)(v27 + 16 * v29);
        goto LABEL_27;
      }
    }
LABEL_26:
    v30 = (uint64_t *)(v27 + 16 * v28);
  }
LABEL_27:
  if (v30 != (uint64_t *)(v27 + 16 * v28))
    goto LABEL_5;
  ParentOp = *(mlir::Block **)(v12 + 16);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  v35 = *((_DWORD *)v7 + 152);
  if (!v35)
    return v3;
  v36 = v7[74];
  v37 = v35 - 1;
  v10 = ((ParentOp >> 4) ^ (ParentOp >> 9)) & v37;
  v11 = *(mlir::Block **)(v36 + 8 * v10);
  if (v11 == ParentOp)
    goto LABEL_5;
  v9 = 1;
  while (v11 != (mlir::Block *)-4096)
  {
    v8 = v10 + v9++;
    v10 = v8 & v37;
    v11 = *(mlir::Block **)(v36 + 8 * v10);
    if (v11 == ParentOp)
      goto LABEL_5;
  }
  return v3;
}

unint64_t llvm::detail::UniqueFunctionBase<mlir::Value,mlir::Value,mlir::Type>::CallImpl<legalizeUnresolvedMaterialization(`anonymous namespace'::UnresolvedMaterialization &,llvm::DenseMap<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization*,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,`anonymous namespace'::UnresolvedMaterialization*>> &,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> &)::$_1>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  if (a3)
  {
    v5 = 0;
    do
    {
      v6 = a2;
      if ((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) == a3)
        v5 = a2;
      v8 = a2;
      v9 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v8, &v9))break;
      if (v9 == *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16))
        break;
      a2 = *(_QWORD *)(v9 + 8);
    }
    while (a2);
    if (!v5)
      v5 = v6;
  }
  else
  {
    do
    {
      v5 = a2;
      v8 = a2;
      v9 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v8, &v9))break;
      if (v9 == *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16))
        break;
      a2 = *(_QWORD *)(v9 + 8);
    }
    while (a2);
  }
  if ((*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) == a3)
    return v5;
  else
    return 0;
}

void llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char **a7)
{
  int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  BOOL v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t *v47;
  int v48;
  const char *v49;
  size_t v50;

  if (a1 != a3 || a2 != a4)
  {
    v14 = &v48;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, *(_QWORD *)(*(_QWORD *)(a1 + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v15 = *(_QWORD *)(a5 + 16);
    v47 = (unint64_t *)(a5 + 16);
    v16 = *(unsigned int *)(a5 + 24);
    if (v16 >= *(_DWORD *)(a5 + 28))
    {
      v39 = v16 + 1;
      v40 = v15 + 24 * v16 > (unint64_t)&v48;
      if (v15 <= (unint64_t)&v48 && v40)
      {
        v41 = (char *)&v48 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(a5 + 32), v39, 24);
        v15 = *(_QWORD *)(a5 + 16);
        v14 = (int *)&v41[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, (void *)(a5 + 32), v39, 24);
        v15 = *(_QWORD *)(a5 + 16);
        v14 = &v48;
      }
    }
    v17 = v15 + 24 * *(unsigned int *)(a5 + 24);
    v18 = *(_OWORD *)v14;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v17 = v18;
    ++*(_DWORD *)(a5 + 24);
    if (a1 != a3 || a2 + 1 != a4)
    {
      v45 = (void *)(a6 + 32);
      v46 = (unint64_t *)(a6 + 16);
      v44 = (void *)(a5 + 32);
      v19 = a4 - a2 - 2;
      v20 = a1 + 32 * a2 + 56;
      do
      {
        v21 = *a7;
        if (*a7)
        {
          v22 = strlen(*a7);
          v48 = 3;
          v49 = v21;
          v50 = v22;
          v23 = *(unsigned int *)(a6 + 24);
          v24 = *(_QWORD *)(a6 + 16);
          if (v23 < *(_DWORD *)(a6 + 28))
            goto LABEL_12;
        }
        else
        {
          v48 = 3;
          v49 = 0;
          v50 = 0;
          v23 = *(unsigned int *)(a6 + 24);
          v24 = *(_QWORD *)(a6 + 16);
          if (v23 < *(_DWORD *)(a6 + 28))
            goto LABEL_12;
        }
        v35 = v23 + 1;
        v36 = v24 + 24 * v23 > (unint64_t)&v48;
        if (v24 <= (unint64_t)&v48 && v36)
        {
          v42 = (char *)&v48 - v24;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v45, v35, 24);
          v24 = *v46;
          v25 = (int *)&v42[*v46];
          goto LABEL_13;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v46, v45, v35, 24);
        v24 = *v46;
LABEL_12:
        v25 = &v48;
LABEL_13:
        v26 = v24 + 24 * *(unsigned int *)(a6 + 24);
        v27 = *(_OWORD *)v25;
        *(_QWORD *)(v26 + 16) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v26 = v27;
        ++*(_DWORD *)(a6 + 24);
        v28 = &v48;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8);
        v29 = *(unsigned int *)(a5 + 24);
        v30 = *(_QWORD *)(a5 + 16);
        if (v29 >= *(_DWORD *)(a5 + 28))
        {
          v37 = v29 + 1;
          v38 = v30 + 24 * v29 > (unint64_t)&v48;
          if (v30 <= (unint64_t)&v48 && v38)
          {
            v43 = (char *)&v48 - v30;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, v44, v37, 24);
            v30 = *v47;
            v28 = (int *)&v43[*v47];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, v44, v37, 24);
            v30 = *v47;
            v28 = &v48;
          }
        }
        v31 = v30 + 24 * *(unsigned int *)(a5 + 24);
        v32 = *(_OWORD *)v28;
        *(_QWORD *)(v31 + 16) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v31 = v32;
        ++*(_DWORD *)(a5 + 24);
        v34 = v19-- != 0;
        v20 += 32;
      }
      while (a1 != a3 || v34);
    }
  }
}

uint64_t `anonymous namespace'::OperationConverter::legalizeChangedResultType(mlir::Operation *,mlir::OpResult,mlir::Value,mlir::TypeConverter const*,mlir::ConversionPatternRewriter &,mlir::detail::ConversionPatternRewriterImpl &,llvm::DenseMap<mlir::Value,llvm::SmallVector<mlir::Value,6u>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SmallVector<mlir::Value,6u>>> const&)::$_0::operator()(mlir::Operation ***a1)
{
  uint64_t *v2;
  char *v3;
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  _WORD v63[20];
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *__src;
  uint64_t v68;
  _BYTE v69[96];
  __int128 v70;
  uint64_t v71;
  __int128 __p;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *__dst;
  uint64_t v79;
  _BYTE v80[96];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)**a1;
  v63[16] = 257;
  mlir::Operation::emitError(v2, (uint64_t)v63, (uint64_t)&v64);
  if (v64)
  {
    LODWORD(v75) = 3;
    v76 = "failed to materialize conversion for result #";
    v77 = 45;
    v3 = (char *)&v75;
    v4 = (char *)__src;
    if (v68 >= HIDWORD(v68))
    {
      v53 = v68 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v68 > (char *)&v75)
      {
        v59 = (char *)&v75 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v53, 24);
        v4 = (char *)__src;
        v3 = (char *)__src + v59;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v53, 24);
        v3 = (char *)&v75;
        v4 = (char *)__src;
      }
    }
    v5 = &v4[24 * v68];
    v6 = *(_OWORD *)v3;
    *((_QWORD *)v5 + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)v5 = v6;
    LODWORD(v68) = v68 + 1;
  }
  v7 = (uint64_t)*a1[1];
  v8 = *(_QWORD *)(v7 + 8) & 7;
  if (v7)
    v9 = v8 == 6;
  else
    v9 = 0;
  if (v9)
    v8 = *(_QWORD *)(v7 + 16) + 6;
  if (v64)
  {
    LODWORD(v75) = 5;
    v76 = (const char *)v8;
    v10 = (char *)&v75;
    v11 = (char *)__src;
    if (v68 >= HIDWORD(v68))
    {
      v54 = v68 + 1;
      if (__src <= &v75 && (char *)__src + 24 * v68 > (char *)&v75)
      {
        v60 = (char *)&v75 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v54, 24);
        v11 = (char *)__src;
        v10 = (char *)__src + v60;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v54, 24);
        v10 = (char *)&v75;
        v11 = (char *)__src;
      }
    }
    v12 = &v11[24 * v68];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = (v68 + 1);
    LODWORD(v68) = v68 + 1;
    v15 = v64;
    if (v64)
    {
      LODWORD(v75) = 3;
      v76 = " of operation '";
      v77 = 15;
      v16 = (char *)&v75;
      v17 = (char *)__src;
      if (v14 >= HIDWORD(v68))
      {
        v55 = v14 + 1;
        v56 = (char *)__src + 24 * v14 > (char *)&v75;
        if (__src <= &v75 && v56)
        {
          v61 = (char *)&v75 - (_BYTE *)__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v55, 24);
          v17 = (char *)__src;
          v16 = (char *)__src + v61;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v55, 24);
          v16 = (char *)&v75;
          v17 = (char *)__src;
        }
      }
      v18 = &v17[24 * v68];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      LODWORD(v68) = v68 + 1;
      v15 = v64;
      if (v64)
      {
        mlir::Diagnostic::operator<<((uint64_t)&v65, *((_QWORD *)**a1 + 6));
        v15 = v64;
        if (v64)
        {
          LODWORD(v75) = 3;
          v76 = "' that remained live after conversion";
          v77 = 37;
          v20 = (char *)&v75;
          v21 = (char *)__src;
          if (v68 >= HIDWORD(v68))
          {
            v57 = v68 + 1;
            if (__src <= &v75 && (char *)__src + 24 * v68 > (char *)&v75)
            {
              v62 = (char *)&v75 - (_BYTE *)__src;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v57, 24);
              v21 = (char *)__src;
              v20 = (char *)__src + v62;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v69, v57, 24);
              v20 = (char *)&v75;
              v21 = (char *)__src;
            }
          }
          v22 = &v21[24 * v68];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          LODWORD(v68) = v68 + 1;
          v15 = v64;
        }
      }
    }
  }
  else
  {
    v15 = 0;
  }
  v75 = v15;
  LOBYTE(v76) = 0;
  v85 = 0;
  if (v74)
  {
    v76 = v65;
    v24 = v68;
    LODWORD(v77) = v66;
    __dst = v80;
    v79 = 0x400000000;
    if (!(_DWORD)v68)
    {
      v25 = 1;
      goto LABEL_31;
    }
    if (__src != v69)
    {
      __dst = __src;
      v79 = v68;
      __src = v69;
      HIDWORD(v68) = 0;
      v25 = 1;
LABEL_30:
      LODWORD(v68) = 0;
LABEL_31:
      v81 = v70;
      v70 = 0uLL;
      v83 = __p;
      v82 = v71;
      v84 = v73;
      v71 = 0;
      __p = 0uLL;
      v73 = 0;
      v85 = 1;
      if (v25)
      {
        if (__src != v69)
          free(__src);
        v74 = 0;
      }
      goto LABEL_35;
    }
    if (v68 < 5)
    {
      v26 = v68;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v80, v68, 24);
      v26 = v68;
      if (!(_DWORD)v68)
        goto LABEL_29;
    }
    memcpy(__dst, __src, 24 * v26);
LABEL_29:
    LODWORD(v79) = v24;
    v25 = v74;
    goto LABEL_30;
  }
LABEL_35:
  mlir::InFlightDiagnostic::abandon(&v64);
  if (v64)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  if (v74)
  {
    v27 = (_QWORD *)__p;
    if ((_QWORD)__p)
    {
      v28 = (_QWORD *)*((_QWORD *)&__p + 1);
      v29 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v27;
      operator delete(v29);
    }
    v30 = (_QWORD *)v70;
    if ((_QWORD)v70)
    {
      v31 = (_QWORD *)*((_QWORD *)&v70 + 1);
      v32 = (void *)v70;
      if (*((_QWORD *)&v70 + 1) != (_QWORD)v70)
      {
        do
        {
          v34 = *--v31;
          v33 = v34;
          *v31 = 0;
          if (v34)
            MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
        }
        while (v31 != v30);
        v32 = (void *)v70;
      }
      *((_QWORD *)&v70 + 1) = v30;
      operator delete(v32);
    }
    if (__src != v69)
      free(__src);
  }
  v35 = mlir::Diagnostic::attachNote((uint64_t *)&v76, *((_QWORD *)*a1[2] + 3), 1);
  v36 = v35 + 16;
  v37 = *(_QWORD *)(v35 + 16);
  LODWORD(v64) = 3;
  v65 = "see existing live user here: ";
  v66 = 29;
  v38 = *(unsigned int *)(v35 + 24);
  v39 = (char *)&v64;
  if (v38 >= *(_DWORD *)(v35 + 28))
  {
    v51 = v38 + 1;
    v52 = v37 + 24 * v38 > (unint64_t)&v64;
    if (v37 <= (unint64_t)&v64 && v52)
    {
      v58 = (char *)&v64 - v37;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v36, (void *)(v35 + 32), v51, 24);
      v37 = *(_QWORD *)(v35 + 16);
      v39 = &v58[v37];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v36, (void *)(v35 + 32), v51, 24);
      v37 = *(_QWORD *)(v35 + 16);
      v39 = (char *)&v64;
    }
  }
  v40 = v37 + 24 * *(unsigned int *)(v35 + 24);
  v41 = *(_OWORD *)v39;
  *(_QWORD *)(v40 + 16) = *((_QWORD *)v39 + 2);
  *(_OWORD *)v40 = v41;
  ++*(_DWORD *)(v35 + 24);
  mlir::Diagnostic::operator<<((mlir::Diagnostic *)v35, *a1[2]);
  if (v75)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v75);
  if (v85)
  {
    v42 = (_QWORD *)v83;
    if ((_QWORD)v83)
    {
      v43 = (_QWORD *)*((_QWORD *)&v83 + 1);
      v44 = (void *)v83;
      if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = (void *)v83;
      }
      *((_QWORD *)&v83 + 1) = v42;
      operator delete(v44);
    }
    v45 = (_QWORD *)v81;
    if ((_QWORD)v81)
    {
      v46 = (_QWORD *)*((_QWORD *)&v81 + 1);
      v47 = (void *)v81;
      if (*((_QWORD *)&v81 + 1) != (_QWORD)v81)
      {
        do
        {
          v49 = *--v46;
          v48 = v49;
          *v46 = 0;
          if (v49)
            MEMORY[0x20BD002D4](v48, 0x1000C8077774924);
        }
        while (v46 != v45);
        v47 = (void *)v81;
      }
      *((_QWORD *)&v81 + 1) = v45;
      operator delete(v47);
    }
    if (__dst != v80)
      free(__dst);
  }
  return 0;
}

BOOL llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::applyRewrites(void)::$_0>(uint64_t a1, uint64_t a2)
{
  mlir::Operation *v2;

  v2 = *(mlir::Operation **)(a2 + 16);
  return *((_QWORD *)v2 + 2) != **(_QWORD **)a1 || mlir::Operation::isBeforeInBlock(**(mlir::Block ****)(a1 + 8), v2);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::detail::ConversionPatternRewriterImpl::markNestedOpsIgnored(mlir::Operation *)::$_0>(int64x2_t **a1, uint64_t a2)
{
  int64x2_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[31];

  v2 = *a1;
  v10 = a2;
  v3 = *(unsigned int *)(a2 + 44);
  v4 = v3 & 0x7FFFFF;
  if ((v3 & 0x7FFFFF) != 0)
  {
    v5 = (_QWORD *)(((a2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(a2 + 40));
    v6 = 24 * v4;
    while (v5 == (_QWORD *)*v5)
    {
      v5 += 3;
      v6 -= 24;
      if (!v6)
        return;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v2 + 37, &v10, (uint64_t)v11);
    if (v11[16])
    {
      v7 = v10;
      v8 = v2[39].u32[0];
      if (v8 >= v2[39].i32[1])
      {
        v9 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2[38].i64[1], &v2[39].u64[1], v8 + 1, 8);
        v7 = v9;
        LODWORD(v8) = v2[39].i32[0];
      }
      *(_QWORD *)(v2[38].i64[1] + 8 * v8) = v7;
      ++v2[39].i32[0];
    }
  }
}

void mlir::detail::ConversionPatternRewriterImpl::~ConversionPatternRewriterImpl(mlir::detail::ConversionPatternRewriterImpl *this)
{
  char *v2;
  void **v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void **v10;

  v2 = (char *)*((_QWORD *)this + 149);
  if (v2 != (char *)this + 1208)
    free(v2);
  v3 = (void **)((char *)this + 632);
  v4 = (char *)*((_QWORD *)this + 79);
  v5 = *((unsigned int *)this + 160);
  if ((_DWORD)v5)
  {
    v6 = 136 * v5;
    do
    {
      v7 = &v4[v6];
      v8 = *(char **)&v4[v6 - 32];
      if (&v4[v6 - 16] != v8)
        free(v8);
      v9 = (char *)*((_QWORD *)v7 - 14);
      if (v7 - 96 != v9)
        free(v9);
      v6 -= 136;
    }
    while (v6);
    v4 = (char *)*v3;
  }
  if (v4 != (char *)this + 648)
    free(v4);
  v10 = (void **)*((_QWORD *)this + 77);
  if (v10 != v3)
    free(v10);
  llvm::deallocate_buffer(*((llvm **)this + 74), (void *)(8 * *((unsigned int *)this + 152)));
}

void sub_207565380()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 48), (void *)(16 * *(unsigned int *)(v0 + 64)));
}

void sub_207565394()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_2075653A8()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_2075653BC()
{
  uint64_t v0;

  return v0;
}

void llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext(uint64_t a1)
{
  uint64_t v2;
  mlir::Block *v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD v27[2];

  v2 = *(_QWORD *)(a1 + 104);
  while (2)
  {
    v3 = *(mlir::Block **)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v27, *(mlir::Block **)(v2 - 32));
      *(_QWORD *)(v2 - 24) = v27[0];
      *(_QWORD *)(v2 - 16) = 0;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v27, v3);
      v6 = *(_QWORD *)(v2 - 24);
      v7 = *(_QWORD *)(v2 - 16);
      if (v6 == v27[0] && v7 == v27[1])
        break;
      *(_QWORD *)(v2 - 16) = v7 + 1;
      v9 = *(const void **)(v6 + 32 * v7 + 24);
      v10 = *(_QWORD *)(a1 + 8);
      if (v10 != *(_QWORD *)a1)
        goto LABEL_4;
      v11 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 8 * v11;
        v14 = *(_QWORD **)(a1 + 8);
        do
        {
          if ((const void *)*v14 == v9)
          {
            v5 = 0;
            goto LABEL_5;
          }
          if (*v14 == -2)
            v12 = v14;
          ++v14;
          v13 -= 8;
        }
        while (v13);
        if (!v12)
          goto LABEL_19;
        *v12 = v9;
        --*(_DWORD *)(a1 + 24);
        v5 = 1;
        goto LABEL_5;
      }
LABEL_19:
      if (v11 < *(_DWORD *)(a1 + 16))
      {
        *(_DWORD *)(a1 + 20) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = v9;
        v5 = 1;
      }
      else
      {
LABEL_4:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a1, v9);
        v5 = v4;
      }
LABEL_5:
      if (v5)
      {
        v17 = *(_BYTE **)(a1 + 104);
        v16 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v17 >= v16)
        {
          v19 = *(_BYTE **)(a1 + 96);
          v20 = (v17 - v19) >> 5;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 59)
            abort();
          v22 = v16 - (_QWORD)v19;
          if (v22 >> 4 > v21)
            v21 = v22 >> 4;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
            v23 = 0x7FFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 >> 59)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v24 = (char *)operator new(32 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[32 * v20];
          *(_QWORD *)v25 = v9;
          v25[8] = 0;
          v25[24] = 0;
          v18 = v25 + 32;
          if (v17 != v19)
          {
            do
            {
              v26 = *((_OWORD *)v17 - 1);
              *((_OWORD *)v25 - 2) = *((_OWORD *)v17 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v25 -= 32;
              v17 -= 32;
            }
            while (v17 != v19);
            v17 = *(_BYTE **)(a1 + 96);
          }
          *(_QWORD *)(a1 + 96) = v25;
          *(_QWORD *)(a1 + 104) = v18;
          *(_QWORD *)(a1 + 112) = &v24[32 * v23];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v17 = v9;
          v17[8] = 0;
          v18 = v17 + 32;
          v17[24] = 0;
        }
        *(_QWORD *)(a1 + 104) = v18;
        return;
      }
    }
    v15 = *(_QWORD *)(a1 + 96);
    v2 = *(_QWORD *)(a1 + 104) - 32;
    *(_QWORD *)(a1 + 104) = v2;
    if (v15 != v2)
      continue;
    break;
  }
}

void mlir::detail::walk<mlir::ForwardDominanceIterator<false>>(mlir::ForwardIterator *a1, mlir::Operation *a2, uint64_t a3, int a4)
{
  uint64_t Iterable;
  uint64_t v9;
  mlir::Operation *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  char *i;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  ZinIrHalH13g *v27;
  ZinIrHalH13g *v28;
  ZinIrHalH13g *v29;
  mlir::ForwardIterator *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  const void *v34;
  char *v35;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  const void *v40;
  void *__p;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  void *v50;
  _BYTE *v51;

  if (!a4)
  {
    ((void (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, a1);
    v30 = a1;
    Iterable = mlir::ForwardIterator::makeIterable(a1, v10);
    if (!v9)
      goto LABEL_46;
    goto LABEL_5;
  }
  v30 = a1;
  Iterable = mlir::ForwardIterator::makeIterable(a1, a2);
  if (v9)
  {
LABEL_5:
    v11 = (_QWORD *)Iterable;
    v31 = (_QWORD *)(Iterable + 24 * v9);
    do
    {
      mlir::ForwardDominanceIterator<false>::makeIterable(v11, (uint64_t)&v44);
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v38, &v40, (const llvm::SmallPtrSetImplBase *)&v44);
      __p = 0;
      v42 = 0;
      v43 = 0;
      v12 = v46;
      v13 = v47 - (_BYTE *)v46;
      if (v47 != v46)
      {
        if (v13 < 0)
          goto LABEL_49;
        v14 = (char *)operator new(v47 - (_BYTE *)v46);
        __p = v14;
        v42 = v14;
        v43 = &v14[32 * (v13 >> 5)];
        v15 = v13 & 0xFFFFFFFFFFFFFFE0;
        memcpy(v14, v12, v15);
        v42 = &v14[v15];
      }
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v32, &v34, (const llvm::SmallPtrSetImplBase *)&v48);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = v50;
      v17 = v51 - (_BYTE *)v50;
      if (v51 != v50)
      {
        if ((v17 & 0x8000000000000000) == 0)
        {
          v18 = (char *)operator new(v51 - (_BYTE *)v50);
          v35 = v18;
          v36 = v18;
          v37 = &v18[32 * (v17 >> 5)];
          v19 = v17 & 0xFFFFFFFFFFFFFFE0;
          memcpy(v18, v16, v19);
          i = &v18[v19];
          v36 = &v18[v19];
          goto LABEL_15;
        }
LABEL_49:
        abort();
      }
      v18 = 0;
      for (i = 0; ; i = v36)
      {
LABEL_15:
        if (v42 - (_BYTE *)__p != i - v18)
          goto LABEL_27;
        if (__p == v42)
          break;
        v21 = v18 + 16;
        v22 = (char *)__p + 16;
        while (1)
        {
          v23 = v22 - 16;
          if (*((_QWORD *)v22 - 2) != *((_QWORD *)v21 - 2))
            break;
          v24 = v21[8];
          if (v22[8])
            v25 = v24 == 0;
          else
            v25 = 1;
          if (v25)
          {
            if ((v22[8] != 0) != (v24 != 0))
              break;
          }
          else if (*((_QWORD *)v22 - 1) != *((_QWORD *)v21 - 1) || *(_QWORD *)v22 != *(_QWORD *)v21)
          {
            break;
          }
          v21 += 32;
          v22 += 32;
          if (v23 + 32 == v42)
            goto LABEL_30;
        }
LABEL_27:
        v26 = *((_QWORD *)v42 - 4);
        v27 = (ZinIrHalH13g *)(v26 + 32);
        v28 = *(ZinIrHalH13g **)(v26 + 40);
        if (v28 != (ZinIrHalH13g *)(v26 + 32))
        {
          do
          {
            v29 = (ZinIrHalH13g *)*((_QWORD *)v28 + 1);
            ZinIrHalH13g::~ZinIrHalH13g(v28);
            mlir::detail::walk<mlir::ForwardDominanceIterator<false>>();
            v28 = v29;
          }
          while (v29 != v27);
        }
        llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::toNext((uint64_t)&v38);
        v18 = v35;
      }
LABEL_30:
      if (v18)
      {
        v36 = v18;
        operator delete(v18);
      }
      if (v33 != v32)
        free(v33);
      if (__p)
      {
        v42 = (char *)__p;
        operator delete(__p);
      }
      if (v39 != v38)
        free(v39);
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      if (v49 != v48)
        free(v49);
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      if (v45 != v44)
        free(v45);
      v11 += 3;
    }
    while (v11 != v31);
  }
LABEL_46:
  if (a4 == 1)
    ((void (*)(uint64_t, mlir::ForwardIterator *))a2)(a3, v30);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::ConversionPatternRewriter::cloneRegionBefore(mlir::Region &,mlir::Region &,llvm::ilist_iterator<llvm::ilist_detail::node_options<mlir::Block,false,false,void,false>,false,false>,mlir::IRMapping &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v4 = *(unsigned int *)(v3 + 208);
  if (v4 >= *(_DWORD *)(v3 + 212))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 200, (void *)(v3 + 216), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 208);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 208);
}

_anonymous_namespace_::OperationTransactionState *`anonymous namespace'::OperationTransactionState::OperationTransactionState(_anonymous_namespace_::OperationTransactionState *this, mlir::Operation *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v11;
  const double *v12;
  unsigned __int128 *v13;
  unint64_t v14;
  const double *v15;
  unsigned __int128 v16;
  unsigned __int128 v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int128 *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const double *v31;
  unsigned __int128 *v32;
  unint64_t v33;
  const double *v34;
  unsigned __int128 v35;
  unsigned __int128 v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v41[2];

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = mlir::Operation::getAttrDictionary(a2);
  if ((*((_BYTE *)a2 + 46) & 0x80) == 0)
  {
    LODWORD(v5) = 0;
    v21 = 0;
    *((_QWORD *)this + 3) = (char *)this + 40;
    *((_DWORD *)this + 9) = 8;
    goto LABEL_21;
  }
  v4 = *((_QWORD *)a2 + 9);
  v5 = *((unsigned int *)a2 + 17);
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0x800000000;
  if (v5 < 9)
  {
    if (!(_DWORD)v5)
    {
      v21 = 0;
      goto LABEL_21;
    }
    v8 = (_QWORD *)((char *)this + 40);
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 24, (char *)this + 40, v5, 8);
    v6 = *((unsigned int *)this + 8);
    v7 = *((_QWORD *)this + 3);
    v8 = (_QWORD *)(v7 + 8 * v6);
    if (v5 >= 0xD && ((unint64_t)v8 >= v4 + 32 * v5 || v4 + 24 >= v7 + 8 * (v6 + v5)))
    {
      v10 = v5 & 3;
      if ((v5 & 3) == 0)
        v10 = 4;
      v11 = v5 - v10;
      v8 += v11;
      v12 = (const double *)(v4 + 88);
      v13 = (unsigned __int128 *)(v7 + 8 * v6 + 16);
      v14 = v11;
      do
      {
        v15 = v12 - 8;
        v16 = (unsigned __int128)vld4q_f64(v15);
        v17 = (unsigned __int128)vld4q_f64(v12);
        *(v13 - 1) = v16;
        *v13 = v17;
        v12 += 16;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      goto LABEL_18;
    }
  }
  v11 = 0;
LABEL_18:
  v18 = v5 - v11;
  v19 = (uint64_t *)(v4 + 32 * v11 + 24);
  do
  {
    v20 = *v19;
    v19 += 4;
    *v8++ = v20;
    --v18;
  }
  while (v18);
  v21 = *((_DWORD *)this + 8);
LABEL_21:
  *((_DWORD *)this + 8) = v21 + v5;
  mlir::SuccessorRange::SuccessorRange(v41, a2);
  v22 = v41[0];
  mlir::SuccessorRange::SuccessorRange(v41, a2);
  v24 = v41[0];
  v23 = v41[1];
  v25 = (unsigned __int128 *)((char *)this + 120);
  *((_QWORD *)this + 13) = (char *)this + 120;
  *((_QWORD *)this + 14) = 0x200000000;
  if (v23 < 3)
  {
    if (!v23 && v22 == v24)
    {
      LODWORD(v26) = 0;
      goto LABEL_43;
    }
    if (v22 == v24)
    {
      LODWORD(v26) = 0;
      goto LABEL_35;
    }
LABEL_29:
    for (i = (uint64_t *)(v22 + 24); ; i += 4)
    {
      v28 = *i;
      *(_QWORD *)v25 = v28;
      v25 = (unsigned __int128 *)((char *)v25 + 8);
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 104, v25, v23, 8);
  v26 = *((unsigned int *)this + 28);
  v25 = (unsigned __int128 *)(*((_QWORD *)this + 13) + 8 * v26);
  if (v22 != v24)
    goto LABEL_29;
  if (v23 > 0xA && ((unint64_t)v25 >= v22 + 32 * v23 || v22 + 24 >= (unint64_t)v25 + 8 * v23))
  {
    v30 = v23 & 3;
    if ((v23 & 3) == 0)
      v30 = 4;
    v29 = v23 - v30;
    v31 = (const double *)(v22 + 88);
    v32 = v25 + 1;
    v33 = v29;
    do
    {
      v34 = v31 - 8;
      v35 = (unsigned __int128)vld4q_f64(v34);
      v36 = (unsigned __int128)vld4q_f64(v31);
      *(v32 - 1) = v35;
      *v32 = v36;
      v31 += 16;
      v32 += 2;
      v33 -= 4;
    }
    while (v33);
    v25 = (unsigned __int128 *)((char *)v25 + 8 * v29);
    goto LABEL_41;
  }
LABEL_35:
  v29 = 0;
LABEL_41:
  v37 = v23 - v29;
  v38 = (uint64_t *)(v22 + 32 * v29 + 24);
  do
  {
    v39 = *v38;
    v38 += 4;
    *(_QWORD *)v25 = v39;
    v25 = (unsigned __int128 *)((char *)v25 + 8);
    --v37;
  }
  while (v37);
LABEL_43:
  *((_DWORD *)this + 28) = v26 + v23;
  return this;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>,mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>::InsertIntoBucket<mlir::Type const&,llvm::SmallVector<mlir::Type,2u>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *buffer;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      v10 = *a2;
      goto LABEL_4;
    }
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = *(uint64_t **)a1;
  v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40)
    v17 = v16 + 1;
  else
    v17 = 64;
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(40 * v17, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v13)
  {
    v19 = 5 * v8;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(a1, v13, &v13[v19]);
    llvm::deallocate_buffer((llvm *)v13, (void *)(v19 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  v21 = 40 * v20 - 40;
  v22 = buffer;
  if (v21 < 0x28)
    goto LABEL_36;
  v23 = v21 / 0x28 + 1;
  v22 = &buffer[5 * (v23 & 0xFFFFFFFFFFFFFFELL)];
  v24 = v23 & 0xFFFFFFFFFFFFFFELL;
  v25 = buffer;
  do
  {
    *v25 = -4096;
    v25[5] = -4096;
    v25 += 10;
    v24 -= 2;
  }
  while (v24);
  if (v23 != (v23 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_36:
    do
    {
      *v22 = -4096;
      v22 += 5;
    }
    while (v22 != &buffer[5 * v20]);
  }
  v10 = *a3;
  v26 = v20 - 1;
  v27 = ((*a3 >> 4) ^ (*a3 >> 9)) & v26;
  a2 = &buffer[5 * v27];
  v28 = *a2;
  if (*a3 != *a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a2;
      v32 = v27 + v30++;
      v27 = v32 & v26;
      a2 = &buffer[5 * v27];
      v28 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v29)
      a2 = v29;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x200000000;
  if (*(_DWORD *)(a4 + 8))
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)(a2 + 1), a4);
  return a2;
}

BOOL _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_12OperandRangeEPNS1_9OpOperandENS1_5ValueES9_S9_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISI_PNS1_9OperationEEE5valueEbE4typeEOSI_EUlSJ_E_EEbSI_SI_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v13;
  BOOL v15;
  void *v16;
  void *v18;
  uint64_t i;
  void *v20;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  if (a1 == a3 && a2 == a4)
    return 1;
  if (a1 == a3)
  {
    v9 = ~a2 + a4;
    v10 = a1 + 32 * a2 + 24;
    while (1)
    {
      v11 = (void *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      v23 = v25;
      v24 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v11, (uint64_t)&v23) || (_DWORD)v24 != 1)
        break;
      v13 = *(void **)v23;
      if (v23 != v25)
        goto LABEL_13;
LABEL_14:
      v15 = v9-- != 0;
      result = v13 == v11;
      if (v13 == v11)
      {
        v10 += 32;
        if (v15)
          continue;
      }
      return result;
    }
    v13 = 0;
    if (v23 == v25)
      goto LABEL_14;
LABEL_13:
    free(v23);
    goto LABEL_14;
  }
  v16 = (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v23 = v25;
  v24 = 0x100000000;
  if (mlir::TypeConverter::convertType(a5, v16, (uint64_t)&v23) && (_DWORD)v24 == 1)
  {
    v18 = *(void **)v23;
    if (v23 == v25)
      goto LABEL_28;
    goto LABEL_27;
  }
  v18 = 0;
  if (v23 != v25)
LABEL_27:
    free(v23);
LABEL_28:
  if (v18 == v16)
  {
    for (i = a1 + 32 * a2 + 56; ; i += 32)
    {
      v20 = (void *)(*(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8);
      v23 = v25;
      v24 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v20, (uint64_t)&v23) || (_DWORD)v24 != 1)
        break;
      v22 = *(void **)v23;
      if (v23 != v25)
        goto LABEL_40;
LABEL_32:
      if (v22 != v20)
        return 0;
    }
    v22 = 0;
    if (v23 == v25)
      goto LABEL_32;
LABEL_40:
    free(v23);
    goto LABEL_32;
  }
  return 0;
}

BOOL _ZNSt3__16all_ofB8nn180100IN4mlir17ValueTypeIteratorIN4llvm6detail27indexed_accessor_range_baseINS1_11ResultRangeEPNS1_6detail12OpResultImplENS1_8OpResultESA_SA_E8iteratorEEEZNKS1_13TypeConverter7isLegalINS1_14ValueTypeRangeIS6_EEEENS_9enable_ifIXaantsr3std14is_convertibleIT_NS1_4TypeEEE5valuentsr3std14is_convertibleISJ_PNS1_9OperationEEE5valueEbE4typeEOSJ_EUlSK_E_EEbSJ_SJ_T0_(mlir::detail::OpResultImpl *this, uint64_t a2, mlir::detail::OpResultImpl *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v9;
  void *v11;
  void *v13;
  void *v14;
  void *v16;
  uint64_t i;
  void *v18;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v6 = a2;
  v23[1] = *MEMORY[0x24BDAC8D0];
  if (this == a3 && a2 == a4)
    return 1;
  if (this == a3)
  {
    v9 = a4 - 1;
    while (1)
    {
      v11 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v6) + 8) & 0xFFFFFFFFFFFFFFF8);
      v21 = v23;
      v22 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v11, (uint64_t)&v21) || (_DWORD)v22 != 1)
        break;
      v13 = *(void **)v21;
      if (v21 != v23)
        goto LABEL_17;
LABEL_6:
      result = v13 == v11;
      if (v13 != v11 || v9 == v6++)
        return result;
    }
    v13 = 0;
    if (v21 == v23)
      goto LABEL_6;
LABEL_17:
    free(v21);
    goto LABEL_6;
  }
  v14 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, a2) + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = v23;
  v22 = 0x100000000;
  if (mlir::TypeConverter::convertType(a5, v14, (uint64_t)&v21) && (_DWORD)v22 == 1)
  {
    v16 = *(void **)v21;
    if (v21 == v23)
      goto LABEL_26;
    goto LABEL_25;
  }
  v16 = 0;
  if (v21 != v23)
LABEL_25:
    free(v21);
LABEL_26:
  if (v16 == v14)
  {
    for (i = v6 + 1; ; ++i)
    {
      v18 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, i) + 8) & 0xFFFFFFFFFFFFFFF8);
      v21 = v23;
      v22 = 0x100000000;
      if (!mlir::TypeConverter::convertType(a5, v18, (uint64_t)&v21) || (_DWORD)v22 != 1)
        break;
      v20 = *(void **)v21;
      if (v21 != v23)
        goto LABEL_38;
LABEL_30:
      if (v20 != v18)
        return 0;
    }
    v20 = 0;
    if (v21 == v23)
      goto LABEL_30;
LABEL_38:
    free(v21);
    goto LABEL_30;
  }
  return 0;
}

void `anonymous namespace'::FunctionOpInterfaceSignatureConversion::~FunctionOpInterfaceSignatureConversion(_anonymous_namespace_::FunctionOpInterfaceSignatureConversion *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::FunctionOpInterfaceSignatureConversion::matchAndRewrite(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;

  v6 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return convertFuncOpTypes(v6, InterfaceFor, *(_QWORD *)(a1 + 96), a5);
}

uint64_t convertFuncOpTypes(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t canMapOperands;
  uint64_t v7;
  unsigned int Kind;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t Inputs;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t Results;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  char v34;
  mlir::MLIRContext *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44[2];
  unint64_t v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  void *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x24BDAC8D0];
  v42 = a1;
  v43 = a2;
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v42);
  if (*(_UNKNOWN **)(*(_QWORD *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
    v7 = canMapOperands;
  else
    v7 = 0;
  v41 = v7;
  if (!v7)
    return 0;
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v41);
  v53 = v55;
  v54 = 0x400000000;
  if (Kind)
  {
    v9 = Kind;
    v10 = Kind;
    if (Kind < 5)
    {
      v11 = 0;
      v12 = v55;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, Kind, 32);
      v11 = v54;
      v12 = v53;
      if (v54 == v10)
      {
LABEL_17:
        LODWORD(v54) = v9;
        goto LABEL_18;
      }
    }
    v14 = 32 * v11;
    v15 = &v12[32 * v11];
    v16 = 32 * v10 - 32 - v14;
    if (!v16)
      goto LABEL_15;
    v17 = (v16 >> 5) + 1;
    v15 += 32 * (v17 & 0xFFFFFFFFFFFFFFELL);
    v18 = &v12[v14 + 32];
    v19 = v17 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v18 - 32) = 0;
      *v18 = 0;
      *(v18 - 8) = 0;
      v18[24] = 0;
      v18 += 64;
      v19 -= 2;
    }
    while (v19);
    if (v17 != (v17 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_15:
      v20 = &v12[32 * v10];
      do
      {
        *v15 = 0;
        v15[24] = 0;
        v15 += 32;
      }
      while (v15 != v20);
    }
    goto LABEL_17;
  }
LABEL_18:
  v56 = v58;
  v57 = 0x400000000;
  v50 = &v52;
  v51 = 0x100000000;
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v41);
  mlir::ValueRange::ValueRange((unint64_t *)&v48, Inputs, v22);
  v23 = v49;
  if (v49)
  {
    v24 = 0;
    v25 = v48;
    while (1)
    {
      v26 = (void *)mlir::TypeRange::dereference_iterator(v25, v24);
      if (!mlir::TypeConverter::convertSignatureArg(a3, v24, v26, (uint64_t)&v53))
        break;
      if (v23 == ++v24)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    Results = mlir::FunctionType::getResults((mlir::FunctionType *)&v41);
    mlir::ValueRange::ValueRange((unint64_t *)&v46, Results, v28);
    v29 = v47;
    if (!v47)
    {
LABEL_26:
      v33 = *(unsigned int *)(v42 + 44);
      if ((v33 & 0x7FFFFF) != 0)
      {
        mlir::detail::ConversionPatternRewriterImpl::convertRegionTypes(a4[7], (_QWORD *)(((v42 + 16 * ((v33 >> 23) & 1) + ((v33 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v42 + 40)), a3, (uint64_t)&v53);
        if (!v34)
          goto LABEL_31;
      }
      else
      {
        mlir::detail::ConversionPatternRewriterImpl::convertRegionTypes(a4[7], 0, a3, (uint64_t)&v53);
        if (!v39)
          goto LABEL_31;
      }
      v35 = (mlir::MLIRContext *)a4[1];
      mlir::ValueRange::ValueRange(v45, (uint64_t)v56, v57);
      mlir::ValueRange::ValueRange(v44, (uint64_t)v50, v51);
      v36 = mlir::FunctionType::get(v35, v45[0], v45[1], v44[0], v44[1]);
      v37 = v42;
      (*(void (**)(_QWORD *, uint64_t))(*a4 + 72))(a4, v42);
      mlir::function_interface_impl::setFunctionType(v42, v43, v36);
      (*(void (**)(_QWORD *, uint64_t))(*a4 + 80))(a4, v37);
      v13 = 1;
      v38 = v50;
      if (v50 == &v52)
        goto LABEL_33;
      goto LABEL_32;
    }
    v30 = 0;
    v31 = v46;
    while (1)
    {
      v32 = (void *)mlir::TypeRange::dereference_iterator(v31, v30);
      if (!mlir::TypeConverter::convertType(a3, v32, (uint64_t)&v50))
        break;
      if (v29 == ++v30)
        goto LABEL_26;
    }
  }
LABEL_31:
  v13 = 0;
  v38 = v50;
  if (v50 != &v52)
LABEL_32:
    free(v38);
LABEL_33:
  if (v56 != v58)
    free(v56);
  if (v53 != v55)
    free(v53);
  return v13;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v4 + 1;
    v12 = v5 + 48 * v4;
    if (v5 <= a2 && v12 > a2)
    {
      v14 = a2 - v5;
      llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::grow(a1, v11);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v14;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::grow(a1, v11);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v5 + 48 * v6;
  *(_QWORD *)v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(v7 + 8) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
    v10 = (_QWORD *)(v5 + 48 * v6 + 40);
    if (v9 == a2 + 16)
    {
      *v10 = v7 + 16;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
    }
    else
    {
      *v10 = v9;
      *(_QWORD *)(a2 + 40) = 0;
    }
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)(v5 + 48 * v6 + 40) = 0;
    ++*(_DWORD *)(a1 + 8);
  }
}

uint64_t *llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *buffer;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *v7;
  if (*v7 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
    v10 = buffer + 5;
    if (a3)
LABEL_4:
      memcpy(v10, a2, (size_t)a3);
  }
  else
  {
    if (v8)
    {
      while (!v8 || v8 == -8)
      {
        v15 = v7[1];
        ++v7;
        v8 = v15;
      }
      return v7;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 41), (std::align_val_t)8uLL);
    v10 = buffer + 5;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v10] = 0;
  *buffer = a3;
  buffer[4] = 0;
  *v7 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
  if (*v7)
    v11 = *v7 == -8;
  else
    v11 = 1;
  if (v11)
  {
    do
    {
      v13 = v7[1];
      ++v7;
      v12 = v13;
      if (v13)
        v14 = v12 == -8;
      else
        v14 = 1;
    }
    while (v14);
  }
  return v7;
}

_QWORD *std::__function::__value_func<std::optional<BOOL> ()(mlir::Operation *)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t mlir::OperationFolder::tryToFold(int32x2_t *this, mlir::Operation *a2, BOOL *a3)
{
  __int32 v6;
  int32x2_t v7;
  __int32 v8;
  unsigned int v9;
  mlir::Operation *v10;
  uint64_t v11;
  mlir::Operation *v12;
  uint64_t v13;
  __int32 v14;
  int32x2_t v15;
  __int32 v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  mlir::Operation *v22;
  int v23;
  unsigned int v24;
  _BOOL8 v25;
  void *v26;
  void *v27;
  uint64_t v29;
  unint64_t v30[2];
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x24BDAC8D0];
  if (a3)
    *a3 = 0;
  v6 = this[5].i32[0];
  if (!v6)
    goto LABEL_21;
  v7 = this[3];
  v8 = v6 - 1;
  v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = *(mlir::Operation **)(*(_QWORD *)&v7 + 40 * v9);
  if (v10 != a2)
  {
    v23 = 1;
    while (v10 != (mlir::Operation *)-4096)
    {
      v24 = v9 + v23++;
      v9 = v24 & v8;
      v10 = *(mlir::Operation **)(*(_QWORD *)&v7 + 40 * v9);
      if (v10 == a2)
        goto LABEL_5;
    }
LABEL_21:
    v31 = v33;
    v32 = 0x800000000;
    v34 = v36;
    v35 = 0x800000000;
    if (mlir::Operation::fold((uint64_t)a2, (uint64_t)&v34))
    {
      v25 = mlir::OperationFolder::processFoldResults(this, (uint64_t)a2, (uint64_t)&v31, (uint64_t)v34, v35) != 0;
      v26 = v34;
      if (v34 == v36)
        goto LABEL_24;
    }
    else
    {
      v25 = 0;
      v26 = v34;
      if (v34 == v36)
      {
LABEL_24:
        if (!v25)
        {
          v20 = 0;
          v27 = v31;
          if (v31 == v33)
            return v20;
          goto LABEL_28;
        }
        if ((_DWORD)v32)
        {
          mlir::OperationFolder::notifyRemoval(this, a2);
          mlir::ValueRange::ValueRange(v30, (uint64_t)v31, v32);
          mlir::RewriterBase::replaceOp(&this[13], (uint64_t)a2, v30[0], v30[1]);
        }
        else
        {
          if (a3)
            *a3 = 1;
          v29 = (uint64_t)this[15];
          if (v29 && mlir::RewriterBase::Listener::classof(v29))
          {
            (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v29 + 32))(v29, a2);
            v20 = 1;
            v27 = v31;
            if (v31 == v33)
              return v20;
            goto LABEL_28;
          }
        }
        v20 = 1;
        v27 = v31;
        if (v31 == v33)
          return v20;
LABEL_28:
        free(v27);
        return v20;
      }
    }
    free(v26);
    goto LABEL_24;
  }
LABEL_5:
  v11 = *((_QWORD *)a2 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v11 + 40));
  if (v12 != a2)
  {
    if (*(mlir::Operation **)(*((_QWORD *)a2 + 2) + 40) == a2)
    {
      v13 = 0;
      v14 = this[5].i32[0];
      if (!v14)
      {
LABEL_15:
        ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v11 + 40));
        mlir::Operation::moveBefore(a2, v22);
        return 0;
      }
    }
    else
    {
      ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)a2);
      v14 = this[5].i32[0];
      if (!v14)
        goto LABEL_15;
    }
    v15 = this[3];
    v16 = v14 - 1;
    v17 = ((v13 >> 4) ^ (v13 >> 9)) & v16;
    v18 = *(_QWORD *)(*(_QWORD *)&v15 + 40 * v17);
    if (v18 != v13)
    {
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = 0;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        v18 = *(_QWORD *)(*(_QWORD *)&v15 + 40 * v17);
        if (v18 == v13)
          return v20;
      }
      goto LABEL_15;
    }
  }
  return 0;
}

void mlir::OperationFolder::notifyRemoval(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t v4;
  unsigned __int32 v5;
  unsigned int v6;
  uint64_t v7;
  mlir::Operation *v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t InterfaceFor;
  __int32 v15;
  __int32 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  BOOL v22;
  int v23;
  char *v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64x2_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x24BDAC8D0];
  v4 = this[3];
  v5 = this[5].u32[0];
  if (v5)
  {
    v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = *(_QWORD *)&v4 + 40 * v6;
    v8 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (mlir::Operation *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v7 = *(_QWORD *)&v4 + 40 * v6;
      v8 = *(mlir::Operation **)v7;
      if (*(mlir::Operation **)v7 == a2)
        goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)&v4 + 40 * v5;
LABEL_8:
  if (v7 == *(_QWORD *)&v4 + 40 * v5)
    return;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
  {
    v32 = v34;
    v33 = 0x100000000;
    mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)&v32);
    v11 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    if (v32 != v34)
      free(v32);
  }
  else
  {
    v11 = 0;
  }
  for (i = (_QWORD *)mlir::Block::getParent(*((mlir::Block **)a2 + 2));
        i;
        i = (_QWORD *)mlir::Block::getParent(*(mlir::Block **)(v13 + 16)))
  {
    v13 = i[2];
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v13 + 48)) & 1) != 0)
      break;
    if (!*(_QWORD *)(v13 + 16))
      break;
    InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor((mlir::detail::DialectInterfaceCollectionBase *)&this[6], (mlir::Operation *)v13);
    if (InterfaceFor)
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)InterfaceFor + 24))(InterfaceFor, i) & 1) != 0)
        break;
    }
  }
  v32 = i;
  v15 = this[2].i32[0];
  if (!v15)
  {
    v24 = 0;
LABEL_32:
    v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>((uint64_t)this, v24, (uint64_t *)&v32);
    goto LABEL_33;
  }
  v16 = v15 - 1;
  v17 = ((i >> 4) ^ (i >> 9)) & v16;
  v18 = (char *)(*(_QWORD *)this + 32 * v17);
  v19 = *(_QWORD *)v18;
  if (i != *(_QWORD **)v18)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (char *)(*(_QWORD *)this + 32 * v17);
      v19 = *(_QWORD *)v18;
      if (i == *(_QWORD **)v18)
        goto LABEL_33;
    }
    if (v20)
      v24 = v20;
    else
      v24 = v18;
    goto LABEL_32;
  }
LABEL_33:
  v25 = *(void ***)(v7 + 8);
  v26 = *(unsigned int *)(v7 + 16);
  if ((_DWORD)v26)
  {
    v27 = *((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
    v28 = 8 * v26;
    v30 = vdupq_n_s64(0xFFFFFFFFFFFFE000);
    do
    {
      v32 = *v25;
      v33 = v11;
      v34[0] = v27;
      v31 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t *)v18 + 1, &v32, &v31))
      {
        v29 = v31;
        *v31 = -8192;
        *(int64x2_t *)(v29 + 1) = v30;
        *((int32x2_t *)v18 + 2) = vadd_s32(*(int32x2_t *)(v18 + 16), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v25;
      v28 -= 8;
    }
    while (v28);
    v25 = *(void ***)(v7 + 8);
  }
  if (v25 != (void **)(v7 + 24))
    free(v25);
  *(_QWORD *)v7 = -8192;
  this[4] = vadd_s32(this[4], (int32x2_t)0x1FFFFFFFFLL);
}

uint64_t mlir::OperationFolder::insertKnownConstant(int32x2_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  ZinIrHalH13g **v6;
  int32x2_t v7;
  uint64_t v8;
  __int32 v9;
  __int32 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  mlir::Operation *v23;
  int v24;
  unsigned int v25;
  unint64_t i;
  uint64_t v27;
  uint64_t InterfaceFor;
  __int32 v29;
  __int32 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  BOOL v36;
  int v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t Values;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  mlir::Operation *v46;
  int32x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  ZinIrHalH13g **v52;
  mlir::Operation *v53;
  mlir::Operation *v54;
  __int32 v55;
  int32x2_t v56;
  __int32 v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  mlir::Operation *v65;
  uint64_t v66;
  __int32 v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int32x2_t v73;
  __int32 v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  mlir::Operation *v83;
  uint64_t v84[2];
  unint64_t v85[2];
  void *v86;
  uint64_t v87;
  _QWORD v88[3];

  v3 = a3;
  v88[2] = *MEMORY[0x24BDAC8D0];
  v83 = (mlir::Operation *)a2;
  v6 = *(ZinIrHalH13g ***)(a2 + 16);
  v8 = (uint64_t)&a1[3];
  v7 = a1[3];
  v9 = a1[5].i32[0];
  if (v9)
  {
    v10 = v9 - 1;
    v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    v12 = *(_QWORD *)(*(_QWORD *)&v7 + 40 * v11);
    if (v12 == a2)
    {
LABEL_3:
      ZinIrHalH13g::~ZinIrHalH13g(v6[5]);
      if (v13 != a2)
      {
        if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == a2)
        {
          v14 = 0;
          v15 = a1[5].i32[0];
          if (!v15)
          {
LABEL_13:
            ZinIrHalH13g::~ZinIrHalH13g(v6[5]);
            mlir::Operation::moveBefore((mlir::Operation *)a2, v23);
            return 1;
          }
        }
        else
        {
          ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)a2);
          v15 = a1[5].i32[0];
          if (!v15)
            goto LABEL_13;
        }
        v16 = a1[3];
        v17 = v15 - 1;
        v18 = ((v14 >> 4) ^ (v14 >> 9)) & (v15 - 1);
        v19 = *(_QWORD *)(*(_QWORD *)&v16 + 40 * v18);
        if (v19 != v14)
        {
          v20 = 1;
          while (v19 != -4096)
          {
            v21 = v18 + v20++;
            v18 = v21 & v17;
            v19 = *(_QWORD *)(*(_QWORD *)&v16 + 40 * (v21 & v17));
            v22 = 1;
            if (v19 == v14)
              return v22;
          }
          goto LABEL_13;
        }
      }
      return 1;
    }
    v24 = 1;
    while (v12 != -4096)
    {
      v25 = v11 + v24++;
      v11 = v25 & v10;
      v12 = *(_QWORD *)(*(_QWORD *)&v7 + 40 * v11);
      if (v12 == a2)
        goto LABEL_3;
    }
  }
  if (!a3 && mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(a2 + 48)))
  {
    v86 = v88;
    v87 = 0x100000000;
    mlir::Operation::fold(a2, 0, 0, (uint64_t)&v86);
    if ((*(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8) != 0)
      v3 = *(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8;
    if (v86 != v88)
      free(v86);
  }
  v82 = 0;
  for (i = mlir::Block::getParent((mlir::Block *)v6); i; i = mlir::Block::getParent(*(mlir::Block **)(v27 + 16)))
  {
    v27 = *(_QWORD *)(i + 16);
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v27 + 48)) & 1) != 0)
      break;
    if (!*(_QWORD *)(v27 + 16))
      break;
    InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor((mlir::detail::DialectInterfaceCollectionBase *)&a1[6], (mlir::Operation *)v27);
    if (InterfaceFor)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)InterfaceFor + 24))(InterfaceFor, i) & 1) != 0)
        break;
    }
  }
  v82 = i;
  v29 = a1[2].i32[0];
  if (v29)
  {
    v30 = v29 - 1;
    v31 = ((i >> 4) ^ (i >> 9)) & v30;
    v32 = (char *)(*(_QWORD *)a1 + 32 * v31);
    v33 = *(_QWORD *)v32;
    if (i == *(_QWORD *)v32)
      goto LABEL_44;
    v34 = 0;
    v35 = 1;
    while (v33 != -4096)
    {
      if (v34)
        v36 = 0;
      else
        v36 = v33 == -8192;
      if (v36)
        v34 = v32;
      v37 = v31 + v35++;
      v31 = v37 & v30;
      v32 = (char *)(*(_QWORD *)a1 + 32 * v31);
      v33 = *(_QWORD *)v32;
      if (i == *(_QWORD *)v32)
        goto LABEL_44;
    }
    if (v34)
      v38 = v34;
    else
      v38 = v32;
  }
  else
  {
    v38 = 0;
  }
  v32 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>((uint64_t)a1, v38, (uint64_t *)&v82);
LABEL_44:
  v39 = (uint64_t *)(v32 + 8);
  v40 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v40 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v86 = *(void **)(v40 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v86);
  }
  else
  {
    Values = *(_QWORD *)(v40 + 24);
  }
  v42 = *(unsigned int *)(a2 + 36);
  v43 = a2 - 16;
  if (!(_DWORD)v42)
    v43 = 0;
  v84[0] = v43;
  v84[1] = v42;
  mlir::OperandRange::getTypes(v84, (uint64_t *)&v86);
  v44 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v86, v87) + 8) & 0xFFFFFFFFFFFFFFF8;
  v79 = Values;
  v80 = v3;
  v81 = v44;
  v86 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(v39, &v79, &v86) & 1) == 0)
  {
    v50 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t)v39, (uint64_t)&v79, &v79, v86);
    *v50 = v79;
    v50[1] = v80;
    v50[2] = v81;
    v50[3] = 0;
    v45 = (char *)(v50 + 3);
LABEL_56:
    v51 = *(_QWORD *)(v82 + 8);
    if (v51)
      v52 = (ZinIrHalH13g **)(v51 - 8);
    else
      v52 = 0;
    if (v6 != v52)
    {
      v53 = v83;
LABEL_61:
      ZinIrHalH13g::~ZinIrHalH13g(v52[5]);
      mlir::Operation::moveBefore(v53, v54);
      goto LABEL_62;
    }
    ZinIrHalH13g::~ZinIrHalH13g(v6[5]);
    v53 = v83;
    if (v65 == v83)
    {
      v53 = v65;
    }
    else
    {
      if (*(mlir::Operation **)(*((_QWORD *)v83 + 2) + 40) == v83)
      {
        v66 = 0;
        v67 = a1[5].i32[0];
        if (!v67)
          goto LABEL_61;
      }
      else
      {
        ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)v83);
        v67 = a1[5].i32[0];
        if (!v67)
          goto LABEL_61;
      }
      v73 = a1[3];
      v74 = v67 - 1;
      v75 = ((v66 >> 4) ^ (v66 >> 9)) & v74;
      v76 = *(_QWORD *)(*(_QWORD *)&v73 + 40 * v75);
      if (v76 != v66)
      {
        v77 = 1;
        while (v76 != -4096)
        {
          v78 = v75 + v77++;
          v75 = v78 & v74;
          v76 = *(_QWORD *)(*(_QWORD *)&v73 + 40 * v75);
          if (v76 == v66)
            goto LABEL_62;
        }
        goto LABEL_61;
      }
    }
LABEL_62:
    *(_QWORD *)v45 = v53;
    v55 = a1[5].i32[0];
    if (v55)
    {
      v56 = a1[3];
      v57 = v55 - 1;
      v58 = ((v53 >> 4) ^ (v53 >> 9)) & v57;
      v59 = (uint64_t *)(*(_QWORD *)&v56 + 40 * v58);
      v60 = *v59;
      if (v53 == (mlir::Operation *)*v59)
        goto LABEL_79;
      v61 = 0;
      v62 = 1;
      while (v60 != -4096)
      {
        if (v61)
          v63 = 0;
        else
          v63 = v60 == -8192;
        if (v63)
          v61 = v59;
        v64 = v58 + v62++;
        v58 = v64 & v57;
        v59 = (uint64_t *)(*(_QWORD *)&v56 + 40 * v58);
        v60 = *v59;
        if (v53 == (mlir::Operation *)*v59)
          goto LABEL_79;
      }
      if (v61)
        v68 = v61;
      else
        v68 = v59;
    }
    else
    {
      v68 = 0;
    }
    v59 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v8, v68, (uint64_t *)&v83);
    v53 = v83;
LABEL_79:
    v69 = *((_QWORD *)v53 + 6);
    if (*(_UNKNOWN **)(v69 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v86 = *(void **)(v69 + 8);
      v70 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v86);
      v71 = *((unsigned int *)v59 + 4);
      if (v71 < *((_DWORD *)v59 + 5))
        goto LABEL_81;
    }
    else
    {
      v70 = *(_QWORD *)(v69 + 24);
      v71 = *((unsigned int *)v59 + 4);
      if (v71 < *((_DWORD *)v59 + 5))
      {
LABEL_81:
        *(_QWORD *)(v59[1] + 8 * v71) = v70;
        ++*((_DWORD *)v59 + 4);
        return 1;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v59 + 1), v59 + 3, v71 + 1, 8);
    LODWORD(v71) = *((_DWORD *)v59 + 4);
    goto LABEL_81;
  }
  v45 = (char *)v86 + 24;
  if (!*((_QWORD *)v86 + 3))
    goto LABEL_56;
  v46 = v83;
  mlir::OperationFolder::notifyRemoval(a1, v83);
  v47 = a1 + 13;
  v48 = *(unsigned int *)(*(_QWORD *)v45 + 36);
  if ((_DWORD)v48)
    v49 = *(_QWORD *)v45 - 16;
  else
    v49 = 0;
  mlir::ValueRange::ValueRange(v85, v49, v48);
  mlir::RewriterBase::replaceOp(v47, (uint64_t)v46, v85[0], v85[1]);
  return 0;
}

mlir::Operation *mlir::OperationFolder::tryGetOrCreateConstant(int32x2_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  _QWORD *v13;
  mlir::Operation *result;
  mlir::Operation **v15;
  uint64_t v16;
  uint64_t Values;
  mlir::Operation *v18;
  int32x2_t v19;
  uint64_t v20;
  int32x2_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  int32x2_t v31;
  uint64_t v32;
  int32x2_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  int32x2_t v43;
  uint64_t v44;
  int32x2_t v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  mlir::Operation *v58;
  char v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  mlir::Operation *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  mlir::Operation *v73;

  v70 = a3;
  v71 = a4;
  v72 = a5;
  *(_QWORD *)&v65 = 0;
  v12 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(a2, &v70, &v65);
  v13 = (_QWORD *)v65;
  if ((v12 & 1) != 0)
  {
    result = *(mlir::Operation **)(v65 + 24);
    if (result)
      return result;
  }
  else
  {
    v13 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t)a2, (uint64_t)&v70, &v70, (_QWORD *)v65);
    *v13 = v70;
    v13[1] = v71;
    v13[2] = v72;
    v13[3] = 0;
  }
  result = (mlir::Operation *)(*(uint64_t (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a1 + 14, a4, a5, a6);
  v13[3] = result;
  v15 = (mlir::Operation **)(v13 + 3);
  if (result)
  {
    v16 = *((_QWORD *)result + 6);
    if (*(_UNKNOWN **)(v16 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      *(_QWORD *)&v65 = *(_QWORD *)(v16 + 8);
      Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v65);
      if (Values != a3)
        goto LABEL_8;
    }
    else
    {
      Values = *(_QWORD *)(v16 + 24);
      if (Values != a3)
      {
LABEL_8:
        *(_QWORD *)&v68 = Values;
        *((_QWORD *)&v68 + 1) = a4;
        v69 = a5;
        *(_QWORD *)&v65 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(a2, &v68, &v65) & 1) != 0)
        {
          v18 = *(mlir::Operation **)(v65 + 24);
          v73 = v18;
          if (v18)
          {
            mlir::OperationFolder::notifyRemoval(a1, *v15);
            mlir::RewriterBase::eraseOp((mlir::RewriterBase *)&a1[13], *v15);
            v21 = a1[3];
            v20 = (uint64_t)&a1[3];
            v19 = v21;
            v22 = *(_DWORD *)(v20 + 16);
            if (v22)
            {
              v23 = v22 - 1;
              v24 = ((v18 >> 4) ^ (v18 >> 9)) & v23;
              v25 = (uint64_t *)(*(_QWORD *)&v19 + 40 * v24);
              v26 = *v25;
              if (v18 == (mlir::Operation *)*v25)
              {
LABEL_59:
                v64 = *((unsigned int *)v25 + 4);
                if (v64 >= *((_DWORD *)v25 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v25 + 1), v25 + 3, v64 + 1, 8);
                  LODWORD(v64) = *((_DWORD *)v25 + 4);
                }
                *(_QWORD *)(v25[1] + 8 * v64) = a3;
                ++*((_DWORD *)v25 + 4);
                result = v73;
                *v15 = v73;
                return result;
              }
              v27 = 0;
              v28 = 1;
              while (v26 != -4096)
              {
                if (v27)
                  v29 = 0;
                else
                  v29 = v26 == -8192;
                if (v29)
                  v27 = v25;
                v30 = v24 + v28++;
                v24 = v30 & v23;
                v25 = (uint64_t *)(*(_QWORD *)&v19 + 40 * v24);
                v26 = *v25;
                if (v18 == (mlir::Operation *)*v25)
                  goto LABEL_59;
              }
              if (v27)
                v63 = v27;
              else
                v63 = v25;
            }
            else
            {
              v63 = 0;
            }
            v25 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v20, v63, (uint64_t *)&v73);
            goto LABEL_59;
          }
        }
        v33 = a1[3];
        v32 = (uint64_t)&a1[3];
        v31 = v33;
        v34 = *(_DWORD *)(v32 + 16);
        if (v34)
        {
          v35 = v34 - 1;
          v36 = ((*v15 >> 4) ^ (*v15 >> 9)) & v35;
          v37 = (uint64_t *)(*(_QWORD *)&v31 + 40 * v36);
          v38 = *v37;
          if (*v15 == (mlir::Operation *)*v37)
          {
LABEL_46:
            *((_DWORD *)v37 + 4) = 0;
            if (*((_DWORD *)v37 + 5) > 1u)
            {
              v56 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 1), v37 + 3, 2uLL, 8);
              v56 = *((unsigned int *)v37 + 4);
            }
            v57 = (_QWORD *)(v37[1] + 8 * v56);
            *v57 = a3;
            v57[1] = Values;
            *((_DWORD *)v37 + 4) += 2;
            v65 = v68;
            v58 = *v15;
            v66 = v69;
            v67 = v58;
            v73 = 0;
            v59 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(a2, &v65, &v73);
            v60 = v73;
            if ((v59 & 1) == 0)
            {
              v60 = llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t)a2, (uint64_t)&v65, &v65, v73);
              *(_OWORD *)v60 = v65;
              v60[2] = v66;
              v60[3] = v67;
            }
            return (mlir::Operation *)v60[3];
          }
          v39 = 0;
          v40 = 1;
          while (v38 != -4096)
          {
            if (v39)
              v41 = 0;
            else
              v41 = v38 == -8192;
            if (v41)
              v39 = v37;
            v42 = v36 + v40++;
            v36 = v42 & v35;
            v37 = (uint64_t *)(*(_QWORD *)&v31 + 40 * v36);
            v38 = *v37;
            if (*v15 == (mlir::Operation *)*v37)
              goto LABEL_46;
          }
          if (v39)
            v55 = v39;
          else
            v55 = v37;
        }
        else
        {
          v55 = 0;
        }
        v37 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v32, v55, (uint64_t *)v15);
        goto LABEL_46;
      }
    }
    v45 = a1[3];
    v44 = (uint64_t)&a1[3];
    v43 = v45;
    v46 = *(_DWORD *)(v44 + 16);
    if (v46)
    {
      v47 = v46 - 1;
      v48 = ((*v15 >> 4) ^ (*v15 >> 9)) & v47;
      v49 = (uint64_t *)(*(_QWORD *)&v43 + 40 * v48);
      v50 = *v49;
      if (*v15 == (mlir::Operation *)*v49)
      {
LABEL_54:
        v62 = *((unsigned int *)v49 + 4);
        if (v62 >= *((_DWORD *)v49 + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v49 + 1), v49 + 3, v62 + 1, 8);
          LODWORD(v62) = *((_DWORD *)v49 + 4);
        }
        *(_QWORD *)(v49[1] + 8 * v62) = a3;
        ++*((_DWORD *)v49 + 4);
        return *v15;
      }
      v51 = 0;
      v52 = 1;
      while (v50 != -4096)
      {
        if (v51)
          v53 = 0;
        else
          v53 = v50 == -8192;
        if (v53)
          v51 = v49;
        v54 = v48 + v52++;
        v48 = v54 & v47;
        v49 = (uint64_t *)(*(_QWORD *)&v43 + 40 * v48);
        v50 = *v49;
        if (*v15 == (mlir::Operation *)*v49)
          goto LABEL_54;
      }
      if (v51)
        v61 = v51;
      else
        v61 = v49;
    }
    else
    {
      v61 = 0;
    }
    v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(v44, v61, (uint64_t *)v15);
    goto LABEL_54;
  }
  return result;
}

uint64_t mlir::OperationFolder::processFoldResults(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t i;
  uint64_t v9;
  uint64_t InterfaceFor;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  BOOL v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  mlir::Operation *Constant;
  mlir::Operation *v36;
  uint64_t v37;
  mlir::Operation *v38;
  mlir::Operation *v39;
  unint64_t v40;
  uint64_t result;
  ZinIrHalH13g *v42;
  ZinIrHalH13g *v43;
  ZinIrHalH13g *v44;
  mlir::Operation *v45;
  mlir::Operation *v46;
  void *v47;
  int32x2_t v48;
  uint64_t Values;
  unint64_t v51;
  uint64_t v52;

  if (!a5)
    return 1;
  for (i = mlir::Block::getParent(*(mlir::Block **)(a2 + 16)); i; i = mlir::Block::getParent(*(mlir::Block **)(v9 + 16)))
  {
    v9 = *(_QWORD *)(i + 16);
    if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsIsolatedFromAbove>((void ***)(v9 + 48)) & 1) != 0)
      break;
    if (!*(_QWORD *)(v9 + 16))
      break;
    InterfaceFor = mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor((mlir::detail::DialectInterfaceCollectionBase *)&a1[6], (mlir::Operation *)v9);
    if (InterfaceFor)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)InterfaceFor + 24))(InterfaceFor, i) & 1) != 0)
        break;
    }
  }
  v51 = i;
  v11 = *(_QWORD *)(i + 8);
  if (v11)
    v12 = (int32x2_t)(v11 - 8);
  else
    v12 = 0;
  v13 = *(int32x2_t *)(*(_QWORD *)&v12 + 40);
  a1[16] = v12;
  a1[17] = v13;
  v14 = a1[2].i32[0];
  if (!v14)
  {
    v23 = 0;
LABEL_24:
    v17 = llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>((uint64_t)a1, v23, (uint64_t *)&v51);
    goto LABEL_25;
  }
  v15 = v14 - 1;
  v16 = v15 & ((i >> 4) ^ (i >> 9));
  v17 = (char *)(*(_QWORD *)a1 + 32 * v16);
  v18 = *(_QWORD *)v17;
  if (i != *(_QWORD *)v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != -4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v18 == -8192;
      if (v21)
        v19 = v17;
      v22 = v16 + v20++;
      v16 = v22 & v15;
      v17 = (char *)(*(_QWORD *)a1 + 32 * v16);
      v18 = *(_QWORD *)v17;
      if (i == *(_QWORD *)v17)
        goto LABEL_25;
    }
    if (v19)
      v23 = v19;
    else
      v23 = v17;
    goto LABEL_24;
  }
LABEL_25:
  v24 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v24 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v52 = *(_QWORD *)(v24 + 8);
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v52);
    v25 = *(unsigned int *)(a2 + 36);
    if (!(_DWORD)v25)
      return 1;
  }
  else
  {
    Values = *(_QWORD *)(v24 + 24);
    v25 = *(unsigned int *)(a2 + 36);
    if (!(_DWORD)v25)
      return 1;
  }
  v26 = 0;
  v48 = v12;
  v27 = (uint64_t *)(v17 + 8);
  v47 = (void *)(a3 + 16);
  v28 = a2 - 16;
  for (j = a2 + 24; ; j -= 24)
  {
    v30 = *(_QWORD *)(a4 + 8 * v26);
    v31 = v30 & 0xFFFFFFFFFFFFFFF8;
    if ((v30 & 4) == 0 || !v31)
      break;
    if (v26 >= 6)
      v32 = j;
    else
      v32 = v28;
    if ((*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_54;
    v33 = *(unsigned int *)(a3 + 8);
    if (v33 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v47, v33 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v31;
LABEL_50:
      LODWORD(v33) = *(_DWORD *)(a3 + 8);
      goto LABEL_31;
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v33) = v31;
LABEL_31:
    *(_DWORD *)(a3 + 8) = v33 + 1;
    ++v26;
    v28 -= 16;
    if (v25 == v26)
      return 1;
  }
  if (v26 >= 6)
    v34 = j;
  else
    v34 = v28;
  Constant = mlir::OperationFolder::tryGetOrCreateConstant(a1, v27, Values, v31, *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a2 + 24));
  if (Constant)
  {
    v36 = Constant;
    v37 = *(_QWORD *)(a2 + 16);
    if (v37 == *((_QWORD *)Constant + 2))
    {
      ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v37 + 40));
      if (v38 != v36)
      {
        ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v37 + 40));
        mlir::Operation::moveBefore(v36, v39);
      }
    }
    v40 = *(unsigned int *)(a3 + 8);
    if (v40 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v47, v40 + 1, 8);
      v40 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v40) = (char *)v36 - 16;
    goto LABEL_50;
  }
  v42 = *(ZinIrHalH13g **)(*(_QWORD *)&v48 + 40);
  v43 = (ZinIrHalH13g *)a1[17];
  if (v42 != v43)
  {
    do
    {
      v44 = (ZinIrHalH13g *)*((_QWORD *)v42 + 1);
      ZinIrHalH13g::~ZinIrHalH13g(v42);
      v46 = v45;
      mlir::OperationFolder::notifyRemoval(a1, v45);
      mlir::RewriterBase::eraseOp((mlir::RewriterBase *)&a1[13], v46);
      v42 = v44;
    }
    while (v44 != v43);
  }
LABEL_54:
  result = 0;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::InsertIntoBucket<mlir::Region * const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *buffer;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  BOOL v28;
  int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v10 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *(_QWORD *)a2;
      goto LABEL_4;
    }
    v10 = *(_DWORD *)(a1 + 16);
  }
  v11 = *(uint64_t **)a1;
  v12 = (v10 - 1) | ((unint64_t)(v10 - 1) >> 1);
  v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
  v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
  if ((v14 + 1) > 0x40)
    v15 = v14 + 1;
  else
    v15 = 64;
  *(_DWORD *)(a1 + 16) = v15;
  buffer = llvm::allocate_buffer(32 * v15, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v11)
  {
    v17 = (char *)(32 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::moveFromOldBuckets(a1, v11, (uint64_t *)&v17[(_QWORD)v11]);
    llvm::deallocate_buffer((llvm *)v11, v17);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  v19 = buffer;
  if (((v18 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v20 = ((v18 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
  v19 = &buffer[4 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = buffer + 4;
  v22 = v20 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v21 - 4) = -4096;
    *v21 = -4096;
    v21 += 8;
    v22 -= 2;
  }
  while (v22);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 4;
    }
    while (v19 != &buffer[4 * v18]);
  }
  v7 = *a3;
  v23 = v18 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[4 * v24];
  v25 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = (char *)&buffer[4 * v24];
      v25 = *(_QWORD *)a2;
      if (v7 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  v8 = *a3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = v8;
  *((_DWORD *)a2 + 6) = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>,mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;

  v3 = a2;
  *(_QWORD *)(result + 8) = 0;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)result;
    v6 = (v4 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0xFFFFFFFFFFFFFFELL;
      v9 = &v5[4 * v8];
      v10 = v5 + 4;
      v11 = v8;
      do
      {
        *(v10 - 4) = -4096;
        *v10 = -4096;
        v10 += 8;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        goto LABEL_10;
    }
    else
    {
      v9 = *(_QWORD **)result;
    }
    v12 = &v5[4 * v4];
    do
    {
      *v9 = -4096;
      v9 += 4;
    }
    while (v9 != v12);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v16 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = *(_DWORD *)(result + 16) - 1;
        v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
        v13 = *(_QWORD *)result + 32 * v18;
        v19 = *(_QWORD *)v13;
        if (v16 != *(_QWORD *)v13)
        {
          v20 = 0;
          v21 = 1;
          while (v19 != -4096)
          {
            if (v20)
              v22 = 0;
            else
              v22 = v19 == -8192;
            if (v22)
              v20 = v13;
            v23 = v18 + v21++;
            v18 = v23 & v17;
            v13 = *(_QWORD *)result + 32 * v18;
            v19 = *(_QWORD *)v13;
            if (v16 == *(_QWORD *)v13)
              goto LABEL_14;
          }
          if (v20)
            v13 = v20;
        }
LABEL_14:
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)v13 = v16;
        *(_DWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = v3[1];
        v3[1] = 0;
        *(_DWORD *)(v13 + 16) = *((_DWORD *)v3 + 4);
        *((_DWORD *)v3 + 4) = 0;
        v14 = *(_DWORD *)(v13 + 20);
        *(_DWORD *)(v13 + 20) = *((_DWORD *)v3 + 5);
        *((_DWORD *)v3 + 5) = v14;
        v15 = *(unsigned int *)(v13 + 24);
        *(_DWORD *)(v13 + 24) = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = v15;
        ++*(_DWORD *)(result + 8);
        llvm::deallocate_buffer(0, (void *)(32 * v15));
      }
      v3 += 4;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v25;
  unsigned int v27;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v4 = 0;
  v5 = *a1;
  v6 = a2[1];
  v7 = a2[2];
  v8 = ((unint64_t)((v7 >> 4) ^ (v7 >> 9)) << 32) - 1;
  v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  v11 = ((v10 + ~(v10 << 27)) >> 31) ^ ((_DWORD)v10 + ~((_DWORD)v10 << 27));
  v12 = (v11 | ((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32)) + ~(v11 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = ((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27));
  v16 = (v15 | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32)) + ~(v15 << 32);
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v3 - 1;
  v20 = v19 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v21 = 1;
  v22 = (_QWORD *)(*a1 + 32 * v20);
  v23 = *v22;
  if (*a2 != *v22)
    goto LABEL_7;
LABEL_3:
  if (v6 == v22[1] && v7 == v22[2])
  {
    result = 1;
    *a3 = v22;
    return result;
  }
  while (1)
  {
LABEL_7:
    if (v23 != -4096)
    {
      v25 = v23 == -8192 && v22[1] == -8192 && v22[2] == -8192;
      goto LABEL_19;
    }
    v25 = 0;
    if (v22[1] == -4096 && v22[2] == -4096)
      break;
LABEL_19:
    if (v25 && v4 == 0)
      v4 = v22;
    v27 = v20 + v21++;
    v20 = v27 & v19;
    v22 = (_QWORD *)(v5 + 32 * v20);
    v23 = *v22;
    if (*a2 == *v22)
      goto LABEL_3;
  }
  result = 0;
  if (v4)
    v22 = v4;
  *a3 = v22;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::InsertIntoBucketImpl<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 != -4096)
      goto LABEL_4;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
  {
LABEL_4:
    --*(_DWORD *)(a1 + 12);
    return a4;
  }
LABEL_8:
  if (a4[1] != -4096 || a4[2] != -4096)
    goto LABEL_4;
  return a4;
}

char *llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t v14;
  uint64_t v15;
  char *v16;
  int64x2_t v17;
  void *v18;
  uint64_t v19;
  llvm *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  char *v27;
  int64x2_t v28;
  _QWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[32 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = (int64x2_t *)(result + 40);
      v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v15 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v13[-3].i64[1] = -4096;
        v13[-1].i64[1] = -4096;
        v13[-2] = v14;
        *v13 = v14;
        v13 += 4;
        v15 -= 2;
      }
      while (v15);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v16 = &result[32 * v11];
        v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *(_QWORD *)v10 = -4096;
          *(int64x2_t *)(v10 + 8) = v17;
          v10 += 32;
        }
        while (v10 != v16);
      }
    }
    v18 = (void *)(32 * v3);
    if (!(_DWORD)v3)
LABEL_24:
      llvm::deallocate_buffer(v4, v18);
    v19 = 32 * v3;
    v20 = v4;
    while (1)
    {
      if (*(_QWORD *)v20 == -8192)
      {
        if (*((_QWORD *)v20 + 1) == -8192 && *((_QWORD *)v20 + 2) == -8192)
          goto LABEL_15;
      }
      else if (*(_QWORD *)v20 == -4096 && *((_QWORD *)v20 + 1) == -4096 && *((_QWORD *)v20 + 2) == -4096)
      {
        goto LABEL_15;
      }
      v29 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>,std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *,llvm::DenseMapInfo<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,void>,llvm::detail::DenseMapPair<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>,mlir::Operation *>>::LookupBucketFor<std::tuple<mlir::Dialect *,mlir::Attribute,mlir::Type>>((uint64_t *)a1, v20, &v29);
      v21 = v29;
      *v29 = *(_QWORD *)v20;
      v21[1] = *((_QWORD *)v20 + 1);
      v21[2] = *((_QWORD *)v20 + 2);
      v21[3] = *((_QWORD *)v20 + 3);
      ++*(_DWORD *)(a1 + 8);
LABEL_15:
      v20 = (llvm *)((char *)v20 + 32);
      v19 -= 32;
      if (!v19)
        goto LABEL_24;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v22)
  {
    if (((v22 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_30;
    v23 = ((v22 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[32 * (v23 & 0xFFFFFFFFFFFFFFELL)];
    v24 = (int64x2_t *)(result + 40);
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v23 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v24[-3].i64[1] = -4096;
      v24[-1].i64[1] = -4096;
      v24[-2] = v25;
      *v24 = v25;
      v24 += 4;
      v26 -= 2;
    }
    while (v26);
    if (v23 != (v23 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_30:
      v27 = &result[32 * v22];
      v28 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(_QWORD *)v10 = -4096;
        *(int64x2_t *)(v10 + 8) = v28;
        v10 += 32;
      }
      while (v10 != v27);
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>,mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,llvm::SmallVector<mlir::Dialect *,2u>>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(40 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    v16 = 5 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>,mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,llvm::SmallVector<mlir::RewritePattern const*,2u>>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  v18 = 40 * v17 - 40;
  v19 = buffer;
  if (v18 < 0x28)
    goto LABEL_34;
  v20 = v18 / 0x28 + 1;
  v19 = &buffer[5 * (v20 & 0xFFFFFFFFFFFFFFELL)];
  v21 = v20 & 0xFFFFFFFFFFFFFFELL;
  v22 = buffer;
  do
  {
    *v22 = -4096;
    v22[5] = -4096;
    v22 += 10;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v19 = -4096;
      v19 += 5;
    }
    while (v19 != &buffer[5 * v17]);
  }
  v7 = *a3;
  v23 = v17 - 1;
  v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = &buffer[5 * v24];
  v25 = *a2;
  if (*a3 != *a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = a2;
      v29 = v24 + v27++;
      v24 = v29 & v23;
      a2 = &buffer[5 * v24];
      v25 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v26)
      a2 = v26;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x200000000;
  return a2;
}

void mlir::applyPatternsAndFoldGreedily(mlir::Region **this, const mlir::FrozenRewritePatternSet *a2, __int128 *a3, BOOL *a4)
{
  __int128 v8;
  __int128 v9;
  mlir::Region *i;
  _QWORD *v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  mlir::ForwardIterator *v15;
  uint64_t *v16;
  uint64_t v17;
  mlir::PatternApplicator *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm *v28;
  _QWORD *v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm *v35;
  _QWORD *v36;
  uint64_t v37;
  llvm *v38;
  llvm *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  ZinIrHalH13g *v43;
  ZinIrHalH13g *v44;
  ZinIrHalH13g *v45;
  mlir::ForwardIterator *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t j;
  uint64_t v77;
  ZinIrHalH13g *v78;
  ZinIrHalH13g *v79;
  ZinIrHalH13g *v80;
  mlir::ForwardIterator *v81;
  mlir::Operation *v82;
  _anonymous_namespace_::GreedyPatternRewriteDriver *v83;
  char v84;
  uint64_t **v85;
  uint64_t (***v86)();
  _anonymous_namespace_::GreedyPatternRewriteDriver *v87;
  char v88;
  uint64_t (***v89)();
  uint64_t (**v90)();
  mlir::MLIRContext *Context;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  int v96;
  char *v97;
  char *v98;
  char *v99;
  llvm *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _QWORD v109[12];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD v120[3];

  v120[1] = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a3 + 3))
    *((_QWORD *)a3 + 3) = this;
  v92 = 0;
  v93 = 0;
  v96 = 1;
  v90 = off_24C02AAA8;
  Context = (mlir::MLIRContext *)mlir::Region::getContext((mlir::Region *)this);
  v94 = 0;
  v95 = &unk_24C02AB60;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v97 = (char *)operator new(0x200uLL);
  v98 = v97;
  v103 = 0;
  v104 = 0;
  v99 = v97 + 512;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::DialectInterfaceCollection(v109, Context);
  v8 = a3[2];
  v9 = *a3;
  v111 = a3[1];
  v112 = v8;
  v109[10] = 0;
  v109[11] = 0;
  v109[9] = &v95;
  v109[7] = off_24C02E6B8;
  v109[8] = Context;
  v110 = v9;
  v114 = -4096;
  v115 = -4096;
  v116 = -4096;
  v117 = -4096;
  v113 = 1;
  v85 = (uint64_t **)mlir::PatternApplicator::PatternApplicator((mlir::PatternApplicator *)&v118, a2);
  mlir::PatternApplicator::applyCostModel(v85, llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<mlir::PatternApplicator::applyDefaultCostModel(void)::{lambda(mlir::Pattern const&)#1}>, (uint64_t)&v86);
  v92 = &v95;
  v90 = off_24C02ABB8;
  v95 = &unk_24C02AC70;
  v119 = (unint64_t)this;
  if (*((_DWORD *)a3 + 8))
  {
    v86 = &v90;
    for (i = this[1]; i != (mlir::Region *)this; i = (mlir::Region *)*((_QWORD *)i + 1))
    {
      v11 = (_QWORD *)((char *)i - 8);
      if (!i)
        v11 = 0;
      v12 = (ZinIrHalH13g *)(v11 + 4);
      v13 = (ZinIrHalH13g *)v11[5];
      if (v13 != (ZinIrHalH13g *)(v11 + 4))
      {
        do
        {
          v14 = (ZinIrHalH13g *)*((_QWORD *)v13 + 1);
          ZinIrHalH13g::~ZinIrHalH13g(v13);
          v13 = v14;
        }
        while (v14 != v12);
      }
    }
  }
  v89 = &v90;
  v88 = 0;
  v16 = (uint64_t *)Context;
  if (*((uint64_t *)&v110 + 1) <= 0 && *((_QWORD *)&v110 + 1) != -1)
  {
    v17 = 0;
    v18 = (mlir::PatternApplicator *)v85;
    if (a4)
      goto LABEL_117;
    goto LABEL_118;
  }
  v17 = 0;
  v19 = 1;
  while (1)
  {
    v20 = v19;
    v98 = v97;
    if (!v101)
      goto LABEL_45;
    v21 = v102;
    if (v102 <= 4 * (int)v101 || v102 < 0x41)
    {
      if (v102)
      {
        v31 = v100;
        v32 = (v102 - 1) & 0xFFFFFFFFFFFFFFFLL;
        if (v32)
        {
          v33 = v32 + 1;
          v34 = (v32 + 1) & 0x1FFFFFFFFFFFFFFELL;
          v35 = (llvm *)((char *)v100 + 16 * v34);
          v36 = (_QWORD *)((char *)v100 + 16);
          v37 = v34;
          do
          {
            *(v36 - 2) = -4096;
            *v36 = -4096;
            v36 += 4;
            v37 -= 2;
          }
          while (v37);
          if (v33 == v34)
            goto LABEL_41;
        }
        else
        {
          v35 = v100;
        }
        v38 = (llvm *)((char *)v31 + 16 * v21);
        do
        {
          *(_QWORD *)v35 = -4096;
          v35 = (llvm *)((char *)v35 + 16);
        }
        while (v35 != v38);
      }
LABEL_41:
      v101 = 0;
      goto LABEL_45;
    }
    v22 = 1 << (33 - __clz(v101 - 1));
    if (v22 <= 64)
      v22 = 64;
    if ((_DWORD)v101)
      v23 = v22;
    else
      v23 = 0;
    if (v23 != v102)
      llvm::deallocate_buffer(v100, (void *)(16 * v102));
    v101 = 0;
    v24 = v100;
    v25 = (v102 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v25)
      break;
    v26 = v25 + 1;
    v27 = (v25 + 1) & 0x1FFFFFFFFFFFFFFELL;
    v28 = (llvm *)((char *)v100 + 16 * v27);
    v29 = (_QWORD *)((char *)v100 + 16);
    v30 = v27;
    do
    {
      *(v29 - 2) = -4096;
      *v29 = -4096;
      v29 += 4;
      v30 -= 2;
    }
    while (v30);
    if (v26 != v27)
      goto LABEL_43;
LABEL_45:
    v40 = v119;
    if ((_BYTE)v110)
    {
      v86 = (uint64_t (***)())&v89;
      v87 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v90;
      v41 = *(_QWORD **)(v119 + 8);
      if (v41 != (_QWORD *)v119)
      {
        do
        {
          v42 = v41 - 1;
          if (!v41)
            v42 = 0;
          v43 = (ZinIrHalH13g *)(v42 + 4);
          v44 = (ZinIrHalH13g *)v42[5];
          while (v44 != v43)
          {
            v45 = (ZinIrHalH13g *)*((_QWORD *)v44 + 1);
            ZinIrHalH13g::~ZinIrHalH13g(v44);
            v44 = v45;
            if (!v47)
              goto LABEL_54;
          }
          v41 = (_QWORD *)v41[1];
        }
        while (v41 != (_QWORD *)v40);
      }
LABEL_54:
      v48 = v97;
      v49 = v98;
      v50 = v98 - 8;
      if (v97 != v98 && v50 > v97)
      {
        v52 = v97 + 8;
        do
        {
          v53 = *((_QWORD *)v52 - 1);
          *((_QWORD *)v52 - 1) = *(_QWORD *)v50;
          *(_QWORD *)v50 = v53;
          v50 -= 8;
          v54 = v52 >= v50;
          v52 += 8;
        }
        while (!v54);
        v48 = v97;
        v49 = v98;
      }
      if (v49 != v48)
      {
        v55 = 0;
        v56 = (v49 - v48) >> 3;
        while (1)
        {
          v62 = v97;
          v63 = v102;
          if (!v102)
            goto LABEL_86;
          v57 = *(_QWORD *)&v97[8 * v55];
          v58 = v102 - 1;
          v59 = ((v57 >> 4) ^ (v57 >> 9)) & (v102 - 1);
          v60 = (char *)v100 + 16 * v59;
          v61 = *(_QWORD *)v60;
          if (v57 != *(_QWORD *)v60)
            break;
LABEL_66:
          *((_DWORD *)v60 + 2) = v55++;
          if (v55 == v56)
            goto LABEL_108;
        }
        v65 = 0;
        v66 = 1;
        while (v61 != -4096)
        {
          if (v65)
            v67 = 0;
          else
            v67 = v61 == -8192;
          if (v67)
            v65 = v60;
          v68 = v59 + v66++;
          v59 = v68 & v58;
          v60 = (char *)v100 + 16 * (v68 & v58);
          v61 = *(_QWORD *)v60;
          if (v57 == *(_QWORD *)v60)
            goto LABEL_66;
        }
        if (v65)
          v60 = v65;
        if (4 * (int)v101 + 4 < 3 * v102)
        {
          if (v102 + ~(_DWORD)v101 - HIDWORD(v101) <= v102 >> 3)
            goto LABEL_87;
LABEL_70:
          v64 = *(_QWORD *)v60;
        }
        else
        {
LABEL_86:
          v63 = 2 * v102;
LABEL_87:
          llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow((uint64_t)&v100, v63);
          v64 = *(_QWORD *)&v62[8 * v55];
          v69 = v102 - 1;
          v70 = ((v64 >> 4) ^ (v64 >> 9)) & (v102 - 1);
          v60 = (char *)v100 + 16 * v70;
          v71 = *(_QWORD *)v60;
          if (v64 != *(_QWORD *)v60)
          {
            v72 = 0;
            v73 = 1;
            while (v71 != -4096)
            {
              if (v72)
                v74 = 0;
              else
                v74 = v71 == -8192;
              if (v74)
                v72 = v60;
              v75 = v70 + v73++;
              v70 = v75 & v69;
              v60 = (char *)v100 + 16 * (v75 & v69);
              v71 = *(_QWORD *)v60;
              if (v64 == *(_QWORD *)v60)
                goto LABEL_71;
            }
            if (v72)
              v60 = v72;
            goto LABEL_70;
          }
        }
LABEL_71:
        LODWORD(v101) = v101 + 1;
        if (v64 != -4096)
          --HIDWORD(v101);
        *(_QWORD *)v60 = *(_QWORD *)&v62[8 * v55];
        *((_DWORD *)v60 + 2) = 0;
        goto LABEL_66;
      }
    }
    else
    {
      v86 = (uint64_t (***)())&v89;
      v87 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v90;
      for (j = *(_QWORD *)(v119 + 8); j != v40; j = *(_QWORD *)(j + 8))
      {
        v77 = j - 8;
        if (!j)
          v77 = 0;
        v78 = (ZinIrHalH13g *)(v77 + 32);
        v79 = *(ZinIrHalH13g **)(v77 + 40);
        if (v79 != (ZinIrHalH13g *)(v77 + 32))
        {
          do
          {
            v80 = (ZinIrHalH13g *)*((_QWORD *)v79 + 1);
            ZinIrHalH13g::~ZinIrHalH13g(v79);
            v79 = v80;
          }
          while (v80 != v78);
        }
      }
    }
LABEL_108:
    v86 = (uint64_t (***)())&v88;
    v87 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v90;
    v120[0] = v119 & 0xFFFFFFFFFFFFFFF9 | 2;
    if (mlir::MLIRContext::hasActionHandler((mlir::MLIRContext *)v16))
    {
      if (!v88)
        goto LABEL_116;
    }
    else
    {
      v83 = v87;
      *(_BYTE *)v86 = v84;
      if (*((_BYTE *)v83 + 249))
        mlir::simplifyRegions((uint64_t)v83, *((_QWORD **)v83 + 50), 1uLL);
      if (!v88)
        goto LABEL_116;
    }
    v19 = v20 + 1;
    v17 = v20;
    if (v20 >= *((uint64_t *)&v110 + 1))
    {
      v17 = v20;
      if (*((_QWORD *)&v110 + 1) != -1)
      {
        v17 = 1;
LABEL_116:
        v18 = (mlir::PatternApplicator *)v85;
        if (a4)
LABEL_117:
          *a4 = v17 != 0;
LABEL_118:
        v90 = off_24C02AAA8;
        v95 = &unk_24C02AB60;
        mlir::PatternApplicator::~PatternApplicator(v18);
      }
    }
  }
  v28 = v100;
LABEL_43:
  v39 = (llvm *)((char *)v24 + 16 * v21);
  do
  {
    *(_QWORD *)v28 = -4096;
    v28 = (llvm *)((char *)v28 + 16);
  }
  while (v28 != v39);
  goto LABEL_45;
}

void sub_207569054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,llvm *a55,unsigned int a56)
{
  mlir::OperationFolder *v56;

  if ((a54 & 1) == 0)
    llvm::deallocate_buffer(a55, (void *)(8 * a56));
  mlir::OperationFolder::~OperationFolder(v56);
}

void sub_207569078(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,llvm *a27,uint64_t a28,unsigned int a29)
{
  llvm::deallocate_buffer(a27, (void *)(16 * a29));
}

uint64_t sub_20756908C()
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  if (v3)
  {
    v4 = v3;
    operator delete(v3);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
  return v1;
}

void `anonymous namespace'::RegionPatternRewriteDriver::~RegionPatternRewriteDriver(_anonymous_namespace_::RegionPatternRewriteDriver *this)
{
  *(_QWORD *)this = off_24C02AAA8;
  *((_QWORD *)this + 5) = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 336));
}

{
  *(_QWORD *)this = off_24C02AAA8;
  *((_QWORD *)this + 5) = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 336));
}

void sub_207569110()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_207569134()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_207569148(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
}

void sub_207569194()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_2075691B8()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_2075691CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::PatternRewriter::canRecoverFromRewriteFailure(mlir::PatternRewriter *this)
{
  return 0;
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationModified(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 36);
  if (v4)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v4 + 32))(v4, a2);
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationInserted(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  mlir::Operation *v2;
  uint64_t v4;
  int v5;
  char *v6;
  int v7;
  unsigned int v8;
  int *v9;
  mlir::Operation *v10;
  int *v11;
  int *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  mlir::Operation *v16;

  v2 = a2;
  v16 = a2;
  v4 = *((_QWORD *)this + 36);
  if (v4)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v4 + 16))(v4, a2);
  if (*((_DWORD *)this + 70) == 1)
  {
    if ((*((_BYTE *)this + 296) & 1) != 0)
    {
      v6 = (char *)this + 304;
      v5 = 4;
    }
    else
    {
      v5 = *((_DWORD *)this + 78);
      if (!v5)
      {
        v11 = 0;
        goto LABEL_11;
      }
      v6 = (char *)*((_QWORD *)this + 38);
    }
    v7 = v5 - 1;
    v8 = ((v2 >> 4) ^ (v2 >> 9)) & v7;
    v9 = (int *)&v6[8 * v8];
    v10 = *(mlir::Operation **)v9;
    if (*(mlir::Operation **)v9 == v2)
      goto LABEL_9;
    v12 = 0;
    v13 = 1;
    while (v10 != (mlir::Operation *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v10 == (mlir::Operation *)-8192;
      if (v14)
        v12 = v9;
      v15 = v8 + v13++;
      v8 = v15 & v7;
      v9 = (int *)&v6[8 * v8];
      v10 = *(mlir::Operation **)v9;
      if (*(mlir::Operation **)v9 == v2)
        goto LABEL_9;
    }
    if (v12)
      v11 = v12;
    else
      v11 = v9;
LABEL_11:
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)this + 74, v11, &v16);
    v2 = v16;
  }
LABEL_9:
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationRemoved(int32x2_t *this, mlir::Operation *a2)
{
  int32x2_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  mlir::Operation *DefiningOp;
  int32x2_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  mlir::Operation *v16;
  int v17;
  int v18;
  int v19;
  int32x2_t *v20;
  int v21;
  uint64_t v22;
  mlir::Operation **v23;
  mlir::Operation *v24;
  int v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = this[36];
  if (v4)
    (*(void (**)(int32x2_t, mlir::Operation *))(**(_QWORD **)&v4 + 56))(v4, a2);
  if ((*((_BYTE *)a2 + 46) & 0x80) != 0)
  {
    mlir::ValueRange::ValueRange(&v28, *((_QWORD *)a2 + 9), *((unsigned int *)a2 + 17));
    v5 = v28;
    v6 = v29;
    v30 = v28;
    v31 = 0;
    if (!v29)
      goto LABEL_16;
  }
  else
  {
    mlir::ValueRange::ValueRange(&v28, 0, 0);
    v5 = v28;
    v6 = v29;
    v30 = v28;
    v31 = 0;
    if (!v29)
      goto LABEL_16;
  }
  v7 = 0;
  do
  {
    v9 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v30, v7);
    v27 = v9;
    if (v9 && (!*v9 || !*(_QWORD *)*v9))
    {
      DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
      if (DefiningOp)
    }
    v7 = ++v31;
  }
  while (v30 != v5 || v7 != v6);
LABEL_16:
  v11 = this[10];
  v12 = this[12].u32[0];
  v13 = a2 >> 4;
  if ((_DWORD)v12)
  {
    LODWORD(v14) = (v12 - 1) & (v13 ^ (a2 >> 9));
    v15 = *(_QWORD *)&v11 + 16 * v14;
    v16 = *(mlir::Operation **)v15;
    if (*(mlir::Operation **)v15 == a2)
      goto LABEL_23;
    v17 = 1;
    while (v16 != (mlir::Operation *)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v12 - 1);
      v16 = *(mlir::Operation **)(*(_QWORD *)&v11 + 16 * v14);
      if (v16 == a2)
      {
        v15 = *(_QWORD *)&v11 + 16 * v14;
        goto LABEL_23;
      }
    }
  }
  v15 = *(_QWORD *)&v11 + 16 * v12;
LABEL_23:
  if (v15 != *(_QWORD *)&v11 + 16 * v12)
  {
    *(_QWORD *)(*(_QWORD *)&this[7] + 8 * *(unsigned int *)(v15 + 8)) = 0;
    *(_QWORD *)v15 = -8192;
    this[11] = vadd_s32(this[11], (int32x2_t)0x1FFFFFFFFLL);
  }
  mlir::OperationFolder::notifyRemoval(this + 13, a2);
  if (this[35].i32[0])
  {
    if ((this[37].i8[0] & 1) != 0)
    {
      v20 = this + 38;
      v19 = 4;
    }
    else
    {
      v19 = this[39].i32[0];
      if (!v19)
        return;
      v20 = (int32x2_t *)this[38];
    }
    v21 = v19 - 1;
    LODWORD(v22) = (v19 - 1) & (v13 ^ (a2 >> 9));
    v23 = (mlir::Operation **)&v20[v22];
    v24 = *v23;
    if (*v23 == a2)
    {
LABEL_31:
      *v23 = (mlir::Operation *)-8192;
      this[37].i32[0] -= 2;
      ++this[37].i32[1];
    }
    else
    {
      v25 = 1;
      while (v24 != (mlir::Operation *)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & v21;
        v24 = (mlir::Operation *)v20[v22];
        if (v24 == a2)
        {
          v23 = (mlir::Operation **)&v20[v22];
          goto LABEL_31;
        }
      }
    }
  }
}

void `anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationReplaced(_anonymous_namespace_::GreedyPatternRewriteDriver *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD *j;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  mlir::Block *v12;
  unint64_t Parent;
  mlir::Operation **v14;
  uint64_t v15;
  mlir::Operation *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 36);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
  v5 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v5)
    v6 = a2 - 16;
  else
    v6 = 0;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      for (j = *(_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v6, i); j; j = (_QWORD *)*j)
      {
        v9 = j[2];
        v17 = v19;
        v18 = 0x800000000;
        while (1)
        {
          v10 = v18;
          if (v18 >= (unint64_t)HIDWORD(v18))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v18 + 1, 8);
            v10 = v18;
          }
          *((_QWORD *)v17 + v10) = v9;
          v11 = v18 + 1;
          LODWORD(v18) = v18 + 1;
          v12 = *(mlir::Block **)(v9 + 16);
          if (!v12)
            break;
          Parent = mlir::Block::getParent(v12);
          if (*((_QWORD *)a1 + 34) == Parent)
          {
            v11 = v18;
            if (!(_DWORD)v18)
              goto LABEL_26;
            goto LABEL_24;
          }
          if (Parent)
          {
            v9 = *(_QWORD *)(Parent + 16);
            if (v9)
              continue;
          }
          goto LABEL_26;
        }
        if (!*((_QWORD *)a1 + 34) && v11)
        {
LABEL_24:
          v14 = (mlir::Operation **)v17;
          v15 = 8 * v11;
          do
          {
            v16 = *v14++;
            v15 -= 8;
          }
          while (v15);
        }
LABEL_26:
        if (v17 != v19)
          free(v17);
      }
    }
  }
}

uint64_t `anonymous namespace'::GreedyPatternRewriteDriver::notifyBlockCreated(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Block *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 36);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Block *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t `anonymous namespace'::GreedyPatternRewriteDriver::notifyMatchFailure(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 288);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void `non-virtual thunk to'`anonymous namespace'::RegionPatternRewriteDriver::~RegionPatternRewriteDriver(_anonymous_namespace_::RegionPatternRewriteDriver *this)
{
  *((_QWORD *)this - 5) = off_24C02AAA8;
  *(_QWORD *)this = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 296));
}

{
  *((_QWORD *)this - 5) = off_24C02AAA8;
  *(_QWORD *)this = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::RegionPatternRewriteDriver *)((char *)this + 296));
}

void sub_20756978C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_2075697B0()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_2075697C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
}

void sub_207569814()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_207569838()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_20756984C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationInserted(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
}

uint64_t `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyBlockCreated(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Block *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 31);
  if (result)
    return (*(uint64_t (**)(uint64_t, mlir::Block *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationModified(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 31);
  if (v4)
    (*(void (**)(uint64_t, mlir::Operation *))(*(_QWORD *)v4 + 32))(v4, a2);
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationReplaced(uint64_t a1, uint64_t a2)
{
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyOperationRemoved(int32x2_t *this, mlir::Operation *a2)
{
}

uint64_t `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::notifyMatchFailure(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void `anonymous namespace'::GreedyPatternRewriteDriver::~GreedyPatternRewriteDriver(_anonymous_namespace_::GreedyPatternRewriteDriver *this)
{
  *(_QWORD *)this = off_24C02AAA8;
  *((_QWORD *)this + 5) = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336));
}

{
  *(_QWORD *)this = off_24C02AAA8;
  *((_QWORD *)this + 5) = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336));
}

void sub_207569934()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_207569958()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_20756996C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
}

void sub_2075699B8()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 296) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 304), (void *)(8 * *(unsigned int *)(v0 + 312)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 104));
}

void sub_2075699DC()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 80), (void *)(16 * *(unsigned int *)(v0 + 96)));
}

void sub_2075699F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  void *v13;

  v13 = (void *)*((_QWORD *)v12 + 7);
  if (v13)
  {
    *((_QWORD *)v12 + 8) = v13;
    operator delete(v13);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'`anonymous namespace'::GreedyPatternRewriteDriver::~GreedyPatternRewriteDriver(_anonymous_namespace_::GreedyPatternRewriteDriver *this)
{
  *((_QWORD *)this - 5) = off_24C02AAA8;
  *(_QWORD *)this = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 296));
}

{
  *((_QWORD *)this - 5) = off_24C02AAA8;
  *(_QWORD *)this = &unk_24C02AB60;
  mlir::PatternApplicator::~PatternApplicator((_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 296));
}

void sub_207569A54()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_207569A78()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_207569A8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
}

void sub_207569ADC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 256) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(v0 + 264), (void *)(8 * *(unsigned int *)(v0 + 272)));
  mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)(v0 + 64));
}

void sub_207569B00()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(16 * *(unsigned int *)(v0 + 56)));
}

void sub_207569B14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  ZinIrHalH13g *v12;
  uint64_t v13;
  void *v14;

  v14 = *(void **)(v13 + 16);
  if (v14)
  {
    *(_QWORD *)(v13 + 24) = v14;
    operator delete(v14);
  }
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::DialectInterfaceCollection(_QWORD *a1, mlir::MLIRContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  if ((v4 & 1) == 0
  {
    v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
    v15 = 76;
    v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
    if (v15 >= v7)
      v8 = v7;
    else
      v8 = v15;
    v9 = &v14[v8];
    v10 = v15 - v8;
    if (v15 - v8 >= 0x12)
      v11 = 18;
    else
      v11 = v15 - v8;
    v12 = v10 - v11;
    if (v12 >= v12 - 1)
      v13 = v12 - 1;
    else
      v13 = v12;
    mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id;
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
  v15 = 76;
  llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  result = mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)a1, a2, v5);
  *a1 = &unk_24C04FB68;
  return result;
}

void mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(a1);
}

void sub_207569CA8()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::function_ref<mlir::PatternBenefit ()(mlir::Pattern const&)>::callback_fn<mlir::PatternApplicator::applyDefaultCostModel(void)::{lambda(mlir::Pattern const&)#1}>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 12);
}

void mlir::OperationFolder::~OperationFolder(mlir::OperationFolder *this)
{
  ZinIrHalH13g::~ZinIrHalH13g((mlir::OperationFolder *)((char *)this + 104));
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase((mlir::OperationFolder *)((char *)this + 48));
}

uint64_t sub_207569DD0()
{
  uint64_t v0;

  return v0;
}

int *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::RegionPatternRewriteDriver(mlir::MLIRContext *,mlir::FrozenRewritePatternSet const&,mlir::GreedyRewriteConfig const&,mlir::Region &)::$_0>(int *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;

  v2 = *(_QWORD *)result;
  v14 = a2;
  if ((*(_BYTE *)(v2 + 296) & 1) != 0)
  {
    v4 = v2 + 304;
    v3 = 4;
  }
  else
  {
    v3 = *(_DWORD *)(v2 + 312);
    if (!v3)
    {
      v9 = 0;
      return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)(v2 + 296), v9, &v14);
    }
    v4 = *(_QWORD *)(v2 + 304);
  }
  v5 = v3 - 1;
  v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (int *)(v4 + 8 * v6);
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)v7 != a2)
  {
    v10 = 0;
    v11 = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (int *)(v4 + 8 * v6);
      v8 = *(_QWORD *)v7;
      if (*(_QWORD *)v7 == a2)
        return result;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v7;
    return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((int *)(v2 + 296), v9, &v14);
  }
  return result;
}

int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(int *a1, int *a2, _QWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v6 = *a1;
  v7 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v8 = 4;
  else
    v8 = a1[4];
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - a1[1] > v8 >> 3)
  {
    v9 = *a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::grow(a1, v8);
  v11 = a1 + 2;
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = a1[4];
    if (!v12)
    {
      v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    v11 = (int *)*((_QWORD *)a1 + 1);
  }
  v9 = *a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v12 - 1);
  a2 = &v11[2 * v14];
  v15 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = a2;
      v19 = v14 + v17++;
      v14 = v19 & v13;
      a2 = &v11[2 * (v19 & v13)];
      v15 = *(_QWORD *)a2;
      if (*a3 == *(_QWORD *)a2)
        goto LABEL_7;
    }
    if (v16)
      a2 = v16;
  }
LABEL_7:
  *a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_QWORD *)a2 != -4096)
    --a1[1];
  *(_QWORD *)a2 = *a3;
  return a2;
}

_QWORD *llvm::SmallDenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::grow(_QWORD *result, unsigned int a2)
{
  unsigned int v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm *v10;
  int64x2_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int64x2_t *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t *buffer;
  int v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  int64x2_t *v28;
  int64x2_t v29;
  uint64_t v30;
  llvm *v31;
  _QWORD *v32;
  int v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int64x2_t *v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64x2_t *v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD v60[4];

  v2 = a2;
  v3 = result;
  v60[3] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v8 = result + 1;
    v7 = (llvm *)result[1];
    v9 = *((unsigned int *)result + 4);
    if (v2 > 4)
    {
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
      v3[1] = buffer;
      v3[2] = v2;
      v23 = *(_DWORD *)v3;
      v10 = (llvm *)((char *)v7 + 8 * v9);
      *v3 = *(_DWORD *)v3 & 1;
      if ((v23 & 1) == 0)
      {
        v24 = &buffer->i8[8 * v2];
        v25 = 8 * v2 - 8;
        if (v25 < 0x18)
        {
          v27 = (char *)buffer;
          goto LABEL_24;
        }
LABEL_18:
        v26 = (v25 >> 3) + 1;
        v27 = &buffer->i8[8 * (v26 & 0x3FFFFFFFFFFFFFFCLL)];
        v28 = buffer + 1;
        v29 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28[-1] = v29;
          *v28 = v29;
          v28 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_25:
          if ((_DWORD)v9)
          {
            v31 = v7;
            do
            {
              v38 = *(_QWORD *)v31;
              if ((*(_QWORD *)v31 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if ((*(_BYTE *)v3 & 1) != 0)
                {
                  v33 = 4;
                  v32 = v3 + 1;
                }
                else
                {
                  v32 = (_QWORD *)*v8;
                  v33 = v2;
                }
                v34 = v33 - 1;
                v35 = (v33 - 1) & ((v38 >> 4) ^ (v38 >> 9));
                v36 = &v32[v35];
                v37 = *v36;
                if (v38 != *v36)
                {
                  v39 = 0;
                  v40 = 1;
                  while (v37 != -4096)
                  {
                    if (v39)
                      v41 = 0;
                    else
                      v41 = v37 == -8192;
                    if (v41)
                      v39 = v36;
                    v42 = v35 + v40++;
                    v35 = v42 & v34;
                    v36 = &v32[v42 & v34];
                    v37 = *v36;
                    if (v38 == *v36)
                      goto LABEL_29;
                  }
                  if (v39)
                    v36 = v39;
                }
LABEL_29:
                *v36 = v38;
                *(_DWORD *)v3 += 2;
              }
              v31 = (llvm *)((char *)v31 + 8);
            }
            while (v31 != v10);
          }
          llvm::deallocate_buffer(v7, (void *)(8 * v9));
        }
        do
        {
LABEL_24:
          *(_QWORD *)v27 = -4096;
          v27 += 8;
        }
        while (v27 != v24);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = (llvm *)((char *)v7 + 8 * v9);
      *result = 1;
      v2 = v9;
    }
    v24 = (char *)(v3 + 5);
    buffer = (int64x2_t *)(v3 + 1);
    v25 = 24;
    goto LABEL_18;
  }
  v11 = (int64x2_t **)(result + 1);
  v12 = &v59;
  if ((result[1] | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v13 = result[2];
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v59 = result[1];
    v12 = v60;
    v13 = result[2];
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v14 = result[3];
      if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_49;
    }
  }
  *v12++ = v13;
  v14 = result[3];
  if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v15 = result[4];
    if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  *v12++ = v14;
  v15 = result[4];
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v16 = *(_DWORD *)result;
    if (v2 >= 5)
      goto LABEL_13;
LABEL_51:
    v2 = v13;
    *result = v16 & 1;
    if ((v16 & 1) != 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_50:
  *v12++ = v15;
  v16 = *(_DWORD *)result;
  if (v2 < 5)
    goto LABEL_51;
LABEL_13:
  *(_DWORD *)result = v16 & 0xFFFFFFFE;
  result = llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
  v3[1] = result;
  v3[2] = v2;
  v17 = *(_DWORD *)v3;
  *v3 = *(_DWORD *)v3 & 1;
  if ((v17 & 1) != 0)
  {
LABEL_14:
    v18 = (uint64_t)(v3 + 5);
    v19 = (int64x2_t *)(v3 + 1);
    v20 = 24;
    goto LABEL_54;
  }
LABEL_52:
  if (!v2)
    goto LABEL_58;
  v19 = *v11;
  v18 = (uint64_t)&(*v11)->i64[v2];
  v20 = 8 * v2 - 8;
  if (v20 < 0x18)
  {
    v21 = *v11;
    do
    {
LABEL_57:
      v21->i64[0] = -4096;
      v21 = (int64x2_t *)((char *)v21 + 8);
    }
    while (v21 != (int64x2_t *)v18);
    goto LABEL_58;
  }
LABEL_54:
  v43 = (v20 >> 3) + 1;
  v21 = (int64x2_t *)((char *)v19 + 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL));
  v44 = v19 + 1;
  v45 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v44[-1] = v45;
    *v44 = v45;
    v44 += 2;
    v46 -= 4;
  }
  while (v46);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_57;
LABEL_58:
  if (&v59 != v12)
  {
    v47 = &v59;
    do
    {
      v54 = *v47;
      if ((*v47 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((*(_BYTE *)v3 & 1) != 0)
        {
          v49 = 4;
          v48 = (int64x2_t *)(v3 + 1);
        }
        else
        {
          v48 = *v11;
          v49 = v2;
        }
        v50 = v49 - 1;
        v51 = (v49 - 1) & ((v54 >> 4) ^ (v54 >> 9));
        v52 = &v48->i64[v51];
        v53 = *v52;
        if (v54 != *v52)
        {
          v55 = 0;
          v56 = 1;
          while (v53 != -4096)
          {
            if (v55)
              v57 = 0;
            else
              v57 = v53 == -8192;
            if (v57)
              v55 = v52;
            v58 = v51 + v56++;
            v51 = v58 & v50;
            v52 = &v48->i64[v58 & v50];
            v53 = *v52;
            if (v54 == *v52)
              goto LABEL_62;
          }
          if (v55)
            v52 = v55;
        }
LABEL_62:
        *v52 = v54;
        *(_DWORD *)v3 += 2;
      }
      ++v47;
    }
    while (v47 != v12);
  }
  return result;
}

void `anonymous namespace'::GreedyPatternRewriteDriver::addToWorklist(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  uint64_t v4;
  unsigned int v5;
  mlir::Block *v6;
  unint64_t Parent;
  mlir::Operation **v8;
  uint64_t v9;
  mlir::Operation *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x800000000;
  while (1)
  {
    v4 = v12;
    if (v12 >= (unint64_t)HIDWORD(v12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v11, v13, v12 + 1, 8);
      v4 = v12;
    }
    *((_QWORD *)v11 + v4) = a2;
    v5 = v12 + 1;
    LODWORD(v12) = v12 + 1;
    v6 = (mlir::Block *)*((_QWORD *)a2 + 2);
    if (!v6)
      break;
    Parent = mlir::Block::getParent(v6);
    if (*((_QWORD *)this + 34) == Parent)
    {
      v5 = v12;
      if (!(_DWORD)v12)
        goto LABEL_15;
      goto LABEL_13;
    }
    if (Parent)
    {
      a2 = *(mlir::Operation **)(Parent + 16);
      if (a2)
        continue;
    }
    goto LABEL_15;
  }
  if (!*((_QWORD *)this + 34) && v5)
  {
LABEL_13:
    v8 = (mlir::Operation **)v11;
    v9 = 8 * v5;
    do
    {
      v10 = *v8++;
      v9 -= 8;
    }
    while (v9);
  }
LABEL_15:
  if (v11 != v13)
    free(v11);
}

void `anonymous namespace'::GreedyPatternRewriteDriver::addSingleOpToWorklist(_anonymous_namespace_::GreedyPatternRewriteDriver *this, mlir::Operation *a2)
{
  int v4;
  char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _anonymous_namespace_::GreedyPatternRewriteDriver *v11;
  mlir::Operation *v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  mlir::Operation *v21;
  int v22;
  mlir::Operation *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  mlir::Operation *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  mlir::Operation *v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  unsigned int v62;

  if (!*((_DWORD *)this + 70))
    goto LABEL_21;
  v4 = *((_DWORD *)this + 74);
  if ((v4 & 1) != 0)
  {
    v5 = (char *)this + 304;
    v6 = 4;
LABEL_8:
    v9 = v6 - 1;
    LODWORD(v10) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v5[8 * v10];
    v12 = *(mlir::Operation **)v11;
    if (*(mlir::Operation **)v11 == a2)
    {
      if ((v4 & 1) == 0)
      {
LABEL_10:
        if (v11 == (_anonymous_namespace_::GreedyPatternRewriteDriver *)(*((_QWORD *)this + 38)
                                                                        + 8 * *((unsigned int *)this + 78)))
          return;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = 1;
      while (v12 != (mlir::Operation *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & v9;
        v12 = *(mlir::Operation **)&v5[8 * v10];
        if (v12 == a2)
        {
          v11 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)&v5[8 * v10];
          if ((v4 & 1) == 0)
            goto LABEL_10;
          goto LABEL_20;
        }
      }
      if ((v4 & 1) == 0)
      {
        v5 = (char *)*((_QWORD *)this + 38);
        v7 = *((_DWORD *)this + 78);
        v8 = v7;
        goto LABEL_5;
      }
      v11 = (_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336);
    }
LABEL_20:
    if (v11 == (_anonymous_namespace_::GreedyPatternRewriteDriver *)((char *)this + 336))
      return;
LABEL_21:
    v15 = (char *)this + 80;
    v16 = *((_QWORD *)this + 10);
    v17 = *((_DWORD *)this + 24);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v20 = v16 + 16 * v19;
      v21 = *(mlir::Operation **)v20;
      if (*(mlir::Operation **)v20 == a2)
        return;
      v22 = 1;
      v23 = *(mlir::Operation **)v20;
      v24 = v18 & ((a2 >> 4) ^ (a2 >> 9));
      while (v23 != (mlir::Operation *)-4096)
      {
        v25 = v24 + v22++;
        v24 = v25 & v18;
        v23 = *(mlir::Operation **)(v16 + 16 * v24);
        if (v23 == a2)
          return;
      }
      v50 = 0;
      v26 = (uint64_t *)((char *)this + 64);
      v29 = (char *)*((_QWORD *)this + 8);
      v27 = (unint64_t)&v29[-*((_QWORD *)this + 7)] >> 3;
      v51 = 1;
      while (v21 != (mlir::Operation *)-4096)
      {
        if (v50)
          v52 = 0;
        else
          v52 = v21 == (mlir::Operation *)-8192;
        if (v52)
          v50 = v20;
        v53 = v19 + v51++;
        v19 = v53 & v18;
        v20 = v16 + 16 * (v53 & v18);
        v21 = *(mlir::Operation **)v20;
        if (*(mlir::Operation **)v20 == a2)
          goto LABEL_32;
      }
      if (v50)
        v20 = v50;
      v54 = *((_DWORD *)this + 22);
      if (4 * v54 + 4 < 3 * v17)
      {
        if (v17 + ~v54 - *((_DWORD *)this + 23) > v17 >> 3)
          goto LABEL_29;
        goto LABEL_70;
      }
    }
    else
    {
      v26 = (uint64_t *)((char *)this + 64);
      v27 = (*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
    }
    v17 *= 2;
LABEL_70:
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow((uint64_t)v15, v17);
    v55 = *((_QWORD *)this + 10);
    v56 = *((_DWORD *)this + 24) - 1;
    v57 = v56 & ((a2 >> 4) ^ (a2 >> 9));
    v20 = v55 + 16 * v57;
    v58 = *(mlir::Operation **)v20;
    if (*(mlir::Operation **)v20 == a2)
    {
LABEL_71:
      ++*((_DWORD *)this + 22);
      if (a2 == (mlir::Operation *)-4096)
        goto LABEL_31;
      goto LABEL_30;
    }
    v59 = 0;
    v60 = 1;
    while (v58 != (mlir::Operation *)-4096)
    {
      if (v59)
        v61 = 0;
      else
        v61 = v58 == (mlir::Operation *)-8192;
      if (v61)
        v59 = v20;
      v62 = v57 + v60++;
      v57 = v62 & v56;
      v20 = v55 + 16 * (v62 & v56);
      v58 = *(mlir::Operation **)v20;
      if (*(mlir::Operation **)v20 == a2)
        goto LABEL_71;
    }
    if (v59)
      v20 = v59;
LABEL_29:
    v28 = *(mlir::Operation **)v20;
    ++*((_DWORD *)this + 22);
    if (v28 == (mlir::Operation *)-4096)
    {
LABEL_31:
      *(_QWORD *)v20 = a2;
      *(_DWORD *)(v20 + 8) = 0;
      v29 = (char *)*v26;
LABEL_32:
      *(_DWORD *)(v20 + 8) = v27;
      v30 = *((_QWORD *)this + 9);
      if ((unint64_t)v29 < v30)
      {
        *(_QWORD *)v29 = a2;
        v31 = (uint64_t)(v29 + 8);
LABEL_56:
        *v26 = v31;
        return;
      }
      v32 = (char *)*((_QWORD *)this + 7);
      v33 = (v29 - v32) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        abort();
      v35 = v30 - (_QWORD)v32;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v37 = (char *)operator new(8 * v36);
        v38 = &v37[8 * v33];
        v39 = &v37[8 * v36];
        *(_QWORD *)v38 = a2;
        v31 = (uint64_t)(v38 + 8);
        v40 = (char *)(v29 - v32);
        if (v29 == v32)
          goto LABEL_54;
      }
      else
      {
        v37 = 0;
        v38 = (char *)(8 * v33);
        v39 = 0;
        *(_QWORD *)(8 * v33) = a2;
        v31 = 8 * v33 + 8;
        v40 = (char *)(v29 - v32);
        if (v29 == v32)
          goto LABEL_54;
      }
      v41 = (unint64_t)(v40 - 8);
      if (v41 >= 0x58)
      {
        if ((unint64_t)(v32 - v37) >= 0x20)
        {
          v43 = (v41 >> 3) + 1;
          v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v29[-v44];
          v38 -= v44;
          v45 = &v37[8 * v33 - 16];
          v46 = v29 - 16;
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
            *(_OWORD *)v45 = v48;
            v45 -= 32;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_53;
        }
        else
        {
          v42 = v29;
        }
      }
      else
      {
        v42 = v29;
      }
      do
      {
        v49 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *((_QWORD *)v38 - 1) = v49;
        v38 -= 8;
      }
      while (v42 != v32);
LABEL_53:
      v29 = (char *)*((_QWORD *)this + 7);
LABEL_54:
      *((_QWORD *)this + 7) = v38;
      *((_QWORD *)this + 8) = v31;
      *((_QWORD *)this + 9) = v39;
      if (v29)
        operator delete(v29);
      goto LABEL_56;
    }
LABEL_30:
    --*((_DWORD *)this + 23);
    goto LABEL_31;
  }
  v5 = (char *)*((_QWORD *)this + 38);
  v6 = *((_DWORD *)this + 78);
  if (v6)
    goto LABEL_8;
  v7 = 0;
  v8 = 0;
LABEL_5:
  if (&v5[8 * v8] != &v5[8 * v7])
    goto LABEL_21;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::simplify(BOOL *)::$_0>(uint64_t a1, mlir::Operation *a2)
{
  _anonymous_namespace_::GreedyPatternRewriteDriver *v3;
  int32x2_t *v4;
  unint64_t v5;
  void *v6[2];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_anonymous_namespace_::GreedyPatternRewriteDriver **)(a1 + 8);
  v4 = **(int32x2_t ***)a1;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
    goto LABEL_6;
  v6[0] = v7;
  v6[1] = (void *)0x100000000;
  mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v6);
  v5 = *(_QWORD *)v6[0] & 0xFFFFFFFFFFFFFFF8;
  if (v6[0] != v7)
    free(v6[0]);
  if (!v5 || mlir::OperationFolder::insertKnownConstant(v4 + 13, (uint64_t)a2, v5))
LABEL_6:
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::simplify(BOOL *)::$_1>(uint64_t a1, mlir::Operation *a2)
{
  _anonymous_namespace_::GreedyPatternRewriteDriver *v3;
  int32x2_t *v4;
  unint64_t v5;
  void *v7[2];
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_anonymous_namespace_::GreedyPatternRewriteDriver **)(a1 + 8);
  v4 = **(int32x2_t ***)a1;
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)a2 + 6))
  {
    v7[0] = v8;
    v7[1] = (void *)0x100000000;
    mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v7);
    v5 = *(_QWORD *)v7[0] & 0xFFFFFFFFFFFFFFF8;
    if (v7[0] != v8)
      free(v7[0]);
    if (v5 && !mlir::OperationFolder::insertKnownConstant(v4 + 13, (uint64_t)a2, v5))
      return 2;
  }
  return 1;
}

uint64_t mlir::MLIRContext::executeActionInternal<`anonymous namespace'::GreedyPatternRewriteIteration,long long &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[5];

  v7[2] = a4;
  v7[3] = a5;
  v7[0] = &off_24C02AEA8;
  v7[4] = a6;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)v7);
}

void `anonymous namespace'::GreedyPatternRewriteIteration::~GreedyPatternRewriteIteration(_anonymous_namespace_::GreedyPatternRewriteIteration *this)
{
  JUMPOUT(0x20BD002F8);
}

const char *mlir::tracing::ActionImpl<`anonymous namespace'::GreedyPatternRewriteIteration>::getTag()
{
  return "GreedyPatternRewriteIteration";
}

llvm::raw_ostream *`anonymous namespace'::GreedyPatternRewriteIteration::print(_anonymous_namespace_::GreedyPatternRewriteIteration *this, llvm::raw_ostream *a2)
{
  void *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v3 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v3 > 0x1DuLL)
  {
    qmemcpy(v3, "GreedyPatternRewriteIteration(", 30);
    *((_QWORD *)a2 + 4) += 30;
    result = llvm::raw_ostream::operator<<(a2, *((_QWORD *)this + 4));
    v6 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) != v6)
      goto LABEL_3;
  }
  else
  {
    v4 = llvm::raw_ostream::write(a2, "GreedyPatternRewriteIteration(", 0x1EuLL);
    result = llvm::raw_ostream::operator<<(v4, *((_QWORD *)this + 4));
    v6 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) != v6)
    {
LABEL_3:
      *v6 = 41;
      ++*((_QWORD *)result + 4);
      return result;
    }
  }
  return llvm::raw_ostream::write(result, ")", 1uLL);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<`anonymous namespace'::RegionPatternRewriteDriver::simplify(BOOL *)::$_2>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  **(_BYTE **)a1 = result;
  if (*(_BYTE *)(v3 + 249))
    mlir::simplifyRegions(v3, *(_QWORD **)(v3 + 400), 1uLL);
  return result;
}

uint64_t `anonymous namespace'::GreedyPatternRewriteDriver::processWorklist(int32x2_t *this, mlir::Operation *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  uint64_t v6;
  int32x2_t *v7;
  int32x2_t *v8;
  _QWORD *v9;
  int32x2_t v10;
  BOOL v11;
  int32x2_t v12;
  mlir::Operation *v13;
  mlir::Operation *v14;
  mlir::Operation *v15;
  __int32 v16;
  int32x2_t v17;
  __int32 v18;
  uint64_t v19;
  mlir::Operation **v20;
  mlir::Operation *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;

  v2 = (_QWORD *)this[7];
  v3 = (_QWORD *)this[8];
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = this + 13;
    v8 = this + 42;
    while (1)
    {
      v9 = v2;
      while (!*v9)
      {
        if (++v9 == v3)
          return v5 & 1;
      }
      v10 = this[33];
      v11 = v6 < *(_QWORD *)&v10 || *(_QWORD *)&v10 == -1;
      if (!v11)
        break;
      v14 = (mlir::Operation *)*(v3 - 1);
      v12 = (int32x2_t)(v3 - 1);
      v13 = v14;
      if (!v14)
      {
        do
        {
          this[8] = v12;
          v15 = *(mlir::Operation **)(*(_QWORD *)&v12 - 8);
          *(_QWORD *)&v12 -= 8;
          v13 = v15;
        }
        while (!v15);
      }
      this[8] = v12;
      v16 = this[12].i32[0];
      if (v16)
      {
        v17 = this[10];
        v18 = v16 - 1;
        LODWORD(v19) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v20 = (mlir::Operation **)(*(_QWORD *)&v17 + 16 * v19);
        v21 = *v20;
        if (v13 == *v20)
        {
LABEL_16:
          *v20 = (mlir::Operation *)-8192;
          this[11] = vadd_s32(this[11], (int32x2_t)0x1FFFFFFFFLL);
          v2 = (_QWORD *)this[7];
          v12 = this[8];
        }
        else
        {
          v25 = 1;
          while (v21 != (mlir::Operation *)-4096)
          {
            v26 = v19 + v25++;
            v19 = v26 & v18;
            v21 = *(mlir::Operation **)(*(_QWORD *)&v17 + 16 * v19);
            if (v13 == v21)
            {
              v20 = (mlir::Operation **)(*(_QWORD *)&v17 + 16 * v19);
              goto LABEL_16;
            }
          }
        }
      }
      if (v2 != *(_QWORD **)&v12)
      {
        v22 = (_QWORD *)(*(_QWORD *)&v12 - 8);
        do
        {
          if (*v22)
            break;
          this[8] = (int32x2_t)v22;
          v11 = v22-- == v2;
        }
        while (!v11);
      }
      if (mlir::isOpTriviallyDead((void ***)v13, a2))
      {
        (*(void (**)(int32x2_t *, mlir::Operation *))(*(_QWORD *)this + 40))(this, v13);
        v5 = 1;
        v2 = (_QWORD *)this[7];
        v3 = (_QWORD *)this[8];
        if (v2 == v3)
          return v5 & 1;
      }
      else if (mlir::OperationFolder::tryToFold(v7, v13, 0))
      {
        v5 = 1;
        v2 = (_QWORD *)this[7];
        v3 = (_QWORD *)this[8];
        if (v2 == v3)
          return v5 & 1;
      }
      else
      {
        v24 = mlir::PatternApplicator::matchAndRewrite((uint64_t)v8, (uint64_t)v13, (uint64_t)this, 0, 0, 0, 0, v23, 0, 0);
        if (v24)
          ++v6;
        v5 |= v24 != 0;
        v2 = (_QWORD *)this[7];
        v3 = (_QWORD *)this[8];
        if (v2 == v3)
          return v5 & 1;
      }
    }
  }
  return v5 & 1;
}

uint64_t mlir::eraseUnreachableBlocks(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *j;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  llvm::SmallPtrSetImplBase *v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  int64_t v27;
  char *v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  _QWORD *v33;
  const void **BucketFor;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  ZinIrHalH13g *v39;
  ZinIrHalH13g *i;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[128];
  llvm::SmallPtrSetImplBase *v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[2];

  v60[1] = *MEMORY[0x24BDAC8D0];
  v49 = v53;
  v50 = v53;
  v51 = 16;
  v52 = 0;
  v58 = v60;
  v59 = 0x100000000;
  if (a3 < 2)
  {
    v6 = 0;
    if (!a3)
    {
      v8 = 0;
      goto LABEL_79;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, a3, 8);
    v6 = v59;
  }
  v7 = 24 * a3;
  do
  {
    if (v6 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v6 + 1, 8);
      v6 = v59;
    }
    v58[v6] = a2;
    v6 = v59 + 1;
    LODWORD(v59) = v59 + 1;
    a2 += 24;
    v7 -= 24;
  }
  while (v7);
  v8 = 0;
  while (v6)
  {
    v9 = (_QWORD *)v58[--v6];
    LODWORD(v59) = v6;
    if ((_QWORD *)*v9 != v9)
    {
      v10 = v9[1];
      if (*(_QWORD **)(v10 + 8) != v9)
      {
        if (v50 != v49)
        {
          if (v51 >= 0x21 && 4 * (HIDWORD(v51) - v52) < v51)
          {
            llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v49);
            goto LABEL_29;
          }
          memset(v50, 255, 8 * v51);
        }
        HIDWORD(v51) = 0;
        v52 = 0;
LABEL_29:
        v20 = v9[1];
        if (v20)
          v21 = (void *)(v20 - 8);
        else
          v21 = 0;
        llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::df_iterator(&v54, v21, (llvm::SmallPtrSetImplBase *)&v49);
        v23 = v54;
        v22 = v55;
        v24 = v56 - v55;
        if (v56 != v55)
        {
          if ((v24 & 0x8000000000000000) == 0)
          {
            v25 = (char *)operator new(v56 - v55);
            v26 = v24 & 0xFFFFFFFFFFFFFFE0;
            memcpy(v25, v22, v26);
            v24 = (unint64_t)&v25[v26];
            if (v22)
              goto LABEL_35;
            goto LABEL_36;
          }
LABEL_84:
          abort();
        }
        v25 = 0;
        if (v55)
        {
LABEL_35:
          v56 = v22;
          operator delete(v22);
        }
LABEL_36:
        v54 = v23;
        v27 = v24 - (_QWORD)v25;
        if (v27)
        {
          if (v27 < 0)
            goto LABEL_84;
          v28 = (char *)operator new(v27);
          v55 = v28;
          v57 = &v28[32 * (v27 >> 5)];
          v29 = v27 & 0xFFFFFFFFFFFFFFE0;
          memcpy(v28, v25, v29);
          v56 = &v28[v29];
          if (!v29)
            goto LABEL_41;
          do
          {
            llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::toNext(&v54);
            v28 = v56;
          }
          while (v56 != v55);
          if (v56)
          {
LABEL_41:
            v56 = v28;
            operator delete(v28);
          }
        }
        if (v25)
          operator delete(v25);
        v30 = (_QWORD *)v9[1];
        while (1)
        {
          if (v30 == v9)
            goto LABEL_10;
          v31 = v30 - 1;
          v32 = v30 == 0;
          v30 = (_QWORD *)v30[1];
          if (v32)
            v33 = 0;
          else
            v33 = v31;
          if (v50 == v49)
          {
            v37 = &v50[8 * HIDWORD(v51)];
            if (HIDWORD(v51))
            {
              v38 = 0;
              while (*(_QWORD **)&v50[v38] != v33)
              {
                v38 += 8;
                if (8 * HIDWORD(v51) == v38)
                  goto LABEL_66;
              }
              v37 = &v50[v38];
            }
LABEL_66:
            if (v37 == &v50[8 * HIDWORD(v51)])
            {
LABEL_45:
              mlir::Block::dropAllDefinedValueUses(v33);
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 48))(a1, v33);
              v8 = 1;
              continue;
            }
          }
          else
          {
            BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v49, v33);
            if (*BucketFor != v33)
            {
              v35 = v51;
              if (v50 == v49)
                v35 = HIDWORD(v51);
              BucketFor = (const void **)&v50[8 * v35];
            }
            if (v50 == v49)
              v36 = HIDWORD(v51);
            else
              v36 = v51;
            if (BucketFor == (const void **)&v50[8 * v36])
              goto LABEL_45;
          }
          v39 = (ZinIrHalH13g *)(v33 + 4);
          for (i = (ZinIrHalH13g *)v33[5]; i != v39; i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
          {
            ZinIrHalH13g::~ZinIrHalH13g(i);
            v42 = *(unsigned int *)(v41 + 44);
            v43 = v42 & 0x7FFFFF;
            if ((v42 & 0x7FFFFF) != 0)
            {
              v44 = (v41 + 16 * ((v42 >> 23) & 1) + ((v42 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
              v45 = v59;
              v46 = 24 * v43;
              v47 = v44 + 32 * *(unsigned int *)(v41 + 40);
              do
              {
                if (v45 >= HIDWORD(v59))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v45 + 1, 8);
                  v45 = v59;
                }
                v58[v45] = v47;
                v45 = v59 + 1;
                LODWORD(v59) = v59 + 1;
                v47 += 24;
                v46 -= 24;
              }
              while (v46);
            }
          }
        }
      }
      v11 = (ZinIrHalH13g *)(v10 + 24);
      for (j = *(ZinIrHalH13g **)(v10 + 32); j != v11; j = (ZinIrHalH13g *)*((_QWORD *)j + 1))
      {
        ZinIrHalH13g::~ZinIrHalH13g(j);
        v14 = *(unsigned int *)(v13 + 44);
        v15 = v14 & 0x7FFFFF;
        if ((v14 & 0x7FFFFF) != 0)
        {
          v16 = (v13 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
          v17 = v59;
          v18 = 24 * v15;
          v19 = v16 + 32 * *(unsigned int *)(v13 + 40);
          do
          {
            if (v17 >= HIDWORD(v59))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v17 + 1, 8);
              v17 = v59;
            }
            v58[v17] = v19;
            v17 = v59 + 1;
            LODWORD(v59) = v59 + 1;
            v19 += 24;
            v18 -= 24;
          }
          while (v18);
        }
      }
LABEL_10:
      v6 = v59;
    }
  }
LABEL_79:
  if (v58 != v60)
    free(v58);
  if (v50 != v49)
    free(v50);
  return v8 & 1;
}

void propagateLiveness(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v3;
  mlir::Block *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  ZinIrHalH13g **v14;
  ZinIrHalH13g *v15;
  mlir::detail::OpResultImpl **v16;
  mlir::detail::OpResultImpl **j;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  mlir::Operation *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  unint64_t NextResultAtOffset;
  uint64_t v39;
  uint64_t InterfaceFor;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  char v48;
  unint64_t v49;
  __int32 v50;
  uint64_t v51;
  unsigned __int8 v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  char *v63;
  __int32 v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  __int32 v73;
  uint64_t v74;
  unsigned __int8 v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD *v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  _QWORD *v86;
  __int32 v87;
  int v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  BOOL v99;
  unsigned int v100;
  uint64_t *v101;
  __int32 v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  uint64_t *v111;
  __int32 v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  uint64_t *v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  unint64_t v132;
  BOOL v133;
  __int32 v134;
  uint64_t v135;
  unsigned __int8 v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t Owner;
  __int32 v144;
  uint64_t v145;
  __int32 v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t i64;
  uint64_t *v153;
  mlir::Block *v154;
  ZinIrHalH13g **v155;
  ZinIrHalH13g *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  const void *v164;
  void *v165;
  uint64_t v166;
  _BYTE v167[320];
  mlir::Block *v168;
  void *v169;
  const void *v170;
  void *v171;
  uint64_t v172;
  _BYTE v173[320];
  void *v174;
  void *v175;
  void *__src;
  unsigned int v177;
  uint64_t v178;
  void *v179;
  void *v180;
  void *v181;
  unsigned int v182;
  uint64_t v183;
  const char *v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD v187[5];

  v187[3] = *MEMORY[0x24BDAC8D0];
  if ((_QWORD *)*a1 == a1)
    return;
  v3 = a1[1];
  if (v3)
    v4 = (mlir::Block *)(v3 - 8);
  else
    v4 = 0;
  v168 = v4;
  llvm::post_order<mlir::Block *>(&v168, &v174);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v168, &v170, (const llvm::SmallPtrSetImplBase *)&v174);
  v171 = v173;
  v172 = 0x800000000;
  v5 = v177;
  if (v177)
  {
    if (v177 < 9)
    {
      v7 = v173;
      v6 = v177;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, v173, v177, 40);
      v6 = v177;
      if (!v177)
      {
LABEL_11:
        LODWORD(v172) = v5;
        goto LABEL_12;
      }
      v7 = v171;
    }
    memcpy(v7, __src, 40 * v6);
    goto LABEL_11;
  }
LABEL_12:
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v162, &v164, (const llvm::SmallPtrSetImplBase *)&v179);
  v165 = v167;
  v166 = 0x800000000;
  v8 = v182;
  if (v182)
  {
    if (v182 < 9uLL)
    {
      v10 = v167;
      v9 = v182;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, v167, v182, 40);
      v9 = v182;
      if (!v182)
      {
LABEL_18:
        LODWORD(v166) = v8;
        goto LABEL_19;
      }
      v10 = v165;
    }
    memcpy(v10, v181, 40 * v9);
    goto LABEL_18;
  }
LABEL_19:
  i64 = (uint64_t)a2[2].i64;
  v153 = &a2->i64[1];
  v11 = (_QWORD *)&unk_25451A000;
  while (1)
  {
    if (v172 != v8)
      goto LABEL_31;
    if (!v8)
      break;
    v12 = v165;
    v13 = v171;
    while (*v13 == *v12 && v13[1] == v12[1] && v13[2] == v12[2] && v13[3] == v12[3] && v13[4] == v12[4])
    {
      v13 += 5;
      v12 += 5;
      if (v13 == (_QWORD *)((char *)v171 + 40 * v8))
        goto LABEL_244;
    }
LABEL_31:
    v14 = (ZinIrHalH13g **)(*((_QWORD *)v171 + 5 * v172 - 5) + 32);
    v15 = *v14;
    v154 = (mlir::Block *)*((_QWORD *)v171 + 5 * v172 - 5);
    v155 = v14;
    if (*v14 != (ZinIrHalH13g *)v14)
    {
      while (1)
      {
        ZinIrHalH13g::~ZinIrHalH13g(v15);
        v19 = v18;
        v20 = *(unsigned int *)(v18 + 44);
        if ((v20 & 0x7FFFFF) != 0)
        {
          v21 = ((v18 + 16 * ((v20 >> 23) & 1) + ((v20 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(v18 + 40);
          v22 = 24 * (v20 & 0x7FFFFF);
          do
          {
            propagateLiveness(v21, a2);
            v21 += 24;
            v22 -= 24;
          }
          while (v22);
        }
        if ((v23 & 1) == 0
        {
          v184 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
          v185 = 84;
          v117 = llvm::StringRef::find((uint64_t *)&v184, "DesiredTypeName = ", 0x12uLL, 0);
          if (v185 >= v117)
            v118 = v117;
          else
            v118 = v185;
          v119 = &v184[v118];
          v120 = v185 - v118;
          v121 = 18;
          if (v120 < 0x12)
            v121 = v120;
          v122 = v120 - v121;
          if (v122 >= v122 - 1)
            v123 = v122 - 1;
          else
            v123 = v122;
          v11[223] = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
        }
        v24 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 48) + 32))(*(_QWORD *)(v19 + 48), v11[223]);
        v25 = a2[2].i64[0];
        v26 = (mlir::Operation *)a2[3].u32[0];
        if ((v24 & 1) != 0)
          break;
        if (!(_DWORD)v26)
          goto LABEL_52;
        v31 = ((_DWORD)v26 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        v32 = *(_QWORD *)(v25 + 8 * v31);
        if (v32 != v19)
        {
          v33 = 1;
          while (v32 != -4096)
          {
            v34 = v31 + v33++;
            v31 = v34 & ((_DWORD)v26 - 1);
            v32 = *(_QWORD *)(v25 + 8 * v31);
            if (v32 == v19)
              goto LABEL_37;
          }
LABEL_52:
          if ((mlir::wouldOpBeTriviallyDead((void ***)v19, v26) & 1) != 0)
          {
            v35 = *(unsigned int *)(v19 + 36);
            if ((_DWORD)v35)
              v36 = v19 - 16;
            else
              v36 = 0;
            if ((_DWORD)v35)
            {
              for (i = 0; i != v35; ++i)
              {
                NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, i);
                processValue(NextResultAtOffset, a2);
              }
            }
            goto LABEL_37;
          }
          v90 = a2[3].u32[0];
          if (!v90)
            goto LABEL_183;
          v91 = a2[2].i64[0];
          v92 = (v90 - 1) & ((v19 >> 4) ^ (v19 >> 9));
          v93 = (_QWORD *)(v91 + 8 * v92);
          v94 = *v93;
          if (v19 == *v93)
          {
            v95 = 0;
LABEL_152:
            a2->i8[0] |= v95;
            goto LABEL_37;
          }
          v107 = 0;
          v108 = 1;
          while (v94 != -4096)
          {
            v95 = 0;
            if (v107)
              v109 = 0;
            else
              v109 = v94 == -8192;
            if (v109)
              v107 = v93;
            v110 = v92 + v108++;
            v92 = v110 & (v90 - 1);
            v93 = (_QWORD *)(v91 + 8 * v92);
            v94 = *v93;
            if (v19 == *v93)
              goto LABEL_152;
          }
          v111 = v107 ? v107 : v93;
          v112 = a2[2].i32[2];
          if (4 * v112 + 4 < 3 * v90)
          {
            if (v90 + ~v112 - a2[2].i32[3] <= v90 >> 3)
              goto LABEL_184;
          }
          else
          {
LABEL_183:
            v90 *= 2;
LABEL_184:
            llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(i64, v90);
            v113 = a2[2].i64[0];
            v114 = a2[3].i32[0] - 1;
            v115 = v114 & ((v19 >> 4) ^ (v19 >> 9));
            v111 = (uint64_t *)(v113 + 8 * v115);
            v116 = *v111;
            if (v19 == *v111)
            {
              v96 = v19;
              goto LABEL_149;
            }
            v128 = 0;
            v129 = 1;
            while (v116 != -4096)
            {
              if (v128)
                v130 = 0;
              else
                v130 = v116 == -8192;
              if (v130)
                v128 = v111;
              v131 = v115 + v129++;
              v115 = v131 & v114;
              v111 = (uint64_t *)(v113 + 8 * (v131 & v114));
              v116 = *v111;
              if (v19 == *v111)
              {
                v96 = v19;
                v11 = (_QWORD *)&unk_25451A000;
                v14 = v155;
                goto LABEL_149;
              }
            }
            if (v128)
              v111 = v128;
            v11 = (_QWORD *)&unk_25451A000;
            v14 = v155;
          }
          v96 = *v111;
LABEL_149:
          ++a2[2].i32[2];
          if (v96 != -4096)
            --a2[2].i32[3];
          *v111 = v19;
          v95 = 1;
          goto LABEL_152;
        }
LABEL_37:
        v15 = *(ZinIrHalH13g **)v15;
        if (v15 == (ZinIrHalH13g *)v14)
          goto LABEL_32;
      }
      if (!(_DWORD)v26)
        goto LABEL_166;
      v27 = ((_DWORD)v26 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      v28 = (_QWORD *)(v25 + 8 * v27);
      v29 = *v28;
      if (v19 == *v28)
      {
        v30 = 0;
        goto LABEL_65;
      }
      v97 = 0;
      v98 = 1;
      while (v29 != -4096)
      {
        v30 = 0;
        if (v97)
          v99 = 0;
        else
          v99 = v29 == -8192;
        if (v99)
          v97 = v28;
        v100 = v27 + v98++;
        v27 = v100 & ((_DWORD)v26 - 1);
        v28 = (_QWORD *)(v25 + 8 * v27);
        v29 = *v28;
        if (v19 == *v28)
          goto LABEL_65;
      }
      v101 = v97 ? v97 : v28;
      v102 = a2[2].i32[2];
      if (4 * v102 + 4 < (3 * (_DWORD)v26))
      {
        if ((int)v26 + ~v102 - a2[2].i32[3] <= v26 >> 3)
          goto LABEL_167;
      }
      else
      {
LABEL_166:
        LODWORD(v26) = 2 * (_DWORD)v26;
LABEL_167:
        llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(i64, (int)v26);
        v103 = a2[2].i64[0];
        v104 = a2[3].i32[0] - 1;
        v105 = v104 & ((v19 >> 4) ^ (v19 >> 9));
        v101 = (uint64_t *)(v103 + 8 * v105);
        v106 = *v101;
        if (v19 == *v101)
        {
LABEL_168:
          ++a2[2].i32[2];
          if (v19 == -4096)
            goto LABEL_64;
LABEL_63:
          --a2[2].i32[3];
LABEL_64:
          *v101 = v19;
          v30 = 1;
LABEL_65:
          a2->i8[0] |= v30;
          if (mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v19))
          {
            if (v19)
              InterfaceFor = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v19);
            else
              InterfaceFor = 0;
            v156 = v15;
            v158 = v19;
            v159 = InterfaceFor;
            if (v19)
            {
              v157 = *(unsigned int *)(v19 + 40);
              if ((_DWORD)v157)
              {
                v67 = 0;
                while (1)
                {
                  mlir::BranchOpInterface::getSuccessorOperands((mlir::BranchOpInterface *)&v158, v67);
                  v68 = &unk_254519000;
                  v69 = v184;
                  if ((_DWORD)v184)
                    break;
LABEL_141:
                  if (v186 != v187)
                    free(v186);
                  if (++v67 == v157)
                    goto LABEL_36;
                }
                v70 = 0;
                while (2)
                {
                  v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(((v19
                                                            + 64
                                                            + 16
                                                            * (((unint64_t)*(unsigned int *)(v19 + 44) >> 23) & 1)
                                                            + (((unint64_t)*(unsigned int *)(v19 + 44) >> 21) & 0x7F8)
                                                            + 7) & 0xFFFFFFFFFFFFFFF8)
                                                          + 32 * v67
                                                          + 24)
                                              + 48)
                                  + 8 * v70);
                  v160 = v72;
                  v73 = a2[1].i32[2];
                  if (!v73)
                  {
                    v81 = 0;
                    goto LABEL_134;
                  }
                  v74 = a2->i64[1];
                  if ((v75 & 1) == 0)
                  {
                    v68 = &unk_254519000;
                    if (v88)
                    {
                      v89 = llvm::hashing::detail::fixed_seed_override;
                      if (!llvm::hashing::detail::fixed_seed_override)
                        v89 = 0xFF51AFD7ED558CCDLL;
                      llvm::hashing::detail::get_execution_seed(void)::seed = v89;
                      v68 = (_QWORD *)&unk_254519000;
                    }
                  }
                  v76 = 0x9DDFEA08EB382D69 * ((v68[373] + 8 * v72) ^ HIDWORD(v72));
                  v77 = 0x9DDFEA08EB382D69 * (HIDWORD(v72) ^ (v76 >> 47) ^ v76);
                  v78 = (-348639895 * ((v77 >> 47) ^ v77)) & (v73 - 1);
                  v79 = (_QWORD *)(v74 + 8 * v78);
                  v80 = *v79;
                  if (v160 == *v79)
                  {
                    v71 = 0;
LABEL_112:
                    a2->i8[0] |= v71;
                    if (++v70 == v69)
                      goto LABEL_141;
                    continue;
                  }
                  break;
                }
                v82 = 0;
                v83 = 1;
                while (v80 != -4096)
                {
                  v71 = 0;
                  if (v82)
                    v84 = 0;
                  else
                    v84 = v80 == -8192;
                  if (v84)
                    v82 = v79;
                  v85 = v78 + v83++;
                  v78 = v85 & (v73 - 1);
                  v79 = (_QWORD *)(v74 + 8 * v78);
                  v80 = *v79;
                  if (v160 == *v79)
                    goto LABEL_112;
                }
                if (v82)
                  v86 = v82;
                else
                  v86 = v79;
                v81 = a2[1].u32[2];
                v87 = a2[1].i32[0];
                if (4 * v87 + 4 < 3 * v81)
                {
                  if (v81 + ~v87 - a2[1].i32[1] <= v81 >> 3)
                    goto LABEL_135;
                  ++a2[1].i32[0];
                  if (*v86 == -4096)
                  {
LABEL_111:
                    *v86 = v160;
                    v71 = 1;
                    goto LABEL_112;
                  }
                }
                else
                {
LABEL_134:
                  v81 *= 2;
LABEL_135:
                  llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v153, v81);
                  v161 = 0;
                  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v153, &v160, &v161);
                  v68 = (_QWORD *)&unk_254519000;
                  v86 = v161;
                  ++a2[1].i32[0];
                  if (*v86 == -4096)
                    goto LABEL_111;
                }
                --a2[1].i32[1];
                goto LABEL_111;
              }
LABEL_36:
              v11 = &unk_25451A000;
              v14 = v155;
              v15 = v156;
              goto LABEL_37;
            }
          }
          else
          {
            v156 = v15;
            v158 = 0;
            v159 = 0;
          }
          mlir::SuccessorRange::SuccessorRange((unint64_t *)&v184, (Operation *)v19);
          v41 = &unk_254519000;
          v42 = v185;
          if (v185)
          {
            v43 = 0;
            v44 = v184;
            while (1)
            {
              v45 = *(_QWORD *)&v44[32 * v43 + 24];
              v46 = *(unint64_t **)(v45 + 48);
              v47 = *(unint64_t **)(v45 + 56);
              if (v47 != v46)
                break;
LABEL_71:
              if (++v43 == v42)
                goto LABEL_36;
            }
            while (2)
            {
              v49 = *v46;
              v161 = (_QWORD *)*v46;
              v50 = a2[1].i32[2];
              if (!v50)
              {
                v58 = 0;
                goto LABEL_97;
              }
              v51 = a2->i64[1];
              if ((v52 & 1) == 0)
              {
                v41 = &unk_254519000;
                if (v65)
                {
                  v66 = llvm::hashing::detail::fixed_seed_override;
                  if (!llvm::hashing::detail::fixed_seed_override)
                    v66 = 0xFF51AFD7ED558CCDLL;
                  llvm::hashing::detail::get_execution_seed(void)::seed = v66;
                  v41 = (_QWORD *)&unk_254519000;
                }
              }
              v53 = 0x9DDFEA08EB382D69 * ((v41[373] + 8 * v49) ^ HIDWORD(v49));
              v54 = 0x9DDFEA08EB382D69 * (HIDWORD(v49) ^ (v53 >> 47) ^ v53);
              v55 = (-348639895 * ((v54 >> 47) ^ v54)) & (v50 - 1);
              v56 = (char *)(v51 + 8 * v55);
              v57 = *(_QWORD *)v56;
              if (v161 == *(_QWORD **)v56)
              {
                v48 = 0;
LABEL_75:
                a2->i8[0] |= v48;
                if (++v46 == v47)
                  goto LABEL_71;
                continue;
              }
              break;
            }
            v59 = 0;
            v60 = 1;
            while (v57 != -4096)
            {
              v48 = 0;
              if (v59)
                v61 = 0;
              else
                v61 = v57 == -8192;
              if (v61)
                v59 = v56;
              v62 = v55 + v60++;
              v55 = v62 & (v50 - 1);
              v56 = (char *)(v51 + 8 * v55);
              v57 = *(_QWORD *)v56;
              if (v161 == *(_QWORD **)v56)
                goto LABEL_75;
            }
            if (v59)
              v63 = v59;
            else
              v63 = v56;
            v58 = a2[1].u32[2];
            v64 = a2[1].i32[0];
            if (4 * v64 + 4 < 3 * v58)
            {
              if (v58 + ~v64 - a2[1].i32[1] <= v58 >> 3)
                goto LABEL_98;
              ++a2[1].i32[0];
              if (*(_QWORD *)v63 == -4096)
              {
LABEL_74:
                *(_QWORD *)v63 = v161;
                v48 = 1;
                goto LABEL_75;
              }
            }
            else
            {
LABEL_97:
              v58 *= 2;
LABEL_98:
              llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v153, v58);
              v184 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v153, (unint64_t *)&v161, &v184);
              v41 = (_QWORD *)&unk_254519000;
              v63 = (char *)v184;
              ++a2[1].i32[0];
              if (*(_QWORD *)v63 == -4096)
                goto LABEL_74;
            }
            --a2[1].i32[1];
            goto LABEL_74;
          }
          goto LABEL_36;
        }
        v124 = 0;
        v125 = 1;
        while (v106 != -4096)
        {
          if (v124)
            v126 = 0;
          else
            v126 = v106 == -8192;
          if (v126)
            v124 = v101;
          v127 = v105 + v125++;
          v105 = v127 & v104;
          v101 = (uint64_t *)(v103 + 8 * (v127 & v104));
          v106 = *v101;
          if (v19 == *v101)
            goto LABEL_168;
        }
        if (v124)
          v101 = v124;
      }
      v39 = *v101;
      ++a2[2].i32[2];
      if (v39 != -4096)
        goto LABEL_63;
      goto LABEL_64;
    }
LABEL_32:
    if (!mlir::Block::isEntryBlock(v154))
    {
      v16 = (mlir::detail::OpResultImpl **)*((_QWORD *)v154 + 6);
      for (j = (mlir::detail::OpResultImpl **)*((_QWORD *)v154 + 7); v16 != j; ++v16)
      {
        v132 = (unint64_t)*v16;
        if (*v16)
          v133 = (*((_QWORD *)*v16 + 1) & 7) == 7;
        else
          v133 = 1;
        if (v133)
        {
          v134 = a2[1].i32[2];
          if (v134)
          {
            v135 = a2->i64[1];
            if ((v136 & 1) == 0
            {
              v151 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v151 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v151;
            }
            v137 = 0x9DDFEA08EB382D69
                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v132) ^ HIDWORD(v132));
            v138 = 0x9DDFEA08EB382D69 * (HIDWORD(v132) ^ (v137 >> 47) ^ v137);
            v139 = (-348639895 * ((v138 >> 47) ^ v138)) & (v134 - 1);
            v140 = *(_QWORD *)(v135 + 8 * v139);
            if (v132 == v140)
              continue;
            v141 = 1;
            while (v140 != -4096)
            {
              v142 = v139 + v141++;
              v139 = v142 & (v134 - 1);
              v140 = *(_QWORD *)(v135 + 8 * v139);
              if (v132 == v140)
                goto LABEL_221;
            }
          }
        }
        else
        {
          Owner = mlir::detail::OpResultImpl::getOwner(*v16);
          v144 = a2[3].i32[0];
          if (v144)
          {
            v145 = a2[2].i64[0];
            v146 = v144 - 1;
            v147 = ((Owner >> 4) ^ (Owner >> 9)) & v146;
            v148 = *(_QWORD *)(v145 + 8 * v147);
            if (v148 == Owner)
              continue;
            v149 = 1;
            while (v148 != -4096)
            {
              v150 = v147 + v149++;
              v147 = v150 & v146;
              v148 = *(_QWORD *)(v145 + 8 * v147);
              if (v148 == Owner)
                goto LABEL_221;
            }
          }
        }
        processValue(v132, a2);
LABEL_221:
        ;
      }
    }
    LODWORD(v172) = v172 - 1;
    if ((_DWORD)v172)
      llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v168);
    v8 = v166;
  }
LABEL_244:
  if (v165 != v167)
    free(v165);
  if (v163 != v162)
    free(v163);
  if (v171 != v173)
    free(v171);
  if (v169 != v168)
    free(v169);
  if (v181 != &v183)
    free(v181);
  if (v180 != v179)
    free(v180);
  if (__src != &v178)
    free(__src);
  if (v175 != v174)
    free(v175);
}

uint64_t deleteDeadness(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  mlir::Block *v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  ZinIrHalH13g **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t InterfaceFor;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  ZinIrHalH13g *v40;
  ZinIrHalH13g *v41;
  ZinIrHalH13g *v42;
  ZinIrHalH13g *v43;
  unsigned int *v44;
  unsigned int *v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t j;
  _QWORD **NextResultAtOffset;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *i;
  uint64_t v62;
  _QWORD *v64;
  _QWORD *v65;
  ZinIrHalH13g **v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  const void *v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[320];
  mlir::Block *v80;
  void *v81;
  const void *v82;
  void *__dst;
  uint64_t v84;
  _BYTE v85[320];
  void *v86;
  void *v87;
  void *__src;
  unsigned int v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  _QWORD v100[5];

  v100[3] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = a2;
    v6 = a1;
    v7 = 0;
    v64 = &a2[3 * a3];
    while ((_QWORD *)*v5 == v5)
    {
LABEL_3:
      v5 += 3;
      if (v5 == v64)
        return v7 & 1;
    }
    v8 = (_QWORD *)v5[1];
    v69 = v8 != v5 && v8[1] == (_QWORD)v5;
    if (v8)
      v9 = (mlir::Block *)(v8 - 1);
    else
      v9 = 0;
    v80 = v9;
    llvm::post_order<mlir::Block *>(&v80, &v86);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v80, &v82, (const llvm::SmallPtrSetImplBase *)&v86);
    __dst = v85;
    v84 = 0x800000000;
    v10 = v89;
    if (!v89)
    {
LABEL_17:
      v65 = v5;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v74, &v76, (const llvm::SmallPtrSetImplBase *)&v91);
      v77 = v79;
      v78 = 0x800000000;
      v13 = v94;
      if (!v94)
        goto LABEL_24;
      v14 = v79;
      v15 = v94;
      if (v94 >= 9uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v94, 40);
        v15 = v94;
        if (!v94)
        {
LABEL_22:
          LODWORD(v78) = v13;
          while (1)
          {
LABEL_24:
            if (v84 == v13)
            {
              if (!v13)
              {
LABEL_88:
                if (v77 != v79)
                  free(v77);
                v5 = v65;
                if (v75 != v74)
                  free(v75);
                if (__dst != v85)
                  free(__dst);
                if (v81 != v80)
                  free(v81);
                if (v93 != &v95)
                  free(v93);
                if (v92 != v91)
                  free(v92);
                if (__src != &v90)
                  free(__src);
                if (v87 != v86)
                  free(v87);
                for (i = *(_QWORD **)(v65[1] + 8); i != v65; i = (_QWORD *)i[1])
                {
                  if (i)
                    v62 = (uint64_t)(i - 1);
                  else
                    v62 = 0;
                  v86 = (void *)a4;
                }
                goto LABEL_3;
              }
              v16 = v77;
              v17 = __dst;
              while (*v17 == *v16 && v17[1] == v16[1] && v17[2] == v16[2] && v17[3] == v16[3] && v17[4] == v16[4])
              {
                v17 += 5;
                v16 += 5;
                if (v17 == (_QWORD *)((char *)__dst + 40 * v13))
                  goto LABEL_88;
              }
            }
            v18 = (ZinIrHalH13g **)*((_QWORD *)__dst + 5 * v84 - 5);
            if (!v69)
            {
              mlir::Block::getTerminator(v18);
              v20 = v19;
              v68 = v7;
              v67 = v18;
              v70 = v19;
              if (mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v19))
              {
                if (v20)
                {
                  InterfaceFor = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor(v20);
                  v72 = v20;
                  v73 = InterfaceFor;
                  v22 = *(_DWORD *)(v70 + 40);
                  if (v22)
                  {
                    v23 = 0;
                    v71 = *(unsigned int *)(v70 + 40);
                    while (1)
                    {
                      v24 = (v22 + ~(_DWORD)v23);
                      mlir::BranchOpInterface::getSuccessorOperands((mlir::BranchOpInterface *)&v72, v24);
                      v25 = (v98 + v96);
                      if (v98 + v96)
                        break;
LABEL_58:
                      if (v99 != v100)
                        free(v99);
                      ++v23;
                      v22 = v71;
                      if (v23 == v71)
                        goto LABEL_60;
                    }
                    v26 = 0;
                    v27 = *(_QWORD *)(((v70
                                      + 64
                                      + 16 * (((unint64_t)*(unsigned int *)(v70 + 44) >> 23) & 1)
                                      + (((unint64_t)*(unsigned int *)(v70 + 44) >> 21) & 0x7F8)
                                      + 7) & 0xFFFFFFFFFFFFFFF8)
                                    + 32 * v24
                                    + 24);
                    while (1)
                    {
                      v28 = v25 + ~(_DWORD)v26;
                      v29 = *(_DWORD *)(a4 + 24);
                      if (v29)
                      {
                        v30 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v28);
                        v31 = *(_QWORD *)(a4 + 8);
                        if ((v32 & 1) == 0
                        {
                          v39 = llvm::hashing::detail::fixed_seed_override;
                          if (!llvm::hashing::detail::fixed_seed_override)
                            v39 = 0xFF51AFD7ED558CCDLL;
                          llvm::hashing::detail::get_execution_seed(void)::seed = v39;
                        }
                        v33 = 0x9DDFEA08EB382D69
                            * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v30) ^ HIDWORD(v30));
                        v34 = 0x9DDFEA08EB382D69 * (HIDWORD(v30) ^ (v33 >> 47) ^ v33);
                        v35 = (-348639895 * ((v34 >> 47) ^ v34)) & (v29 - 1);
                        v36 = *(_QWORD *)(v31 + 8 * v35);
                        if (v30 == v36)
                          goto LABEL_46;
                        v37 = 1;
                        while (v36 != -4096)
                        {
                          v38 = v35 + v37++;
                          v35 = v38 & (v29 - 1);
                          v36 = *(_QWORD *)(v31 + 8 * v35);
                          if (v30 == v36)
                            goto LABEL_46;
                        }
                      }
                      mlir::MutableOperandRange::erase((mlir::MutableOperandRange *)&v97, v28 - v96, 1u);
LABEL_46:
                      if (++v26 == v25)
                        goto LABEL_58;
                    }
                  }
                }
                else
                {
                  v72 = 0;
                  v73 = 0;
                }
              }
              else
              {
                v72 = 0;
                v73 = 0;
              }
LABEL_60:
              v6 = a1;
              v18 = v67;
              v7 = v68;
            }
            v42 = v18[4];
            v41 = (ZinIrHalH13g *)(v18 + 4);
            v40 = v42;
            if (v42 != v41)
            {
              do
              {
                while (1)
                {
                  v43 = *(ZinIrHalH13g **)v40;
                  ZinIrHalH13g::~ZinIrHalH13g(v40);
                  v45 = v44;
                  v46 = *(_DWORD *)(a4 + 48);
                  if (v46)
                    break;
LABEL_76:
                  v55 = v44[9];
                  if ((_DWORD)v55)
                    v56 = (uint64_t)(v44 - 4);
                  else
                    v56 = 0;
                  if ((_DWORD)v55)
                  {
                    for (j = 0; j != v55; ++j)
                    {
                      NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v56, j);
                      while (1)
                      {
                        v59 = *NextResultAtOffset;
                        if (!*NextResultAtOffset)
                          break;
                        v60 = (_QWORD *)v59[1];
                        if (v60)
                        {
                          *v60 = *v59;
                          if (*v59)
                            *(_QWORD *)(*v59 + 8) = v59[1];
                        }
                        *v59 = 0;
                        v59[1] = 0;
                        v59[3] = 0;
                      }
                    }
                  }
                  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v6 + 40))(v6, v45);
                  v7 = 1;
                  v40 = v43;
                  if (v43 == v41)
                    goto LABEL_62;
                }
                v47 = *(_QWORD *)(a4 + 32);
                v48 = v46 - 1;
                v49 = ((v44 >> 4) ^ (v44 >> 9)) & v48;
                v50 = *(unsigned int **)(v47 + 8 * v49);
                if (v50 != v44)
                {
                  v53 = 1;
                  while (v50 != (unsigned int *)-4096)
                  {
                    v54 = v49 + v53++;
                    v49 = v54 & v48;
                    v50 = *(unsigned int **)(v47 + 8 * v49);
                    if (v50 == v44)
                      goto LABEL_67;
                  }
                  goto LABEL_76;
                }
LABEL_67:
                v51 = v44[11];
                if ((v51 & 0x7FFFFF) != 0)
                  v52 = (((unint64_t)&v44[4 * ((v51 >> 23) & 1) + 17] + ((v51 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v44[10];
                else
                  v52 = 0;
                v7 |= deleteDeadness(v6, v52) != 0;
                v40 = v43;
              }
              while (v43 != v41);
            }
LABEL_62:
            LODWORD(v84) = v84 - 1;
            if ((_DWORD)v84)
              llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v80);
            v13 = v78;
          }
        }
        v14 = v77;
      }
      memcpy(v14, v93, 40 * v15);
      goto LABEL_22;
    }
    v11 = v85;
    v12 = v89;
    if (v89 >= 9uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v85, v89, 40);
      v12 = v89;
      if (!v89)
      {
LABEL_16:
        LODWORD(v84) = v10;
        goto LABEL_17;
      }
      v11 = __dst;
    }
    memcpy(v11, __src, 40 * v12);
    goto LABEL_16;
  }
  LOBYTE(v7) = 0;
  return v7 & 1;
}

void mlir::simplifyRegions(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  llvm *v8[2];
  uint64_t v9;
  int v10;
  llvm *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  mlir::eraseUnreachableBlocks(a1, (uint64_t)a2, a3);
  v9 = 0;
  v8[1] = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  v13 = 0;
  if (a3)
  {
    do
    {
      LOBYTE(v8[0]) = 0;
      v6 = 24 * a3;
      v7 = a2;
      do
      {
        propagateLiveness(v7, (int64x2_t *)v8);
        v7 += 3;
        v6 -= 24;
      }
      while (v6);
    }
    while (LOBYTE(v8[0]));
  }
  else
  {
    LOBYTE(v8[0]) = 0;
  }
  deleteDeadness(a1, a2, a3, (uint64_t)v8);
  llvm::deallocate_buffer(v11, (void *)(8 * v13));
}

void llvm::post_order<mlir::Block *>(mlir::Block **a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  _OWORD v8[20];
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[41];

  v13[40] = *MEMORY[0x24BDAC8D0];
  llvm::po_iterator<mlir::Region *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Region *>>::po_iterator((uint64_t)&v10, *a1);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7[0] = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v7[1] = (char *)v8 + 8;
  DWORD1(v8[0]) = 8;
  llvm::make_range<llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v10, (uint64_t)&v3, a2);
  if (v7[1] != (char *)v8 + 8)
    free(v7[1]);
  if (v4 != v3)
    free(v4);
  if (v12 != v13)
    free(v12);
  if (v11 != v10)
    free(v11);
}

unint64_t processValue(unint64_t result, int64x2_t *a2)
{
  _QWORD *v2;
  mlir::detail::OpResultImpl *v4;
  uint64_t *v5;
  int64x2_t *v6;
  _QWORD *v7;
  unint64_t OperandNumber;
  uint64_t InterfaceFor;
  char v10;
  __int32 v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  mlir::detail::OpResultImpl *Owner;

  v2 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
    return result;
  v4 = (mlir::detail::OpResultImpl *)result;
  v5 = &a2->i64[1];
  v6 = a2 + 2;
  while (1)
  {
    v7 = (_QWORD *)v2[2];
    OperandNumber = mlir::OpOperand::getOperandNumber((unint64_t)v2);
    result = mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(v7 + 6);
    if ((_DWORD)result)
    {
      result = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v7);
      if (result)
      {
        if (v7)
        {
          InterfaceFor = mlir::OpInterface<mlir::BranchOpInterface,mlir::detail::BranchOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v7);
          v21 = v7;
          v22 = InterfaceFor;
          result = mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)&v21, OperandNumber);
          if (v10)
          {
            v20 = result;
            Owner = 0;
            result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v5, &v20, &Owner);
            if (!(_DWORD)result)
              goto LABEL_17;
          }
        }
        else
        {
          result = 0;
          v21 = 0;
          v22 = 0;
        }
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    v11 = a2[3].i32[0];
    if (v11)
      break;
LABEL_17:
    v2 = (_QWORD *)*v2;
    if (!v2)
      return result;
  }
  v12 = v2[2];
  v13 = a2[2].i64[0];
  v14 = v11 - 1;
  v15 = ((v12 >> 4) ^ (v12 >> 9)) & v14;
  v16 = *(_QWORD *)(v13 + 8 * v15);
  if (v16 != v12)
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & v14;
      v16 = *(_QWORD *)(v13 + 8 * v15);
      if (v16 == v12)
        goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_19:
  if (!v4 || (*((_QWORD *)v4 + 1) & 7) == 7)
  {
    Owner = v4;
    v21 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v5, (unint64_t *)&Owner, &v21);
    if ((result & 1) != 0)
    {
      v19 = 0;
    }
    else
    {
      result = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v5, (uint64_t)&Owner, (unint64_t *)&Owner, v21);
      *(_QWORD *)result = Owner;
      v19 = 1;
    }
  }
  else
  {
    Owner = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getOwner(v4);
    result = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v6, (uint64_t *)&Owner, (uint64_t)&v21);
    v19 = v23;
  }
  a2->i8[0] |= v19;
  return result;
}

uint64_t llvm::function_ref<BOOL ()(mlir::BlockArgument)>::callback_fn<deleteDeadness(mlir::RewriterBase &,llvm::MutableArrayRef<mlir::Region>,`anonymous namespace'::LiveMap &)::$_0>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = a2;
  v5 = 0;
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)(v2 + 8), &v4, &v5) ^ 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::LookupBucketFor<mlir::SuccessorRange>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  unsigned int v48;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>(*a2, 0, *a2, a2[1]);
    v8 = v4 - 1;
    v9 = (v4 - 1) & v7;
    v11 = *a2;
    v10 = a2[1];
    if (v10)
    {
      if (v11 == -8192)
      {
        v12 = 0;
        v13 = 1;
        v14 = (_QWORD *)(v6 + 40 * v9);
        v15 = *v14;
        if (*v14 == -4096)
          goto LABEL_11;
LABEL_5:
        if (v15 != -8192)
        {
          if (v10 != v14[1])
            goto LABEL_11;
          v16 = (_QWORD *)(v15 + 24);
          v17 = -8168;
          v18 = a2[1];
          while (*(_QWORD *)v17 == *v16)
          {
            v16 += 4;
            v17 += 32;
            if (!--v18)
              goto LABEL_33;
          }
LABEL_11:
          while (v15 != -4096)
          {
            if (v12)
              v19 = 0;
            else
              v19 = v15 == -8192;
            if (v19)
              v12 = v14;
            v20 = v9 + v13++;
            v9 = v20 & v8;
            v14 = (_QWORD *)(v6 + 40 * v9);
            v15 = *v14;
            if (*v14 != -4096)
              goto LABEL_5;
          }
LABEL_86:
          result = 0;
          if (v12)
            v14 = v12;
          *a3 = v14;
          return result;
        }
      }
      else
      {
        if (v11 != -4096)
        {
          v12 = 0;
          v37 = (_QWORD *)(v11 + 24);
          v38 = 1;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v39 = *v14;
          if ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
            goto LABEL_68;
LABEL_63:
          if (v10 != v14[1])
            goto LABEL_68;
          v40 = (_QWORD *)(v39 + 24);
          v41 = v37;
          v42 = a2[1];
          while (*v41 == *v40)
          {
            v40 += 4;
            v41 += 4;
            result = 1;
            if (!--v42)
              goto LABEL_20;
          }
LABEL_68:
          while (v39 != -4096)
          {
            if (v12)
              v43 = 0;
            else
              v43 = v39 == -8192;
            if (v43)
              v12 = v14;
            v44 = v9 + v38++;
            v9 = v44 & v8;
            v14 = (_QWORD *)(v6 + 40 * v9);
            v39 = *v14;
            if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_63;
          }
          goto LABEL_86;
        }
        v12 = 0;
        v26 = 1;
        v14 = (_QWORD *)(v6 + 40 * v9);
        v27 = *v14;
        if (*v14 == -8192)
          goto LABEL_42;
LABEL_36:
        if (v27 != -4096)
        {
          if (v10 != v14[1])
            goto LABEL_42;
          v28 = (_QWORD *)(v27 + 24);
          v29 = -4072;
          v30 = a2[1];
          while (*(_QWORD *)v29 == *v28)
          {
            v28 += 4;
            v29 += 32;
            result = 1;
            if (!--v30)
              goto LABEL_20;
          }
LABEL_42:
          while (v27 != -4096)
          {
            if (v12)
              v31 = 0;
            else
              v31 = v27 == -8192;
            if (v31)
              v12 = v14;
            v32 = v9 + v26++;
            v9 = v32 & v8;
            v14 = (_QWORD *)(v6 + 40 * v9);
            v27 = *v14;
            if (*v14 != -8192)
              goto LABEL_36;
          }
          goto LABEL_86;
        }
      }
    }
    else if (v11 == -8192)
    {
      v12 = 0;
      v22 = 1;
      v14 = (_QWORD *)(v6 + 40 * v9);
      v23 = *v14;
      if (*v14 == -4096)
        goto LABEL_25;
LABEL_23:
      if (v23 != -8192 && v14[1])
      {
LABEL_25:
        while (v23 != -4096)
        {
          if (v12)
            v24 = 0;
          else
            v24 = v23 == -8192;
          if (v24)
            v12 = v14;
          v25 = v9 + v22++;
          v9 = v25 & v8;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v23 = *v14;
          if (*v14 != -4096)
            goto LABEL_23;
        }
        goto LABEL_86;
      }
    }
    else if (v11 == -4096)
    {
      v12 = 0;
      v33 = 1;
      v14 = (_QWORD *)(v6 + 40 * v9);
      v34 = *v14;
      if (*v14 == -8192)
        goto LABEL_54;
LABEL_52:
      if (v34 != -4096 && v14[1])
      {
LABEL_54:
        while (v34 != -4096)
        {
          if (v12)
            v35 = 0;
          else
            v35 = v34 == -8192;
          if (v35)
            v12 = v14;
          v36 = v9 + v33++;
          v9 = v36 & v8;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v34 = *v14;
          if (*v14 != -8192)
            goto LABEL_52;
        }
        goto LABEL_86;
      }
    }
    else
    {
      v12 = 0;
      v45 = 1;
      v14 = (_QWORD *)(v6 + 40 * v9);
      v46 = *v14;
      if ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_78;
LABEL_77:
      if (v14[1])
      {
LABEL_78:
        while (v46 != -4096)
        {
          if (v12)
            v47 = 0;
          else
            v47 = v46 == -8192;
          if (v47)
            v12 = v14;
          v48 = v9 + v45++;
          v9 = v48 & v8;
          v14 = (_QWORD *)(v6 + 40 * v9);
          v46 = *v14;
          if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_77;
        }
        goto LABEL_86;
      }
    }
LABEL_33:
    result = 1;
    *a3 = v14;
    return result;
  }
  v14 = 0;
  result = 0;
LABEL_20:
  *a3 = v14;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v55;
  __int128 *v56;
  char v57;
  char v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  BOOL v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[2];

  v95[1] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0)
  {
    v83 = a1;
    v84 = a4;
    v85 = a3;
    v86 = a2;
    a2 = v86;
    a3 = v85;
    a4 = v84;
    v88 = v87;
    a1 = v83;
    if (v88)
    {
      v89 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v89 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v89;
      a2 = v86;
      a1 = v83;
      a3 = v85;
      a4 = v84;
    }
  }
  if (a1 == a3)
  {
    if (a2 == a4)
    {
      v14 = 0;
    }
    else
    {
      *(_QWORD *)&v91 = *(_QWORD *)(a1 + 32 * a2 + 24);
      if (a2 + 1 == a4)
      {
        v14 = 8;
        ++a2;
      }
      else
      {
        *((_QWORD *)&v91 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 1) + 24);
        if (a2 + 2 == a4)
        {
          v14 = 16;
          a2 += 2;
        }
        else
        {
          *(_QWORD *)&v92 = *(_QWORD *)(a1 + 32 * (a2 + 2) + 24);
          if (a2 + 3 == a4)
          {
            v14 = 24;
            a2 += 3;
          }
          else
          {
            *((_QWORD *)&v92 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 3) + 24);
            if (a2 + 4 == a4)
            {
              v14 = 32;
              a2 += 4;
            }
            else
            {
              *(_QWORD *)&v93 = *(_QWORD *)(a1 + 32 * (a2 + 4) + 24);
              if (a2 + 5 == a4)
              {
                v14 = 40;
                a2 += 5;
              }
              else
              {
                *((_QWORD *)&v93 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 5) + 24);
                if (a2 + 6 == a4)
                {
                  v14 = 48;
                  a2 += 6;
                }
                else
                {
                  *(_QWORD *)&v94 = *(_QWORD *)(a1 + 32 * (a2 + 6) + 24);
                  if (a2 + 7 == a4)
                  {
                    v14 = 56;
                    a2 += 7;
                  }
                  else
                  {
                    *((_QWORD *)&v94 + 1) = *(_QWORD *)(a1 + 32 * (a2 + 7) + 24);
                    a2 += 8;
                    v14 = 64;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a2 == a4)
      return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v91, v14, llvm::hashing::detail::get_execution_seed(void)::seed);
    v7 = *((_QWORD *)&v91 + 1);
    v6 = v91;
    v9 = *((_QWORD *)&v92 + 1);
    v8 = v92;
    v11 = *((_QWORD *)&v93 + 1);
    v10 = v93;
    v13 = *((_QWORD *)&v94 + 1);
    v12 = v94;
  }
  else
  {
    v5 = (_QWORD *)(a1 + 32 * a2);
    v6 = v5[3];
    *(_QWORD *)&v91 = v6;
    v7 = v5[7];
    *((_QWORD *)&v91 + 1) = v7;
    v8 = v5[11];
    *(_QWORD *)&v92 = v8;
    v9 = v5[15];
    *((_QWORD *)&v92 + 1) = v9;
    v10 = v5[19];
    *(_QWORD *)&v93 = v10;
    v11 = v5[23];
    *((_QWORD *)&v93 + 1) = v11;
    v12 = v5[27];
    *(_QWORD *)&v94 = v12;
    v13 = v5[31];
    *((_QWORD *)&v94 + 1) = v13;
    a2 += 8;
  }
  v16 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v17 = __ROR8__(llvm::hashing::detail::get_execution_seed(void)::seed ^ 0xB492B66FBE98F273, 49);
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed ^ ((unint64_t)llvm::hashing::detail::get_execution_seed(void)::seed >> 47);
  v19 = 0x9DDFEA08EB382D69
      * (llvm::hashing::detail::get_execution_seed(void)::seed ^ (((0x9DDFEA08EB382D69
                                                                  * (v18 ^ (0xB492B66FBE98F273
                                                                          * llvm::hashing::detail::get_execution_seed(void)::seed))) ^ llvm::hashing::detail::get_execution_seed(void)::seed) >> 47) ^ (0x9DDFEA08EB382D69 * (v18 ^ (0xB492B66FBE98F273 * llvm::hashing::detail::get_execution_seed(void)::seed))));
  v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
  v21 = (0xB492B66FBE98F273 * __ROR8__(v17 + llvm::hashing::detail::get_execution_seed(void)::seed + v7, 37)) ^ v20;
  v22 = v11
      + v17
      - 0x4B6D499041670D8DLL
      * __ROR8__(v12+ llvm::hashing::detail::get_execution_seed(void)::seed- 0x4B6D499041670D8DLL * llvm::hashing::detail::get_execution_seed(void)::seed, 42);
  v23 = 0xB492B66FBE98F273 * __ROR8__(v18 - 0x622015F714C7D297 * (v16 ^ (v16 >> 47)), 33);
  v24 = v6 - 0x6D8ED9027DD26057 * llvm::hashing::detail::get_execution_seed(void)::seed;
  v25 = v24 + v7 + v8;
  v26 = __ROR8__(v25, 44) + v24 + __ROR8__(v21 + v18 + v24 + v9, 21);
  v27 = v25 + v9;
  v28 = v22 + v8;
  v29 = v20 + v10 + v23;
  v30 = v11 + v12 + v29;
  v31 = __ROR8__(v30, 44) + v29 + __ROR8__(v28 + v13 + v29, 21);
  v32 = v30 + v13;
  if (a1 != a3 || a2 != a4)
  {
    v90 = (char *)&v92 + 8;
    v33 = 64;
    while (1)
    {
      if (a1 == a3 && a2 == a4)
      {
        v37 = 0;
        a2 = a4;
      }
      else
      {
        *(_QWORD *)&v91 = *(_QWORD *)(a1 + 32 * a2 + 24);
        v38 = a2 + 1;
        if (a1 == a3 && v38 == a4)
        {
          v39 = 0;
          v37 = 8;
          ++a2;
          v40 = (char *)&v91 + 8;
        }
        else
        {
          *((_QWORD *)&v91 + 1) = *(_QWORD *)(a1 + 32 * v38 + 24);
          v41 = a2 + 2;
          if (a1 == a3 && v41 == a4)
          {
            v39 = 8;
            v37 = 16;
            a2 += 2;
            v40 = (char *)&v92;
          }
          else
          {
            *(_QWORD *)&v92 = *(_QWORD *)(a1 + 32 * v41 + 24);
            v42 = a2 + 3;
            if (a1 == a3 && v42 == a4)
            {
              v39 = 16;
              v37 = 24;
              a2 += 3;
              v40 = v90;
            }
            else
            {
              *((_QWORD *)&v92 + 1) = *(_QWORD *)(a1 + 32 * v42 + 24);
              v43 = a2 + 4;
              if (a1 == a3 && v43 == a4)
              {
                v39 = 24;
                v37 = 32;
                a2 += 4;
                v40 = (char *)&v93;
              }
              else
              {
                *(_QWORD *)&v93 = *(_QWORD *)(a1 + 32 * v43 + 24);
                v44 = a2 + 5;
                if (a1 == a3 && v44 == a4)
                {
                  v39 = 32;
                  v37 = 40;
                  a2 += 5;
                  v40 = (char *)&v93 + 8;
                }
                else
                {
                  *((_QWORD *)&v93 + 1) = *(_QWORD *)(a1 + 32 * v44 + 24);
                  v45 = a2 + 6;
                  if (a1 == a3 && v45 == a4)
                  {
                    v39 = 40;
                    v37 = 48;
                    a2 += 6;
                    v40 = (char *)&v94;
                  }
                  else
                  {
                    *(_QWORD *)&v94 = *(_QWORD *)(a1 + 32 * v45 + 24);
                    v46 = a2 + 7;
                    if (a1 == a3 && v46 == a4)
                    {
                      v39 = 48;
                      v37 = 56;
                      a2 += 7;
                      v40 = (char *)&v94 + 8;
                    }
                    else
                    {
                      *((_QWORD *)&v94 + 1) = *(_QWORD *)(a1 + 32 * v46 + 24);
                      a2 += 8;
                      v39 = 56;
                      v37 = 64;
                      v40 = (char *)v95;
                    }
                  }
                }
              }
            }
          }
        }
        if ((v37 & 0x38) == 0)
          goto LABEL_82;
        v47 = 56 - v39;
        v48 = v37;
        if (v37 != 56 - v39)
        {
          do
          {
            v55 = v48;
            v48 = v47;
            v47 = v55 % v47;
          }
          while (v47);
          if (v48)
          {
            v56 = (__int128 *)((char *)&v91 + v48);
            do
            {
              v58 = *((_BYTE *)v56 - 1);
              v56 = (__int128 *)((char *)v56 - 1);
              v57 = v58;
              v59 = (__int128 *)((char *)v56 + v37);
              v60 = v56;
              do
              {
                v61 = v60;
                v60 = v59;
                *(_BYTE *)v61 = *(_BYTE *)v59;
                v62 = v37 < (char *)v95 - (char *)v59;
                v63 = (char *)&v91 + v37 - ((char *)v95 - (char *)v59);
                v59 = (__int128 *)((char *)v59 + v37);
                if (!v62)
                  v59 = (__int128 *)v63;
              }
              while (v59 != v56);
              *(_BYTE *)v60 = v57;
            }
            while (v56 != &v91);
          }
          goto LABEL_82;
        }
        v49 = v39 | 7;
        if (55 - v39 < (v39 | 7uLL))
          v49 = 55 - v39;
        v50 = (char *)&v91;
        if (&v91 < (__int128 *)((char *)&v91 + v39 + v49 + 9))
        {
          v51 = v37;
          if (v40 < (char *)&v91 + v49 + 1)
            goto LABEL_60;
        }
        if (v49 >= 0x1F)
        {
          v65 = v49 + 1;
          v64 = (v49 + 1) & 0x60;
          v66 = (__int128 *)((char *)&v91 + v37);
          v67 = v91;
          v68 = v92;
          v69 = *(__int128 *)((char *)&v91 + v37 + 16);
          v91 = *(__int128 *)((char *)&v91 + v37);
          v92 = v69;
          *v66 = v67;
          v66[1] = v68;
          if (v64 != 32)
          {
            v70 = (__int128 *)((char *)&v93 + v37);
            v71 = v93;
            v72 = v94;
            v73 = *(__int128 *)((char *)&v93 + v37 + 16);
            v93 = *(__int128 *)((char *)&v93 + v37);
            v94 = v73;
            *v70 = v71;
            v70[1] = v72;
          }
          if (v65 == v64)
            goto LABEL_82;
          if ((v65 & 0x18) == 0)
          {
            v50 = (char *)&v91 + v64;
            v51 = v37 + v64;
LABEL_60:
            v52 = v50 + 1;
            do
            {
              v53 = *(v52 - 1);
              *(v52 - 1) = *((_BYTE *)&v91 + v51);
              *((_BYTE *)&v91 + v51) = v53;
              if (v52 == v40)
                break;
              ++v52;
            }
            while (v51++ != 63);
            goto LABEL_82;
          }
        }
        else
        {
          v64 = 0;
        }
        v74 = (uint64_t *)((char *)&v91 + v64);
        v75 = v49 - v64 + 1;
        do
        {
          v76 = *v74;
          *v74 = v74[(unint64_t)v37 / 8];
          v74[(unint64_t)v37 / 8] = v76;
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
LABEL_82:
      v77 = v22 + v27 + v23 + *((_QWORD *)&v91 + 1);
      v22 = *((_QWORD *)&v93 + 1) + v27 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v26 + v94, 42);
      v78 = v21 + v32;
      v79 = v91 - 0x4B6D499041670D8DLL * v26;
      v80 = v79 + *((_QWORD *)&v91 + 1) + v92;
      v21 = (0xB492B66FBE98F273 * __ROR8__(v77, 37)) ^ v31;
      v26 = __ROR8__(v80, 44) + v79 + __ROR8__(v21 + v32 + v79 + *((_QWORD *)&v92 + 1), 21);
      v23 = 0xB492B66FBE98F273 * __ROR8__(v78, 33);
      v81 = v23 + v31 + v93;
      v82 = *((_QWORD *)&v93 + 1) + v94 + v81;
      v27 = v80 + *((_QWORD *)&v92 + 1);
      v31 = __ROR8__(v22 + v92 + v81 + *((_QWORD *)&v94 + 1), 21) + v81 + __ROR8__(v82, 44);
      v32 = v82 + *((_QWORD *)&v94 + 1);
      v33 += v37;
      if (a1 == a3 && a2 == a4)
        goto LABEL_27;
    }
  }
  v33 = 64;
LABEL_27:
  v34 = 0x9DDFEA08EB382D69
      * (v31 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v31)));
  v35 = v23 - 0x4B6D499041670D8DLL * (v33 ^ (v33 >> 47)) - 0x622015F714C7D297 * (v34 ^ (v34 >> 47));
  v36 = 0x9DDFEA08EB382D69
      * (v35 ^ (v21
              - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47))
              - 0x622015F714C7D297
              * ((0x9DDFEA08EB382D69
                * (v32 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v32)))) ^ ((0x9DDFEA08EB382D69 * (v32 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v32)))) >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v35 ^ (v36 >> 47) ^ v36)) ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v36 >> 47) ^ v36)) >> 47));
}

_OWORD *llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 40 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + v10);
    llvm::deallocate_buffer(v4, (void *)v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 40 * v11 - 40;
    if (v12 < 0x28)
    {
      v13 = result;
LABEL_12:
      v17 = (_OWORD *)((char *)result + 40 * v11);
      do
      {
        *v13 = xmmword_207AB73F0;
        v13 = (_OWORD *)((char *)v13 + 40);
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x28 + 1;
    v13 = (_OWORD *)((char *)result + 40 * (v14 & 0xFFFFFFFFFFFFFFELL));
    v15 = v14 & 0xFFFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = xmmword_207AB73F0;
      *(_OWORD *)((char *)v16 + 40) = xmmword_207AB73F0;
      v16 += 5;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  void *v16;
  _OWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 40 * v6 - 40;
    if (v8 < 0x28)
    {
      v9 = *(_OWORD **)a1;
LABEL_7:
      v13 = (_OWORD *)(v7 + 40 * v6);
      do
      {
        *v9 = xmmword_207AB73F0;
        v9 = (_OWORD *)((char *)v9 + 40);
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x28 + 1;
    v9 = (_OWORD *)(v7 + 40 * (v10 & 0xFFFFFFFFFFFFFFELL));
    v11 = v10 & 0xFFFFFFFFFFFFFFELL;
    v12 = *(_OWORD **)a1;
    do
    {
      *v12 = xmmword_207AB73F0;
      *(_OWORD *)((char *)v12 + 40) = xmmword_207AB73F0;
      v12 += 5;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>,mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>,llvm::DenseMapInfo<mlir::SuccessorRange,void>,llvm::detail::DenseMapPair<mlir::SuccessorRange,llvm::SmallVector<mlir::Block *,1u>>>::LookupBucketFor<mlir::SuccessorRange>((uint64_t *)a1, (uint64_t *)v4, &v17);
        v14 = v17;
        *v17 = *(_OWORD *)v4;
        *((_QWORD *)v14 + 3) = 0x100000000;
        *((_QWORD *)v14 + 2) = v14 + 2;
        v15 = (uint64_t)(v14 + 1);
        if (*(_DWORD *)(v4 + 24))
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v15, v4 + 16);
        ++*(_DWORD *)(a1 + 8);
        v16 = *(void **)(v4 + 16);
        if ((void *)(v4 + 32) != v16)
          free(v16);
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::OperationEquivalence::ignoreValueEquivalence()
{
  return 1;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::Value,mlir::Value)>::callback_fn<mlir::LogicalResult ()(mlir::Value,mlir::Value)>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::Value,8u>>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,8u>,false>::growAndAssign(a1, a2, a3);
    return;
  }
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)a1;
    while (1)
    {
      if (v8 == a3)
        goto LABEL_9;
      v9 = *(unsigned int *)(a3 + 8);
      v10 = *(unsigned int *)(v8 + 8);
      if (v10 >= v9)
      {
        if ((_DWORD)v9)
          memmove(*(void **)v8, *(const void **)a3, 8 * v9);
        goto LABEL_8;
      }
      if (*(_DWORD *)(v8 + 12) >= v9)
      {
        if ((_DWORD)v10)
        {
          memmove(*(void **)v8, *(const void **)a3, 8 * v10);
          v11 = *(unsigned int *)(a3 + 8);
          if (v10 != v11)
            goto LABEL_21;
        }
        else
        {
          v10 = 0;
          v11 = *(unsigned int *)(a3 + 8);
          if (*(_DWORD *)(a3 + 8))
LABEL_21:
            memcpy((void *)(*(_QWORD *)v8 + 8 * v10), (const void *)(*(_QWORD *)a3 + 8 * v10), *(_QWORD *)a3 + 8 * v11 - (*(_QWORD *)a3 + 8 * v10));
        }
      }
      else
      {
        *(_DWORD *)(v8 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v9, 8);
        v10 = 0;
        v11 = *(unsigned int *)(a3 + 8);
        if (*(_DWORD *)(a3 + 8))
          goto LABEL_21;
      }
LABEL_8:
      *(_DWORD *)(v8 + 8) = v9;
LABEL_9:
      v8 += 80;
      if (!--v7)
      {
        v6 = *(unsigned int *)(a1 + 8);
        break;
      }
    }
  }
  v12 = v6 - a2;
  if (v6 < a2)
  {
    v13 = (_QWORD *)(*(_QWORD *)a1 + 80 * v6);
    while (1)
    {
      v16 = v13 + 2;
      *v13 = v13 + 2;
      v13[1] = 0x800000000;
      if (v13 == (_QWORD *)a3)
        goto LABEL_28;
      v17 = *(unsigned int *)(a3 + 8);
      if (!*(_DWORD *)(a3 + 8))
        goto LABEL_28;
      if (v17 < 9)
      {
        v14 = *(unsigned int *)(a3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v13, v13 + 2, *(unsigned int *)(a3 + 8), 8);
        v14 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v14)
          goto LABEL_27;
        v16 = (void *)*v13;
      }
      memcpy(v16, *(const void **)a3, 8 * v14);
LABEL_27:
      *((_DWORD *)v13 + 2) = v17;
LABEL_28:
      v13 += 10;
      if (__CFADD__(v12++, 1))
        goto LABEL_39;
    }
  }
  if (v6 > a2)
  {
    v18 = 80 * v6;
    v19 = (void **)(v18 + *(_QWORD *)a1 - 80);
    v20 = 80 * a2 - v18;
    do
    {
      if (v19 + 2 != *v19)
        free(*v19);
      v19 -= 10;
      v20 += 80;
    }
    while (v20);
  }
LABEL_39:
  *(_DWORD *)(a1 + 8) = a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,8u>,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t i;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;

  v19 = 0;
  v6 = (char *)(a1 + 16);
  v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 80, &v19);
  v8 = v7;
  if (a2)
  {
    v9 = v7;
    for (i = a2; i; --i)
    {
      v12 = v9 + 2;
      *v9 = v9 + 2;
      v9[1] = 0x800000000;
      if (v9 == (_QWORD *)a3)
        goto LABEL_6;
      v13 = *(unsigned int *)(a3 + 8);
      if (!*(_DWORD *)(a3 + 8))
        goto LABEL_6;
      if (v13 < 9)
      {
        v11 = *(unsigned int *)(a3 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(a3 + 8), 8);
        v11 = *(unsigned int *)(a3 + 8);
        if (!(_DWORD)v11)
          goto LABEL_5;
        v12 = (void *)*v9;
      }
      memcpy(v12, *(const void **)a3, 8 * v11);
LABEL_5:
      *((_DWORD *)v9 + 2) = v13;
LABEL_6:
      v9 += 10;
    }
  }
  v14 = *(char **)a1;
  v15 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v15)
  {
    v16 = 80 * v15;
    do
    {
      v17 = *(char **)&v14[v16 - 80];
      if (&v14[v16 - 64] != v17)
        free(v17);
      v16 -= 80;
    }
    while (v16);
    v14 = *(char **)a1;
  }
  v18 = v19;
  if (v14 != v6)
    free(v14);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v18;
}

_QWORD *llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::df_iterator(_QWORD *a1, void *a2, llvm::SmallPtrSetImplBase *this)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  a1[1] = 0;
  v5 = a1 + 1;
  *a1 = this;
  a1[2] = 0;
  a1[3] = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6 != *(_QWORD *)this)
    goto LABEL_2;
  v11 = *((unsigned int *)this + 5);
  if (!(_DWORD)v11)
  {
LABEL_22:
    if (v11 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v11 + 1;
      *(_QWORD *)(v6 + 8 * v11) = a2;
LABEL_3:
      v9 = (_BYTE *)a1[2];
      v8 = a1[3];
      if ((unint64_t)v9 >= v8)
      {
        v15 = (_BYTE *)*v5;
        v16 = (uint64_t)&v9[-*v5] >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          abort();
        v18 = v8 - (_QWORD)v15;
        if (v18 >> 4 > v17)
          v17 = v18 >> 4;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = (char *)operator new(32 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[32 * v16];
        *(_QWORD *)v21 = a2;
        v21[8] = 0;
        v21[24] = 0;
        v10 = v21 + 32;
        if (v9 != v15)
        {
          do
          {
            v22 = *((_OWORD *)v9 - 1);
            *((_OWORD *)v21 - 2) = *((_OWORD *)v9 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v21 -= 32;
            v9 -= 32;
          }
          while (v9 != v15);
          v9 = (_BYTE *)*v5;
        }
        a1[1] = v21;
        a1[2] = v10;
        a1[3] = &v20[32 * v19];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = a2;
        v9[8] = 0;
        v10 = v9 + 32;
        v9[24] = 0;
      }
      a1[2] = v10;
      return a1;
    }
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
    if (!v7)
      return a1;
    goto LABEL_3;
  }
  v12 = 0;
  v13 = 8 * v11;
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  while ((void *)*v14 != a2)
  {
    if (*v14 == -2)
      v12 = v14;
    ++v14;
    v13 -= 8;
    if (!v13)
    {
      if (!v12)
        goto LABEL_22;
      *v12 = a2;
      --*((_DWORD *)this + 6);
      goto LABEL_3;
    }
  }
  return a1;
}

void llvm::df_iterator<mlir::Block *,llvm::df_iterator_default_set<mlir::Block *,16u>,true,llvm::GraphTraits<mlir::Block *>>::toNext(llvm::SmallPtrSetImplBase **a1)
{
  uint64_t v2;
  mlir::Block *v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  llvm::SmallPtrSetImplBase *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::SmallPtrSetImplBase *v16;
  unint64_t v17;
  llvm::SmallPtrSetImplBase *v18;
  llvm::SmallPtrSetImplBase *v19;
  llvm::SmallPtrSetImplBase *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD v28[2];

  v2 = (uint64_t)a1[2];
  while (2)
  {
    v3 = *(mlir::Block **)(v2 - 32);
    if (!*(_BYTE *)(v2 - 8))
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v28, *(mlir::Block **)(v2 - 32));
      *(_QWORD *)(v2 - 24) = v28[0];
      *(_QWORD *)(v2 - 16) = 0;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v28, v3);
      v6 = *(_QWORD *)(v2 - 24);
      v7 = *(_QWORD *)(v2 - 16);
      if (v6 == v28[0] && v7 == v28[1])
        break;
      *(_QWORD *)(v2 - 16) = v7 + 1;
      v9 = *(const void **)(v6 + 32 * v7 + 24);
      v10 = *a1;
      v11 = *((_QWORD *)*a1 + 1);
      if (v11 != *(_QWORD *)*a1)
        goto LABEL_4;
      v12 = *((unsigned int *)v10 + 5);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = 8 * v12;
        v15 = (_QWORD *)*((_QWORD *)*a1 + 1);
        do
        {
          if ((const void *)*v15 == v9)
          {
            v5 = 0;
            goto LABEL_5;
          }
          if (*v15 == -2)
            v13 = v15;
          ++v15;
          v14 -= 8;
        }
        while (v14);
        if (!v13)
          goto LABEL_19;
        *v13 = v9;
        --*((_DWORD *)v10 + 6);
        v5 = 1;
        goto LABEL_5;
      }
LABEL_19:
      if (v12 < *((_DWORD *)v10 + 4))
      {
        *((_DWORD *)v10 + 5) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v9;
        v5 = 1;
      }
      else
      {
LABEL_4:
        llvm::SmallPtrSetImplBase::insert_imp_big(v10, v9);
        v5 = v4;
      }
LABEL_5:
      if (v5)
      {
        v18 = a1[2];
        v17 = (unint64_t)a1[3];
        if ((unint64_t)v18 >= v17)
        {
          v20 = a1[1];
          v21 = (v18 - v20) >> 5;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59)
            abort();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 4 > v22)
            v22 = v23 >> 4;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
            v24 = 0x7FFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 59)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v25 = (char *)operator new(32 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[32 * v21];
          *(_QWORD *)v26 = v9;
          v26[8] = 0;
          v26[24] = 0;
          v19 = (llvm::SmallPtrSetImplBase *)(v26 + 32);
          if (v18 != v20)
          {
            do
            {
              v27 = *((_OWORD *)v18 - 1);
              *((_OWORD *)v26 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v26 - 1) = v27;
              v26 -= 32;
              v18 = (llvm::SmallPtrSetImplBase *)((char *)v18 - 32);
            }
            while (v18 != v20);
            v18 = a1[1];
          }
          a1[1] = (llvm::SmallPtrSetImplBase *)v26;
          a1[2] = v19;
          a1[3] = (llvm::SmallPtrSetImplBase *)&v25[32 * v24];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v18 = v9;
          *((_BYTE *)v18 + 8) = 0;
          v19 = (llvm::SmallPtrSetImplBase *)((char *)v18 + 32);
          *((_BYTE *)v18 + 24) = 0;
        }
        a1[2] = v19;
        return;
      }
    }
    v16 = a1[1];
    v2 = (uint64_t)a1[2] - 32;
    a1[2] = (llvm::SmallPtrSetImplBase *)v2;
    if (v16 != (llvm::SmallPtrSetImplBase *)v2)
      continue;
    break;
  }
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getMixedOffsets(mlir::OffsetSizeAndStrideOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 64))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getMixedSizes(mlir::OffsetSizeAndStrideOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 72))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getMixedStrides(mlir::OffsetSizeAndStrideOpInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 80))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

uint64_t mlir::OffsetSizeAndStrideOpInterface::getDynamicSize(mlir::OffsetSizeAndStrideOpInterface *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*((_QWORD *)this + 1) + 168))(*((_QWORD *)this + 1), *(_QWORD *)this, a2);
}

uint64_t mlir::verifyListOfOperandsOrIntegers(uint64_t *a1, const void **a2, const char *a3, unsigned int a4, int64x2_t *a5, const char *a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  const void ***v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64x2_t *v44;
  int64x2_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  const char *v50;
  const void ***v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  const void ***v56;
  char *v57;
  char *v58;
  __int128 v59;
  const void ***v60;
  char *v61;
  char *v62;
  __int128 v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  _QWORD v88[4];
  __int16 v89;
  const void **v90;
  const char *v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  _BYTE v95[16];
  void *v96;
  unsigned int v97;
  unsigned int v98;
  _BYTE v99[96];
  void *v100;
  _QWORD *v101;
  void *__p;
  _QWORD *v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v11 = (const char *)a4;
  if (a6 == (const char *)a4)
  {
    if (!a6)
    {
      v13 = 0;
      goto LABEL_36;
    }
    v12 = (unint64_t)(a6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 >= 3)
    {
      v42 = v12 + 1;
      v43 = (v12 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v14 = &a5->i64[v43];
      v44 = a5 + 1;
      v45 = 0uLL;
      v46 = vdupq_n_s64(0x8000000000000000);
      v47 = v43;
      v48 = 0uLL;
      do
      {
        v45 = vsubq_s64(v45, vceqq_s64(v44[-1], v46));
        v48 = vsubq_s64(v48, vceqq_s64(*v44, v46));
        v44 += 2;
        v47 -= 4;
      }
      while (v47);
      v13 = vaddvq_s64(vaddq_s64(v48, v45));
      if (v42 == v43)
        goto LABEL_36;
    }
    else
    {
      v13 = 0;
      v14 = (uint64_t *)a5;
    }
    do
    {
      v49 = *v14++;
      if (v49 == 0x8000000000000000)
        ++v13;
    }
    while (v14 != (uint64_t *)((char *)a5 + 8 * (_QWORD)a6));
LABEL_36:
    v50 = (const char *)v13;
    if (a8 == v13)
      return 1;
    v88[0] = "expected ";
    v89 = 259;
    mlir::Operation::emitError(a1, (uint64_t)v88, (uint64_t)&v94);
    if (v94)
    {
      LODWORD(v90) = 5;
      v91 = v50;
      v51 = &v90;
      v52 = (char *)v96;
      if (v97 >= v98)
      {
        v74 = v97 + 1;
        if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
        {
          v83 = (char *)&v90 - (_BYTE *)v96;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v74, 24);
          v52 = (char *)v96;
          v51 = (const void ***)((char *)v96 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v74, 24);
          v51 = &v90;
          v52 = (char *)v96;
        }
      }
      v53 = &v52[24 * v97];
      v54 = *(_OWORD *)v51;
      *((_QWORD *)v53 + 2) = v51[2];
      *(_OWORD *)v53 = v54;
      v55 = ++v97;
      if (v94)
      {
        LODWORD(v90) = 3;
        v91 = " dynamic ";
        v92 = 9;
        v56 = &v90;
        v57 = (char *)v96;
        if (v55 >= v98)
        {
          v75 = v55 + 1;
          v76 = (char *)v96 + 24 * v55 > (char *)&v90;
          if (v96 <= &v90 && v76)
          {
            v84 = (char *)&v90 - (_BYTE *)v96;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v75, 24);
            v57 = (char *)v96;
            v56 = (const void ***)((char *)v96 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v75, 24);
            v56 = &v90;
            v57 = (char *)v96;
          }
        }
        v58 = &v57[24 * v97];
        v59 = *(_OWORD *)v56;
        *((_QWORD *)v58 + 2) = v56[2];
        *(_OWORD *)v58 = v59;
        ++v97;
        if (v94)
        {
          v93 = 261;
          v90 = a2;
          v91 = a3;
          mlir::Diagnostic::operator<<((uint64_t)v95, &v90);
          if (v94)
          {
            LODWORD(v90) = 3;
            v91 = " values";
            v92 = 7;
            v60 = &v90;
            v61 = (char *)v96;
            if (v97 >= v98)
            {
              v80 = v97 + 1;
              if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
              {
                v87 = (char *)&v90 - (_BYTE *)v96;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v80, 24);
                v61 = (char *)v96;
                v60 = (const void ***)((char *)v96 + v87);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v80, 24);
                v60 = &v90;
                v61 = (char *)v96;
              }
            }
            v62 = &v61[24 * v97];
            v63 = *(_OWORD *)v60;
            *((_QWORD *)v62 + 2) = v60[2];
            *(_OWORD *)v62 = v63;
            ++v97;
          }
        }
      }
    }
    v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
    if (v94)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
    if (v104)
    {
      v64 = __p;
      if (__p)
      {
        v65 = v103;
        v66 = __p;
        if (v103 != __p)
        {
          do
            v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
          while (v65 != v64);
          v66 = __p;
        }
        v103 = v64;
        operator delete(v66);
      }
      v37 = v100;
      if (!v100)
        goto LABEL_62;
      v67 = v101;
      v39 = v100;
      if (v101 == v100)
      {
LABEL_61:
        v101 = v37;
        operator delete(v39);
LABEL_62:
        if (v96 != v99)
          free(v96);
        return v33;
      }
      do
      {
        v69 = *--v67;
        v68 = v69;
        *v67 = 0;
        if (v69)
          MEMORY[0x20BD002D4](v68, 0x1000C8077774924);
      }
      while (v67 != v37);
LABEL_60:
      v39 = v100;
      goto LABEL_61;
    }
    return v33;
  }
  v88[0] = "expected ";
  v89 = 259;
  mlir::Operation::emitError(a1, (uint64_t)v88, (uint64_t)&v94);
  if (v94)
  {
    LODWORD(v90) = 5;
    v91 = v11;
    v15 = &v90;
    v16 = (char *)v96;
    if (v97 >= v98)
    {
      v71 = v97 + 1;
      if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
      {
        v81 = (char *)&v90 - (_BYTE *)v96;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v71, 24);
        v16 = (char *)v96;
        v15 = (const void ***)((char *)v96 + v81);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v71, 24);
        v15 = &v90;
        v16 = (char *)v96;
      }
    }
    v17 = &v16[24 * v97];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    v19 = ++v97;
    if (v94)
    {
      LODWORD(v90) = 3;
      v91 = " ";
      v92 = 1;
      v20 = &v90;
      v21 = (char *)v96;
      if (v19 >= v98)
      {
        v72 = v19 + 1;
        v73 = (char *)v96 + 24 * v19 > (char *)&v90;
        if (v96 <= &v90 && v73)
        {
          v82 = (char *)&v90 - (_BYTE *)v96;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v72, 24);
          v21 = (char *)v96;
          v20 = (const void ***)((char *)v96 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v72, 24);
          v20 = &v90;
          v21 = (char *)v96;
        }
      }
      v22 = &v21[24 * v97];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      ++v97;
      if (v94)
      {
        v93 = 261;
        v90 = a2;
        v91 = a3;
        mlir::Diagnostic::operator<<((uint64_t)v95, &v90);
        if (v94)
        {
          LODWORD(v90) = 3;
          v91 = " values, got ";
          v92 = 13;
          v24 = &v90;
          v25 = (char *)v96;
          if (v97 >= v98)
          {
            v77 = v97 + 1;
            if (v96 <= &v90 && (char *)v96 + 24 * v97 > (char *)&v90)
            {
              v85 = (char *)&v90 - (_BYTE *)v96;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v77, 24);
              v25 = (char *)v96;
              v24 = (const void ***)((char *)v96 + v85);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v77, 24);
              v24 = &v90;
              v25 = (char *)v96;
            }
          }
          v26 = &v25[24 * v97];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = v24[2];
          *(_OWORD *)v26 = v27;
          v28 = ++v97;
          if (v94)
          {
            LODWORD(v90) = 5;
            v91 = a6;
            v29 = &v90;
            v30 = (char *)v96;
            if (v28 >= v98)
            {
              v78 = v28 + 1;
              v79 = (char *)v96 + 24 * v28 > (char *)&v90;
              if (v96 <= &v90 && v79)
              {
                v86 = (char *)&v90 - (_BYTE *)v96;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v78, 24);
                v30 = (char *)v96;
                v29 = (const void ***)((char *)v96 + v86);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v96, v99, v78, 24);
                v29 = &v90;
                v30 = (char *)v96;
              }
            }
            v31 = &v30[24 * v97];
            v32 = *(_OWORD *)v29;
            *((_QWORD *)v31 + 2) = v29[2];
            *(_OWORD *)v31 = v32;
            ++v97;
          }
        }
      }
    }
  }
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
  if (v94)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
  if (v104)
  {
    v34 = __p;
    if (__p)
    {
      v35 = v103;
      v36 = __p;
      if (v103 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v103 = v34;
      operator delete(v36);
    }
    v37 = v100;
    if (!v100)
      goto LABEL_62;
    v38 = v101;
    v39 = v100;
    if (v101 == v100)
      goto LABEL_61;
    do
    {
      v41 = *--v38;
      v40 = v41;
      *v38 = 0;
      if (v41)
        MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
    }
    while (v38 != v37);
    goto LABEL_60;
  }
  return v33;
}

uint64_t mlir::detail::verifyOffsetSizeAndStrideOp(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  _BOOL4 v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int64x2_t *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  unint64_t v43;
  int64x2_t *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  int64x2_t *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  unint64_t v53;
  const char **v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char **v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  int *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  _QWORD v131[4];
  __int16 v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136[2];
  unint64_t v137[2];
  unint64_t v138[2];
  void *v139;
  int v140;
  uint64_t v141;
  void *v142;
  unsigned int v143;
  unsigned int v144;
  _BYTE v145[96];
  void *v146;
  _QWORD *v147;
  void *__p;
  _QWORD *v149;
  char v150;
  _QWORD *v151;
  unint64_t v152;
  _QWORD v153[4];
  char *v154;
  unsigned int v155;
  _BYTE v156[16];
  __int16 v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 8))(a2, a1);
  v6 = v5;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(a2 + 64))(&v139, a2, a1);
  if (v140 == 1 && (_DWORD)v4 == 1)
  {
    v9 = 0;
  }
  else
  {
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 64))(&v154, a2, a1);
    v8 = v155;
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v151, a2, a1);
    v9 = v8 != v152;
    if (v151 != v153)
      free(v151);
    if (v154 != v156)
      free(v154);
  }
  if (v139 != &v141)
    free(v139);
  if (v9)
  {
    v131[0] = "expected mixed offsets rank to match mixed sizes rank (";
    v132 = 259;
    mlir::Operation::emitError(a1, (uint64_t)v131, (uint64_t)&v139);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 64))(&v154, a2, a1);
    if (v139)
    {
      LODWORD(v151) = 5;
      v152 = v155;
      v10 = (char *)&v151;
      v11 = (char *)v142;
      if (v143 >= v144)
      {
        v107 = v143 + 1;
        if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
        {
          v121 = (char *)&v151 - (_BYTE *)v142;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v107, 24);
          v11 = (char *)v142;
          v10 = (char *)v142 + v121;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v107, 24);
          v10 = (char *)&v151;
          v11 = (char *)v142;
        }
      }
      v12 = &v11[24 * v143];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v143;
      if (v139)
      {
        LODWORD(v151) = 3;
        v152 = (unint64_t)" vs ";
        v153[0] = 4;
        v15 = (char *)&v151;
        v16 = (char *)v142;
        if (v14 >= v144)
        {
          v109 = v14 + 1;
          v110 = (char *)v142 + 24 * v14 > (char *)&v151;
          if (v142 <= &v151 && v110)
          {
            v123 = (char *)&v151 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v109, 24);
            v16 = (char *)v142;
            v15 = (char *)v142 + v123;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v109, 24);
            v15 = (char *)&v151;
            v16 = (char *)v142;
          }
        }
        v17 = &v16[24 * v143];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        ++v143;
      }
    }
    (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v151, a2, a1);
    if (v139)
    {
      v133 = 5;
      v134 = v152;
      v19 = &v133;
      v20 = (char *)v142;
      if (v143 >= v144)
      {
        v108 = v143 + 1;
        if (v142 <= &v133 && (char *)v142 + 24 * v143 > (char *)&v133)
        {
          v122 = (char *)&v133 - (_BYTE *)v142;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v108, 24);
          v20 = (char *)v142;
          v19 = (int *)((char *)v142 + v122);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v108, 24);
          v19 = &v133;
          v20 = (char *)v142;
        }
      }
      v21 = &v20[24 * v143];
      v22 = *(_OWORD *)v19;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v21 = v22;
      v23 = ++v143;
      if (v139)
      {
        v133 = 3;
        v134 = (unint64_t)") so the rank of the result type is well-formed.";
        v135 = 48;
        v24 = &v133;
        v25 = (char *)v142;
        if (v23 >= v144)
        {
          v111 = v23 + 1;
          v112 = (char *)v142 + 24 * v23 > (char *)&v133;
          if (v142 <= &v133 && v112)
          {
            v124 = (char *)&v133 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v111, 24);
            v25 = (char *)v142;
            v24 = (int *)((char *)v142 + v124);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v111, 24);
            v24 = &v133;
            v25 = (char *)v142;
          }
        }
        v26 = &v25[24 * v143];
        v27 = *(_OWORD *)v24;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v26 = v27;
        ++v143;
      }
    }
    v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
    if (v151 != v153)
      free(v151);
    if (v154 != v156)
      free(v154);
    if (v139)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
    if (v150)
    {
      v29 = __p;
      if (__p)
      {
        v30 = v149;
        v31 = __p;
        if (v149 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v149 = v29;
        operator delete(v31);
      }
      v32 = v146;
      if (!v146)
        goto LABEL_124;
      v33 = v147;
      v34 = v146;
      if (v147 == v146)
      {
LABEL_123:
        v147 = v32;
        operator delete(v34);
LABEL_124:
        if (v142 != v145)
          free(v142);
        return v28;
      }
      do
      {
        v36 = *--v33;
        v35 = v36;
        *v33 = 0;
        if (v36)
          MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
      }
      while (v33 != v32);
LABEL_122:
      v34 = v146;
      goto LABEL_123;
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v139, a2, a1);
    v37 = v140;
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 80))(&v154, a2, a1);
    v38 = v155;
    if (v154 != v156)
      free(v154);
    if (v139 != &v141)
      free(v139);
    if (v37 == v38)
    {
      v39 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 40))(a2, a1);
      v41 = v40;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 16))(a2, a1);
      mlir::ValueRange::ValueRange(v138, v42, v43);
      if (!mlir::verifyListOfOperandsOrIntegers(a1, (const void **)"offset", (const char *)6, v4, v39, v41, v138[0], v138[1]))return 0;
      v44 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 48))(a2, a1);
      v46 = v45;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 24))(a2, a1);
      mlir::ValueRange::ValueRange(v137, v47, v48);
      if (!mlir::verifyListOfOperandsOrIntegers(a1, (const void **)"size", (const char *)4, HIDWORD(v4), v44, v46, v137[0], v137[1]))return 0;
      v49 = (int64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 56))(a2, a1);
      v51 = v50;
      v52 = (*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 32))(a2, a1);
      mlir::ValueRange::ValueRange(v136, v52, v53);
      if (!mlir::verifyListOfOperandsOrIntegers(a1, (const void **)"stride", (const char *)6, v6, v49, v51, v136[0], v136[1]))return 0;
      v54 = (const char **)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 40))(a2, a1);
      if (v55)
      {
        v56 = 8 * v55;
        while (1)
        {
          v57 = *v54;
          if ((unint64_t)*v54 >= 0x8000000000000001)
            break;
          ++v54;
          v56 -= 8;
          if (!v56)
            goto LABEL_53;
        }
        v154 = "expected offsets to be non-negative, but got ";
        v157 = 259;
        mlir::Operation::emitError(a1, (uint64_t)&v154, (uint64_t)&v139);
        if (v139)
        {
          LODWORD(v151) = 2;
          v152 = (unint64_t)v57;
          v86 = (char *)&v151;
          v87 = (char *)v142;
          if (v143 >= v144)
          {
            v119 = v143 + 1;
            if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
            {
              v129 = (char *)&v151 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v119, 24);
              v87 = (char *)v142;
              v86 = (char *)v142 + v129;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v119, 24);
              v86 = (char *)&v151;
              v87 = (char *)v142;
            }
          }
          v88 = &v87[24 * v143];
          v89 = *(_OWORD *)v86;
          *((_QWORD *)v88 + 2) = *((_QWORD *)v86 + 2);
          *(_OWORD *)v88 = v89;
          ++v143;
        }
        v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
        if (v139)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
        if (v150)
        {
          v90 = __p;
          if (__p)
          {
            v91 = v149;
            v92 = __p;
            if (v149 != __p)
            {
              do
                v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
              while (v91 != v90);
              v92 = __p;
            }
            v149 = v90;
            operator delete(v92);
          }
          v32 = v146;
          if (!v146)
            goto LABEL_124;
          v93 = v147;
          v34 = v146;
          if (v147 == v146)
            goto LABEL_123;
          do
          {
            v95 = *--v93;
            v94 = v95;
            *v93 = 0;
            if (v95)
              MEMORY[0x20BD002D4](v94, 0x1000C8077774924);
          }
          while (v93 != v32);
          goto LABEL_122;
        }
      }
      else
      {
LABEL_53:
        v58 = (const char **)(*(uint64_t (**)(uint64_t, uint64_t *))(a2 + 48))(a2, a1);
        if (!v59)
          return 1;
        v60 = 8 * v59;
        while (1)
        {
          v61 = *v58;
          if ((unint64_t)*v58 >= 0x8000000000000001)
            break;
          ++v58;
          v28 = 1;
          v60 -= 8;
          if (!v60)
            return v28;
        }
        v154 = "expected sizes to be non-negative, but got ";
        v157 = 259;
        mlir::Operation::emitError(a1, (uint64_t)&v154, (uint64_t)&v139);
        if (v139)
        {
          LODWORD(v151) = 2;
          v152 = (unint64_t)v61;
          v96 = (char *)&v151;
          v97 = (char *)v142;
          if (v143 >= v144)
          {
            v120 = v143 + 1;
            if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
            {
              v130 = (char *)&v151 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v120, 24);
              v97 = (char *)v142;
              v96 = (char *)v142 + v130;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v120, 24);
              v96 = (char *)&v151;
              v97 = (char *)v142;
            }
          }
          v98 = &v97[24 * v143];
          v99 = *(_OWORD *)v96;
          *((_QWORD *)v98 + 2) = *((_QWORD *)v96 + 2);
          *(_OWORD *)v98 = v99;
          ++v143;
        }
        v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
        if (v139)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
        if (v150)
        {
          v100 = __p;
          if (__p)
          {
            v101 = v149;
            v102 = __p;
            if (v149 != __p)
            {
              do
                v101 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v101 - 1);
              while (v101 != v100);
              v102 = __p;
            }
            v149 = v100;
            operator delete(v102);
          }
          v32 = v146;
          if (!v146)
            goto LABEL_124;
          v103 = v147;
          v34 = v146;
          if (v147 == v146)
            goto LABEL_123;
          do
          {
            v105 = *--v103;
            v104 = v105;
            *v103 = 0;
            if (v105)
              MEMORY[0x20BD002D4](v104, 0x1000C8077774924);
          }
          while (v103 != v32);
          goto LABEL_122;
        }
      }
    }
    else
    {
      v131[0] = "expected mixed sizes rank to match mixed strides rank (";
      v132 = 259;
      mlir::Operation::emitError(a1, (uint64_t)v131, (uint64_t)&v139);
      (*(void (**)(char **__return_ptr, uint64_t, uint64_t *))(a2 + 72))(&v154, a2, a1);
      if (v139)
      {
        LODWORD(v151) = 5;
        v152 = v155;
        v62 = (char *)&v151;
        v63 = (char *)v142;
        if (v143 >= v144)
        {
          v113 = v143 + 1;
          if (v142 <= &v151 && (char *)v142 + 24 * v143 > (char *)&v151)
          {
            v125 = (char *)&v151 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v113, 24);
            v63 = (char *)v142;
            v62 = (char *)v142 + v125;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v113, 24);
            v62 = (char *)&v151;
            v63 = (char *)v142;
          }
        }
        v64 = &v63[24 * v143];
        v65 = *(_OWORD *)v62;
        *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
        *(_OWORD *)v64 = v65;
        v66 = ++v143;
        if (v139)
        {
          LODWORD(v151) = 3;
          v152 = (unint64_t)" vs ";
          v153[0] = 4;
          v67 = (char *)&v151;
          v68 = (char *)v142;
          if (v66 >= v144)
          {
            v115 = v66 + 1;
            v116 = (char *)v142 + 24 * v66 > (char *)&v151;
            if (v142 <= &v151 && v116)
            {
              v127 = (char *)&v151 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v115, 24);
              v68 = (char *)v142;
              v67 = (char *)v142 + v127;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v115, 24);
              v67 = (char *)&v151;
              v68 = (char *)v142;
            }
          }
          v69 = &v68[24 * v143];
          v70 = *(_OWORD *)v67;
          *((_QWORD *)v69 + 2) = *((_QWORD *)v67 + 2);
          *(_OWORD *)v69 = v70;
          ++v143;
        }
      }
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t *))(a2 + 80))(&v151, a2, a1);
      if (v139)
      {
        v133 = 5;
        v134 = v152;
        v71 = &v133;
        v72 = (char *)v142;
        if (v143 >= v144)
        {
          v114 = v143 + 1;
          if (v142 <= &v133 && (char *)v142 + 24 * v143 > (char *)&v133)
          {
            v126 = (char *)&v133 - (_BYTE *)v142;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v114, 24);
            v72 = (char *)v142;
            v71 = (int *)((char *)v142 + v126);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v114, 24);
            v71 = &v133;
            v72 = (char *)v142;
          }
        }
        v73 = &v72[24 * v143];
        v74 = *(_OWORD *)v71;
        *((_QWORD *)v73 + 2) = *((_QWORD *)v71 + 2);
        *(_OWORD *)v73 = v74;
        v75 = ++v143;
        if (v139)
        {
          v133 = 3;
          v134 = (unint64_t)") so the rank of the result type is well-formed.";
          v135 = 48;
          v76 = &v133;
          v77 = (char *)v142;
          if (v75 >= v144)
          {
            v117 = v75 + 1;
            v118 = (char *)v142 + 24 * v75 > (char *)&v133;
            if (v142 <= &v133 && v118)
            {
              v128 = (char *)&v133 - (_BYTE *)v142;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v117, 24);
              v77 = (char *)v142;
              v76 = (int *)((char *)v142 + v128);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v145, v117, 24);
              v76 = &v133;
              v77 = (char *)v142;
            }
          }
          v78 = &v77[24 * v143];
          v79 = *(_OWORD *)v76;
          *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
          *(_OWORD *)v78 = v79;
          ++v143;
        }
      }
      v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v139);
      if (v151 != v153)
        free(v151);
      if (v154 != v156)
        free(v154);
      if (v139)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v139);
      if (v150)
      {
        v80 = __p;
        if (__p)
        {
          v81 = v149;
          v82 = __p;
          if (v149 != __p)
          {
            do
              v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
            while (v81 != v80);
            v82 = __p;
          }
          v149 = v80;
          operator delete(v82);
        }
        v32 = v146;
        if (!v146)
          goto LABEL_124;
        v83 = v147;
        v34 = v146;
        if (v147 == v146)
          goto LABEL_123;
        do
        {
          v85 = *--v83;
          v84 = v85;
          *v83 = 0;
          if (v85)
            MEMORY[0x20BD002D4](v84, 0x1000C8077774924);
        }
        while (v83 != v32);
        goto LABEL_122;
      }
    }
  }
  return v28;
}

llvm::raw_ostream *mlir::printDynamicIndexList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  char v14;
  unsigned int v15;
  unsigned int v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::raw_ostream *v22;
  _WORD *v23;
  unint64_t v24;
  llvm::raw_ostream *result;
  _BYTE *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[6];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v29[0] = a3;
  v29[1] = a4;
  v31[0] = a7;
  v31[1] = a8;
  v28[0] = a9;
  v28[1] = a10;
  v14 = 8 * a11 - 8;
  v15 = 0x7B3C5B28u >> v14;
  v16 = 0x7D3E5D29u >> v14;
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, v15);
    if (a6)
    {
LABEL_3:
      v27 = 0;
      v30[0] = v28;
      v30[1] = &v27;
      v30[2] = a1;
      v30[3] = v29;
      v30[4] = (char *)&v27 + 4;
      v30[5] = v31;
      mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()((uint64_t)v30, *a5);
      if (a6 != 1)
      {
        v19 = a5 + 1;
        v20 = 8 * a6 - 8;
        do
        {
          while (1)
          {
            v22 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
            v23 = (_WORD *)*((_QWORD *)v22 + 4);
            if (*((_QWORD *)v22 + 3) - (_QWORD)v23 <= 1uLL)
              break;
            *v23 = 8236;
            *((_QWORD *)v22 + 4) += 2;
            v21 = *v19++;
            mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()((uint64_t)v30, v21);
            v20 -= 8;
            if (!v20)
              goto LABEL_8;
          }
          llvm::raw_ostream::write(v22, ", ", 2uLL);
          v24 = *v19++;
          mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()((uint64_t)v30, v24);
          v20 -= 8;
        }
        while (v20);
      }
LABEL_8:
      result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v26 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v26 >= *((_QWORD *)result + 3))
        return llvm::raw_ostream::write(result, v16);
      goto LABEL_12;
    }
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = v15;
    if (a6)
      goto LABEL_3;
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v26 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v26 < *((_QWORD *)result + 3))
  {
LABEL_12:
    *((_QWORD *)result + 4) = v26 + 1;
    *v26 = v16;
    return result;
  }
  return llvm::raw_ostream::write(result, v16);
}

uint64_t mlir::parseDynamicIndexList(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  mlir::MLIRContext **v9;
  mlir::MLIRContext **v10;
  uint64_t v11;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28[32];
  __int16 v29;
  _QWORD v30[5];
  void *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x24BDAC8D0];
  v34 = a5;
  v48 = v50;
  v49 = 0x400000000;
  v32 = xmmword_207A80460;
  v30[0] = a1;
  v30[1] = &v31;
  v30[2] = a2;
  v30[3] = &v48;
  v30[4] = &v34;
  v31 = &v33;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t, BOOL (*)(uint64_t *), _QWORD *, const char *, uint64_t))(*(_QWORD *)a1 + 360))(a1, a6, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::parseDynamicIndexList(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::detail::DenseArrayAttrImpl<long long> &,mlir::detail::DenseArrayAttrImpl<BOOL> &,llvm::SmallVectorImpl<mlir::Type> *,mlir::AsmParser::Delimiter)::$_0>, v30, " in dynamic index list", 22))
  {
    v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    *a3 = mlir::Builder::getDenseI64ArrayAttr(v9, (uint64_t)v48, v49);
    v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    *a4 = mlir::Builder::getDenseBoolArrayAttr(v10, (uint64_t)v31, v32);
    v11 = 1;
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v29 = 257;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v38, a1, v13, v28);
    if (v38[0])
    {
      v35 = 3;
      v36 = "expected SSA value or integer";
      v37 = 29;
      v14 = &v35;
      v15 = (char *)v39;
      if (v40 >= v41)
      {
        v26 = v40 + 1;
        if (v39 <= &v35 && (char *)v39 + 24 * v40 > (char *)&v35)
        {
          v27 = (char *)&v35 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
          v15 = (char *)v39;
          v14 = (int *)((char *)v39 + v27);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
          v14 = &v35;
          v15 = (char *)v39;
        }
      }
      v16 = &v15[24 * v40];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v40;
    }
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v38);
    if (v38[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
    if (v47)
    {
      v18 = __p;
      if (__p)
      {
        v19 = v46;
        v20 = __p;
        if (v46 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v46 = v18;
        operator delete(v20);
      }
      v21 = v43;
      if (v43)
      {
        v22 = v44;
        v23 = v43;
        if (v44 != v43)
        {
          do
          {
            v25 = *--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
          }
          while (v22 != v21);
          v23 = v43;
        }
        v44 = v21;
        operator delete(v23);
      }
      if (v39 != v42)
        free(v39);
    }
  }
  if (v31 != &v33)
    free(v31);
  if (v48 != v50)
    free(v48);
  return v11;
}

uint64_t mlir::detail::sameOffsetsSizesAndStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  void *__src;
  uint64_t v59;
  _BYTE v60[32];
  void *__dst;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[6];

  v66[4] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a2, a1);
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a4, a3);
  if (v12 != v13)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a2, a1);
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a4, a3);
  if (v15 != v16)
    return 0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a2, a1);
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a4, a3);
  if (v18 != v19)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 64))(&__src, a2, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a4 + 64))(&v55, a4, a3);
  __dst = v63;
  v62 = 0x400000000;
  v20 = v59;
  if ((_DWORD)v59)
  {
    if (__src == v60)
    {
      v21 = v59;
      if (v59 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v59, 8), (v21 = v59) != 0))
      {
        memcpy(__dst, __src, 8 * v21);
      }
      LODWORD(v62) = v20;
    }
    else
    {
      __dst = __src;
      v62 = v59;
      __src = v60;
      HIDWORD(v59) = 0;
    }
    LODWORD(v59) = 0;
  }
  v64 = v66;
  v65 = 0x400000000;
  v22 = v56;
  v23 = v55;
  if ((_DWORD)v56)
  {
    if (v55 != v57)
    {
      v64 = v55;
      v65 = v56;
      v55 = v57;
      HIDWORD(v56) = 0;
      v23 = v57;
LABEL_21:
      LODWORD(v56) = 0;
      goto LABEL_22;
    }
    if (v56 < 5)
    {
      v24 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v56, 8);
      v24 = v56;
      v23 = v55;
      if (!(_DWORD)v56)
        goto LABEL_20;
    }
    memcpy(v64, v23, 8 * v24);
    v23 = v55;
LABEL_20:
    LODWORD(v65) = v22;
    goto LABEL_21;
  }
LABEL_22:
  if (v23 != v57)
    free(v23);
  if (__src != v60)
    free(__src);
  v25 = v64;
  v26 = 1;
  if ((_DWORD)v62 && (_DWORD)v65)
  {
    v27 = __dst;
    v28 = 8 * v65 - 8;
    v29 = 8 * v62 - 8;
    do
    {
      v26 = a5(a6, *v27, *v25);
      if (!v26)
        break;
      if (!v29)
        break;
      ++v27;
      ++v25;
      v30 = v28;
      v28 -= 8;
      v29 -= 8;
    }
    while (v30);
    v25 = v64;
  }
  if (v25 != v66)
    free(v25);
  if (__dst != v63)
    free(__dst);
  if (!v26)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 72))(&__src, a2, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a4 + 72))(&v55, a4, a3);
  __dst = v63;
  v62 = 0x400000000;
  v31 = v59;
  if ((_DWORD)v59)
  {
    if (__src == v60)
    {
      v32 = v59;
      if (v59 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v59, 8), (v32 = v59) != 0))
      {
        memcpy(__dst, __src, 8 * v32);
      }
      LODWORD(v62) = v31;
    }
    else
    {
      __dst = __src;
      v62 = v59;
      __src = v60;
      HIDWORD(v59) = 0;
    }
    LODWORD(v59) = 0;
  }
  v64 = v66;
  v65 = 0x400000000;
  v33 = v56;
  v34 = v55;
  if ((_DWORD)v56)
  {
    if (v55 != v57)
    {
      v64 = v55;
      v65 = v56;
      v55 = v57;
      HIDWORD(v56) = 0;
      v34 = v57;
LABEL_55:
      LODWORD(v56) = 0;
      goto LABEL_56;
    }
    if (v56 < 5)
    {
      v35 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v56, 8);
      v35 = v56;
      v34 = v55;
      if (!(_DWORD)v56)
        goto LABEL_54;
    }
    memcpy(v64, v34, 8 * v35);
    v34 = v55;
LABEL_54:
    LODWORD(v65) = v33;
    goto LABEL_55;
  }
LABEL_56:
  if (v34 != v57)
    free(v34);
  if (__src != v60)
    free(__src);
  v36 = v64;
  v37 = 1;
  if ((_DWORD)v62 && (_DWORD)v65)
  {
    v38 = __dst;
    v39 = 8 * v65 - 8;
    v40 = 8 * v62 - 8;
    do
    {
      v37 = a5(a6, *v38, *v36);
      if (!v37)
        break;
      if (!v40)
        break;
      ++v38;
      ++v36;
      v41 = v39;
      v39 -= 8;
      v40 -= 8;
    }
    while (v41);
    v36 = v64;
  }
  if (v36 != v66)
    free(v36);
  if (__dst != v63)
    free(__dst);
  if (!v37)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 80))(&__src, a2, a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a4 + 80))(&v55, a4, a3);
  __dst = v63;
  v62 = 0x400000000;
  v42 = v59;
  if ((_DWORD)v59)
  {
    if (__src == v60)
    {
      v45 = v59;
      if (v59 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v59, 8), (v45 = v59) != 0))
      {
        memcpy(__dst, __src, 8 * v45);
      }
      LODWORD(v62) = v42;
    }
    else
    {
      __dst = __src;
      v62 = v59;
      __src = v60;
      HIDWORD(v59) = 0;
    }
    LODWORD(v59) = 0;
  }
  v64 = v66;
  v65 = 0x400000000;
  v46 = v56;
  v47 = v55;
  if (!(_DWORD)v56)
    goto LABEL_92;
  if (v55 == v57)
  {
    if (v56 < 5)
    {
      v48 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v56, 8);
      v48 = v56;
      v47 = v55;
      if (!(_DWORD)v56)
        goto LABEL_90;
    }
    memcpy(v64, v47, 8 * v48);
    v47 = v55;
LABEL_90:
    LODWORD(v65) = v46;
    goto LABEL_91;
  }
  v64 = v55;
  v65 = v56;
  v55 = v57;
  HIDWORD(v56) = 0;
  v47 = v57;
LABEL_91:
  LODWORD(v56) = 0;
LABEL_92:
  if (v47 != v57)
    free(v47);
  if (__src != v60)
    free(__src);
  v49 = v64;
  v43 = 1;
  if ((_DWORD)v62 && (_DWORD)v65)
  {
    v50 = __dst;
    v51 = 8 * v62 - 8;
    v52 = 8 * v65 - 8;
    do
    {
      v43 = a5(a6, *v50, *v49);
      if (!(_DWORD)v43)
        break;
      if (!v51)
        break;
      ++v50;
      ++v49;
      v51 -= 8;
      v53 = v52;
      v52 -= 8;
    }
    while (v53);
    v49 = v64;
  }
  if (v49 != v66)
    free(v49);
  if (__dst != v63)
    free(__dst);
  return v43;
}

uint64_t mlir::detail::getNumDynamicEntriesUpToIdx(int64x2_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  int64x2_t *v9;
  int32x4_t v10;
  int64x2_t v11;
  uint64_t v12;
  int32x4_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;

  if (!a3)
    return 0;
  v3 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v3 < 7)
  {
    LODWORD(v4) = 0;
    v5 = (uint64_t *)a1;
    do
    {
LABEL_8:
      v18 = *v5++;
      if (v18 == 0x8000000000000000)
        v4 = (v4 + 1);
      else
        v4 = v4;
    }
    while (v5 != (uint64_t *)((char *)a1 + 8 * a3));
    return v4;
  }
  v7 = v3 + 1;
  v8 = (v3 + 1) & 0x3FFFFFFFFFFFFFF8;
  v5 = &a1->i64[v8];
  v9 = a1 + 2;
  v10 = 0uLL;
  v11 = vdupq_n_s64(0x8000000000000000);
  v12 = v8;
  v13 = 0uLL;
  do
  {
    v14 = v9[-2];
    v15 = v9[-1];
    v16 = *v9;
    v17 = v9[1];
    v9 += 4;
    v10 = vsubq_s32(v10, vuzp1q_s32((int32x4_t)vceqq_s64(v14, v11), (int32x4_t)vceqq_s64(v15, v11)));
    v13 = vsubq_s32(v13, vuzp1q_s32((int32x4_t)vceqq_s64(v16, v11), (int32x4_t)vceqq_s64(v17, v11)));
    v12 -= 8;
  }
  while (v12);
  v4 = vaddvq_s32(vaddq_s32(v13, v10));
  if (v7 != v8)
    goto LABEL_8;
  return v4;
}

llvm::raw_ostream *mlir::printDynamicIndexList(mlir::OpAsmPrinter &,mlir::Operation *,mlir::OperandRange,llvm::ArrayRef<long long>,mlir::TypeRange,llvm::ArrayRef<BOOL>,mlir::AsmParser::Delimiter)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  llvm::raw_ostream *result;
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _QWORD *v12;
  unint64_t v13;
  _BYTE *v14;

  if (!*(_QWORD *)(*(_QWORD *)a1 + 8) || !*(_BYTE *)(**(_QWORD **)a1 + **(unsigned int **)(a1 + 8)))
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 16);
    if (a2 == 0x8000000000000000)
      goto LABEL_6;
LABEL_10:
    v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    result = llvm::raw_ostream::operator<<(v11, a2);
    v12 = *(_QWORD **)a1;
    if (!*(_QWORD *)(*(_QWORD *)a1 + 8))
      goto LABEL_19;
    goto LABEL_15;
  }
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) != v5)
  {
    *v5 = 91;
    ++*((_QWORD *)v4 + 4);
    goto LABEL_5;
  }
  llvm::raw_ostream::write(v4, "[", 1uLL);
  v6 = *(_QWORD *)(a1 + 16);
  if (a2 != 0x8000000000000000)
    goto LABEL_10;
LABEL_6:
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 160))(v6, *(_QWORD *)(**(_QWORD **)(a1 + 24) + 32 * **(unsigned int **)(a1 + 32) + 24));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v10 = *((_QWORD *)v9 + 4);
    if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) > 2)
    {
      *(_BYTE *)(v10 + 2) = 32;
      *(_WORD *)v10 = 14880;
      *((_QWORD *)v9 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v9, " : ", 3uLL);
    }
    v13 = mlir::TypeRange::dereference_iterator(**(_QWORD **)(a1 + 40), **(unsigned int **)(a1 + 32));
    result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 32))(v8, v13);
  }
  ++**(_DWORD **)(a1 + 32);
  v12 = *(_QWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8))
  {
LABEL_15:
    if (*(_BYTE *)(*v12 + **(unsigned int **)(a1 + 8)))
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
      v14 = (_BYTE *)*((_QWORD *)result + 4);
      if (*((_BYTE **)result + 3) == v14)
      {
        result = llvm::raw_ostream::write(result, "]", 1uLL);
      }
      else
      {
        *v14 = 93;
        ++*((_QWORD *)result + 4);
      }
    }
  }
LABEL_19:
  ++**(_DWORD **)(a1 + 8);
  return result;
}

BOOL llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::parseDynamicIndexList(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::detail::DenseArrayAttrImpl<long long> &,mlir::detail::DenseArrayAttrImpl<BOOL> &,llvm::SmallVectorImpl<mlir::Type> *,mlir::AsmParser::Delimiter)::$_0>(uint64_t *a1)
{
  unsigned __int16 v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[4];

  memset(v28, 0, 24);
  v2 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 680))(*a1, v28, 1);
  v3 = (_QWORD *)a1[1];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 304))(*a1);
  v5 = v3[1];
  if ((unint64_t)(v5 + 1) > v3[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v3, v3 + 3, v5 + 1, 1);
    v5 = v3[1];
  }
  *(_BYTE *)(*v3 + v5) = v4 != 0;
  ++v3[1];
  if (v2 < 0x100u || v2 == 0)
  {
    v27 = 0;
    if (!mlir::AsmParser::parseInteger<long long>(*a1, &v27))
      return 0;
    v7 = a1[3];
    v8 = v27;
    v9 = *(unsigned int *)(v7 + 8);
    if (v9 >= *(_DWORD *)(v7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[3], (void *)(v7 + 16), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = v8;
    ++*(_DWORD *)(v7 + 8);
  }
  else
  {
    v10 = a1[2];
    v11 = *(unsigned int *)(v10 + 8);
    v12 = *(_QWORD *)v10;
    v13 = (char *)v28;
    if (v11 >= *(_DWORD *)(v10 + 12))
    {
      v24 = v11 + 1;
      v25 = v12 + 32 * v11 > (unint64_t)v28;
      if (v12 <= (unint64_t)v28 && v25)
      {
        v26 = (char *)v28 - v12;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], (void *)(v10 + 16), v24, 32);
        v12 = *(_QWORD *)v10;
        v13 = &v26[*(_QWORD *)v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1[2], (void *)(v10 + 16), v24, 32);
        v12 = *(_QWORD *)v10;
        v13 = (char *)v28;
      }
    }
    v14 = (_OWORD *)(v12 + 32 * *(unsigned int *)(v10 + 8));
    v15 = *((_OWORD *)v13 + 1);
    *v14 = *(_OWORD *)v13;
    v14[1] = v15;
    ++*(_DWORD *)(v10 + 8);
    v16 = a1[3];
    v17 = *(unsigned int *)(v16 + 8);
    if (v17 >= *(_DWORD *)(v16 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[3], (void *)(v16 + 16), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(v16 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = 0x8000000000000000;
    ++*(_DWORD *)(v16 + 8);
    v18 = *(_QWORD *)a1[4];
    if (v18)
    {
      v19 = *a1;
      v20 = *(unsigned int *)(v18 + 8);
      if (v20 >= *(_DWORD *)(v18 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v18, (void *)(v18 + 16), v20 + 1, 8);
        *(_QWORD *)(*(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8)) = 0;
        LODWORD(v20) = *(_DWORD *)(v18 + 8);
        v21 = *(_QWORD *)v18;
      }
      else
      {
        v21 = *(_QWORD *)v18;
        *(_QWORD *)(*(_QWORD *)v18 + 8 * v20) = 0;
      }
      v22 = v20 + 1;
      *(_DWORD *)(v18 + 8) = v22;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 544))(v19, v21 + 8 * v22 - 8))
        return 0;
    }
  }
  return !*(_BYTE *)(*(_QWORD *)a1[1] + *(_QWORD *)(a1[1] + 8) - 1)
      || (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a1 + 320))(*a1);
}

uint64_t mlir::createMPSToANECPass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;

  v4 = operator new();
  *(_QWORD *)v5 = &off_24C033F40;
  *(_DWORD *)(v5 + 472) = *(_DWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 936);
  if (!v6)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a1 + 56);
  *(_QWORD *)(v4 + 2336) = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v4 + 2400);
  if (!v7)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1 + 16);
  *(_QWORD *)(v4 + 2552) = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v4 + 2616);
  if (!v8)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a1 + 24);
  *(_BYTE *)(v4 + 1088) = *(_BYTE *)(a1 + 4);
  v9 = *(_QWORD *)(v4 + 1144);
  if (!v9)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a1 + 4);
  *(_BYTE *)(v4 + 1296) = *(_BYTE *)a1;
  v10 = *(_QWORD *)(v4 + 1352);
  if (!v10)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, a1);
  *(_BYTE *)(v4 + 1712) = *(_BYTE *)(a1 + 1);
  v11 = *(_QWORD *)(v4 + 1768);
  if (!v11)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a1 + 1);
  *(_BYTE *)(v4 + 1504) = *(_BYTE *)(a1 + 2);
  v12 = *(_QWORD *)(v4 + 1560);
  if (!v12)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a1 + 2);
  *(_BYTE *)(v4 + 1920) = *(_BYTE *)(a1 + 3);
  v13 = *(_QWORD *)(v4 + 1976);
  if (!v13)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, a1 + 3);
  v14 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 2768) = v14;
  v23 = v14;
  v15 = *(_QWORD *)(v4 + 2824);
  if (!v15)
    goto LABEL_14;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v15 + 48))(v15, &v23);
  *(_BYTE *)(v4 + 2976) = *(_BYTE *)(a1 + 5);
  v16 = *(_QWORD *)(v4 + 3032);
  if (!v16)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, a1 + 5);
  std::string::operator=((std::string *)(v4 + 3184), (const std::string *)(a1 + 32));
  v17 = *(_QWORD *)(v4 + 3280);
  if (!v17)
    goto LABEL_14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, a1 + 32);
  v19 = *(_BYTE *)(a1 + 60);
  v18 = a1 + 60;
  *(_BYTE *)(v4 + 3432) = v19;
  v20 = *(_QWORD *)(v4 + 3488);
  if (v20)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v20, v18);
    *a2 = v4;
  }
  else
  {
LABEL_14:
    v22 = std::__throw_bad_function_call[abi:nn180100]();
    return mlir::createMPSToANECMinPass(v22);
  }
  return result;
}

void mlir::createMPSToANECMinPass(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;

  v6 = operator new();
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_QWORD *)v7 = &off_24BFF3030;
    *(_QWORD *)(v7 + 3512) = v9;
    *(_QWORD *)(v7 + 3520) = v8;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)v7 = &off_24BFF3030;
    *(_QWORD *)(v7 + 3512) = v9;
    *(_QWORD *)(v7 + 3520) = 0;
  }
  *(_DWORD *)(v7 + 472) = *(_DWORD *)(a1 + 56);
  v13 = *(_QWORD *)(v7 + 936);
  if (!v13)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, a1 + 56);
  *(_QWORD *)(v7 + 2336) = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(v7 + 2400);
  if (!v14)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, a1 + 16);
  *(_QWORD *)(v7 + 2552) = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(v7 + 2616);
  if (!v15)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, a1 + 24);
  *(_BYTE *)(v7 + 1088) = *(_BYTE *)(a1 + 4);
  v16 = *(_QWORD *)(v7 + 1144);
  if (!v16)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, a1 + 4);
  *(_BYTE *)(v7 + 1296) = *(_BYTE *)a1;
  v17 = *(_QWORD *)(v7 + 1352);
  if (!v17)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, a1);
  *(_BYTE *)(v7 + 1712) = *(_BYTE *)(a1 + 1);
  v18 = *(_QWORD *)(v7 + 1768);
  if (!v18)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v18, a1 + 1);
  *(_BYTE *)(v7 + 1504) = *(_BYTE *)(a1 + 2);
  v19 = *(_QWORD *)(v7 + 1560);
  if (!v19)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, a1 + 2);
  *(_BYTE *)(v7 + 1920) = *(_BYTE *)(a1 + 3);
  v20 = *(_QWORD *)(v7 + 1976);
  if (!v20)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v20, a1 + 3);
  v21 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v7 + 2768) = v21;
  v31 = v21;
  v22 = *(_QWORD *)(v7 + 2824);
  if (!v22)
    goto LABEL_26;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v22 + 48))(v22, &v31);
  *(_BYTE *)(v7 + 2976) = *(_BYTE *)(a1 + 5);
  v23 = *(_QWORD *)(v7 + 3032);
  if (!v23)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 48))(v23, a1 + 5);
  std::string::operator=((std::string *)(v7 + 3184), (const std::string *)(a1 + 32));
  v24 = *(_QWORD *)(v7 + 3280);
  if (!v24)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, a1 + 32);
  v26 = *(_BYTE *)(a1 + 60);
  v25 = a1 + 60;
  *(_BYTE *)(v7 + 3432) = v26;
  v27 = *(_QWORD *)(v7 + 3488);
  if (v27)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 48))(v27, v25);
    if (v8)
    {
      v28 = (unint64_t *)&v8->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *a3 = v7;
  }
  else
  {
LABEL_26:
    v30 = std::__throw_bad_function_call[abi:nn180100]();
  }
}

uint64_t mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::MPSToANECBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int32 v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  __int128 v9;
  __n128 v10;
  _QWORD v11[21];

  v11[20] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = "builtin.module";
  *(_QWORD *)(a1 + 24) = 14;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_24C033FE0;
  v3 = (_QWORD *)(a1 + 344);
  *(_QWORD *)&v9 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v9 + 1) = 61;
  v7 = 0;
  v8 = (uint64_t)&v7;
  v10.n128_u64[0] = (unint64_t)v11;
  v10.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, v11, 7uLL, 40);
  v4 = v10.n128_u32[2];
  v5 = v10.n128_u64[0] + 40 * v10.n128_u32[2];
  *(_QWORD *)v5 = "A12";
  *(_QWORD *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = "A12 family";
  *(_QWORD *)(v5 + 32) = 10;
  *(_QWORD *)(v5 + 40) = "A13";
  *(_QWORD *)(v5 + 48) = 3;
  *(_DWORD *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 64) = "A13 family";
  *(_QWORD *)(v5 + 72) = 10;
  *(_QWORD *)(v5 + 80) = "A14";
  *(_QWORD *)(v5 + 88) = 3;
  *(_DWORD *)(v5 + 96) = 2;
  *(_QWORD *)(v5 + 104) = "A14 family";
  *(_QWORD *)(v5 + 112) = 10;
  *(_QWORD *)(v5 + 120) = "A15";
  *(_QWORD *)(v5 + 128) = 3;
  *(_DWORD *)(v5 + 136) = 3;
  *(_QWORD *)(v5 + 144) = "A15 family";
  *(_QWORD *)(v5 + 152) = 10;
  *(_QWORD *)(v5 + 160) = "A16";
  *(_QWORD *)(v5 + 168) = 3;
  *(_DWORD *)(v5 + 176) = 4;
  *(_QWORD *)(v5 + 184) = "A16 family";
  *(_QWORD *)(v5 + 192) = 10;
  *(_QWORD *)(v5 + 200) = "A17";
  *(_QWORD *)(v5 + 208) = 3;
  *(_DWORD *)(v5 + 216) = 5;
  *(_QWORD *)(v5 + 224) = "A17 family";
  *(_QWORD *)(v5 + 232) = 10;
  *(_QWORD *)(v5 + 240) = "A11Legacy";
  *(_QWORD *)(v5 + 248) = 9;
  *(_DWORD *)(v5 + 256) = 6;
  *(_QWORD *)(v5 + 264) = "A11 Legacy family";
  *(_QWORD *)(v5 + 272) = 17;
  v10.n128_u32[2] = v4 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(v3, v2, (uint64_t)"target-family", 13, &v9, (_DWORD **)&v8, (uint64_t *)&v10);
  *(_QWORD *)(a1 + 344) = off_24C050850;
  *(_QWORD *)(a1 + 944) = &unk_24C0508D0;
  if ((_QWORD *)v10.n128_u64[0] != v11)
    free((void *)v10.n128_u64[0]);
  v10.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v10.n128_u64[1] = 63;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 960), v2, (uint64_t)"strict-hints", 12, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 960) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1152) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v10.n128_u64[1] = 39;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1168), v2, (uint64_t)"use-cost-model", 14, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1168) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1360) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v10.n128_u64[1] = 73;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1376), v2, (uint64_t)"force-host-placement", 20, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1376) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1568) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1584), v2, (uint64_t)"force-ane-placement", 19, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1584) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1776) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, print the estimated cost of the resulting module (requires use-cost-model).";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1792), v2, (uint64_t)"print-estimated-cost", 20, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1792) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1984) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v10.n128_u64[1] = 55;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 2000), v2, (uint64_t)"insert-instrumentation", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 2000) = &off_24C0509D0;
  *(_QWORD *)(a1 + 2192) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"The maximum number of mps operations that will be used to create an ANE region.";
  v10.n128_u64[1] = 79;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(a1 + 2208), v2, (uint64_t)"ane-max-ops", 11, &v10, (_QWORD **)&v9);
  *(_QWORD *)(a1 + 2208) = off_24C050B50;
  *(_QWORD *)(a1 + 2408) = &unk_24C050BD0;
  v10.n128_u64[0] = (unint64_t)"The maximum number of cumulative liveIns and liveOuts for an ANE region.";
  v10.n128_u64[1] = 72;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(a1 + 2424), v2, (uint64_t)"ane-max-liveio", 14, &v10, (_QWORD **)&v9);
  *(_QWORD *)(a1 + 2424) = off_24C050B50;
  *(_QWORD *)(a1 + 2624) = &unk_24C050BD0;
  v10.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v10.n128_u64[1] = 24;
  LODWORD(v8) = 1;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 2640), v2, (uint64_t)"gpu-core-count", 14, &v10, (int **)&v9);
  *(_QWORD *)(a1 + 2640) = off_24C050A90;
  *(_QWORD *)(a1 + 2832) = &unk_24C050B10;
  v10.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v10.n128_u64[1] = 64;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 2848), v2, (uint64_t)"print-placement-report", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 2848) = &off_24C0509D0;
  *(_QWORD *)(a1 + 3040) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v10.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((_QWORD *)(a1 + 3056), v2, (uint64_t)"region-name-postfix", 19, &v10);
  *(_QWORD *)(a1 + 3056) = &off_24C050910;
  *(_QWORD *)(a1 + 3288) = &unk_24C050990;
  v10.n128_u64[0] = (unint64_t)"If true, use GOC and quantimization patterns to optimzie the ANEC IR.";
  v10.n128_u64[1] = 69;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 3304), v2, (uint64_t)"legacy-quant-conversion", 23, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 3304) = &off_24C0509D0;
  *(_QWORD *)(a1 + 3496) = &unk_24C050A50;
  return a1;
}

void mlir::`anonymous namespace'::MPSToANEC::~MPSToANEC(mlir::_anonymous_namespace_::MPSToANEC *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  mlir::_anonymous_namespace_::MPSToANEC *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  mlir::_anonymous_namespace_::MPSToANEC *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  mlir::_anonymous_namespace_::MPSToANEC *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  mlir::_anonymous_namespace_::MPSToANEC *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  mlir::_anonymous_namespace_::MPSToANEC *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  mlir::_anonymous_namespace_::MPSToANEC *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  mlir::_anonymous_namespace_::MPSToANEC *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  mlir::_anonymous_namespace_::MPSToANEC *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  mlir::_anonymous_namespace_::MPSToANEC *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  mlir::_anonymous_namespace_::MPSToANEC *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  mlir::_anonymous_namespace_::MPSToANEC *v47;
  uint64_t v48;
  char *v49;
  void *v50;
  char *v51;

  *(_QWORD *)this = off_24C033FE0;
  *((_QWORD *)this + 413) = &unk_24C02DF38;
  v2 = (char *)this + 3464;
  v3 = (char *)*((_QWORD *)this + 436);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 413) = &unk_24C02E140;
  v5 = (void *)*((_QWORD *)this + 425);
  if (v5 != *((void **)this + 424))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 421);
  if (v6 != (char *)this + 3384)
    free(v6);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 3056);
  *((_QWORD *)this + 356) = &unk_24C02DF38;
  v7 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 379);
  if (v7 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 3008))
  {
    v8 = 4;
    v7 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 3008);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_15:
  *((_QWORD *)this + 356) = &unk_24C02E140;
  v9 = (void *)*((_QWORD *)this + 368);
  if (v9 != *((void **)this + 367))
    free(v9);
  v10 = (char *)*((_QWORD *)this + 364);
  if (v10 != (char *)this + 2928)
    free(v10);
  *((_QWORD *)this + 330) = &unk_24C02E008;
  v11 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 353);
  if (v11 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2800))
  {
    v12 = 4;
    v11 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2800);
  }
  else
  {
    if (!v11)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_24:
  *((_QWORD *)this + 330) = &unk_24C02E140;
  v13 = (void *)*((_QWORD *)this + 342);
  if (v13 != *((void **)this + 341))
    free(v13);
  v14 = (char *)*((_QWORD *)this + 338);
  if (v14 != (char *)this + 2720)
    free(v14);
  *((_QWORD *)this + 303) = off_24C02E070;
  v15 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 327);
  if (v15 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2592))
  {
    v16 = 4;
    v15 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2592);
  }
  else
  {
    if (!v15)
      goto LABEL_33;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_33:
  *((_QWORD *)this + 303) = &unk_24C02E140;
  v17 = (void *)*((_QWORD *)this + 315);
  if (v17 != *((void **)this + 314))
    free(v17);
  v18 = (char *)*((_QWORD *)this + 311);
  if (v18 != (char *)this + 2504)
    free(v18);
  *((_QWORD *)this + 276) = off_24C02E070;
  v19 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 300);
  if (v19 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2376))
  {
    v20 = 4;
    v19 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2376);
  }
  else
  {
    if (!v19)
      goto LABEL_42;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_42:
  *((_QWORD *)this + 276) = &unk_24C02E140;
  v21 = (void *)*((_QWORD *)this + 288);
  if (v21 != *((void **)this + 287))
    free(v21);
  v22 = (char *)*((_QWORD *)this + 284);
  if (v22 != (char *)this + 2288)
    free(v22);
  *((_QWORD *)this + 250) = &unk_24C02DF38;
  v23 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 273);
  if (v23 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2160))
  {
    v24 = 4;
    v23 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 2160);
  }
  else
  {
    if (!v23)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_51:
  *((_QWORD *)this + 250) = &unk_24C02E140;
  v25 = (void *)*((_QWORD *)this + 262);
  if (v25 != *((void **)this + 261))
    free(v25);
  v26 = (char *)*((_QWORD *)this + 258);
  if (v26 != (char *)this + 2080)
    free(v26);
  *((_QWORD *)this + 224) = &unk_24C02DF38;
  v27 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 247);
  if (v27 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1952))
  {
    v28 = 4;
    v27 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1952);
  }
  else
  {
    if (!v27)
      goto LABEL_60;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_60:
  *((_QWORD *)this + 224) = &unk_24C02E140;
  v29 = (void *)*((_QWORD *)this + 236);
  if (v29 != *((void **)this + 235))
    free(v29);
  v30 = (char *)*((_QWORD *)this + 232);
  if (v30 != (char *)this + 1872)
    free(v30);
  *((_QWORD *)this + 198) = &unk_24C02DF38;
  v31 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 221);
  if (v31 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1744))
  {
    v32 = 4;
    v31 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1744);
  }
  else
  {
    if (!v31)
      goto LABEL_69;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_69:
  *((_QWORD *)this + 198) = &unk_24C02E140;
  v33 = (void *)*((_QWORD *)this + 210);
  if (v33 != *((void **)this + 209))
    free(v33);
  v34 = (char *)*((_QWORD *)this + 206);
  if (v34 != (char *)this + 1664)
    free(v34);
  *((_QWORD *)this + 172) = &unk_24C02DF38;
  v35 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 195);
  if (v35 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1536))
  {
    v36 = 4;
    v35 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1536);
  }
  else
  {
    if (!v35)
      goto LABEL_78;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_78:
  *((_QWORD *)this + 172) = &unk_24C02E140;
  v37 = (void *)*((_QWORD *)this + 184);
  if (v37 != *((void **)this + 183))
    free(v37);
  v38 = (char *)*((_QWORD *)this + 180);
  if (v38 != (char *)this + 1456)
    free(v38);
  *((_QWORD *)this + 146) = &unk_24C02DF38;
  v39 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 169);
  if (v39 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1328))
  {
    v40 = 4;
    v39 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1328);
  }
  else
  {
    if (!v39)
      goto LABEL_87;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_87:
  *((_QWORD *)this + 146) = &unk_24C02E140;
  v41 = (void *)*((_QWORD *)this + 158);
  if (v41 != *((void **)this + 157))
    free(v41);
  v42 = (char *)*((_QWORD *)this + 154);
  if (v42 != (char *)this + 1248)
    free(v42);
  *((_QWORD *)this + 120) = &unk_24C02DF38;
  v43 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 143);
  if (v43 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1120))
  {
    v44 = 4;
    v43 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 1120);
  }
  else
  {
    if (!v43)
      goto LABEL_96;
    v44 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_96:
  *((_QWORD *)this + 120) = &unk_24C02E140;
  v45 = (void *)*((_QWORD *)this + 132);
  if (v45 != *((void **)this + 131))
    free(v45);
  v46 = (char *)*((_QWORD *)this + 128);
  if (v46 != (char *)this + 1040)
    free(v46);
  *((_QWORD *)this + 43) = off_24C02DE68;
  v47 = (mlir::_anonymous_namespace_::MPSToANEC *)*((_QWORD *)this + 117);
  if (v47 == (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 912))
  {
    v48 = 4;
    v47 = (mlir::_anonymous_namespace_::MPSToANEC *)((char *)this + 912);
  }
  else
  {
    if (!v47)
      goto LABEL_105;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_105:
  *((_QWORD *)this + 62) = &off_24C02E1A8;
  v49 = (char *)*((_QWORD *)this + 64);
  if (v49 != (char *)this + 528)
    free(v49);
  *((_QWORD *)this + 43) = &unk_24C02E140;
  v50 = (void *)*((_QWORD *)this + 55);
  if (v50 != *((void **)this + 54))
    free(v50);
  v51 = (char *)*((_QWORD *)this + 51);
  if (v51 != (char *)this + 424)
    free(v51);
  mlir::Pass::~Pass(this);
}

{
  JUMPOUT(0x20BD002F8);
}

const char *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getName()
{
  return "MPSToANEC";
}

_QWORD *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getDependentDialects(int a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v11[0] = &off_24C059BB0;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v11);
  v3 = v12;
  if (v12 == v11)
  {
    v4 = 4;
    v3 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v11[0] = &off_24C059B20;
  v12 = v11;
  v5 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, "anec", 4uLL, v11);
  v6 = v12;
  if (v12 == v11)
  {
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v5))();
LABEL_11:
  v11[0] = &off_24C059AD8;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v11[0] = &off_24C059B68;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, "memref", 6uLL, v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

const char *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getArgument()
{
  return "mps-to-anec";
}

const char *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::getDescription()
{
  return "Convert mps ops to anec ops if possible and create regions for ane";
}

void mlir::`anonymous namespace'::MPSToANEC::runOnOperation(mlir::_anonymous_namespace_::MPSToANEC *this)
{
  uint64_t Context;
  uint64_t v3;
  void *v4;
  __int128 *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[4];
  char v15;
  char v16;
  char v17;
  _BYTE *v18;
  _BYTE v19[48];
  uint64_t v20;
  void *v21;
  void *__p[2];
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[8];
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35[3];
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[2];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[40];
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  _BYTE v60[536];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  mlir::MPSToANECTypeConverter::MPSToANECTypeConverter((mlir::MPSToANECTypeConverter *)v60);
  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  memset(&v49[8], 0, 32);
  *(_QWORD *)v49 = Context;
  v50 = &v52;
  v51 = 0x600000000;
  v54 = 0;
  v53 = 0;
  v55 = 0;
  *(_QWORD *)&v57 = 0;
  v56 = 0;
  *((_QWORD *)&v57 + 1) = 0x2800000000;
  v58 = 0;
  *(_QWORD *)&v59 = 0;
  *((_QWORD *)&v59 + 1) = 0x2800000000;
  mlir::populateMPSToANECConversionPatterns(*((unsigned int *)this + 118), *((_BYTE *)this + 3432), (uint64_t *)v49, (uint64_t)v60);
  v3 = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v35[2] = 0;
  v35[0] = (uint64_t)off_24C034280;
  v35[1] = 0;
  v36 = 0;
  v42 = 0;
  v41 = 0;
  v37 = v39;
  v38 = 0;
  v39[1] = 0;
  v39[0] = 0;
  v40 = 0;
  v43 = 0x1000000000;
  v44 = 0;
  v45 = 0;
  v46 = 0x2800000000;
  v47 = 0;
  v48 = v3;
  *(_QWORD *)&v33[0] = "func";
  *((_QWORD *)&v33[0] + 1) = 4;
  mlir::ConversionTarget::setDialectAction(v35, (uint64_t)v33, 1, 2);
  *(_QWORD *)&v33[0] = "memref";
  *((_QWORD *)&v33[0] + 1) = 6;
  mlir::ConversionTarget::setDialectAction(v35, (uint64_t)v33, 1, 2);
  *(_QWORD *)&v33[0] = "mps";
  *((_QWORD *)&v33[0] + 1) = 3;
  *((_QWORD *)&v32 + 1) = 0x200000000;
  mlir::ConversionTarget::setDialectAction(v35, (uint64_t)v33, 1, 2);
  *(_QWORD *)&v32 = &off_24C059C50;
  *((_QWORD *)&v33[0] + 1) = &v32;
  mlir::OperationName::OperationName(&v21, "mps.constant", 12, v48);
  v4 = v21;
  mlir::ConversionTarget::setOpAction((uint64_t)v35, (uint64_t)v21, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v35, (uint64_t)v4, &v32);
  v5 = (__int128 *)*((_QWORD *)&v33[0] + 1);
  if (*((__int128 **)&v33[0] + 1) == &v32)
  {
    v6 = 4;
    v5 = &v32;
  }
  else
  {
    if (!*((_QWORD *)&v33[0] + 1))
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  v19[0] = 1;
  memset(&v19[4], 0, 44);
  v20 = 978433816;
  v18 = 0;
  v15 = *((_BYTE *)this + 1712);
  v16 = *((_BYTE *)this + 1504);
  v17 = *((_BYTE *)this + 1920);
  if (*((_BYTE *)this + 1296))
  {
    mlir::getDeviceInfo(*((_DWORD *)this + 118), *((unsigned int *)this + 692), (uint64_t)&v32);
    *(_OWORD *)v19 = v32;
    *(_OWORD *)&v19[16] = v33[0];
    *(_OWORD *)&v19[32] = v33[1];
    v20 = v34;
    v18 = v19;
  }
  v7 = (_QWORD *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v14[0] = mlir::Attribute::getContext((mlir::Attribute *)(v7 + 3));
  v14[1] = 0;
  v8 = v7[2];
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v7);
  v14[2] = v8;
  v14[3] = v10;
  *(_OWORD *)__p = *(_OWORD *)v49;
  v23 = *(_OWORD *)&v49[16];
  memset(&v49[8], 0, 32);
  v24 = *(_QWORD *)&v49[32];
  v25[0] = v26;
  v25[1] = 0x600000000;
  if ((_DWORD)v51)
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v25, (uint64_t)&v50);
  v26[6] = v53;
  v53 = 0;
  v26[7] = v54;
  v54 = 0;
  v27 = v55;
  v55 = 0;
  v29 = v57;
  v11 = v56;
  v56 = 0;
  *(_QWORD *)&v57 = 0;
  DWORD2(v57) = 0;
  v28 = v11;
  v30 = v58;
  v31 = v59;
  v58 = 0;
  *(_QWORD *)&v59 = 0;
  DWORD2(v59) = 0;
  if (*((char *)this + 3207) < 0)
  {
    v12 = (char *)*((_QWORD *)this + 398);
    v13 = *((_QWORD *)this + 399);
  }
  else
  {
    v12 = (char *)this + 3184;
    v13 = *((unsigned __int8 *)this + 3207);
  }
  mlir::ANECRegionOpCreator::ANECRegionOpCreator((uint64_t)&v32, (uint64_t)v14, (mlir::ConversionTarget *)v35, (int)__p, (int)v60, *((_DWORD *)this + 118), (int)v19, v9, (uint64_t)"mps", 3, *((_QWORD *)this + 292), *((_QWORD *)this + 319), *((_BYTE *)this + 1088) != 0, *((_BYTE *)this + 2128) != 0, (uint64_t)v12, v13);
}

_QWORD *mlir::MPSToANECBase<mlir::`anonymous namespace'::MPSToANEC>::clonePass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int32 v7;
  unint64_t v8;
  _QWORD *result;
  int v10;
  uint64_t v11;
  __int128 v12;
  __n128 v13;
  _QWORD v14[22];

  v14[20] = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  v6 = (_QWORD *)(v4 + 152);
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = v4 + 200;
  *(_QWORD *)(v4 + 192) = 0x400000000;
  *(_QWORD *)(v4 + 232) = v4 + 248;
  *(_QWORD *)(v4 + 240) = 0x400000000;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_DWORD *)(v4 + 296) = 0;
  *(_DWORD *)(v4 + 300) = 16;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)v4 = off_24C033FE0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)&v12 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v12 + 1) = 61;
  v10 = 0;
  v11 = (uint64_t)&v10;
  v13.n128_u64[0] = (unint64_t)v14;
  v13.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v14, 7uLL, 40);
  v7 = v13.n128_u32[2];
  v8 = v13.n128_u64[0] + 40 * v13.n128_u32[2];
  *(_QWORD *)v8 = "A12";
  *(_QWORD *)(v8 + 8) = 3;
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = "A12 family";
  *(_QWORD *)(v8 + 32) = 10;
  *(_QWORD *)(v8 + 40) = "A13";
  *(_QWORD *)(v8 + 48) = 3;
  *(_DWORD *)(v8 + 56) = 1;
  *(_QWORD *)(v8 + 64) = "A13 family";
  *(_QWORD *)(v8 + 72) = 10;
  *(_QWORD *)(v8 + 80) = "A14";
  *(_QWORD *)(v8 + 88) = 3;
  *(_DWORD *)(v8 + 96) = 2;
  *(_QWORD *)(v8 + 104) = "A14 family";
  *(_QWORD *)(v8 + 112) = 10;
  *(_QWORD *)(v8 + 120) = "A15";
  *(_QWORD *)(v8 + 128) = 3;
  *(_DWORD *)(v8 + 136) = 3;
  *(_QWORD *)(v8 + 144) = "A15 family";
  *(_QWORD *)(v8 + 152) = 10;
  *(_QWORD *)(v8 + 160) = "A16";
  *(_QWORD *)(v8 + 168) = 3;
  *(_DWORD *)(v8 + 176) = 4;
  *(_QWORD *)(v8 + 184) = "A16 family";
  *(_QWORD *)(v8 + 192) = 10;
  *(_QWORD *)(v8 + 200) = "A17";
  *(_QWORD *)(v8 + 208) = 3;
  *(_DWORD *)(v8 + 216) = 5;
  *(_QWORD *)(v8 + 224) = "A17 family";
  *(_QWORD *)(v8 + 232) = 10;
  *(_QWORD *)(v8 + 240) = "A11Legacy";
  *(_QWORD *)(v8 + 248) = 9;
  *(_DWORD *)(v8 + 256) = 6;
  *(_QWORD *)(v8 + 264) = "A11 Legacy family";
  *(_QWORD *)(v8 + 272) = 17;
  v13.n128_u32[2] = v7 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((_QWORD *)(v4 + 344), (_QWORD *)(v4 + 152), (uint64_t)"target-family", 13, &v12, (_DWORD **)&v11, (uint64_t *)&v13);
  *(_QWORD *)(v4 + 344) = off_24C050850;
  *(_QWORD *)(v4 + 944) = &unk_24C0508D0;
  if ((_QWORD *)v13.n128_u64[0] != v14)
    free((void *)v13.n128_u64[0]);
  v13.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v13.n128_u64[1] = 63;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 960), v6, (uint64_t)"strict-hints", 12, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 960) = &off_24C0509D0;
  *(_QWORD *)(v4 + 1152) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v13.n128_u64[1] = 39;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 1168), v6, (uint64_t)"use-cost-model", 14, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 1168) = &off_24C0509D0;
  *(_QWORD *)(v4 + 1360) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v13.n128_u64[1] = 73;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 1376), v6, (uint64_t)"force-host-placement", 20, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 1376) = &off_24C0509D0;
  *(_QWORD *)(v4 + 1568) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v13.n128_u64[1] = 84;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 1584), v6, (uint64_t)"force-ane-placement", 19, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 1584) = &off_24C0509D0;
  *(_QWORD *)(v4 + 1776) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"If true, print the estimated cost of the resulting module (requires use-cost-model).";
  v13.n128_u64[1] = 84;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 1792), v6, (uint64_t)"print-estimated-cost", 20, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 1792) = &off_24C0509D0;
  *(_QWORD *)(v4 + 1984) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v13.n128_u64[1] = 55;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 2000), v6, (uint64_t)"insert-instrumentation", 22, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 2000) = &off_24C0509D0;
  *(_QWORD *)(v4 + 2192) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"The maximum number of mps operations that will be used to create an ANE region.";
  v13.n128_u64[1] = 79;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(v4 + 2208), v6, (uint64_t)"ane-max-ops", 11, &v13, (_QWORD **)&v12);
  *(_QWORD *)(v4 + 2208) = off_24C050B50;
  *(_QWORD *)(v4 + 2408) = &unk_24C050BD0;
  v13.n128_u64[0] = (unint64_t)"The maximum number of cumulative liveIns and liveOuts for an ANE region.";
  v13.n128_u64[1] = 72;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(v4 + 2424), v6, (uint64_t)"ane-max-liveio", 14, &v13, (_QWORD **)&v12);
  *(_QWORD *)(v4 + 2424) = off_24C050B50;
  *(_QWORD *)(v4 + 2624) = &unk_24C050BD0;
  v13.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v13.n128_u64[1] = 24;
  LODWORD(v11) = 1;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(v4 + 2640), v6, (uint64_t)"gpu-core-count", 14, &v13, (int **)&v12);
  *(_QWORD *)(v4 + 2640) = off_24C050A90;
  *(_QWORD *)(v4 + 2832) = &unk_24C050B10;
  v13.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v13.n128_u64[1] = 64;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 2848), v6, (uint64_t)"print-placement-report", 22, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 2848) = &off_24C0509D0;
  *(_QWORD *)(v4 + 3040) = &unk_24C050A50;
  v13.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v13.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((_QWORD *)(v4 + 3056), v6, (uint64_t)"region-name-postfix", 19, &v13);
  *(_QWORD *)(v4 + 3056) = &off_24C050910;
  *(_QWORD *)(v4 + 3288) = &unk_24C050990;
  v13.n128_u64[0] = (unint64_t)"If true, use GOC and quantimization patterns to optimzie the ANEC IR.";
  v13.n128_u64[1] = 69;
  LOBYTE(v11) = 0;
  *(_QWORD *)&v12 = &v11;
  result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v4 + 3304), v6, (uint64_t)"legacy-quant-conversion", 23, &v13, (_BYTE **)&v12);
  *(_QWORD *)(v4 + 3304) = &off_24C0509D0;
  *(_QWORD *)(v4 + 3496) = &unk_24C050A50;
  *(_QWORD *)v4 = &off_24C033F40;
  *a2 = v4;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v36[2];
  _QWORD v37[3];
  _QWORD *v38;
  const void *v39[3];
  const void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v36[0] = a3;
  v36[1] = a4;
  v39[0] = a2;
  v9 = llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((uint64_t)a1, (uint64_t)v36, v39, a5, a6, a7);
  v10 = v9 + 600;
  *(_BYTE *)(v9 + 608) = 0;
  *(_QWORD *)v9 = off_24C051CB0;
  *(_QWORD *)(v9 + 600) = &unk_24C051D30;
  v12 = (uint64_t *)a2[21];
  v11 = a2[22];
  v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    v15 = (uint64_t *)a2[20];
    v16 = v12 - v15;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v18 = v11 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v10;
    v14 = v21 + 1;
    if (v12 != v15)
    {
      v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v15 - v20) < 0x20)
        goto LABEL_38;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      v21 = (uint64_t *)((char *)v21 - v25);
      v26 = &v20[8 * v16 - 16];
      v27 = v12 - 2;
      v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v30 = *--v13;
          *--v21 = v30;
        }
        while (v13 != v15);
      }
      v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v12 = v10;
    v14 = v12 + 1;
  }
  a2[21] = v14;
  v37[0] = &off_24C05A3B0;
  v37[1] = a1;
  v38 = v37;
  v39[0] = &off_24C05A3B0;
  v40 = v39;
  v39[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v39, a1 + 71);
  v31 = v40;
  if (v40 == v39)
  {
    v32 = 4;
    v31 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_28;
    v32 = 5;
  }
  (*((void (**)(void))*v31 + v32))();
LABEL_28:
  v33 = v38;
  if (v38 == v37)
  {
    v34 = 4;
    v33 = v37;
    goto LABEL_32;
  }
  if (v38)
  {
    v34 = 5;
LABEL_32:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  return a1;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = llvm::cl::parser<mlir::mps::ConstantAttributeConversionType>::parse(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(v11);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

_QWORD *mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_24C02DE68;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_24C02E1A8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_24C02E140;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_24C02DE68;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_24C02E1A8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_24C02E140;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  JUMPOUT(0x20BD002F8);
}

unint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*((_BYTE *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    v3 = *((_DWORD *)result + 32);
    v4 = &off_24C02DD88;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
  {
    v3 = a1 + 152;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      do
      {
        v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v6);
        v9 = v8;
        v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          v10 = *(unsigned int *)(a2 + 8);
        }
        v11 = (uint64_t *)(*(_QWORD *)a2 + 16 * v10);
        *v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        v6 = (v6 + 1);
      }
      while (v5 != (_DWORD)v6);
    }
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *result;

  v4 = *(const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  v8 = (_BYTE *)(*(_QWORD *)(a1 + 168) + 44);
  v9 = 48 * *(unsigned int *)(a1 + 176);
  while (1)
  {
    v9 -= 48;
    if (*v8)
    {
      if (*((_DWORD *)v8 - 1) == *(_DWORD *)(a1 + 128))
        break;
    }
    v8 += 48;
  }
  v10 = *(const char **)(v8 - 44);
  v11 = *(_QWORD *)(v8 - 36);
  result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  if (v11 > *((_QWORD *)this + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(this, v10, *(_QWORD *)(v8 - 36));
  if (v11)
  {
    result = (llvm::raw_ostream *)memcpy(result, v10, v11);
    *((_QWORD *)this + 4) += v11;
  }
  return result;
}

uint64_t mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 - 472);
  *(_BYTE *)(result + 608) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_24C02DE68;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_24C02E1A8;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_24C02E140;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_24C02DE68;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_24C02E1A8;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_24C02E140;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(a1 - 600, a2);
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOption(uint64_t a1)
{
  return a1 - 600;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result - 472) = *(_DWORD *)(a2 - 472);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  void *v12;
  uint64_t v13;
  _QWORD *GeneralCategory;
  uint64_t v15;

  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_24C02DD88;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_24C02DE68;
  *(_QWORD *)(a1 + 160) = a1;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x800000000;
  *(_QWORD *)(a1 + 152) = &off_24C051C60;
  *(_QWORD *)(a1 + 568) = &off_24C053540;
  *(_QWORD *)(a1 + 592) = a1 + 568;
  llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_24C02DE68;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_24C02E1A8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_24C02E140;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_24C02DE68;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_24C02E1A8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_24C02E140;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_24C02DE68;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_24C02E1A8;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_24C02E140;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 - 600);
  *(_QWORD *)(a1 - 600) = off_24C02DE68;
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 448) = &off_24C02E1A8;
  v6 = *(void **)(a1 - 432);
  if (v6 != (void *)(a1 - 416))
    free(v6);
  *v2 = &unk_24C02E140;
  v7 = *(void **)(a1 - 504);
  if (v7 != *(void **)(a1 - 512))
    free(v7);
  v8 = *(void **)(a1 - 536);
  if (v8 != (void *)(a1 - 520))
    free(v8);
  JUMPOUT(0x20BD002F8);
}

void llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v11 = *a3;
  v12 = *(_QWORD *)(a1 + 96);
  if (v12 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v12 + 8 * v13) = v11;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v11)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v11;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(a1, a5, a6);
}

_QWORD *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_24C02DE68;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_24C02E1A8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_24C02E140;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  return a1;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;

  *a1 = off_24C02DE68;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_24C02E1A8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  *a1 = &unk_24C02E140;
  v6 = (void *)a1[12];
  if (v6 != (void *)a1[11])
    free(v6);
  v7 = (_QWORD *)a1[8];
  if (v7 != a1 + 10)
    free(v7);
  JUMPOUT(0x20BD002F8);
}

BOOL llvm::cl::OptionValueCopy<mlir::anec::Family>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_QWORD *mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C02E1A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C02E1A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

_QWORD *llvm::cl::parser<mlir::anec::Family>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C02E1A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void llvm::cl::parser<mlir::anec::Family>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C02E1A8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x20BD002F8);
}

void std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C053540;
  return result;
}

void std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C053540;
}

void llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, _DWORD **a2, uint64_t *a3)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  const unsigned __int8 *v10;
  __int128 v11;
  int v12;
  char *Address;
  uint64_t v14;
  __int128 v15;
  char v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t (**v19)();
  int v20;
  char v21;

  v3 = *a2;
  *(_DWORD *)(a1 + 128) = **a2;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v3;
  v4 = *((_DWORD *)a3 + 2);
  if (v4)
  {
    v6 = *a3;
    v7 = *a3 + 40 * v4;
    v8 = a1 + 168;
    do
    {
      v10 = *(const unsigned __int8 **)(v6 + 8);
      v11 = *(_OWORD *)(v6 + 24);
      v12 = *(_DWORD *)(v6 + 16);
      v17[0] = *(_QWORD *)v6;
      v9 = (int8x16_t *)v17[0];
      v17[1] = v10;
      v18 = v11;
      v19 = &off_24C02DD88;
      v21 = 1;
      v20 = v12;
      Address = llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(v8, (unint64_t)v17, 1);
      v14 = *(_QWORD *)(a1 + 168) + 48 * *(unsigned int *)(a1 + 176);
      v15 = *((_OWORD *)Address + 1);
      *(_OWORD *)v14 = *(_OWORD *)Address;
      *(_OWORD *)(v14 + 16) = v15;
      *(_QWORD *)(v14 + 32) = &off_24C02DE28;
      v16 = Address[44];
      *(_DWORD *)(v14 + 40) = *((_DWORD *)Address + 10);
      *(_BYTE *)(v14 + 44) = v16;
      *(_QWORD *)(v14 + 32) = &off_24C02DD88;
      ++*(_DWORD *)(a1 + 176);
      llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 160), v9, v10);
      v6 += 40;
    }
    while (v6 != v7);
  }
}

char *llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v10;
  _OWORD *v11;
  char *v12;
  unsigned int v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v19 = (uint64_t)(a2 - *(_QWORD *)a1) >> 4;
      v30 = 0;
      v20 = (char *)(a1 + 16);
      v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v30);
      v22 = *(char **)a1;
      v23 = *(_DWORD *)(a1 + 8);
      if (v23)
      {
        v24 = &v22[48 * v23];
        v25 = v21;
        do
        {
          v26 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v25 = *(_OWORD *)v22;
          *((_OWORD *)v25 + 1) = v26;
          *((_QWORD *)v25 + 4) = &off_24C02DE28;
          v27 = *((_DWORD *)v22 + 10);
          v25[44] = v22[44];
          *((_DWORD *)v25 + 10) = v27;
          *((_QWORD *)v25 + 4) = &off_24C02DD88;
          v22 += 48;
          v25 += 48;
        }
        while (v22 != v24);
        v22 = *(char **)a1;
      }
      v28 = 0xAAAAAAAAAAAAAAABLL * v19;
      v29 = v30;
      if (v22 != v20)
        free(v22);
      *(_QWORD *)a1 = v21;
      *(_DWORD *)(a1 + 12) = v29;
      return &v21[48 * v28];
    }
    else
    {
      v30 = 0;
      v10 = (char *)(a1 + 16);
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v30);
      v12 = *(char **)a1;
      v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        v14 = &v12[48 * v13];
        v15 = v11;
        do
        {
          v16 = *((_OWORD *)v12 + 1);
          *v15 = *(_OWORD *)v12;
          v15[1] = v16;
          *((_QWORD *)v15 + 4) = &off_24C02DE28;
          v17 = *((_DWORD *)v12 + 10);
          *((_BYTE *)v15 + 44) = v12[44];
          *((_DWORD *)v15 + 10) = v17;
          *((_QWORD *)v15 + 4) = &off_24C02DD88;
          v12 += 48;
          v15 += 3;
        }
        while (v12 != v14);
        v12 = *(char **)a1;
      }
      v18 = v30;
      if (v12 != v10)
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v18;
    }
  }
  return (char *)v3;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05A3B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05A3B0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EEclESU_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 608) = 1;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, _QWORD **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 200) = &unk_24C052030;
  v9 = v8 + 200;
  *(_BYTE *)(v8 + 208) = 0;
  *(_QWORD *)v8 = off_24C051FB0;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = &off_24C05A560;
  v36[1] = a1;
  v37 = v36;
  v38[0] = &off_24C05A560;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 21);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

uint64_t llvm::cl::opt<long long,false,llvm::cl::parser<long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _QWORD **a5)
{
  void *v10;
  uint64_t v11;
  _QWORD *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_24C02DE08;
  *(_QWORD *)a1 = off_24C02E070;
  *(_QWORD *)(a1 + 160) = &unk_24C02E288;
  *(_QWORD *)(a1 + 168) = &off_24C0536A8;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<long long>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, _QWORD **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = *a5;
  *(_QWORD *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = *v12;
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05A560;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05A560;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIxN4llvm2cl6parserIxEEEC1IJNS7_4descENS7_11initializerIxEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKxEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 208) = 1;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 192) = &unk_24C051F70;
  v9 = v8 + 192;
  *(_BYTE *)(v8 + 200) = 0;
  *(_QWORD *)v8 = off_24C051EF0;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = &off_24C05A4D0;
  v36[1] = a1;
  v37 = v36;
  v38[0] = &off_24C05A4D0;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 20);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

_QWORD *mlir::Pass::Option<unsigned int,llvm::cl::parser<unsigned int>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02E008;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::Pass::Option<unsigned int,llvm::cl::parser<unsigned int>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02E008;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = *(const void **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, *(unsigned int *)(a1 + 128));
}

uint64_t mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 - 64);
  *(_BYTE *)(result + 200) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<unsigned int,llvm::cl::parser<unsigned int>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02E008;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02E008;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = *(const void **)(a1 - 176);
  v5 = *(_QWORD *)(a1 - 168);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, *(unsigned int *)(a1 - 64));
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::getOption(uint64_t a1)
{
  return a1 - 192;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result - 64) = *(_DWORD *)(a2 - 64);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  void *v10;
  uint64_t v11;
  _QWORD *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_24C02E140;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_24C02DDE8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_24C02E008;
  *(_QWORD *)(a1 + 152) = &unk_24C02E258;
  *(_QWORD *)(a1 + 160) = &off_24C053660;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02E008;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_24C02E008;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_24C02E140;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  JUMPOUT(0x20BD002F8);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02E008;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 192) = &unk_24C02E008;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 192) = &unk_24C02E140;
  v5 = *(void **)(a1 - 96);
  if (v5 != *(void **)(a1 - 104))
    free(v5);
  v6 = *(void **)(a1 - 128);
  if (v6 != (void *)(a1 - 112))
    free(v6);
  JUMPOUT(0x20BD002F8);
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  const void *v9;
  uint64_t v10;
  __n128 result;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  v9 = *a3;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10 != *(_QWORD *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v9);
    goto LABEL_3;
  }
  v13 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v13)
  {
LABEL_12:
    if (v13 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v13 + 1;
      *(_QWORD *)(v10 + 8 * v13) = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  v14 = 0;
  v15 = 8 * v13;
  v16 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v16 != v9)
  {
    if (*v16 == -2)
      v14 = v16;
    ++v16;
    v15 -= 8;
    if (!v15)
    {
      if (!v14)
        goto LABEL_12;
      *v14 = v9;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKjEED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05A4D0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKjEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05A4D0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIjN4llvm2cl6parserIjEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKjEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 200) = 1;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059BB0;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059BB0;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::placement::PlacementDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"placement", 9, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::placement::PlacementDialect * mlir::MLIRContext::getOrLoadDialect<mlir::placement::PlacementDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059B20;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059B20;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::anec::ANECDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"anec", 4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::anec::ANECDialect * mlir::MLIRContext::getOrLoadDialect<mlir::anec::ANECDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059AD8;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059AD8;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::mps::MPSDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"mps", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059B68;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059B68;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::memref::MemRefDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"memref", 6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::memref::MemRefDialect * mlir::MLIRContext::getOrLoadDialect<mlir::memref::MemRefDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

mlir::memref::MemRefDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::memref::MemRefDialect * mlir::MLIRContext::getOrLoadDialect<mlir::memref::MemRefDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::memref::MemRefDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::memref::MemRefDialect *v4;
  mlir::memref::MemRefDialect *result;

  v3 = *a1;
  v4 = (mlir::memref::MemRefDialect *)operator new();
  result = mlir::memref::MemRefDialect::MemRefDialect(v4, v3);
  *a2 = result;
  return result;
}

mlir::MPSToANECTypeConverter *mlir::MPSToANECTypeConverter::MPSToANECTypeConverter(mlir::MPSToANECTypeConverter *this)
{
  char *v2;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (**v14)();
  void *v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v2 = (char *)this + 232;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_QWORD *)this = off_24C0341E0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 0x400000000;
  *((_QWORD *)this + 19) = (char *)this + 168;
  *((_DWORD *)this + 41) = 2;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_DWORD *)this + 61) = 2;
  *((_QWORD *)this + 39) = (char *)this + 328;
  *((_DWORD *)this + 81) = 2;
  *((_QWORD *)this + 49) = (char *)this + 408;
  *((_DWORD *)this + 101) = 2;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::MPSToANECTypeConverter *)((char *)this + 520));
  *((_QWORD *)this + 66) = 0;
  *(_QWORD *)this = off_24C034830;
  v14 = &off_24C05B040;
  v15 = mlir::MPSToANECTypeConverter::canonicalizeType;
  v16 = &v14;
  mlir::TypeConverter::registerConversion((unsigned int *)this, (uint64_t)&v14);
  v3 = v16;
  if (v16 == &v14)
  {
    v4 = 4;
    v3 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_6:
  v14 = &off_24C05AFF8;
  v15 = mlir::MPSToANECTypeConverter::tensorToMemRef;
  v16 = &v14;
  mlir::TypeConverter::registerConversion((unsigned int *)this, (uint64_t)&v14);
  v5 = v16;
  if (v16 == &v14)
  {
    v6 = 4;
    v5 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_11:
  v14 = &off_24C05B088;
  v15 = mlir::MPSToANECTypeConverter::materializeTypeChange;
  v16 = &v14;
  v7 = *((unsigned int *)this + 60);
  if (v7 >= *((_DWORD *)this + 61))
  {
    llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::growAndEmplaceBack<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>((uint64_t)v2, (uint64_t)&v14);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 29) + 32 * v7 + 24) = *((_QWORD *)this + 29) + 32 * v7;
    ((void (*)(uint64_t (***)()))(*v16)[3])(v16);
    ++*((_DWORD *)this + 60);
  }
  v8 = v16;
  if (v16 == &v14)
  {
    v9 = 4;
    v8 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_18;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_18:
  v14 = &off_24C05B088;
  v15 = mlir::MPSToANECTypeConverter::materializeTypeChangeWithPromotion;
  v16 = &v14;
  v10 = *((unsigned int *)this + 80);
  if (v10 >= *((_DWORD *)this + 81))
  {
    llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::growAndEmplaceBack<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>((uint64_t)this + 312, (uint64_t)&v14);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 39) + 32 * v10 + 24) = *((_QWORD *)this + 39) + 32 * v10;
    ((void (*)(uint64_t (***)()))(*v16)[3])(v16);
    ++*((_DWORD *)this + 80);
  }
  v11 = v16;
  if (v16 == &v14)
  {
    v12 = 4;
    v11 = &v14;
    goto LABEL_24;
  }
  if (v16)
  {
    v12 = 5;
LABEL_24:
    (*v11)[v12]();
  }
  return this;
}

uint64_t mlir::MPSToANECTypeConverter::canonicalizeType(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::MPSToANECTypeConverter::canonicalizeIntegerType(a1);
  return a1;
}

uint64_t mlir::MPSToANECTypeConverter::tensorToMemRef(uint64_t a1)
{
  uint64_t ElementType;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *Shape;
  mlir::AffineMap *v17;
  mlir::AffineMap *v18;
  uint64_t OperandRange;
  uint64_t v21;
  _QWORD v22[2];
  char v23;

  v21 = a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v21);
  v2 = ElementType;
  if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v2 = mlir::MPSToANECTypeConverter::canonicalizeIntegerType(ElementType);
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v21))
    return mlir::UnrankedMemRefType::get(v2, 0);
  LOBYTE(v22[0]) = 0;
  v23 = 0;
  v3 = (uint64_t *)mlir::TensorType::cloneWith((uint64_t)&v21, (uint64_t)v22, v2);
  v4 = (uint64_t)v3;
  if (!v3)
    goto LABEL_13;
  v5 = *v3;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_13:
    v14 = 0;
  v22[0] = mlir::getRankPromotionTypeForANE(v4, v14);
  v22[1] = v15;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
  v18 = v17;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  return mlir::MemRefType::get(Shape, v18, OperandRange, 0, 0, 0);
}

char *mlir::MPSToANECTypeConverter::materializeTypeChange(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10[0] = a3;
  v10[1] = a4;
  v8 = mlir::ValueRange::dereference_iterator(v10, 0);
  return (char *)mlir::OpBuilder::create<mlir::anec::UnrealizedConversionCast,mlir::Type &,mlir::Value>(a1, a5, &v9, &v8)- 16;
}

char *mlir::MPSToANECTypeConverter::materializeTypeChangeWithPromotion(mlir::OpBuilder *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[2];
  _QWORD v21[3];

  v6 = (uint64_t)a2;
  v21[2] = *MEMORY[0x24BDAC8D0];
  v21[0] = a3;
  v21[1] = a4;
  if (a2)
  {
    v8 = *a2;
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *(unsigned int *)(v8 + 16);
    if (!(_DWORD)v10)
      goto LABEL_10;
    v11 = *(_QWORD **)(v8 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      a2 = (uint64_t *)v11[1];
    else
LABEL_10:
      a2 = 0;
  }
  v20[0] = mlir::getRankPromotionTypeForANE(v6, (uint64_t)a2);
  v20[1] = v17;
  v19 = mlir::ValueRange::dereference_iterator(v21, 0);
  return (char *)mlir::OpBuilder::create<mlir::anec::UnrealizedConversionCast,mlir::Type &,mlir::Value>(a1, a5, v20, &v19)- 16;
}

void mlir::MPSToANECTypeConverter::~MPSToANECTypeConverter(pthread_rwlock_t **this)
{
  mlir::TypeConverter::~TypeConverter(this);
}

void sub_207577DD4()
{
  JUMPOUT(0x20BD002F8);
}

void mlir::TypeConverter::~TypeConverter(pthread_rwlock_t **this)
{
  mlir::TypeConverter::~TypeConverter(this);
}

{
  uint64_t v2;
  llvm *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *this = (pthread_rwlock_t *)off_24C0341E0;
  llvm::sys::RWMutexImpl::~RWMutexImpl(this + 65);
  v2 = *((unsigned int *)this + 128);
  v3 = (llvm *)this[62];
  if ((_DWORD)v2)
  {
    v4 = (char *)v3 + 24;
    v5 = 40 * v2;
    do
    {
      if ((*((_QWORD *)v4 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = (char *)*((_QWORD *)v4 - 2);
        if (v4 != v6)
          free(v6);
      }
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
    v3 = (llvm *)this[62];
    v7 = 40 * *((unsigned int *)this + 128);
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v7);
}

void sub_207577DFC()
{
  JUMPOUT(0x20BD002F8);
}

void mlir::TypeConverter::registerConversion(unsigned int *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  void *v24;

  v3 = a1 + 2;
  v4 = a1[4];
  if (v4 >= a1[5])
  {
    llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::growAndEmplaceBack<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>((uint64_t)v3, a2);
    v7 = a1[120];
    if (v7)
      goto LABEL_9;
  }
  else
  {
    v5 = *v3 + 32 * v4;
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      if (v6 == a2)
      {
        *(_QWORD *)(v5 + 24) = v5;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5);
        LODWORD(v4) = a1[4];
      }
      else
      {
        *(_QWORD *)(v5 + 24) = v6;
        *(_QWORD *)(a2 + 24) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 24) = 0;
    }
    a1[4] = v4 + 1;
    v7 = a1[120];
    if (v7)
      goto LABEL_9;
  }
  if (!a1[121])
    goto LABEL_12;
LABEL_9:
  v8 = a1 + 118;
  v9 = a1[122];
  if (v9 <= 4 * v7 || v9 < 0x41)
  {
    if (!(_DWORD)v9)
      goto LABEL_23;
    v11 = (_QWORD *)*v8;
    v12 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = v12 + 1;
      v14 = (v12 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v15 = &v11[2 * v14];
      v16 = v11 + 2;
      v17 = v14;
      do
      {
        *(v16 - 2) = -4096;
        *v16 = -4096;
        v16 += 4;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14)
      {
LABEL_23:
        *((_QWORD *)a1 + 60) = 0;
        v10 = a1[126];
        if (!v10)
          goto LABEL_24;
        goto LABEL_25;
      }
    }
    else
    {
      v15 = (_QWORD *)*v8;
    }
    v18 = &v11[2 * v9];
    do
    {
      *v15 = -4096;
      v15 += 2;
    }
    while (v15 != v18);
    goto LABEL_23;
  }
  llvm::DenseMap<mlir::Type,mlir::Type,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,mlir::Type>>::shrink_and_clear((uint64_t)v8);
LABEL_12:
  v10 = a1[126];
  if (!v10)
  {
LABEL_24:
    if (!a1[127])
      return;
  }
LABEL_25:
  v19 = a1 + 124;
  v20 = a1[128];
  if (v20 > 4 * v10 && v20 >= 0x41)
  {
    llvm::DenseMap<mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>::shrink_and_clear((uint64_t)v19);
    return;
  }
  if ((_DWORD)v20)
  {
    v21 = *v19 + 24;
    for (i = 40 * v20; i; i -= 40)
    {
      v23 = *(_QWORD *)(v21 - 24);
      if (v23 != -8192)
      {
        if (v23 == -4096)
          goto LABEL_31;
        v24 = *(void **)(v21 - 16);
        if ((void *)v21 != v24)
          free(v24);
      }
      *(_QWORD *)(v21 - 24) = -4096;
LABEL_31:
      v21 += 40;
    }
  }
  *((_QWORD *)a1 + 63) = 0;
}

uint64_t llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::growAndEmplaceBack<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v20;

  v20 = 0;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 32, &v20);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = &v5[32 * v6];
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *((_QWORD *)v7 + 3) = v7;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
      v6 = *(unsigned int *)(a1 + 8);
      v9 = *(_QWORD **)a1;
      if (!(_DWORD)v6)
        goto LABEL_24;
    }
    else
    {
      *((_QWORD *)v7 + 3) = v8;
      *(_QWORD *)(a2 + 24) = 0;
      v9 = *(_QWORD **)a1;
      if (!(_DWORD)v6)
        goto LABEL_24;
    }
  }
  else
  {
    *((_QWORD *)v7 + 3) = 0;
    v9 = *(_QWORD **)a1;
    if (!(_DWORD)v6)
      goto LABEL_24;
  }
  v10 = 32 * v6;
  v11 = v5;
  do
  {
    v12 = (_QWORD *)v9[3];
    if (v12)
    {
      if (v9 == v12)
      {
        *((_QWORD *)v11 + 3) = v11;
        (*(void (**)(_QWORD, char *))(*(_QWORD *)v9[3] + 24))(v9[3], v11);
      }
      else
      {
        *((_QWORD *)v11 + 3) = v12;
        v9[3] = 0;
      }
    }
    else
    {
      *((_QWORD *)v11 + 3) = 0;
    }
    v11 += 32;
    v9 += 4;
    v10 -= 32;
  }
  while (v10);
  v9 = *(_QWORD **)a1;
  v13 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v13)
  {
    v14 = 4 * v13;
    while (1)
    {
      v15 = (_QWORD *)v9[v14 - 1];
      if (&v9[v14 - 4] == v15)
      {
        v15 = &v9[v14 - 4];
        v16 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_19;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_19:
      v14 -= 4;
      if (!(v14 * 8))
      {
        v9 = *(_QWORD **)a1;
        break;
      }
    }
  }
LABEL_24:
  v17 = v20;
  if (v9 != v4)
    free(v9);
  *(_QWORD *)a1 = v5;
  v18 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 12) = v17;
  return (uint64_t)&v5[32 * v18 - 32];
}

uint64_t llvm::DenseMap<mlir::Type,mlir::Type,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,mlir::Type>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  _QWORD *v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = (llvm *)((char *)v5 + 16 * v8);
      v10 = (_QWORD *)((char *)v5 + 16);
      v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        return result;
    }
    else
    {
      v9 = *(llvm **)result;
    }
    v12 = (llvm *)((char *)v5 + 16 * v1);
    do
    {
      *(_QWORD *)v9 = -4096;
      v9 = (llvm *)((char *)v9 + 16);
    }
    while (v9 != v12);
  }
  return result;
}

void llvm::DenseMap<mlir::Type,llvm::SmallVector<mlir::Type,2u>,llvm::DenseMapInfo<mlir::Type,void>,llvm::detail::DenseMapPair<mlir::Type,llvm::SmallVector<mlir::Type,2u>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  unsigned int v8;
  llvm *v9;
  unint64_t v10;
  llvm *v11;
  unint64_t v12;
  uint64_t v13;
  llvm *v14;
  llvm *v15;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)a1 + 24;
    v5 = 40 * v2;
    do
    {
      if ((*(_QWORD *)(v4 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *(void **)(v4 - 16);
        if ((void *)v4 != v6)
          free(v6);
      }
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64)
    v7 = 64;
  if (v3)
    v8 = v7;
  else
    v8 = 0;
  if (v8 != *(_DWORD *)(a1 + 16))
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(40 * v2));
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    v9 = *(llvm **)a1;
    v10 = 40 * v8 - 40;
    if (v10 < 0x28)
    {
      v11 = *(llvm **)a1;
LABEL_20:
      v15 = (llvm *)((char *)v9 + 40 * v8);
      do
      {
        *(_QWORD *)v11 = -4096;
        v11 = (llvm *)((char *)v11 + 40);
      }
      while (v11 != v15);
      return;
    }
    v12 = v10 / 0x28 + 1;
    v11 = (llvm *)((char *)v9 + 40 * (v12 & 0xFFFFFFFFFFFFFFELL));
    v13 = v12 & 0xFFFFFFFFFFFFFFELL;
    v14 = *(llvm **)a1;
    do
    {
      *(_QWORD *)v14 = -4096;
      *((_QWORD *)v14 + 5) = -4096;
      v14 = (llvm *)((char *)v14 + 80);
      v13 -= 2;
    }
    while (v13);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_20;
  }
}

void _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_ED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05B040;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_E7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05B040;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_4TypeEZNKS3_12wrapCallbackIS5_PFS5_S5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS_8optionalINS2_13LogicalResultEEES5_RN4llvm15SmallVectorImplIS5_EEEEEE4typeEOSA_EUlS5_SJ_E_EENS9_IXsr3stdE14is_invocable_vISA_SB_SJ_EESL_E4typeESO_EUlS5_SJ_E_NS_9allocatorISS_EESK_EclEOS5_SJ_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;

  if (*a2)
  {
    v4 = (*(uint64_t (**)(void))(a1 + 8))();
    if (v4)
    {
      v5 = *(unsigned int *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    v6 = v4 != 0;
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v6 | (v7 << 8);
}

uint64_t mlir::MPSToANECTypeConverter::canonicalizeIntegerType(uint64_t a1)
{
  uint64_t v1;
  unsigned int Width;
  uint64_t Context;
  uint64_t v5;

  v5 = a1;
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v5) > 7)
  {
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v5))
      return v5;
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v5);
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v5);
    v1 = Context;
  }
  else
  {
    v1 = mlir::Attribute::getContext((mlir::Attribute *)&v5);
    Width = 8;
  }
  return mlir::IntegerType::get(v1, Width, 1u);
}

void _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_ED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05AFF8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_E7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05AFF8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZNK4mlir13TypeConverter12wrapCallbackINS2_10TensorTypeEZNKS3_12wrapCallbackIS5_PFNS_8optionalINS2_4TypeEEES5_EEENS_9enable_ifIXsr3stdE14is_invocable_vIT0_T_EENS_8functionIFNS7_INS2_13LogicalResultEEES8_RN4llvm15SmallVectorImplIS8_EEEEEE4typeEOSD_EUlS5_SL_E_EENSC_IXsr3stdE14is_invocable_vISD_SE_SL_EESN_E4typeESQ_EUlS8_SL_E_NS_9allocatorISU_EESM_EclEOS8_SL_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  BOOL v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v12;

  v3 = *(void **)(**(_QWORD **)a2 + 136);
  v4 = v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v4 && (v6 = (*(uint64_t (**)(void))(a1 + 8))(), v7))
  {
    if (v6)
    {
      v8 = *(unsigned int *)(a3 + 8);
      if (v8 >= *(_DWORD *)(a3 + 12))
      {
        v12 = v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v8 + 1, 8);
        v6 = v12;
        LODWORD(v8) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v6;
      ++*(_DWORD *)(a3 + 8);
    }
    v9 = v6 != 0;
    v10 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return v9 | (v10 << 8);
}

void std::__function::__func<std::function<std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)> mlir::TypeConverter::wrapMaterialization<mlir::Type,std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>(std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&)::{lambda(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)#1},std::allocator<std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&>,std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<std::function<std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)> mlir::TypeConverter::wrapMaterialization<mlir::Type,std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>(std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&)::{lambda(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)#1},std::allocator<std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&>,std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C05B088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)> mlir::TypeConverter::wrapMaterialization<mlir::Type,std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>(std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&)::{lambda(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)#1},std::allocator<std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&>,std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C05B088;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)> mlir::TypeConverter::wrapMaterialization<mlir::Type,std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>(std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&)::{lambda(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)#1},std::allocator<std::optional<mlir::Value> (*)(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location) &&>,std::optional<mlir::Value> ()(mlir::OpBuilder &,mlir::Type,mlir::ValueRange,mlir::Location)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  if (*a3)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(a2, *a3, *a4, a4[1], *a5);
  else
    return 0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::UnrealizedConversionCast,mlir::Type &,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.unrealized_conversion_cast", (const unsigned __int8 *)0x1F, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.unrealized_conversion_cast";
    v17[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::UnrealizedConversionCast,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_19MPSToANEC14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_BYTE *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_19MPSToANEC14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C059C50;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_19MPSToANEC14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EE7__cloneEPNS0_6__baseISM_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C059C50;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_19MPSToANEC14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EEclEOSD_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v2 = *(_QWORD *)(*a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v2 = 0;
  v5 = v2;
  if (v2)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
    LODWORD(v2) = v3 > 3;
  }
  return v2 | 0x100;
}

uint64_t llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char **v55;
  char **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char **v63;
  char **v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char **v73;
  char **v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v16 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v17 = &v4[8 * v5];
        do
        {
          v18 = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          v19 = *(char ***)v16;
          *(_QWORD *)v16 = v18;
          if (v19)
          {
            v20 = *v19;
            v21 = *((unsigned int *)v19 + 2);
            if ((_DWORD)v21)
            {
              v22 = 8 * v21;
              v23 = v20 - 8;
              do
              {
                v24 = *(_QWORD *)&v23[v22];
                *(_QWORD *)&v23[v22] = 0;
                if (v24)
                  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                v22 -= 8;
              }
              while (v22);
              v20 = *v19;
            }
            if (v20 != (char *)(v19 + 2))
              free(v20);
            MEMORY[0x20BD002F8](v19, 0x1080C407559D7D1);
          }
          v4 += 8;
          v16 += 8;
        }
        while (v4 != v17);
        v25 = v16;
        v16 = *(char **)a1;
        v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v25 = *(char **)a1;
      }
      v62 = &v16[8 * v6];
      while (v62 != v25)
      {
        v64 = (char **)*((_QWORD *)v62 - 1);
        v62 -= 8;
        v63 = v64;
        *(_QWORD *)v62 = 0;
        if (v64)
        {
          v65 = *v63;
          v66 = *((unsigned int *)v63 + 2);
          if ((_DWORD)v66)
          {
            v67 = 8 * v66;
            v68 = v65 - 8;
            do
            {
              v69 = *(_QWORD *)&v68[v67];
              *(_QWORD *)&v68[v67] = 0;
              if (v69)
                (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
              v67 -= 8;
            }
            while (v67);
            v65 = *v63;
          }
          if (v65 != (char *)(v63 + 2))
            free(v65);
          MEMORY[0x20BD002F8](v63, 0x1080C407559D7D1);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v70 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v70)
      {
        v71 = *(char **)a2;
        v72 = (char *)(*(_QWORD *)a2 + 8 * v70);
        do
        {
          v74 = (char **)*((_QWORD *)v72 - 1);
          v72 -= 8;
          v73 = v74;
          *(_QWORD *)v72 = 0;
          if (v74)
          {
            v75 = *v73;
            v76 = *((unsigned int *)v73 + 2);
            if ((_DWORD)v76)
            {
              v77 = 8 * v76;
              v78 = v75 - 8;
              do
              {
                v79 = *(_QWORD *)&v78[v77];
                *(_QWORD *)&v78[v77] = 0;
                if (v79)
                  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
                v77 -= 8;
              }
              while (v77);
              v75 = *v73;
            }
            if (v75 != (char *)(v73 + 2))
              free(v75);
            MEMORY[0x20BD002F8](v73, 0x1080C407559D7D1);
          }
        }
        while (v72 != v71);
      }
      goto LABEL_97;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v26 = &v4[8 * v6];
        v27 = *(char **)a1;
        do
        {
          v28 = *(_QWORD *)v4;
          *(_QWORD *)v4 = 0;
          v29 = *(char ***)v27;
          *(_QWORD *)v27 = v28;
          if (v29)
          {
            v30 = *v29;
            v31 = *((unsigned int *)v29 + 2);
            if ((_DWORD)v31)
            {
              v32 = 8 * v31;
              v33 = v30 - 8;
              do
              {
                v34 = *(_QWORD *)&v33[v32];
                *(_QWORD *)&v33[v32] = 0;
                if (v34)
                  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                v32 -= 8;
              }
              while (v32);
              v30 = *v29;
            }
            if (v30 != (char *)(v29 + 2))
              free(v30);
            MEMORY[0x20BD002F8](v29, 0x1080C407559D7D1);
          }
          v4 += 8;
          v27 += 8;
        }
        while (v4 != v26);
        goto LABEL_48;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = (char *)(*(_QWORD *)a1 + 8 * v6);
        do
        {
          v10 = (char **)*((_QWORD *)v8 - 1);
          v8 -= 8;
          v9 = v10;
          *(_QWORD *)v8 = 0;
          if (v10)
          {
            v11 = *v9;
            v12 = *((unsigned int *)v9 + 2);
            if ((_DWORD)v12)
            {
              v13 = 8 * v12;
              v14 = v11 - 8;
              do
              {
                v15 = *(_QWORD *)&v14[v13];
                *(_QWORD *)&v14[v13] = 0;
                if (v15)
                  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
                v13 -= 8;
              }
              while (v13);
              v11 = *v9;
            }
            if (v11 != (char *)(v9 + 2))
              free(v11);
            MEMORY[0x20BD002F8](v9, 0x1080C407559D7D1);
          }
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::PDLPatternConfigSet>,false>::grow(a1, v5);
    }
    v6 = 0;
LABEL_48:
    v35 = *(char **)a2;
    v36 = *(unsigned int *)(a2 + 8);
    if (v6 != v36)
    {
      v37 = *(char **)a1;
      v38 = 8 * v6;
      v39 = (char *)(*(_QWORD *)a1 + 8 * v6);
      v40 = &v35[8 * v6];
      v41 = 8 * v36;
      v42 = 8 * v36 - 8 * v6 - 8;
      if (v42 < 0x78 || v40 < &v37[v41] && v39 < &v35[v41])
        goto LABEL_55;
      v43 = (v42 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v39 += v44;
      v40 += v44;
      v45 = v38 + 16;
      v46 = &v35[v38 + 16];
      v47 = &v37[v45];
      v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v50 = *(_OWORD *)v46;
        *((_OWORD *)v46 - 1) = 0uLL;
        *(_OWORD *)v46 = 0uLL;
        *((_OWORD *)v47 - 1) = v49;
        *(_OWORD *)v47 = v50;
        v46 += 32;
        v47 += 32;
        v48 -= 4;
      }
      while (v48);
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_55:
        v51 = &v35[8 * v36];
        do
        {
          v52 = *(_QWORD *)v40;
          *(_QWORD *)v40 = 0;
          v40 += 8;
          *(_QWORD *)v39 = v52;
          v39 += 8;
        }
        while (v40 != v51);
      }
      v35 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v53 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v53)
    {
      v54 = &v35[8 * v53];
      do
      {
        v56 = (char **)*((_QWORD *)v54 - 1);
        v54 -= 8;
        v55 = v56;
        *(_QWORD *)v54 = 0;
        if (v56)
        {
          v57 = *v55;
          v58 = *((unsigned int *)v55 + 2);
          if ((_DWORD)v58)
          {
            v59 = 8 * v58;
            v60 = v57 - 8;
            do
            {
              v61 = *(_QWORD *)&v60[v59];
              *(_QWORD *)&v60[v59] = 0;
              if (v61)
                (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
              v59 -= 8;
            }
            while (v59);
            v57 = *v55;
          }
          if (v57 != (char *)(v55 + 2))
            free(v57);
          MEMORY[0x20BD002F8](v55, 0x1080C407559D7D1);
        }
      }
      while (v54 != v35);
    }
LABEL_97:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::PDLPatternConfigSet>,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  char *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char **v22;
  char **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;

  v30 = 0;
  v3 = (uint64_t *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v30);
  v5 = *(_QWORD *)a1;
  v6 = *(uint64_t **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
    goto LABEL_27;
  v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v8 < 0xB)
  {
    v9 = v4;
LABEL_12:
    v18 = (uint64_t *)(v5 + 8 * v7);
    do
    {
      v19 = *v6;
      *v6++ = 0;
      *(_QWORD *)v9 = v19;
      v9 += 8;
    }
    while (v6 != v18);
    goto LABEL_14;
  }
  v10 = v5 >= (unint64_t)&v4[8 * v7] || (unint64_t)v4 >= v5 + 8 * v7;
  v9 = v4;
  if (!v10)
    goto LABEL_12;
  v11 = v8 + 1;
  v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
  v9 = &v4[v12];
  v6 = (uint64_t *)(v5 + v12);
  v13 = (__int128 *)(v5 + 16);
  v14 = v4 + 16;
  v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = *(v13 - 1);
    v17 = *v13;
    *(v13 - 1) = 0uLL;
    *v13 = 0uLL;
    *(v14 - 1) = v16;
    *v14 = v17;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v20 = *(_QWORD **)a1;
  v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v7);
  do
  {
    v23 = (char **)*--v21;
    v22 = v23;
    *v21 = 0;
    if (v23)
    {
      v24 = *v22;
      v25 = *((unsigned int *)v22 + 2);
      if ((_DWORD)v25)
      {
        v26 = 8 * v25;
        v27 = v24 - 8;
        do
        {
          v28 = *(_QWORD *)&v27[v26];
          *(_QWORD *)&v27[v26] = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v26 -= 8;
        }
        while (v26);
        v24 = *v22;
      }
      if (v24 != (char *)(v22 + 2))
        free(v24);
      MEMORY[0x20BD002F8](v22, 0x1080C407559D7D1);
    }
  }
  while (v21 != v20);
  v6 = *(uint64_t **)a1;
LABEL_27:
  v29 = v30;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v29;
}

void mlir::ANECRegionOpCreator::ANECRegionOpCreator(uint64_t a1, uint64_t a2, mlir::ConversionTarget *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  *(_QWORD *)(a1 + 16) = a11;
  *(_QWORD *)(a1 + 24) = a12;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_24C0346E0;
  *(_QWORD *)(a1 + 8) = a2;
  mlir::ConversionTarget::ConversionTarget((mlir::ConversionTarget *)(a1 + 40), a3);
}

uint64_t sub_20757943C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  int v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (***v52)();
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (***v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t (***v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t (***v62)();
  uint64_t v63;
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t (***v71)();
  uint64_t v72;
  uint64_t v73;
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t (***v77)();
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t (**v82)();
  int v83;
  uint64_t (***v84)();
  uint64_t (**v85)();
  uint64_t v86;
  const char *v87;
  uint64_t v88;

  *(_QWORD *)(v36 + 200) = v39;
  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(v36 + 208, v42, 0, 0, 0, 0);
  *(_QWORD *)(v36 + 224) = &unk_24C04FDC8;
  *(_QWORD *)(v36 + 232) = v38;
  *(_QWORD *)(v36 + 240) = v45;
  *(_DWORD *)(v36 + 248) = v41;
  *(_BYTE *)(v36 + 252) = v44;
  *(_BYTE *)(v36 + 253) = v43;
  *(_QWORD *)(v36 + 256) = v80;
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v47 = v41;
  v48 = *(_BYTE *)(v46 + 72);
  if (v40 >= 0x17)
  {
    v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v50 = v40 | 7;
    v51 = v50 + 1;
    v49 = operator new(v50 + 1);
    *(_QWORD *)(v36 + 272) = v40;
    *(_QWORD *)(v36 + 280) = v51 | 0x8000000000000000;
    *(_QWORD *)(v36 + 264) = v49;
    goto LABEL_8;
  }
  v49 = (void *)(v36 + 264);
  *(_BYTE *)(v36 + 287) = v40;
  if (v40)
LABEL_8:
    memmove(v49, *(const void **)(v46 + 56), v40);
  *((_BYTE *)v49 + v40) = 0;
  *(_BYTE *)(v36 + 288) = v48;
  v82 = &off_24C059E90;
  v83 = v47;
  v84 = &v82;
  v85 = (uint64_t (**)())&v87;
  v87 = "anec";
  v88 = 4;
  v86 = 0x200000001;
  mlir::ConversionTarget::setDialectAction(v37, (uint64_t)&v87, 1, 1);
  mlir::ConversionTarget::setLegalityCallback(v37, (uint64_t)v85, v86, &v82);
  if (v85 != (uint64_t (**)())&v87)
    free(v85);
  v52 = v84;
  if (v84 == &v82)
  {
    v54 = 4;
    v52 = &v82;
    v53 = v39;
  }
  else
  {
    v53 = v39;
    if (!v84)
      goto LABEL_16;
    v54 = 5;
  }
  (*v52)[v54]();
LABEL_16:
  v85 = &off_24C059CE0;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A12", 8, *(_QWORD *)(v36 + 192));
  v55 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v55, &v85);
  v56 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v57 = 4;
    v56 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_21;
    v57 = 5;
  }
  (*v56)[v57]();
LABEL_21:
  v85 = &off_24C059D28;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A13", 8, *(_QWORD *)(v36 + 192));
  v58 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v58, &v85);
  v59 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v60 = 4;
    v59 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_26;
    v60 = 5;
  }
  (*v59)[v60]();
LABEL_26:
  v85 = &off_24C059D70;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A14", 8, *(_QWORD *)(v36 + 192));
  v61 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v61, &v85);
  v62 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v63 = 4;
    v62 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_31;
    v63 = 5;
  }
  (*v62)[v63]();
LABEL_31:
  v85 = &off_24C059DB8;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A15", 8, *(_QWORD *)(v36 + 192));
  v64 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v64, &v85);
  v65 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v66 = 4;
    v65 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_36;
    v66 = 5;
  }
  (*v65)[v66]();
LABEL_36:
  v85 = &off_24C059E00;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A16", 8, *(_QWORD *)(v36 + 192));
  v67 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v67, &v85);
  v68 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v69 = 4;
    v68 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_41;
    v69 = 5;
  }
  (*v68)[v69]();
LABEL_41:
  v85 = &off_24BFF5228;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A17", 8, *(_QWORD *)(v36 + 192));
  v70 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v70, &v85);
  v71 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v72 = 4;
    v71 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_46;
    v72 = 5;
  }
  (*v71)[v72]();
LABEL_46:
  v85 = &off_24C059E48;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.A11Legacy", 14, *(_QWORD *)(v36 + 192));
  v73 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v73, &v85);
  v74 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v75 = 4;
    v74 = &v85;
  }
  else
  {
    if (!v88)
      goto LABEL_51;
    v75 = 5;
  }
  (*v74)[v75]();
LABEL_51:
  v85 = &off_24C059C98;
  v86 = v53;
  v88 = (uint64_t)&v85;
  mlir::OperationName::OperationName(&v81, "anec.region_return", 18, *(_QWORD *)(v36 + 192));
  v76 = v81;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, v81, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, v76, &v85);
  v77 = (uint64_t (***)())v88;
  if ((uint64_t (***)())v88 == &v85)
  {
    v78 = 4;
    v77 = &v85;
    goto LABEL_55;
  }
  if (v88)
  {
    v78 = 5;
LABEL_55:
    (*v77)[v78]();
  }
  mlir::OperationName::OperationName(&v85, "anec.unrealized_conversion_cast", 31, *(_QWORD *)(v36 + 192));
  mlir::ConversionTarget::setOpAction((uint64_t)v37, (uint64_t)v85, 2);
  return v36;
}

void mlir::ConversionTarget::ConversionTarget(mlir::ConversionTarget *this, const mlir::ConversionTarget *a2)
{
  *(_QWORD *)this = off_24C034280;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  llvm::deallocate_buffer(0, 0);
}

void sub_207579A34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *buffer;

  v3 = *(unsigned int *)(v1 + 24);
  *(_DWORD *)(v0 + 24) = v3;
  if ((_DWORD)v3)
  {
    buffer = llvm::allocate_buffer(16 * v3, (std::align_val_t)8uLL);
    *(_QWORD *)(v0 + 8) = buffer;
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
    memcpy(buffer, *(const void **)(v1 + 8), 16 * *(unsigned int *)(v0 + 24));
  }
  else
  {
    *v2 = 0;
    v2[1] = 0;
  }
  *(_QWORD *)(v0 + 32) = v0 + 48;
  *(_QWORD *)(v0 + 40) = 0;
  if (*(_DWORD *)(v1 + 40))
    llvm::SmallVectorImpl<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>>::operator=(v0 + 32, (unsigned int *)(v1 + 32));
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_DWORD *)(v0 + 64) = 0;
  llvm::DenseMap<mlir::OperationName,std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::function<std::optional<BOOL> ()(mlir::Operation *)>>>::copyFrom(v0 + 48);
}

_QWORD *sub_207579AA0()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t *v2;

  llvm::StringMap<mlir::ConversionTarget::LegalizationAction,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)(v0 + 9), v1 + 9);
  llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::StringMap((llvm::StringMapImpl *)(v0 + 12), v1 + 12);
  v2 = (uint64_t *)v1[18];
  if (v2)
  {
    if (v2 == v1 + 15)
    {
      v0[18] = v0 + 15;
      (*(void (**)(uint64_t))(*(_QWORD *)v1[18] + 24))(v1[18]);
    }
    else
    {
      v0[18] = (*(uint64_t (**)(uint64_t *))(*v2 + 16))(v2);
    }
  }
  else
  {
    v0[18] = 0;
  }
  v0[19] = v1[19];
  return v0;
}

uint64_t llvm::SmallVectorImpl<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>>::operator=(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t j;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *i;
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((unsigned int *)a1 == a2)
    return a1;
  v4 = a2[2];
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= v4)
  {
    if ((_DWORD)v4)
    {
      v10 = *(_QWORD *)a2 + 48 * v4;
      v11 = *(_QWORD **)a1;
      v12 = (_QWORD *)(*(_QWORD *)a2 + 16);
      while (1)
      {
        v15 = v11;
        v16 = v12 - 2;
        *v11 = *(v12 - 2);
        v17 = *((_DWORD *)v12 - 2);
        *((_BYTE *)v15 + 12) = *((_BYTE *)v12 - 4);
        *((_DWORD *)v15 + 2) = v17;
        v18 = (_QWORD *)v12[3];
        if (v18)
        {
          if (v12 == v18)
          {
            v44 = v43;
            (*(void (**)(_QWORD *, _QWORD *))(*v12 + 24))(v12, v43);
          }
          else
          {
            v44 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
          }
        }
        else
        {
          v44 = 0;
        }
        std::__function::__value_func<std::optional<BOOL> ()(mlir::Operation *)>::swap[abi:nn180100](v43, v15 + 2);
        v13 = v44;
        if (v44 == v43)
        {
          v13 = v43;
          v14 = 4;
        }
        else
        {
          if (!v44)
            goto LABEL_16;
          v14 = 5;
        }
        (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
        v12 += 6;
        v11 = v15 + 6;
        if (v16 + 6 == (_QWORD *)v10)
        {
          v19 = v15 + 6;
          v20 = *(_QWORD **)a1;
          LODWORD(v5) = *(_DWORD *)(a1 + 8);
          goto LABEL_52;
        }
      }
    }
    v20 = *(_QWORD **)a1;
    v19 = *(_QWORD **)a1;
LABEL_52:
    for (i = &v20[6 * v5]; ; i -= 6)
    {
      if (i == v19)
        goto LABEL_42;
      v41 = (_QWORD *)*(i - 1);
      if (i - 4 == v41)
        break;
      if (v41)
      {
        v42 = 5;
        goto LABEL_54;
      }
LABEL_55:
      ;
    }
    v41 = i - 4;
    v42 = 4;
LABEL_54:
    (*(void (**)(void))(*v41 + 8 * v42))();
    goto LABEL_55;
  }
  if (*(_DWORD *)(a1 + 12) < v4)
  {
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)a1;
      for (j = 6 * v5; j * 8; j -= 6)
      {
        v8 = (_QWORD *)v6[j - 1];
        if (&v6[j - 4] == v8)
        {
          v8 = &v6[j - 4];
          v9 = 4;
        }
        else
        {
          if (!v8)
            continue;
          v9 = 5;
        }
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::grow(a1, v4);
    goto LABEL_40;
  }
  if ((_DWORD)v5)
  {
    v21 = *(_QWORD *)a2 + 48 * v5;
    v22 = *(_QWORD **)a1;
    v23 = (_QWORD *)(*(_QWORD *)a2 + 16);
    while (1)
    {
      v26 = v23 - 2;
      *v22 = *(v23 - 2);
      v27 = *((_DWORD *)v23 - 2);
      *((_BYTE *)v22 + 12) = *((_BYTE *)v23 - 4);
      *((_DWORD *)v22 + 2) = v27;
      v28 = (_QWORD *)v23[3];
      if (v28)
      {
        if (v23 == v28)
        {
          v44 = v43;
          (*(void (**)(_QWORD *, _QWORD *))(*v23 + 24))(v23, v43);
        }
        else
        {
          v44 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
        }
      }
      else
      {
        v44 = 0;
      }
      v29 = v22 + 2;
      std::__function::__value_func<std::optional<BOOL> ()(mlir::Operation *)>::swap[abi:nn180100](v43, v29);
      v24 = v44;
      if (v44 == v43)
      {
        v24 = v43;
        v25 = 4;
      }
      else
      {
        if (!v44)
          goto LABEL_30;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_30:
      v23 += 6;
      v22 = v29 + 4;
      if (v26 + 6 == (_QWORD *)v21)
        goto LABEL_41;
    }
  }
LABEL_40:
  v5 = 0;
LABEL_41:
  v30 = a2[2];
  if (v5 != v30)
  {
    v32 = *(_QWORD *)a2;
    v33 = *(_QWORD **)a1;
    v34 = 48 * v5;
    v35 = 48 * v30;
    do
    {
      v36 = &v33[(unint64_t)v34 / 8];
      v37 = v32 + v34;
      *v36 = *(_QWORD *)(v32 + v34);
      v38 = *(_DWORD *)(v32 + v34 + 8);
      *((_BYTE *)v36 + 12) = *(_BYTE *)(v32 + v34 + 12);
      *((_DWORD *)v36 + 2) = v38;
      v39 = *(_QWORD *)(v32 + v34 + 40);
      if (v39)
      {
        if (v37 + 16 == v39)
        {
          v33[(unint64_t)v34 / 8 + 5] = v36 + 2;
          (*(void (**)(_QWORD))(**(_QWORD **)(v37 + 40) + 24))(*(_QWORD *)(v37 + 40));
        }
        else
        {
          v33[(unint64_t)v34 / 8 + 5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        }
      }
      else
      {
        v36[5] = 0;
      }
      v33 += 6;
      v35 -= 48;
      v32 += 48;
    }
    while (v34 != v35);
  }
LABEL_42:
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::OperationName,mlir::ConversionTarget::LegalizationInfo>,false>::grow(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;

  v18 = 0;
  v3 = (_QWORD *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 48, &v18);
  v5 = v4;
  v6 = *(_QWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v4 + 40;
    v9 = 48 * v7;
    v10 = v6 + 5;
    do
    {
      *(v8 - 5) = *(v10 - 5);
      v11 = *((_DWORD *)v10 - 8);
      *((_BYTE *)v8 - 28) = *((_BYTE *)v10 - 28);
      *((_DWORD *)v8 - 8) = v11;
      v12 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v10 - 3 == v12)
        {
          *v8 = v8 - 3;
          (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
        }
        else
        {
          *v8 = v12;
          *v10 = 0;
        }
      }
      else
      {
        *v8 = 0;
      }
      v8 += 6;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
    v6 = *(_QWORD **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 6 * v13;
      while (1)
      {
        v15 = (_QWORD *)v6[v14 - 1];
        if (&v6[v14 - 4] == v15)
        {
          v15 = &v6[v14 - 4];
          v16 = 4;
        }
        else
        {
          if (!v15)
            goto LABEL_13;
          v16 = 5;
        }
        (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_13:
        v14 -= 6;
        if (!(v14 * 8))
        {
          v6 = *(_QWORD **)a1;
          break;
        }
      }
    }
  }
  v17 = v18;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v17;
}

void llvm::DenseMap<mlir::OperationName,std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::function<std::optional<BOOL> ()(mlir::Operation *)>>>::copyFrom(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if (!(_DWORD)v2)
  {
    v8 = 0;
LABEL_12:
    llvm::deallocate_buffer(v3, (void *)v8);
  }
  v4 = (_QWORD **)((char *)v3 + 32);
  v5 = 40 * v2;
  while (1)
  {
    if (((unint64_t)*(v4 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v6 = *v4;
      if (v4 - 3 == *v4)
      {
        v6 = v4 - 3;
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_5;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
    }
LABEL_5:
    v4 += 5;
    v5 -= 40;
    if (!v5)
    {
      v3 = *(llvm **)a1;
      v8 = 40 * *(unsigned int *)(a1 + 16);
      goto LABEL_12;
    }
  }
}

llvm::StringMapImpl *llvm::StringMap<mlir::ConversionTarget::LegalizationAction,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  size_t v12;
  char *buffer;
  char *v14;
  char *v15;
  int v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = v4 + 8 * v5 + 8;
      v9 = v6 + 8 * v5 + 8;
      do
      {
        v10 = *(_QWORD *)(*a2 + 8 * v7);
        if (v10)
          v11 = v10 == -8;
        else
          v11 = 1;
        if (v11)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v10;
        }
        else
        {
          v12 = *(_QWORD *)v10;
          buffer = (char *)llvm::allocate_buffer(*(_QWORD *)v10 + 17, (std::align_val_t)8uLL);
          v14 = buffer;
          v15 = buffer + 16;
          if (v12)
            memcpy(buffer + 16, (const void *)(v10 + 16), v12);
          v15[v12] = 0;
          *(_QWORD *)v14 = v12;
          v16 = *(_DWORD *)(v10 + 8);
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v14;
          *((_DWORD *)v14 + 2) = v16;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v9 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

llvm::StringMapImpl *llvm::StringMap<std::function<std::optional<BOOL> ()(mlir::Operation *)>,llvm::MallocAllocator>::StringMap(llvm::StringMapImpl *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t *v9;
  BOOL v10;
  size_t v11;
  size_t *v12;
  _QWORD *buffer;
  size_t *v14;
  char *v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x2800000000;
  if (*((_DWORD *)a2 + 3))
  {
    llvm::StringMapImpl::init(this, *((_DWORD *)a2 + 2));
    v4 = *(_QWORD *)this;
    v5 = *((unsigned int *)this + 2);
    v6 = *a2;
    *(_QWORD *)((char *)this + 12) = *(uint64_t *)((char *)a2 + 12);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v19 = v4 + 8 * v5 + 8;
      v8 = v6 + 8 * v5 + 8;
      do
      {
        v9 = *(size_t **)(*a2 + 8 * v7);
        if (v9)
          v10 = v9 + 1 == 0;
        else
          v10 = 1;
        if (v10)
        {
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v9;
        }
        else
        {
          v12 = v9 + 1;
          v11 = *v9;
          buffer = llvm::allocate_buffer(*v9 + 41, (std::align_val_t)8uLL);
          v14 = buffer;
          v15 = (char *)(buffer + 5);
          if (v11)
            memcpy(buffer + 5, v9 + 5, v11);
          v15[v11] = 0;
          *v14 = v11;
          v16 = v14 + 1;
          v17 = v9[4];
          if (v17)
          {
            if ((size_t *)v17 == v12)
            {
              v14[4] = (size_t)v16;
              (*(void (**)(size_t *))(*v12 + 24))(v9 + 1);
            }
            else
            {
              v14[4] = (*(uint64_t (**)(size_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v16);
            }
          }
          else
          {
            v14[4] = 0;
          }
          *(_QWORD *)(*(_QWORD *)this + 8 * v7) = v14;
          *(_DWORD *)(v19 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
        }
        ++v7;
      }
      while (v5 != v7);
    }
  }
  return this;
}

void std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_DWORD *std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C059E90;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C059E90;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1},std::allocator<mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}>,std::optional<BOOL> ()(mlir::Operation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}::operator()((int *)(a1 + 8), *a2) | 0x100u;
}

BOOL mlir::ANECRegionOpCreator::ANECRegionOpCreator(mlir::OpBuilder &,mlir::ConversionTarget const&,mlir::RewritePatternSet,mlir::TypeConverter &,mlir::anec::Family,mlir::DeviceInfo const*,llvm::StringRef,long long,long long,BOOL,BOOL,std::string_view,BOOL)::{lambda(mlir::Operation *)#1}::operator()(int *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) != 0)
    return 1;
  if (!mlir::verifyCompatibleTypesWithANE(a2, *a1, 1, 1))
    return 0;
  v6 = mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::SupportConstantOperands>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v6) & 1) == 0)
  {
    v7 = mlir::TypeID::get<mlir::OpTrait::anec::ConstantFoldable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::ConstantFoldable>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v7) & 1) == 0
      && (*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v8 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v8)
      {
        for (i = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24); ; i += 4)
        {
          v13 = *i;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
          if (!DefiningOp)
            break;
          v11 = DefiningOp;
          v12 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 48) + 32))(*(_QWORD *)(v11 + 48), v12) & 1) == 0)break;
          result = 0;
          if (!--v8)
            return result;
        }
      }
    }
  }
  return mlir::anec::isCompatibleWithFamily(a2, *a1);
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059CE0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059CE0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A12EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059D28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059D28;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A13EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059D70;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059D70;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A14EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059DB8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059DB8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A15EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059E00;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059E00;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A16EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFF5228;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFF5228;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec3A17EZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059E48;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059E48;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec9A11LegacyEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  uint64_t v2;
  uint64_t FunctionType;
  mlir::Operation *v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 8);
  FunctionType = mlir::anec::A11Legacy::getFunctionType(&v5);
  return mlir::TypeConverter::isSignatureLegal(v2, FunctionType) | 0x100u;
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059C98;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059C98;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_4anec12RegionReturnEZNS2_19ANECRegionOpCreatorC1ERNS2_9OpBuilderERKS3_NS2_17RewritePatternSetERNS2_13TypeConverterENS5_6FamilyEPKNS2_10DeviceInfoEN4llvm9StringRefExxbbNS_17basic_string_viewIcNS_11char_traitsIcEEEEbEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSR_EUlST_E_NS_9allocatorISX_EEFNS_8optionalIbEEST_EEclEOST_(uint64_t a1, mlir::Operation **a2)
{
  return mlir::TypeConverter::isLegal(*(mlir::TypeConverter **)(a1 + 8), *a2) | 0x100u;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorERZNS1_12_GLOBAL__N_19MPSToANEC14runOnOperationEvEUlNS1_4func6FuncOpEE_SF_S2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESP_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t InherentAttr;
  char v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
  {
    v3 = *a1;
    if (!*(_BYTE *)(a2 + 47) || (InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"io_info", 7), !v5))
      InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "io_info", 7uLL);
    **(_QWORD **)v3 = InherentAttr;
    if (**(_QWORD **)v3)
    {
      v8[1] = *(_QWORD *)v3;
      v6 = *(_QWORD *)(v3 + 8);
      v8[0] = *(_QWORD *)(v3 + 16);
      v8[2] = v6;
      v9 = v8;
      mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_12_GLOBAL__N_19MPSToANEC14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNS1_9placement10RegionCallEE_SH_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v9, 1);
    }
  }
  return 1;
}

double _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_12_GLOBAL__N_19MPSToANEC14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNS1_9placement10RegionCallEE_SH_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESQ_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t v2;
  char *Callee;
  size_t v4;
  size_t v5;
  unsigned int *v6;
  mlir::StringAttr *Context;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mlir::StringAttr *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int HashValue;
  double result;
  _QWORD *v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  const void *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  mlir::Operation *v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;

  if (a2
    && *(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
  {
    v2 = *a1;
    v28 = a2;
    Callee = (char *)mlir::placement::RegionCall::getCallee(&v28);
    v5 = v4;
    *(_QWORD *)&v27 = Callee;
    *((_QWORD *)&v27 + 1) = v4;
    v6 = **(unsigned int ***)v2;
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v6 + 6));
    v31 = 261;
    v29 = Callee;
    v30 = v5;
    v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v29);
    v9 = mlir::SymbolTable::lookupSymbolIn(v6, v8);
    v10 = **(_QWORD **)(v2 + 8);
    v11 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v9 + 24));
    v31 = 261;
    v29 = "io_info";
    v30 = 7;
    v12 = mlir::StringAttr::get(v11, (mlir::MLIRContext *)&v29);
    mlir::Operation::setAttr(v9, v12, v10);
    v13 = *(_QWORD *)(v2 + 16);
    v14 = *(_DWORD *)(v13 + 16);
    if (v14)
    {
      v15 = *(_QWORD *)v13;
      HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(Callee, v5);
      v18 = 0;
      v19 = v14 - 1;
      for (i = 1; ; ++i)
      {
        v21 = HashValue & v19;
        v22 = v15 + 16 * (HashValue & v19);
        v23 = *(const void **)v22;
        if (*(_QWORD *)v22 == -2)
        {
          if (Callee == (char *)-2)
            return result;
        }
        else if (v23 == (const void *)-1)
        {
          if (Callee == (char *)-1)
            return result;
        }
        else if (v5 == *(_QWORD *)(v22 + 8) && (!v5 || !memcmp(Callee, *(const void **)v22, v5)))
        {
          return result;
        }
        if (v23 == (const void *)-1)
          break;
        if (v18)
          v24 = 0;
        else
          v24 = v23 == (const void *)-2;
        if (v24)
          v18 = (_QWORD *)(v15 + 16 * v21);
        HashValue = i + v21;
      }
      if (v18)
        v25 = v18;
      else
        v25 = (_QWORD *)(v15 + 16 * v21);
    }
    else
    {
      v25 = 0;
    }
    v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(v13, (uint64_t)&v27, (uint64_t)&v27, v25);
    result = *(double *)&v27;
    *(_OWORD *)v26 = v27;
  }
  return result;
}

uint64_t mlir::MPSToANECMinBase<mlir::`anonymous namespace'::MPSToANECMin>::MPSToANECMinBase(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int32 v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  __int128 v9;
  __n128 v10;
  _QWORD v11[21];

  v11[20] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = "builtin.module";
  *(_QWORD *)(a1 + 24) = 14;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v2 = (_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = off_24BFF3650;
  v3 = (_QWORD *)(a1 + 344);
  *(_QWORD *)&v9 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v9 + 1) = 61;
  v7 = 0;
  v8 = (uint64_t)&v7;
  v10.n128_u64[0] = (unint64_t)v11;
  v10.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10, v11, 7uLL, 40);
  v4 = v10.n128_u32[2];
  v5 = v10.n128_u64[0] + 40 * v10.n128_u32[2];
  *(_QWORD *)v5 = "A12";
  *(_QWORD *)(v5 + 8) = 3;
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = "A12 family";
  *(_QWORD *)(v5 + 32) = 10;
  *(_QWORD *)(v5 + 40) = "A13";
  *(_QWORD *)(v5 + 48) = 3;
  *(_DWORD *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 64) = "A13 family";
  *(_QWORD *)(v5 + 72) = 10;
  *(_QWORD *)(v5 + 80) = "A14";
  *(_QWORD *)(v5 + 88) = 3;
  *(_DWORD *)(v5 + 96) = 2;
  *(_QWORD *)(v5 + 104) = "A14 family";
  *(_QWORD *)(v5 + 112) = 10;
  *(_QWORD *)(v5 + 120) = "A15";
  *(_QWORD *)(v5 + 128) = 3;
  *(_DWORD *)(v5 + 136) = 3;
  *(_QWORD *)(v5 + 144) = "A15 family";
  *(_QWORD *)(v5 + 152) = 10;
  *(_QWORD *)(v5 + 160) = "A16";
  *(_QWORD *)(v5 + 168) = 3;
  *(_DWORD *)(v5 + 176) = 4;
  *(_QWORD *)(v5 + 184) = "A16 family";
  *(_QWORD *)(v5 + 192) = 10;
  *(_QWORD *)(v5 + 200) = "A17";
  *(_QWORD *)(v5 + 208) = 3;
  *(_DWORD *)(v5 + 216) = 5;
  *(_QWORD *)(v5 + 224) = "A17 family";
  *(_QWORD *)(v5 + 232) = 10;
  *(_QWORD *)(v5 + 240) = "A11Legacy";
  *(_QWORD *)(v5 + 248) = 9;
  *(_DWORD *)(v5 + 256) = 6;
  *(_QWORD *)(v5 + 264) = "A11 Legacy family";
  *(_QWORD *)(v5 + 272) = 17;
  v10.n128_u32[2] = v4 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(v3, v2, (uint64_t)"target-family", 13, &v9, (_DWORD **)&v8, (uint64_t *)&v10);
  *(_QWORD *)(a1 + 344) = off_24C050850;
  *(_QWORD *)(a1 + 944) = &unk_24C0508D0;
  if ((_QWORD *)v10.n128_u64[0] != v11)
    free((void *)v10.n128_u64[0]);
  v10.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v10.n128_u64[1] = 63;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 960), v2, (uint64_t)"strict-hints", 12, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 960) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1152) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v10.n128_u64[1] = 39;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1168), v2, (uint64_t)"use-cost-model", 14, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1168) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1360) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v10.n128_u64[1] = 73;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1376), v2, (uint64_t)"force-host-placement", 20, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1376) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1568) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1584), v2, (uint64_t)"force-ane-placement", 19, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1584) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1776) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"If true, print the estimated cost of the resulting module (requires use-cost-model).";
  v10.n128_u64[1] = 84;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 1792), v2, (uint64_t)"print-estimated-cost", 20, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 1792) = &off_24C0509D0;
  *(_QWORD *)(a1 + 1984) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v10.n128_u64[1] = 55;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 2000), v2, (uint64_t)"insert-instrumentation", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 2000) = &off_24C0509D0;
  *(_QWORD *)(a1 + 2192) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"The maximum number of mps operations that will be used to create an ANE region.";
  v10.n128_u64[1] = 79;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(a1 + 2208), v2, (uint64_t)"ane-max-ops", 11, &v10, (_QWORD **)&v9);
  *(_QWORD *)(a1 + 2208) = off_24C050B50;
  *(_QWORD *)(a1 + 2408) = &unk_24C050BD0;
  v10.n128_u64[0] = (unint64_t)"The maximum number of cumulative liveIns and liveOuts for an ANE region.";
  v10.n128_u64[1] = 72;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(a1 + 2424), v2, (uint64_t)"ane-max-liveio", 14, &v10, (_QWORD **)&v9);
  *(_QWORD *)(a1 + 2424) = off_24C050B50;
  *(_QWORD *)(a1 + 2624) = &unk_24C050BD0;
  v10.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v10.n128_u64[1] = 24;
  LODWORD(v8) = 1;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(a1 + 2640), v2, (uint64_t)"gpu-core-count", 14, &v10, (int **)&v9);
  *(_QWORD *)(a1 + 2640) = off_24C050A90;
  *(_QWORD *)(a1 + 2832) = &unk_24C050B10;
  v10.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v10.n128_u64[1] = 64;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 2848), v2, (uint64_t)"print-placement-report", 22, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 2848) = &off_24C0509D0;
  *(_QWORD *)(a1 + 3040) = &unk_24C050A50;
  v10.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v10.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((_QWORD *)(a1 + 3056), v2, (uint64_t)"region-name-postfix", 19, &v10);
  *(_QWORD *)(a1 + 3056) = &off_24C050910;
  *(_QWORD *)(a1 + 3288) = &unk_24C050990;
  v10.n128_u64[0] = (unint64_t)"If true, use GOC and quantimization patterns to optimzie the ANEC IR.";
  v10.n128_u64[1] = 69;
  LOBYTE(v8) = 0;
  *(_QWORD *)&v9 = &v8;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(a1 + 3304), v2, (uint64_t)"legacy-quant-conversion", 23, &v10, (_BYTE **)&v9);
  *(_QWORD *)(a1 + 3304) = &off_24C0509D0;
  *(_QWORD *)(a1 + 3496) = &unk_24C050A50;
  return a1;
}

void mlir::`anonymous namespace'::MPSToANECMin::~MPSToANECMin(mlir::_anonymous_namespace_::MPSToANECMin *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  mlir::_anonymous_namespace_::MPSToANECMin *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  mlir::_anonymous_namespace_::MPSToANECMin *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  mlir::_anonymous_namespace_::MPSToANECMin *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  mlir::_anonymous_namespace_::MPSToANECMin *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  mlir::_anonymous_namespace_::MPSToANECMin *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  mlir::_anonymous_namespace_::MPSToANECMin *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  mlir::_anonymous_namespace_::MPSToANECMin *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  mlir::_anonymous_namespace_::MPSToANECMin *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  mlir::_anonymous_namespace_::MPSToANECMin *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  mlir::_anonymous_namespace_::MPSToANECMin *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  mlir::_anonymous_namespace_::MPSToANECMin *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  mlir::_anonymous_namespace_::MPSToANECMin *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  char *v53;

  *(_QWORD *)this = &off_24BFF3030;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 440);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_24BFF3650;
  *((_QWORD *)this + 413) = &unk_24C02DF38;
  v5 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 436);
  if (v5 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 3464))
  {
    v6 = 4;
    v5 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 3464);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  *((_QWORD *)this + 413) = &unk_24C02E140;
  v7 = (void *)*((_QWORD *)this + 425);
  if (v7 != *((void **)this + 424))
    free(v7);
  v8 = (char *)*((_QWORD *)this + 421);
  if (v8 != (char *)this + 3384)
    free(v8);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 3056);
  *((_QWORD *)this + 356) = &unk_24C02DF38;
  v9 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 379);
  if (v9 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 3008))
  {
    v10 = 4;
    v9 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 3008);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_20:
  *((_QWORD *)this + 356) = &unk_24C02E140;
  v11 = (void *)*((_QWORD *)this + 368);
  if (v11 != *((void **)this + 367))
    free(v11);
  v12 = (char *)*((_QWORD *)this + 364);
  if (v12 != (char *)this + 2928)
    free(v12);
  *((_QWORD *)this + 330) = &unk_24C02E008;
  v13 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 353);
  if (v13 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2800))
  {
    v14 = 4;
    v13 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2800);
  }
  else
  {
    if (!v13)
      goto LABEL_29;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_29:
  *((_QWORD *)this + 330) = &unk_24C02E140;
  v15 = (void *)*((_QWORD *)this + 342);
  if (v15 != *((void **)this + 341))
    free(v15);
  v16 = (char *)*((_QWORD *)this + 338);
  if (v16 != (char *)this + 2720)
    free(v16);
  *((_QWORD *)this + 303) = off_24C02E070;
  v17 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 327);
  if (v17 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2592))
  {
    v18 = 4;
    v17 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2592);
  }
  else
  {
    if (!v17)
      goto LABEL_38;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_38:
  *((_QWORD *)this + 303) = &unk_24C02E140;
  v19 = (void *)*((_QWORD *)this + 315);
  if (v19 != *((void **)this + 314))
    free(v19);
  v20 = (char *)*((_QWORD *)this + 311);
  if (v20 != (char *)this + 2504)
    free(v20);
  *((_QWORD *)this + 276) = off_24C02E070;
  v21 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 300);
  if (v21 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2376))
  {
    v22 = 4;
    v21 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2376);
  }
  else
  {
    if (!v21)
      goto LABEL_47;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_47:
  *((_QWORD *)this + 276) = &unk_24C02E140;
  v23 = (void *)*((_QWORD *)this + 288);
  if (v23 != *((void **)this + 287))
    free(v23);
  v24 = (char *)*((_QWORD *)this + 284);
  if (v24 != (char *)this + 2288)
    free(v24);
  *((_QWORD *)this + 250) = &unk_24C02DF38;
  v25 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 273);
  if (v25 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2160))
  {
    v26 = 4;
    v25 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 2160);
  }
  else
  {
    if (!v25)
      goto LABEL_56;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_56:
  *((_QWORD *)this + 250) = &unk_24C02E140;
  v27 = (void *)*((_QWORD *)this + 262);
  if (v27 != *((void **)this + 261))
    free(v27);
  v28 = (char *)*((_QWORD *)this + 258);
  if (v28 != (char *)this + 2080)
    free(v28);
  *((_QWORD *)this + 224) = &unk_24C02DF38;
  v29 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 247);
  if (v29 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1952))
  {
    v30 = 4;
    v29 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1952);
  }
  else
  {
    if (!v29)
      goto LABEL_65;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_65:
  *((_QWORD *)this + 224) = &unk_24C02E140;
  v31 = (void *)*((_QWORD *)this + 236);
  if (v31 != *((void **)this + 235))
    free(v31);
  v32 = (char *)*((_QWORD *)this + 232);
  if (v32 != (char *)this + 1872)
    free(v32);
  *((_QWORD *)this + 198) = &unk_24C02DF38;
  v33 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 221);
  if (v33 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1744))
  {
    v34 = 4;
    v33 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1744);
  }
  else
  {
    if (!v33)
      goto LABEL_74;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_74:
  *((_QWORD *)this + 198) = &unk_24C02E140;
  v35 = (void *)*((_QWORD *)this + 210);
  if (v35 != *((void **)this + 209))
    free(v35);
  v36 = (char *)*((_QWORD *)this + 206);
  if (v36 != (char *)this + 1664)
    free(v36);
  *((_QWORD *)this + 172) = &unk_24C02DF38;
  v37 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 195);
  if (v37 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1536))
  {
    v38 = 4;
    v37 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1536);
  }
  else
  {
    if (!v37)
      goto LABEL_83;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_83:
  *((_QWORD *)this + 172) = &unk_24C02E140;
  v39 = (void *)*((_QWORD *)this + 184);
  if (v39 != *((void **)this + 183))
    free(v39);
  v40 = (char *)*((_QWORD *)this + 180);
  if (v40 != (char *)this + 1456)
    free(v40);
  *((_QWORD *)this + 146) = &unk_24C02DF38;
  v41 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 169);
  if (v41 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1328))
  {
    v42 = 4;
    v41 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1328);
  }
  else
  {
    if (!v41)
      goto LABEL_92;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_92:
  *((_QWORD *)this + 146) = &unk_24C02E140;
  v43 = (void *)*((_QWORD *)this + 158);
  if (v43 != *((void **)this + 157))
    free(v43);
  v44 = (char *)*((_QWORD *)this + 154);
  if (v44 != (char *)this + 1248)
    free(v44);
  *((_QWORD *)this + 120) = &unk_24C02DF38;
  v45 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 143);
  if (v45 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1120))
  {
    v46 = 4;
    v45 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 1120);
  }
  else
  {
    if (!v45)
      goto LABEL_101;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_101:
  *((_QWORD *)this + 120) = &unk_24C02E140;
  v47 = (void *)*((_QWORD *)this + 132);
  if (v47 != *((void **)this + 131))
    free(v47);
  v48 = (char *)*((_QWORD *)this + 128);
  if (v48 != (char *)this + 1040)
    free(v48);
  *((_QWORD *)this + 43) = off_24C02DE68;
  v49 = (mlir::_anonymous_namespace_::MPSToANECMin *)*((_QWORD *)this + 117);
  if (v49 == (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 912))
  {
    v50 = 4;
    v49 = (mlir::_anonymous_namespace_::MPSToANECMin *)((char *)this + 912);
  }
  else
  {
    if (!v49)
      goto LABEL_110;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_110:
  *((_QWORD *)this + 62) = &off_24C02E1A8;
  v51 = (char *)*((_QWORD *)this + 64);
  if (v51 != (char *)this + 528)
    free(v51);
  *((_QWORD *)this + 43) = &unk_24C02E140;
  v52 = (void *)*((_QWORD *)this + 55);
  if (v52 != *((void **)this + 54))
    free(v52);
  v53 = (char *)*((_QWORD *)this + 51);
  if (v53 != (char *)this + 424)
    free(v53);
  mlir::Pass::~Pass(this);
}

{
  JUMPOUT(0x20BD002F8);
}

const char *mlir::MPSToANECMinBase<mlir::`anonymous namespace'::MPSToANECMin>::getName()
{
  return "MPSToANECMin";
}

_QWORD *mlir::MPSToANECMinBase<mlir::`anonymous namespace'::MPSToANECMin>::getDependentDialects(int a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v11[0] = &off_24C059BB0;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v11);
  v3 = v12;
  if (v12 == v11)
  {
    v4 = 4;
    v3 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v11[0] = &off_24C059B20;
  v12 = v11;
  v5 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::anec::ANECDialect,void>::id, "anec", 4uLL, v11);
  v6 = v12;
  if (v12 == v11)
  {
    v6 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v5))();
LABEL_11:
  v11[0] = &off_24C059AD8;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v11[0] = &off_24C059B68;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id, "memref", 6uLL, v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

const char *mlir::MPSToANECMinBase<mlir::`anonymous namespace'::MPSToANECMin>::getArgument()
{
  return "mps-to-anec-min";
}

const char *mlir::MPSToANECMinBase<mlir::`anonymous namespace'::MPSToANECMin>::getDescription()
{
  return "A minimum pass that convert mps ops to anec ops";
}

void mlir::`anonymous namespace'::MPSToANECMin::runOnOperation(mlir::_anonymous_namespace_::MPSToANECMin *this)
{
  uint64_t Context;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  _BYTE *v20;
  _BYTE v21[48];
  uint64_t v22;
  void *v23;
  void *__p[2];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[8];
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37[3];
  int v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[40];
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  _BYTE v62[536];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  llvm::DebugFlag = 0;
  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v3 = *((_QWORD *)this + 5);
  mlir::MPSToANECTypeConverter::MPSToANECTypeConverter((mlir::MPSToANECTypeConverter *)v62);
  memset(&v51[8], 0, 32);
  *(_QWORD *)v51 = Context;
  v52 = &v54;
  v53 = 0x600000000;
  v56 = 0;
  v55 = 0;
  v57 = 0;
  *(_QWORD *)&v59 = 0;
  v58 = 0;
  *((_QWORD *)&v59 + 1) = 0x2800000000;
  v60 = 0;
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = 0x2800000000;
  mlir::populateMPSToANECConversionPatterns(*((unsigned int *)this + 118), *((_BYTE *)this + 3432), (uint64_t *)v51, (uint64_t)v62);
  v37[2] = 0;
  v37[0] = (uint64_t)off_24C034280;
  v37[1] = 0;
  v38 = 0;
  v44 = 0;
  v43 = 0;
  v39 = v41;
  v40 = 0;
  v41[1] = 0;
  v41[0] = 0;
  v42 = 0;
  v45 = 0x1000000000;
  v46 = 0;
  v47 = 0;
  v48 = 0x2800000000;
  v49 = 0;
  v50 = Context;
  *(_QWORD *)&v35[0] = "func";
  *((_QWORD *)&v35[0] + 1) = 4;
  mlir::ConversionTarget::setDialectAction(v37, (uint64_t)v35, 1, 2);
  *(_QWORD *)&v35[0] = "memref";
  *((_QWORD *)&v35[0] + 1) = 6;
  mlir::ConversionTarget::setDialectAction(v37, (uint64_t)v35, 1, 2);
  *(_QWORD *)&v35[0] = "mps";
  *((_QWORD *)&v35[0] + 1) = 3;
  *((_QWORD *)&v34 + 1) = 0x200000000;
  mlir::ConversionTarget::setDialectAction(v37, (uint64_t)v35, 1, 2);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)&v34 = &off_24BFF51E0;
  *((_QWORD *)&v35[0] + 1) = &v34;
  mlir::OperationName::OperationName(&v23, "mps.constant", 12, v50);
  v5 = v23;
  mlir::ConversionTarget::setOpAction((uint64_t)v37, (uint64_t)v23, 1);
  mlir::ConversionTarget::setLegalityCallback((uint64_t)v37, (uint64_t)v5, &v34);
  v6 = (__int128 *)*((_QWORD *)&v35[0] + 1);
  if (*((__int128 **)&v35[0] + 1) == &v34)
  {
    v7 = 4;
    v6 = &v34;
  }
  else
  {
    if (!*((_QWORD *)&v35[0] + 1))
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_6:
  v21[0] = 1;
  memset(&v21[4], 0, 44);
  v22 = 978433816;
  v20 = 0;
  v17 = *((_BYTE *)this + 1712);
  v18 = *((_BYTE *)this + 1504);
  v19 = *((_BYTE *)this + 1920);
  if (*((_BYTE *)this + 1296))
  {
    mlir::getDeviceInfo(*((_DWORD *)this + 118), *((unsigned int *)this + 692), (uint64_t)&v34);
    *(_OWORD *)v21 = v34;
    *(_OWORD *)&v21[16] = v35[0];
    *(_OWORD *)&v21[32] = v35[1];
    v22 = v36;
    v20 = v21;
  }
  v15 = 0;
  v16 = 0;
  v14[0] = mlir::Attribute::getContext((mlir::Attribute *)(v4 + 3));
  v14[1] = 0;
  v8 = v4[2];
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v4);
  v15 = v8;
  v16 = v10;
  *(_OWORD *)__p = *(_OWORD *)v51;
  v25 = *(_OWORD *)&v51[16];
  memset(&v51[8], 0, 32);
  v26 = *(_QWORD *)&v51[32];
  v27[0] = v28;
  v27[1] = 0x600000000;
  if ((_DWORD)v53)
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=((uint64_t)v27, (uint64_t)&v52);
  v28[6] = v55;
  v55 = 0;
  v28[7] = v56;
  v56 = 0;
  v29 = v57;
  v57 = 0;
  v31 = v59;
  v11 = v58;
  v58 = 0;
  *(_QWORD *)&v59 = 0;
  DWORD2(v59) = 0;
  v30 = v11;
  v32 = v60;
  v33 = v61;
  v60 = 0;
  *(_QWORD *)&v61 = 0;
  DWORD2(v61) = 0;
  if (*((char *)this + 3207) < 0)
  {
    v12 = (char *)*((_QWORD *)this + 398);
    v13 = *((_QWORD *)this + 399);
  }
  else
  {
    v12 = (char *)this + 3184;
    v13 = *((unsigned __int8 *)this + 3207);
  }
  mlir::ANECRegionOpCreator::ANECRegionOpCreator((uint64_t)&v34, (uint64_t)v14, (mlir::ConversionTarget *)v37, (int)__p, (int)v62, *((_DWORD *)this + 118), (int)v21, v9, (uint64_t)"mps", 3, *((_QWORD *)this + 292), *((_QWORD *)this + 319), *((_BYTE *)this + 1088) != 0, *((_BYTE *)this + 2128) != 0, (uint64_t)v12, v13);
}

_QWORD *mlir::MPSToANECMinBase<mlir::`anonymous namespace'::MPSToANECMin>::clonePass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int32 v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  uint64_t v14;
  __int128 v15;
  __n128 v16;
  _QWORD v17[22];

  v17[20] = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  v5 = (_QWORD *)(v3 + 152);
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = v3 + 200;
  *(_QWORD *)(v3 + 192) = 0x400000000;
  *(_QWORD *)(v3 + 232) = v3 + 248;
  *(_QWORD *)(v3 + 240) = 0x400000000;
  *(_QWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_DWORD *)(v3 + 300) = 16;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_QWORD *)(v3 + 336) = 0;
  *(_QWORD *)v3 = off_24BFF3650;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)&v15 = "The family to target for ANEC region formation (default A12).";
  *((_QWORD *)&v15 + 1) = 61;
  v13 = 0;
  v14 = (uint64_t)&v13;
  v16.n128_u64[0] = (unint64_t)v17;
  v16.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v17, 7uLL, 40);
  v6 = v16.n128_u32[2];
  v7 = v16.n128_u64[0] + 40 * v16.n128_u32[2];
  *(_QWORD *)v7 = "A12";
  *(_QWORD *)(v7 + 8) = 3;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = "A12 family";
  *(_QWORD *)(v7 + 32) = 10;
  *(_QWORD *)(v7 + 40) = "A13";
  *(_QWORD *)(v7 + 48) = 3;
  *(_DWORD *)(v7 + 56) = 1;
  *(_QWORD *)(v7 + 64) = "A13 family";
  *(_QWORD *)(v7 + 72) = 10;
  *(_QWORD *)(v7 + 80) = "A14";
  *(_QWORD *)(v7 + 88) = 3;
  *(_DWORD *)(v7 + 96) = 2;
  *(_QWORD *)(v7 + 104) = "A14 family";
  *(_QWORD *)(v7 + 112) = 10;
  *(_QWORD *)(v7 + 120) = "A15";
  *(_QWORD *)(v7 + 128) = 3;
  *(_DWORD *)(v7 + 136) = 3;
  *(_QWORD *)(v7 + 144) = "A15 family";
  *(_QWORD *)(v7 + 152) = 10;
  *(_QWORD *)(v7 + 160) = "A16";
  *(_QWORD *)(v7 + 168) = 3;
  *(_DWORD *)(v7 + 176) = 4;
  *(_QWORD *)(v7 + 184) = "A16 family";
  *(_QWORD *)(v7 + 192) = 10;
  *(_QWORD *)(v7 + 200) = "A17";
  *(_QWORD *)(v7 + 208) = 3;
  *(_DWORD *)(v7 + 216) = 5;
  *(_QWORD *)(v7 + 224) = "A17 family";
  *(_QWORD *)(v7 + 232) = 10;
  *(_QWORD *)(v7 + 240) = "A11Legacy";
  *(_QWORD *)(v7 + 248) = 9;
  *(_DWORD *)(v7 + 256) = 6;
  *(_QWORD *)(v7 + 264) = "A11 Legacy family";
  *(_QWORD *)(v7 + 272) = 17;
  v16.n128_u32[2] = v6 + 7;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((_QWORD *)(v3 + 344), (_QWORD *)(v3 + 152), (uint64_t)"target-family", 13, &v15, (_DWORD **)&v14, (uint64_t *)&v16);
  *(_QWORD *)(v3 + 344) = off_24C050850;
  *(_QWORD *)(v3 + 944) = &unk_24C0508D0;
  if ((_QWORD *)v16.n128_u64[0] != v17)
    free((void *)v16.n128_u64[0]);
  v16.n128_u64[0] = (unint64_t)"If device hints cannot be followed then compilation has failed.";
  v16.n128_u64[1] = 63;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 960), v5, (uint64_t)"strict-hints", 12, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 960) = &off_24C0509D0;
  *(_QWORD *)(v3 + 1152) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"If true, placement uses the cost model.";
  v16.n128_u64[1] = 39;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 1168), v5, (uint64_t)"use-cost-model", 14, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 1168) = &off_24C0509D0;
  *(_QWORD *)(v3 + 1360) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"If true, everything will be placed on the host. (requires use-cost-model)";
  v16.n128_u64[1] = 73;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 1376), v5, (uint64_t)"force-host-placement", 20, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 1376) = &off_24C0509D0;
  *(_QWORD *)(v3 + 1568) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"If true, everything will be placed on the ane if possible. (requires use-cost-model)";
  v16.n128_u64[1] = 84;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 1584), v5, (uint64_t)"force-ane-placement", 19, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 1584) = &off_24C0509D0;
  *(_QWORD *)(v3 + 1776) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"If true, print the estimated cost of the resulting module (requires use-cost-model).";
  v16.n128_u64[1] = 84;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 1792), v5, (uint64_t)"print-estimated-cost", 20, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 1792) = &off_24C0509D0;
  *(_QWORD *)(v3 + 1984) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"Insert instrumentation to enable performance recording.";
  v16.n128_u64[1] = 55;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 2000), v5, (uint64_t)"insert-instrumentation", 22, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 2000) = &off_24C0509D0;
  *(_QWORD *)(v3 + 2192) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"The maximum number of mps operations that will be used to create an ANE region.";
  v16.n128_u64[1] = 79;
  v14 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(v3 + 2208), v5, (uint64_t)"ane-max-ops", 11, &v16, (_QWORD **)&v15);
  *(_QWORD *)(v3 + 2208) = off_24C050B50;
  *(_QWORD *)(v3 + 2408) = &unk_24C050BD0;
  v16.n128_u64[0] = (unint64_t)"The maximum number of cumulative liveIns and liveOuts for an ANE region.";
  v16.n128_u64[1] = 72;
  v14 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<long long,llvm::cl::parser<long long>>::Option<llvm::cl::desc,llvm::cl::initializer<long long>>((_QWORD *)(v3 + 2424), v5, (uint64_t)"ane-max-liveio", 14, &v16, (_QWORD **)&v15);
  *(_QWORD *)(v3 + 2424) = off_24C050B50;
  *(_QWORD *)(v3 + 2624) = &unk_24C050BD0;
  v16.n128_u64[0] = (unint64_t)"The number of gpu cores.";
  v16.n128_u64[1] = 24;
  LODWORD(v14) = 1;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<unsigned int,llvm::cl::parser<unsigned int>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)(v3 + 2640), v5, (uint64_t)"gpu-core-count", 14, &v16, (int **)&v15);
  *(_QWORD *)(v3 + 2640) = off_24C050A90;
  *(_QWORD *)(v3 + 2832) = &unk_24C050B10;
  v16.n128_u64[0] = (unint64_t)"If true, print a report of which ops failed to be placed on ANE.";
  v16.n128_u64[1] = 64;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 2848), v5, (uint64_t)"print-placement-report", 22, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 2848) = &off_24C0509D0;
  *(_QWORD *)(v3 + 3040) = &unk_24C050A50;
  v16.n128_u64[0] = (unint64_t)"Postfix appended to the name of the ANE regions created.";
  v16.n128_u64[1] = 56;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((_QWORD *)(v3 + 3056), v5, (uint64_t)"region-name-postfix", 19, &v16);
  *(_QWORD *)(v3 + 3056) = &off_24C050910;
  *(_QWORD *)(v3 + 3288) = &unk_24C050990;
  v16.n128_u64[0] = (unint64_t)"If true, use GOC and quantimization patterns to optimzie the ANEC IR.";
  v16.n128_u64[1] = 69;
  LOBYTE(v14) = 0;
  *(_QWORD *)&v15 = &v14;
  result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((_QWORD *)(v3 + 3304), v5, (uint64_t)"legacy-quant-conversion", 23, &v16, (_BYTE **)&v15);
  *(_QWORD *)(v3 + 3304) = &off_24C0509D0;
  *(_QWORD *)(v3 + 3496) = &unk_24C050A50;
  *(_QWORD *)v3 = &off_24BFF3030;
  *(_QWORD *)(v3 + 3512) = *(_QWORD *)(a1 + 3512);
  v9 = *(_QWORD *)(a1 + 3520);
  *(_QWORD *)(v3 + 3520) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *a2 = v3;
  return result;
}

void std::__shared_ptr_emplace<mlir::anec::MLIRConversionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFF58E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::anec::MLIRConversionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFF58E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

void std::__shared_ptr_emplace<mlir::anec::MLIRConversionInfo>::__on_zero_shared(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(char **)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    v4 = &v2[16 * v3];
    do
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v4 -= 16;
    }
    while (v4 != v2);
    v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
    free(v2);
}

void _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSToANECMin14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EED0Ev()
{
  JUMPOUT(0x20BD002F8);
}

_BYTE *_ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSToANECMin14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EE7__cloneEv(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24BFF51E0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSToANECMin14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EE7__cloneEPNS0_6__baseISM_EE(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24BFF51E0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir16ConversionTarget21addDynamicallyLegalOpINS2_3mps10ConstantOpEZNS2_12_GLOBAL__N_112MPSToANECMin14runOnOperationEvEUlS6_E_EENS_9enable_ifIXntsr3stdE14is_invocable_vIT0_PNS2_9OperationEEEvE4typeEOSB_EUlSD_E_NS_9allocatorISH_EEFNS_8optionalIbEESD_EEclEOSD_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v2 = *(_QWORD *)(*a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v2 = 0;
  v5 = v2;
  if (v2)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
    LODWORD(v2) = v3 > 3;
  }
  return v2 | 0x100;
}

void mlir::anec::MPSToANECNullOstream::~MPSToANECNullOstream(mlir::anec::MPSToANECNullOstream *this)
{
  llvm::raw_ostream::~raw_ostream(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::anec::MPSToANECNullOstream::write_impl(uint64_t this, const char *a2, uint64_t a3)
{
  *(_QWORD *)(this + 64) += a3;
  return this;
}

uint64_t mlir::anec::MPSToANECNullOstream::current_pos(mlir::anec::MPSToANECNullOstream *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_12_GLOBAL__N_112MPSToANECMin24basicMPSToANECConversionENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEEUlNS1_4func6FuncOpEE_SL_S2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESU_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t **a1, mlir::SymbolRefAttr *this)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t AttrData;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  mlir::Operation *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  llvm *v30;
  llvm *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  unint64_t v37;
  BOOL v38;
  char *v39;
  _QWORD v40[2];
  _QWORD v41[13];
  _QWORD v42[4];
  llvm *v43[2];
  unsigned int v44;
  llvm *v45;
  uint64_t v46;
  unsigned int v47;
  llvm *v48[2];
  int v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];
  int v56;
  void (**v57)(mlir::OpBuilder::Listener *__hidden);
  int v58;
  uint64_t v59;
  _QWORD *v60;
  mlir::ForwardIterator *v61;
  llvm **v62;
  _QWORD v63[2];
  _QWORD v64[8];

  v64[6] = *MEMORY[0x24BDAC8D0];
  if (this
    && *(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
  {
    v3 = *a1;
    v4 = **a1;
    v63[0] = mlir::SymbolRefAttr::get(this, this);
    v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v41);
    v7 = v6;
    v8 = operator new(0xB0uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_24BFF5958;
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = v7;
    *((_DWORD *)v8 + 14) = 0;
    v8[8] = 0;
    v8[9] = 0;
    *((_DWORD *)v8 + 20) = 0;
    v8[11] = 0;
    v8[12] = 0;
    *((_DWORD *)v8 + 26) = 0;
    v8[14] = v8 + 16;
    v8[15] = 0x300000000;
    v40[1] = v8;
    v8[3] = AttrData;
    v40[0] = v8 + 3;
    v10 = *(_QWORD *)(v4 + 3512);
    v11 = *(unsigned int *)(v10 + 8);
    v12 = *(_QWORD *)v10;
    v13 = (char *)v40;
    if (v11 >= *(_DWORD *)(v10 + 12))
    {
      v37 = v11 + 1;
      v38 = v12 + 16 * v11 > (unint64_t)v40;
      if (v12 <= (unint64_t)v40 && v38)
      {
        v39 = (char *)v40 - v12;
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(*(_QWORD *)(v4 + 3512), v37);
        v12 = *(_QWORD *)v10;
        v13 = &v39[*(_QWORD *)v10];
      }
      else
      {
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(*(_QWORD *)(v4 + 3512), v37);
        v12 = *(_QWORD *)v10;
        v13 = (char *)v40;
      }
    }
    v14 = *(unsigned int *)(v10 + 8);
    v15 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16 * v14) = *(_OWORD *)v13;
    if (*((_QWORD *)&v15 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      LODWORD(v14) = *(_DWORD *)(v10 + 8);
    }
    *(_DWORD *)(v10 + 8) = v14 + 1;
    v18 = *(_QWORD **)v3[1];
    v19 = v3[3];
    v60 = v18;
    v61 = this;
    v59 = v40[0];
    v20 = v18[1];
    v58 = 0;
    v57 = &off_24BFF48F8;
    *(_QWORD *)(v20 + 8) = &v57;
    v55[0] = 0;
    v55[1] = 0;
    v56 = 0;
    v63[0] = mlir::SymbolRefAttr::get(this, v9);
    v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v63);
    v54[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v41);
    v54[1] = v21;
    v22 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
    v52 = 0;
    v53 = v22;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*v18 + 56))(v51, v18);
    v63[0] = v64;
    v63[1] = 0x600000000;
    v50 = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v43[0] = 0;
    v43[1] = 0;
    v44 = 0;
    v42[0] = &v61;
    v42[1] = &v59;
    v42[2] = &v50;
    v42[3] = v48;
    v41[0] = &v61;
    v41[1] = &v60;
    v41[2] = v48;
    v41[3] = &v59;
    v41[4] = v63;
    v41[5] = v20;
    v41[6] = v54;
    v41[7] = &v52;
    v41[8] = v51;
    v41[9] = v19;
    v41[10] = v55;
    v41[11] = v43;
    v41[12] = &v45;
    v62 = v43;
    if ((_DWORD)v46)
    {
      if (v47)
      {
        v23 = 24 * v47;
        v24 = v45;
        while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v24 = (llvm *)((char *)v24 + 24);
          v23 -= 24;
          if (!v23)
            goto LABEL_20;
        }
      }
      else
      {
        v24 = v45;
      }
      if (v24 != (llvm *)((char *)v45 + 24 * v47))
      {
        v25 = *(_QWORD *)v24;
        v27 = *((_QWORD *)v24 + 1);
        v26 = *((_QWORD *)v24 + 2);
        if (v26)
        {
          v28 = (unint64_t *)(v26 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
      }
    }
LABEL_20:
    v62 = (llvm **)&v53;
    *(_QWORD *)(v20 + 8) = 0;
    v30 = v43[0];
    if (v44)
    {
      v31 = (llvm *)((char *)v43[0] + 24 * v44);
      do
      {
        if ((*(_QWORD *)v30 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v32 = (std::__shared_weak_count *)*((_QWORD *)v30 + 2);
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        v30 = (llvm *)((char *)v30 + 24);
      }
      while (v30 != v31);
      v30 = v43[0];
      v35 = 24 * v44;
    }
    else
    {
      v35 = 0;
    }
    llvm::deallocate_buffer(v30, (void *)v35);
  }
  return 1;
}

void std::__shared_ptr_emplace<mlir::anec::FunctionConversionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFF5958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::anec::FunctionConversionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFF5958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

void std::__shared_ptr_emplace<mlir::anec::FunctionConversionInfo>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<mlir::anec::FunctionConversionInfo>::destroy[abi:nn180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<mlir::anec::FunctionConversionInfo>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *(char **)(a2 + 88);
  v4 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v4)
  {
    v5 = &v3[16 * v4];
    do
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v5 -= 16;
    }
    while (v5 != v3);
    v3 = *(char **)(a2 + 88);
  }
  if (v3 != (char *)(a2 + 104))
    free(v3);
  llvm::deallocate_buffer(*(llvm **)(a2 + 64), (void *)(8 * *(unsigned int *)(a2 + 80)));
}

void sub_20757D2E8()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 40), (void *)(8 * *(unsigned int *)(v0 + 56)));
}

void sub_20757D2FC()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 16), (void *)(8 * *(unsigned int *)(v0 + 32)));
}

void mlir::OpBuilder::Listener::~Listener(mlir::OpBuilder::Listener *this)
{
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::MPSToANECMin::basicMPSToANECConversion(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*,mlir::anec::FunctionConversionInfo *,mlir::anec::ANECIRWeights &)::{lambda(mlir::Operation *)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;

  v69 = a2;
  v4 = **a1;
  v5 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v5);
  if (v4 == a2 || (result & 1) != 0)
    return result;
  v7 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v7))
  {
    v8 = a1[2];
    v9 = *a1[1];
    v12 = *(_QWORD *)(v9 + 64);
    v10 = v9 + 64;
    v11 = v12;
    v13 = *(_DWORD *)(v10 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *v8) & v14;
      v16 = (uint64_t *)(v11 + 8 * v15);
      v17 = *v16;
      if (*v8 == *v16)
        goto LABEL_17;
      v18 = 0;
      v19 = 1;
      while (v17 != -1)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -2;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = (uint64_t *)(v11 + 8 * v15);
        v17 = *v16;
        if (*v8 == *v16)
          goto LABEL_17;
      }
      if (v18)
        v22 = v18;
      else
        v22 = v16;
    }
    else
    {
      v22 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,llvm::detail::DenseSetEmpty&>(v10, v22, v8);
  }
LABEL_17:
  v23 = a1[2];
  v24 = (*v23)++;
  result = (uint64_t)a1[3];
  v25 = *(_DWORD *)(result + 16);
  if (!v25)
  {
    v35 = 0;
LABEL_29:
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,unsigned long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long>>,mlir::Operation *,unsigned long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long>>::InsertIntoBucket<mlir::Operation * const&>(result, v35, &v69);
    v29 = (uint64_t *)result;
    v26 = v69;
    goto LABEL_30;
  }
  v26 = v69;
  v27 = v25 - 1;
  v28 = ((v69 >> 4) ^ (v69 >> 9)) & (v25 - 1);
  v29 = (uint64_t *)(*(_QWORD *)result + 16 * v28);
  v30 = *v29;
  if (v69 != *v29)
  {
    v31 = 0;
    v32 = 1;
    while (v30 != -4096)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v30 == -8192;
      if (v33)
        v31 = v29;
      v34 = v28 + v32++;
      v28 = v34 & v27;
      v29 = (uint64_t *)(*(_QWORD *)result + 16 * (v34 & v27));
      v30 = *v29;
      if (v69 == *v29)
        goto LABEL_30;
    }
    if (v31)
      v35 = v31;
    else
      v35 = v29;
    goto LABEL_29;
  }
LABEL_30:
  v29[1] = v24;
  if ((*(_BYTE *)(v26 + 46) & 0x80) != 0 && (v36 = *(unsigned int *)(v26 + 68), (_DWORD)v36))
  {
    v37 = v36 - 1;
    v38 = *(_QWORD *)(v26 + 72) + 24;
    while (1)
    {
      v39 = v37;
      v40 = *(_QWORD *)(*(_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        v40 = 0;
      v70 = v40;
      if (!v40)
        break;
      result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
      v42 = v41 > 5;
      if (v41 <= 5)
      {
        v37 = v39 - 1;
        v38 += 32;
        if (v39)
          continue;
      }
      goto LABEL_41;
    }
    v42 = 1;
  }
  else
  {
    v42 = 0;
  }
LABEL_41:
  v43 = *(unsigned int *)(v69 + 36);
  if ((_DWORD)v43)
    v44 = v69 - 16;
  else
    v44 = 0;
  if ((_DWORD)v43)
  {
    v45 = 0;
    while (1)
    {
      result = mlir::detail::OpResultImpl::getNextResultAtOffset(v44, v45);
      v46 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        v46 = 0;
      v70 = v46;
      if (!v46)
        break;
      result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
      if (v47 >= 6)
        break;
      if (v43 == ++v45)
        goto LABEL_51;
    }
  }
  else
  {
LABEL_51:
    if (!v42)
      return result;
  }
  v48 = *a1[1];
  v49 = a1[3];
  v50 = *v49;
  v51 = *((unsigned int *)v49 + 4);
  if (!(_DWORD)v51)
    goto LABEL_58;
  LODWORD(v52) = ((v69 >> 4) ^ (v69 >> 9)) & (v51 - 1);
  v53 = (uint64_t *)(v50 + 16 * v52);
  v54 = *v53;
  if (*v53 != v69)
  {
    v55 = 1;
    while (v54 != -4096)
    {
      v56 = v52 + v55++;
      v52 = v56 & (v51 - 1);
      v54 = *(_QWORD *)(v50 + 16 * v52);
      if (v54 == v69)
      {
        v53 = (uint64_t *)(v50 + 16 * v52);
        goto LABEL_59;
      }
    }
LABEL_58:
    v53 = (uint64_t *)(v50 + 16 * v51);
  }
LABEL_59:
  v57 = v53 + 1;
  v58 = *(_DWORD *)(v48 + 32);
  if (v58)
  {
    v59 = *(_QWORD *)(v48 + 16);
    v60 = v58 - 1;
    v61 = (37 * *v57) & v60;
    v62 = (uint64_t *)(v59 + 8 * v61);
    v63 = *v62;
    if (*v57 == *v62)
      return result;
    v64 = 0;
    v65 = 1;
    while (v63 != -1)
    {
      if (v64)
        v66 = 0;
      else
        v66 = v63 == -2;
      if (v66)
        v64 = v62;
      v67 = v61 + v65++;
      v61 = v67 & v60;
      v62 = (uint64_t *)(v59 + 8 * v61);
      v63 = *v62;
      if (*v57 == *v62)
        return result;
    }
    if (v64)
      v68 = v64;
    else
      v68 = v62;
  }
  else
  {
    v68 = 0;
  }
  return (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,llvm::detail::DenseSetEmpty&>(v48 + 16, v68, v57);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -2;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

char *llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  llvm *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      memset(result, 255, 8 * v11);
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v11 - 1;
      v14 = v4;
      do
      {
        v17 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = (37 * v17) & v13;
          v16 = &v10[8 * v18];
          v19 = *(_QWORD *)v16;
          if (v17 != *(_QWORD *)v16)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v16;
              v23 = v18 + v21++;
              v18 = v23 & v13;
              v16 = &v10[8 * (v23 & v13)];
              v19 = *(_QWORD *)v16;
              if (v17 == *(_QWORD *)v16)
                goto LABEL_14;
            }
            if (v20)
              v16 = v20;
          }
LABEL_14:
          *(_QWORD *)v16 = v17;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 = (llvm *)((char *)v14 + 8);
      }
      while (v14 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
    return (char *)memset(result, 255, 8 * v15);
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,unsigned long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long>>,mlir::Operation *,unsigned long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,unsigned long,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,unsigned long>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::MPSToANECMin::basicMPSToANECConversion(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*,mlir::anec::FunctionConversionInfo *,mlir::anec::ANECIRWeights &)::{lambda(mlir::Operation *)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  _QWORD **v14;
  uint64_t v15;
  llvm *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  llvm *v51;
  uint64_t v52;
  llvm *v53;
  uint64_t v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t DefiningOp;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t *v92;
  uint64_t *v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  llvm *v99;
  uint64_t v100;
  void *v101;
  llvm *v102[2];
  __int128 v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[48];
  void *__p[2];
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  if (!mlir::collect_regions::detail::verifyShouldAddToQueue(*(mlir::Block ***)a1, **(_QWORD **)(a1 + 8), a2, 0))
  {
    v34 = *(uint64_t **)(a1 + 16);
    v35 = *((_DWORD *)v34 + 4);
    if (!v35)
      return;
    v36 = *v34;
    v37 = (a2 >> 4) ^ (a2 >> 9);
    v38 = v35 - 1;
    v39 = v38 & v37;
    v40 = *(_QWORD *)(v36 + 16 * (v38 & v37));
    if (v40 != a2)
    {
      v97 = 1;
      while (v40 != -4096)
      {
        v98 = v39 + v97++;
        v39 = v98 & v38;
        v40 = *(_QWORD *)(v36 + 16 * v39);
        if (v40 == a2)
          goto LABEL_54;
      }
      return;
    }
LABEL_54:
    if (((*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), a2) & 1) != 0)
      return;
    v41 = *(uint64_t **)(a1 + 16);
    v42 = **(_QWORD **)(a1 + 24);
    v43 = *v41;
    v44 = *((unsigned int *)v41 + 4);
    if ((_DWORD)v44)
    {
      LODWORD(v45) = (v44 - 1) & v37;
      v46 = (uint64_t *)(v43 + 16 * v45);
      v47 = *v46;
      if (*v46 == a2)
        goto LABEL_72;
      v48 = 1;
      while (v47 != -4096)
      {
        v49 = v45 + v48++;
        v45 = v49 & (v44 - 1);
        v47 = *(_QWORD *)(v43 + 16 * v45);
        if (v47 == a2)
        {
          v46 = (uint64_t *)(v43 + 16 * v45);
          goto LABEL_72;
        }
      }
    }
    v46 = (uint64_t *)(v43 + 16 * v44);
LABEL_72:
    v58 = v46 + 1;
    v59 = *(_DWORD *)(v42 + 32);
    if (v59)
    {
      v60 = *(_QWORD *)(v42 + 16);
      v61 = v59 - 1;
      v62 = (37 * *v58) & v61;
      v63 = (uint64_t *)(v60 + 8 * v62);
      v64 = *v63;
      if (*v58 == *v63)
        goto LABEL_85;
      v65 = 0;
      v66 = 1;
      while (v64 != -1)
      {
        if (v65)
          v67 = 0;
        else
          v67 = v64 == -2;
        if (v67)
          v65 = v63;
        v68 = v62 + v66++;
        v62 = v68 & v61;
        v63 = (uint64_t *)(v60 + 8 * v62);
        v64 = *v63;
        if (*v58 == *v63)
          goto LABEL_85;
      }
      if (v65)
        v69 = v65;
      else
        v69 = v63;
    }
    else
    {
      v69 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,llvm::detail::DenseSetEmpty&>(v42 + 16, v69, v58);
LABEL_85:
    if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
      return;
    v70 = *(unsigned int *)(a2 + 68);
    if (!(_DWORD)v70)
      return;
    v71 = 0;
    v72 = *(_QWORD *)(a2 + 72);
    while (1)
    {
      __p[0] = *(void **)(v72 + 32 * v71 + 24);
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)__p);
      if (!DefiningOp)
        goto LABEL_89;
      v79 = DefiningOp;
      v80 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v79 + 48) + 32))(*(_QWORD *)(v79 + 48), v80))goto LABEL_89;
      v81 = *(uint64_t **)(a1 + 16);
      v82 = *v81;
      v83 = *((unsigned int *)v81 + 4);
      if ((_DWORD)v83)
      {
        LODWORD(v84) = (v83 - 1) & ((v79 >> 4) ^ (v79 >> 9));
        v85 = (uint64_t *)(v82 + 16 * v84);
        v86 = *v85;
        if (*v85 == v79)
          goto LABEL_99;
        v87 = 1;
        while (v86 != -4096)
        {
          v88 = v84 + v87++;
          v84 = v88 & (v83 - 1);
          v86 = *(_QWORD *)(v82 + 16 * v84);
          if (v86 == v79)
          {
            v85 = (uint64_t *)(v82 + 16 * v84);
            goto LABEL_99;
          }
        }
      }
      v85 = (uint64_t *)(v82 + 16 * v83);
LABEL_99:
      v89 = **(_QWORD **)(a1 + 24);
      v90 = v85 + 1;
      v91 = *(_DWORD *)(v89 + 32);
      if (!v91)
      {
        v92 = 0;
LABEL_101:
        llvm::DenseMapBase<llvm::DenseMap<unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,llvm::detail::DenseSetEmpty&>(v89 + 16, v92, v90);
        goto LABEL_89;
      }
      v73 = *(_QWORD *)(v89 + 16);
      v74 = v91 - 1;
      v75 = (37 * *v90) & v74;
      v76 = (uint64_t *)(v73 + 8 * v75);
      v77 = *v76;
      if (*v90 != *v76)
      {
        v93 = 0;
        v94 = 1;
        while (v77 != -1)
        {
          if (v93)
            v95 = 0;
          else
            v95 = v77 == -2;
          if (v95)
            v93 = v76;
          v96 = v75 + v94++;
          v75 = v96 & v74;
          v76 = (uint64_t *)(v73 + 8 * v75);
          v77 = *v76;
          if (*v90 == *v76)
            goto LABEL_89;
        }
        if (v93)
          v92 = v93;
        else
          v92 = v76;
        goto LABEL_101;
      }
LABEL_89:
      if (++v71 == v70)
        return;
    }
  }
  v105 = v107;
  v106 = 0x600000000;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
  {
LABEL_3:
    v102[0] = (llvm *)a2;
    *(_OWORD *)__p = 0u;
    v109 = 0u;
    v110 = 0u;
    std::deque<mlir::Operation *>::__append_with_size[abi:nn180100]<mlir::Operation * const*>(__p, (uint64_t *)v102, 1uLL);
    v99 = (llvm *)a2;
    llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl((uint64_t)v102, (uint64_t *)&v99, 1);
    v4 = *((_QWORD *)&v110 + 1);
    if (!*((_QWORD *)&v110 + 1))
    {
LABEL_46:
      if ((_DWORD)v106)
      {
        v30 = (char *)v105 + 8 * v106 - 8;
        if (v30 > v105)
        {
          v31 = (char *)v105 + 8;
          do
          {
            v32 = *((_QWORD *)v31 - 1);
            *((_QWORD *)v31 - 1) = *(_QWORD *)v30;
            *(_QWORD *)v30 = v32;
            v30 -= 8;
            v33 = v31 >= v30;
            v31 += 8;
          }
          while (!v33);
        }
      }
      llvm::deallocate_buffer(v102[0], (void *)(8 * v103));
    }
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v110 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v110 & 0x1FF));
      *((_QWORD *)&v110 + 1) = v4 - 1;
      *(_QWORD *)&v110 = v110 + 1;
      if ((unint64_t)v110 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v110 = v110 - 512;
      }
      v6 = v106;
      if (v106 >= (unint64_t)HIDWORD(v106))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, v107, v106 + 1, 8);
        v6 = v106;
      }
      *((_QWORD *)v105 + v6) = v5;
      LODWORD(v106) = v106 + 1;
      if ((*(_BYTE *)(v5 + 46) & 0x80) != 0)
      {
        v7 = *(unsigned int *)(v5 + 68);
        if ((_DWORD)v7)
          break;
      }
LABEL_5:
      v4 = *((_QWORD *)&v110 + 1);
      if (!*((_QWORD *)&v110 + 1))
        goto LABEL_46;
    }
    v8 = 0;
    v9 = *(_QWORD *)(v5 + 72);
    while (1)
    {
      v99 = *(llvm **)(v9 + 32 * v8 + 24);
      v101 = 0;
      v13 = (void *)mlir::Value::getDefiningOp((mlir::Value *)&v99);
      v101 = v13;
      if (!v13)
        goto LABEL_14;
      v14 = (_QWORD **)v13;
      if ((_DWORD)v103)
      {
        LODWORD(v15) = (v103 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v16 = (llvm *)((char *)v102[0] + 8 * v15);
        v17 = *(void **)v16;
        if (*(void **)v16 != v13)
        {
          v18 = 1;
          do
          {
            if (v17 == (void *)-4096)
              goto LABEL_22;
            v19 = v15 + v18++;
            v15 = v19 & (v103 - 1);
            v17 = (void *)*((_QWORD *)v102[0] + v15);
          }
          while (v17 != v13);
          v16 = (llvm *)((char *)v102[0] + 8 * v15);
        }
      }
      else
      {
LABEL_22:
        v16 = (llvm *)((char *)v102[0] + 8 * v103);
      }
      if (v16 != (llvm *)((char *)v102[0] + 8 * v103))
        goto LABEL_14;
      v20 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v14[6] + 32))(v14[6], v20) & 1) == 0
        && *(_UNKNOWN **)(*((_QWORD *)v101 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      {
        goto LABEL_14;
      }
      v21 = (char *)__p[1];
      if ((void *)v109 == __p[1])
        v22 = 0;
      else
        v22 = (((_QWORD)v109 - (unint64_t)__p[1]) << 6) - 1;
      v23 = *((_QWORD *)&v110 + 1);
      v24 = *((_QWORD *)&v110 + 1) + v110;
      if (v22 == *((_QWORD *)&v110 + 1) + (_QWORD)v110)
      {
        std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
        v23 = *((_QWORD *)&v110 + 1);
        v21 = (char *)__p[1];
        v24 = v110 + *((_QWORD *)&v110 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v21[(v24 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v24 & 0x1FF)) = v101;
      *((_QWORD *)&v110 + 1) = v23 + 1;
      if (!(_DWORD)v103)
        break;
      v10 = ((v101 >> 4) ^ (v101 >> 9)) & (v103 - 1);
      v11 = (uint64_t *)((char *)v102[0] + 8 * v10);
      v12 = (void *)*v11;
      if (v101 != (void *)*v11)
      {
        v26 = 0;
        v27 = 1;
        while (v12 != (void *)-4096)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v12 == (void *)-8192;
          if (v28)
            v26 = v11;
          v29 = v10 + v27++;
          v10 = v29 & (v103 - 1);
          v11 = (uint64_t *)((char *)v102[0] + 8 * v10);
          v12 = (void *)*v11;
          if (v101 == (void *)*v11)
            goto LABEL_14;
        }
        if (v26)
          v25 = v26;
        else
          v25 = v11;
        goto LABEL_33;
      }
LABEL_14:
      if (++v8 == v7)
        goto LABEL_5;
    }
    v25 = 0;
LABEL_33:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v102, v25, (uint64_t *)&v101);
    goto LABEL_14;
  }
  v50 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v50)
    v51 = (llvm *)(a2 - 16);
  else
    v51 = 0;
  v99 = v51;
  v100 = v50;
  mlir::ResultRange::use_begin((uint64_t *)&v99, (uint64_t *)v102);
  v52 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v52)
    v53 = (llvm *)(a2 - 16);
  else
    v53 = 0;
  v99 = v53;
  v100 = v52;
  mlir::ResultRange::use_end((uint64_t *)&v99, (uint64_t *)&v110 + 1);
  v54 = v104;
  *(_QWORD *)&v110 = v104;
  *(_OWORD *)__p = *(_OWORD *)v102;
  v109 = v103;
  for (i = v111; v104 != i; v54 = v104)
  {
    v56 = *(_QWORD *)(v54 + 16);
    v57 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v56 + 48) + 32))(*(_QWORD *)(v56 + 48), v57) & 1) != 0)
      goto LABEL_3;
    mlir::ResultRange::UseIterator::operator++((uint64_t *)v102);
  }
  if (v105 != v107)
    free(v105);
}

void std::deque<mlir::Operation *>::__append_with_size[abi:nn180100]<mlir::Operation * const*>(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (!a3)
      return;
  }
  else
  {
    v13 = *v12 + 8 * (v10 & 0x1FF);
    if (!a3)
      return;
  }
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v16 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v16 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v17 = *v15 + 8 * (v14 & 0x1FF);
  if (v13 != v17)
  {
    while (1)
    {
      v18 = v17;
      if (v12 != v15)
        v18 = *v12 + 4096;
      if (v13 == v18)
      {
        v18 = v13;
        goto LABEL_27;
      }
      v19 = v18 - v13 - 8;
      if (v19 < 0x18 || (unint64_t)(v13 - (_QWORD)a2) < 0x20)
      {
        v22 = a2;
        v23 = (_QWORD *)v13;
      }
      else
      {
        v20 = (v19 >> 3) + 1;
        v21 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        v22 = &a2[v21];
        v23 = (_QWORD *)(v13 + v21 * 8);
        v24 = (_OWORD *)(v13 + 16);
        v25 = (__int128 *)(a2 + 2);
        v26 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 4;
        }
        while (v26);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_26;
      }
      do
      {
        v28 = *v22++;
        *v23++ = v28;
      }
      while (v23 != (_QWORD *)v18);
LABEL_26:
      a2 = v22;
LABEL_27:
      v9 += (v18 - v13) >> 3;
      if (v12 != v15)
      {
        v29 = v12[1];
        ++v12;
        v13 = v29;
        if (v29 != v17)
          continue;
      }
      a1[5] = v9;
      return;
    }
  }
}

void std::deque<mlir::Operation *>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  __int128 *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *j;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t i;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  int64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char *v127;
  char *v128;
  uint64_t v129;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_133;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_136;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        *(_QWORD *)&v126 = operator new(0x1000uLL);
        std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v126);
        --v6;
        if (!--v9)
          goto LABEL_107;
      }
      for (i = 0; i != v9; ++i)
      {
        *(_QWORD *)&v126 = operator new(0x1000uLL);
        std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v126);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v98 = 511;
        else
          v98 = 512;
        v99 = v98 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v99;
      }
      v8 = v6;
    }
    else
    {
LABEL_107:
      v99 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)(a1 + 32) = v99 - (v8 << 9);
    if (!v8)
      return;
    v100 = *(char **)(a1 + 16);
    while (1)
    {
      v102 = *(_QWORD **)(a1 + 8);
      v103 = (char *)(v102 + 1);
      v104 = *v102;
      *(_QWORD *)(a1 + 8) = v102 + 1;
      if (v100 == *(char **)(a1 + 24))
      {
        v105 = *(char **)a1;
        if ((unint64_t)v103 <= *(_QWORD *)a1)
        {
          v111 = (v100 - v105) >> 2;
          if (v100 == v105)
            v111 = 1;
          if (v111 >> 61)
            goto LABEL_133;
          v112 = v111 >> 2;
          v113 = 8 * v111;
          v114 = (char *)operator new(8 * v111);
          v115 = &v114[8 * v112];
          v116 = v100 - v103;
          v29 = v100 == v103;
          v100 = v115;
          if (!v29)
          {
            v100 = &v115[v116 & 0xFFFFFFFFFFFFFFF8];
            v117 = v116 - 8;
            if ((unint64_t)(v116 - 8) < 0x38)
            {
              v118 = &v114[8 * v112];
              goto LABEL_129;
            }
            v118 = &v114[8 * v112];
            if ((unint64_t)(v118 - v103) < 0x20)
              goto LABEL_137;
            v119 = (v117 >> 3) + 1;
            v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
            v118 = &v115[v120];
            v103 += v120;
            v121 = (__int128 *)(v102 + 3);
            v122 = &v114[8 * v112 + 16];
            v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v124 = *v121;
              *((_OWORD *)v122 - 1) = *(v121 - 1);
              *(_OWORD *)v122 = v124;
              v121 += 2;
              v122 += 32;
              v123 -= 4;
            }
            while (v123);
            if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_137:
              do
              {
LABEL_129:
                v125 = *(_QWORD *)v103;
                v103 += 8;
                *(_QWORD *)v118 = v125;
                v118 += 8;
              }
              while (v118 != v100);
            }
          }
          *(_QWORD *)a1 = v114;
          *(_QWORD *)(a1 + 8) = v115;
          *(_QWORD *)(a1 + 16) = v100;
          *(_QWORD *)(a1 + 24) = &v114[v113];
          if (v105)
          {
            operator delete(v105);
            v100 = *(char **)(a1 + 16);
          }
          goto LABEL_111;
        }
        v106 = (uint64_t)&v103[-*(_QWORD *)a1] >> 3;
        if (v106 >= -1)
          v107 = v106 + 1;
        else
          v107 = v106 + 2;
        v108 = v107 >> 1;
        v109 = &v103[-8 * (v107 >> 1)];
        v110 = v100 - v103;
        if (v100 != v103)
        {
          memmove(&v103[-8 * (v107 >> 1)], v103, v100 - v103);
          v100 = *(char **)(a1 + 8);
        }
        v101 = &v100[-8 * v108];
        v100 = &v109[v110];
        *(_QWORD *)(a1 + 8) = v101;
        *(_QWORD *)(a1 + 16) = &v109[v110];
      }
LABEL_111:
      *(_QWORD *)v100 = v104;
      v100 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v100;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  v129 = a1 + 24;
  if (v12)
  {
    if (v12 >> 61)
LABEL_133:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v40 = v8 << 9;
  v41 = &v13[8 * (v11 - v8)];
  *(_QWORD *)&v126 = v13;
  *((_QWORD *)&v126 + 1) = v41;
  v127 = v41;
  v128 = &v13[8 * v12];
  do
  {
    v43 = operator new(0x1000uLL);
    if (v41 != v128)
      goto LABEL_49;
    v45 = (uint64_t *)*((_QWORD *)&v126 + 1);
    v44 = (void *)v126;
    if (*((_QWORD *)&v126 + 1) > (unint64_t)v126)
    {
      v46 = (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = *((_QWORD *)&v126 + 1) - 8 * (v47 >> 1);
      v50 = &v41[-*((_QWORD *)&v126 + 1)];
      if (v41 != *((char **)&v126 + 1))
      {
        memmove((void *)(*((_QWORD *)&v126 + 1) - 8 * (v47 >> 1)), *((const void **)&v126 + 1), (size_t)&v41[-*((_QWORD *)&v126 + 1)]);
        v41 = (char *)*((_QWORD *)&v126 + 1);
      }
      v42 = &v41[-8 * v48];
      v41 = &v50[v49];
      *((_QWORD *)&v126 + 1) = v42;
      v127 = &v50[v49];
      goto LABEL_49;
    }
    v51 = (uint64_t)&v41[-v126] >> 2;
    if (v41 == (char *)v126)
      v51 = 1;
    if (v51 >> 61)
      goto LABEL_133;
    v52 = v51 >> 2;
    v53 = 8 * v51;
    v54 = (char *)operator new(8 * v51);
    v55 = &v54[8 * v52];
    v56 = (unint64_t)&v41[-*((_QWORD *)&v126 + 1)];
    v29 = v41 == *((char **)&v126 + 1);
    v41 = v55;
    if (!v29)
    {
      v41 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = (char *)(v56 - 8);
      if (v56 - 8 < 0x38)
      {
        v58 = &v54[8 * v52];
        do
        {
LABEL_67:
          v66 = *v45++;
          *(_QWORD *)v58 = v66;
          v58 += 8;
        }
        while (v58 != v41);
        goto LABEL_68;
      }
      v58 = &v54[8 * v52];
      if ((unint64_t)&v58[-*((_QWORD *)&v126 + 1)] < 0x20)
        goto LABEL_67;
      v59 = ((unint64_t)v57 >> 3) + 1;
      v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
      v58 = &v55[v60];
      v61 = (uint64_t *)(*((_QWORD *)&v126 + 1) + v60);
      v62 = (__int128 *)(*((_QWORD *)&v126 + 1) + 16);
      v63 = &v54[8 * v52 + 16];
      v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *v62;
        *((_OWORD *)v63 - 1) = *(v62 - 1);
        *(_OWORD *)v63 = v65;
        v62 += 2;
        v63 += 32;
        v64 -= 4;
      }
      while (v64);
      v45 = v61;
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_67;
    }
LABEL_68:
    *(_QWORD *)&v126 = v54;
    *((_QWORD *)&v126 + 1) = &v54[8 * v52];
    v127 = v41;
    v128 = &v54[v53];
    if (v44)
      operator delete(v44);
LABEL_49:
    *(_QWORD *)v41 = v43;
    v41 = v127 + 8;
    v127 += 8;
    --v9;
  }
  while (v9);
  for (j = *(char **)(a1 + 8); v8; --v8)
  {
    if (v41 == v128)
    {
      v75 = (uint64_t *)*((_QWORD *)&v126 + 1);
      v74 = (void *)v126;
      if (*((_QWORD *)&v126 + 1) <= (unint64_t)v126)
      {
        v81 = (uint64_t)&v41[-v126] >> 2;
        if (v41 == (char *)v126)
          v81 = 1;
        if (v81 >> 61)
          goto LABEL_133;
        v82 = v81 >> 2;
        v83 = 8 * v81;
        v84 = (char *)operator new(8 * v81);
        v85 = &v84[8 * v82];
        v86 = (unint64_t)&v41[-*((_QWORD *)&v126 + 1)];
        v29 = v41 == *((char **)&v126 + 1);
        v41 = v85;
        if (!v29)
        {
          v41 = &v85[v86 & 0xFFFFFFFFFFFFFFF8];
          v87 = (char *)(v86 - 8);
          if (v86 - 8 < 0x38)
          {
            v88 = &v84[8 * v82];
            goto LABEL_98;
          }
          v88 = &v84[8 * v82];
          if ((unint64_t)&v88[-*((_QWORD *)&v126 + 1)] < 0x20)
            goto LABEL_138;
          v89 = ((unint64_t)v87 >> 3) + 1;
          v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
          v88 = &v85[v90];
          v91 = (uint64_t *)(*((_QWORD *)&v126 + 1) + v90);
          v92 = (__int128 *)(*((_QWORD *)&v126 + 1) + 16);
          v93 = &v84[8 * v82 + 16];
          v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v95 = *v92;
            *((_OWORD *)v93 - 1) = *(v92 - 1);
            *(_OWORD *)v93 = v95;
            v92 += 2;
            v93 += 32;
            v94 -= 4;
          }
          while (v94);
          v75 = v91;
          if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_138:
            do
            {
LABEL_98:
              v96 = *v75++;
              *(_QWORD *)v88 = v96;
              v88 += 8;
            }
            while (v88 != v41);
          }
        }
        *(_QWORD *)&v126 = v84;
        *((_QWORD *)&v126 + 1) = &v84[8 * v82];
        v127 = v41;
        v128 = &v84[v83];
        if (v74)
          operator delete(v74);
        goto LABEL_80;
      }
      v76 = (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 3;
      if (v76 >= -1)
        v77 = v76 + 1;
      else
        v77 = v76 + 2;
      v78 = v77 >> 1;
      v79 = *((_QWORD *)&v126 + 1) - 8 * (v77 >> 1);
      v80 = &v41[-*((_QWORD *)&v126 + 1)];
      if (v41 != *((char **)&v126 + 1))
      {
        memmove((void *)(*((_QWORD *)&v126 + 1) - 8 * (v77 >> 1)), *((const void **)&v126 + 1), (size_t)&v41[-*((_QWORD *)&v126 + 1)]);
        v41 = (char *)*((_QWORD *)&v126 + 1);
      }
      v73 = &v41[-8 * v78];
      v41 = &v80[v79];
      *((_QWORD *)&v126 + 1) = v73;
      v127 = &v80[v79];
    }
LABEL_80:
    *(_QWORD *)v41 = *(_QWORD *)j;
    v41 = v127 + 8;
    v127 += 8;
    j = (char *)(*(_QWORD *)(a1 + 8) + 8);
    *(_QWORD *)(a1 + 8) = j;
  }
  v68 = j;
  if (*(char **)(a1 + 16) != j)
  {
    v68 = *(char **)(a1 + 16);
    do
    {
      v68 -= 8;
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)&v126, v68);
    }
    while (v68 != *(char **)(a1 + 8));
    j = *(char **)(a1 + 16);
    v41 = v127;
  }
  v69 = v128;
  v70 = *(char **)(a1 + 24);
  v71 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v41;
  *(_QWORD *)(a1 + 24) = v69;
  v72 = *(char **)a1;
  *(_OWORD *)a1 = v126;
  *(_QWORD *)&v126 = v72;
  *((_QWORD *)&v126 + 1) = v68;
  v127 = j;
  v128 = v70;
  *(_QWORD *)(a1 + 32) = v71 - v40;
  if (j != v68)
    v127 = &j[(v68 - j + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v72)
    operator delete(v72);
}

uint64_t llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unint64_t v22;
  unint64_t v23;
  int64x2_t *buffer;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  uint64_t v31;
  char *v32;

  if (!a3
    || (v6 = (a3 - 1) | ((unint64_t)(a3 - 1) >> 1) | (((a3 - 1) | ((unint64_t)(a3 - 1) >> 1)) >> 2),
        v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8),
        LODWORD(v7) = ((v7 | (v7 >> 16)) >> 32) | v7 | (v7 >> 16),
        v8 = __CFADD__((_DWORD)v7, 1),
        v9 = v7 + 1,
        v8))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    v22 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
    v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
    LODWORD(v23) = (((v23 | (v23 >> 8)) >> 16) | v23 | (v23 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v23;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v23, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = buffer;
    *(_QWORD *)(a1 + 8) = 0;
    v25 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v25)
      goto LABEL_6;
    v26 = (v25 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v27 = (char *)buffer;
    if (v26 < 3)
      goto LABEL_30;
    v28 = v26 + 1;
    v27 = &buffer->i8[8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
    v29 = buffer + 1;
    v30 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29[-1] = v30;
      *v29 = v30;
      v29 += 2;
      v31 -= 4;
    }
    while (v31);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      v32 = &buffer->i8[8 * v25];
      do
      {
        *(_QWORD *)v27 = -4096;
        v27 += 8;
      }
      while (v27 != v32);
    }
  }
  if (a3)
  {
LABEL_6:
    v10 = &a2[a3];
    while (1)
    {
      v15 = *(_DWORD *)(a1 + 16);
      if (!v15)
        break;
      v11 = v15 - 1;
      v12 = ((*a2 >> 4) ^ (*a2 >> 9)) & v11;
      v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v12);
      v14 = *v13;
      if (*a2 != *v13)
      {
        v17 = 0;
        v18 = 1;
        while (v14 != -4096)
        {
          if (v17)
            v19 = 0;
          else
            v19 = v14 == -8192;
          if (v19)
            v17 = v13;
          v20 = v12 + v18++;
          v12 = v20 & v11;
          v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v12);
          v14 = *v13;
          if (*a2 == *v13)
            goto LABEL_8;
        }
        if (v17)
          v16 = v17;
        else
          v16 = v13;
        goto LABEL_11;
      }
LABEL_8:
      if (++a2 == v10)
        return a1;
    }
    v16 = 0;
LABEL_11:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(a1, v16, a2);
    goto LABEL_8;
  }
  return a1;
}

void std::__shared_ptr_emplace<mlir::anec::RegionConversionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFF5920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::anec::RegionConversionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24BFF5920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

void std::__shared_ptr_emplace<mlir::anec::RegionConversionInfo>::__on_zero_shared(uint64_t a1)
{
  mlir::anec::RegionConversionInfo::~RegionConversionInfo((mlir::anec::RegionConversionInfo *)(a1 + 24));
}

void mlir::anec::RegionConversionInfo::~RegionConversionInfo(mlir::anec::RegionConversionInfo *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = (char *)*((_QWORD *)this + 24);
  v3 = *((unsigned int *)this + 50);
  if ((_DWORD)v3)
  {
    v4 = &v2[16 * v3];
    do
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v4 -= 16;
    }
    while (v4 != v2);
    v2 = (char *)*((_QWORD *)this + 24);
  }
  if (v2 != (char *)this + 208)
    free(v2);
  v8 = (char *)*((_QWORD *)this + 16);
  if (v8 != (char *)this + 144)
    free(v8);
  v9 = (char *)*((_QWORD *)this + 8);
  v10 = *((unsigned int *)this + 18);
  if ((_DWORD)v10)
  {
    v11 = &v9[16 * v10];
    do
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v11 -= 16;
    }
    while (v11 != v9);
    v9 = (char *)*((_QWORD *)this + 8);
  }
  if (v9 != (char *)this + 80)
    free(v9);
  v15 = *(char **)this;
  v16 = *((unsigned int *)this + 2);
  if ((_DWORD)v16)
  {
    v17 = &v15[16 * v16];
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
    while (v17 != v15);
    v15 = *(char **)this;
  }
  if (v15 != (char *)this + 16)
    free(v15);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>,mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::InsertIntoBucket<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    v10 = *(_QWORD *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::grow(a1, v9);
  v10 = *a3;
  v12 = *(_DWORD *)(a1 + 16) - 1;
  v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = *(_QWORD *)a1 + 24 * v13;
  v14 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = a2;
      v18 = v13 + v16++;
      v13 = v18 & v12;
      a2 = *(_QWORD *)a1 + 24 * (v18 & v12);
      v14 = *(_QWORD *)a2;
      if (v10 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v15)
      a2 = v15;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  return a2;
}

_QWORD *llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = 3 * v3;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>,mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::moveFromOldBuckets(a1, v4, &v4[v10]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(v10 * 8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 24 * v11 - 24;
    if (v12 < 0x18)
    {
      v13 = result;
LABEL_12:
      v17 = &result[3 * v11];
      do
      {
        *v13 = -4096;
        v13 += 3;
      }
      while (v13 != v17);
      return result;
    }
    v14 = v12 / 0x18 + 1;
    v13 = &result[3 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
    v15 = v14 & 0x1FFFFFFFFFFFFFFELL;
    v16 = result;
    do
    {
      *v16 = -4096;
      v16[3] = -4096;
      v16 += 6;
      v15 -= 2;
    }
    while (v15);
    if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_12;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>,mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 24 * v3 - 24;
    if (v5 < 0x18)
    {
      v6 = *(_QWORD **)result;
LABEL_7:
      v10 = &v4[3 * v3];
      do
      {
        *v6 = -4096;
        v6 += 3;
      }
      while (v6 != v10);
      goto LABEL_9;
    }
    v7 = v5 / 0x18 + 1;
    v6 = &v4[3 * (v7 & 0x1FFFFFFFFFFFFFFELL)];
    v8 = v7 & 0x1FFFFFFFFFFFFFFELL;
    v9 = *(_QWORD **)result;
    do
    {
      *v9 = -4096;
      v9[3] = -4096;
      v9 += 6;
      v8 -= 2;
    }
    while (v8);
    if (v7 != (v7 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  while (a2 != a3)
  {
    v12 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = *(_DWORD *)(result + 16) - 1;
      v14 = v13 & ((v12 >> 4) ^ (v12 >> 9));
      v11 = *(_QWORD *)result + 24 * v14;
      v15 = *(_QWORD *)v11;
      if (v12 != *(_QWORD *)v11)
      {
        v16 = 0;
        v17 = 1;
        while (v15 != -4096)
        {
          if (v16)
            v18 = 0;
          else
            v18 = v15 == -8192;
          if (v18)
            v16 = v11;
          v19 = v14 + v17++;
          v14 = v19 & v13;
          v11 = *(_QWORD *)result + 24 * (v19 & v13);
          v15 = *(_QWORD *)v11;
          if (v12 == *(_QWORD *)v11)
            goto LABEL_13;
        }
        if (v16)
          v11 = v16;
      }
LABEL_13:
      *(_QWORD *)v11 = v12;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      ++*(_DWORD *)(result + 8);
    }
    a2 += 3;
  }
  return result;
}

void mlir::`anonymous namespace'::associateUnmaterializedOpIds(mlir::anec::FunctionConversionInfo *,llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>> &,llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>> &)::$_0::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  llvm *v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t DefiningOp;
  int v50;
  uint64_t v51;
  llvm *v52;
  uint64_t v53;
  int v54;
  int v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  int v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  llvm *v83[2];
  uint64_t v84;
  void *__p[2];
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[2];
  uint64_t v93;
  uint64_t v94[7];

  v94[6] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v92[0] = a2;
  *(_OWORD *)__p = 0u;
  v86 = 0u;
  v87 = 0u;
  std::deque<mlir::Operation *>::__append_with_size[abi:nn180100]<mlir::Operation * const*>(__p, (uint64_t *)v92, 1uLL);
  v83[0] = 0;
  v83[1] = 0;
  v84 = 0;
  v7 = *((_QWORD *)&v87 + 1);
  if (!*((_QWORD *)&v87 + 1))
    goto LABEL_107;
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v87 >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (v87 & 0x1FF));
    v82 = v8;
    *(_QWORD *)&v87 = v87 + 1;
    *((_QWORD *)&v87 + 1) = v7 - 1;
    if ((unint64_t)v87 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(_QWORD *)&v87 = v87 - 512;
    }
    v9 = *((_DWORD *)*a1 + 4);
    if (!v9)
      goto LABEL_10;
    v10 = **a1;
    v11 = v9 - 1;
    v12 = ((v8 >> 4) ^ (v8 >> 9)) & v11;
    v13 = *(_QWORD *)(v10 + 24 * v12);
    if (v13 == v8)
      break;
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v12 + v14++;
      v12 = v15 & v11;
      v13 = *(_QWORD *)(v10 + 24 * v12);
      if (v13 == v8)
        goto LABEL_85;
    }
LABEL_10:
    if (a4)
    {
      v16 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v16)
        v17 = v8 - 16;
      else
        v17 = 0;
      v90 = v17;
      v91 = v16;
      mlir::ResultRange::use_begin(&v90, (uint64_t *)v88);
      v18 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v18)
        v19 = v8 - 16;
      else
        v19 = 0;
      v90 = v19;
      v91 = v18;
      mlir::ResultRange::use_end(&v90, v94);
      v20 = v89;
      v93 = v89;
      v92[0] = v88[0];
      v92[1] = v88[1];
      v21 = v94[4];
      while (1)
      {
        if (v20 == v21)
          goto LABEL_83;
        v26 = *(_QWORD *)(v20 + 16);
        v90 = v26;
        v27 = v84;
        if ((_DWORD)v84)
        {
          LODWORD(v28) = (v84 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          v29 = (llvm *)((char *)v83[0] + 8 * v28);
          v30 = *(_QWORD *)v29;
          if (*(_QWORD *)v29 != v26)
          {
            v31 = 1;
            do
            {
              if (v30 == -4096)
                goto LABEL_27;
              v32 = v28 + v31++;
              v28 = v32 & (v84 - 1);
              v30 = *((_QWORD *)v83[0] + v28);
            }
            while (v30 != v26);
            v29 = (llvm *)((char *)v83[0] + 8 * v28);
          }
        }
        else
        {
LABEL_27:
          v29 = (llvm *)((char *)v83[0] + 8 * v84);
        }
        if (v29 == (llvm *)((char *)v83[0] + 8 * v84))
        {
          v33 = (char *)__p[1];
          if ((void *)v86 == __p[1])
            v34 = 0;
          else
            v34 = (((_QWORD)v86 - (unint64_t)__p[1]) << 6) - 1;
          v35 = *((_QWORD *)&v87 + 1);
          v36 = *((_QWORD *)&v87 + 1) + v87;
          if (v34 == *((_QWORD *)&v87 + 1) + (_QWORD)v87)
          {
            std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
            v35 = *((_QWORD *)&v87 + 1);
            v33 = (char *)__p[1];
            v36 = v87 + *((_QWORD *)&v87 + 1);
            v26 = v90;
            v27 = v84;
          }
          *(_QWORD *)(*(_QWORD *)&v33[(v36 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v36 & 0x1FF)) = v26;
          *((_QWORD *)&v87 + 1) = v35 + 1;
          if (v27)
          {
            v22 = v27 - 1;
            v23 = ((v90 >> 4) ^ (v90 >> 9)) & v22;
            v24 = (uint64_t *)((char *)v83[0] + 8 * v23);
            v25 = *v24;
            if (v90 == *v24)
              goto LABEL_19;
            v38 = 0;
            v39 = 1;
            while (v25 != -4096)
            {
              if (v38)
                v40 = 0;
              else
                v40 = v25 == -8192;
              if (v40)
                v38 = v24;
              v41 = v23 + v39++;
              v23 = v41 & v22;
              v24 = (uint64_t *)((char *)v83[0] + 8 * v23);
              v25 = *v24;
              if (v90 == *v24)
                goto LABEL_19;
            }
            if (v38)
              v37 = v38;
            else
              v37 = v24;
          }
          else
          {
            v37 = 0;
          }
          llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v83, v37, &v90);
        }
LABEL_19:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)v88);
        v20 = v89;
      }
    }
    if ((*(_BYTE *)(v8 + 46) & 0x80) != 0)
    {
      v42 = *(unsigned int *)(v8 + 68);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = *(_QWORD *)(v8 + 72);
        while (1)
        {
          *(_QWORD *)&v92[0] = *(_QWORD *)(v44 + 32 * v43 + 24);
          *(_QWORD *)&v88[0] = 0;
          DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v92);
          *(_QWORD *)&v88[0] = DefiningOp;
          if (!DefiningOp)
            goto LABEL_53;
          v50 = v84;
          if ((_DWORD)v84)
          {
            LODWORD(v51) = (v84 - 1) & ((DefiningOp >> 4) ^ (DefiningOp >> 9));
            v52 = (llvm *)((char *)v83[0] + 8 * v51);
            v53 = *(_QWORD *)v52;
            if (*(_QWORD *)v52 != DefiningOp)
            {
              v54 = 1;
              do
              {
                if (v53 == -4096)
                  goto LABEL_61;
                v55 = v51 + v54++;
                v51 = v55 & (v84 - 1);
                v53 = *((_QWORD *)v83[0] + v51);
              }
              while (v53 != DefiningOp);
              v52 = (llvm *)((char *)v83[0] + 8 * v51);
            }
          }
          else
          {
LABEL_61:
            v52 = (llvm *)((char *)v83[0] + 8 * v84);
          }
          if (v52 != (llvm *)((char *)v83[0] + 8 * v84))
            goto LABEL_53;
          v56 = (char *)__p[1];
          if ((void *)v86 == __p[1])
            v57 = 0;
          else
            v57 = (((_QWORD)v86 - (unint64_t)__p[1]) << 6) - 1;
          v58 = *((_QWORD *)&v87 + 1);
          v59 = *((_QWORD *)&v87 + 1) + v87;
          if (v57 == *((_QWORD *)&v87 + 1) + (_QWORD)v87)
          {
            std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
            v58 = *((_QWORD *)&v87 + 1);
            v56 = (char *)__p[1];
            v59 = v87 + *((_QWORD *)&v87 + 1);
            DefiningOp = *(_QWORD *)&v88[0];
            v50 = v84;
          }
          *(_QWORD *)(*(_QWORD *)&v56[(v59 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v59 & 0x1FF)) = DefiningOp;
          *((_QWORD *)&v87 + 1) = v58 + 1;
          if (!v50)
            break;
          v45 = v50 - 1;
          v46 = ((LODWORD(v88[0]) >> 4) ^ (LODWORD(v88[0]) >> 9)) & v45;
          v47 = (uint64_t *)((char *)v83[0] + 8 * v46);
          v48 = *v47;
          if (*(_QWORD *)&v88[0] != *v47)
          {
            v61 = 0;
            v62 = 1;
            while (v48 != -4096)
            {
              if (v61)
                v63 = 0;
              else
                v63 = v48 == -8192;
              if (v63)
                v61 = v47;
              v64 = v46 + v62++;
              v46 = v64 & v45;
              v47 = (uint64_t *)((char *)v83[0] + 8 * v46);
              v48 = *v47;
              if (*(_QWORD *)&v88[0] == *v47)
                goto LABEL_53;
            }
            if (v61)
              v60 = v61;
            else
              v60 = v47;
            goto LABEL_70;
          }
LABEL_53:
          if (++v43 == v42)
            goto LABEL_83;
        }
        v60 = 0;
LABEL_70:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v83, v60, (uint64_t *)v88);
        goto LABEL_53;
      }
    }
LABEL_83:
    v7 = *((_QWORD *)&v87 + 1);
    if (!*((_QWORD *)&v87 + 1))
      goto LABEL_107;
  }
LABEL_85:
  v65 = *(unsigned int *)(a3 + 136);
  if (!(_DWORD)v65)
LABEL_107:
    llvm::deallocate_buffer(v83[0], (void *)(8 * v84));
  v66 = *(uint64_t **)(a3 + 128);
  v67 = &v66[v65];
  while (1)
  {
    v68 = *v66;
    v69 = *a1;
    v70 = *((_DWORD *)*a1 + 4);
    if (!v70)
      break;
    v71 = v70 - 1;
    v72 = ((v82 >> 4) ^ (v82 >> 9)) & (v70 - 1);
    v73 = (_QWORD *)(*v69 + 24 * v72);
    v74 = *v73;
    if (v82 != *v73)
    {
      v75 = 0;
      v76 = 1;
      while (v74 != -4096)
      {
        if (v75)
          v77 = 0;
        else
          v77 = v74 == -8192;
        if (v77)
          v75 = v73;
        v78 = v72 + v76++;
        v72 = v78 & v71;
        v73 = (_QWORD *)(*v69 + 24 * (v78 & v71));
        v74 = *v73;
        if (v82 == *v73)
          goto LABEL_100;
      }
      if (v75)
        v79 = v75;
      else
        v79 = v73;
      goto LABEL_99;
    }
LABEL_100:
    v80 = v73[1];
    v81 = *(unsigned int *)(v80 + 136);
    if (v81 >= *(unsigned int *)(v80 + 140))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v80 + 128, (void *)(v80 + 144), v81 + 1, 8);
      v81 = *(unsigned int *)(v80 + 136);
    }
    *(_QWORD *)(*(_QWORD *)(v80 + 128) + 8 * v81) = v68;
    ++*(_DWORD *)(v80 + 136);
    if (++v66 == v67)
      goto LABEL_107;
  }
  v79 = 0;
LABEL_99:
  v73 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>,mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::InsertIntoBucket<mlir::Operation * const&>((uint64_t)v69, v79, &v82);
  goto LABEL_100;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>,mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::InsertIntoBucket<mlir::Operation * const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::shared_ptr<mlir::anec::RegionConversionInfo>>>::grow(a1, v7);
  v8 = *a3;
  v11 = *(_DWORD *)(a1 + 16) - 1;
  v12 = ((*a3 >> 4) ^ (*a3 >> 9)) & v11;
  a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v12);
  v13 = *a2;
  if (*a3 != *a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = a2;
      v17 = v12 + v15++;
      v12 = v17 & v11;
      a2 = (_QWORD *)(*(_QWORD *)a1 + 24 * (v17 & v11));
      v13 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v14)
      a2 = v14;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v9;
  return a2;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::MPSToANECMin::basicMPSToANECConversion(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*,mlir::anec::FunctionConversionInfo *,mlir::anec::ANECIRWeights &)::{lambda(mlir::Operation *)#3}>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

uint64_t mlir::OpInterface<mlir::FormableRegionOpInterface,mlir::detail::FormableRegionOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::Operation *&,mlir::placement::RegionType,mlir::ValueRange &>(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr **a3, int *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"placement.region_call";
    v19[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::placement::RegionCall::build(a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

BOOL mlir::verifyANECompatibleElementType(_QWORD *a1)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v3;

  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  v3 = ElementTypeOrSelf;
  if (ElementTypeOrSelf
    && *(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v3 = mlir::MPSToANECTypeConverter::canonicalizeIntegerType(ElementTypeOrSelf);
  }
  return mlir::Type::isF16((mlir::Type *)&v3)
      || mlir::Type::isSignedInteger((mlir::Type *)&v3, 8)
      || mlir::Type::isUnsignedInteger((mlir::Type *)&v3, 8);
}

uint64_t *mlir::verifyANECompatibleType(uint64_t *a1, int a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ElementTypeOrSelf;
  _QWORD v8[2];
  uint64_t v9;

  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a1);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    mlir::ShapedType::getShape((mlir::ShapedType *)v8);
    if (a2 <= 1 && v6 == 5)
    {
      return 0;
    }
    else
    {
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
      v9 = ElementTypeOrSelf;
      if (ElementTypeOrSelf
        && *(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v9 = mlir::MPSToANECTypeConverter::canonicalizeIntegerType(ElementTypeOrSelf);
      }
      if (mlir::Type::isF16((mlir::Type *)&v9) || mlir::Type::isSignedInteger((mlir::Type *)&v9, 8))
        return (uint64_t *)1;
      else
        return (uint64_t *)mlir::Type::isUnsignedInteger((mlir::Type *)&v9, 8);
    }
  }
  return result;
}

uint64_t mlir::verifyCompatibleTypesWithANE(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t DefiningOp;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NextResultAtOffset;
  uint64_t v20;

  v8 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v8) & 1) == 0)
  {
    if (a3)
    {
      if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
      {
        v9 = *(unsigned int *)(a1 + 68);
        if ((_DWORD)v9)
        {
          v10 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 24);
          do
          {
            v11 = *v10;
            v20 = *v10;
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
            if (!DefiningOp
              || (v13 = DefiningOp,
                  v14 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                  ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 48) + 32))(*(_QWORD *)(v13 + 48), v14) & 1) == 0))
            {
              if (!mlir::verifyANECompatibleType((uint64_t *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8), a2))return 0;
            }
            v10 += 4;
          }
          while (--v9);
        }
      }
    }
    if (a4)
    {
      v15 = *(unsigned int *)(a1 + 36);
      v16 = (_DWORD)v15 ? a1 - 16 : 0;
      if ((_DWORD)v15)
      {
        v17 = 0;
        while (1)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
          if (!mlir::verifyANECompatibleType((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), a2))break;
          if (v15 == ++v17)
            return 1;
        }
        return 0;
      }
    }
  }
  return 1;
}

uint64_t mlir::materializeMPSToANECHostTypeConversion(mlir::UnknownLoc **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t Shape;
  uint64_t v21;
  uint64_t v22;
  uint64_t OperandRange;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t *Value;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t canMapOperands;
  uint64_t LayerSchedule;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v47;
  _QWORD *v48;
  void *v49;
  uint64_t DefiningOp;
  void *v51;
  BOOL v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  char v87;
  _QWORD *v88;
  _QWORD *Input;
  uint64_t ElementTypeOrSelf;
  char *v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char v97;
  _QWORD *v98;
  char *v100;
  _QWORD *RawStringData;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104[2];
  _QWORD *v105[2];
  uint64_t v106;
  _QWORD *v107;

  v105[1] = a5;
  v106 = (uint64_t)a3;
  v105[0] = a4;
  v7 = (_QWORD *)(a3[1] & 0xFFFFFFFFFFFFFFF8);
  if (a4 == v7)
  {
    RawStringData = a3;
    v104[0] = 0;
    v47 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&RawStringData, v104);
    v48 = v104[0];
    if ((v47 & 1) == 0)
    {
      v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)&RawStringData, (unint64_t *)&RawStringData, v104[0]);
      *v48 = RawStringData;
      v48[1] = 0;
    }
    v48[1] = a3;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v10 = *v7;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_11;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = (_QWORD *)v13[1];
    else
LABEL_11:
      v19 = 0;
    v104[0] = v7;
    v104[1] = v19;
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v105);
    v22 = v21;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
    v24 = mlir::RankedTensorType::get(Shape, v22, OperandRange, 0);
    v103 = 0;
    v25 = v105[0];
    v26 = *(void **)(*v105[0] + 136);
    if (v26 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v25 = 0;
    v107 = v25;
    if (v26 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
      v29 = v28;
      v30 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
      RawStringData = (_QWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v107);
      v102 = v31;
      canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&RawStringData);
      LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v107);
      v103 = mlir::MemRefType::get(Value, v29, v30, canMapOperands, LayerSchedule);
    }
    v34 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v104);
    v35 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
    v36 = *(void **)(*v105[0] + 136);
    if (v36 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      v49 = *(void **)(*v104[0] + 136);
      if (v49 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
        v66 = (_QWORD *)v106;
        v67 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
        RawStringData = v66;
        v107 = (_QWORD *)v67;
        if (v34 != v35)
          v66 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16);
        v100 = (char *)v66;
        v68 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v104);
        v70 = v69;
        v71 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v105);
        if (v70 != v72 || memcmp(v68, v71, 8 * v70))
        {
          v73 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
          RawStringData = v66;
          v107 = (_QWORD *)v73;
          if (v34 != v35)
            v66 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16);
          v107 = v66;
          RawStringData = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v105);
          v102 = v74;
          v100 = (char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::ArrayRef<long long>>((mlir::Builder *)a1, a2, (uint64_t *)&v107, (uint64_t)&RawStringData)- 16;
        }
        v45 = (char *)mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::Value &>(a1, a2, &v100) - 16;
        v107 = (_QWORD *)v106;
LABEL_65:
        RawStringData = 0;
        v87 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v107, &RawStringData);
        v88 = RawStringData;
        if ((v87 & 1) == 0)
        {
          v88 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)&v107, (unint64_t *)&v107, RawStringData);
          *v88 = v107;
          v88[1] = 0;
        }
        v88[1] = v45;
        return 1;
      }
      if (v49 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v106);
        if (DefiningOp
          && ((v51 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16),
               v52 = v51 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id,
               v51 != &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
            ? (v53 = 0)
            : (v53 = (char *)DefiningOp),
              v100 = v53,
              v52))
        {
          Input = (_QWORD *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v100);
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v105[0]);
          RawStringData = Input;
          v107 = (_QWORD *)ElementTypeOrSelf;
          if (v34 != v35)
            Input = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16);
          RawStringData = Input;
          v91 = (char *)mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)a1, a2, (uint64_t)&v103, (uint64_t)&RawStringData)- 16;
          v107 = (_QWORD *)v106;
          RawStringData = 0;
          v92 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v107, &RawStringData);
          v93 = RawStringData;
          if ((v92 & 1) == 0)
          {
            v93 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)&v107, (unint64_t *)&v107, RawStringData);
            *v93 = v107;
            v93[1] = 0;
          }
          v93[1] = v91;
        }
        else
        {
          v54 = *(_QWORD **)v106;
          if (*(_QWORD *)v106)
          {
            if (!*v54)
            {
              v55 = v54[2];
              if (v55)
              {
                if (*(_UNKNOWN **)(*(_QWORD *)(v55 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
                {
                  v56 = mlir::ShapedType::getShape((mlir::ShapedType *)v104);
                  v58 = v57;
                  v59 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
                  v60 = mlir::RankedTensorType::get(v56, v58, v59, 0);
                  v61 = (char *)mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::Value &>(a1, a2, &v106)
                      - 16;
                  if (v60 != v24)
                  {
                    v62 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
                    RawStringData = v61;
                    v107 = (_QWORD *)v62;
                    if (v34 != v35)
                      v61 = (char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16;
                    v107 = v61;
                    RawStringData = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v105);
                    v102 = v63;
                    v61 = (char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::ArrayRef<long long>>((mlir::Builder *)a1, a2, (uint64_t *)&v107, (uint64_t)&RawStringData)- 16;
                  }
                  v64 = v106;
                  v65 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
                  RawStringData = v61;
                  v107 = (_QWORD *)v65;
                  if (v34 != v35)
                    v61 = (char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16;
                  mlir::IRMapping::map((uint64_t *)a6, v64, (uint64_t)v61);
                }
              }
            }
          }
        }
        v94 = v106;
        v107 = (_QWORD *)v106;
        RawStringData = 0;
        v95 = (_QWORD *)v106;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v107, &RawStringData))
        {
          v95 = (_QWORD *)v94;
          if (RawStringData != (_QWORD *)(*(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16)))
            v95 = (_QWORD *)RawStringData[1];
        }
        v96 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
        RawStringData = v95;
        v107 = (_QWORD *)v96;
        if (v34 != v35)
          v95 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16);
        v107 = (_QWORD *)v94;
        RawStringData = 0;
        v97 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v107, &RawStringData);
        v98 = RawStringData;
        if ((v97 & 1) == 0)
        {
          v98 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)&v107, (unint64_t *)&v107, RawStringData);
          *v98 = v107;
          v98[1] = 0;
        }
        v98[1] = v95;
      }
    }
    else
    {
      if (v36 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        return 1;
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(v106 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        if (*(_UNKNOWN **)(*v104[0] + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
          return 1;
        v37 = mlir::ShapedType::getShape((mlir::ShapedType *)v104);
        v39 = v38;
        v40 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
        v41 = mlir::RankedTensorType::get(v37, v39, v40, 0);
        v42 = (_QWORD *)v106;
        if (v41 == v24)
        {
          v45 = (char *)v106;
        }
        else
        {
          v43 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
          RawStringData = v42;
          v107 = (_QWORD *)v43;
          if (v34 != v35)
            v42 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16);
          v107 = v42;
          RawStringData = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v105);
          v102 = v44;
          v45 = (char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::ArrayRef<long long>>((mlir::Builder *)a1, a2, (uint64_t *)&v107, (uint64_t)&RawStringData)- 16;
          v42 = (_QWORD *)v106;
        }
        v107 = v42;
        goto LABEL_65;
      }
      v75 = mlir::ShapedType::getShape((mlir::ShapedType *)v104);
      v77 = v76;
      v78 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
      v79 = mlir::RankedTensorType::get(v75, v77, v78, 0);
      v80 = (char *)mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::Value &>(a1, a2, &v106) - 16;
      if (v79 != v24)
      {
        v81 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
        RawStringData = v80;
        v107 = (_QWORD *)v81;
        if (v34 != v35)
          v80 = (char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16;
        v107 = v80;
        RawStringData = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v105);
        v102 = v82;
        v80 = (char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::ArrayRef<long long>>((mlir::Builder *)a1, a2, (uint64_t *)&v107, (uint64_t)&RawStringData)- 16;
      }
      v83 = v106;
      v84 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v105);
      RawStringData = v80;
      v107 = (_QWORD *)v84;
      if (v34 != v35)
        v80 = (char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(a1, a2, (uint64_t *)&RawStringData, (uint64_t *)&v107)- 16;
      v107 = (_QWORD *)v83;
      RawStringData = 0;
      v85 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)&v107, &RawStringData);
      v86 = RawStringData;
      if ((v85 & 1) == 0)
      {
        v86 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)&v107, (unint64_t *)&v107, RawStringData);
        *v86 = v107;
        v86[1] = 0;
      }
      v86[1] = v80;
    }
  }
  return 1;
}

uint64_t mlir::IRMapping::map(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v7 = a2;
  v8 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a1, &v7, &v8);
  v6 = v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a1, (uint64_t)&v7, &v7, v8);
    v6 = (_QWORD *)result;
    *(_QWORD *)result = v7;
    *(_QWORD *)(result + 8) = 0;
  }
  v6[1] = a3;
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,llvm::ArrayRef<long long>>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.reshape";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReshapeOp::build(a1, v19, *a3, *(_QWORD *)a4, *(_QWORD **)(a4 + 8));
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::Value &>(mlir::UnknownLoc **a1, uint64_t a2, void *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.tensor_to_memref", (const unsigned __int8 *)0x1A, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"placement.tensor_to_memref";
    v15[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::placement::TensorToMemref::build(a1, (uint64_t)v17, a3, 1, 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::MemrefToTensor,mlir::Value &>(mlir::UnknownLoc **a1, uint64_t a2, void *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.memref_to_tensor", (const unsigned __int8 *)0x1A, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"placement.memref_to_tensor";
    v15[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::placement::MemrefToTensor::build(a1, (uint64_t)v17, a3, 1, 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::TensorToMemref,mlir::MemRefType &,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  unint64_t v19[2];
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.tensor_to_memref", (const unsigned __int8 *)0x1A, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"placement.tensor_to_memref";
    v17[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::ValueRange::ValueRange(v19, a3, 1uLL);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v20, v19[0], v19[1], a4, 1, 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.cast", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.cast";
    v17[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::CastOp::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::populateMPSToANECConversionPatterns(uint64_t a1, char a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::APFloatBase *v42;
  void *v43;
  llvm::APFloatBase *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  llvm::APFloatBase *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  const char *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t *v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  const char *v184;
  unint64_t v185;
  uint64_t v186;
  const char *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  _QWORD *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t *v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  const char *v218;
  unint64_t v219;
  uint64_t v220;
  const char *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  _QWORD *v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t *v233;
  char *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  const char *v252;
  unint64_t v253;
  uint64_t v254;
  const char *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  _QWORD *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  uint64_t *v267;
  char *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  const char *v286;
  unint64_t v287;
  uint64_t v288;
  const char *v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  _QWORD *v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t *v301;
  char *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  char *v327;
  _QWORD *v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  uint64_t *v335;
  char *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  uint64_t v356;
  char *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  _QWORD *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  char *v368;
  uint64_t *v369;
  char *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  char *v376;
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  char *v388;
  char *v389;
  uint64_t v390;
  char *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  _QWORD *v396;
  char *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  char *v402;
  uint64_t *v403;
  char *v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  char *v409;
  char *v410;
  uint64_t v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  uint64_t v424;
  char *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  char *v429;
  _QWORD *v430;
  char *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  char *v436;
  uint64_t *v437;
  char *v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  char *v443;
  char *v444;
  uint64_t v445;
  __int128 v446;
  __int128 v447;
  uint64_t v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  uint64_t v458;
  char *v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  char *v463;
  _QWORD *v464;
  char *v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  char *v470;
  uint64_t *v471;
  char *v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  char *v477;
  char *v478;
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  uint64_t v492;
  char *v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  char *v497;
  _QWORD *v498;
  char *v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  char *v504;
  uint64_t *v505;
  char *v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  char *v511;
  char *v512;
  uint64_t v513;
  __int128 v514;
  __int128 v515;
  uint64_t v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  char *v522;
  char *v523;
  char *v524;
  char *v525;
  uint64_t v526;
  char *v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  _QWORD *v532;
  char *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  char *v538;
  uint64_t *v539;
  char *v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  char *v544;
  char *v545;
  char *v546;
  uint64_t v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  char *v557;
  char *v558;
  char *v559;
  uint64_t v560;
  char *v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  char *v565;
  _QWORD *v566;
  char *v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  char *v572;
  uint64_t *v573;
  char *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char *v578;
  char *v579;
  char *v580;
  uint64_t v581;
  __int128 v582;
  __int128 v583;
  uint64_t v584;
  char *v585;
  uint64_t v586;
  uint64_t v587;
  void *v588;
  char v589;
  int v590;
  uint64_t v591;
  const char *v592;
  unint64_t v593;
  _QWORD *v594;
  const char *v595;
  void *v596[2];
  char v597;
  void *__p;
  void *v599[2];
  _BYTE v600[7];
  char v601;
  _QWORD v602[5];
  char v603;
  const char *p_p;
  _QWORD v605[3];
  const char *v606;
  void *v607[2];
  char v608;
  _QWORD v609[2];

  v4 = a4;
  v7 = a1;
  v609[0] = *MEMORY[0x24BDAC8D0];
  _ZN4mlir12_GLOBAL__N_120addPatternsForTargetIJNS0_14ConvertBiasAddENS0_15ConvertConstantENS0_17ConvertCropResizeENS0_22ConvertDepthwiseConv3DENS0_31ConvertElementwiseBinaryA14PlusINS_3mps5AddOpENS_4anec14ElementwiseAddELNS9_6FamilyE2EEENS6_INS7_10MultiplyOpENS9_15ElementwiseMultELSB_2EEENS6_INS7_10SubtractOpENS9_14ElementwiseSubELSB_2EEENS6_INS7_9MaximumOpENS9_14ElementwiseMaxELSB_2EEENS6_INS7_9MinimumOpENS9_14ElementwiseMinELSB_2EEENS6_INS7_7PowerOpENS9_16ElementwisePowerELSB_2EEENS0_32ConvertElementwiseBinaryA14MinusIS8_SA_LSB_1EEENSS_ISD_SE_LSB_1EEENSS_ISG_SH_LSB_1EEENSS_ISJ_SK_LSB_1EEENSS_ISM_SN_LSB_1EEENSS_ISP_SQ_LSB_1EEENSS_IS8_SA_LSB_0EEENSS_ISD_SE_LSB_0EEENSS_ISG_SH_LSB_0EEENSS_ISJ_SK_LSB_0EEENSS_ISM_SN_LSB_0EEENSS_ISP_SQ_LSB_0EEENS0_23ConvertElementwiseUnaryINS7_10AbsoluteOpENS9_14ElementwiseAbsEEENS0_15ConvertExponentENS0_16ConvertLogarithmENS0_13ConvertSelectENS0_16ConvertFlatten2DENS0_13ConvertDivideILSB_0EEENS1D_ILSB_1EEENS1D_ILSB_2EEENS1D_ILSB_3EEENS1D_ILSB_4EEENS1D_ILSB_5EEENS1D_ILSB_6EEENS0_18ConvertFloorDivideILSB_0EEENS1L_ILSB_1EEENS1L_ILSB_2EEENS1L_ILSB_3EEENS1L_ILSB_4EEENS1L_ILSB_5EEENS1L_ILSB_6EEENS0_13ConvertMatMulILSB_0EEENS1T_ILSB_1EEENS1T_ILSB_2EEENS1T_ILSB_3EEENS1T_ILSB_4EEENS1T_ILSB_5EEENS1T_ILSB_6EEENS15_INS7_9DegammaOpENS9_7DegammaEEENS15_INS7_7DiracOpENS9_5DiracEEENS15_INS7_6GeluOpENS9_4GeluEEENS15_INS7_6ReluOpENS9_4ReluEEENS15_INS7_7RoundOpENS9_12RoundNearestEEENS15_INS7_9SigmoidOpENS9_20HighPrecisionSigmoidEEENS15_INS7_8SquareOpENS9_17ElementwiseSquareEEENS15_INS7_12SquareRootOpENS9_4SqrtEEENS15_INS7_7SwishOpENS9_5SwishEEENS15_INS7_6TanhOpENS9_4TanhEEENS0_20ConvertBinaryCompareINS7_9EqualToOpENS9_16ElementwiseEqualEEENS0_26ConvertBinaryCompareToZeroIS2W_NS9_20ElementwiseEqualZeroEEENS2V_INS7_12NotEqualToOpENS9_19ElementwiseNotEqualEEENS2Z_IS32_NS9_23ElementwiseNotEqualZeroEEENS2V_INS7_13GreaterThanOpENS9_22ElementwiseGreaterThanEEENS2Z_IS37_NS9_26ElementwiseGreaterThanZeroEEENS2V_INS7_22GreaterThanOrEqualToOpENS9_27ElementwiseGreaterThanEqualEEENS2Z_IS3C_NS9_31ElementwiseGreaterThanEqualZeroEEENS2V_INS7_10LessThanOpENS9_19ElementwiseLessThanEEENS2Z_IS3H_NS9_23ElementwiseLessThanZeroEEENS2V_INS7_19LessThanOrEqualToOpENS9_24ElementwiseLessThanEqualEEENS2Z_IS3M_NS9_28ElementwiseLessThanEqualZeroEEENS15_INS7_5NotOpES30_EENS0_11ConvertPoolINS7_9PoolAvgOpENS9_11AveragePoolEEENS3T_INS7_12PoolL2NormOpENS9_10L2NormPoolEEENS3T_INS7_9PoolMaxOpENS9_7MaxPoolEEENS0_14ConvertStencilENS15_INS7_6CeilOpENS9_4CeilEEENS15_INS7_5ErfOpENS9_3ErfEEENS15_INS7_15ExponentBase2OpENS9_4Exp2EEENS15_INS7_7FloorOpENS9_5FloorEEENS15_INS7_6SignOpENS9_4SignEEENS15_INS7_10TruncateOpENS9_5TruncEEENS0_23ConvertReductionA14PlusINS7_14ReductionMaxOpENS9_9ReduceMaxELSB_2EEENS4M_INS7_15ReductionMeanOpENS9_9ReduceAvgELSB_2EEENS4M_INS7_14ReductionMinOpENS9_9ReduceMinELSB_2EEENS4M_INS7_14ReductionSumOpENS9_9ReduceSumELSB_2EEENS0_24ConvertReductionA14MinusIS4N_S4O_LSB_1EEENS4Z_IS4Q_S4R_LSB_1EEENS4Z_IS4T_S4U_LSB_1EEENS4Z_IS4W_S4X_LSB_1EEENS4Z_IS4N_S4O_LSB_0EEENS4Z_IS4Q_S4R_LSB_0EEENS4Z_IS4T_S4U_LSB_0EEENS4Z_IS4W_S4X_LSB_0EEENS0_14ConvertReshapeILSB_0EEENS58_ILSB_1EEENS58_ILSB_2EEENS58_ILSB_3EEENS58_ILSB_4EEENS58_ILSB_5EEENS58_ILSB_6EEENS0_17ConvertExpandDimsILSB_0EEENS5G_ILSB_1EEENS5G_ILSB_2EEENS5G_ILSB_3EEENS5G_ILSB_4EEENS5G_ILSB_5EEENS5G_ILSB_6EEENS0_14ConvertSqueezeILSB_0EEENS5O_ILSB_1EEENS5O_ILSB_2EEENS5O_ILSB_3EEENS5O_ILSB_4EEENS5O_ILSB_5EEENS5O_ILSB_6EEENS0_11ConvertCastENS0_14ConvertSoftmaxENS0_13ConvertConcatENS0_12ConvertSplitENS0_13ConvertResizeILSB_0EEENS60_ILSB_1EEENS60_ILSB_2EEENS60_ILSB_3EEENS60_ILSB_4EEENS60_ILSB_5EEENS60_ILSB_6EEENS0_19ConvertInstanceNormENS0_14ConvertPermuteENS0_15ConvertGatherNDENS0_13ConvertGatherENS0_21ConvertDepthToSpace2DINS9_12PixelShuffleEEENS6C_INS9_14ChannelToSpaceEEENS0_21ConvertSpaceToDepth2DINS9_14PixelUnshuffleEEENS6H_INS9_14SpaceToChannelEEENS0_19ConvertBatchToSpaceINS7_14BatchToSpaceOpENS9_12BatchToSpaceEEENS6M_INS7_14SpaceToBatchOpENS9_12SpaceToBatchEEENS0_16ConvertTransposeILSB_0EEENS6T_ILSB_1EEENS6T_ILSB_2EEENS6T_ILSB_3EEENS6T_ILSB_4EEENS6T_ILSB_5EEENS6T_ILSB_6EEENS0_16ConvertBroadcastILSB_0EEENS71_ILSB_1EEENS71_ILSB_2EEENS71_ILSB_3EEENS71_ILSB_4EEENS71_ILSB_5EEENS71_ILSB_6EEENS0_14ConvertPaddingILSB_0EEENS79_ILSB_1EEENS79_ILSB_2EEENS79_ILSB_3EEENS79_ILSB_4EEENS79_ILSB_5EEENS79_ILSB_6EEENS0_12ConvertSliceILSB_0EEENS7H_ILSB_1EEENS7H_ILSB_2EEENS7H_ILSB_3EEENS7H_ILSB_4EEENS7H_ILSB_5EEENS7H_ILSB_6EEENS0_19ConvertStridedSliceILSB_0EEENS7P_ILSB_1EEENS7P_ILSB_2EEENS7P_ILSB_3EEENS7P_ILSB_4EEENS7P_ILSB_5EEENS7P_ILSB_6EEENS0_11ConvertCropILSB_0EEENS7X_ILSB_1EEENS7X_ILSB_2EEENS7X_ILSB_3EEENS7X_ILSB_4EEENS7X_ILSB_5EEENS7X_ILSB_6EEENS15_INS7_5CosOpENS9_3CosEEENS15_INS7_5SinOpENS9_3SinEEENS0_13FoldOperationINS7_10IdentityOpEEENS0_20ConvertNormalizationENS0_24ConvertReductionVarianceENS0_19ConvertReductionArgINS7_17ReductionArgMinOpELSB_0EEENS8G_IS8H_LSB_1EEENS8G_IS8H_LSB_2EEENS8G_IS8H_LSB_3EEENS8G_IS8H_LSB_4EEENS8G_IS8H_LSB_5EEENS8G_IS8H_LSB_6EEENS8G_INS7_17ReductionArgMaxOpELSB_0EEENS8G_IS8P_LSB_1EEENS8G_IS8P_LSB_2EEENS8G_IS8P_LSB_3EEENS8G_IS8P_LSB_4EEENS8G_IS8P_LSB_5EEENS8G_IS8P_LSB_6EEENS0_14ConvertSignBitENS0_11ConvertTileEEEEvSB_RNS_17RewritePatternSetERNS_13TypeConverterE(a1, a3, a4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A12", 8, a3, v4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A13", 8, a3, v4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A14", 8, a3, v4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A15", 8, a3, v4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A16", 8, a3, v4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A17", 8, a3, v4);
  mlir::populateFunctionOpInterfaceTypeConversionPattern((uint64_t)"anec.A11Legacy", 14, a3, v4);
  v8 = *a3;
  v9 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v9 + 8, (uint64_t)"anec.region_return", 18, (__int16)v595, v8, 0, 0);
  *(_QWORD *)(v9 + 96) = v4;
  *(_QWORD *)v9 = &off_24C0336F8;
  if (!*(_QWORD *)(v9 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::RegionReturnTypeConversion]";
    v596[0] = (void *)105;
    v10 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v10)
      v11 = v10;
    else
      v11 = (char *)v596[0];
    v12 = &v11[(_QWORD)v595];
    v13 = (char *)((char *)v596[0] - (char *)v11);
    if ((void *)((char *)v596[0] - (char *)v11) >= (void *)0x12)
      v14 = 18;
    else
      v14 = (char *)v596[0] - (char *)v11;
    v15 = &v12[v14];
    v16 = (unint64_t)&v13[-v14];
    if (v16 >= v16 - 1)
      --v16;
    *(_QWORD *)(v9 + 64) = v15;
    *(_QWORD *)(v9 + 72) = v16;
  }
  v17 = *(unsigned int *)(v9 + 88);
  if (v17 > *(_DWORD *)(v9 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 80, (void *)(v9 + 96), v17, 16);
    LODWORD(v17) = *(_DWORD *)(v9 + 88);
  }
  *(_DWORD *)(v9 + 88) = v17;
  v19 = (char *)a3[2];
  v18 = a3[3];
  v591 = v4;
  v590 = v7;
  if ((unint64_t)v19 < v18)
  {
    *(_QWORD *)v19 = v9;
    v20 = v19 + 8;
    goto LABEL_41;
  }
  v21 = (char *)a3[1];
  v22 = (v19 - v21) >> 3;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 61)
    goto LABEL_766;
  v24 = v18 - (_QWORD)v21;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      goto LABEL_767;
    v26 = (char *)operator new(8 * v25);
  }
  else
  {
    v26 = 0;
  }
  v27 = (uint64_t *)&v26[8 * v22];
  v28 = &v26[8 * v25];
  *v27 = v9;
  v20 = v27 + 1;
  if (v19 == v21)
  {
    a3[1] = (uint64_t)v27;
    a3[2] = (uint64_t)v20;
    a3[3] = (uint64_t)v28;
    v4 = v591;
    v7 = v590;
    goto LABEL_39;
  }
  v29 = v19 - v21 - 8;
  v4 = v591;
  if (v29 < 0x78
    || &v19[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v27 && &v26[v19 - v21 - (v29 & 0xFFFFFFFFFFFFFFF8) - 8] < v19)
  {
    goto LABEL_770;
  }
  v30 = (v29 >> 3) + 1;
  v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
  v32 = &v19[-v31];
  v27 = (uint64_t *)((char *)v27 - v31);
  v33 = &v26[8 * v22 - 16];
  v34 = v19 - 16;
  v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = *((_OWORD *)v34 - 1);
    v36 = *(_OWORD *)v34;
    *((_OWORD *)v34 - 1) = 0uLL;
    *(_OWORD *)v34 = 0uLL;
    *((_OWORD *)v33 - 1) = v37;
    *(_OWORD *)v33 = v36;
    v33 -= 32;
    v34 -= 32;
    v35 -= 4;
  }
  while (v35);
  v19 = v32;
  if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_770:
    do
    {
      v38 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *(_QWORD *)v19 = 0;
      *--v27 = v38;
    }
    while (v19 != v21);
  }
  v19 = (char *)a3[1];
  v39 = (char *)a3[2];
  a3[1] = (uint64_t)v27;
  a3[2] = (uint64_t)v20;
  a3[3] = (uint64_t)v28;
  if (v39 != v19)
  {
    v7 = v590;
    do
    {
      v41 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      v40 = v41;
      *(_QWORD *)v39 = 0;
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    while (v39 != v19);
LABEL_39:
    if (!v19)
      goto LABEL_41;
    goto LABEL_40;
  }
  v7 = v590;
  if (v19)
LABEL_40:
    operator delete(v19);
LABEL_41:
  a3[2] = (uint64_t)v20;
  v608 = 5;
  LODWORD(v606) = 1;
  strcpy((char *)v607, "slope");
  v42 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v595, 0.0);
  v43 = llvm::APFloatBase::IEEEdouble(v42);
  llvm::APFloat::Storage::Storage(v605, &v595, v43);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v595);
  v44 = (llvm::APFloatBase *)std::pair<llvm::APFloat,std::string>::pair[abi:nn180100]<llvm::APFloat,char const(&)[7],0>((uint64_t)&v595, (uint64_t)&p_p, "offset");
  v588 = v43;
  if (v7 < 0)
    goto LABEL_86;
  v45 = *a3;
  v46 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v592, 1);
  mlir::Pattern::Pattern(v46 + 8, (uint64_t)"mps.leaky_relu", 14, (__int16)v592, v45, 0, 0);
  *(_QWORD *)(v46 + 96) = v4;
  *(_QWORD *)v46 = &off_24C0322D8;
  v592 = (const char *)&v606;
  v594 = v609;
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v46 + 104, (uint64_t *)&v592, (uint64_t *)&v594);
  *(_QWORD *)(v46 + 128) = v46 + 144;
  *(_QWORD *)(v46 + 136) = 0x400000000;
  llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>((unsigned int *)(v46 + 128), (uint64_t)&v595, (uint64_t)v600);
  if (!*(_QWORD *)(v46 + 72))
  {
    v592 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::m"
           "ps::LeakyReluOp, mlir::anec::LeakyRelu>]";
    v593 = 149;
    v44 = (llvm::APFloatBase *)llvm::StringRef::find((uint64_t *)&v592, "DesiredTypeName = ", 0x12uLL, 0);
    if (v593 >= (unint64_t)v44)
      v47 = (unint64_t)v44;
    else
      v47 = v593;
    v48 = &v592[v47];
    v49 = v593 - v47;
    if (v593 - v47 >= 0x12)
      v50 = 18;
    else
      v50 = v593 - v47;
    v51 = &v48[v50];
    v52 = v49 - v50;
    if (v52 >= v52 - 1)
      --v52;
    *(_QWORD *)(v46 + 64) = v51;
    *(_QWORD *)(v46 + 72) = v52;
  }
  v53 = *(unsigned int *)(v46 + 88);
  if (v53 > *(_DWORD *)(v46 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v46 + 80, (void *)(v46 + 96), v53, 16);
    LODWORD(v53) = *(_DWORD *)(v46 + 88);
  }
  *(_DWORD *)(v46 + 88) = v53;
  v55 = (char *)a3[2];
  v54 = a3[3];
  if ((unint64_t)v55 >= v54)
  {
    v57 = (char *)a3[1];
    v58 = (v55 - v57) >> 3;
    v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 61)
      goto LABEL_766;
    v60 = v54 - (_QWORD)v57;
    if (v60 >> 2 > v59)
      v59 = v60 >> 2;
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v59;
    if (v61)
    {
      if (v61 >> 61)
        goto LABEL_767;
      v44 = (llvm::APFloatBase *)operator new(8 * v61);
    }
    else
    {
      v44 = 0;
    }
    v62 = (uint64_t *)((char *)v44 + 8 * v58);
    v63 = (char *)v44 + 8 * v61;
    *v62 = v46;
    v56 = v62 + 1;
    if (v55 == v57)
    {
      a3[1] = (uint64_t)v62;
      a3[2] = (uint64_t)v56;
      a3[3] = (uint64_t)v63;
      v4 = v591;
    }
    else
    {
      v64 = v55 - v57 - 8;
      v4 = v591;
      if (v64 < 0x78
        || &v55[-(v64 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v62
        && (char *)v44 + v55 - v57 - (v64 & 0xFFFFFFFFFFFFFFF8) - 8 < v55)
      {
        goto LABEL_771;
      }
      v65 = (v64 >> 3) + 1;
      v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
      v67 = &v55[-v66];
      v62 = (uint64_t *)((char *)v62 - v66);
      v68 = (_OWORD *)((char *)v44 + 8 * v58 - 16);
      v69 = v55 - 16;
      v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v72 = *((_OWORD *)v69 - 1);
        v71 = *(_OWORD *)v69;
        *((_OWORD *)v69 - 1) = 0uLL;
        *(_OWORD *)v69 = 0uLL;
        *(v68 - 1) = v72;
        *v68 = v71;
        v68 -= 2;
        v69 -= 32;
        v70 -= 4;
      }
      while (v70);
      v55 = v67;
      if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_771:
        do
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *(_QWORD *)v55 = 0;
          *--v62 = v73;
        }
        while (v55 != v57);
      }
      v55 = (char *)a3[1];
      v74 = (char *)a3[2];
      a3[1] = (uint64_t)v62;
      a3[2] = (uint64_t)v56;
      a3[3] = (uint64_t)v63;
      if (v74 != v55)
      {
        v7 = v590;
        do
        {
          v75 = (llvm::APFloatBase *)*((_QWORD *)v74 - 1);
          v74 -= 8;
          v44 = v75;
          *(_QWORD *)v74 = 0;
          if (v75)
            v44 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v44 + 8))(v44);
        }
        while (v74 != v55);
        goto LABEL_83;
      }
    }
    v7 = v590;
LABEL_83:
    if (v55)
      operator delete(v55);
    goto LABEL_85;
  }
  *(_QWORD *)v55 = v46;
  v56 = v55 + 8;
LABEL_85:
  a3[2] = (uint64_t)v56;
LABEL_86:
  if (SHIBYTE(v599[1]) < 0)
    operator delete(__p);
  v76 = v596[0];
  v77 = llvm::APFloatBase::PPCDoubleDouble(v44);
  if (v77 == v76)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v596);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v596);
  if (v77 != (void *)v605[0])
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v605);
    if ((v608 & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_93;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v605);
  if (v608 < 0)
LABEL_93:
    operator delete(v607[0]);
LABEL_94:
  LODWORD(v595) = 1;
  v597 = 9;
  strcpy((char *)v596, "min_value");
  LODWORD(__p) = 2;
  v601 = 9;
  strcpy((char *)v599, "max_value");
  v589 = a2;
  if (v7 < 0)
    goto LABEL_141;
  v78 = *a3;
  v79 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v606, 1);
  mlir::Pattern::Pattern(v79 + 8, (uint64_t)"mps.clamp", 9, (__int16)v606, v78, 0, 0);
  *(_QWORD *)(v79 + 96) = v4;
  *(_QWORD *)v79 = &off_24C0329D8;
  v606 = (const char *)&v595;
  p_p = (const char *)v602;
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v79 + 104, (uint64_t *)&v606, (uint64_t *)&p_p);
  *(_QWORD *)(v79 + 128) = v79 + 144;
  *(_QWORD *)(v79 + 136) = 0x400000000;
  if (!*(_QWORD *)(v79 + 72))
  {
    v606 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::m"
           "ps::ClampOp, mlir::anec::ClampedRelu>]";
    v607[0] = (void *)147;
    v80 = (char *)llvm::StringRef::find((uint64_t *)&v606, "DesiredTypeName = ", 0x12uLL, 0);
    if (v607[0] >= v80)
      v81 = v80;
    else
      v81 = (char *)v607[0];
    v82 = &v81[(_QWORD)v606];
    v83 = (char *)((char *)v607[0] - (char *)v81);
    if ((void *)((char *)v607[0] - (char *)v81) >= (void *)0x12)
      v84 = 18;
    else
      v84 = (char *)v607[0] - (char *)v81;
    v85 = &v82[v84];
    v86 = (unint64_t)&v83[-v84];
    if (v86 >= v86 - 1)
      --v86;
    *(_QWORD *)(v79 + 64) = v85;
    *(_QWORD *)(v79 + 72) = v86;
  }
  v87 = *(unsigned int *)(v79 + 88);
  if (v87 > *(_DWORD *)(v79 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v79 + 80, (void *)(v79 + 96), v87, 16);
    LODWORD(v87) = *(_DWORD *)(v79 + 88);
  }
  *(_DWORD *)(v79 + 88) = v87;
  v89 = (char *)a3[2];
  v88 = a3[3];
  if ((unint64_t)v89 < v88)
  {
    *(_QWORD *)v89 = v79;
    v90 = v89 + 8;
    goto LABEL_140;
  }
  v91 = (char *)a3[1];
  v92 = (v89 - v91) >> 3;
  v93 = v92 + 1;
  if ((unint64_t)(v92 + 1) >> 61)
    goto LABEL_766;
  v94 = v88 - (_QWORD)v91;
  if (v94 >> 2 > v93)
    v93 = v94 >> 2;
  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
    v95 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v95 = v93;
  if (v95)
  {
    if (v95 >> 61)
      goto LABEL_767;
    v96 = (char *)operator new(8 * v95);
  }
  else
  {
    v96 = 0;
  }
  v97 = (uint64_t *)&v96[8 * v92];
  v98 = &v96[8 * v95];
  *v97 = v79;
  v90 = v97 + 1;
  if (v89 == v91)
  {
    a3[1] = (uint64_t)v97;
    a3[2] = (uint64_t)v90;
    a3[3] = (uint64_t)v98;
    a2 = v589;
    goto LABEL_138;
  }
  v99 = v89 - v91 - 8;
  if (v99 < 0x78
    || &v89[-(v99 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v97 && &v96[v89 - v91 - (v99 & 0xFFFFFFFFFFFFFFF8) - 8] < v89)
  {
    goto LABEL_772;
  }
  v100 = (v99 >> 3) + 1;
  v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
  v102 = &v89[-v101];
  v97 = (uint64_t *)((char *)v97 - v101);
  v103 = &v96[8 * v92 - 16];
  v104 = v89 - 16;
  v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v107 = *((_OWORD *)v104 - 1);
    v106 = *(_OWORD *)v104;
    *((_OWORD *)v104 - 1) = 0uLL;
    *(_OWORD *)v104 = 0uLL;
    *((_OWORD *)v103 - 1) = v107;
    *(_OWORD *)v103 = v106;
    v103 -= 32;
    v104 -= 32;
    v105 -= 4;
  }
  while (v105);
  v89 = v102;
  if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_772:
    do
    {
      v108 = *((_QWORD *)v89 - 1);
      v89 -= 8;
      *(_QWORD *)v89 = 0;
      *--v97 = v108;
    }
    while (v89 != v91);
  }
  v89 = (char *)a3[1];
  v109 = (char *)a3[2];
  a3[1] = (uint64_t)v97;
  a3[2] = (uint64_t)v90;
  a3[3] = (uint64_t)v98;
  if (v109 == v89)
  {
    a2 = v589;
    v4 = v591;
LABEL_138:
    v7 = v590;
    if (!v89)
      goto LABEL_140;
    goto LABEL_139;
  }
  a2 = v589;
  v7 = v590;
  do
  {
    v111 = *((_QWORD *)v109 - 1);
    v109 -= 8;
    v110 = v111;
    *(_QWORD *)v109 = 0;
    if (v111)
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  }
  while (v109 != v89);
  v4 = v591;
  if (v89)
LABEL_139:
    operator delete(v89);
LABEL_140:
  a3[2] = (uint64_t)v90;
  if ((v601 & 0x80000000) == 0)
  {
LABEL_141:
    if ((v597 & 0x80000000) == 0)
      goto LABEL_143;
    goto LABEL_142;
  }
  operator delete(v599[0]);
  if (v597 < 0)
LABEL_142:
    operator delete(v596[0]);
LABEL_143:
  LODWORD(v595) = 1;
  v597 = 9;
  strcpy((char *)v596, "max_value");
  v601 = 5;
  LODWORD(__p) = 2;
  strcpy((char *)v599, "slope");
  if (v7 < 0)
    goto LABEL_190;
  v112 = *a3;
  v113 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v606, 1);
  mlir::Pattern::Pattern(v113 + 8, (uint64_t)"mps.n_relu", 10, (__int16)v606, v112, 0, 0);
  *(_QWORD *)(v113 + 96) = v4;
  *(_QWORD *)v113 = &off_24C032B28;
  v606 = (const char *)&v595;
  p_p = (const char *)v602;
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v113 + 104, (uint64_t *)&v606, (uint64_t *)&p_p);
  *(_QWORD *)(v113 + 128) = v113 + 144;
  *(_QWORD *)(v113 + 136) = 0x400000000;
  if (!*(_QWORD *)(v113 + 72))
  {
    v606 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::m"
           "ps::NReluOp, mlir::anec::NRelu>]";
    v607[0] = (void *)141;
    v114 = (char *)llvm::StringRef::find((uint64_t *)&v606, "DesiredTypeName = ", 0x12uLL, 0);
    if (v607[0] >= v114)
      v115 = v114;
    else
      v115 = (char *)v607[0];
    v116 = &v115[(_QWORD)v606];
    v117 = (char *)((char *)v607[0] - (char *)v115);
    if ((void *)((char *)v607[0] - (char *)v115) >= (void *)0x12)
      v118 = 18;
    else
      v118 = (char *)v607[0] - (char *)v115;
    v119 = &v116[v118];
    v120 = (unint64_t)&v117[-v118];
    if (v120 >= v120 - 1)
      --v120;
    *(_QWORD *)(v113 + 64) = v119;
    *(_QWORD *)(v113 + 72) = v120;
  }
  v121 = *(unsigned int *)(v113 + 88);
  if (v121 > *(_DWORD *)(v113 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v113 + 80, (void *)(v113 + 96), v121, 16);
    LODWORD(v121) = *(_DWORD *)(v113 + 88);
  }
  *(_DWORD *)(v113 + 88) = v121;
  v123 = (char *)a3[2];
  v122 = a3[3];
  if ((unint64_t)v123 < v122)
  {
    *(_QWORD *)v123 = v113;
    v124 = v123 + 8;
    goto LABEL_189;
  }
  v125 = (char *)a3[1];
  v126 = (v123 - v125) >> 3;
  v127 = v126 + 1;
  if ((unint64_t)(v126 + 1) >> 61)
    goto LABEL_766;
  v128 = v122 - (_QWORD)v125;
  if (v128 >> 2 > v127)
    v127 = v128 >> 2;
  if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
    v129 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v129 = v127;
  if (v129)
  {
    if (v129 >> 61)
      goto LABEL_767;
    v130 = (char *)operator new(8 * v129);
  }
  else
  {
    v130 = 0;
  }
  v131 = (uint64_t *)&v130[8 * v126];
  v132 = &v130[8 * v129];
  *v131 = v113;
  v124 = v131 + 1;
  if (v123 == v125)
  {
    a3[1] = (uint64_t)v131;
    a3[2] = (uint64_t)v124;
    a3[3] = (uint64_t)v132;
    goto LABEL_187;
  }
  v133 = v123 - v125 - 8;
  if (v133 < 0x78
    || &v123[-(v133 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v131
    && &v130[v123 - v125 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v123)
  {
    goto LABEL_773;
  }
  v134 = (v133 >> 3) + 1;
  v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
  v136 = &v123[-v135];
  v131 = (uint64_t *)((char *)v131 - v135);
  v137 = &v130[8 * v126 - 16];
  v138 = v123 - 16;
  v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v141 = *((_OWORD *)v138 - 1);
    v140 = *(_OWORD *)v138;
    *((_OWORD *)v138 - 1) = 0uLL;
    *(_OWORD *)v138 = 0uLL;
    *((_OWORD *)v137 - 1) = v141;
    *(_OWORD *)v137 = v140;
    v137 -= 32;
    v138 -= 32;
    v139 -= 4;
  }
  while (v139);
  v123 = v136;
  if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_773:
    do
    {
      v142 = *((_QWORD *)v123 - 1);
      v123 -= 8;
      *(_QWORD *)v123 = 0;
      *--v131 = v142;
    }
    while (v123 != v125);
  }
  v123 = (char *)a3[1];
  v143 = (char *)a3[2];
  a3[1] = (uint64_t)v131;
  a3[2] = (uint64_t)v124;
  a3[3] = (uint64_t)v132;
  if (v143 == v123)
  {
    v4 = v591;
LABEL_187:
    v7 = v590;
    if (!v123)
      goto LABEL_189;
    goto LABEL_188;
  }
  v7 = v590;
  do
  {
    v145 = *((_QWORD *)v143 - 1);
    v143 -= 8;
    v144 = v145;
    *(_QWORD *)v143 = 0;
    if (v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  }
  while (v143 != v123);
  v4 = v591;
  if (v123)
LABEL_188:
    operator delete(v123);
LABEL_189:
  a3[2] = (uint64_t)v124;
  if ((v601 & 0x80000000) == 0)
  {
LABEL_190:
    if ((v597 & 0x80000000) == 0)
      goto LABEL_192;
    goto LABEL_191;
  }
  operator delete(v599[0]);
  if (v597 < 0)
LABEL_191:
    operator delete(v596[0]);
LABEL_192:
  v146 = *a3;
  v608 = 5;
  LODWORD(v606) = 1;
  strcpy((char *)v607, "slope");
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v595, 0.0);
  llvm::APFloat::Storage::Storage(v605, &v595, v43);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v595);
  std::pair<llvm::APFloat,std::string>::pair[abi:nn180100]<llvm::APFloat,char const(&)[7],0>((uint64_t)&v595, (uint64_t)&p_p, "offset");
  v147 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v592, 1);
  mlir::Pattern::Pattern(v147 + 8, (uint64_t)"mps.prelu", 9, (__int16)v592, v146, 0, 0);
  *(_QWORD *)(v147 + 96) = v4;
  *(_QWORD *)v147 = &off_24C032B98;
  v592 = (const char *)&v606;
  v594 = v609;
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v147 + 104, (uint64_t *)&v592, (uint64_t *)&v594);
  *(_QWORD *)(v147 + 128) = v147 + 144;
  *(_QWORD *)(v147 + 136) = 0x400000000;
  llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>((unsigned int *)(v147 + 128), (uint64_t)&v595, (uint64_t)v600);
  if (!*(_QWORD *)(v147 + 72))
  {
    v592 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::m"
           "ps::PReluOp, mlir::anec::LeakyRelu>]";
    v593 = 145;
    v148 = llvm::StringRef::find((uint64_t *)&v592, "DesiredTypeName = ", 0x12uLL, 0);
    if (v593 >= v148)
      v149 = v148;
    else
      v149 = v593;
    v150 = &v592[v149];
    v151 = v593 - v149;
    if (v593 - v149 >= 0x12)
      v152 = 18;
    else
      v152 = v593 - v149;
    v153 = &v150[v152];
    v154 = v151 - v152;
    if (v154 >= v154 - 1)
      --v154;
    *(_QWORD *)(v147 + 64) = v153;
    *(_QWORD *)(v147 + 72) = v154;
  }
  v155 = *(unsigned int *)(v147 + 88);
  if (v155 > *(_DWORD *)(v147 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v147 + 80, (void *)(v147 + 96), v155, 16);
    LODWORD(v155) = *(_DWORD *)(v147 + 88);
  }
  *(_DWORD *)(v147 + 88) = v155;
  v157 = (char *)a3[2];
  v156 = a3[3];
  if ((unint64_t)v157 < v156)
  {
    *(_QWORD *)v157 = v147;
    v158 = v157 + 8;
    goto LABEL_237;
  }
  v159 = (char *)a3[1];
  v160 = (v157 - v159) >> 3;
  v161 = v160 + 1;
  if ((unint64_t)(v160 + 1) >> 61)
    goto LABEL_766;
  v162 = v156 - (_QWORD)v159;
  if (v162 >> 2 > v161)
    v161 = v162 >> 2;
  if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
    v163 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v163 = v161;
  if (v163)
  {
    if (v163 >> 61)
      goto LABEL_767;
    v164 = (char *)operator new(8 * v163);
  }
  else
  {
    v164 = 0;
  }
  v165 = (uint64_t *)&v164[8 * v160];
  v166 = &v164[8 * v163];
  *v165 = v147;
  v158 = v165 + 1;
  if (v157 == v159)
  {
    a3[1] = (uint64_t)v165;
    a3[2] = (uint64_t)v158;
    a3[3] = (uint64_t)v166;
    a2 = v589;
    goto LABEL_235;
  }
  v167 = v157 - v159 - 8;
  if (v167 < 0x78
    || &v157[-(v167 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v165
    && &v164[v157 - v159 - (v167 & 0xFFFFFFFFFFFFFFF8) - 8] < v157)
  {
    goto LABEL_774;
  }
  v168 = (v167 >> 3) + 1;
  v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
  v170 = &v157[-v169];
  v165 = (uint64_t *)((char *)v165 - v169);
  v171 = &v164[8 * v160 - 16];
  v172 = v157 - 16;
  v173 = v168 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v175 = *((_OWORD *)v172 - 1);
    v174 = *(_OWORD *)v172;
    *((_OWORD *)v172 - 1) = 0uLL;
    *(_OWORD *)v172 = 0uLL;
    *((_OWORD *)v171 - 1) = v175;
    *(_OWORD *)v171 = v174;
    v171 -= 32;
    v172 -= 32;
    v173 -= 4;
  }
  while (v173);
  v157 = v170;
  if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_774:
    do
    {
      v176 = *((_QWORD *)v157 - 1);
      v157 -= 8;
      *(_QWORD *)v157 = 0;
      *--v165 = v176;
    }
    while (v157 != v159);
  }
  v157 = (char *)a3[1];
  v177 = (char *)a3[2];
  a3[1] = (uint64_t)v165;
  a3[2] = (uint64_t)v158;
  a3[3] = (uint64_t)v166;
  if (v177 == v157)
  {
    a2 = v589;
    v4 = v591;
LABEL_235:
    v7 = v590;
    if (!v157)
      goto LABEL_237;
    goto LABEL_236;
  }
  a2 = v589;
  v7 = v590;
  do
  {
    v179 = *((_QWORD *)v177 - 1);
    v177 -= 8;
    v178 = v179;
    *(_QWORD *)v177 = 0;
    if (v179)
      (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  }
  while (v177 != v157);
  v4 = v591;
  if (v157)
LABEL_236:
    operator delete(v157);
LABEL_237:
  a3[2] = (uint64_t)v158;
  if (SHIBYTE(v599[1]) < 0)
    operator delete(__p);
  if (v77 == v596[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v596);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v596);
  if (v77 != (void *)v605[0])
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v605);
    if ((v608 & 0x80000000) == 0)
      goto LABEL_245;
    goto LABEL_244;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v605);
  if (v608 < 0)
LABEL_244:
    operator delete(v607[0]);
LABEL_245:
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v595, 6.0);
  llvm::APFloat::Storage::Storage(v607, &v595, v43);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v595);
  std::pair<llvm::APFloat,std::string>::pair[abi:nn180100]<llvm::APFloat,char const(&)[7],0>((uint64_t)&v595, (uint64_t)&v606, "max_value");
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v592, 0.0);
  llvm::APFloat::Storage::Storage(v605, &v592, v43);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v592);
  std::pair<llvm::APFloat,std::string>::pair[abi:nn180100]<llvm::APFloat,char const(&)[7],0>((uint64_t)v600, (uint64_t)&p_p, "slope");
  if (v7 < 0)
    goto LABEL_290;
  v180 = *a3;
  v181 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v592, 1);
  mlir::Pattern::Pattern(v181 + 8, (uint64_t)"mps.relu6", 9, (__int16)v592, v180, 0, 0);
  *(_QWORD *)(v181 + 96) = v4;
  *(_QWORD *)v181 = &off_24C032C08;
  v592 = 0;
  v594 = 0;
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v181 + 104, (uint64_t *)&v592, (uint64_t *)&v594);
  *(_QWORD *)(v181 + 128) = v181 + 144;
  *(_QWORD *)(v181 + 136) = 0x400000000;
  llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>((unsigned int *)(v181 + 128), (uint64_t)&v595, (uint64_t)&p_p);
  if (!*(_QWORD *)(v181 + 72))
  {
    v592 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::m"
           "ps::Relu6Op, mlir::anec::NRelu>]";
    v593 = 141;
    v182 = llvm::StringRef::find((uint64_t *)&v592, "DesiredTypeName = ", 0x12uLL, 0);
    if (v593 >= v182)
      v183 = v182;
    else
      v183 = v593;
    v184 = &v592[v183];
    v185 = v593 - v183;
    if (v593 - v183 >= 0x12)
      v186 = 18;
    else
      v186 = v593 - v183;
    v187 = &v184[v186];
    v188 = v185 - v186;
    if (v188 >= v188 - 1)
      --v188;
    *(_QWORD *)(v181 + 64) = v187;
    *(_QWORD *)(v181 + 72) = v188;
  }
  v189 = *(unsigned int *)(v181 + 88);
  if (v189 > *(_DWORD *)(v181 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v181 + 80, (void *)(v181 + 96), v189, 16);
    LODWORD(v189) = *(_DWORD *)(v181 + 88);
  }
  *(_DWORD *)(v181 + 88) = v189;
  v191 = (char *)a3[2];
  v190 = a3[3];
  if ((unint64_t)v191 >= v190)
  {
    v193 = (char *)a3[1];
    v194 = (v191 - v193) >> 3;
    v195 = v194 + 1;
    if ((unint64_t)(v194 + 1) >> 61)
      goto LABEL_766;
    v196 = v190 - (_QWORD)v193;
    if (v196 >> 2 > v195)
      v195 = v196 >> 2;
    if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
      v197 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v197 = v195;
    if (v197)
    {
      if (v197 >> 61)
        goto LABEL_767;
      v198 = (char *)operator new(8 * v197);
    }
    else
    {
      v198 = 0;
    }
    v199 = (uint64_t *)&v198[8 * v194];
    v200 = &v198[8 * v197];
    *v199 = v181;
    v192 = v199 + 1;
    if (v191 == v193)
    {
      a3[1] = (uint64_t)v199;
      a3[2] = (uint64_t)v192;
      a3[3] = (uint64_t)v200;
      a2 = v589;
    }
    else
    {
      v201 = v191 - v193 - 8;
      a2 = v589;
      if (v201 < 0x78
        || &v191[-(v201 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v199
        && &v198[v191 - v193 - (v201 & 0xFFFFFFFFFFFFFFF8) - 8] < v191)
      {
        goto LABEL_775;
      }
      v202 = (v201 >> 3) + 1;
      v203 = 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
      v204 = &v191[-v203];
      v199 = (uint64_t *)((char *)v199 - v203);
      v205 = &v198[8 * v194 - 16];
      v206 = v191 - 16;
      v207 = v202 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v209 = *((_OWORD *)v206 - 1);
        v208 = *(_OWORD *)v206;
        *((_OWORD *)v206 - 1) = 0uLL;
        *(_OWORD *)v206 = 0uLL;
        *((_OWORD *)v205 - 1) = v209;
        *(_OWORD *)v205 = v208;
        v205 -= 32;
        v206 -= 32;
        v207 -= 4;
      }
      while (v207);
      v191 = v204;
      if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_775:
        do
        {
          v210 = *((_QWORD *)v191 - 1);
          v191 -= 8;
          *(_QWORD *)v191 = 0;
          *--v199 = v210;
        }
        while (v191 != v193);
      }
      v191 = (char *)a3[1];
      v211 = (char *)a3[2];
      a3[1] = (uint64_t)v199;
      a3[2] = (uint64_t)v192;
      a3[3] = (uint64_t)v200;
      if (v211 != v191)
      {
        v7 = v590;
        v43 = v588;
        do
        {
          v213 = *((_QWORD *)v211 - 1);
          v211 -= 8;
          v212 = v213;
          *(_QWORD *)v211 = 0;
          if (v213)
            (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
        }
        while (v211 != v191);
        goto LABEL_287;
      }
    }
    v7 = v590;
    v43 = v588;
LABEL_287:
    v4 = v591;
    if (v191)
      operator delete(v191);
    goto LABEL_289;
  }
  *(_QWORD *)v191 = v181;
  v192 = v191 + 8;
  a2 = v589;
LABEL_289:
  a3[2] = (uint64_t)v192;
LABEL_290:
  if (v603 < 0)
    operator delete((void *)v602[3]);
  if (v77 != (void *)v602[0])
  {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v602);
    if ((SHIBYTE(v599[1]) & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v602);
  if (SHIBYTE(v599[1]) < 0)
LABEL_294:
    operator delete(__p);
LABEL_295:
  if (v77 == v596[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v596);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v596);
  if (v77 == (void *)v605[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v605);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v605);
  if (v77 == v607[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v607);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v607);
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v595, 0.0);
  llvm::APFloat::Storage::Storage(v607, &v595, v43);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v595);
  std::pair<llvm::APFloat,std::string>::pair[abi:nn180100]<llvm::APFloat,char const(&)[7],0>((uint64_t)&v595, (uint64_t)&v606, "epsilon");
  if ((v7 & 0x80000000) == 0)
  {
    v214 = *a3;
    v215 = operator new();
    mlir::PatternBenefit::PatternBenefit(&p_p, 1);
    mlir::Pattern::Pattern(v215 + 8, (uint64_t)"mps.reciprocal", 14, (__int16)p_p, v214, 0, 0);
    *(_QWORD *)(v215 + 96) = v4;
    *(_QWORD *)v215 = &off_24C032348;
    p_p = 0;
    v592 = 0;
    llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v215 + 104, (uint64_t *)&p_p, (uint64_t *)&v592);
    *(_QWORD *)(v215 + 128) = v215 + 144;
    *(_QWORD *)(v215 + 136) = 0x400000000;
    llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>((unsigned int *)(v215 + 128), (uint64_t)&v595, (uint64_t)v600);
    if (!*(_QWORD *)(v215 + 72))
    {
      p_p = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::"
            "mps::ReciprocalOp, mlir::anec::Invert>]";
      v605[0] = 147;
      v216 = llvm::StringRef::find((uint64_t *)&p_p, "DesiredTypeName = ", 0x12uLL, 0);
      if (v605[0] >= v216)
        v217 = v216;
      else
        v217 = v605[0];
      v218 = &p_p[v217];
      v219 = v605[0] - v217;
      if (v605[0] - v217 >= 0x12)
        v220 = 18;
      else
        v220 = v605[0] - v217;
      v221 = &v218[v220];
      v222 = v219 - v220;
      if (v222 >= v222 - 1)
        --v222;
      *(_QWORD *)(v215 + 64) = v221;
      *(_QWORD *)(v215 + 72) = v222;
    }
    v223 = *(unsigned int *)(v215 + 88);
    if (v223 > *(_DWORD *)(v215 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v215 + 80, (void *)(v215 + 96), v223, 16);
      LODWORD(v223) = *(_DWORD *)(v215 + 88);
    }
    *(_DWORD *)(v215 + 88) = v223;
    v225 = (char *)a3[2];
    v224 = a3[3];
    if ((unint64_t)v225 < v224)
    {
      *(_QWORD *)v225 = v215;
      v226 = v225 + 8;
      goto LABEL_348;
    }
    v227 = (char *)a3[1];
    v228 = (v225 - v227) >> 3;
    v229 = v228 + 1;
    if ((unint64_t)(v228 + 1) >> 61)
      goto LABEL_766;
    v230 = v224 - (_QWORD)v227;
    if (v230 >> 2 > v229)
      v229 = v230 >> 2;
    if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8)
      v231 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v231 = v229;
    if (v231)
    {
      if (v231 >> 61)
        goto LABEL_767;
      v232 = (char *)operator new(8 * v231);
    }
    else
    {
      v232 = 0;
    }
    v233 = (uint64_t *)&v232[8 * v228];
    v234 = &v232[8 * v231];
    *v233 = v215;
    v226 = v233 + 1;
    if (v225 == v227)
    {
      a3[1] = (uint64_t)v233;
      a3[2] = (uint64_t)v226;
      a3[3] = (uint64_t)v234;
    }
    else
    {
      v235 = v225 - v227 - 8;
      if (v235 < 0x78
        || &v225[-(v235 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v233
        && &v232[v225 - v227 - (v235 & 0xFFFFFFFFFFFFFFF8) - 8] < v225)
      {
        goto LABEL_776;
      }
      v236 = (v235 >> 3) + 1;
      v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
      v238 = &v225[-v237];
      v233 = (uint64_t *)((char *)v233 - v237);
      v239 = &v232[8 * v228 - 16];
      v240 = v225 - 16;
      v241 = v236 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v243 = *((_OWORD *)v240 - 1);
        v242 = *(_OWORD *)v240;
        *((_OWORD *)v240 - 1) = 0uLL;
        *(_OWORD *)v240 = 0uLL;
        *((_OWORD *)v239 - 1) = v243;
        *(_OWORD *)v239 = v242;
        v239 -= 32;
        v240 -= 32;
        v241 -= 4;
      }
      while (v241);
      v225 = v238;
      if (v236 != (v236 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_776:
        do
        {
          v244 = *((_QWORD *)v225 - 1);
          v225 -= 8;
          *(_QWORD *)v225 = 0;
          *--v233 = v244;
        }
        while (v225 != v227);
      }
      v225 = (char *)a3[1];
      v245 = (char *)a3[2];
      a3[1] = (uint64_t)v233;
      a3[2] = (uint64_t)v226;
      a3[3] = (uint64_t)v234;
      if (v245 != v225)
      {
        a2 = v589;
        v7 = v590;
        do
        {
          v247 = *((_QWORD *)v245 - 1);
          v245 -= 8;
          v246 = v247;
          *(_QWORD *)v245 = 0;
          if (v247)
            (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
        }
        while (v245 != v225);
        goto LABEL_346;
      }
    }
    a2 = v589;
    v7 = v590;
LABEL_346:
    v4 = v591;
    if (v225)
      operator delete(v225);
LABEL_348:
    a3[2] = (uint64_t)v226;
    if (v7 < 2)
      goto LABEL_431;
    v248 = *a3;
    v249 = operator new();
    mlir::PatternBenefit::PatternBenefit(&p_p, 1);
    mlir::Pattern::Pattern(v249 + 8, (uint64_t)"mps.reverse_square_root", 23, (__int16)p_p, v248, 0, 0);
    *(_QWORD *)(v249 + 96) = v4;
    *(_QWORD *)v249 = &off_24C032508;
    p_p = 0;
    v592 = 0;
    llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v249 + 104, (uint64_t *)&p_p, (uint64_t *)&v592);
    *(_QWORD *)(v249 + 128) = v249 + 144;
    *(_QWORD *)(v249 + 136) = 0x400000000;
    llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>((unsigned int *)(v249 + 128), (uint64_t)&v595, (uint64_t)v600);
    if (!*(_QWORD *)(v249 + 72))
    {
      p_p = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::"
            "mps::ReverseSquareRootOp, mlir::anec::Rsqrt>]";
      v605[0] = 153;
      v250 = llvm::StringRef::find((uint64_t *)&p_p, "DesiredTypeName = ", 0x12uLL, 0);
      if (v605[0] >= v250)
        v251 = v250;
      else
        v251 = v605[0];
      v252 = &p_p[v251];
      v253 = v605[0] - v251;
      if (v605[0] - v251 >= 0x12)
        v254 = 18;
      else
        v254 = v605[0] - v251;
      v255 = &v252[v254];
      v256 = v253 - v254;
      if (v256 >= v256 - 1)
        --v256;
      *(_QWORD *)(v249 + 64) = v255;
      *(_QWORD *)(v249 + 72) = v256;
    }
    v257 = *(unsigned int *)(v249 + 88);
    if (v257 > *(_DWORD *)(v249 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v249 + 80, (void *)(v249 + 96), v257, 16);
      LODWORD(v257) = *(_DWORD *)(v249 + 88);
    }
    *(_DWORD *)(v249 + 88) = v257;
    v259 = (char *)a3[2];
    v258 = a3[3];
    if ((unint64_t)v259 < v258)
    {
      *(_QWORD *)v259 = v249;
      v260 = v259 + 8;
      goto LABEL_390;
    }
    v261 = (char *)a3[1];
    v262 = (v259 - v261) >> 3;
    v263 = v262 + 1;
    if ((unint64_t)(v262 + 1) >> 61)
      goto LABEL_766;
    v264 = v258 - (_QWORD)v261;
    if (v264 >> 2 > v263)
      v263 = v264 >> 2;
    if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8)
      v265 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v265 = v263;
    if (v265)
    {
      if (v265 >> 61)
        goto LABEL_767;
      v266 = (char *)operator new(8 * v265);
    }
    else
    {
      v266 = 0;
    }
    v267 = (uint64_t *)&v266[8 * v262];
    v268 = &v266[8 * v265];
    *v267 = v249;
    v260 = v267 + 1;
    if (v259 == v261)
    {
      a3[1] = (uint64_t)v267;
      a3[2] = (uint64_t)v260;
      a3[3] = (uint64_t)v268;
    }
    else
    {
      v269 = v259 - v261 - 8;
      if (v269 < 0x78
        || &v259[-(v269 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v267
        && &v266[v259 - v261 - (v269 & 0xFFFFFFFFFFFFFFF8) - 8] < v259)
      {
        goto LABEL_777;
      }
      v270 = (v269 >> 3) + 1;
      v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
      v272 = &v259[-v271];
      v267 = (uint64_t *)((char *)v267 - v271);
      v273 = &v266[8 * v262 - 16];
      v274 = v259 - 16;
      v275 = v270 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v277 = *((_OWORD *)v274 - 1);
        v276 = *(_OWORD *)v274;
        *((_OWORD *)v274 - 1) = 0uLL;
        *(_OWORD *)v274 = 0uLL;
        *((_OWORD *)v273 - 1) = v277;
        *(_OWORD *)v273 = v276;
        v273 -= 32;
        v274 -= 32;
        v275 -= 4;
      }
      while (v275);
      v259 = v272;
      if (v270 != (v270 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_777:
        do
        {
          v278 = *((_QWORD *)v259 - 1);
          v259 -= 8;
          *(_QWORD *)v259 = 0;
          *--v267 = v278;
        }
        while (v259 != v261);
      }
      v259 = (char *)a3[1];
      v279 = (char *)a3[2];
      a3[1] = (uint64_t)v267;
      a3[2] = (uint64_t)v260;
      a3[3] = (uint64_t)v268;
      if (v279 != v259)
      {
        a2 = v589;
        v7 = v590;
        do
        {
          v281 = *((_QWORD *)v279 - 1);
          v279 -= 8;
          v280 = v281;
          *(_QWORD *)v279 = 0;
          if (v281)
            (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
        }
        while (v279 != v259);
        goto LABEL_388;
      }
    }
    a2 = v589;
    v7 = v590;
LABEL_388:
    v4 = v591;
    if (v259)
      operator delete(v259);
LABEL_390:
    a3[2] = (uint64_t)v260;
    v282 = *a3;
    v283 = operator new();
    mlir::PatternBenefit::PatternBenefit(&p_p, 1);
    mlir::Pattern::Pattern(v283 + 8, (uint64_t)"mps.logarithm_base_2", 20, (__int16)p_p, v282, 0, 0);
    *(_QWORD *)(v283 + 96) = v4;
    *(_QWORD *)v283 = &off_24C032498;
    p_p = 0;
    v592 = 0;
    llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v283 + 104, (uint64_t *)&p_p, (uint64_t *)&v592);
    *(_QWORD *)(v283 + 128) = v283 + 144;
    *(_QWORD *)(v283 + 136) = 0x400000000;
    llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>((unsigned int *)(v283 + 128), (uint64_t)&v595, (uint64_t)v600);
    if (!*(_QWORD *)(v283 + 72))
    {
      p_p = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::"
            "mps::LogarithmBase2Op, mlir::anec::Log2>]";
      v605[0] = 149;
      v284 = llvm::StringRef::find((uint64_t *)&p_p, "DesiredTypeName = ", 0x12uLL, 0);
      if (v605[0] >= v284)
        v285 = v284;
      else
        v285 = v605[0];
      v286 = &p_p[v285];
      v287 = v605[0] - v285;
      if (v605[0] - v285 >= 0x12)
        v288 = 18;
      else
        v288 = v605[0] - v285;
      v289 = &v286[v288];
      v290 = v287 - v288;
      if (v290 >= v290 - 1)
        --v290;
      *(_QWORD *)(v283 + 64) = v289;
      *(_QWORD *)(v283 + 72) = v290;
    }
    v291 = *(unsigned int *)(v283 + 88);
    if (v291 > *(_DWORD *)(v283 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v283 + 80, (void *)(v283 + 96), v291, 16);
      LODWORD(v291) = *(_DWORD *)(v283 + 88);
    }
    *(_DWORD *)(v283 + 88) = v291;
    v293 = (char *)a3[2];
    v292 = a3[3];
    if ((unint64_t)v293 < v292)
    {
      *(_QWORD *)v293 = v283;
      v294 = v293 + 8;
LABEL_430:
      a3[2] = (uint64_t)v294;
      goto LABEL_431;
    }
    v295 = (char *)a3[1];
    v296 = (v293 - v295) >> 3;
    v297 = v296 + 1;
    if ((unint64_t)(v296 + 1) >> 61)
      goto LABEL_766;
    v298 = v292 - (_QWORD)v295;
    if (v298 >> 2 > v297)
      v297 = v298 >> 2;
    if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8)
      v299 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v299 = v297;
    if (v299)
    {
      if (v299 >> 61)
        goto LABEL_767;
      v300 = (char *)operator new(8 * v299);
    }
    else
    {
      v300 = 0;
    }
    v301 = (uint64_t *)&v300[8 * v296];
    v302 = &v300[8 * v299];
    *v301 = v283;
    v294 = v301 + 1;
    if (v293 == v295)
    {
      a3[1] = (uint64_t)v301;
      a3[2] = (uint64_t)v294;
      a3[3] = (uint64_t)v302;
      v7 = v590;
    }
    else
    {
      v303 = v293 - v295 - 8;
      if (v303 < 0x78
        || &v293[-(v303 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v301
        && &v300[v293 - v295 - (v303 & 0xFFFFFFFFFFFFFFF8) - 8] < v293)
      {
        goto LABEL_778;
      }
      v304 = (v303 >> 3) + 1;
      v305 = 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
      v306 = &v293[-v305];
      v301 = (uint64_t *)((char *)v301 - v305);
      v307 = &v300[8 * v296 - 16];
      v308 = v293 - 16;
      v309 = v304 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v311 = *((_OWORD *)v308 - 1);
        v310 = *(_OWORD *)v308;
        *((_OWORD *)v308 - 1) = 0uLL;
        *(_OWORD *)v308 = 0uLL;
        *((_OWORD *)v307 - 1) = v311;
        *(_OWORD *)v307 = v310;
        v307 -= 32;
        v308 -= 32;
        v309 -= 4;
      }
      while (v309);
      v293 = v306;
      if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_778:
        do
        {
          v312 = *((_QWORD *)v293 - 1);
          v293 -= 8;
          *(_QWORD *)v293 = 0;
          *--v301 = v312;
        }
        while (v293 != v295);
      }
      v293 = (char *)a3[1];
      v313 = (char *)a3[2];
      a3[1] = (uint64_t)v301;
      a3[2] = (uint64_t)v294;
      a3[3] = (uint64_t)v302;
      if (v313 == v293)
      {
        v7 = v590;
        v4 = v591;
        if (!v293)
          goto LABEL_430;
        goto LABEL_429;
      }
      v7 = v590;
      do
      {
        v315 = *((_QWORD *)v313 - 1);
        v313 -= 8;
        v314 = v315;
        *(_QWORD *)v313 = 0;
        if (v315)
          (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
      }
      while (v313 != v293);
    }
    v4 = v591;
    if (!v293)
      goto LABEL_430;
LABEL_429:
    operator delete(v293);
    goto LABEL_430;
  }
LABEL_431:
  if (SHIBYTE(v599[1]) < 0)
    operator delete(__p);
  if (v77 == v596[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v596);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v596);
  if (v77 == v607[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v607);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v607);
  v597 = 5;
  LODWORD(v595) = 1;
  strcpy((char *)v596, "alpha");
  if (v7 < 2)
    goto LABEL_481;
  v316 = *a3;
  v317 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v606, 1);
  mlir::Pattern::Pattern(v317 + 8, (uint64_t)"mps.elu", 7, (__int16)v606, v316, 0, 0);
  *(_QWORD *)(v317 + 96) = v4;
  *(_QWORD *)v317 = &off_24C0325E8;
  v606 = (const char *)&v595;
  p_p = (const char *)&__p;
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(v317 + 104, (uint64_t *)&v606, (uint64_t *)&p_p);
  *(_QWORD *)(v317 + 128) = v317 + 144;
  *(_QWORD *)(v317 + 136) = 0x400000000;
  if (!*(_QWORD *)(v317 + 72))
  {
    v606 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertElementwiseUnary<mlir::m"
           "ps::EluOp, mlir::anec::Elu>]";
    v607[0] = (void *)137;
    v318 = (char *)llvm::StringRef::find((uint64_t *)&v606, "DesiredTypeName = ", 0x12uLL, 0);
    if (v607[0] >= v318)
      v319 = v318;
    else
      v319 = (char *)v607[0];
    v320 = &v319[(_QWORD)v606];
    v321 = (char *)((char *)v607[0] - (char *)v319);
    if ((void *)((char *)v607[0] - (char *)v319) >= (void *)0x12)
      v322 = 18;
    else
      v322 = (char *)v607[0] - (char *)v319;
    v323 = &v320[v322];
    v324 = (unint64_t)&v321[-v322];
    if (v324 >= v324 - 1)
      --v324;
    *(_QWORD *)(v317 + 64) = v323;
    *(_QWORD *)(v317 + 72) = v324;
  }
  v325 = *(unsigned int *)(v317 + 88);
  if (v325 > *(_DWORD *)(v317 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v317 + 80, (void *)(v317 + 96), v325, 16);
    LODWORD(v325) = *(_DWORD *)(v317 + 88);
  }
  *(_DWORD *)(v317 + 88) = v325;
  v327 = (char *)a3[2];
  v326 = a3[3];
  if ((unint64_t)v327 < v326)
  {
    *(_QWORD *)v327 = v317;
    v328 = v327 + 8;
    goto LABEL_480;
  }
  v329 = (char *)a3[1];
  v330 = (v327 - v329) >> 3;
  v331 = v330 + 1;
  if ((unint64_t)(v330 + 1) >> 61)
    goto LABEL_766;
  v332 = v326 - (_QWORD)v329;
  if (v332 >> 2 > v331)
    v331 = v332 >> 2;
  if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8)
    v333 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v333 = v331;
  if (v333)
  {
    if (v333 >> 61)
      goto LABEL_767;
    v334 = (char *)operator new(8 * v333);
  }
  else
  {
    v334 = 0;
  }
  v335 = (uint64_t *)&v334[8 * v330];
  v336 = &v334[8 * v333];
  *v335 = v317;
  v328 = v335 + 1;
  if (v327 == v329)
  {
    a3[1] = (uint64_t)v335;
    a3[2] = (uint64_t)v328;
    a3[3] = (uint64_t)v336;
    v7 = v590;
    goto LABEL_478;
  }
  v337 = v327 - v329 - 8;
  if (v337 < 0x78
    || &v327[-(v337 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v335
    && &v334[v327 - v329 - (v337 & 0xFFFFFFFFFFFFFFF8) - 8] < v327)
  {
    goto LABEL_779;
  }
  v338 = (v337 >> 3) + 1;
  v339 = 8 * (v338 & 0x3FFFFFFFFFFFFFFCLL);
  v340 = &v327[-v339];
  v335 = (uint64_t *)((char *)v335 - v339);
  v341 = &v334[8 * v330 - 16];
  v342 = v327 - 16;
  v343 = v338 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v345 = *((_OWORD *)v342 - 1);
    v344 = *(_OWORD *)v342;
    *((_OWORD *)v342 - 1) = 0uLL;
    *(_OWORD *)v342 = 0uLL;
    *((_OWORD *)v341 - 1) = v345;
    *(_OWORD *)v341 = v344;
    v341 -= 32;
    v342 -= 32;
    v343 -= 4;
  }
  while (v343);
  v327 = v340;
  if (v338 != (v338 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_779:
    do
    {
      v346 = *((_QWORD *)v327 - 1);
      v327 -= 8;
      *(_QWORD *)v327 = 0;
      *--v335 = v346;
    }
    while (v327 != v329);
  }
  v327 = (char *)a3[1];
  v347 = (char *)a3[2];
  a3[1] = (uint64_t)v335;
  a3[2] = (uint64_t)v328;
  a3[3] = (uint64_t)v336;
  if (v347 != v327)
  {
    v7 = v590;
    do
    {
      v349 = *((_QWORD *)v347 - 1);
      v347 -= 8;
      v348 = v349;
      *(_QWORD *)v347 = 0;
      if (v349)
        (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
    }
    while (v347 != v327);
LABEL_478:
    v4 = v591;
    if (!v327)
      goto LABEL_480;
    goto LABEL_479;
  }
  v7 = v590;
  v4 = v591;
  if (v327)
LABEL_479:
    operator delete(v327);
LABEL_480:
  a3[2] = (uint64_t)v328;
  if (v597 < 0)
  {
    operator delete(v596[0]);
    if (v7 < 0)
      return;
    goto LABEL_482;
  }
LABEL_481:
  if (v7 < 0)
    return;
LABEL_482:
  v350 = *a3;
  v351 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v351 + 8, (uint64_t)"mps.dequantize", 14, (__int16)v595, v350, 0, 0);
  *(_QWORD *)(v351 + 96) = v4;
  *(_QWORD *)v351 = &off_24C032038;
  *(_BYTE *)(v351 + 104) = a2;
  if (!*(_QWORD *)(v351 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertQuantizationOp<mlir::mps"
           "::DequantizeOp>]";
    v596[0] = (void *)125;
    v352 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v352)
      v353 = v352;
    else
      v353 = (char *)v596[0];
    v354 = &v353[(_QWORD)v595];
    v355 = (char *)((char *)v596[0] - (char *)v353);
    if ((void *)((char *)v596[0] - (char *)v353) >= (void *)0x12)
      v356 = 18;
    else
      v356 = (char *)v596[0] - (char *)v353;
    v357 = &v354[v356];
    v358 = (unint64_t)&v355[-v356];
    if (v358 >= v358 - 1)
      --v358;
    *(_QWORD *)(v351 + 64) = v357;
    *(_QWORD *)(v351 + 72) = v358;
  }
  v359 = *(unsigned int *)(v351 + 88);
  if (v359 > *(_DWORD *)(v351 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v351 + 80, (void *)(v351 + 96), v359, 16);
    LODWORD(v359) = *(_DWORD *)(v351 + 88);
  }
  *(_DWORD *)(v351 + 88) = v359;
  v361 = (char *)a3[2];
  v360 = a3[3];
  if ((unint64_t)v361 < v360)
  {
    *(_QWORD *)v361 = v351;
    v362 = v361 + 8;
    goto LABEL_524;
  }
  v363 = (char *)a3[1];
  v364 = (v361 - v363) >> 3;
  v365 = v364 + 1;
  if ((unint64_t)(v364 + 1) >> 61)
    goto LABEL_766;
  v366 = v360 - (_QWORD)v363;
  if (v366 >> 2 > v365)
    v365 = v366 >> 2;
  if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8)
    v367 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v367 = v365;
  if (v367)
  {
    if (v367 >> 61)
      goto LABEL_767;
    v368 = (char *)operator new(8 * v367);
  }
  else
  {
    v368 = 0;
  }
  v369 = (uint64_t *)&v368[8 * v364];
  v370 = &v368[8 * v367];
  *v369 = v351;
  v362 = v369 + 1;
  if (v361 == v363)
  {
    a3[1] = (uint64_t)v369;
    a3[2] = (uint64_t)v362;
    a3[3] = (uint64_t)v370;
    v4 = v591;
    goto LABEL_522;
  }
  v371 = v361 - v363 - 8;
  if (v371 < 0x78
    || &v361[-(v371 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v369
    && &v368[v361 - v363 - (v371 & 0xFFFFFFFFFFFFFFF8) - 8] < v361)
  {
    goto LABEL_780;
  }
  v372 = (v371 >> 3) + 1;
  v373 = 8 * (v372 & 0x3FFFFFFFFFFFFFFCLL);
  v374 = &v361[-v373];
  v369 = (uint64_t *)((char *)v369 - v373);
  v375 = &v368[8 * v364 - 16];
  v376 = v361 - 16;
  v377 = v372 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v379 = *((_OWORD *)v376 - 1);
    v378 = *(_OWORD *)v376;
    *((_OWORD *)v376 - 1) = 0uLL;
    *(_OWORD *)v376 = 0uLL;
    *((_OWORD *)v375 - 1) = v379;
    *(_OWORD *)v375 = v378;
    v375 -= 32;
    v376 -= 32;
    v377 -= 4;
  }
  while (v377);
  v361 = v374;
  if (v372 != (v372 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_780:
    do
    {
      v380 = *((_QWORD *)v361 - 1);
      v361 -= 8;
      *(_QWORD *)v361 = 0;
      *--v369 = v380;
    }
    while (v361 != v363);
  }
  v361 = (char *)a3[1];
  v381 = (char *)a3[2];
  a3[1] = (uint64_t)v369;
  a3[2] = (uint64_t)v362;
  a3[3] = (uint64_t)v370;
  if (v381 != v361)
  {
    v4 = v591;
    do
    {
      v383 = *((_QWORD *)v381 - 1);
      v381 -= 8;
      v382 = v383;
      *(_QWORD *)v381 = 0;
      if (v383)
        (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
    }
    while (v381 != v361);
LABEL_522:
    if (!v361)
      goto LABEL_524;
    goto LABEL_523;
  }
  v4 = v591;
  if (v361)
LABEL_523:
    operator delete(v361);
LABEL_524:
  a3[2] = (uint64_t)v362;
  v384 = *a3;
  v385 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v385 + 8, (uint64_t)"mps.quantize", 12, (__int16)v595, v384, 0, 0);
  *(_QWORD *)(v385 + 96) = v4;
  *(_QWORD *)v385 = &off_24C031FC8;
  *(_BYTE *)(v385 + 104) = a2;
  if (!*(_QWORD *)(v385 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertQuantizationOp<mlir::mps::QuantizeOp>]";
    v596[0] = (void *)123;
    v386 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v386)
      v387 = v386;
    else
      v387 = (char *)v596[0];
    v388 = &v387[(_QWORD)v595];
    v389 = (char *)((char *)v596[0] - (char *)v387);
    if ((void *)((char *)v596[0] - (char *)v387) >= (void *)0x12)
      v390 = 18;
    else
      v390 = (char *)v596[0] - (char *)v387;
    v391 = &v388[v390];
    v392 = (unint64_t)&v389[-v390];
    if (v392 >= v392 - 1)
      --v392;
    *(_QWORD *)(v385 + 64) = v391;
    *(_QWORD *)(v385 + 72) = v392;
  }
  v393 = *(unsigned int *)(v385 + 88);
  if (v393 > *(_DWORD *)(v385 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v385 + 80, (void *)(v385 + 96), v393, 16);
    LODWORD(v393) = *(_DWORD *)(v385 + 88);
  }
  *(_DWORD *)(v385 + 88) = v393;
  v395 = (char *)a3[2];
  v394 = a3[3];
  if ((unint64_t)v395 >= v394)
  {
    v397 = (char *)a3[1];
    v398 = (v395 - v397) >> 3;
    v399 = v398 + 1;
    if ((unint64_t)(v398 + 1) >> 61)
      goto LABEL_766;
    v400 = v394 - (_QWORD)v397;
    if (v400 >> 2 > v399)
      v399 = v400 >> 2;
    if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFF8)
      v401 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v401 = v399;
    if (v401)
    {
      if (v401 >> 61)
        goto LABEL_767;
      v402 = (char *)operator new(8 * v401);
    }
    else
    {
      v402 = 0;
    }
    v403 = (uint64_t *)&v402[8 * v398];
    v404 = &v402[8 * v401];
    *v403 = v385;
    v396 = v403 + 1;
    if (v395 == v397)
    {
      a3[1] = (uint64_t)v403;
      a3[2] = (uint64_t)v396;
      a3[3] = (uint64_t)v404;
    }
    else
    {
      v405 = v395 - v397 - 8;
      if (v405 < 0x78
        || &v395[-(v405 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v403
        && &v402[v395 - v397 - (v405 & 0xFFFFFFFFFFFFFFF8) - 8] < v395)
      {
        goto LABEL_781;
      }
      v406 = (v405 >> 3) + 1;
      v407 = 8 * (v406 & 0x3FFFFFFFFFFFFFFCLL);
      v408 = &v395[-v407];
      v403 = (uint64_t *)((char *)v403 - v407);
      v409 = &v402[8 * v398 - 16];
      v410 = v395 - 16;
      v411 = v406 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v413 = *((_OWORD *)v410 - 1);
        v412 = *(_OWORD *)v410;
        *((_OWORD *)v410 - 1) = 0uLL;
        *(_OWORD *)v410 = 0uLL;
        *((_OWORD *)v409 - 1) = v413;
        *(_OWORD *)v409 = v412;
        v409 -= 32;
        v410 -= 32;
        v411 -= 4;
      }
      while (v411);
      v395 = v408;
      if (v406 != (v406 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_781:
        do
        {
          v414 = *((_QWORD *)v395 - 1);
          v395 -= 8;
          *(_QWORD *)v395 = 0;
          *--v403 = v414;
        }
        while (v395 != v397);
      }
      v395 = (char *)a3[1];
      v415 = (char *)a3[2];
      a3[1] = (uint64_t)v403;
      a3[2] = (uint64_t)v396;
      a3[3] = (uint64_t)v404;
      while (v415 != v395)
      {
        v417 = *((_QWORD *)v415 - 1);
        v415 -= 8;
        v416 = v417;
        *(_QWORD *)v415 = 0;
        if (v417)
          (*(void (**)(uint64_t))(*(_QWORD *)v416 + 8))(v416);
      }
    }
    v4 = v591;
    if (v395)
      operator delete(v395);
  }
  else
  {
    *(_QWORD *)v395 = v385;
    v396 = v395 + 8;
  }
  a3[2] = (uint64_t)v396;
  v418 = *a3;
  v419 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v419 + 8, (uint64_t)"mps.conv_2d_data_gradient", 25, (__int16)v595, v418, 0, 0);
  *(_QWORD *)(v419 + 96) = v4;
  *(_QWORD *)v419 = &off_24C02E958;
  *(_BYTE *)(v419 + 104) = a2;
  if (!*(_QWORD *)(v419 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertConv<mlir::mps::Conv2DDa"
           "taGradientOp, mlir::anec::Deconvolution>]";
    v596[0] = (void *)150;
    v420 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v420)
      v421 = v420;
    else
      v421 = (char *)v596[0];
    v422 = &v421[(_QWORD)v595];
    v423 = (char *)((char *)v596[0] - (char *)v421);
    if ((void *)((char *)v596[0] - (char *)v421) >= (void *)0x12)
      v424 = 18;
    else
      v424 = (char *)v596[0] - (char *)v421;
    v425 = &v422[v424];
    v426 = (unint64_t)&v423[-v424];
    if (v426 >= v426 - 1)
      --v426;
    *(_QWORD *)(v419 + 64) = v425;
    *(_QWORD *)(v419 + 72) = v426;
  }
  v427 = *(unsigned int *)(v419 + 88);
  if (v427 > *(_DWORD *)(v419 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v419 + 80, (void *)(v419 + 96), v427, 16);
    LODWORD(v427) = *(_DWORD *)(v419 + 88);
  }
  *(_DWORD *)(v419 + 88) = v427;
  v429 = (char *)a3[2];
  v428 = a3[3];
  if ((unint64_t)v429 >= v428)
  {
    v431 = (char *)a3[1];
    v432 = (v429 - v431) >> 3;
    v433 = v432 + 1;
    if ((unint64_t)(v432 + 1) >> 61)
      goto LABEL_766;
    v434 = v428 - (_QWORD)v431;
    if (v434 >> 2 > v433)
      v433 = v434 >> 2;
    if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFF8)
      v435 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v435 = v433;
    if (v435)
    {
      if (v435 >> 61)
        goto LABEL_767;
      v436 = (char *)operator new(8 * v435);
    }
    else
    {
      v436 = 0;
    }
    v437 = (uint64_t *)&v436[8 * v432];
    v438 = &v436[8 * v435];
    *v437 = v419;
    v430 = v437 + 1;
    if (v429 == v431)
    {
      a3[1] = (uint64_t)v437;
      a3[2] = (uint64_t)v430;
      a3[3] = (uint64_t)v438;
    }
    else
    {
      v439 = v429 - v431 - 8;
      if (v439 < 0x78
        || &v429[-(v439 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v437
        && &v436[v429 - v431 - (v439 & 0xFFFFFFFFFFFFFFF8) - 8] < v429)
      {
        goto LABEL_782;
      }
      v440 = (v439 >> 3) + 1;
      v441 = 8 * (v440 & 0x3FFFFFFFFFFFFFFCLL);
      v442 = &v429[-v441];
      v437 = (uint64_t *)((char *)v437 - v441);
      v443 = &v436[8 * v432 - 16];
      v444 = v429 - 16;
      v445 = v440 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v447 = *((_OWORD *)v444 - 1);
        v446 = *(_OWORD *)v444;
        *((_OWORD *)v444 - 1) = 0uLL;
        *(_OWORD *)v444 = 0uLL;
        *((_OWORD *)v443 - 1) = v447;
        *(_OWORD *)v443 = v446;
        v443 -= 32;
        v444 -= 32;
        v445 -= 4;
      }
      while (v445);
      v429 = v442;
      if (v440 != (v440 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_782:
        do
        {
          v448 = *((_QWORD *)v429 - 1);
          v429 -= 8;
          *(_QWORD *)v429 = 0;
          *--v437 = v448;
        }
        while (v429 != v431);
      }
      v429 = (char *)a3[1];
      v449 = (char *)a3[2];
      a3[1] = (uint64_t)v437;
      a3[2] = (uint64_t)v430;
      a3[3] = (uint64_t)v438;
      while (v449 != v429)
      {
        v451 = *((_QWORD *)v449 - 1);
        v449 -= 8;
        v450 = v451;
        *(_QWORD *)v449 = 0;
        if (v451)
          (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
      }
    }
    v4 = v591;
    if (v429)
      operator delete(v429);
  }
  else
  {
    *(_QWORD *)v429 = v419;
    v430 = v429 + 8;
  }
  a3[2] = (uint64_t)v430;
  v452 = *a3;
  v453 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v453 + 8, (uint64_t)"mps.conv_2d", 11, (__int16)v595, v452, 0, 0);
  *(_QWORD *)(v453 + 96) = v4;
  *(_QWORD *)v453 = &off_24C02EA38;
  *(_BYTE *)(v453 + 104) = a2;
  if (!*(_QWORD *)(v453 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertConv<mlir::mps::Conv2DOp"
           ", mlir::anec::Convolution>]";
    v596[0] = (void *)136;
    v454 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v454)
      v455 = v454;
    else
      v455 = (char *)v596[0];
    v456 = &v455[(_QWORD)v595];
    v457 = (char *)((char *)v596[0] - (char *)v455);
    if ((void *)((char *)v596[0] - (char *)v455) >= (void *)0x12)
      v458 = 18;
    else
      v458 = (char *)v596[0] - (char *)v455;
    v459 = &v456[v458];
    v460 = (unint64_t)&v457[-v458];
    if (v460 >= v460 - 1)
      --v460;
    *(_QWORD *)(v453 + 64) = v459;
    *(_QWORD *)(v453 + 72) = v460;
  }
  v461 = *(unsigned int *)(v453 + 88);
  if (v461 > *(_DWORD *)(v453 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v453 + 80, (void *)(v453 + 96), v461, 16);
    LODWORD(v461) = *(_DWORD *)(v453 + 88);
  }
  *(_DWORD *)(v453 + 88) = v461;
  v463 = (char *)a3[2];
  v462 = a3[3];
  if ((unint64_t)v463 >= v462)
  {
    v465 = (char *)a3[1];
    v466 = (v463 - v465) >> 3;
    v467 = v466 + 1;
    if ((unint64_t)(v466 + 1) >> 61)
      goto LABEL_766;
    v468 = v462 - (_QWORD)v465;
    if (v468 >> 2 > v467)
      v467 = v468 >> 2;
    if ((unint64_t)v468 >= 0x7FFFFFFFFFFFFFF8)
      v469 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v469 = v467;
    if (v469)
    {
      if (v469 >> 61)
        goto LABEL_767;
      v470 = (char *)operator new(8 * v469);
    }
    else
    {
      v470 = 0;
    }
    v471 = (uint64_t *)&v470[8 * v466];
    v472 = &v470[8 * v469];
    *v471 = v453;
    v464 = v471 + 1;
    if (v463 == v465)
    {
      a3[1] = (uint64_t)v471;
      a3[2] = (uint64_t)v464;
      a3[3] = (uint64_t)v472;
    }
    else
    {
      v473 = v463 - v465 - 8;
      if (v473 < 0x78
        || &v463[-(v473 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v471
        && &v470[v463 - v465 - (v473 & 0xFFFFFFFFFFFFFFF8) - 8] < v463)
      {
        goto LABEL_783;
      }
      v474 = (v473 >> 3) + 1;
      v475 = 8 * (v474 & 0x3FFFFFFFFFFFFFFCLL);
      v476 = &v463[-v475];
      v471 = (uint64_t *)((char *)v471 - v475);
      v477 = &v470[8 * v466 - 16];
      v478 = v463 - 16;
      v479 = v474 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v481 = *((_OWORD *)v478 - 1);
        v480 = *(_OWORD *)v478;
        *((_OWORD *)v478 - 1) = 0uLL;
        *(_OWORD *)v478 = 0uLL;
        *((_OWORD *)v477 - 1) = v481;
        *(_OWORD *)v477 = v480;
        v477 -= 32;
        v478 -= 32;
        v479 -= 4;
      }
      while (v479);
      v463 = v476;
      if (v474 != (v474 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_783:
        do
        {
          v482 = *((_QWORD *)v463 - 1);
          v463 -= 8;
          *(_QWORD *)v463 = 0;
          *--v471 = v482;
        }
        while (v463 != v465);
      }
      v463 = (char *)a3[1];
      v483 = (char *)a3[2];
      a3[1] = (uint64_t)v471;
      a3[2] = (uint64_t)v464;
      a3[3] = (uint64_t)v472;
      while (v483 != v463)
      {
        v485 = *((_QWORD *)v483 - 1);
        v483 -= 8;
        v484 = v485;
        *(_QWORD *)v483 = 0;
        if (v485)
          (*(void (**)(uint64_t))(*(_QWORD *)v484 + 8))(v484);
      }
    }
    v4 = v591;
    if (v463)
      operator delete(v463);
  }
  else
  {
    *(_QWORD *)v463 = v453;
    v464 = v463 + 8;
  }
  a3[2] = (uint64_t)v464;
  v486 = *a3;
  v487 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v487 + 8, (uint64_t)"mps.conv_3d_data_gradient", 25, (__int16)v595, v486, 0, 0);
  *(_QWORD *)(v487 + 96) = v4;
  *(_QWORD *)v487 = &off_24C02E9C8;
  *(_BYTE *)(v487 + 104) = a2;
  if (!*(_QWORD *)(v487 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertConv<mlir::mps::Conv3DDa"
           "taGradientOp, mlir::anec::Deconvolution>]";
    v596[0] = (void *)150;
    v488 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v488)
      v489 = v488;
    else
      v489 = (char *)v596[0];
    v490 = &v489[(_QWORD)v595];
    v491 = (char *)((char *)v596[0] - (char *)v489);
    if ((void *)((char *)v596[0] - (char *)v489) >= (void *)0x12)
      v492 = 18;
    else
      v492 = (char *)v596[0] - (char *)v489;
    v493 = &v490[v492];
    v494 = (unint64_t)&v491[-v492];
    if (v494 >= v494 - 1)
      --v494;
    *(_QWORD *)(v487 + 64) = v493;
    *(_QWORD *)(v487 + 72) = v494;
  }
  v495 = *(unsigned int *)(v487 + 88);
  if (v495 > *(_DWORD *)(v487 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v487 + 80, (void *)(v487 + 96), v495, 16);
    LODWORD(v495) = *(_DWORD *)(v487 + 88);
  }
  *(_DWORD *)(v487 + 88) = v495;
  v497 = (char *)a3[2];
  v496 = a3[3];
  if ((unint64_t)v497 >= v496)
  {
    v499 = (char *)a3[1];
    v500 = (v497 - v499) >> 3;
    v501 = v500 + 1;
    if ((unint64_t)(v500 + 1) >> 61)
      goto LABEL_766;
    v502 = v496 - (_QWORD)v499;
    if (v502 >> 2 > v501)
      v501 = v502 >> 2;
    if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFF8)
      v503 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v503 = v501;
    if (v503)
    {
      if (v503 >> 61)
        goto LABEL_767;
      v504 = (char *)operator new(8 * v503);
    }
    else
    {
      v504 = 0;
    }
    v505 = (uint64_t *)&v504[8 * v500];
    v506 = &v504[8 * v503];
    *v505 = v487;
    v498 = v505 + 1;
    if (v497 == v499)
    {
      a3[1] = (uint64_t)v505;
      a3[2] = (uint64_t)v498;
      a3[3] = (uint64_t)v506;
    }
    else
    {
      v507 = v497 - v499 - 8;
      if (v507 < 0x78
        || &v497[-(v507 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v505
        && &v504[v497 - v499 - (v507 & 0xFFFFFFFFFFFFFFF8) - 8] < v497)
      {
        goto LABEL_784;
      }
      v508 = (v507 >> 3) + 1;
      v509 = 8 * (v508 & 0x3FFFFFFFFFFFFFFCLL);
      v510 = &v497[-v509];
      v505 = (uint64_t *)((char *)v505 - v509);
      v511 = &v504[8 * v500 - 16];
      v512 = v497 - 16;
      v513 = v508 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v515 = *((_OWORD *)v512 - 1);
        v514 = *(_OWORD *)v512;
        *((_OWORD *)v512 - 1) = 0uLL;
        *(_OWORD *)v512 = 0uLL;
        *((_OWORD *)v511 - 1) = v515;
        *(_OWORD *)v511 = v514;
        v511 -= 32;
        v512 -= 32;
        v513 -= 4;
      }
      while (v513);
      v497 = v510;
      if (v508 != (v508 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_784:
        do
        {
          v516 = *((_QWORD *)v497 - 1);
          v497 -= 8;
          *(_QWORD *)v497 = 0;
          *--v505 = v516;
        }
        while (v497 != v499);
      }
      v497 = (char *)a3[1];
      v517 = (char *)a3[2];
      a3[1] = (uint64_t)v505;
      a3[2] = (uint64_t)v498;
      a3[3] = (uint64_t)v506;
      while (v517 != v497)
      {
        v519 = *((_QWORD *)v517 - 1);
        v517 -= 8;
        v518 = v519;
        *(_QWORD *)v517 = 0;
        if (v519)
          (*(void (**)(uint64_t))(*(_QWORD *)v518 + 8))(v518);
      }
    }
    v4 = v591;
    if (v497)
      operator delete(v497);
  }
  else
  {
    *(_QWORD *)v497 = v487;
    v498 = v497 + 8;
  }
  a3[2] = (uint64_t)v498;
  v520 = *a3;
  v521 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v521 + 8, (uint64_t)"mps.conv_3d", 11, (__int16)v595, v520, 0, 0);
  *(_QWORD *)(v521 + 96) = v4;
  *(_QWORD *)v521 = &off_24C02EAA8;
  *(_BYTE *)(v521 + 104) = a2;
  if (!*(_QWORD *)(v521 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertConv<mlir::mps::Conv3DOp"
           ", mlir::anec::Convolution>]";
    v596[0] = (void *)136;
    v522 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v522)
      v523 = v522;
    else
      v523 = (char *)v596[0];
    v524 = &v523[(_QWORD)v595];
    v525 = (char *)((char *)v596[0] - (char *)v523);
    if ((void *)((char *)v596[0] - (char *)v523) >= (void *)0x12)
      v526 = 18;
    else
      v526 = (char *)v596[0] - (char *)v523;
    v527 = &v524[v526];
    v528 = (unint64_t)&v525[-v526];
    if (v528 >= v528 - 1)
      --v528;
    *(_QWORD *)(v521 + 64) = v527;
    *(_QWORD *)(v521 + 72) = v528;
  }
  v529 = *(unsigned int *)(v521 + 88);
  if (v529 > *(_DWORD *)(v521 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v521 + 80, (void *)(v521 + 96), v529, 16);
    LODWORD(v529) = *(_DWORD *)(v521 + 88);
  }
  *(_DWORD *)(v521 + 88) = v529;
  v531 = (char *)a3[2];
  v530 = a3[3];
  if ((unint64_t)v531 >= v530)
  {
    v533 = (char *)a3[1];
    v534 = (v531 - v533) >> 3;
    v535 = v534 + 1;
    if ((unint64_t)(v534 + 1) >> 61)
      goto LABEL_766;
    v536 = v530 - (_QWORD)v533;
    if (v536 >> 2 > v535)
      v535 = v536 >> 2;
    if ((unint64_t)v536 >= 0x7FFFFFFFFFFFFFF8)
      v537 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v537 = v535;
    if (v537)
    {
      if (v537 >> 61)
        goto LABEL_767;
      v538 = (char *)operator new(8 * v537);
    }
    else
    {
      v538 = 0;
    }
    v539 = (uint64_t *)&v538[8 * v534];
    v540 = &v538[8 * v537];
    *v539 = v521;
    v532 = v539 + 1;
    if (v531 == v533)
    {
      a3[1] = (uint64_t)v539;
      a3[2] = (uint64_t)v532;
      a3[3] = (uint64_t)v540;
    }
    else
    {
      v541 = v531 - v533 - 8;
      if (v541 < 0x78
        || &v531[-(v541 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v539
        && &v538[v531 - v533 - (v541 & 0xFFFFFFFFFFFFFFF8) - 8] < v531)
      {
        goto LABEL_785;
      }
      v542 = (v541 >> 3) + 1;
      v543 = 8 * (v542 & 0x3FFFFFFFFFFFFFFCLL);
      v544 = &v531[-v543];
      v539 = (uint64_t *)((char *)v539 - v543);
      v545 = &v538[8 * v534 - 16];
      v546 = v531 - 16;
      v547 = v542 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v549 = *((_OWORD *)v546 - 1);
        v548 = *(_OWORD *)v546;
        *((_OWORD *)v546 - 1) = 0uLL;
        *(_OWORD *)v546 = 0uLL;
        *((_OWORD *)v545 - 1) = v549;
        *(_OWORD *)v545 = v548;
        v545 -= 32;
        v546 -= 32;
        v547 -= 4;
      }
      while (v547);
      v531 = v544;
      if (v542 != (v542 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_785:
        do
        {
          v550 = *((_QWORD *)v531 - 1);
          v531 -= 8;
          *(_QWORD *)v531 = 0;
          *--v539 = v550;
        }
        while (v531 != v533);
      }
      v531 = (char *)a3[1];
      v551 = (char *)a3[2];
      a3[1] = (uint64_t)v539;
      a3[2] = (uint64_t)v532;
      a3[3] = (uint64_t)v540;
      while (v551 != v531)
      {
        v553 = *((_QWORD *)v551 - 1);
        v551 -= 8;
        v552 = v553;
        *(_QWORD *)v551 = 0;
        if (v553)
          (*(void (**)(uint64_t))(*(_QWORD *)v552 + 8))(v552);
      }
    }
    v4 = v591;
    if (v531)
      operator delete(v531);
  }
  else
  {
    *(_QWORD *)v531 = v521;
    v532 = v531 + 8;
  }
  a3[2] = (uint64_t)v532;
  v554 = *a3;
  v555 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v595, 1);
  mlir::Pattern::Pattern(v555 + 8, (uint64_t)"mps.depthwise_conv_2d", 21, (__int16)v595, v554, 0, 0);
  *(_QWORD *)(v555 + 96) = v4;
  *(_QWORD *)v555 = &off_24C02E8E8;
  *(_BYTE *)(v555 + 104) = a2;
  if (!*(_QWORD *)(v555 + 72))
  {
    v595 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::(anonymous namespace)::ConvertConv<mlir::mps::Depthwis"
           "eConv2DOp, mlir::anec::Convolution>]";
    v596[0] = (void *)145;
    v556 = (char *)llvm::StringRef::find((uint64_t *)&v595, "DesiredTypeName = ", 0x12uLL, 0);
    if (v596[0] >= v556)
      v557 = v556;
    else
      v557 = (char *)v596[0];
    v558 = &v557[(_QWORD)v595];
    v559 = (char *)((char *)v596[0] - (char *)v557);
    if ((void *)((char *)v596[0] - (char *)v557) >= (void *)0x12)
      v560 = 18;
    else
      v560 = (char *)v596[0] - (char *)v557;
    v561 = &v558[v560];
    v562 = (unint64_t)&v559[-v560];
    if (v562 >= v562 - 1)
      --v562;
    *(_QWORD *)(v555 + 64) = v561;
    *(_QWORD *)(v555 + 72) = v562;
  }
  v563 = *(unsigned int *)(v555 + 88);
  if (v563 > *(_DWORD *)(v555 + 92))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v555 + 80, (void *)(v555 + 96), v563, 16);
    LODWORD(v563) = *(_DWORD *)(v555 + 88);
  }
  *(_DWORD *)(v555 + 88) = v563;
  v565 = (char *)a3[2];
  v564 = a3[3];
  if ((unint64_t)v565 >= v564)
  {
    v567 = (char *)a3[1];
    v568 = (v565 - v567) >> 3;
    v569 = v568 + 1;
    if (!((unint64_t)(v568 + 1) >> 61))
    {
      v570 = v564 - (_QWORD)v567;
      if (v570 >> 2 > v569)
        v569 = v570 >> 2;
      if ((unint64_t)v570 >= 0x7FFFFFFFFFFFFFF8)
        v571 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v571 = v569;
      if (!v571)
      {
        v572 = 0;
        goto LABEL_743;
      }
      if (!(v571 >> 61))
      {
        v572 = (char *)operator new(8 * v571);
LABEL_743:
        v573 = (uint64_t *)&v572[8 * v568];
        v574 = &v572[8 * v571];
        *v573 = v555;
        v566 = v573 + 1;
        if (v565 == v567)
        {
          a3[1] = (uint64_t)v573;
          a3[2] = (uint64_t)v566;
          a3[3] = (uint64_t)v574;
        }
        else
        {
          v575 = v565 - v567 - 8;
          if (v575 < 0x78
            || &v565[-(v575 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v573
            && &v572[v565 - v567 - (v575 & 0xFFFFFFFFFFFFFFF8) - 8] < v565)
          {
            goto LABEL_786;
          }
          v576 = (v575 >> 3) + 1;
          v577 = 8 * (v576 & 0x3FFFFFFFFFFFFFFCLL);
          v578 = &v565[-v577];
          v573 = (uint64_t *)((char *)v573 - v577);
          v579 = &v572[8 * v568 - 16];
          v580 = v565 - 16;
          v581 = v576 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v583 = *((_OWORD *)v580 - 1);
            v582 = *(_OWORD *)v580;
            *((_OWORD *)v580 - 1) = 0uLL;
            *(_OWORD *)v580 = 0uLL;
            *((_OWORD *)v579 - 1) = v583;
            *(_OWORD *)v579 = v582;
            v579 -= 32;
            v580 -= 32;
            v581 -= 4;
          }
          while (v581);
          v565 = v578;
          if (v576 != (v576 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_786:
            do
            {
              v584 = *((_QWORD *)v565 - 1);
              v565 -= 8;
              *(_QWORD *)v565 = 0;
              *--v573 = v584;
            }
            while (v565 != v567);
          }
          v565 = (char *)a3[1];
          v585 = (char *)a3[2];
          a3[1] = (uint64_t)v573;
          a3[2] = (uint64_t)v566;
          a3[3] = (uint64_t)v574;
          while (v585 != v565)
          {
            v587 = *((_QWORD *)v585 - 1);
            v585 -= 8;
            v586 = v587;
            *(_QWORD *)v585 = 0;
            if (v587)
              (*(void (**)(uint64_t))(*(_QWORD *)v586 + 8))(v586);
          }
        }
        if (v565)
          operator delete(v565);
        goto LABEL_758;
      }
LABEL_767:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_766:
    abort();
  }
  *(_QWORD *)v565 = v555;
  v566 = v565 + 8;
LABEL_758:
  a3[2] = (uint64_t)v566;
}

#error "207584CA8: too big function (funcsize=0)"

uint64_t std::pair<llvm::APFloat,std::string>::pair[abi:nn180100]<llvm::APFloat,char const(&)[7],0>(uint64_t a1, uint64_t a2, const char *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(a2 + 8);
  v7 = *(void **)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v7)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v5, v6);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v5, (uint64_t)v6);
  v8 = strlen(a3);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v12 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v10;
  }
  else
  {
    v10 = (void *)(a1 + 32);
    *(_BYTE *)(a1 + 55) = v8;
    if (!v8)
      goto LABEL_12;
  }
  memmove(v10, a3, v9);
LABEL_12:
  *((_BYTE *)v10 + v9) = 0;
  return a1;
}

void mlir::`anonymous namespace'::ConvertBiasAdd::~ConvertBiasAdd(mlir::_anonymous_namespace_::ConvertBiasAdd *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::BiasAddOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::BiasAddOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::BiasAddOpGenericAdaptorBase::BiasAddOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::BiasAddOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::BiasAddOpGenericAdaptorBase::BiasAddOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::BiasAddOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 48);
  v9 = *(_QWORD *)(a3 + 56);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v28;
      v29 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBiasAdd::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t IndexFromDim;
  char v23;
  unint64_t v24;
  int PaddingMode;
  uint64_t v26;
  uint64_t DefiningOp;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t *GOC;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v42 = *(_OWORD *)(a3 + 48);
  v5 = mlir::ValueRange::dereference_iterator(&v42, 0);
  v6 = mlir::ValueRange::dereference_iterator(&v42, 1);
  v7 = (uint64_t *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    goto LABEL_10;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v38[0] = mlir::getRankPromotionTypeForANE((uint64_t)v7, v17);
  v38[1] = v18;
  mlir::ShapedType::getShape((mlir::ShapedType *)v38);
  v20 = v19;
  mlir::ShapedType::getShape((mlir::ShapedType *)v38);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v21);
  if (!v23)
    std::__throw_bad_optional_access[abi:nn180100]();
  v24 = IndexFromDim;
  PaddingMode = mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v39);
  if (PaddingMode)
  {
    if (PaddingMode != 1)
    {
      v36 = v39;
      GOC = &v39;
      v32 = *(_QWORD *)(a4 + 16);
      if (!v32 || !mlir::RewriterBase::Listener::classof(v32))
        return 0;
      v34 = *(_QWORD *)(v36 + 24);
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t **))(*(_QWORD *)v32 + 64))(v32, v34, v35, &GOC);
    }
    v26 = -1;
  }
  else
  {
    v26 = -3;
  }
  if (v20 + v26 != v24
    || (GOC = (uint64_t *)v6, (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&GOC)) == 0)
    || (v28 = DefiningOp,
        v29 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v28 + 48) + 32))(*(_QWORD *)(v28 + 48), v29)))
  {
    v32 = *(_QWORD *)(a4 + 16);
    if (!v32)
      return 0;
    v33 = v39;
    if (!mlir::RewriterBase::Listener::classof(v32))
      return 0;
    v34 = *(_QWORD *)(v33 + 24);
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t **))(*(_QWORD *)v32 + 64))(v32, v34, v35, &GOC);
  }
  v30 = (unsigned int *)v39;
  if (!GOC)
    return 0;
  v40 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
  v31 = 1;
  mlir::ConversionPatternRewriter::replaceOp(a4, v30, (uint64_t)&v40, 1);
  return v31;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBiasAdd::matchAndRewriteWithStaticShapes(mlir::mps::BiasAddOp,mlir::mps::BiasAddOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(mlir::mps::PadOp **a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int PaddingMode;
  const void **v5;
  uint64_t v6;
  const void **v8[4];
  __int16 v9;

  v3 = mlir::Diagnostic::operator<<(a2, "BiasAdd unsupported data format ");
  PaddingMode = mlir::mps::PadOp::getPaddingMode(*a1);
  v9 = 261;
  v8[0] = (const void **)mlir::mps::stringifyTensorDataLayout(PaddingMode);
  v8[1] = v5;
  v6 = mlir::Diagnostic::operator<<(v3, v8);
  return mlir::Diagnostic::operator<<(v6, "\n");
}

uint64_t mlir::`anonymous namespace'::`anonymous namespace'::makeGOC(uint64_t a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t OperandRange, int a7, int a8)
{
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  ZinIrHalH13g *GOCConstant;
  char v32;
  uint64_t v33;
  unint64_t v34;
  ZinIrHalH13g *v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  void *v48;
  uint64_t v49;
  _DWORD v50[12];
  void *v51;
  uint64_t v52;
  _DWORD v53[12];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v44 = (char *)a4;
  v45 = a3;
  v43 = (char *)a5;
  v15 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15)
    goto LABEL_10;
  v16 = *v15;
  v17 = mlir::TypeID::get<mlir::ShapedType>();
  v18 = *(unsigned int *)(v16 + 16);
  if (!(_DWORD)v18)
    goto LABEL_10;
  v19 = *(_QWORD **)(v16 + 8);
  v20 = &v19[2 * v18];
  do
  {
    v21 = v18 >> 1;
    v22 = &v19[2 * (v18 >> 1)];
    v24 = *v22;
    v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17)
      v19 = v23;
    else
      v18 = v21;
  }
  while (v18);
  if (v19 != v20 && *v19 == v17)
    v25 = v19[1];
  else
LABEL_10:
    v25 = 0;
  v42[0] = mlir::getRankPromotionTypeForANE((uint64_t)v15, v25);
  v42[1] = v26;
  mlir::ShapedType::getShape((mlir::ShapedType *)v42);
  mlir::anec::getIndexFromDim(1, v27);
  if (v28)
  {
    mlir::ShapedType::getShape((mlir::ShapedType *)v42);
    v51 = v53;
    v52 = 0xC00000000;
    v41 = 0;
    if (a4)
    {
      v29 = v41;
    }
    else
    {
      v29 = 0;
      v53[0] = 1065353216;
      LODWORD(v52) = 1;
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)v42);
    if (v32)
    {
      v44 = (char *)GOCConstant - 16;
      v48 = v50;
      v49 = 0xC00000000;
      v40 = 0;
      if (a5)
      {
        {
LABEL_27:
          if (v48 != v50)
            free(v48);
          goto LABEL_29;
        }
        v33 = v40;
      }
      else
      {
        v33 = 0;
        v50[0] = 0;
        LODWORD(v49) = 1;
      }
      mlir::ShapedType::getShape((mlir::ShapedType *)v42);
      if (v36)
      {
        v43 = (char *)v35 - 16;
        if (!OperandRange)
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v42);
        LOBYTE(v46) = 0;
        v47 = 0;
        v37 = (void *)mlir::ShapedType::cloneWith(v42, &v46, OperandRange);
      }
      goto LABEL_27;
    }
LABEL_29:
    if (v51 != v53)
      free(v51);
  }
  return 0;
}

uint64_t mlir::`anonymous namespace'::`anonymous namespace'::getGOCConstantValue(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  uint64_t DefiningOp;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  mlir::Float16Type *v17;
  mlir::MLIRContext *v18;
  uint64_t v19;
  uint64_t v20;
  mlir::Float32Type *Context;
  mlir::MLIRContext *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  float *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v38;
  float32x4_t v39;
  unsigned int v40;
  float v41;
  uint64_t OperandRange;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *ArgOperands;
  uint64_t v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  OperandRange = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&OperandRange);
  if (!DefiningOp)
    return 0;
  v11 = DefiningOp;
  v12 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 48) + 32))(*(_QWORD *)(v11 + 48), v12))
    return 0;
  ArgOperands = v48;
  v47 = 0x100000000;
  mlir::Operation::fold(v11, 0, 0, (uint64_t)&ArgOperands);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)ArgOperands & 0xFFFFFFFFFFFFFFF8));
  v15 = v13;
  if (v13)
  {
    v44 = v13;
    v45 = v14;
  }
  if (ArgOperands != v48)
    free(ArgOperands);
  if (!v15)
    return 0;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  v47 = v16;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  if (mlir::Type::isF32((mlir::Type *)&OperandRange) || a3)
  {
    ArgOperands = (void *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
    Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&ArgOperands);
    v19 = mlir::Float32Type::get(Context, v23);
  }
  else
  {
    ArgOperands = (void *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
    v17 = (mlir::Float16Type *)mlir::Attribute::getContext((mlir::Attribute *)&ArgOperands);
    v19 = mlir::Float16Type::get(v17, v18);
  }
  *a5 = v19;
  ArgOperands = v48;
  v47 = 0x400000000;
  OperandRange = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  v43 = v24;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || (OperandRange = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44),
        v43 = v25,
        v26 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange)
                       + 136),
        v26 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::getIntValues<float>((uint64_t)v44, v45, (uint64_t)&ArgOperands, 1);
    v28 = v47;
    v29 = *(_DWORD *)(a2 + 8);
    if (v29 != (_DWORD)v47)
    {
      if (v29 <= v47)
      {
        if (*(_DWORD *)(a2 + 12) < v47)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v47, 4);
          v29 = *(_DWORD *)(a2 + 8);
        }
        if (v29 != (_DWORD)v28)
          bzero((void *)(*(_QWORD *)a2 + 4 * v29), 4 * (v28 - v29));
      }
      *(_DWORD *)(a2 + 8) = v28;
      v28 = v47;
    }
    v27 = (float *)ArgOperands;
    if ((_DWORD)v28)
    {
      v30 = 0;
      v31 = *(_QWORD *)a2;
      if (v28 < 4 || (unint64_t)(v31 - (_QWORD)ArgOperands) < 0x10)
        goto LABEL_57;
      v32 = 0;
      v30 = v28 & 0xFFFFFFFC;
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        if (a3)
          v38 = -1;
        else
          v38 = 0;
        v39 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v38), (int8x16_t)vdivq_f32(_Q0, *(float32x4_t *)&v27[v32 / 4]), *(int8x16_t *)&v27[v32 / 4]);
        if (a4)
          v40 = -1;
        else
          v40 = 0;
        *(int8x16_t *)(v31 + v32) = vbslq_s8((int8x16_t)vdupq_n_s32(v40), (int8x16_t)vnegq_f32(v39), (int8x16_t)v39);
        v32 += 16;
      }
      while (((4 * v28) & 0x3FFFFFFF0) != v32);
      if (v28 != v30)
      {
LABEL_57:
        do
        {
          v41 = v27[v30];
          if (a3)
            v41 = 1.0 / v41;
          if (a4)
            v41 = -v41;
          *(float *)(v31 + 4 * v30++) = v41;
        }
        while (v28 != v30);
      }
    }
    v20 = 1;
  }
  else
  {
    v20 = 0;
    v27 = (float *)ArgOperands;
  }
  if (v27 != (float *)v48)
    free(v27);
  return v20;
}

ZinIrHalH13g *mlir::`anonymous namespace'::`anonymous namespace'::makeGOCConstant(uint64_t a1, mlir::MLIRContext *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7, uint64_t a8)
{
  uint64_t F16Type;
  unint64_t IndexFromDim;
  char v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  mlir::AffineMap *v21;
  mlir::Float16Type **v22;
  mlir::MLIRContext *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL4 isF32;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  int *v45;
  int v46;
  uint64_t v47;
  ZinIrHalH13g *v48;
  float32x4_t *v49;
  float16x8_t *v50;
  unint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  _WORD *v57;
  int *v58;
  int v59;
  _QWORD *v65;
  _QWORD *v67[2];
  void *v68[5];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *__b;
  unsigned int v73;
  int v74;
  _QWORD v75[6];

  F16Type = a8;
  v75[5] = *MEMORY[0x24BDAC8D0];
  v71 = a8;
  if (a8)
  {
    if (a7)
      goto LABEL_7;
  }
  else
  {
    F16Type = mlir::Builder::getF16Type((mlir::Float16Type **)(a1 + 8), a2);
    v71 = F16Type;
    if (a7)
      goto LABEL_7;
  }
  IndexFromDim = mlir::anec::getIndexFromDim(1, a3);
  if (!v17)
    return 0;
  a6 = IndexFromDim;
LABEL_7:
  __b = v75;
  v74 = 5;
  if (a3 < 6)
  {
    if (a3)
      memset_pattern16(v75, &unk_207A80400, 8 * a3);
    v18 = v75;
  }
  else
  {
    v73 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v75, a3, 8);
    v18 = __b;
    memset_pattern16(__b, &unk_207A80400, 8 * a3);
  }
  v73 = a3;
  v18[a6] = a5;
  v19 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v18, a3, F16Type, 0);
  v20 = (uint64_t *)__b;
  v21 = (mlir::AffineMap *)v73;
  v22 = (mlir::Float16Type **)(a1 + 8);
  v24 = mlir::Builder::getF16Type(v22, v23);
  v70 = mlir::MemRefType::get(v20, v21, v24, 0, 0, 0);
  if (!v19)
    goto LABEL_21;
  v25 = *v19;
  v26 = mlir::TypeID::get<mlir::ShapedType>();
  v27 = *(unsigned int *)(v25 + 16);
  if (!(_DWORD)v27)
    goto LABEL_21;
  v28 = *(_QWORD **)(v25 + 8);
  v29 = &v28[2 * v27];
  do
  {
    v30 = v27 >> 1;
    v31 = &v28[2 * (v27 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26)
      v28 = v32;
    else
      v27 = v30;
  }
  while (v27);
  if (v28 != v29 && *v28 == v26)
    v34 = v28[1];
  else
LABEL_21:
    v34 = 0;
  mlir::mps::CPUNDArray::CPUNDArray(v68, v19, v34, 0);
  isF32 = mlir::Type::isF32((mlir::Type *)&v71);
  v36 = v69;
  if (isF32)
  {
    if (a5 >= 1)
    {
      v37 = 0;
      if ((unint64_t)a5 < 8)
        goto LABEL_29;
      if ((unint64_t)(v69 - a4) < 0x20)
        goto LABEL_29;
      v37 = a5 & 0x7FFFFFFFFFFFFFF8;
      v38 = (__int128 *)(a4 + 16);
      v39 = (_OWORD *)(v69 + 16);
      v40 = a5 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v41 = *v38;
        *(v39 - 1) = *(v38 - 1);
        *v39 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 8;
      }
      while (v40);
      if (a5 != v37)
      {
LABEL_29:
        v42 = a5 - v37;
        v43 = 4 * v37;
        v44 = (_DWORD *)(v36 + v43);
        v45 = (int *)(a4 + v43);
        do
        {
          v46 = *v45++;
          *v44++ = v46;
          --v42;
        }
        while (v42);
      }
    }
    goto LABEL_41;
  }
  if (a5 >= 1)
  {
    if ((unint64_t)a5 < 0x10)
    {
      v47 = 0;
LABEL_39:
      v56 = a5 - v47;
      v57 = (_WORD *)(v36 + 2 * v47);
      v58 = (int *)(a4 + 4 * v47);
      do
      {
        v59 = *v58++;
        _S0 = v59;
        __asm { FCVT            H0, S0 }
        *v57++ = _S0;
        --v56;
      }
      while (v56);
      goto LABEL_41;
    }
    v47 = a5 & 0x7FFFFFFFFFFFFFF0;
    v49 = (float32x4_t *)(a4 + 32);
    v50 = (float16x8_t *)(v69 + 16);
    v51 = a5 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v53 = v49[-2];
      v52 = v49[-1];
      v55 = *v49;
      v54 = v49[1];
      v49 += 4;
      v50[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v53), v52);
      *v50 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v55), v54);
      v50 += 2;
      v51 -= 16;
    }
    while (v51);
    if (a5 != v47)
      goto LABEL_39;
  }
LABEL_41:
  v67[0] = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v68, 0, 1);
  v67[1] = v65;
  v48 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v22, (uint64_t)a2, &v70, v67);
  mlir::mps::CPUNDArray::~CPUNDArray(v68);
  if (__b != v75)
    free(__b);
  return v48;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::MemRefType,mlir::Value &,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::`anonymous namespace'::canonicalizeType(void *a1, uint64_t a2)
{
  uint64_t *Shape;
  uint64_t v3;
  uint64_t v4;
  void *OperandRange;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  mlir::AffineMap *v21;
  mlir::AffineMap *v22;
  uint64_t v23;
  uint64_t LayerSchedule;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *RankPromotionTypeForANE;
  uint64_t v29;
  uint64_t v30;
  pthread_rwlock_t *v31[68];

  v31[67] = *(pthread_rwlock_t **)MEMORY[0x24BDAC8D0];
  v26 = a1;
  v27 = a2;
  mlir::MPSToANECTypeConverter::MPSToANECTypeConverter((mlir::MPSToANECTypeConverter *)v31);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v26);
  if (mlir::ShapedType::getNumElements(Shape, v3) == 1
    && (mlir::ShapedType::getShape((mlir::ShapedType *)&v26), v4 <= 3))
  {
    OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
    v6 = mlir::TypeConverter::convertType((uint64_t)v31, OperandRange);
    if (!v6)
      v6 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
    mlir::getRankPromotionShapeForANE((uint64_t)v26, v27, (uint64_t **)&RankPromotionTypeForANE);
    mlir::MemRefType::get((uint64_t *)RankPromotionTypeForANE, (mlir::AffineMap *)v29, v6, 0, 0, 0);
    if (RankPromotionTypeForANE != &v30)
      free(RankPromotionTypeForANE);
  }
  else
  {
    v7 = (_QWORD *)mlir::TypeConverter::convertType((uint64_t)v31, v26);
    v8 = (uint64_t)v7;
    v25 = v7;
    if (!v7)
      goto LABEL_16;
    v9 = *v7;
    v10 = mlir::TypeID::get<mlir::ShapedType>();
    v11 = *(unsigned int *)(v9 + 16);
    if (!(_DWORD)v11)
      goto LABEL_16;
    v12 = *(_QWORD **)(v9 + 8);
    v13 = &v12[2 * v11];
    do
    {
      v14 = v11 >> 1;
      v15 = &v12[2 * (v11 >> 1)];
      v17 = *v15;
      v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10)
        v12 = v16;
      else
        v11 = v14;
    }
    while (v11);
    if (v12 != v13 && *v12 == v10)
      v18 = v12[1];
    else
LABEL_16:
      v18 = 0;
    RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE(v8, v18);
    v29 = v19;
    v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
    v22 = v21;
    v23 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RankPromotionTypeForANE);
    LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v25);
    mlir::MemRefType::get(v20, v22, v23, 0, LayerSchedule);
  }
  mlir::TypeConverter::~TypeConverter(v31);
}

BOOL mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _BOOL8 v7;
  uint64_t **v8;
  void *v10[2];
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4))
    return 0;
  v10[0] = v11;
  v10[1] = (void *)0x100000000;
  mlir::Operation::fold(a2, 0, 0, (uint64_t)v10);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v10[0] & 0xFFFFFFFFFFFFFFF8));
  v7 = v5 != 0;
  if (v5)
  {
    v8 = *a1;
    if (*a1)
    {
      *v8 = v5;
      v8[1] = v6;
    }
  }
  if (v10[0] != v11)
    free(v10[0]);
  return v7;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBiasAdd::matchAndRewriteWithStaticShapes(mlir::mps::BiasAddOp,mlir::mps::BiasAddOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "BiasAdd invalid channel or not a constant bias\n");
}

void mlir::`anonymous namespace'::ConvertConstant::~ConvertConstant(mlir::_anonymous_namespace_::ConvertConstant *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ConstantOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ConstantOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  __n128 *v11;
  void *v12;
  mlir::mps::MPSResourceBlobManagerInterface *Context;
  mlir::MLIRContext *v14;
  uint64_t Manager;
  __n128 v16;
  __n128 *v17;
  unint64_t v18[2];
  _BYTE v19[24];
  __n128 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v18, a3, a4);
  v8 = v18[0];
  v9 = v18[1];
  mlir::mps::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase((mlir::Attribute *)v19, a2);
  v21 = v8;
  v22 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v19, a5);
  v11 = v20;
  if (v20)
  {
    v12 = *(void **)(v20->n128_u64[0] + 136);
    if (v12 != &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v11 = 0;
    v17 = v11;
    if (v12 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    {
      mlir::mps::MPSBufferTensorAttr::getHandle(&v17, &v16);
      Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
      Manager = mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v14);
      return mlir::mps::MPSResourceBlobManagerInterface::decrementResourceRefcount(Manager, v16.n128_i64[0]);
    }
  }
  return result;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ConstantOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 *v11;
  void *v12;
  mlir::mps::MPSResourceBlobManagerInterface *Context;
  mlir::MLIRContext *v14;
  uint64_t Manager;
  __n128 v17;
  __n128 *v18;
  unint64_t v19[2];
  _BYTE v20[24];
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v19, a3, a4);
  v8 = v19[0];
  v9 = v19[1];
  mlir::mps::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase((mlir::Attribute *)v20, a2);
  v22 = v8;
  v23 = v9;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v20, a5);
  v11 = v21;
  if (v21)
  {
    v12 = *(void **)(v21->n128_u64[0] + 136);
    if (v12 != &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v11 = 0;
    v18 = v11;
    if (v12 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    {
      mlir::mps::MPSBufferTensorAttr::getHandle(&v18, &v17);
      Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
      Manager = mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v14);
      mlir::mps::MPSResourceBlobManagerInterface::decrementResourceRefcount(Manager, v17.n128_i64[0]);
    }
  }
  return v10;
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ConstantOp>::matchAndRewrite(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __n128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *Shape;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t NextResultAtOffset;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 *v31;
  void *v32;
  mlir::mps::MPSResourceBlobManagerInterface *Context;
  mlir::MLIRContext *v34;
  uint64_t Manager;
  unint64_t v36;
  pthread_rwlock_t **v37;
  __int128 v38;
  __n128 *v39;
  void *v40;
  mlir::mps::MPSResourceBlobManagerInterface *v41;
  mlir::MLIRContext *v42;
  uint64_t v43;
  _QWORD v44[2];
  __n128 *v45;
  __n128 v46[2];
  __int16 v47;
  __int128 v48;
  char v49;
  __n128 *v50;
  __int128 v51;
  __int128 v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v8 = (__n128 *)*((_QWORD *)a3 + 6);
  v9 = *((_QWORD *)a3 + 7);
  v10 = a3 + 3;
  v53 = v8;
  v54 = 0;
  if (v9)
  {
    v11 = 0;
    while (1)
    {
      v13 = mlir::ValueRange::dereference_iterator(&v53, v11);
      v44[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8));
      v44[1] = v14;
      if (v44[0])
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v44)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v44))
        {
          goto LABEL_15;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v44);
        if (v16)
          break;
      }
LABEL_3:
      v11 = ++v54;
      if (v53 == v8 && v11 == v9)
        goto LABEL_18;
    }
    v17 = 8 * v16;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v17 -= 8;
      if (!v17)
        goto LABEL_3;
    }
LABEL_15:
    v47 = 259;
    v45 = v46;
    v46[0].n128_u64[0] = (unint64_t)"failed: unranked input types or dynamic shapes are not supported on ANEs.";
    v18 = *(_QWORD *)(a4 + 16);
    if (v18 && mlir::RewriterBase::Listener::classof(v18))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), __n128 **))(*(_QWORD *)v18 + 64))(v18, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ConstantOp &>(mlir::mps::ConstantOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v45);
    return 0;
  }
LABEL_18:
  v20 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v20)
    v21 = a2 - 16;
  else
    v21 = 0;
  if ((_DWORD)v20)
  {
    v22 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, v22);
      v53 = (__n128 *)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v54 = v24;
      if (v53)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53))
        {
          goto LABEL_32;
        }
        v25 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v53);
        if (v26)
          break;
      }
LABEL_23:
      if (++v22 == v20)
        goto LABEL_38;
    }
    v27 = 8 * v26;
    while (*v25 != 0x8000000000000000)
    {
      ++v25;
      v27 -= 8;
      if (!v27)
        goto LABEL_23;
    }
LABEL_32:
    v46[0].n128_u64[0] = (unint64_t)"failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v47 = 259;
    v44[0] = v46;
    v28 = *(_QWORD *)(a4 + 16);
    if (v28 && mlir::RewriterBase::Listener::classof(v28))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v28 + 64))(v28, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ConstantOp &>(mlir::mps::ConstantOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v44);
    return 0;
  }
LABEL_38:
  v48 = *a3;
  v49 = *((_BYTE *)a3 + 16);
  v31 = (__n128 *)*((_QWORD *)a3 + 3);
  v50 = v31;
  if (v31)
  {
    v32 = *(void **)(v31->n128_u64[0] + 136);
    if (v32 != &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v31 = 0;
    v53 = v31;
    if (v32 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    {
      mlir::mps::MPSBufferTensorAttr::getHandle(&v53, v46);
      Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v53);
      Manager = mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v34);
      v36 = v46[0].n128_u64[0];
      v37 = (pthread_rwlock_t **)(Manager + 48);
      llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(Manager + 48));
      ++*(_QWORD *)(v36 + 88);
      llvm::sys::RWMutexImpl::unlock_shared(v37);
    }
  }
  v38 = *v10;
  v51 = a3[2];
  v52 = v38;
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, &v48, a4);
  v39 = v50;
  if (v50)
  {
    v40 = *(void **)(v50->n128_u64[0] + 136);
    if (v40 != &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v39 = 0;
    v53 = v39;
    if (v40 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    {
      mlir::mps::MPSBufferTensorAttr::getHandle(&v53, v46);
      v41 = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v53);
      v43 = mlir::mps::MPSResourceBlobManagerInterface::getManager(v41, v42);
      mlir::mps::MPSResourceBlobManagerInterface::decrementResourceRefcount(v43, v46[0].n128_i64[0]);
    }
  }
  return v29;
}

void mlir::`anonymous namespace'::ConvertConstant::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *OperandRange;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ZinIrHalH13g *v36;
  _QWORD *Value;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *ArgOperands;
  uint64_t v42;
  char v43;
  pthread_rwlock_t *v44[68];

  v44[67] = *(pthread_rwlock_t **)MEMORY[0x24BDAC8D0];
  v40 = a2;
  mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v44, *(const mlir::TypeConverter **)(a1 + 96));
  v5 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v40) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  Value = mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)&v40);
  v38 = v16;
  ArgOperands = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value);
  v42 = v17;
  OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  v19 = mlir::TypeConverter::convertType((uint64_t)v44, OperandRange);
  v20 = (uint64_t)Value;
  v21 = v38;
  LOBYTE(ArgOperands) = 0;
  v43 = 0;
  v22 = (uint64_t *)mlir::BaseMemRefType::cloneWith(&v39, (uint64_t)&ArgOperands, v19);
  v23 = (uint64_t)v22;
  if (!v22)
    goto LABEL_20;
  v24 = *v22;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *(unsigned int *)(v24 + 16);
  if (!(_DWORD)v26)
    goto LABEL_20;
  v27 = *(_QWORD **)(v24 + 8);
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_20:
    v33 = 0;
  ArgOperands = mlir::rewriteElementsAttr(v20, v21, v23, v33, 0);
  v42 = v34;
  v35 = v40;
  v36 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v40 + 24), (uint64_t *)&v39, &ArgOperands);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v35, v36);
  mlir::TypeConverter::~TypeConverter(v44);
}

BOOL mlir::mps::MPSResourceBlobManagerInterface::decrementResourceRefcount(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t **v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;

  v3 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(a1 + 48));
  if (*(_QWORD *)(a2 + 88) == 1)
  {
    *(_QWORD *)(a2 + 88) = 0;
    if (*(_BYTE *)(a2 + 80))
    {
      v4 = *(_QWORD *)(a2 + 64);
      if (v4 >= 8)
      {
        v5 = (_QWORD *)(a2 + 40);
        v6 = (_QWORD *)(a2 + 40);
        if ((v4 & 2) == 0)
          v6 = (_QWORD *)*v5;
        (*(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(v4 & 0xFFFFFFFFFFFFFFF8))(v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
        v7 = *(_QWORD *)(a2 + 64);
        if (v7 >= 8)
        {
          if ((v7 & 4) != 0)
          {
            if ((v7 & 2) == 0)
              v5 = (_QWORD *)*v5;
            (*(void (**)(_QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))(v5);
          }
          if ((v7 & 2) == 0)
            llvm::deallocate_buffer(*(llvm **)(a2 + 40), *(void **)(a2 + 48));
        }
      }
      *(_BYTE *)(a2 + 80) = 0;
    }
  }
  else
  {
    --*(_QWORD *)(a2 + 88);
  }
  return llvm::sys::RWMutexImpl::unlock_shared(v3);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ConstantOp &>(mlir::mps::ConstantOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::`anonymous namespace'::`anonymous namespace'::canonicalizeType(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *Shape;
  uint64_t v5;
  uint64_t v6;
  void *OperandRange;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  mlir::AffineMap *v24;
  mlir::AffineMap *v25;
  uint64_t v26;
  uint64_t LayerSchedule;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  void *RankPromotionTypeForANE;
  uint64_t v33;
  _QWORD v34[6];

  v34[5] = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v31 = a3;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v30);
  if (mlir::ShapedType::getNumElements(Shape, v5) == 1
    && (mlir::ShapedType::getShape((mlir::ShapedType *)&v30), v6 <= 3))
  {
    OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v30);
    v8 = mlir::TypeConverter::convertType(a1, OperandRange);
    if (!v8)
      v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v30);
    mlir::getRankPromotionShapeForANE((uint64_t)v30, v31, (uint64_t **)&RankPromotionTypeForANE);
    v9 = mlir::MemRefType::get((uint64_t *)RankPromotionTypeForANE, (mlir::AffineMap *)v33, v8, 0, 0, 0);
    if (RankPromotionTypeForANE != v34)
      free(RankPromotionTypeForANE);
  }
  else
  {
    v10 = (_QWORD *)mlir::TypeConverter::convertType(a1, v30);
    v11 = (uint64_t)v10;
    v29 = v10;
    if (!v10)
      goto LABEL_16;
    v12 = *v10;
    v13 = mlir::TypeID::get<mlir::ShapedType>();
    v14 = *(unsigned int *)(v12 + 16);
    if (!(_DWORD)v14)
      goto LABEL_16;
    v15 = *(_QWORD **)(v12 + 8);
    v16 = &v15[2 * v14];
    do
    {
      v17 = v14 >> 1;
      v18 = &v15[2 * (v14 >> 1)];
      v20 = *v18;
      v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13)
        v15 = v19;
      else
        v14 = v17;
    }
    while (v14);
    if (v15 != v16 && *v15 == v13)
      v21 = v15[1];
    else
LABEL_16:
      v21 = 0;
    RankPromotionTypeForANE = (void *)mlir::getRankPromotionTypeForANE(v11, v21);
    v33 = v22;
    v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
    v25 = v24;
    v26 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RankPromotionTypeForANE);
    LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v29);
    return mlir::MemRefType::get(v23, v25, v26, 0, LayerSchedule);
  }
  return v9;
}

mlir::TypeConverter *mlir::TypeConverter::TypeConverter(mlir::TypeConverter *this, const mlir::TypeConverter *a2)
{
  char *v4;

  *(_QWORD *)this = off_24C0341E0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0x400000000;
  if (*((_DWORD *)a2 + 4))
    llvm::SmallVectorImpl<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>::operator=((uint64_t)v4, (uint64_t)a2 + 8);
  *((_QWORD *)this + 19) = (char *)this + 168;
  *((_QWORD *)this + 20) = 0x200000000;
  if (*((_DWORD *)a2 + 40))
    llvm::SmallVectorImpl<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>::operator=((uint64_t)this + 152, (uint64_t)a2 + 152);
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_QWORD *)this + 30) = 0x200000000;
  if (*((_DWORD *)a2 + 60))
    llvm::SmallVectorImpl<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>::operator=((uint64_t)this + 232, (uint64_t)a2 + 232);
  *((_QWORD *)this + 39) = (char *)this + 328;
  *((_QWORD *)this + 40) = 0x200000000;
  if (*((_DWORD *)a2 + 80))
    llvm::SmallVectorImpl<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>::operator=((uint64_t)this + 312, (uint64_t)a2 + 312);
  *((_QWORD *)this + 49) = (char *)this + 408;
  *((_QWORD *)this + 50) = 0x200000000;
  if (*((_DWORD *)a2 + 100))
    llvm::SmallVectorImpl<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>::operator=((uint64_t)this + 392, (uint64_t)a2 + 392);
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::TypeConverter *)((char *)this + 520));
  *((_QWORD *)this + 66) = 0;
  return this;
}

uint64_t llvm::SmallVectorImpl<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 < v4)
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if ((_DWORD)v5)
        {
          v6 = *(_QWORD **)a1;
          for (i = 4 * v5; i * 8; i -= 4)
          {
            v8 = (_QWORD *)v6[i - 1];
            if (&v6[i - 4] == v8)
            {
              v8 = &v6[i - 4];
              v9 = 4;
            }
            else
            {
              if (!v8)
                continue;
              v9 = 5;
            }
            (*(void (**)(void))(*v8 + 8 * v9))();
          }
        }
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::grow(a1, v4);
        goto LABEL_40;
      }
      if (!(_DWORD)v5)
      {
LABEL_40:
        v5 = 0;
LABEL_41:
        v25 = *(unsigned int *)(a2 + 8);
        if (v5 != v25)
        {
          v26 = *(_QWORD **)a2;
          v27 = *(_QWORD *)a1 + 32 * v5;
          v28 = &v26[4 * v5];
          v29 = 32 * v25 - 32 * v5;
          do
          {
            v30 = (_QWORD *)v28[3];
            if (v30)
            {
              if (v28 == v30)
              {
                *(_QWORD *)(v27 + 24) = v27;
                (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v28[3] + 24))(v28[3], v27);
              }
              else
              {
                *(_QWORD *)(v27 + 24) = (*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30);
              }
            }
            else
            {
              *(_QWORD *)(v27 + 24) = 0;
            }
            v28 += 4;
            v27 += 32;
            v29 -= 32;
          }
          while (v29);
        }
LABEL_51:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
      v19 = *(_QWORD **)a2;
      v20 = *(_QWORD **)a1;
      v21 = 32 * v5;
      while (1)
      {
        v24 = (_QWORD *)v19[3];
        if (v24)
        {
          if (v19 == v24)
          {
            v37 = v36;
            (*(void (**)(_QWORD *, _QWORD *))(*v19 + 24))(v19, v36);
          }
          else
          {
            v37 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
          }
        }
        else
        {
          v37 = 0;
        }
        std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v36, v20);
        v22 = v37;
        if (v37 == v36)
        {
          v22 = v36;
          v23 = 4;
        }
        else
        {
          if (!v37)
            goto LABEL_30;
          v23 = 5;
        }
        (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_30:
        v19 += 4;
        v20 += 4;
        v21 -= 32;
        if (!v21)
          goto LABEL_41;
      }
    }
    if ((_DWORD)v4)
    {
      v10 = 0;
      v11 = *(_QWORD **)a2;
      v12 = *(_QWORD **)a1;
      while (1)
      {
        v15 = &v11[v10];
        v16 = (_QWORD *)v11[v10 + 3];
        if (v16)
        {
          if (v15 == v16)
          {
            v37 = v36;
            (*(void (**)(_QWORD *, _QWORD *))(*v15 + 24))(v15, v36);
          }
          else
          {
            v37 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v16 + 16))(v11[v10 + 3]);
          }
        }
        else
        {
          v37 = 0;
        }
        std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v36, &v12[v10]);
        v13 = v37;
        if (v37 == v36)
        {
          v13 = v36;
          v14 = 4;
        }
        else
        {
          if (!v37)
            goto LABEL_16;
          v14 = 5;
        }
        (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
        v10 += 4;
        if (4 * v4 == v10)
        {
          v17 = &v12[v10];
          v18 = *(_QWORD **)a1;
          v5 = *(unsigned int *)(a1 + 8);
          goto LABEL_50;
        }
      }
    }
    v18 = *(_QWORD **)a1;
    v17 = *(_QWORD **)a1;
LABEL_50:
    v31 = &v18[4 * v5];
    if (v31 == v17)
      goto LABEL_51;
    while (1)
    {
      v35 = v31 - 4;
      v33 = (_QWORD *)*(v31 - 1);
      if (v31 - 4 == v33)
      {
        v33 = v31 - 4;
        v34 = 4;
      }
      else
      {
        if (!v33)
          goto LABEL_55;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_55:
      v31 = v35;
      if (v35 == v17)
        goto LABEL_51;
    }
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<std::function<std::optional<mlir::LogicalResult> ()(mlir::Type,llvm::SmallVectorImpl<mlir::Type> &)>,false>::grow(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (_QWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v16);
  v5 = v4;
  v6 = *(_QWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 32 * v7;
    v9 = v4;
    do
    {
      v10 = (_QWORD *)v6[3];
      if (v10)
      {
        if (v6 == v10)
        {
          v9[3] = v9;
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v6[3] + 24))(v6[3], v9);
        }
        else
        {
          v9[3] = v10;
          v6[3] = 0;
        }
      }
      else
      {
        v9[3] = 0;
      }
      v9 += 4;
      v6 += 4;
      v8 -= 32;
    }
    while (v8);
    v6 = *(_QWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 4 * v11;
      while (1)
      {
        v13 = (_QWORD *)v6[v12 - 1];
        if (&v6[v12 - 4] == v13)
        {
          v13 = &v6[v12 - 4];
          v14 = 4;
        }
        else
        {
          if (!v13)
            goto LABEL_13;
          v14 = 5;
        }
        (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_13:
        v12 -= 4;
        if (!(v12 * 8))
        {
          v6 = *(_QWORD **)a1;
          break;
        }
      }
    }
  }
  v15 = v16;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v15;
}

void mlir::`anonymous namespace'::ConvertCropResize::~ConvertCropResize(mlir::_anonymous_namespace_::ConvertCropResize *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CropResizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CropResizeOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::CropResizeOpGenericAdaptorBase::CropResizeOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CropResizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::CropResizeOpGenericAdaptorBase::CropResizeOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::CropResizeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropResizeOp &>(mlir::mps::CropResizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropResizeOp &>(mlir::mps::CropResizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

void mlir::`anonymous namespace'::ConvertCropResize::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *Shape;
  uint64_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  unint64_t IndexFromDim;
  char v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  mlir::AffineMap *v40;
  uint64_t OperandRange;
  mlir::Builder *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  llvm::APFloatBase *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  llvm::APFloatBase *v59;
  void *v60;
  char v61;
  char IsEqual;
  float v63;
  mlir::MLIRContext *v64;
  unint64_t v65;
  uint64_t v66;
  mlir::MLIRContext *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  ZinIrHalH13g *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const void *v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  mlir::AffineMap *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  mlir::AffineMap *v106;
  uint64_t v107;
  uint64_t ResizeHeight;
  unsigned int ResizeWidth;
  uint64_t IntegerType;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t *v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int InterpolationMode;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t *v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t *v192;
  _QWORD *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  mlir::MLIRContext *v197;
  llvm::APFloatBase *F16FloatAttr;
  uint64_t *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  unint64_t v205;
  unint64_t *v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[2];
  _QWORD v214[2];
  uint64_t v215;
  uint64_t v216;
  _QWORD v217[2];
  uint64_t v218;
  _QWORD v219[2];
  void *v220;
  uint64_t v221;
  _BYTE v222[40];
  void *v223[2];
  _QWORD v224[5];
  void *v225;
  uint64_t v226;
  _QWORD v227[5];
  void *v228;
  uint64_t v229;
  _QWORD v230[5];
  void *v231;
  uint64_t v232;
  _BYTE v233[32];
  uint64_t v234;
  void *v235;
  uint64_t v236;
  _QWORD v237[2];
  void *GOCConstant;
  uint64_t v239;
  _QWORD v240[9];
  ZinIrHalH13g *v241;
  uint64_t v242;
  _BYTE v243[40];
  uint64_t *v244;
  uint64_t v245;
  _BYTE v246[40];
  __int128 v247;
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v218 = a2;
  v247 = *(_OWORD *)(a3 + 96);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v247, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v217[0] = v5;
  v217[1] = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v218) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  GOCConstant = v16;
  v239 = v26;
  Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&GOCConstant);
  v29 = v27;
  v244 = (uint64_t *)v246;
  v245 = 0x500000000;
  v30 = 8 * v27;
  if ((unint64_t)(8 * v27) < 0x29)
  {
    v31 = 0;
    v32 = (uint64_t *)v246;
    if (!v29)
    {
LABEL_26:
      LODWORD(v245) = v31 + (v30 >> 3);
      llvm::SmallVectorImpl<long long>::insert((uint64_t)&v244, (uint64_t)v32, 3uLL, 1uLL);
      IndexFromDim = mlir::anec::getIndexFromDim(0, v245);
      if (!v34)
        goto LABEL_175;
      v35 = IndexFromDim;
      v36 = mlir::anec::getIndexFromDim(3, v245);
      if (!v37)
        goto LABEL_175;
      v38 = v244;
      v39 = v244[v35];
      v244[v35] = v244[v36];
      v38[v36] = v39;
      v40 = (mlir::AffineMap *)v245;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v217);
      v216 = mlir::MemRefType::get(v38, v40, OperandRange, 0, 0, 0);
      v42 = (mlir::Builder *)(a4 + 8);
      v43 = *(_QWORD *)(v218 + 24);
      GOCConstant = (void *)mlir::ValueRange::dereference_iterator(&v247, 1);
      v215 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v43, &v216, (uint64_t *)&GOCConstant)- 16;
      v44 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v218) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v44)
        goto LABEL_37;
      v45 = *v44;
      v46 = mlir::TypeID::get<mlir::ShapedType>();
      v47 = *(unsigned int *)(v45 + 16);
      if (!(_DWORD)v47)
        goto LABEL_37;
      v48 = *(_QWORD **)(v45 + 8);
      v49 = &v48[2 * v47];
      do
      {
        v50 = v47 >> 1;
        v51 = &v48[2 * (v47 >> 1)];
        v53 = *v51;
        v52 = v51 + 2;
        v47 += ~(v47 >> 1);
        if (v53 < v46)
          v48 = v52;
        else
          v47 = v50;
      }
      while (v47);
      if (v48 != v49 && *v48 == v46)
        v54 = v48[1];
      else
LABEL_37:
        v54 = 0;
      v214[0] = v44;
      v214[1] = v54;
      mlir::mps::CropResizeOp::getSpatialScale((mlir::mps::CropResizeOp *)&v218, (uint64_t)&GOCConstant);
      v55 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v231, 1.0);
      v56 = llvm::APFloatBase::IEEEsingle(v55);
      llvm::APFloat::Storage::Storage(&v242, &v231, v56);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v231);
      v57 = (void *)v239;
      v58 = v242;
      v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
      if (v57 == (void *)v58)
      {
        if (v60 == v57)
          IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v239, (const llvm::detail::DoubleAPFloat *)&v242);
        else
          IsEqual = llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)&v239, (const llvm::detail::IEEEFloat *)&v242);
        v61 = IsEqual;
      }
      else
      {
        v61 = 0;
      }
      if (v60 == (void *)v242)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v242);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v242);
      if (v60 == (void *)v239)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v239);
        if ((v61 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v239);
        if ((v61 & 1) != 0)
          goto LABEL_62;
      }
      mlir::mps::CropResizeOp::getSpatialScale((mlir::mps::CropResizeOp *)&v218, (uint64_t)&GOCConstant);
      v63 = llvm::APFloat::convertToFloat((llvm::APFloat *)&GOCConstant);
      if (v60 == (void *)v239)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v239);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v239);
      v64 = *(mlir::MLIRContext **)(v218 + 24);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v216);
      *(float *)&v241 = v63;
      v239 = v66;
      v67 = *(mlir::MLIRContext **)(v218 + 24);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v216);
      LODWORD(v231) = 0;
      v242 = v69;
      v225 = 0;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v216);
      v71 = (void *)mlir::anec::getIndexFromDim(4, v70);
      if (!v72)
        goto LABEL_175;
      v225 = v71;
      v73 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v216) + 8 * v71);
      if (v73 == 5)
      {
        v74 = *(_QWORD *)(v218 + 24);
        LODWORD(v231) = 4;
        LODWORD(v228) = 1;
        v75 = (char *)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,unsigned long long &,int,int>((mlir::Builder *)(a4 + 8), v74, &v215, (uint64_t *)&v225, (int *)&v231, (int *)&v228)- 16;
        v76 = *(_QWORD *)(v218 + 24);
        LODWORD(v231) = 0;
        LODWORD(v228) = 4;
        v215 = (uint64_t)mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,unsigned long long &,int,int>((mlir::Builder *)(a4 + 8), v76, &v215, (uint64_t *)&v225, (int *)&v231, (int *)&v228)- 16;
      }
      else
      {
        v75 = 0;
      }
      if (!(_BYTE)v239 || !(_BYTE)v242)
        goto LABEL_175;
      v77 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>((uint64_t *)(a4 + 8), *(_QWORD *)(v218 + 24), &v215, &GOCConstant, &v241);
      v215 = (uint64_t)v77 - 16;
      if (v73 == 5)
      {
        v78 = *(_QWORD *)(v218 + 24);
        v228 = (char *)v77 - 16;
        v229 = (uint64_t)v75;
        mlir::ValueRange::ValueRange((unint64_t *)&v231, (uint64_t)&v228, 2uLL);
        LOBYTE(v223[0]) = 0;
        v215 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Concat,mlir::ValueRange,unsigned long long &,BOOL>((mlir::Builder *)(a4 + 8), v78, (uint64_t *)&v231, (uint64_t *)&v225, (unsigned __int8 *)v223)- 16;
      }
LABEL_62:
      v79 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v247, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v79)
        goto LABEL_71;
      v80 = *v79;
      v81 = mlir::TypeID::get<mlir::ShapedType>();
      v82 = *(unsigned int *)(v80 + 16);
      if (!(_DWORD)v82)
        goto LABEL_71;
      v83 = *(_QWORD **)(v80 + 8);
      v84 = &v83[2 * v82];
      do
      {
        v85 = v82 >> 1;
        v86 = &v83[2 * (v82 >> 1)];
        v88 = *v86;
        v87 = v86 + 2;
        v82 += ~(v82 >> 1);
        if (v88 < v81)
          v83 = v87;
        else
          v82 = v85;
      }
      while (v82);
      if (v83 != v84 && *v83 == v81)
        v89 = v83[1];
      else
LABEL_71:
        v89 = 0;
      v213[0] = v79;
      v213[1] = v89;
      v91 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v213);
      v92 = v90;
      v241 = (ZinIrHalH13g *)v243;
      v242 = 0x500000000;
      if ((unint64_t)(8 * v90) < 0x29)
      {
        v93 = 0;
        if (!v90)
          goto LABEL_77;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v241, v243, (8 * v90) >> 3, 8);
        v93 = v242;
        if (!v92)
        {
LABEL_77:
          LODWORD(v242) = v93 + v92;
          v94 = mlir::anec::getIndexFromDim(4, v245);
          if (v95)
          {
            v96 = v244[v94];
            GOCConstant = (void *)1;
            llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v241, (uint64_t)v241 + 8 * (v96 == 5), (uint64_t *)&GOCConstant);
            v97 = (uint64_t *)v241;
            v98 = (mlir::AffineMap *)v242;
            v99 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v213);
            v212 = mlir::MemRefType::get(v97, v98, v99, 0, 0, 0);
            v100 = *(_QWORD *)(v218 + 24);
            GOCConstant = (void *)mlir::ValueRange::dereference_iterator(&v247, 0);
            v211 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v100, &v212, (uint64_t *)&GOCConstant)- 16;
            if (v96 == 5)
              goto LABEL_88;
            GOCConstant = v240;
            v239 = 0x500000000;
            v101 = v242;
            if (!(_DWORD)v242)
            {
LABEL_86:
              v104 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v214);
              v105 = (uint64_t *)GOCConstant;
              *(_QWORD *)GOCConstant = *v104;
              v106 = (mlir::AffineMap *)v239;
              v107 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v213);
              v231 = (void *)mlir::MemRefType::get(v105, v106, v107, 0, 0, 0);
              v211 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Broadcast,mlir::MemRefType &,mlir::Value &>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v218 + 24), (uint64_t *)&v231, &v211)- 16;
              if (GOCConstant != v240)
                free(GOCConstant);
LABEL_88:
              GOCConstant = v240;
              v239 = 0x400000000;
              v240[8] = 4;
              ResizeHeight = mlir::mps::CropResizeOp::getResizeHeight((mlir::mps::CropResizeOp *)&v218);
              ResizeWidth = mlir::mps::CropResizeOp::getResizeWidth((mlir::mps::CropResizeOp *)&v218);
              v235 = v237;
              v237[0] = ResizeHeight;
              v237[1] = ResizeWidth;
              v236 = 0x200000002;
              v231 = (void *)2;
              IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
              v111 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v231, 1, IntegerType, 0);
              v112 = v111;
              if (!v111)
                goto LABEL_97;
              v113 = *v111;
              v114 = mlir::TypeID::get<mlir::ShapedType>();
              v115 = *(unsigned int *)(v113 + 16);
              if (!(_DWORD)v115)
                goto LABEL_97;
              v116 = *(_QWORD **)(v113 + 8);
              v117 = &v116[2 * v115];
              do
              {
                v118 = v115 >> 1;
                v119 = &v116[2 * (v115 >> 1)];
                v121 = *v119;
                v120 = v119 + 2;
                v115 += ~(v115 >> 1);
                if (v121 < v114)
                  v116 = v120;
                else
                  v115 = v118;
              }
              while (v115);
              if (v116 != v117 && *v116 == v114)
                v122 = v116[1];
              else
LABEL_97:
                v122 = 0;
              v123 = mlir::DenseElementsAttr::getFromRawBuffer(v112, v122, v235, 8 * v236, 8, 1, 0);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"output_dims", 11, v123);
              v231 = v233;
              memset(v233, 0, sizeof(v233));
              v234 = 0;
              v232 = 0x500000005;
              v124 = 0;
              if (mlir::mps::CropResizeOp::getNormalizeCoordinates((mlir::mps::CropResizeOp *)&v218))
                v124 = 2 * (mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v218) == 1);
              if (mlir::mps::CropResizeOp::getNormalizeCoordinates((mlir::mps::CropResizeOp *)&v218)
                && mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v218) == 2)
              {
                v124 = 1;
              }
              v228 = v230;
              v230[0] = v124;
              v230[1] = v124;
              v230[2] = v124;
              v230[3] = v124;
              v230[4] = v124;
              v229 = 0x500000005;
              v225 = (void *)5;
              v125 = mlir::Builder::getIntegerType(v42, 0x40u, 0);
              v126 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v225, 1, v125, 0);
              v127 = v126;
              if (!v126)
                goto LABEL_112;
              v128 = *v126;
              v129 = mlir::TypeID::get<mlir::ShapedType>();
              v130 = *(unsigned int *)(v128 + 16);
              if (!(_DWORD)v130)
                goto LABEL_112;
              v131 = *(_QWORD **)(v128 + 8);
              v132 = &v131[2 * v130];
              do
              {
                v133 = v130 >> 1;
                v134 = &v131[2 * (v130 >> 1)];
                v136 = *v134;
                v135 = v134 + 2;
                v130 += ~(v130 >> 1);
                if (v136 < v129)
                  v131 = v135;
                else
                  v130 = v133;
              }
              while (v130);
              if (v131 != v132 && *v131 == v129)
                v137 = v131[1];
              else
LABEL_112:
                v137 = 0;
              v138 = mlir::DenseElementsAttr::getFromRawBuffer(v127, v137, v231, 8 * v232, 8, 1, 0);
              v225 = (void *)5;
              v139 = mlir::Builder::getIntegerType(v42, 0x40u, 0);
              v140 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v225, 1, v139, 0);
              v141 = v140;
              if (!v140)
                goto LABEL_122;
              v142 = *v140;
              v143 = mlir::TypeID::get<mlir::ShapedType>();
              v144 = *(unsigned int *)(v142 + 16);
              if (!(_DWORD)v144)
                goto LABEL_122;
              v145 = *(_QWORD **)(v142 + 8);
              v146 = &v145[2 * v144];
              do
              {
                v147 = v144 >> 1;
                v148 = &v145[2 * (v144 >> 1)];
                v150 = *v148;
                v149 = v148 + 2;
                v144 += ~(v144 >> 1);
                if (v150 < v143)
                  v145 = v149;
                else
                  v144 = v147;
              }
              while (v144);
              if (v145 != v146 && *v145 == v143)
                v151 = v145[1];
              else
LABEL_122:
                v151 = 0;
              v152 = mlir::DenseElementsAttr::getFromRawBuffer(v141, v151, v228, 8 * v229, 8, 1, 0);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"normalized_range", 16, v138);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"coordinate_mode", 15, v152);
              InterpolationMode = mlir::mps::CropResizeOp::getInterpolationMode((mlir::mps::CropResizeOp *)&v218);
              v225 = v227;
              v227[0] = InterpolationMode != 1;
              v227[1] = v227[0];
              v227[2] = v227[0];
              v227[3] = v227[0];
              v227[4] = v227[0];
              v226 = 0x500000005;
              v223[0] = (void *)5;
              v154 = mlir::Builder::getIntegerType(v42, 0x40u, 0);
              v155 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v223, 1, v154, 0);
              v156 = v155;
              if (!v155)
                goto LABEL_132;
              v157 = *v155;
              v158 = mlir::TypeID::get<mlir::ShapedType>();
              v159 = *(unsigned int *)(v157 + 16);
              if (!(_DWORD)v159)
                goto LABEL_132;
              v160 = *(_QWORD **)(v157 + 8);
              v161 = &v160[2 * v159];
              do
              {
                v162 = v159 >> 1;
                v163 = &v160[2 * (v159 >> 1)];
                v165 = *v163;
                v164 = v163 + 2;
                v159 += ~(v159 >> 1);
                if (v165 < v158)
                  v160 = v164;
                else
                  v159 = v162;
              }
              while (v159);
              if (v160 != v161 && *v160 == v158)
                v166 = v160[1];
              else
LABEL_132:
                v166 = 0;
              v167 = mlir::DenseElementsAttr::getFromRawBuffer(v156, v166, v225, 8 * v226, 8, 1, 0);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"sampling_method", 15, v167);
              v168 = qword_207AC6AA0[(int)mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v218)];
              v223[0] = v224;
              v224[0] = v168;
              v224[1] = v168;
              v224[2] = v168;
              v224[3] = v168;
              v224[4] = v168;
              v223[1] = (void *)0x500000005;
              v220 = (void *)5;
              v169 = mlir::Builder::getIntegerType(v42, 0x40u, 0);
              v170 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v220, 1, v169, 0);
              v171 = v170;
              if (!v170)
                goto LABEL_142;
              v172 = *v170;
              v173 = mlir::TypeID::get<mlir::ShapedType>();
              v174 = *(unsigned int *)(v172 + 16);
              if (!(_DWORD)v174)
                goto LABEL_142;
              v175 = *(_QWORD **)(v172 + 8);
              v176 = &v175[2 * v174];
              do
              {
                v177 = v174 >> 1;
                v178 = &v175[2 * (v174 >> 1)];
                v180 = *v178;
                v179 = v178 + 2;
                v174 += ~(v174 >> 1);
                if (v180 < v173)
                  v175 = v179;
                else
                  v174 = v177;
              }
              while (v174);
              if (v175 != v176 && *v175 == v173)
                v181 = v175[1];
              else
LABEL_142:
                v181 = 0;
              v182 = mlir::DenseElementsAttr::getFromRawBuffer(v171, v181, v225, 8 * v226, 8, 1, 0);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"sampling_mode", 13, v182);
              v220 = v222;
              memset_pattern16(v222, &xmmword_207A91720, 0x28uLL);
              v221 = 0x500000005;
              v219[0] = 5;
              v183 = mlir::Builder::getIntegerType(v42, 0x40u, 0);
              v184 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v219, 1, v183, 0);
              v185 = v184;
              if (!v184)
                goto LABEL_152;
              v186 = *v184;
              v187 = mlir::TypeID::get<mlir::ShapedType>();
              v188 = *(unsigned int *)(v186 + 16);
              if (!(_DWORD)v188)
                goto LABEL_152;
              v189 = *(_QWORD **)(v186 + 8);
              v190 = &v189[2 * v188];
              do
              {
                v191 = v188 >> 1;
                v192 = &v189[2 * (v188 >> 1)];
                v194 = *v192;
                v193 = v192 + 2;
                v188 += ~(v188 >> 1);
                if (v194 < v187)
                  v189 = v193;
                else
                  v188 = v191;
              }
              while (v188);
              if (v189 != v190 && *v189 == v187)
                v195 = v189[1];
              else
LABEL_152:
                v195 = 0;
              v196 = mlir::DenseElementsAttr::getFromRawBuffer(v185, v195, v220, 8 * v221, 8, 1, 0);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"padding_modes", 13, v196);
              F16FloatAttr = mlir::Builder::getF16FloatAttr((mlir::Float16Type **)v42, 0.0, v197);
              mlir::NamedAttrList::set((uint64_t)&GOCConstant, (uint64_t)"background_value", 16, (uint64_t)F16FloatAttr);
              v199 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
              if (!v199)
                goto LABEL_162;
              v200 = *v199;
              v201 = mlir::TypeID::get<mlir::ShapedType>();
              v202 = *(unsigned int *)(v200 + 16);
              if (!(_DWORD)v202)
                goto LABEL_162;
              v203 = *(_QWORD **)(v200 + 8);
              v204 = &v203[2 * v202];
              do
              {
                v205 = v202 >> 1;
                v206 = &v203[2 * (v202 >> 1)];
                v208 = *v206;
                v207 = v206 + 2;
                v202 += ~(v202 >> 1);
                if (v208 < v201)
                  v203 = v207;
                else
                  v202 = v205;
              }
              while (v202);
              if (v203 != v204 && *v203 == v201)
                v209 = v203[1];
              else
LABEL_162:
                v209 = 0;
              v219[0] = v199;
              v219[1] = v209;
              mlir::ShapedType::getShape((mlir::ShapedType *)v219);
              mlir::Attribute::getContext((mlir::Attribute *)(v218 + 24));
              v210 = (char *)&loc_2075A8700
                   + 4
                   * byte_207AC6970[mlir::mps::CropResizeOp::getCoordinateMode((mlir::mps::CropResizeOp *)&v218)];
              __asm { BR              X10 }
            }
            if (v242 < 6)
            {
              v103 = v240;
              v102 = v242;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&GOCConstant, v240, v242, 8);
              v102 = v242;
              if (!(_DWORD)v242)
              {
LABEL_85:
                LODWORD(v239) = v101;
                goto LABEL_86;
              }
              v103 = GOCConstant;
            }
            memcpy(v103, v241, 8 * v102);
            goto LABEL_85;
          }
LABEL_175:
          std::__throw_bad_optional_access[abi:nn180100]();
        }
      }
      memcpy((char *)v241 + 8 * v93, v91, 8 * v92);
      v93 = v242;
      goto LABEL_77;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v244, v246, (8 * v27) >> 3, 8);
    v31 = v245;
    v32 = v244;
    if (!v29)
      goto LABEL_26;
  }
  memcpy(&v32[v31], Shape, v30);
  v31 = v245;
  v32 = v244;
  goto LABEL_26;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CropResizeOp &>(mlir::mps::CropResizeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.reshape", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.reshape";
    v17[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Reshape,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::InputView,mlir::Value &,unsigned long long &,int,int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5, int *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.input_view", (const unsigned __int8 *)0xF, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.input_view";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::InputView::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.gain_offset_control";
    v19[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::GOC::build(a1, (uint64_t)v21, *a3, *a4 - 16, *a5 - 16);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Concat,mlir::ValueRange,unsigned long long &,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.concat", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.concat";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::Concat::build(a1, (uint64_t)v21, *a3, a3[1], *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Concat,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Broadcast,mlir::MemRefType &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.broadcast", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.broadcast";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Broadcast,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::CropResize,mlir::ValueRange,mlir::NamedAttrList &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.crop_resize", (const unsigned __int8 *)0x10, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.crop_resize";
    v21[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::CropResize::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::CropResize,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertDepthwiseConv3D::~ConvertDepthwiseConv3D(mlir::_anonymous_namespace_::ConvertDepthwiseConv3D *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv3DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv3DOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[80];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DepthwiseConv3DOpGenericAdaptorBase::DepthwiseConv3DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DepthwiseConv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[80];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DepthwiseConv3DOpGenericAdaptorBase::DepthwiseConv3DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DepthwiseConv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[2];
  _QWORD *v32;
  _QWORD v33[4];
  __int16 v34;
  _OWORD v35[6];
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 80);
  v9 = *(_QWORD *)(a3 + 88);
  v36 = v8;
  v37 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 48);
      v35[2] = *(_OWORD *)(a3 + 32);
      v35[3] = v28;
      v29 = *(_OWORD *)(a3 + 80);
      v35[4] = *(_OWORD *)(a3 + 64);
      v35[5] = v29;
      v30 = *(_OWORD *)(a3 + 16);
      v35[0] = *(_OWORD *)a3;
      v35[1] = v30;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v35, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v37 = v23;
      if (v36)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v36);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v33[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v34 = 259;
    v31[0] = v33;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv3DOp &>(mlir::mps::DepthwiseConv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v31);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v31[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v31[1] = v13;
    if (v31[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v37;
    if (v36 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v34 = 259;
  v32 = v33;
  v33[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv3DOp &>(mlir::mps::DepthwiseConv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v32);
  return result;
}

void mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t Result;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ChannelAxis;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t DefiningOp;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t IntegerType;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t Shape;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int PaddingStyle;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  ZinIrHalH13g *v75;
  uint64_t v76;
  mlir::Operation *v77;
  uint64_t v78;
  uint64_t (*v79)(int, uint64_t);
  mlir::Operation *v80;
  mlir::Operation *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91[2];
  uint64_t ArgOperands;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD v105[2];
  _QWORD v106[2];
  _QWORD *v107;
  uint64_t v108;
  mlir::Operation *v109;
  void *Strides;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[24];
  void *v119;
  uint64_t v120;
  _BYTE v121[24];
  pthread_rwlock_t *v122[67];
  __int128 v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v109 = a2;
  v123 = *(_OWORD *)(a3 + 80);
  v6 = *((_QWORD *)a2 + 3);
  v108 = mlir::ValueRange::dereference_iterator(&v123, 0);
  v7 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v123, 1);
  v107 = v7;
  Result = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v109);
  v9 = (uint64_t *)(*(_QWORD *)(v108 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_10;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v106[0] = v9;
  v106[1] = v19;
  v20 = (uint64_t *)(v7[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v20)
    goto LABEL_20;
  v21 = *v20;
  v22 = mlir::TypeID::get<mlir::ShapedType>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_20;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_20:
    v30 = 0;
  v105[0] = v20;
  v105[1] = v30;
  if (*(_QWORD *)(Result + 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v122, *(const mlir::TypeConverter **)(a1 + 96));
  mlir::ShapedType::getShape((mlir::ShapedType *)v106);
  if (v31 == 4 && (mlir::ShapedType::getShape((mlir::ShapedType *)v105), v32 == 4))
  {
    ChannelAxis = (int)mlir::mps::DepthwiseConv3DOp::getChannelAxis((mlir::mps::DepthwiseConv3DOp *)&v109);
    v34 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v109) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v34)
      goto LABEL_34;
    v35 = *v34;
    v36 = mlir::TypeID::get<mlir::ShapedType>();
    v37 = *(unsigned int *)(v35 + 16);
    if (!(_DWORD)v37)
      goto LABEL_34;
    v38 = *(_QWORD **)(v35 + 8);
    v39 = &v38[2 * v37];
    do
    {
      v40 = v37 >> 1;
      v41 = &v38[2 * (v37 >> 1)];
      v43 = *v41;
      v42 = v41 + 2;
      v37 += ~(v37 >> 1);
      if (v43 < v36)
        v38 = v42;
      else
        v37 = v40;
    }
    while (v37);
    if (v38 != v39 && *v38 == v36)
      v44 = v38[1];
    else
LABEL_34:
      v44 = 0;
    Strides = v34;
    v111 = v44;
    mlir::ShapedType::getShape((mlir::ShapedType *)&Strides);
    if (mlir::getPositiveAxis(ChannelAxis, v45) == 1)
    {
      if (*(_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v105) == 1)
      {
        v46 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v105) + 8);
        v47 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v106) + 8);
        v103 = 0;
        v104 = 0;
        v119 = v7;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v119);
        if (!DefiningOp)
          goto LABEL_61;
        v49 = DefiningOp;
        v50 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v49 + 48) + 32))(*(_QWORD *)(v49 + 48), v50))goto LABEL_61;
        Strides = &v112;
        v111 = 0x100000000;
        mlir::Operation::fold(v49, 0, 0, (uint64_t)&Strides);
        v51 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)Strides & 0xFFFFFFFFFFFFFFF8));
        v53 = v51;
        if (v51)
        {
          v103 = v51;
          v104 = v52;
        }
        if (Strides != &v112)
          free(Strides);
        if (v53)
        {
          Strides = (void *)3;
          IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 1), 0x40u, 0);
          v102 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&Strides, 1, IntegerType, 0);
          Strides = (void *)6;
          v55 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 1), 0x40u, 0);
          v101 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&Strides, 1, v55, 0);
          v119 = v121;
          v120 = 0x300000000;
          Strides = (void *)mlir::mps::DepthwiseConv2DOp::getStrides((mlir::mps::DepthwiseConv2DOp *)&v109);
          v56 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
          mlir::getIntValues<unsigned long long>((uint64_t)v56, v57, (uint64_t)&v119, 1);
          if (*(_QWORD *)v119 == 1)
          {
            v58 = mlir::Type::cast<mlir::ShapedType>(&v102);
            v100 = mlir::DenseElementsAttr::getFromRawBuffer(v58, v59, v119, 8 * v120, 8, 1, 0);
            v116 = v118;
            v117 = 0x300000000;
            Strides = (void *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v109);
            v60 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
            mlir::getIntValues<unsigned long long>((uint64_t)v60, v61, (uint64_t)&v116, 1);
            v62 = mlir::Type::cast<mlir::ShapedType>(&v102);
            v99 = mlir::DenseElementsAttr::getFromRawBuffer(v62, v63, v116, 8 * v117, 8, 1, 0);
            Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v105);
            v65 = *((_QWORD *)v116 + 1) * (*(_QWORD *)(Shape + 16) - 1) + 1;
            v66 = mlir::ShapedType::getShape((mlir::ShapedType *)v105);
            v67 = *((_QWORD *)v116 + 2) * (*(_QWORD *)(v66 + 24) - 1) + 1;
            v97 = 0;
            v98 = 0;
            v95 = 0;
            v96 = 0;
            Strides = (void *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v109);
            v68 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
            v70 = v69;
            PaddingStyle = mlir::mps::DepthwiseConv2DOp::getPaddingStyle((mlir::mps::DepthwiseConv2DOp *)&v109);
            v72 = mlir::ShapedType::getShape((mlir::ShapedType *)v106);
            {
              ArgOperands = (uint64_t)mlir::Type::cast<mlir::ShapedType>(&v101);
              v93 = v74;
              Strides = 0;
              v111 = 0;
              v112 = v98;
              v113 = v97;
              v114 = v96;
              v115 = v95;
              v91[0] = (uint64_t)&Strides;
              v91[1] = 6;
              v94 = mlir::DenseIntElementsAttr::get<unsigned long long>(&ArgOperands, v91);
              v91[0] = 0;
              if (v46 / v47 == 1)
              {
                LODWORD(v90) = 1;
                LOBYTE(v89) = 1;
                Strides = 0;
                ArgOperands = 0;
                v75 = mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,int,BOOL,decltype(nullptr),decltype(nullptr)>(a4 + 1, v6, &v108, (uint64_t *)&v107, &v100, &v99, &v94, v91, (int *)&v90, (char *)&v89);
              }
              else
              {
                v90 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v106) + 8);
                ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v103);
                v93 = v82;
                Strides = *(void **)(mlir::ShapedType::getShape((mlir::ShapedType *)v105) + 8);
                v111 = 1;
                v112 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v105) + 16);
                v113 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v105) + 24);
                v83 = (void *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&ArgOperands, (uint64_t)&Strides, 4);
                ArgOperands = mlir::TypeConverter::convertType((uint64_t)v122, v83);
                v84 = (uint64_t)v103;
                v85 = v104;
                v89 = (uint64_t *)v83;
                v86 = mlir::Type::cast<mlir::ShapedType>(&v89);
                Strides = mlir::reshapeElementsAttr(v84, v85, (uint64_t)v86, v87);
                v111 = v88;
                v107 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 1), v6, &ArgOperands, (_QWORD **)&Strides)- 16);
                LOBYTE(v89) = 0;
                Strides = 0;
                ArgOperands = 0;
                v75 = mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,long long &,BOOL,decltype(nullptr),decltype(nullptr)>(a4 + 1, v6, &v108, (uint64_t *)&v107, &v100, &v99, &v94, v91, &v90, (char *)&v89);
              }
              mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, v109, v75);
            }
            else
            {
            }
            if (v116 != v118)
              free(v116);
          }
          else
          {
          }
          if (v119 != v121)
            free(v119);
        }
        else
        {
LABEL_61:
        }
LABEL_60:
        mlir::TypeConverter::~TypeConverter(v122);
      }
      v76 = a4[2];
      if (!v76)
        goto LABEL_60;
      v81 = v109;
      if (!mlir::RewriterBase::Listener::classof(v76))
        goto LABEL_60;
      v78 = *((_QWORD *)v81 + 3);
    }
    else
    {
      v76 = a4[2];
      if (!v76)
        goto LABEL_60;
      v80 = v109;
      if (!mlir::RewriterBase::Listener::classof(v76))
        goto LABEL_60;
      v78 = *((_QWORD *)v80 + 3);
    }
  }
  else
  {
    v76 = a4[2];
    if (!v76)
      goto LABEL_60;
    v77 = v109;
    if (!mlir::RewriterBase::Listener::classof(v76))
      goto LABEL_60;
    v78 = *((_QWORD *)v77 + 3);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(_QWORD *)v76 + 64))(v76, v78, v79, &Strides);
  goto LABEL_60;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DepthwiseConv3DOp &>(mlir::mps::DepthwiseConv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16)))
  else
    return 0;
}

void mlir::getIntValues<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t NumElements;
  unint64_t v7;
  uint64x2_t *v8;
  _QWORD *Type;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64x2_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64x2_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64x2_t *v48;
  uint64_t k;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64x2_t *v55;
  uint64_t m;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v70;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64x2_t *v78;
  uint64x2_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64x2_t *v88;
  unsigned int IntOrFloatBitWidth;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  uint64x2_t v98;
  int32x2_t v99;
  uint64_t v100;
  int32x2_t v101;
  int32x2_t v102;
  int32x2_t v103;
  uint64_t v104;
  uint64x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64x2_t v112;
  int32x2_t v113;
  uint64_t v114;
  int32x2_t v115;
  int32x2_t v116;
  int32x2_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64x2_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64x2_t *v135;
  __int128 v136;
  uint64_t OperandRange;
  _QWORD v138[2];
  __int128 v139;
  _QWORD *v140;
  __int128 v141;
  _QWORD v142[6];

  v142[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v136 = a1;
  *((_QWORD *)&v136 + 1) = a2;
  if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v136) || a4)
    NumElements = mlir::ElementsAttr::getNumElements(v136, *((uint64_t *)&v136 + 1));
  else
    NumElements = 1;
  v7 = *(unsigned int *)(a3 + 8);
  if (NumElements != v7)
  {
    if (NumElements >= v7)
    {
      if (NumElements > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), NumElements, 8);
        v7 = *(unsigned int *)(a3 + 8);
      }
      if (NumElements != v7)
        bzero((void *)(*(_QWORD *)a3 + 8 * v7), 8 * (NumElements - v7));
    }
    *(_DWORD *)(a3 + 8) = NumElements;
  }
  v8 = *(uint64x2_t **)a3;
  v139 = v136;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v139);
  v10 = Type;
  if (!Type)
    goto LABEL_21;
  v11 = *Type;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_21;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_21:
    v20 = 0;
  v138[0] = v10;
  v138[1] = v20;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v138);
  v21 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v139);
  ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v139);
  v24 = v23;
  if (!v21 || a4)
  {
    v25 = mlir::ElementsAttr::getNumElements(v139, *((uint64_t *)&v139 + 1));
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (v25 < 1)
        return;
      goto LABEL_28;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (v25 < 1)
        return;
      goto LABEL_39;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (v25 < 1)
        return;
      if ((unint64_t)v25 >= 2)
      {
        v31 = 0;
        v30 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v32 = 0;
          else
            v32 = v31;
          if (v21)
            v33 = 0;
          else
            v33 = v31 + 1;
          v34 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v33];
          v35 = &v8[v31 / 2];
          v35->i64[0] = *(unsigned __int16 *)&ElementsAttrRawData[2 * v32];
          v35->i64[1] = v34;
          v31 += 2;
        }
        while (v31 != v30);
        goto LABEL_282;
      }
      goto LABEL_48;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (v25 < 1)
        return;
      goto LABEL_66;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (v25 < 1)
        return;
      goto LABEL_73;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (v25 < 1)
        return;
      goto LABEL_89;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (v25 < 1)
        return;
      goto LABEL_105;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (v25 < 1)
        return;
      goto LABEL_125;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
      goto LABEL_136;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
      goto LABEL_143;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
      goto LABEL_159;
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
LABEL_174:
      if ((unint64_t)v25 >= 2)
      {
        v104 = 0;
        v80 = v25 & 0xFFFFFFFFFFFFFFFELL;
        v105 = v8;
        do
        {
          if (v21)
            v106 = 0;
          else
            v106 = v104;
          if (v21)
            v107 = 0;
          else
            v107 = v104 + 1;
          v79.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v106];
          v79.i16[2] = *(_WORD *)&ElementsAttrRawData[2 * v107];
          v79 = vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v79.i8, 0x10uLL)));
          *v105++ = v79;
          v104 += 2;
        }
        while (v104 != v80);
        goto LABEL_324;
      }
      v80 = 0;
      do
      {
        if (v21)
          v133 = 0;
        else
          v133 = v80;
        v8->i64[v80++] = (unint64_t)COERCE_FLOAT(*(unsigned __int16 *)&ElementsAttrRawData[2 * v133] << 16);
LABEL_324:
        ;
      }
      while (v25 != v80);
      return;
    }
  }
  else
  {
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      v25 = 1;
LABEL_28:
      for (i = 0; i != v25; ++i)
      {
        if (v21)
          v27 = 0;
        else
          v27 = i;
        v8->i64[i] = ElementsAttrRawData[v27];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      v25 = 1;
LABEL_39:
      for (j = 0; j != v25; ++j)
      {
        if (v21)
          v29 = 0;
        else
          v29 = j;
        v8->i64[j] = (char)ElementsAttrRawData[v29];
      }
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      v25 = 1;
LABEL_48:
      v30 = 0;
      do
      {
        if (v21)
          v124 = 0;
        else
          v124 = v30;
        v8->i64[v30++] = *(unsigned __int16 *)&ElementsAttrRawData[2 * v124];
LABEL_282:
        ;
      }
      while (v25 != v30);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      v25 = 1;
LABEL_66:
      if ((unint64_t)v25 >= 2)
      {
        v38 = 0;
        v36 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v39 = 0;
          else
            v39 = v38;
          if (v21)
            v40 = 0;
          else
            v40 = v38 + 1;
          v41 = *(__int16 *)&ElementsAttrRawData[2 * v40];
          v42 = &v8[v38 / 2];
          v42->i64[0] = *(__int16 *)&ElementsAttrRawData[2 * v39];
          v42->i64[1] = v41;
          v38 += 2;
        }
        while (v38 != v36);
        goto LABEL_288;
      }
      v36 = 0;
      do
      {
        if (v21)
          v125 = 0;
        else
          v125 = v36;
        v8->i64[v36++] = *(__int16 *)&ElementsAttrRawData[2 * v125];
LABEL_288:
        ;
      }
      while (v25 != v36);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      v25 = 1;
LABEL_73:
      if ((unint64_t)v25 >= 2)
      {
        v44 = 0;
        v37 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v45 = 0;
          else
            v45 = v44;
          if (v21)
            v46 = 0;
          else
            v46 = v44 + 1;
          v47 = *(unsigned int *)&ElementsAttrRawData[4 * v46];
          v48 = &v8[v44 / 2];
          v48->i64[0] = *(unsigned int *)&ElementsAttrRawData[4 * v45];
          v48->i64[1] = v47;
          v44 += 2;
        }
        while (v44 != v37);
        goto LABEL_294;
      }
      v37 = 0;
      do
      {
        if (v21)
          v126 = 0;
        else
          v126 = v37;
        v8->i64[v37++] = *(unsigned int *)&ElementsAttrRawData[4 * v126];
LABEL_294:
        ;
      }
      while (v25 != v37);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      v25 = 1;
LABEL_89:
      if ((unint64_t)v25 >= 2)
      {
        v51 = 0;
        v43 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v52 = 0;
          else
            v52 = v51;
          if (v21)
            v53 = 0;
          else
            v53 = v51 + 1;
          v54 = *(int *)&ElementsAttrRawData[4 * v53];
          v55 = &v8[v51 / 2];
          v55->i64[0] = *(int *)&ElementsAttrRawData[4 * v52];
          v55->i64[1] = v54;
          v51 += 2;
        }
        while (v51 != v43);
        goto LABEL_300;
      }
      v43 = 0;
      do
      {
        if (v21)
          v127 = 0;
        else
          v127 = v43;
        v8->i64[v43++] = *(int *)&ElementsAttrRawData[4 * v127];
LABEL_300:
        ;
      }
      while (v25 != v43);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      v25 = 1;
LABEL_105:
      for (k = 0; k != v25; ++k)
      {
        if (v21)
          v50 = 0;
        else
          v50 = k;
        v8->i64[k] = *(_QWORD *)&ElementsAttrRawData[8 * v50];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      v25 = 1;
LABEL_125:
      for (m = 0; m != v25; ++m)
      {
        if (v21)
          v57 = 0;
        else
          v57 = m;
        v8->i64[m] = *(_QWORD *)&ElementsAttrRawData[8 * v57];
      }
      return;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      v25 = 1;
LABEL_136:
      if ((unint64_t)v25 >= 2)
      {
        v60 = 0;
        v58 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v61 = 0;
          else
            v61 = v60;
          if (v21)
            v62 = 0;
          else
            v62 = v60 + 1;
          _H0 = *(_WORD *)&ElementsAttrRawData[2 * v61];
          _H1 = *(_WORD *)&ElementsAttrRawData[2 * v62];
          __asm { FCVT            S0, H0 }
          v70 = (unint64_t)_S0;
          __asm { FCVT            S0, H1 }
          v72 = (unint64_t *)&v8[v60 / 2];
          *v72 = v70;
          v72[1] = (unint64_t)_S0;
          v60 += 2;
        }
        while (v60 != v58);
        goto LABEL_306;
      }
      v58 = 0;
      do
      {
        if (v21)
          v128 = 0;
        else
          v128 = v58;
        _H0 = *(_WORD *)&ElementsAttrRawData[2 * v128];
        __asm { FCVT            S0, H0 }
        v8->i64[v58++] = (unint64_t)_S0;
LABEL_306:
        ;
      }
      while (v25 != v58);
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v25 = 1;
LABEL_143:
      if ((unint64_t)v25 >= 2)
      {
        v74 = 0;
        v59 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v75 = 0;
          else
            v75 = v74;
          if (v21)
            v76 = 0;
          else
            v76 = v74 + 1;
          v77 = (unint64_t)*(float *)&ElementsAttrRawData[4 * v76];
          v78 = &v8[v74 / 2];
          v78->i64[0] = (unint64_t)*(float *)&ElementsAttrRawData[4 * v75];
          v78->i64[1] = v77;
          v74 += 2;
        }
        while (v74 != v59);
        goto LABEL_312;
      }
      v59 = 0;
      do
      {
        if (v21)
          v131 = 0;
        else
          v131 = v59;
        v8->i64[v59++] = (unint64_t)*(float *)&ElementsAttrRawData[4 * v131];
LABEL_312:
        ;
      }
      while (v25 != v59);
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      v25 = 1;
LABEL_159:
      if ((unint64_t)v25 >= 2)
      {
        v84 = 0;
        v73 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v85 = 0;
          else
            v85 = v84;
          if (v21)
            v86 = 0;
          else
            v86 = v84 + 1;
          v87 = (unint64_t)*(double *)&ElementsAttrRawData[8 * v86];
          v88 = &v8[v84 / 2];
          v88->i64[0] = (unint64_t)*(double *)&ElementsAttrRawData[8 * v85];
          v88->i64[1] = v87;
          v84 += 2;
        }
        while (v84 != v73);
        goto LABEL_318;
      }
      v73 = 0;
      do
      {
        if (v21)
          v132 = 0;
        else
          v132 = v73;
        v8->i64[v73++] = (unint64_t)*(double *)&ElementsAttrRawData[8 * v132];
LABEL_318:
        ;
      }
      while (v25 != v73);
      return;
    }
    v25 = 1;
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      goto LABEL_174;
  }
  if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    if (!v24)
      return;
    v90 = 0;
    v91 = ~(-1 << IntOrFloatBitWidth);
    v92 = v25;
    v93 = 8 / IntOrFloatBitWidth;
    while (1)
    {
      v94 = v90 * v93;
      v95 = v25 - v90 * v93;
      if (v95 >= v93)
        v95 = 8 / IntOrFloatBitWidth;
      if (!v95)
        goto LABEL_194;
      v96 = *ElementsAttrRawData;
      if (v92 >= v93)
        v97 = 8 / IntOrFloatBitWidth;
      else
        v97 = v92;
      v98 = (uint64x2_t)vdupq_n_s64(v97 - 1);
      v99 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)xmmword_207A80930));
      if ((v99.i8[0] & 1) != 0)
        v8->i64[v94] = v91 & v96;
      if ((v99.i8[4] & 1) != 0)
        v8->i64[v94 + 1] = (v96 >> IntOrFloatBitWidth) & v91;
      v100 = ((_BYTE)v97 + 1) & 0x1E;
      if (v100 == 2)
        goto LABEL_194;
      v101 = vmovn_s64((int64x2_t)vcgtq_u64(v98, (uint64x2_t)xmmword_207A7F3C0));
      if ((v101.i8[0] & 1) != 0)
      {
        v8[1].i64[v94] = (v96 >> (2 * IntOrFloatBitWidth)) & v91;
        if ((v101.i8[4] & 1) != 0)
          goto LABEL_211;
      }
      else if ((v101.i8[4] & 1) != 0)
      {
LABEL_211:
        v8[1].i64[v94 + 1] = (v96 >> (3 * IntOrFloatBitWidth)) & v91;
        if (v100 == 4)
          goto LABEL_194;
        goto LABEL_212;
      }
      if (v100 == 4)
        goto LABEL_194;
LABEL_212:
      v102 = vmovn_s64((int64x2_t)vcgtq_u64(v98, (uint64x2_t)xmmword_207AB5460));
      if ((v102.i8[0] & 1) != 0)
      {
        v8[2].i64[v94] = (v96 >> (4 * IntOrFloatBitWidth)) & v91;
        if ((v102.i8[4] & 1) == 0)
          goto LABEL_214;
      }
      else if ((v102.i8[4] & 1) == 0)
      {
LABEL_214:
        if (v100 != 6)
          goto LABEL_218;
        goto LABEL_194;
      }
      v8[2].i64[v94 + 1] = (v96 >> (5 * IntOrFloatBitWidth)) & v91;
      if (v100 != 6)
      {
LABEL_218:
        v103 = vmovn_s64((int64x2_t)vcgtq_u64(v98, (uint64x2_t)xmmword_207AB5470));
        if ((v103.i8[0] & 1) != 0)
          v8[3].i64[v94] = (v96 >> (6 * IntOrFloatBitWidth)) & v91;
        if ((v103.i8[4] & 1) != 0)
          v8[3].i64[v94 + 1] = (v96 >> (7 * IntOrFloatBitWidth)) & v91;
      }
LABEL_194:
      ++v90;
      v92 -= v93;
      ++ElementsAttrRawData;
      if (!--v24)
        return;
    }
  }
  v135 = v8;
  if (v21)
    v81 = 1;
  else
    v81 = v25;
  v82 = v142;
  v140 = v142;
  v141 = xmmword_207AB5450;
  if (v81)
  {
    if (v81 < 0x29)
    {
      v83 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v140, v142, v81, 1);
      v82 = v140;
      v83 = v141;
    }
    if (v81 != v83)
      bzero((char *)v82 + v83, v81 - v83);
    *(_QWORD *)&v141 = v81;
  }
  if (v24)
  {
    v108 = (BOOL *)v82 + 3;
    do
    {
      if (v81 >= 8)
        v109 = 8;
      else
        v109 = v81;
      if (!v109)
        goto LABEL_237;
      if (v81 >= 8)
        v110 = 8;
      else
        v110 = v81;
      v111 = *ElementsAttrRawData;
      v112 = (uint64x2_t)vdupq_n_s64(v110 - 1);
      v113 = vmovn_s64((int64x2_t)vcgeq_u64(v112, (uint64x2_t)xmmword_207A80930));
      if ((v113.i8[0] & 1) != 0)
        *(v108 - 3) = v111 & 1;
      if ((v113.i8[4] & 1) != 0)
        *(v108 - 2) = (v111 & 2) != 0;
      v114 = ((_BYTE)v110 + 1) & 0x1E;
      if (v114 == 2)
        goto LABEL_237;
      v115 = vmovn_s64((int64x2_t)vcgtq_u64(v112, (uint64x2_t)xmmword_207A7F3C0));
      if ((v115.i8[0] & 1) != 0)
      {
        *(v108 - 1) = (v111 & 4) != 0;
        if ((v115.i8[4] & 1) != 0)
          goto LABEL_255;
      }
      else if ((v115.i8[4] & 1) != 0)
      {
LABEL_255:
        *v108 = (v111 & 8) != 0;
        if (v114 == 4)
          goto LABEL_237;
        goto LABEL_256;
      }
      if (v114 == 4)
        goto LABEL_237;
LABEL_256:
      v116 = vmovn_s64((int64x2_t)vcgtq_u64(v112, (uint64x2_t)xmmword_207AB5460));
      if ((v116.i8[0] & 1) != 0)
      {
        v108[1] = (v111 & 0x10) != 0;
        if ((v116.i8[4] & 1) == 0)
          goto LABEL_258;
      }
      else if ((v116.i8[4] & 1) == 0)
      {
LABEL_258:
        if (v114 != 6)
          goto LABEL_262;
        goto LABEL_237;
      }
      v108[2] = (v111 & 0x20) != 0;
      if (v114 != 6)
      {
LABEL_262:
        v117 = vmovn_s64((int64x2_t)vcgtq_u64(v112, (uint64x2_t)xmmword_207AB5470));
        if ((v117.i8[0] & 1) != 0)
          v108[3] = (v111 & 0x40) != 0;
        if ((v117.i8[4] & 1) != 0)
          v108[4] = v111 >> 7;
      }
LABEL_237:
      ++ElementsAttrRawData;
      v108 += 8;
      v81 -= 8;
      --v24;
    }
    while (v24);
  }
  if (v25 >= 1)
  {
    if (v25 == 1)
    {
      v119 = 0;
      goto LABEL_326;
    }
    v118 = 0;
    v119 = v25 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v21)
        v120 = 0;
      else
        v120 = v118;
      if (v21)
        v121 = 0;
      else
        v121 = v118 + 1;
      v122 = *((unsigned __int8 *)v82 + v121);
      v123 = &v135[v118 / 2];
      v123->i64[0] = *((unsigned __int8 *)v82 + v120);
      v123->i64[1] = v122;
      v118 += 2;
    }
    while (v118 != v119);
    while (v25 != v119)
    {
LABEL_326:
      if (v21)
        v134 = 0;
      else
        v134 = v119;
      v135->i64[v119++] = *((unsigned __int8 *)v82 + v134);
    }
  }
  if (v82 != v142)
    free(v82);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16)))
  else
    return 0;
}

uint64_t mlir::`anonymous namespace'::getExplicitConv2DPadding(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t *a10, unint64_t *a11, unint64_t *a12, unint64_t *a13)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x24BDAC8D0];
  v13 = 1;
  switch(a3)
  {
    case 0:
      v25 = v27;
      v26 = 0x800000000;
      mlir::getIntValues<unsigned long long>(a1, a2, (uint64_t)&v25, 1);
      v20 = v25;
      v21 = (char *)v25 + 8 * v26;
      if (v25 == v21 - 32)
      {
LABEL_12:
        *a10 = *((_QWORD *)v21 - 4);
        *a11 = *((_QWORD *)v21 - 3);
        *a12 = *((_QWORD *)v21 - 2);
        *a13 = *((_QWORD *)v21 - 1);
        v13 = 1;
        if (v20 == v27)
          return v13;
        goto LABEL_16;
      }
      v22 = 8 * v26 - 32;
      v23 = v25;
      while (!*v23)
      {
        ++v23;
        v22 -= 8;
        if (!v22)
          goto LABEL_12;
      }
      v13 = 0;
      if (v25 != v27)
LABEL_16:
        free(v20);
      return v13;
    case 1:
      *a10 = 0;
      *a11 = 0;
      *a12 = 0;
      *a13 = 0;
      return v13;
    case 2:
    case 4:
      v14 = *(_QWORD *)(a4 + 16) % *(_QWORD *)(a6 + 8);
      if (!v14)
        v14 = *(_QWORD *)(a6 + 8);
      v15 = (a8 - v14) & ~((a8 - v14) >> 63);
      v16 = *(_QWORD *)(a4 + 24) % *(_QWORD *)(a6 + 16);
      if (!v16)
        v16 = *(_QWORD *)(a6 + 16);
      v17 = (a9 - v16) & ~((a9 - v16) >> 63);
      *a10 = v15 >> 1;
      *a11 = v15 - (v15 >> 1);
      *a12 = v17 >> 1;
      *a13 = v17 - (v17 >> 1);
      if (a3 == 4)
      {
        v18 = *a10;
        *a10 = *a11;
        *a11 = v18;
        v19 = *a12;
        *a12 = *a13;
        *a13 = v19;
      }
      return v13;
    default:
      return v13;
  }
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16)))
  else
    return 0;
}

uint64_t mlir::DenseIntElementsAttr::get<unsigned long long>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
    v3 = *a2;
  else
    v3 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(*a1, a1[1], v3, 8 * v2, 8, 1, 0);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,int,BOOL,decltype(nullptr),decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, int *a9, char *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[40];

  v29[38] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.convolution", (const unsigned __int8 *)0x10, Context);
  if (!v20)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"anec.convolution";
    v27[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::anec::Convolution::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, 0, 0);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

uint64_t mlir::ShapedType::clone(mlir::MemoryMapperInterface *a1, uint64_t a2, uint64_t a3)
{
  uint64_t OperandRange;
  __int128 v6;
  char v7;

  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  v7 = 1;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange(a1);
  return mlir::ShapedType::cloneWith((uint64_t *)a1, &v6, OperandRange);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingMode &,long long &,BOOL,decltype(nullptr),decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[40];

  v29[38] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.convolution", (const unsigned __int8 *)0x10, Context);
  if (!v20)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"anec.convolution";
    v27[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::anec::Convolution::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, 0, 0);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "CWConv3DOp must have 4D inputs\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "CWConv3DOp must use NCHW data format");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "CWConv3DOp must use (1, C*ChannelMult, H, W) weights format");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "CWConv3DOp must have constant weights");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Conv stride must be 1 for batch axis\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDepthwiseConv3D::matchAndRewriteWithStaticShapes(mlir::mps::DepthwiseConv3DOp,mlir::mps::DepthwiseConv3DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "Unsupported padding values for Conv2D\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::AddOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::AddOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::AddOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::AddOpGenericAdaptorBase::AddOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::AddOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  uint64_t GOC;
  __int128 v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v28 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6, 8);
    v9 = v26;
    v8 = v25;
    v28 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v28, v10);
    v10 = ++*((_QWORD *)&v28 + 1);
  }
  while ((_QWORD)v28 != v7 || v10 != v6);
  v13 = v26;
LABEL_11:
  LODWORD(v26) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v24, (uint64_t)v25, v26);
  v28 = v24;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 1);
  {
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v14;
    v19 = (uint64_t)v15;
  }
  else
  {
      goto LABEL_17;
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v15;
    v19 = (uint64_t)v14;
  }
  if (GOC)
  {
    v22 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
    mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, (unsigned int *)a2, (uint64_t)&v22, 1);
    goto LABEL_18;
  }
LABEL_17:
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v25);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
LABEL_18:
  if (v25 != v27)
    free(v25);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::`anonymous namespace'::`anonymous namespace'::assembleBroadcastOperands(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t BroadcastOperands;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v6 + 56);
  v9 = **(_QWORD **)a3;
  v10 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  {
    v13 = v12;
  }
  else
  {
      return;
    BroadcastOperands = v14;
  }
  *(_DWORD *)(a3 + 8) = 0;
  if (*(_DWORD *)(a3 + 12) > 1u)
  {
    v15 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), 2uLL, 8);
    v15 = *(unsigned int *)(a3 + 8);
  }
  v16 = (uint64_t *)(*(_QWORD *)a3 + 8 * v15);
  *v16 = BroadcastOperands;
  v16[1] = v13;
  *(_DWORD *)(a3 + 8) += 2;
}

BOOL mlir::`anonymous namespace'::`anonymous namespace'::isBroadcastWithFullRank(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *Shape;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD v33[2];

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
    goto LABEL_10;
  v4 = *v3;
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v6 = *(unsigned int *)(v4 + 16);
  if (!(_DWORD)v6)
    goto LABEL_10;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = &v7[2 * v6];
  do
  {
    v9 = v6 >> 1;
    v10 = &v7[2 * (v6 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5)
      v7 = v11;
    else
      v6 = v9;
  }
  while (v6);
  if (v7 != v8 && *v7 == v5)
    v13 = v7[1];
  else
LABEL_10:
    v13 = 0;
  v33[0] = v3;
  v33[1] = v13;
  v14 = (uint64_t *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v14)
    goto LABEL_20;
  v15 = *v14;
  v16 = mlir::TypeID::get<mlir::ShapedType>();
  v17 = *(unsigned int *)(v15 + 16);
  if (!(_DWORD)v17)
    goto LABEL_20;
  v18 = *(_QWORD **)(v15 + 8);
  v19 = &v18[2 * v17];
  do
  {
    v20 = v17 >> 1;
    v21 = &v18[2 * (v17 >> 1)];
    v23 = *v21;
    v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16)
      v18 = v22;
    else
      v17 = v20;
  }
  while (v17);
  if (v18 != v19 && *v18 == v16)
    v24 = v18[1];
  else
LABEL_20:
    v24 = 0;
  v32[0] = v14;
  v32[1] = v24;
  mlir::ShapedType::getShape((mlir::ShapedType *)v33);
  v26 = v25;
  mlir::ShapedType::getShape((mlir::ShapedType *)v32);
  if (v26 >= v27)
    return 0;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v33);
  if (mlir::ShapedType::getNumElements(Shape, v29) < 2)
    return 0;
  mlir::ShapedType::getShape((mlir::ShapedType *)v32);
  return v30 > 3;
}

uint64_t mlir::`anonymous namespace'::`anonymous namespace'::getBroadcastOperands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *Shape;
  uint64_t v34;
  size_t v35;
  unsigned int v36;
  mlir::AffineMap *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t ElementTypeOrSelf;
  uint64_t v43;
  uint64_t v45[2];
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x24BDAC8D0];
  v47 = a4;
  v48 = a5;
  v10 = (uint64_t *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_10;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_10;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_10:
    v20 = 0;
  v46[0] = v10;
  v46[1] = v20;
  v21 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v21)
    goto LABEL_20;
  v22 = *v21;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_20;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_20:
    v31 = 0;
  v45[0] = (uint64_t)v21;
  v45[1] = v31;
  Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v45);
  v34 = v32;
  v49 = v51;
  v50 = 0x400000000;
  v35 = 8 * v32;
  if ((unint64_t)(8 * v32) < 0x21)
  {
    v36 = 0;
    if (!v32)
      goto LABEL_26;
    goto LABEL_25;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, (8 * v32) >> 3, 8);
  v36 = v50;
  if (v34)
  {
LABEL_25:
    memcpy((char *)v49 + 8 * v36, Shape, v35);
    v36 = v50;
  }
LABEL_26:
  LODWORD(v50) = v36 + (v35 >> 3);
  mlir::ShapedType::getShape((mlir::ShapedType *)v46);
  v37 = (mlir::AffineMap *)v50;
  if (v38 != v50)
  {
    v39 = v49;
    mlir::ShapedType::getShape((mlir::ShapedType *)v46);
    llvm::SmallVectorImpl<long long>::insert((uint64_t)&v49, (uint64_t)v39, v40 - v50, 1uLL);
    v37 = (mlir::AffineMap *)v50;
  }
  v41 = (uint64_t *)v49;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a5);
  v45[0] = mlir::MemRefType::get(v41, v37, ElementTypeOrSelf, 0, 0, 0);
  mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a6 + 8), a1, v45, &v48);
  v43 = v47;
  if (v49 != v51)
    free(v49);
  return v43;
}

uint64_t mlir::`anonymous namespace'::`anonymous namespace'::isCompatibleWithGOC(uint64_t a1, _QWORD *a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *Shape;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD v43[2];
  void *__s2;
  uint64_t v45;
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  __s2 = a2;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__s2);
  if (!DefiningOp)
    return 0;
  v5 = DefiningOp;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    return 0;
  v7 = (uint64_t *)(a2[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    goto LABEL_12;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_12;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_12:
    v17 = 0;
  v43[0] = v7;
  v43[1] = v17;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v43);
  if (mlir::ShapedType::getNumElements(Shape, v19) == 1)
    return 1;
  v21 = mlir::ShapedType::getShape((mlir::ShapedType *)v43);
  if (v22 < 3)
    return 0;
  v23 = (uint64_t *)v21;
  v24 = v22;
  v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v43);
  if (mlir::ShapedType::getNumElements(v25, v26) != *(uint64_t *)((char *)v23
                                                                + ((uint64_t)((v24 << 32) - 0x300000000) >> 29)))
    return 0;
  v27 = (uint64_t *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_26;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_26;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_26:
    v37 = 0;
  __s2 = v27;
  v45 = v37;
  v38 = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&__s2);
  v40 = v39;
  __s2 = v46;
  v45 = 0x400000000;
  if ((mlir::OpTrait::util::getBroadcastedShape((uint64_t *)v38, v39, v23, v24, (uint64_t)&__s2) & 1) != 0)
  {
    v41 = __s2;
    v20 = v40 == v45 && memcmp(v38, __s2, 8 * v45) == 0;
  }
  else
  {
    v20 = 0;
    v41 = __s2;
  }
  if (v41 != v46)
    free(v41);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,llvm::SmallVector<mlir::Value,2u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.add", (const unsigned __int8 *)8, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.add";
    v15[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Ceil::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MultiplyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MultiplyOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MultiplyOpGenericAdaptorBase::MultiplyOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MultiplyOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MultiplyOpGenericAdaptorBase::MultiplyOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::MultiplyOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MultiplyOp &>(mlir::mps::MultiplyOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MultiplyOp &>(mlir::mps::MultiplyOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  uint64_t GOC;
  __int128 v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v28 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6, 8);
    v9 = v26;
    v8 = v25;
    v28 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v28, v10);
    v10 = ++*((_QWORD *)&v28 + 1);
  }
  while ((_QWORD)v28 != v7 || v10 != v6);
  v13 = v26;
LABEL_11:
  LODWORD(v26) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v24, (uint64_t)v25, v26);
  v28 = v24;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 1);
  {
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v14;
    v19 = (uint64_t)v15;
  }
  else
  {
      goto LABEL_17;
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v15;
    v19 = (uint64_t)v14;
  }
  if (GOC)
  {
    v22 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
    mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, (unsigned int *)a2, (uint64_t)&v22, 1);
    goto LABEL_18;
  }
LABEL_17:
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v25);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
LABEL_18:
  if (v25 != v27)
    free(v25);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MultiplyOp &>(mlir::mps::MultiplyOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseMult,llvm::SmallVector<mlir::Value,2u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.mult", (const unsigned __int8 *)9, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.mult";
    v15[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Ceil::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SubtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SubtractOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SubtractOpGenericAdaptorBase::SubtractOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SubtractOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SubtractOpGenericAdaptorBase::SubtractOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SubtractOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SubtractOp &>(mlir::mps::SubtractOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SubtractOp &>(mlir::mps::SubtractOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, mlir::Float16Type **a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  mlir::MLIRContext *v19;
  uint64_t F16Type;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  ZinIrHalH13g *v25;
  ZinIrHalH13g *v26;
  _QWORD *v28[2];
  uint64_t ElementTypeOrSelf;
  uint64_t v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  __int128 v35;
  uint64_t v36;
  uint64_t v37[2];

  v37[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v34;
  v32 = v34;
  v33 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v35 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v6, 8);
    v9 = v33;
    v8 = v32;
    v35 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v35, v10);
    v10 = ++*((_QWORD *)&v35 + 1);
  }
  while ((_QWORD)v35 != v7 || v10 != v6);
  v13 = v33;
LABEL_11:
  LODWORD(v33) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v31, (uint64_t)v32, v33);
  v30 = a2;
  v35 = v31;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v35, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v35, 1);
  v16 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v30);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
  {
    v17 = (unsigned int *)v30;
    if (v28[0])
    {
      v37[0] = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v28);
      v18 = v37;
LABEL_14:
      mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v17, (uint64_t)v18, 1);
      goto LABEL_20;
    }
  }
  else if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    {
      v37[0] = 1;
      F16Type = mlir::Builder::getF16Type(a4 + 1, v19);
      v21 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v37, 1, F16Type, 0);
      v28[0] = mlir::createSplatF16ElementsAttr(v21, -1.0);
      v28[1] = v22;
      v23 = *(_QWORD *)(v30 + 24);
      v36 = 1;
      v24 = mlir::Builder::getF16Type(a4 + 1, (mlir::MLIRContext *)v22);
      v37[0] = mlir::MemRefType::get(&v36, (mlir::AffineMap *)1, v24, 0, 0, 0);
      v25 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 1), v23, v37, v28);
      v17 = (unsigned int *)v30;
      if (v37[0])
      {
        v36 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v37);
        v18 = &v36;
        goto LABEL_14;
      }
    }
  }
  v26 = mlir::OpBuilder::create<mlir::anec::ElementwiseSub,llvm::SmallVector<mlir::Value,2u> &>((uint64_t *)a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v32);
  (*((void (**)(mlir::Float16Type **, uint64_t, ZinIrHalH13g *))*a4 + 4))(a4, a2, v26);
LABEL_20:
  if (v32 != v34)
    free(v32);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SubtractOp &>(mlir::mps::SubtractOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseSub,llvm::SmallVector<mlir::Value,2u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sub", (const unsigned __int8 *)8, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.sub";
    v15[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Ceil::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSub,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MaximumOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MaximumOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MaximumOpGenericAdaptorBase::MaximumOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MaximumOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MaximumOpGenericAdaptorBase::MaximumOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::MaximumOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MaximumOp &>(mlir::mps::MaximumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MaximumOp &>(mlir::mps::MaximumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwiseMax,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MaximumOp &>(mlir::mps::MaximumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseMax,llvm::SmallVector<mlir::Value,2u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.max", (const unsigned __int8 *)8, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.max";
    v15[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Ceil::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMax,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MinimumOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MinimumOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MinimumOpGenericAdaptorBase::MinimumOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MinimumOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MinimumOpGenericAdaptorBase::MinimumOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::MinimumOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MinimumOp &>(mlir::mps::MinimumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MinimumOp &>(mlir::mps::MinimumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwiseMin,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MinimumOp &>(mlir::mps::MinimumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseMin,llvm::SmallVector<mlir::Value,2u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.min", (const unsigned __int8 *)8, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.min";
    v15[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Ceil::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMin,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Plus<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)2>::~ConvertElementwiseBinaryA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PowerOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PowerOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PowerOpGenericAdaptorBase::PowerOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PowerOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PowerOpGenericAdaptorBase::PowerOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::PowerOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PowerOp &>(mlir::mps::PowerOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PowerOp &>(mlir::mps::PowerOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwisePower,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PowerOp &>(mlir::mps::PowerOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwisePower,llvm::SmallVector<mlir::Value,2u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.power", (const unsigned __int8 *)0xA, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.power";
    v15[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Ceil::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwisePower,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  uint64_t GOC;
  __int128 v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v28 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6, 8);
    v9 = v26;
    v8 = v25;
    v28 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v28, v10);
    v10 = ++*((_QWORD *)&v28 + 1);
  }
  while ((_QWORD)v28 != v7 || v10 != v6);
  v13 = v26;
LABEL_11:
  LODWORD(v26) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v24, (uint64_t)v25, v26);
  v28 = v24;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 1);
  {
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v14;
    v19 = (uint64_t)v15;
  }
  else
  {
      goto LABEL_17;
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v15;
    v19 = (uint64_t)v14;
  }
  if (GOC)
  {
    v22 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
    mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, (unsigned int *)a2, (uint64_t)&v22, 1);
    goto LABEL_18;
  }
LABEL_17:
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v25);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
LABEL_18:
  if (v25 != v27)
    free(v25);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  uint64_t GOC;
  __int128 v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v28 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6, 8);
    v9 = v26;
    v8 = v25;
    v28 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v28, v10);
    v10 = ++*((_QWORD *)&v28 + 1);
  }
  while ((_QWORD)v28 != v7 || v10 != v6);
  v13 = v26;
LABEL_11:
  LODWORD(v26) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v24, (uint64_t)v25, v26);
  v28 = v24;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 1);
  {
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v14;
    v19 = (uint64_t)v15;
  }
  else
  {
      goto LABEL_17;
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v15;
    v19 = (uint64_t)v14;
  }
  if (GOC)
  {
    v22 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
    mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, (unsigned int *)a2, (uint64_t)&v22, 1);
    goto LABEL_18;
  }
LABEL_17:
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v25);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
LABEL_18:
  if (v25 != v27)
    free(v25);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, mlir::Float16Type **a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  mlir::MLIRContext *v19;
  uint64_t F16Type;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  ZinIrHalH13g *v25;
  ZinIrHalH13g *v26;
  _QWORD *v28[2];
  uint64_t ElementTypeOrSelf;
  uint64_t v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  __int128 v35;
  uint64_t v36;
  uint64_t v37[2];

  v37[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v34;
  v32 = v34;
  v33 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v35 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v6, 8);
    v9 = v33;
    v8 = v32;
    v35 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v35, v10);
    v10 = ++*((_QWORD *)&v35 + 1);
  }
  while ((_QWORD)v35 != v7 || v10 != v6);
  v13 = v33;
LABEL_11:
  LODWORD(v33) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v31, (uint64_t)v32, v33);
  v30 = a2;
  v35 = v31;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v35, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v35, 1);
  v16 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v30);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
  {
    v17 = (unsigned int *)v30;
    if (v28[0])
    {
      v37[0] = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v28);
      v18 = v37;
LABEL_14:
      mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v17, (uint64_t)v18, 1);
      goto LABEL_20;
    }
  }
  else if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    {
      v37[0] = 1;
      F16Type = mlir::Builder::getF16Type(a4 + 1, v19);
      v21 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v37, 1, F16Type, 0);
      v28[0] = mlir::createSplatF16ElementsAttr(v21, -1.0);
      v28[1] = v22;
      v23 = *(_QWORD *)(v30 + 24);
      v36 = 1;
      v24 = mlir::Builder::getF16Type(a4 + 1, (mlir::MLIRContext *)v22);
      v37[0] = mlir::MemRefType::get(&v36, (mlir::AffineMap *)1, v24, 0, 0, 0);
      v25 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 1), v23, v37, v28);
      v17 = (unsigned int *)v30;
      if (v37[0])
      {
        v36 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v37);
        v18 = &v36;
        goto LABEL_14;
      }
    }
  }
  v26 = mlir::OpBuilder::create<mlir::anec::ElementwiseSub,llvm::SmallVector<mlir::Value,2u> &>((uint64_t *)a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v32);
  (*((void (**)(mlir::Float16Type **, uint64_t, ZinIrHalH13g *))*a4 + 4))(a4, a2, v26);
LABEL_20:
  if (v32 != v34)
    free(v32);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwiseMax,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwiseMin,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)1>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwisePower,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::AddOp,mlir::anec::ElementwiseAdd,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  uint64_t GOC;
  __int128 v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v28 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6, 8);
    v9 = v26;
    v8 = v25;
    v28 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v28, v10);
    v10 = ++*((_QWORD *)&v28 + 1);
  }
  while ((_QWORD)v28 != v7 || v10 != v6);
  v13 = v26;
LABEL_11:
  LODWORD(v26) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v24, (uint64_t)v25, v26);
  v28 = v24;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 1);
  {
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v14;
    v19 = (uint64_t)v15;
  }
  else
  {
      goto LABEL_17;
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v15;
    v19 = (uint64_t)v14;
  }
  if (GOC)
  {
    v22 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
    mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, (unsigned int *)a2, (uint64_t)&v22, 1);
    goto LABEL_18;
  }
LABEL_17:
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v25);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
LABEL_18:
  if (v25 != v27)
    free(v25);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MultiplyOp,mlir::anec::ElementwiseMult,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  mlir::MLIRContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  uint64_t GOC;
  __int128 v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v27;
  v25 = v27;
  v26 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v28 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v6, 8);
    v9 = v26;
    v8 = v25;
    v28 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v28, v10);
    v10 = ++*((_QWORD *)&v28 + 1);
  }
  while ((_QWORD)v28 != v7 || v10 != v6);
  v13 = v26;
LABEL_11:
  LODWORD(v26) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v24, (uint64_t)v25, v26);
  v28 = v24;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v28, 1);
  {
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v14;
    v19 = (uint64_t)v15;
  }
  else
  {
      goto LABEL_17;
    v16 = *(mlir::MLIRContext **)(a2 + 24);
    v17 = (uint64_t)a4;
    v18 = (uint64_t)v15;
    v19 = (uint64_t)v14;
  }
  if (GOC)
  {
    v22 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
    mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, (unsigned int *)a2, (uint64_t)&v22, 1);
    goto LABEL_18;
  }
LABEL_17:
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v25);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
LABEL_18:
  if (v25 != v27)
    free(v25);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::SubtractOp,mlir::anec::ElementwiseSub,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, mlir::Float16Type **a4)
{
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  mlir::MLIRContext *v19;
  uint64_t F16Type;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  ZinIrHalH13g *v25;
  ZinIrHalH13g *v26;
  _QWORD *v28[2];
  uint64_t ElementTypeOrSelf;
  uint64_t v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  __int128 v35;
  uint64_t v36;
  uint64_t v37[2];

  v37[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v34;
  v32 = v34;
  v33 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v35 = v7;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v6, 8);
    v9 = v33;
    v8 = v32;
    v35 = v7;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v35, v10);
    v10 = ++*((_QWORD *)&v35 + 1);
  }
  while ((_QWORD)v35 != v7 || v10 != v6);
  v13 = v33;
LABEL_11:
  LODWORD(v33) = v13 + v6;
  mlir::ValueRange::ValueRange((unint64_t *)&v31, (uint64_t)v32, v33);
  v30 = a2;
  v35 = v31;
  v14 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v35, 0);
  v15 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v35, 1);
  v16 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v30);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
  {
    v17 = (unsigned int *)v30;
    if (v28[0])
    {
      v37[0] = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v28);
      v18 = v37;
LABEL_14:
      mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v17, (uint64_t)v18, 1);
      goto LABEL_20;
    }
  }
  else if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    {
      v37[0] = 1;
      F16Type = mlir::Builder::getF16Type(a4 + 1, v19);
      v21 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v37, 1, F16Type, 0);
      v28[0] = mlir::createSplatF16ElementsAttr(v21, -1.0);
      v28[1] = v22;
      v23 = *(_QWORD *)(v30 + 24);
      v36 = 1;
      v24 = mlir::Builder::getF16Type(a4 + 1, (mlir::MLIRContext *)v22);
      v37[0] = mlir::MemRefType::get(&v36, (mlir::AffineMap *)1, v24, 0, 0, 0);
      v25 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 1), v23, v37, v28);
      v17 = (unsigned int *)v30;
      if (v37[0])
      {
        v36 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v37);
        v18 = &v36;
        goto LABEL_14;
      }
    }
  }
  v26 = mlir::OpBuilder::create<mlir::anec::ElementwiseSub,llvm::SmallVector<mlir::Value,2u> &>((uint64_t *)a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v32);
  (*((void (**)(mlir::Float16Type **, uint64_t, ZinIrHalH13g *))*a4 + 4))(a4, a2, v26);
LABEL_20:
  if (v32 != v34)
    free(v32);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MaximumOp,mlir::anec::ElementwiseMax,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwiseMax,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::MinimumOp,mlir::anec::ElementwiseMin,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwiseMin,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertElementwiseBinaryA14Minus<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)0>::~ConvertElementwiseBinaryA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseBinary<mlir::mps::PowerOp,mlir::anec::ElementwisePower,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  ZinIrHalH13g *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v8 = v19;
  v17 = v19;
  v18 = 0x200000000;
  if (v6 < 3)
  {
    v9 = 0;
    v20 = v7;
    v21 = 0;
    if (!v6)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v6, 8);
    v9 = v18;
    v8 = v17;
    v20 = v7;
    v21 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v8[8 * v9];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v20, v10);
    v10 = ++v21;
  }
  while (v20 != v7 || v10 != v6);
  v13 = v18;
LABEL_11:
  LODWORD(v18) = v13 + v6;
  mlir::ValueRange::ValueRange(&v16, (uint64_t)v17, v18);
  v14 = mlir::OpBuilder::create<mlir::anec::ElementwisePower,llvm::SmallVector<mlir::Value,2u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v17);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v14);
  if (v17 != v19)
    free(v17);
  return 1;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::AbsoluteOp,mlir::anec::ElementwiseAbs>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C0321F8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075B0330()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::AbsoluteOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::AbsoluteOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::AbsoluteOpGenericAdaptorBase::AbsoluteOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::AbsoluteOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::AbsoluteOpGenericAdaptorBase::AbsoluteOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::AbsoluteOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AbsoluteOp &>(mlir::mps::AbsoluteOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AbsoluteOp &>(mlir::mps::AbsoluteOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::AbsoluteOp,mlir::anec::ElementwiseAbs>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::ElementwiseAbs,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::DenseMap<std::pair<unsigned int,std::string> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *buffer;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  BOOL v28;
  int v29;

  v6 = (unint64_t)(*a3 - *a2) >> 5;
  if (!(_DWORD)v6)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_12;
  }
  v7 = (4 * (int)v6 / 3u + 1) | ((unint64_t)(4 * (int)v6 / 3u + 1) >> 1);
  v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
  LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v10)
    goto LABEL_12;
  v11 = (v10 - 1) & 0x7FFFFFFFFFFFFFFLL;
  if (!v11)
  {
    v14 = buffer;
LABEL_10:
    v17 = &buffer[8 * v10];
    do
    {
      *v14 = -1;
      v14 += 8;
    }
    while (v14 != v17);
    goto LABEL_12;
  }
  v12 = v11 + 1;
  v13 = (v11 + 1) & 0xFFFFFFFFFFFFFFELL;
  v14 = &buffer[8 * v13];
  v15 = buffer + 8;
  v16 = v13;
  do
  {
    *(v15 - 8) = -1;
    *v15 = -1;
    v15 += 16;
    v16 -= 2;
  }
  while (v16);
  if (v12 != v13)
    goto LABEL_10;
LABEL_12:
  v18 = *a2;
  v19 = *a3;
  if (v18 != v19)
  {
    while (1)
    {
      v24 = *(_DWORD *)(a1 + 16);
      if (!v24)
        break;
      v20 = v24 - 1;
      v21 = (37 * *(_DWORD *)v18) & v20;
      v22 = (_DWORD *)(*(_QWORD *)a1 + 32 * v21);
      v23 = *v22;
      if (*(_DWORD *)v18 != *v22)
      {
        v26 = 0;
        v27 = 1;
        while (v23 != -1)
        {
          if (v26)
            v28 = 0;
          else
            v28 = v23 == -2;
          if (v28)
            v26 = v22;
          v29 = v21 + v27++;
          v21 = v29 & v20;
          v22 = (_DWORD *)(*(_QWORD *)a1 + 32 * v21);
          v23 = *v22;
          if (*(_DWORD *)v18 == *v22)
            goto LABEL_15;
        }
        if (v26)
          v25 = (uint64_t)v26;
        else
          v25 = (uint64_t)v22;
        goto LABEL_18;
      }
LABEL_15:
      v18 += 32;
      if (v18 == v19)
        return a1;
    }
    v25 = 0;
LABEL_18:
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>,unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::InsertIntoBucket<unsigned int const&,std::string const&>(a1, v25, (_DWORD *)v18, (__int128 *)(v18 + 8));
    goto LABEL_15;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>,unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::InsertIntoBucket<unsigned int const&,std::string const&>(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  int v8;
  unsigned int v9;
  std::string *v10;
  __int128 v11;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::grow(a1, v9);
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = (37 * *a3) & v14;
    a2 = *(_QWORD *)a1 + 32 * v15;
    v16 = *(_DWORD *)a2;
    if (*a3 != *(_DWORD *)a2)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -2;
        if (v19)
          v17 = a2;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        a2 = *(_QWORD *)a1 + 32 * v15;
        v16 = *(_DWORD *)a2;
        if (*a3 == *(_DWORD *)a2)
          goto LABEL_3;
      }
      if (v17)
        a2 = v17;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a2 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = *a3;
  v10 = (std::string *)(a2 + 8);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return a2;
}

_DWORD *llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = (char *)(32 * v3);
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>,unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::moveFromOldBuckets(a1, v4, (int *)&v10[(_QWORD)v4]);
    llvm::deallocate_buffer((llvm *)v4, v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = (v11 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = v12 + 1;
      v14 = (v12 + 1) & 0xFFFFFFFFFFFFFFELL;
      v15 = &result[8 * v14];
      v16 = result + 8;
      v17 = v14;
      do
      {
        *(v16 - 8) = -1;
        *v16 = -1;
        v16 += 16;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14)
        return result;
    }
    else
    {
      v15 = result;
    }
    v18 = &result[8 * v11];
    do
    {
      *v15 = -1;
      v15 += 8;
    }
    while (v15 != v18);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>,unsigned int,std::string,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::string>>::moveFromOldBuckets(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  __int128 v25;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = (v6 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = v8 + 1;
      v10 = (v8 + 1) & 0xFFFFFFFFFFFFFFELL;
      v11 = &v7[8 * v10];
      v12 = v7 + 8;
      v13 = v10;
      do
      {
        *(v12 - 8) = -1;
        *v12 = -1;
        v12 += 16;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_10;
    }
    else
    {
      v11 = *(_DWORD **)a1;
    }
    v14 = &v7[8 * v6];
    do
    {
      *v11 = -1;
      v11 += 8;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      v15 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v16 = *(_DWORD *)(a1 + 16);
        if (v16)
        {
          v17 = v16 - 1;
          v18 = (v16 - 1) & (37 * v15);
          v19 = *(_QWORD *)a1 + 32 * v18;
          v20 = *(_DWORD *)v19;
          if (v15 != *(_DWORD *)v19)
          {
            v21 = 0;
            v22 = 1;
            while (v20 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v20 == -2;
              if (v23)
                v21 = v19;
              v24 = v18 + v22++;
              v18 = v24 & v17;
              v19 = *(_QWORD *)a1 + 32 * v18;
              v20 = *(_DWORD *)v19;
              if (v15 == *(_DWORD *)v19)
                goto LABEL_26;
            }
            if (v21)
              v19 = v21;
          }
        }
        else
        {
          v19 = 0;
        }
LABEL_26:
        *(_DWORD *)v19 = v15;
        v25 = *(_OWORD *)(v4 + 2);
        *(_QWORD *)(v19 + 24) = *((_QWORD *)v4 + 3);
        *(_OWORD *)(v19 + 8) = v25;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = 0;
        *((_QWORD *)v4 + 1) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (*((char *)v4 + 31) < 0)
          operator delete(*((void **)v4 + 1));
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

void llvm::SmallVectorImpl<std::pair<llvm::APFloat,std::string>>::append<std::pair<llvm::APFloat,std::string> const*,void>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm::detail::IEEEFloat *v14;
  const llvm::detail::DoubleAPFloat *v15;
  std::string *v16;
  const std::string::value_type **v17;
  __int128 v18;
  unint64_t v19;

  v5 = a1;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
  v7 = a1[2];
  if (v6 + v7 > (unint64_t)a1[3])
  {
    v19 = 0;
    v8 = a1 + 4;
    v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v6 + v7, 56, &v19);
    llvm::SmallVectorTemplateBase<std::pair<llvm::APFloat,std::string>,false>::moveElementsForGrow(v5, (uint64_t)v9);
    v10 = v19;
    a1 = *(unsigned int **)v5;
    if (*(unsigned int **)v5 != v8)
      free(a1);
    *(_QWORD *)v5 = v9;
    v5[3] = v10;
    LODWORD(v7) = v5[2];
  }
  if (a2 != a3)
  {
    v11 = *(_QWORD *)v5 + 56 * v7;
    v12 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    v13 = 0;
    do
    {
      v14 = (llvm::detail::IEEEFloat *)(v11 + v13 + 8);
      v15 = (const llvm::detail::DoubleAPFloat *)(a2 + v13 + 8);
      if (v12 == *(void **)v15)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, v15);
      else
        llvm::detail::IEEEFloat::IEEEFloat(v14, v15);
      v16 = (std::string *)(v11 + v13 + 32);
      v17 = (const std::string::value_type **)(a2 + v13 + 32);
      if (*(char *)(a2 + v13 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *v17, *(_QWORD *)(a2 + v13 + 40));
      }
      else
      {
        v18 = *(_OWORD *)v17;
        *(_QWORD *)(v11 + v13 + 48) = *(_QWORD *)(a2 + v13 + 48);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
      }
      v13 += 56;
    }
    while (a2 + v13 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + v6;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::APFloat,std::string>,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::detail::DoubleAPFloat *v17;

  v2 = a1[2];
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    v7 = a2 + 32;
    v8 = 56 * v2;
    v9 = (__int128 *)(v5 + 32);
    do
    {
      v11 = (_QWORD *)(v7 - 24);
      v12 = (_QWORD *)v9 - 3;
      if (v6 == *((void **)v9 - 3))
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v11, (uint64_t)v12);
      v10 = *v9;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v7 = v10;
      v7 += 56;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      v9 = (__int128 *)((char *)v9 + 56);
      v8 -= 56;
    }
    while (v8);
    v13 = a1[2];
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)a1;
      v15 = 56 * v13;
      do
      {
        while (1)
        {
          v16 = v14 + v15;
          if (*(char *)(v14 + v15 - 1) < 0)
            operator delete(*(void **)(v16 - 24));
          v17 = (llvm::detail::DoubleAPFloat *)(v16 - 48);
          if (v6 != *(void **)(v16 - 48))
            break;
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v17);
          v15 -= 56;
          if (!v15)
            return;
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v17);
        v15 -= 56;
      }
      while (v15);
    }
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AbsoluteOp &>(mlir::mps::AbsoluteOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::AbsoluteOp,mlir::anec::ElementwiseAbs>::matchAndRewriteWithStaticShapes(mlir::mps::AbsoluteOp,mlir::mps::AbsoluteOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseAbs,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.abs", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.abs";
    v21[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAbs,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertExponent::~ConvertExponent(mlir::_anonymous_namespace_::ConvertExponent *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExponentOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExponentOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ExponentOpGenericAdaptorBase::ExponentOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExponentOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ExponentOpGenericAdaptorBase::ExponentOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ExponentOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExponentOp &>(mlir::mps::ExponentOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExponentOp &>(mlir::mps::ExponentOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertExponent::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, mlir::Float16Type **a4)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *Shape;
  mlir::MLIRContext *v19;
  mlir::AffineMap *v20;
  uint64_t F16Type;
  uint64_t v22;
  mlir::MLIRContext *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  ZinIrHalH13g *v28;
  ZinIrHalH13g *v30;
  ZinIrHalH13g *v31;
  _QWORD *v32[2];
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v36 = *(_OWORD *)(a3 + 40);
  v35 = mlir::ValueRange::dereference_iterator(&v36, 0);
  v6 = (uint64_t *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v34[0] = v6;
  v34[1] = v16;
  v17 = *((_QWORD *)a2 + 3);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v34);
  v20 = v19;
  F16Type = mlir::Builder::getF16Type(a4 + 1, v19);
  v33 = mlir::MemRefType::get(Shape, v20, F16Type, 0, 0, 0);
  v22 = mlir::ShapedType::getShape((mlir::ShapedType *)v34);
  v24 = (uint64_t)v23;
  v25 = mlir::Builder::getF16Type(a4 + 1, v23);
  v26 = (_QWORD *)mlir::RankedTensorType::get(v22, v24, v25, 0);
  v32[0] = mlir::createSplatF16ElementsAttr(v26, 1.4427);
  v32[1] = v27;
  v31 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 1), v17, &v33, v32);
  v30 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>((uint64_t *)a4 + 1, v17, &v35, &v31);
  v28 = mlir::OpBuilder::create<mlir::anec::Exp2,mlir::anec::ElementwiseMult &>((uint64_t *)a4 + 1, v17, &v30);
  mlir::ConversionPatternRewriter::replaceOp((mlir::ConversionPatternRewriter *)a4, a2, v28);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExponentOp &>(mlir::mps::ExponentOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.mult", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.mult";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3, *a4 - 16);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Exp2,mlir::anec::ElementwiseMult &>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.exp2", (const unsigned __int8 *)9, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.exp2";
    v15[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseEqualZero::build(a1, (uint64_t)v17, *a3 - 16);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Exp2,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::`anonymous namespace'::ConvertLogarithm::~ConvertLogarithm(mlir::_anonymous_namespace_::ConvertLogarithm *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LogarithmOpGenericAdaptorBase::LogarithmOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LogarithmOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LogarithmOpGenericAdaptorBase::LogarithmOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LogarithmOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmOp &>(mlir::mps::LogarithmOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmOp &>(mlir::mps::LogarithmOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertLogarithm::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, unint64_t *a3, mlir::Float16Type **a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *Shape;
  mlir::MLIRContext *v20;
  mlir::AffineMap *v21;
  uint64_t F16Type;
  uint64_t v23;
  mlir::MLIRContext *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v30;
  mlir::MLIRContext *v31;
  ZinIrHalH13g *v32;
  llvm::APFloatBase *F16FloatAttr;
  uint64_t v35;
  ZinIrHalH13g *v36;
  _QWORD *v37[2];
  uint64_t v38;
  _QWORD v39[2];
  __int128 v40;
  ZinIrHalH13g *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v40 = *(_OWORD *)(a3 + 5);
  v7 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    goto LABEL_10;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v39[0] = v7;
  v39[1] = v17;
  v18 = *(_QWORD *)(a2 + 24);
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v39);
  v21 = v20;
  F16Type = mlir::Builder::getF16Type(a4 + 1, v20);
  v38 = mlir::MemRefType::get(Shape, v21, F16Type, 0, 0, 0);
  v23 = mlir::ShapedType::getShape((mlir::ShapedType *)v39);
  v25 = (uint64_t)v24;
  v26 = mlir::Builder::getF16Type(a4 + 1, v24);
  v27 = (_QWORD *)mlir::RankedTensorType::get(v23, v25, v26, 0);
  v37[0] = mlir::createSplatF16ElementsAttr(v27, 0.69315);
  v37[1] = v28;
  v36 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 1), v18, &v38, v37);
  ODSOperandIndexAndLength = mlir::mps::detail::CastOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mps::detail::CastOpGenericAdaptorBase *)a3, 0);
  v30 = a3[5];
  v41 = (ZinIrHalH13g *)v30;
  v42 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v30 = mlir::ValueRange::offset_base(&v41, ODSOperandIndexAndLength);
  v41 = (ZinIrHalH13g *)v30;
  v42 = 0;
  v35 = mlir::ValueRange::dereference_iterator(&v41, 0);
  F16FloatAttr = mlir::Builder::getF16FloatAttr(a4 + 1, 0.0, v31);
  v41 = mlir::OpBuilder::create<mlir::anec::Log2,mlir::Value,mlir::FloatAttr>((uint64_t *)a4 + 1, v18, &v35, (uint64_t *)&F16FloatAttr);
  v32 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::anec::Log2 &,mlir::mps::ConstantOp &>((uint64_t *)a4 + 1, *(_QWORD *)(a2 + 24), &v41, &v36);
  (*((void (**)(mlir::Float16Type **, uint64_t, ZinIrHalH13g *))*a4 + 4))(a4, a2, v32);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LogarithmOp &>(mlir::mps::LogarithmOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Log2,mlir::Value,mlir::FloatAttr>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.log2", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.log2";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Invert::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Log2,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::anec::Log2 &,mlir::mps::ConstantOp &>(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.mult", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.mult";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3 - 16, *a4 - 16);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::`anonymous namespace'::ConvertSelect::~ConvertSelect(mlir::_anonymous_namespace_::ConvertSelect *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SelectOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SelectOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SelectOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SelectOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SelectOp &>(mlir::mps::SelectOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SelectOp &>(mlir::mps::SelectOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertSelect::matchAndRewriteWithStaticShapes(int a1, uint64_t a2, mlir::mps::detail::CastOpGenericAdaptorBase *this, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  ZinIrHalH13g *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = a4 + 1;
  v8 = *(_QWORD *)(a2 + 24);
  ODSOperandIndexAndLength = mlir::mps::detail::CastOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0);
  v10 = *((_QWORD *)this + 5);
  v26 = v10;
  v27 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v10 = mlir::ValueRange::offset_base(&v26, ODSOperandIndexAndLength);
  v26 = v10;
  v27 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v26, 0);
  v25 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseNotEqualZero,mlir::Value>(v7, v8, (uint64_t *)&v26) - 16;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = mlir::mps::detail::CastOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0);
  v13 = *((_QWORD *)this + 5);
  v26 = v13;
  v27 = v12;
  if (v12)
    v13 = mlir::ValueRange::offset_base(&v26, v12);
  v26 = v13;
  v27 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v26, 0);
  v24 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseEqualZero,mlir::Value>(v7, v11, (uint64_t *)&v26) - 16;
  v14 = *(_QWORD *)(a2 + 24);
  v15 = mlir::mps::detail::CastOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u);
  v16 = *((_QWORD *)this + 5);
  v26 = v16;
  v27 = v15;
  if (v15)
    v16 = mlir::ValueRange::offset_base(&v26, v15);
  v26 = v16;
  v27 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v26, 0);
  v23 = mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value,mlir::Value&>(v7, v14, (uint64_t *)&v26, &v25);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = mlir::mps::detail::CastOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 2u);
  v19 = *((_QWORD *)this + 5);
  v26 = v19;
  v27 = v18;
  if (v18)
    v19 = mlir::ValueRange::offset_base(&v26, v18);
  v26 = v19;
  v27 = 0;
  v22 = mlir::ValueRange::dereference_iterator(&v26, 0);
  v26 = (unint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value,mlir::Value&>(v7, v17, &v22, &v24);
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::anec::ElementwiseMult &,mlir::anec::ElementwiseMult &>(v7, *(_QWORD *)(a2 + 24), &v23, &v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SelectOp &>(mlir::mps::SelectOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseNotEqualZero,mlir::Value>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.not_equal_zero", (const unsigned __int8 *)0x13, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.not_equal_zero";
    v15[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseGreaterThanEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseNotEqualZero,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseEqualZero,mlir::Value>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.equal_zero", (const unsigned __int8 *)0xF, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.equal_zero";
    v15[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseEqualZero,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value,mlir::Value&>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.mult", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.mult";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::anec::ElementwiseMult &,mlir::anec::ElementwiseMult &>(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.add", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.add";
    v17[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3 - 16, *a4 - 16);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::`anonymous namespace'::ConvertFlatten2D::~ConvertFlatten2D(mlir::_anonymous_namespace_::ConvertFlatten2D *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Flatten2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Flatten2DOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Flatten2DOpGenericAdaptorBase::Flatten2DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::Flatten2DOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::Flatten2DOpGenericAdaptorBase::Flatten2DOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::Flatten2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Flatten2DOp &>(mlir::mps::Flatten2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Flatten2DOp &>(mlir::mps::Flatten2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertFlatten2D::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *SortedUniquePromotedPositiveAxesAttr;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t OperandRange;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  ZinIrHalH13g *v83;
  uint64_t v84;
  const void ****v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  __int128 v93;
  char v94;
  __int128 v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  void *v99;
  uint64_t v100;
  uint64_t v101[5];
  _QWORD *RankPromotionTypeForANE;
  uint64_t v103;
  _QWORD v104[2];

  v104[1] = *MEMORY[0x24BDAC8D0];
  v88 = a2;
  v95 = *(_OWORD *)(a3 + 40);
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v89 = v6;
  v90 = v16;
  v17 = *(_QWORD **)(*(_QWORD *)(a2 + 72) + 56);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  SortedUniquePromotedPositiveAxesAttr = (uint64_t *)mlir::getSortedUniquePromotedPositiveAxesAttr(v17, v18, 0, 0);
  if (!v20)
  {
    LOBYTE(v91) = 0;
    v94 = 0;
    goto LABEL_70;
  }
  v21 = (uint64_t)SortedUniquePromotedPositiveAxesAttr;
  RankPromotionTypeForANE = v104;
  v103 = 0x100000000;
  if (!SortedUniquePromotedPositiveAxesAttr)
    goto LABEL_21;
  v22 = *SortedUniquePromotedPositiveAxesAttr;
  v23 = mlir::TypeID::get<mlir::ElementsAttr>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_21;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_21:
    v31 = 0;
  v32 = 1;
  mlir::getIntValues<long long>(v21, v31, (uint64_t)&RankPromotionTypeForANE, 1);
  mlir::getRankPromotionShapeForANE((uint64_t)v89, v90, (uint64_t **)&v99);
  v96 = &v98;
  HIDWORD(v97) = 2;
  v33 = RankPromotionTypeForANE;
  v34 = *RankPromotionTypeForANE;
  if (!*RankPromotionTypeForANE)
  {
    v43 = 1;
    goto LABEL_33;
  }
  v35 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v35)
  {
    v43 = 1;
    v38 = (char *)v99;
LABEL_31:
    v44 = (char *)v99 + 8 * v34;
    do
    {
      v45 = *(_QWORD *)v38;
      v38 += 8;
      v43 *= v45;
    }
    while (v38 != v44);
    goto LABEL_33;
  }
  v36 = v35 + 1;
  v37 = (v35 + 1) & 0x3FFFFFFFFFFFFFFELL;
  v38 = (char *)v99 + 8 * v37;
  v39 = (char *)v99 + 8;
  v40 = 1;
  v41 = v37;
  v42 = 1;
  do
  {
    v40 *= *(v39 - 1);
    v42 *= *v39;
    v39 += 2;
    v41 -= 2;
  }
  while (v41);
  v43 = v42 * v40;
  if (v36 != v37)
    goto LABEL_31;
LABEL_33:
  *(_QWORD *)&v98 = v43;
  LODWORD(v97) = 1;
  v46 = *RankPromotionTypeForANE;
  if (*RankPromotionTypeForANE == v100)
    goto LABEL_40;
  v47 = 8 * v46;
  v48 = (uint64_t *)((char *)v99 + 8 * v46);
  v49 = 8 * v100 - 8 - v47;
  if (!v49)
  {
    v32 = 1;
    do
    {
LABEL_39:
      v55 = *v48++;
      v32 *= v55;
    }
    while (v48 != (uint64_t *)((char *)v99 + 8 * v100));
    goto LABEL_40;
  }
  v50 = (v49 >> 3) + 1;
  v48 += v50 & 0x3FFFFFFFFFFFFFFELL;
  v51 = (char *)v99 + v47 + 8;
  v52 = 1;
  v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
  v54 = 1;
  do
  {
    v52 *= *(v51 - 1);
    v54 *= *v51;
    v51 += 2;
    v53 -= 2;
  }
  while (v53);
  v32 = v54 * v52;
  if (v50 != (v50 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_39;
LABEL_40:
  *((_QWORD *)&v98 + 1) = v32;
  v91 = &v93;
  v93 = v98;
  v92 = 0x200000002;
  v94 = 1;
  if (v99 != v101)
  {
    free(v99);
    v33 = RankPromotionTypeForANE;
  }
  if (v33 != v104)
    free(v33);
  if (!v94)
  {
LABEL_70:
    v84 = a4[2];
    if (v84)
    {
      if (!mlir::RewriterBase::Listener::classof(v84))
      {
        v84 = 0;
        if (v94)
        {
LABEL_74:
          if (v91 != &v93)
            free(v91);
        }
        return v84;
      }
    }
    if (v94)
      goto LABEL_74;
    return v84;
  }
  v56 = (__int128 *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v56)
    goto LABEL_54;
  v57 = *(_QWORD *)v56;
  v58 = mlir::TypeID::get<mlir::ShapedType>();
  v59 = *(unsigned int *)(v57 + 16);
  if (!(_DWORD)v59)
    goto LABEL_54;
  v60 = *(_QWORD **)(v57 + 8);
  v61 = &v60[2 * v59];
  do
  {
    v62 = v59 >> 1;
    v63 = &v60[2 * (v59 >> 1)];
    v65 = *v63;
    v64 = v63 + 2;
    v59 += ~(v59 >> 1);
    if (v65 < v58)
      v60 = v64;
    else
      v59 = v62;
  }
  while (v59);
  if (v60 != v61 && *v60 == v58)
    v66 = v60[1];
  else
LABEL_54:
    v66 = 0;
  v96 = v56;
  v97 = v66;
  if (v94)
  {
    v67 = *(_OWORD *)v91;
    v99 = v101;
    *(_OWORD *)v101 = v67;
    v100 = 0x500000002;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v96);
    v69 = (uint64_t *)mlir::MemRefType::get(v101, (mlir::AffineMap *)2, OperandRange, 0, 0, 0);
    v70 = (uint64_t)v69;
    if (!v69)
      goto LABEL_65;
    v71 = *v69;
    v72 = mlir::TypeID::get<mlir::ShapedType>();
    v73 = *(unsigned int *)(v71 + 16);
    if (!(_DWORD)v73)
      goto LABEL_65;
    v74 = *(_QWORD **)(v71 + 8);
    v75 = &v74[2 * v73];
    do
    {
      v76 = v73 >> 1;
      v77 = &v74[2 * (v73 >> 1)];
      v79 = *v77;
      v78 = v77 + 2;
      v73 += ~(v73 >> 1);
      if (v79 < v72)
        v74 = v78;
      else
        v73 = v76;
    }
    while (v73);
    if (v74 != v75 && *v74 == v72)
      v80 = v74[1];
    else
LABEL_65:
      v80 = 0;
    RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v70, v80);
    v103 = v81;
    v82 = v88;
    v89 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v95, 0);
    v83 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 1), *(_QWORD *)(v82 + 24), (uint64_t *)&RankPromotionTypeForANE, (uint64_t *)&v89);
    (*(void (**)(_QWORD *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, v82, v83);
    if (v99 != v101)
      free(v99);
    v84 = 1;
    if (!v94)
      return v84;
    goto LABEL_74;
  }
  v86 = (const void ****)std::__throw_bad_optional_access[abi:nn180100]();
  return llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Flatten2DOp &>(mlir::mps::Flatten2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(v86, v87);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Flatten2DOp &>(mlir::mps::Flatten2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

void mlir::getIntValues<long long>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t NumElements;
  unint64_t v7;
  int64x2_t *v8;
  _QWORD *Type;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64x2_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64x2_t *v48;
  uint64_t k;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64x2_t *v55;
  uint64_t m;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v70;
  uint64_t *i64;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int64x2_t *v78;
  int64x2_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int64x2_t *v88;
  unsigned int IntOrFloatBitWidth;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  uint64x2_t v98;
  int32x2_t v99;
  uint64_t v100;
  int32x2_t v101;
  int32x2_t v102;
  int32x2_t v103;
  uint64_t v104;
  int64x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  BOOL *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64x2_t v112;
  int32x2_t v113;
  uint64_t v114;
  int32x2_t v115;
  int32x2_t v116;
  int32x2_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int64x2_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int64x2_t *v135;
  __int128 v136;
  uint64_t OperandRange;
  _QWORD v138[2];
  __int128 v139;
  _QWORD *v140;
  __int128 v141;
  _QWORD v142[6];

  v142[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v136 = a1;
  *((_QWORD *)&v136 + 1) = a2;
  if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v136) || a4)
    NumElements = mlir::ElementsAttr::getNumElements(v136, *((uint64_t *)&v136 + 1));
  else
    NumElements = 1;
  v7 = *(unsigned int *)(a3 + 8);
  if (NumElements != v7)
  {
    if (NumElements >= v7)
    {
      if (NumElements > *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), NumElements, 8);
        v7 = *(unsigned int *)(a3 + 8);
      }
      if (NumElements != v7)
        bzero((void *)(*(_QWORD *)a3 + 8 * v7), 8 * (NumElements - v7));
    }
    *(_DWORD *)(a3 + 8) = NumElements;
  }
  v8 = *(int64x2_t **)a3;
  v139 = v136;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v139);
  v10 = Type;
  if (!Type)
    goto LABEL_21;
  v11 = *Type;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_21;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_21:
    v20 = 0;
  v138[0] = v10;
  v138[1] = v20;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v138);
  v21 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v139);
  ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v139);
  v24 = v23;
  if (!v21 || a4)
  {
    v25 = mlir::ElementsAttr::getNumElements(v139, *((uint64_t *)&v139 + 1));
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (v25 < 1)
        return;
      goto LABEL_28;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (v25 < 1)
        return;
      goto LABEL_39;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (v25 < 1)
        return;
      if ((unint64_t)v25 >= 2)
      {
        v31 = 0;
        v30 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v32 = 0;
          else
            v32 = v31;
          if (v21)
            v33 = 0;
          else
            v33 = v31 + 1;
          v34 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v33];
          v35 = &v8[v31 / 2];
          v35->i64[0] = *(unsigned __int16 *)&ElementsAttrRawData[2 * v32];
          v35->i64[1] = v34;
          v31 += 2;
        }
        while (v31 != v30);
        goto LABEL_282;
      }
      goto LABEL_48;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (v25 < 1)
        return;
      goto LABEL_66;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (v25 < 1)
        return;
      goto LABEL_73;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (v25 < 1)
        return;
      goto LABEL_89;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (v25 < 1)
        return;
      goto LABEL_105;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (v25 < 1)
        return;
      goto LABEL_125;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
      goto LABEL_136;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
      goto LABEL_143;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
      goto LABEL_159;
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (v25 < 1)
        return;
LABEL_174:
      if ((unint64_t)v25 >= 2)
      {
        v104 = 0;
        v80 = v25 & 0xFFFFFFFFFFFFFFFELL;
        v105 = v8;
        do
        {
          if (v21)
            v106 = 0;
          else
            v106 = v104;
          if (v21)
            v107 = 0;
          else
            v107 = v104 + 1;
          v79.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v106];
          v79.i16[2] = *(_WORD *)&ElementsAttrRawData[2 * v107];
          v79 = vcvtq_s64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v79.i8, 0x10uLL)));
          *v105++ = v79;
          v104 += 2;
        }
        while (v104 != v80);
        goto LABEL_324;
      }
      v80 = 0;
      do
      {
        if (v21)
          v133 = 0;
        else
          v133 = v80;
        v8->i64[v80++] = (uint64_t)COERCE_FLOAT(*(unsigned __int16 *)&ElementsAttrRawData[2 * v133] << 16);
LABEL_324:
        ;
      }
      while (v25 != v80);
      return;
    }
  }
  else
  {
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      v25 = 1;
LABEL_28:
      for (i = 0; i != v25; ++i)
      {
        if (v21)
          v27 = 0;
        else
          v27 = i;
        v8->i64[i] = ElementsAttrRawData[v27];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      v25 = 1;
LABEL_39:
      for (j = 0; j != v25; ++j)
      {
        if (v21)
          v29 = 0;
        else
          v29 = j;
        v8->i64[j] = (char)ElementsAttrRawData[v29];
      }
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      v25 = 1;
LABEL_48:
      v30 = 0;
      do
      {
        if (v21)
          v124 = 0;
        else
          v124 = v30;
        v8->i64[v30++] = *(unsigned __int16 *)&ElementsAttrRawData[2 * v124];
LABEL_282:
        ;
      }
      while (v25 != v30);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      v25 = 1;
LABEL_66:
      if ((unint64_t)v25 >= 2)
      {
        v38 = 0;
        v36 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v39 = 0;
          else
            v39 = v38;
          if (v21)
            v40 = 0;
          else
            v40 = v38 + 1;
          v41 = *(__int16 *)&ElementsAttrRawData[2 * v40];
          v42 = &v8[v38 / 2];
          v42->i64[0] = *(__int16 *)&ElementsAttrRawData[2 * v39];
          v42->i64[1] = v41;
          v38 += 2;
        }
        while (v38 != v36);
        goto LABEL_288;
      }
      v36 = 0;
      do
      {
        if (v21)
          v125 = 0;
        else
          v125 = v36;
        v8->i64[v36++] = *(__int16 *)&ElementsAttrRawData[2 * v125];
LABEL_288:
        ;
      }
      while (v25 != v36);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      v25 = 1;
LABEL_73:
      if ((unint64_t)v25 >= 2)
      {
        v44 = 0;
        v37 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v45 = 0;
          else
            v45 = v44;
          if (v21)
            v46 = 0;
          else
            v46 = v44 + 1;
          v47 = *(unsigned int *)&ElementsAttrRawData[4 * v46];
          v48 = &v8[v44 / 2];
          v48->i64[0] = *(unsigned int *)&ElementsAttrRawData[4 * v45];
          v48->i64[1] = v47;
          v44 += 2;
        }
        while (v44 != v37);
        goto LABEL_294;
      }
      v37 = 0;
      do
      {
        if (v21)
          v126 = 0;
        else
          v126 = v37;
        v8->i64[v37++] = *(unsigned int *)&ElementsAttrRawData[4 * v126];
LABEL_294:
        ;
      }
      while (v25 != v37);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      v25 = 1;
LABEL_89:
      if ((unint64_t)v25 >= 2)
      {
        v51 = 0;
        v43 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v52 = 0;
          else
            v52 = v51;
          if (v21)
            v53 = 0;
          else
            v53 = v51 + 1;
          v54 = *(int *)&ElementsAttrRawData[4 * v53];
          v55 = &v8[v51 / 2];
          v55->i64[0] = *(int *)&ElementsAttrRawData[4 * v52];
          v55->i64[1] = v54;
          v51 += 2;
        }
        while (v51 != v43);
        goto LABEL_300;
      }
      v43 = 0;
      do
      {
        if (v21)
          v127 = 0;
        else
          v127 = v43;
        v8->i64[v43++] = *(int *)&ElementsAttrRawData[4 * v127];
LABEL_300:
        ;
      }
      while (v25 != v43);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      v25 = 1;
LABEL_105:
      for (k = 0; k != v25; ++k)
      {
        if (v21)
          v50 = 0;
        else
          v50 = k;
        v8->i64[k] = *(_QWORD *)&ElementsAttrRawData[8 * v50];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      v25 = 1;
LABEL_125:
      for (m = 0; m != v25; ++m)
      {
        if (v21)
          v57 = 0;
        else
          v57 = m;
        v8->i64[m] = *(_QWORD *)&ElementsAttrRawData[8 * v57];
      }
      return;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      v25 = 1;
LABEL_136:
      if ((unint64_t)v25 >= 2)
      {
        v60 = 0;
        v58 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v61 = 0;
          else
            v61 = v60;
          if (v21)
            v62 = 0;
          else
            v62 = v60 + 1;
          _H0 = *(_WORD *)&ElementsAttrRawData[2 * v61];
          _H1 = *(_WORD *)&ElementsAttrRawData[2 * v62];
          __asm { FCVT            S0, H0 }
          v70 = (uint64_t)_S0;
          __asm { FCVT            S0, H1 }
          i64 = v8[v60 / 2].i64;
          *i64 = v70;
          i64[1] = (uint64_t)_S0;
          v60 += 2;
        }
        while (v60 != v58);
        goto LABEL_306;
      }
      v58 = 0;
      do
      {
        if (v21)
          v128 = 0;
        else
          v128 = v58;
        _H0 = *(_WORD *)&ElementsAttrRawData[2 * v128];
        __asm { FCVT            S0, H0 }
        v8->i64[v58++] = (uint64_t)_S0;
LABEL_306:
        ;
      }
      while (v25 != v58);
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      v25 = 1;
LABEL_143:
      if ((unint64_t)v25 >= 2)
      {
        v74 = 0;
        v59 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v75 = 0;
          else
            v75 = v74;
          if (v21)
            v76 = 0;
          else
            v76 = v74 + 1;
          v77 = (uint64_t)*(float *)&ElementsAttrRawData[4 * v76];
          v78 = &v8[v74 / 2];
          v78->i64[0] = (uint64_t)*(float *)&ElementsAttrRawData[4 * v75];
          v78->i64[1] = v77;
          v74 += 2;
        }
        while (v74 != v59);
        goto LABEL_312;
      }
      v59 = 0;
      do
      {
        if (v21)
          v131 = 0;
        else
          v131 = v59;
        v8->i64[v59++] = (uint64_t)*(float *)&ElementsAttrRawData[4 * v131];
LABEL_312:
        ;
      }
      while (v25 != v59);
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      v25 = 1;
LABEL_159:
      if ((unint64_t)v25 >= 2)
      {
        v84 = 0;
        v73 = v25 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v21)
            v85 = 0;
          else
            v85 = v84;
          if (v21)
            v86 = 0;
          else
            v86 = v84 + 1;
          v87 = (uint64_t)*(double *)&ElementsAttrRawData[8 * v86];
          v88 = &v8[v84 / 2];
          v88->i64[0] = (uint64_t)*(double *)&ElementsAttrRawData[8 * v85];
          v88->i64[1] = v87;
          v84 += 2;
        }
        while (v84 != v73);
        goto LABEL_318;
      }
      v73 = 0;
      do
      {
        if (v21)
          v132 = 0;
        else
          v132 = v73;
        v8->i64[v73++] = (uint64_t)*(double *)&ElementsAttrRawData[8 * v132];
LABEL_318:
        ;
      }
      while (v25 != v73);
      return;
    }
    v25 = 1;
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      goto LABEL_174;
  }
  if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    if (!v24)
      return;
    v90 = 0;
    v91 = ~(-1 << IntOrFloatBitWidth);
    v92 = v25;
    v93 = 8 / IntOrFloatBitWidth;
    while (1)
    {
      v94 = v90 * v93;
      v95 = v25 - v90 * v93;
      if (v95 >= v93)
        v95 = 8 / IntOrFloatBitWidth;
      if (!v95)
        goto LABEL_194;
      v96 = *ElementsAttrRawData;
      if (v92 >= v93)
        v97 = 8 / IntOrFloatBitWidth;
      else
        v97 = v92;
      v98 = (uint64x2_t)vdupq_n_s64(v97 - 1);
      v99 = vmovn_s64((int64x2_t)vcgeq_u64(v98, (uint64x2_t)xmmword_207A80930));
      if ((v99.i8[0] & 1) != 0)
        v8->i64[v94] = v91 & v96;
      if ((v99.i8[4] & 1) != 0)
        v8->i64[v94 + 1] = (v96 >> IntOrFloatBitWidth) & v91;
      v100 = ((_BYTE)v97 + 1) & 0x1E;
      if (v100 == 2)
        goto LABEL_194;
      v101 = vmovn_s64((int64x2_t)vcgtq_u64(v98, (uint64x2_t)xmmword_207A7F3C0));
      if ((v101.i8[0] & 1) != 0)
      {
        v8[1].i64[v94] = (v96 >> (2 * IntOrFloatBitWidth)) & v91;
        if ((v101.i8[4] & 1) != 0)
          goto LABEL_211;
      }
      else if ((v101.i8[4] & 1) != 0)
      {
LABEL_211:
        v8[1].i64[v94 + 1] = (v96 >> (3 * IntOrFloatBitWidth)) & v91;
        if (v100 == 4)
          goto LABEL_194;
        goto LABEL_212;
      }
      if (v100 == 4)
        goto LABEL_194;
LABEL_212:
      v102 = vmovn_s64((int64x2_t)vcgtq_u64(v98, (uint64x2_t)xmmword_207AB5460));
      if ((v102.i8[0] & 1) != 0)
      {
        v8[2].i64[v94] = (v96 >> (4 * IntOrFloatBitWidth)) & v91;
        if ((v102.i8[4] & 1) == 0)
          goto LABEL_214;
      }
      else if ((v102.i8[4] & 1) == 0)
      {
LABEL_214:
        if (v100 != 6)
          goto LABEL_218;
        goto LABEL_194;
      }
      v8[2].i64[v94 + 1] = (v96 >> (5 * IntOrFloatBitWidth)) & v91;
      if (v100 != 6)
      {
LABEL_218:
        v103 = vmovn_s64((int64x2_t)vcgtq_u64(v98, (uint64x2_t)xmmword_207AB5470));
        if ((v103.i8[0] & 1) != 0)
          v8[3].i64[v94] = (v96 >> (6 * IntOrFloatBitWidth)) & v91;
        if ((v103.i8[4] & 1) != 0)
          v8[3].i64[v94 + 1] = (v96 >> (7 * IntOrFloatBitWidth)) & v91;
      }
LABEL_194:
      ++v90;
      v92 -= v93;
      ++ElementsAttrRawData;
      if (!--v24)
        return;
    }
  }
  v135 = v8;
  if (v21)
    v81 = 1;
  else
    v81 = v25;
  v82 = v142;
  v140 = v142;
  v141 = xmmword_207AB5450;
  if (v81)
  {
    if (v81 < 0x29)
    {
      v83 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v140, v142, v81, 1);
      v82 = v140;
      v83 = v141;
    }
    if (v81 != v83)
      bzero((char *)v82 + v83, v81 - v83);
    *(_QWORD *)&v141 = v81;
  }
  if (v24)
  {
    v108 = (BOOL *)v82 + 3;
    do
    {
      if (v81 >= 8)
        v109 = 8;
      else
        v109 = v81;
      if (!v109)
        goto LABEL_237;
      if (v81 >= 8)
        v110 = 8;
      else
        v110 = v81;
      v111 = *ElementsAttrRawData;
      v112 = (uint64x2_t)vdupq_n_s64(v110 - 1);
      v113 = vmovn_s64((int64x2_t)vcgeq_u64(v112, (uint64x2_t)xmmword_207A80930));
      if ((v113.i8[0] & 1) != 0)
        *(v108 - 3) = v111 & 1;
      if ((v113.i8[4] & 1) != 0)
        *(v108 - 2) = (v111 & 2) != 0;
      v114 = ((_BYTE)v110 + 1) & 0x1E;
      if (v114 == 2)
        goto LABEL_237;
      v115 = vmovn_s64((int64x2_t)vcgtq_u64(v112, (uint64x2_t)xmmword_207A7F3C0));
      if ((v115.i8[0] & 1) != 0)
      {
        *(v108 - 1) = (v111 & 4) != 0;
        if ((v115.i8[4] & 1) != 0)
          goto LABEL_255;
      }
      else if ((v115.i8[4] & 1) != 0)
      {
LABEL_255:
        *v108 = (v111 & 8) != 0;
        if (v114 == 4)
          goto LABEL_237;
        goto LABEL_256;
      }
      if (v114 == 4)
        goto LABEL_237;
LABEL_256:
      v116 = vmovn_s64((int64x2_t)vcgtq_u64(v112, (uint64x2_t)xmmword_207AB5460));
      if ((v116.i8[0] & 1) != 0)
      {
        v108[1] = (v111 & 0x10) != 0;
        if ((v116.i8[4] & 1) == 0)
          goto LABEL_258;
      }
      else if ((v116.i8[4] & 1) == 0)
      {
LABEL_258:
        if (v114 != 6)
          goto LABEL_262;
        goto LABEL_237;
      }
      v108[2] = (v111 & 0x20) != 0;
      if (v114 != 6)
      {
LABEL_262:
        v117 = vmovn_s64((int64x2_t)vcgtq_u64(v112, (uint64x2_t)xmmword_207AB5470));
        if ((v117.i8[0] & 1) != 0)
          v108[3] = (v111 & 0x40) != 0;
        if ((v117.i8[4] & 1) != 0)
          v108[4] = v111 >> 7;
      }
LABEL_237:
      ++ElementsAttrRawData;
      v108 += 8;
      v81 -= 8;
      --v24;
    }
    while (v24);
  }
  if (v25 >= 1)
  {
    if (v25 == 1)
    {
      v119 = 0;
      goto LABEL_326;
    }
    v118 = 0;
    v119 = v25 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v21)
        v120 = 0;
      else
        v120 = v118;
      if (v21)
        v121 = 0;
      else
        v121 = v118 + 1;
      v122 = *((unsigned __int8 *)v82 + v121);
      v123 = &v135[v118 / 2];
      v123->i64[0] = *((unsigned __int8 *)v82 + v120);
      v123->i64[1] = v122;
      v118 += 2;
    }
    while (v118 != v119);
    while (v25 != v119)
    {
LABEL_326:
      if (v21)
        v134 = 0;
      else
        v134 = v119;
      v135->i64[v119++] = *((unsigned __int8 *)v82 + v134);
    }
  }
  if (v82 != v142)
    free(v82);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertFlatten2D::matchAndRewriteWithStaticShapes(mlir::mps::Flatten2DOp,mlir::mps::Flatten2DOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: Flatten2DOp axis argument was not a constant. \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)0>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)0>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DivideOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DivideOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DivideOpGenericAdaptorBase::DivideOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DivideOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DivideOpGenericAdaptorBase::DivideOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DivideOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DivideOp &>(mlir::mps::DivideOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DivideOp &>(mlir::mps::DivideOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)0,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrHalH13g *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t F16FloatAttr;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v19 = *(_OWORD *)(a3 + 40);
  v17 = mlir::ValueRange::dereference_iterator(&v19, 0);
  v6 = mlir::ValueRange::dereference_iterator(&v19, 1);
  v16 = v6;
  v7 = *(_QWORD *)(a2 + 24);
  F16FloatAttr = v6;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&F16FloatAttr);
  if (DefiningOp
    && (v9 = DefiningOp,
        v10 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 48) + 32))(*(_QWORD *)(v9 + 48), v10))
    && (F16FloatAttr = mlir::getElementTypeOrSelf(v6), mlir::Type::isF16((mlir::Type *)&F16FloatAttr)))
  {
    F16FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)(a4 + 8), 0.0, v11);
    v15 = mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>((uint64_t *)(a4 + 8), v7, &v16, &F16FloatAttr);
    F16FloatAttr = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v17, &v15)- 16;
    v12 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&F16FloatAttr, 1);
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 16);
    if (v13 && mlir::RewriterBase::Listener::classof(v13))
    else
      return 0;
  }
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DivideOp &>(mlir::mps::DivideOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.invert", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.invert";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Invert::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)0,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(mlir::mps::DivideOp,mlir::mps::DivideOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: can only support divide by a constant on A11/A12 class ANEs \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)1>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)1>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)1,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrHalH13g *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t F16FloatAttr;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v19 = *(_OWORD *)(a3 + 40);
  v17 = mlir::ValueRange::dereference_iterator(&v19, 0);
  v6 = mlir::ValueRange::dereference_iterator(&v19, 1);
  v16 = v6;
  v7 = *(_QWORD *)(a2 + 24);
  F16FloatAttr = v6;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&F16FloatAttr);
  if (DefiningOp
    && (v9 = DefiningOp,
        v10 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 48) + 32))(*(_QWORD *)(v9 + 48), v10))
    && (F16FloatAttr = mlir::getElementTypeOrSelf(v6), mlir::Type::isF16((mlir::Type *)&F16FloatAttr)))
  {
    F16FloatAttr = (uint64_t)mlir::Builder::getF16FloatAttr((mlir::Float16Type **)(a4 + 8), 0.0, v11);
    v15 = mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>((uint64_t *)(a4 + 8), v7, &v16, &F16FloatAttr);
    F16FloatAttr = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v17, &v15)- 16;
    v12 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&F16FloatAttr, 1);
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 16);
    if (v13 && mlir::RewriterBase::Listener::classof(v13))
    else
      return 0;
  }
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)1,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(mlir::mps::DivideOp,mlir::mps::DivideOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: can only support divide by a constant on A11/A12 class ANEs \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)2>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)2>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)2,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)(a3 + 40);
  v9 = mlir::ValueRange::dereference_iterator(&v10, 0);
  v8 = mlir::ValueRange::dereference_iterator(&v10, 1);
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v9, &v8)- 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.div", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.div";
    v17[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ElementwiseAdd::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseDiv,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)3>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)3>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)3,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)(a3 + 40);
  v9 = mlir::ValueRange::dereference_iterator(&v10, 0);
  v8 = mlir::ValueRange::dereference_iterator(&v10, 1);
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v9, &v8)- 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)4>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)4>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)4,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)(a3 + 40);
  v9 = mlir::ValueRange::dereference_iterator(&v10, 0);
  v8 = mlir::ValueRange::dereference_iterator(&v10, 1);
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v9, &v8)- 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)5>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)5>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)5,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)(a3 + 40);
  v9 = mlir::ValueRange::dereference_iterator(&v10, 0);
  v8 = mlir::ValueRange::dereference_iterator(&v10, 1);
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v9, &v8)- 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)6>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertDivide<(mlir::anec::Family)6>::~ConvertDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)6,mlir::mps::DivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)(a3 + 40);
  v9 = mlir::ValueRange::dereference_iterator(&v10, 0);
  v8 = mlir::ValueRange::dereference_iterator(&v10, 1);
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v9, &v8)- 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)0>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)0>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::FloorDivideOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::FloorDivideOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::FloorDivideOpGenericAdaptorBase::FloorDivideOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::FloorDivideOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::FloorDivideOpGenericAdaptorBase::FloorDivideOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::FloorDivideOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::FloorDivideOp &>(mlir::mps::FloorDivideOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::FloorDivideOp &>(mlir::mps::FloorDivideOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)0,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrHalH13g *v15;
  llvm::APFloatBase *F16FloatAttr;
  uint64_t v17;
  uint64_t v18;
  uint64_t ElementTypeOrSelf;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v20 = *(_OWORD *)(a3 + 40);
  v18 = mlir::ValueRange::dereference_iterator(&v20, 0);
  v6 = mlir::ValueRange::dereference_iterator(&v20, 1);
  v17 = v6;
  v7 = *(_QWORD *)(a2 + 24);
  ElementTypeOrSelf = v6;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (DefiningOp
    && (v9 = DefiningOp,
        v10 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 48) + 32))(*(_QWORD *)(v9 + 48), v10))
    && (ElementTypeOrSelf = mlir::getElementTypeOrSelf(v6), mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)))
  {
    F16FloatAttr = mlir::Builder::getF16FloatAttr((mlir::Float16Type **)(a4 + 8), 0.0, v11);
    v15 = mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>((uint64_t *)(a4 + 8), v7, &v17, (uint64_t *)&F16FloatAttr);
    ElementTypeOrSelf = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v18, &v15)- 16;
    F16FloatAttr = (ZinIrHalH13g *)((char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &ElementTypeOrSelf)- 16);
    v12 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&F16FloatAttr, 1);
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 16);
    if (v13 && mlir::RewriterBase::Listener::classof(v13))
    else
      return 0;
  }
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::FloorDivideOp &>(mlir::mps::FloorDivideOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.floor", (const unsigned __int8 *)0xA, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.floor";
    v15[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Floor,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)0,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(mlir::mps::FloorDivideOp,mlir::mps::FloorDivideOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: can only support divide by a constant on A11/A12 class ANEs \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)1>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)1>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)1,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t DefiningOp;
  uint64_t v9;
  uint64_t v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrHalH13g *v15;
  llvm::APFloatBase *F16FloatAttr;
  uint64_t v17;
  uint64_t v18;
  uint64_t ElementTypeOrSelf;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v20 = *(_OWORD *)(a3 + 40);
  v18 = mlir::ValueRange::dereference_iterator(&v20, 0);
  v6 = mlir::ValueRange::dereference_iterator(&v20, 1);
  v17 = v6;
  v7 = *(_QWORD *)(a2 + 24);
  ElementTypeOrSelf = v6;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (DefiningOp
    && (v9 = DefiningOp,
        v10 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 48) + 32))(*(_QWORD *)(v9 + 48), v10))
    && (ElementTypeOrSelf = mlir::getElementTypeOrSelf(v6), mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)))
  {
    F16FloatAttr = mlir::Builder::getF16FloatAttr((mlir::Float16Type **)(a4 + 8), 0.0, v11);
    v15 = mlir::OpBuilder::create<mlir::anec::Invert,mlir::Value &,mlir::FloatAttr &>((uint64_t *)(a4 + 8), v7, &v17, (uint64_t *)&F16FloatAttr);
    ElementTypeOrSelf = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseMult,mlir::Value &,mlir::mps::ConstantOp &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v18, &v15)- 16;
    F16FloatAttr = (ZinIrHalH13g *)((char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &ElementTypeOrSelf)- 16);
    v12 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&F16FloatAttr, 1);
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 16);
    if (v13 && mlir::RewriterBase::Listener::classof(v13))
    else
      return 0;
  }
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)1,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(mlir::mps::FloorDivideOp,mlir::mps::FloorDivideOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: can only support divide by a constant on A11/A12 class ANEs \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)2>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)2>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)2,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a3 + 40);
  v10 = mlir::ValueRange::dereference_iterator(&v11, 0);
  v9 = mlir::ValueRange::dereference_iterator(&v11, 1);
  v8 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v10, &v9)- 16;
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v8)
     - 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)3>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)3>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)3,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a3 + 40);
  v10 = mlir::ValueRange::dereference_iterator(&v11, 0);
  v9 = mlir::ValueRange::dereference_iterator(&v11, 1);
  v8 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v10, &v9)- 16;
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v8)
     - 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)4>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)4>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)4,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a3 + 40);
  v10 = mlir::ValueRange::dereference_iterator(&v11, 0);
  v9 = mlir::ValueRange::dereference_iterator(&v11, 1);
  v8 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v10, &v9)- 16;
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v8)
     - 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)5>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)5>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)5,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a3 + 40);
  v10 = mlir::ValueRange::dereference_iterator(&v11, 0);
  v9 = mlir::ValueRange::dereference_iterator(&v11, 1);
  v8 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v10, &v9)- 16;
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v8)
     - 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)6>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertFloorDivide<(mlir::anec::Family)6>::~ConvertFloorDivide(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertDivideImpl<(mlir::anec::Family)6,mlir::mps::FloorDivideOp>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a3 + 40);
  v10 = mlir::ValueRange::dereference_iterator(&v11, 0);
  v9 = mlir::ValueRange::dereference_iterator(&v11, 1);
  v8 = (uint64_t)mlir::OpBuilder::create<mlir::anec::ElementwiseDiv,mlir::Value &,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v10, &v9)- 16;
  v7 = (char *)mlir::OpBuilder::create<mlir::anec::Floor,mlir::Value &>((uint64_t *)(a4 + 8), *(_QWORD *)(a2 + 24), &v8)
     - 16;
  mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)a2, (uint64_t)&v7, 1);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)0>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)0>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MatMulOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MatMulOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MatMulOpGenericAdaptorBase::MatMulOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::MatMulOpGenericAdaptorBase::MatMulOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 56);
  v9 = *(_QWORD *)(a3 + 64);
  v36 = v8;
  v37 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v28;
      v35 = *(_QWORD *)(a3 + 64);
      v29 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v37 = v23;
      if (v36)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v36);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MatMulOp &>(mlir::mps::MatMulOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v37;
    if (v36 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MatMulOp &>(mlir::mps::MatMulOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MatMulOp &>(mlir::mps::MatMulOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::`anonymous namespace'::matchAsConst(char *a1, uint64_t *a2)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *Shape;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Axis;
  uint64_t KernelDimFromIndex;
  uint64_t v27;
  _QWORD v28[2];
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  char v33;
  void *ArgOperands;
  uint64_t v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v29 = a1;
  v31 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v31);
  if (DefiningOp)
  {
    v5 = DefiningOp;
    v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    {
      ArgOperands = v36;
      v35 = 0x100000000;
      mlir::Operation::fold(v5, 0, 0, (uint64_t)&ArgOperands);
      v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)ArgOperands & 0xFFFFFFFFFFFFFFF8));
      v9 = v7;
      if (v7)
      {
        *a2 = (uint64_t)v7;
        a2[1] = v8;
      }
      if (ArgOperands != v36)
        free(ArgOperands);
      if (v9)
        return 1;
    }
  }
  ArgOperands = a2;
  v35 = (uint64_t)(a2 + 2);
  v36[0] = a2 + 4;
  v36[1] = a2 + 6;
  v30 = (uint64_t)a1;
  v11 = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (!v11)
    return 0;
  v28[0] = v11;
  if (*(_UNKNOWN **)(*(_QWORD *)(v11 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    return 0;
  if ((*(_BYTE *)(v11 + 46) & 0x80) == 0)
    return 0;
  if (*(_DWORD *)(v11 + 68) != 4)
    return 0;
  v33 = 1;
  v31 = &v33;
  v32 = v28;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>((uint64_t ***)&ArgOperands, (uint64_t)&v31);
  if (!v33
    || mlir::ElementsAttr::getNumElements(a2[6], a2[7]) != 1
    || (mlir::getSingleFloatValue<float>(a2[6], a2[7]) & 0x7FFFFFFF) != 0)
  {
    return 0;
  }
  v30 = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)(a2 + 2));
  v35 = v12;
  v31 = (char *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)(a2 + 4));
  v32 = v13;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(Shape, v15) == 1)
  {
    v16 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v31);
    if (mlir::ShapedType::getNumElements(v16, v17) == 1
      && (mlir::mps::DequantizeOp::getAxis((mlir::mps::DequantizeOp *)&v30) & 0xFF00000000) == 0)
    {
      return 1;
    }
  }
  if ((mlir::mps::DequantizeOp::getAxis((mlir::mps::DequantizeOp *)&v30) & 0xFF00000000) == 0)
    return 0;
  v28[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a2);
  v28[1] = v18;
  mlir::ShapedType::getShape((mlir::ShapedType *)v28);
  v20 = v19;
  mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  v22 = v21;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v31);
  result = 0;
  if (v22 <= 1 && v23 <= 1)
  {
    if (v22 == 1 || v23 == 1)
    {
      Axis = mlir::mps::DequantizeOp::getAxis((mlir::mps::DequantizeOp *)&v30);
      if ((Axis & 0xFF00000000) != 0)
      {
        KernelDimFromIndex = mlir::anec::getKernelDimFromIndex((int)Axis, v20);
        return (KernelDimFromIndex & 0xFF00000000) != 0 && (_DWORD)KernelDimFromIndex == 0;
      }
      else
      {
        v27 = std::__throw_bad_optional_access[abi:nn180100]();
      }
    }
    return 1;
  }
  return result;
}

uint64_t mlir::`anonymous namespace'::convertToLinear(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  mlir::OpBuilder *v48;
  _BOOL4 isSignedInteger;
  uint64_t IntegerType;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *Type;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t OperandRange;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *IndexFromDim;
  uint64_t v110;
  char *v111;
  unint64_t v112[2];
  __int128 v113;
  char v114;
  uint64_t v115;

  v20 = a9;
  v115 = *MEMORY[0x24BDAC8D0];
  v105 = a11;
  v106 = a1;
  v103 = a13;
  v104 = a10;
  v101 = a15;
  v102 = a12;
  v99 = 0;
  v100 = a14;
  v98 = 0;
  if (a9)
  {
    mlir::ShapedType::getShape((mlir::ShapedType *)&v104);
    v22 = (char *)a5;
    if (v23 >= 4)
    {
      v111 = (char *)a5;
      *(_QWORD *)&v113 = mlir::getRankPromotionTypeForANE(v104, v105);
      *((_QWORD *)&v113 + 1) = v24;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v113);
      v26 = v25;
      IndexFromDim = (_QWORD *)mlir::anec::getIndexFromDim(1, v25);
      v110 = v27;
      v107 = mlir::anec::getIndexFromDim(3, v26);
      v108 = v28;
      v22 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a2 + 8), a4, (uint64_t *)&v111, (uint64_t *)&IndexFromDim, (uint64_t *)&v107)- 16;
    }
    if (!mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v106))
    {
      v111 = v22;
      *(_QWORD *)&v113 = mlir::getRankPromotionTypeForANE(v104, v105);
      *((_QWORD *)&v113 + 1) = v29;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v113);
      v31 = v30;
      IndexFromDim = (_QWORD *)mlir::anec::getIndexFromDim(1, v30);
      v110 = v32;
      v107 = mlir::anec::getIndexFromDim(4, v31);
      v108 = v33;
      v22 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a2 + 8), a4, (uint64_t *)&v111, (uint64_t *)&IndexFromDim, (uint64_t *)&v107)- 16;
    }
    a5 = a6;
  }
  else
  {
    mlir::ShapedType::getShape((mlir::ShapedType *)&v102);
    v22 = (char *)a6;
    if (v35 >= 4)
    {
      v111 = (char *)a6;
      *(_QWORD *)&v113 = mlir::getRankPromotionTypeForANE(v102, v103);
      *((_QWORD *)&v113 + 1) = v36;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v113);
      v38 = v37;
      IndexFromDim = (_QWORD *)mlir::anec::getIndexFromDim(1, v37);
      v110 = v39;
      v107 = mlir::anec::getIndexFromDim(3, v38);
      v108 = v40;
      v22 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a2 + 8), a4, (uint64_t *)&v111, (uint64_t *)&IndexFromDim, (uint64_t *)&v107)- 16;
    }
    if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v106))
    {
      v111 = v22;
      *(_QWORD *)&v113 = mlir::getRankPromotionTypeForANE(v102, v103);
      *((_QWORD *)&v113 + 1) = v41;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v113);
      v43 = v42;
      IndexFromDim = (_QWORD *)mlir::anec::getIndexFromDim(1, v42);
      v110 = v44;
      v107 = mlir::anec::getIndexFromDim(4, v43);
      v108 = v45;
      v22 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a2 + 8), a4, (uint64_t *)&v111, (uint64_t *)&IndexFromDim, (uint64_t *)&v107)- 16;
    }
    a8 = a7;
  }
  v98 = a5;
  v99 = v22;
  v46 = a8[2];
  if (v46)
  {
    v47 = mlir::convertElementsAttr(v46, a8[3], 1);
    v48 = (mlir::OpBuilder *)(a2 + 8);
    *(_QWORD *)&v113 = mlir::getElementTypeOrSelf((_QWORD *)a8[4]);
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&v113);
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a2 + 8), 8u, isSignedInteger);
    IndexFromDim = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)(a8 + 4));
    v110 = v51;
    LOBYTE(v113) = 0;
    v114 = 0;
    v52 = mlir::ShapedType::cloneWith((uint64_t *)&IndexFromDim, &v113, IntegerType);
    v54 = mlir::rewriteElementsAttr(a8[4], a8[5], v52, v53, 1);
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)a8);
    v56 = Type;
    if (!Type)
      goto LABEL_22;
    v57 = *Type;
    v58 = mlir::TypeID::get<mlir::ShapedType>();
    v59 = *(unsigned int *)(v57 + 16);
    if (!(_DWORD)v59)
      goto LABEL_22;
    v60 = *(_QWORD **)(v57 + 8);
    v61 = &v60[2 * v59];
    do
    {
      v62 = v59 >> 1;
      v63 = &v60[2 * (v59 >> 1)];
      v65 = *v63;
      v64 = v63 + 2;
      v59 += ~(v59 >> 1);
      if (v65 < v58)
        v60 = v64;
      else
        v59 = v62;
    }
    while (v59);
    if (v60 != v61 && *v60 == v58)
      v66 = v60[1];
    else
LABEL_22:
      v66 = 0;
    *(_QWORD *)&v113 = v56;
    *((_QWORD *)&v113 + 1) = v66;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v113);
    v68 = (_QWORD *)(*(_QWORD *)(v98 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v68)
    {
      v69 = a3;
      v70 = *v68;
      v71 = mlir::TypeID::get<mlir::ShapedType>();
      v72 = *(unsigned int *)(v70 + 16);
      if ((_DWORD)v72)
      {
        v73 = *(_QWORD **)(v70 + 8);
        v74 = &v73[2 * v72];
        do
        {
          v75 = v72 >> 1;
          v76 = &v73[2 * (v72 >> 1)];
          v78 = *v76;
          v77 = v76 + 2;
          v72 += ~(v72 >> 1);
          if (v78 < v71)
            v73 = v77;
          else
            v72 = v75;
        }
        while (v72);
        a3 = v69;
        if (v73 == v74)
        {
          v79 = 0;
          v20 = a9;
        }
        else
        {
          v20 = a9;
          if (*v73 == v71)
            v79 = v73[1];
          else
            v79 = 0;
        }
      }
      else
      {
        v79 = 0;
        a3 = v69;
        v20 = a9;
      }
      v48 = (mlir::OpBuilder *)(a2 + 8);
    }
    else
    {
      v79 = 0;
    }
    IndexFromDim = v68;
    v110 = v79;
    LOBYTE(v113) = 0;
    v114 = 0;
    v80 = (void *)mlir::ShapedType::cloneWith((uint64_t *)&IndexFromDim, &v113, OperandRange);
    v82 = v81;
    *(_QWORD *)&v113 = mlir::rewriteElementsAttr(*a8, a8[1], (uint64_t)v80, v82, 0);
    *((_QWORD *)&v113 + 1) = v83;
    v98 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(v48, a4, (uint64_t *)&IndexFromDim, (_QWORD **)&v113)- 16;
    *(_QWORD *)&v113 = v47;
  }
  else
  {
    v54 = 0;
    *(_QWORD *)&v113 = 0;
  }
  IndexFromDim = v54;
  v84 = (char *)mlir::OpBuilder::create<mlir::anec::Linear,mlir::Value &,mlir::Value &,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>((mlir::UnknownLoc **)(a2 + 8), a4, (uint64_t *)&v99, &v98, (uint64_t *)&v113, (uint64_t *)&IndexFromDim)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v100);
  if (v85 >= 4)
  {
    v111 = v84;
    *(_QWORD *)&v113 = mlir::getRankPromotionTypeForANE(v100, v101);
    *((_QWORD *)&v113 + 1) = v86;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v113);
    v88 = v87;
    IndexFromDim = (_QWORD *)mlir::anec::getIndexFromDim(1, v87);
    v110 = v89;
    v107 = mlir::anec::getIndexFromDim(3, v88);
    v108 = v90;
    v84 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a2 + 8), a4, (uint64_t *)&v111, (uint64_t *)&IndexFromDim, (uint64_t *)&v107)- 16;
  }
  if (v20)
  {
    v111 = v84;
    *(_QWORD *)&v113 = mlir::getRankPromotionTypeForANE(v100, v101);
    *((_QWORD *)&v113 + 1) = v91;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v113);
    v93 = v92;
    IndexFromDim = (_QWORD *)mlir::anec::getIndexFromDim(1, v92);
    v110 = v94;
    v107 = mlir::anec::getIndexFromDim(4, v93);
    v108 = v95;
    v84 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a2 + 8), a4, (uint64_t *)&v111, (uint64_t *)&IndexFromDim, (uint64_t *)&v107)- 16;
  }
  v96 = v106;
  *(_QWORD *)&v113 = v84;
  mlir::ValueRange::ValueRange(v112, (uint64_t)&v113, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a2, v96, v112[0], v112[1]);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.matmul", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.matmul";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::MatMul::build(a1, (uint64_t)v19, *a3, *a4, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::MatMul,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t mlir::getSingleFloatValue<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *Shape;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD v20[2];
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v23 = a2;
  v21[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22);
  v21[1] = v2;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v21);
  if (mlir::ShapedType::getNumElements(Shape, v4) != 1)
    goto LABEL_36;
  v20[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22);
  v20[1] = v5;
  v6 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20) + 136);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v15
    || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (v18 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (v18 = 1),
        v18))
  {
    LODWORD(v20[0]) = 0;
    mlir::copyElementsAttrData<float>(v22, v23, (uint64_t)v20, 1);
    v16 = LODWORD(v20[0]);
    v17 = 0x100000000;
  }
  else
  {
LABEL_36:
    v17 = 0;
    v16 = 0;
  }
  return v16 | v17;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> &,mlir::detail::RecursivePatternMatcher<mlir::mps::DequantizeOp,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>,mlir::detail::constant_op_binder<mlir::ElementsAttr>> & &)#1},0ul,1ul,2ul,3ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t DefiningOp;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (DefiningOp)
    LOBYTE(DefiningOp) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1, DefiningOp);
  if (**(_BYTE **)a2)
    v5 = DefiningOp;
  else
    v5 = 0;
  **(_BYTE **)a2 = v5;
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  v6 = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (v6)
    LOBYTE(v6) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 1, v6);
  if (**(_BYTE **)a2)
    v7 = v6;
  else
    v7 = 0;
  **(_BYTE **)a2 = v7;
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 88);
  v8 = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (v8)
    LOBYTE(v8) = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 2, v8);
  if (**(_BYTE **)a2)
    v9 = v8;
  else
    v9 = 0;
  **(_BYTE **)a2 = v9;
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 120);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
    result = mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a1 + 3, result);
  if (**(_BYTE **)a2)
    v11 = result;
  else
    v11 = 0;
  **(_BYTE **)a2 = v11;
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Linear,mlir::Value &,mlir::Value &,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.linear", (const unsigned __int8 *)0xB, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.linear";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::Linear::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Linear,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.transpose", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.transpose";
    v19[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::Transpose::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Transpose,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)1>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)1>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)2>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)2>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)3>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)3>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)4>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)4>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)5>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)5>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)6>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)6>::~ConvertMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertMatMul<(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *Input;
  int matched;
  char *Filter;
  _BOOL4 TransposeRhs;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v82;
  uint64_t v84;
  _OWORD v85[4];
  _OWORD v86[4];
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t IndexFromDim;
  uint64_t v99;
  char *v100;
  unint64_t v101[2];
  pthread_rwlock_t *v102[67];
  __int128 v103;
  uint64_t ArgOperands;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  v103 = *(_OWORD *)(a3 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v93 = v5;
  v94 = v15;
  v82 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v84 = (uint64_t)v5;
  v91 = v16;
  v92 = v26;
  v27 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v27)
    goto LABEL_30;
  v28 = *v27;
  v29 = mlir::TypeID::get<mlir::ShapedType>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_30;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_30:
    v37 = 0;
  v89 = v27;
  v90 = v37;
  v38 = (char *)mlir::ValueRange::dereference_iterator(&v103, 0);
  v88 = v38;
  v39 = (char *)mlir::ValueRange::dereference_iterator(&v103, 1);
  v87 = v39;
  v40 = *(_QWORD *)(v95 + 24);
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  Input = (char *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95);
  Filter = (char *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v95);
  {
    if (!matched)
      goto LABEL_42;
    v45 = 0;
LABEL_37:
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v86);
    v105 = v46;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (v47 == 2 || (v45 & 1) == 0)
    {
      if (v47 != 2)
        goto LABEL_42;
LABEL_53:
      v80 = (unsigned int *)v95;
      mlir::TypeConverter::TypeConverter((mlir::TypeConverter *)v102, *(const mlir::TypeConverter **)(a1 + 96));
      mlir::TypeConverter::~TypeConverter(v102);
    }
LABEL_39:
    IndexFromDim = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85);
    v99 = v48;
    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
    if (v49 != 2)
      goto LABEL_42;
    v45 = 1;
    goto LABEL_53;
  }
  TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95);
  v45 = TransposeRhs;
  if ((matched & 1) != 0)
    goto LABEL_37;
  if (TransposeRhs)
    goto LABEL_39;
LABEL_42:
  mlir::ShapedType::getShape((mlir::ShapedType *)&v93);
  if (v50 >= 4)
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v51;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v53 = v52;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v52);
    v99 = v54;
    v96 = mlir::anec::getIndexFromDim(3, v53);
    v97 = v55;
    v38 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v88 = v38;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
  if (v56 >= 4)
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v57;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v59 = v58;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v58);
    v99 = v60;
    v96 = mlir::anec::getIndexFromDim(3, v59);
    v97 = v61;
    v39 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
    v87 = v39;
  }
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v95))
  {
    v100 = v38;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v93, v94);
    v105 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v64 = v63;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v63);
    v99 = v65;
    v96 = mlir::anec::getIndexFromDim(4, v64);
    v97 = v66;
    v88 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v95))
  {
    v100 = v39;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v91, v92);
    v105 = v67;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v69 = v68;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v68);
    v99 = v70;
    v96 = mlir::anec::getIndexFromDim(4, v69);
    v97 = v71;
    v87 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  ArgOperands = 0;
  v72 = (char *)mlir::OpBuilder::create<mlir::anec::MatMul,mlir::Value &,mlir::Value &,decltype(nullptr)>((mlir::UnknownLoc **)(a4 + 8), v40, (uint64_t *)&v88, (uint64_t *)&v87)- 16;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v89);
  if (v73 >= 4)
  {
    v100 = v72;
    ArgOperands = mlir::getRankPromotionTypeForANE((uint64_t)v89, v90);
    v105 = v74;
    mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    v76 = v75;
    IndexFromDim = mlir::anec::getIndexFromDim(1, v75);
    v99 = v77;
    v96 = mlir::anec::getIndexFromDim(3, v76);
    v97 = v78;
    v72 = (char *)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), v40, (uint64_t *)&v100, (uint64_t *)&IndexFromDim, (uint64_t *)&v96)- 16;
  }
  v79 = (unsigned int *)v95;
  ArgOperands = (uint64_t)v72;
  mlir::ValueRange::ValueRange(v101, (uint64_t)&ArgOperands, 1uLL);
  mlir::ConversionPatternRewriter::replaceOp(a4, v79, v101[0], v101[1]);
  return 1;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::DegammaOp,mlir::anec::Degamma>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032DC8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BA824()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::DegammaOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DegammaOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DegammaOpGenericAdaptorBase::DegammaOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DegammaOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DegammaOpGenericAdaptorBase::DegammaOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DegammaOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DegammaOp &>(mlir::mps::DegammaOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DegammaOp &>(mlir::mps::DegammaOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::DegammaOp,mlir::anec::Degamma>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Degamma,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DegammaOp &>(mlir::mps::DegammaOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::DegammaOp,mlir::anec::Degamma>::matchAndRewriteWithStaticShapes(mlir::mps::DegammaOp,mlir::mps::DegammaOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Degamma,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.degamma", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.degamma";
    v21[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Degamma,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::DiracOp,mlir::anec::Dirac>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032A48;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BB42C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::DiracOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DiracOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DiracOpGenericAdaptorBase::DiracOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::DiracOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::DiracOpGenericAdaptorBase::DiracOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::DiracOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DiracOp &>(mlir::mps::DiracOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DiracOp &>(mlir::mps::DiracOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::DiracOp,mlir::anec::Dirac>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Dirac,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::DiracOp &>(mlir::mps::DiracOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::DiracOp,mlir::anec::Dirac>::matchAndRewriteWithStaticShapes(mlir::mps::DiracOp,mlir::mps::DiracOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Dirac,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.dirac", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.dirac";
    v21[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Dirac,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::GeluOp,mlir::anec::Gelu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032818;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BC034()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::GeluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GeluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::GeluOpGenericAdaptorBase::GeluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GeluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::GeluOpGenericAdaptorBase::GeluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::GeluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GeluOp &>(mlir::mps::GeluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GeluOp &>(mlir::mps::GeluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::GeluOp,mlir::anec::Gelu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Gelu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GeluOp &>(mlir::mps::GeluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::GeluOp,mlir::anec::Gelu>::matchAndRewriteWithStaticShapes(mlir::mps::GeluOp,mlir::mps::GeluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Gelu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gelu", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.gelu";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Gelu,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReluOp,mlir::anec::Relu>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032888;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BCC3C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReluOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReluOpGenericAdaptorBase::ReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReluOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReluOpGenericAdaptorBase::ReluOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReluOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReluOp &>(mlir::mps::ReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReluOp &>(mlir::mps::ReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReluOp,mlir::anec::Relu>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Relu,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReluOp &>(mlir::mps::ReluOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ReluOp,mlir::anec::Relu>::matchAndRewriteWithStaticShapes(mlir::mps::ReluOp,mlir::mps::ReluOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Relu,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.relu", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.relu";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::RoundOp,mlir::anec::RoundNearest>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032C78;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BD844()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::RoundOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::RoundOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::RoundOpGenericAdaptorBase::RoundOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::RoundOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::RoundOpGenericAdaptorBase::RoundOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::RoundOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::RoundOp &>(mlir::mps::RoundOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::RoundOp &>(mlir::mps::RoundOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::RoundOp,mlir::anec::RoundNearest>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::RoundNearest,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::RoundOp &>(mlir::mps::RoundOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::RoundOp,mlir::anec::RoundNearest>::matchAndRewriteWithStaticShapes(mlir::mps::RoundOp,mlir::mps::RoundOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::RoundNearest,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.round_nearest", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.round_nearest";
    v21[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::RoundNearest,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SigmoidOp,mlir::anec::HighPrecisionSigmoid>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032E38;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BE44C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::SigmoidOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SigmoidOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SigmoidOpGenericAdaptorBase::SigmoidOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SigmoidOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SigmoidOpGenericAdaptorBase::SigmoidOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SigmoidOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SigmoidOp &>(mlir::mps::SigmoidOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SigmoidOp &>(mlir::mps::SigmoidOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SigmoidOp,mlir::anec::HighPrecisionSigmoid>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::HighPrecisionSigmoid,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SigmoidOp &>(mlir::mps::SigmoidOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SigmoidOp,mlir::anec::HighPrecisionSigmoid>::matchAndRewriteWithStaticShapes(mlir::mps::SigmoidOp,mlir::mps::SigmoidOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::HighPrecisionSigmoid,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.high_precision_sigmoid", (const unsigned __int8 *)0x1B, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.high_precision_sigmoid";
    v21[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::HighPrecisionSigmoid,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SquareOp,mlir::anec::ElementwiseSquare>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032D58;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BF054()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::SquareOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SquareOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SquareOpGenericAdaptorBase::SquareOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SquareOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SquareOpGenericAdaptorBase::SquareOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SquareOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SquareOp &>(mlir::mps::SquareOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SquareOp &>(mlir::mps::SquareOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SquareOp,mlir::anec::ElementwiseSquare>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::ElementwiseSquare,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SquareOp &>(mlir::mps::SquareOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SquareOp,mlir::anec::ElementwiseSquare>::matchAndRewriteWithStaticShapes(mlir::mps::SquareOp,mlir::mps::SquareOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseSquare,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.square", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.square";
    v21[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseSquare,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SquareRootOp,mlir::anec::Sqrt>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C0323B8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075BFC5C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::SquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SquareRootOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SquareRootOpGenericAdaptorBase::SquareRootOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SquareRootOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SquareRootOpGenericAdaptorBase::SquareRootOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SquareRootOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SquareRootOp &>(mlir::mps::SquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SquareRootOp &>(mlir::mps::SquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SquareRootOp,mlir::anec::Sqrt>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Sqrt,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SquareRootOp &>(mlir::mps::SquareRootOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SquareRootOp,mlir::anec::Sqrt>::matchAndRewriteWithStaticShapes(mlir::mps::SquareRootOp,mlir::mps::SquareRootOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Sqrt,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sqrt", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.sqrt";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Sqrt,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SwishOp,mlir::anec::Swish>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032CE8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075C0864()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::SwishOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SwishOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SwishOpGenericAdaptorBase::SwishOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SwishOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SwishOpGenericAdaptorBase::SwishOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SwishOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SwishOp &>(mlir::mps::SwishOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SwishOp &>(mlir::mps::SwishOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SwishOp,mlir::anec::Swish>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Swish,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SwishOp &>(mlir::mps::SwishOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SwishOp,mlir::anec::Swish>::matchAndRewriteWithStaticShapes(mlir::mps::SwishOp,mlir::mps::SwishOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Swish,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.swish", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.swish";
    v21[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Swish,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::TanhOp,mlir::anec::Tanh>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032968;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075C146C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::TanhOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TanhOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::TanhOpGenericAdaptorBase::TanhOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TanhOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::TanhOpGenericAdaptorBase::TanhOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::TanhOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TanhOp &>(mlir::mps::TanhOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TanhOp &>(mlir::mps::TanhOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::TanhOp,mlir::anec::Tanh>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Tanh,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TanhOp &>(mlir::mps::TanhOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::TanhOp,mlir::anec::Tanh>::matchAndRewriteWithStaticShapes(mlir::mps::TanhOp,mlir::mps::TanhOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Tanh,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.tanh", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.tanh";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Tanh,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::EqualToOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::EqualToOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::EqualToOpGenericAdaptorBase::EqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::EqualToOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::EqualToOpGenericAdaptorBase::EqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::EqualToOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EqualToOp &>(mlir::mps::EqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EqualToOp &>(mlir::mps::EqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqual>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
    goto LABEL_32;
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (v16)
  {
    if (v30 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
      {
        if (v29)
          MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        goto LABEL_32;
      }
      v18 = v29;
    }
    else
    {
      v18 = &v29;
    }
    v19 = *v18 == 0;
    if (v17 >= 0x41)
    {
LABEL_22:
      if (v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        if (!v19)
          goto LABEL_32;
LABEL_26:
        v20 = a4[2];
        if (v20 && mlir::RewriterBase::Listener::classof(v20))
        else
          v21 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v19 = 0;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v19)
    goto LABEL_26;
LABEL_32:
  v22 = mlir::OpBuilder::create<mlir::anec::ElementwiseEqual,llvm::SmallVector<mlir::Value,6u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v22);
  v21 = 1;
LABEL_33:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::EqualToOp &>(mlir::mps::EqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::detail::constant_int_op_binder_any_splat::match(mlir::detail::constant_int_op_binder_any_splat *this, mlir::Operation *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9;
  BOOL v10;
  _BOOL8 v11;
  unint64_t v12;
  mlir::detail::constant_int_op_binder_any_splat *v15;
  uint64_t v16;
  uint64_t NumElements;
  uint64_t v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  mlir::detail::constant_int_op_binder_any_splat *v22;
  _QWORD v23[2];
  void *v24[2];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 6) + 32))(*((_QWORD *)a2 + 6), v4))
    return 0;
  v24[0] = v25;
  v24[1] = (void *)0x100000000;
  mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v24);
  v5 = *(_QWORD *)v24[0] & 0xFFFFFFFFFFFFFFF8;
  if (v24[0] != v25)
    free(v24[0]);
  if (!v5)
    return 0;
  v6 = *(void **)(*(_QWORD *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v8 = *(_QWORD *)this;
    v9 = *(void **)(*(_QWORD *)v5 + 136);
    v10 = v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    v11 = v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v12 = v5;
    else
      v12 = 0;
    v23[0] = v12;
    if (v10)
    {
      mlir::IntegerAttr::getValue(v23, (llvm::APInt *)v24);
      if (*(_DWORD *)(v8 + 8) >= 0x41u && *(_QWORD *)v8)
        MEMORY[0x20BD002D4](*(_QWORD *)v8, 0x1000C8000313F17);
      *(void **)v8 = v24[0];
      *(_DWORD *)(v8 + 8) = v24[1];
    }
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(v5))
      v15 = (mlir::detail::constant_int_op_binder_any_splat *)v5;
    else
      v15 = 0;
    v24[0] = v15;
    if (v15)
    {
      v15 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v24)
          ? (mlir::detail::constant_int_op_binder_any_splat *)v5
          : 0;
      v22 = v15;
      if (v15)
      {
        v16 = *(_QWORD *)this;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
        ZinMirCacheTensors::ZinMirCacheTensors(v24, (uint64_t)v22, 0);
        this = v22;
        NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v22);
        ZinMirCacheTensors::ZinMirCacheTensors(v23, (uint64_t)this, NumElements);
        v18 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(v24);
        v19 = *(void **)(*(_QWORD *)v18 + 136);
        v20 = v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
        LODWORD(this) = v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
        if (v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          v21 = v18;
        else
          v21 = 0;
        v23[0] = v21;
        if (v20)
        {
          mlir::IntegerAttr::getValue(v23, (llvm::APInt *)v24);
          if (*(_DWORD *)(v16 + 8) >= 0x41u && *(_QWORD *)v16)
            MEMORY[0x20BD002D4](*(_QWORD *)v16, 0x1000C8000313F17);
          *(void **)v16 = v24[0];
          *(_DWORD *)(v16 + 8) = v24[1];
        }
        LODWORD(v15) = 1;
      }
    }
    return v15 & this;
  }
  return v11;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqual>::matchAndRewriteWithStaticShapes(mlir::mps::EqualToOp,mlir::mps::EqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompare expects the second operand to be non-zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseEqual,llvm::SmallVector<mlir::Value,6u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.equal", (const unsigned __int8 *)0xA, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.equal";
    v15[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::ElementwiseEqual::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseEqual,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqualZero>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrHalH13g *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
LABEL_28:
    v22 = a4[2];
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
    else
      v21 = 0;
    goto LABEL_32;
  }
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (!v16)
  {
    v19 = 0;
    if (v30 < 0x41)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (v30 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
    {
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_28;
    }
    v18 = v29;
  }
  else
  {
    v18 = &v29;
  }
  v19 = *v18 == 0;
  if (v17 >= 0x41)
  {
LABEL_22:
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
LABEL_24:
  if (!v19)
    goto LABEL_28;
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseEqualZero,mlir::Value>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  v21 = 1;
LABEL_32:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::EqualToOp,mlir::anec::ElementwiseEqualZero>::matchAndRewriteWithStaticShapes(mlir::mps::EqualToOp,mlir::mps::EqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompareToZero expects the second operand to be zero. \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NotEqualToOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NotEqualToOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::NotEqualToOpGenericAdaptorBase::NotEqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NotEqualToOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::NotEqualToOpGenericAdaptorBase::NotEqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::NotEqualToOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NotEqualToOp &>(mlir::mps::NotEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NotEqualToOp &>(mlir::mps::NotEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqual>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
    goto LABEL_32;
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (v16)
  {
    if (v30 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
      {
        if (v29)
          MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        goto LABEL_32;
      }
      v18 = v29;
    }
    else
    {
      v18 = &v29;
    }
    v19 = *v18 == 0;
    if (v17 >= 0x41)
    {
LABEL_22:
      if (v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        if (!v19)
          goto LABEL_32;
LABEL_26:
        v20 = a4[2];
        if (v20 && mlir::RewriterBase::Listener::classof(v20))
        else
          v21 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v19 = 0;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v19)
    goto LABEL_26;
LABEL_32:
  v22 = mlir::OpBuilder::create<mlir::anec::ElementwiseNotEqual,llvm::SmallVector<mlir::Value,6u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v22);
  v21 = 1;
LABEL_33:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NotEqualToOp &>(mlir::mps::NotEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqual>::matchAndRewriteWithStaticShapes(mlir::mps::NotEqualToOp,mlir::mps::NotEqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompare expects the second operand to be non-zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseNotEqual,llvm::SmallVector<mlir::Value,6u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.not_equal", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.not_equal";
    v15[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::ElementwiseEqual::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseNotEqual,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqualZero>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrHalH13g *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
LABEL_28:
    v22 = a4[2];
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
    else
      v21 = 0;
    goto LABEL_32;
  }
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (!v16)
  {
    v19 = 0;
    if (v30 < 0x41)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (v30 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
    {
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_28;
    }
    v18 = v29;
  }
  else
  {
    v18 = &v29;
  }
  v19 = *v18 == 0;
  if (v17 >= 0x41)
  {
LABEL_22:
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
LABEL_24:
  if (!v19)
    goto LABEL_28;
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseNotEqualZero,mlir::Value>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  v21 = 1;
LABEL_32:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::NotEqualToOp,mlir::anec::ElementwiseNotEqualZero>::matchAndRewriteWithStaticShapes(mlir::mps::NotEqualToOp,mlir::mps::NotEqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompareToZero expects the second operand to be zero. \n");
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThan>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThan>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GreaterThanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GreaterThanOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::GreaterThanOpGenericAdaptorBase::GreaterThanOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GreaterThanOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::GreaterThanOpGenericAdaptorBase::GreaterThanOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::GreaterThanOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GreaterThanOp &>(mlir::mps::GreaterThanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GreaterThanOp &>(mlir::mps::GreaterThanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThan>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
    goto LABEL_32;
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (v16)
  {
    if (v30 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
      {
        if (v29)
          MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        goto LABEL_32;
      }
      v18 = v29;
    }
    else
    {
      v18 = &v29;
    }
    v19 = *v18 == 0;
    if (v17 >= 0x41)
    {
LABEL_22:
      if (v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        if (!v19)
          goto LABEL_32;
LABEL_26:
        v20 = a4[2];
        if (v20 && mlir::RewriterBase::Listener::classof(v20))
        else
          v21 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v19 = 0;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v19)
    goto LABEL_26;
LABEL_32:
  v22 = mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThan,llvm::SmallVector<mlir::Value,6u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v22);
  v21 = 1;
LABEL_33:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GreaterThanOp &>(mlir::mps::GreaterThanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThan>::matchAndRewriteWithStaticShapes(mlir::mps::GreaterThanOp,mlir::mps::GreaterThanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompare expects the second operand to be non-zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThan,llvm::SmallVector<mlir::Value,6u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.greater_than", (const unsigned __int8 *)0x11, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.greater_than";
    v15[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::ElementwiseEqual::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThan,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThanZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThanZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThanZero>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrHalH13g *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
LABEL_28:
    v22 = a4[2];
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
    else
      v21 = 0;
    goto LABEL_32;
  }
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (!v16)
  {
    v19 = 0;
    if (v30 < 0x41)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (v30 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
    {
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_28;
    }
    v18 = v29;
  }
  else
  {
    v18 = &v29;
  }
  v19 = *v18 == 0;
  if (v17 >= 0x41)
  {
LABEL_22:
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
LABEL_24:
  if (!v19)
    goto LABEL_28;
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThanZero,mlir::Value &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  v21 = 1;
LABEL_32:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOp,mlir::anec::ElementwiseGreaterThanZero>::matchAndRewriteWithStaticShapes(mlir::mps::GreaterThanOp,mlir::mps::GreaterThanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompareToZero expects the second operand to be zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThanZero,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.greater_than_zero", (const unsigned __int8 *)0x16, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.greater_than_zero";
    v15[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseGreaterThanEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThanZero,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GreaterThanOrEqualToOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GreaterThanOrEqualToOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::GreaterThanOrEqualToOpGenericAdaptorBase::GreaterThanOrEqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::GreaterThanOrEqualToOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::GreaterThanOrEqualToOpGenericAdaptorBase::GreaterThanOrEqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::GreaterThanOrEqualToOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GreaterThanOrEqualToOp &>(mlir::mps::GreaterThanOrEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GreaterThanOrEqualToOp &>(mlir::mps::GreaterThanOrEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqual>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
    goto LABEL_32;
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (v16)
  {
    if (v30 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
      {
        if (v29)
          MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        goto LABEL_32;
      }
      v18 = v29;
    }
    else
    {
      v18 = &v29;
    }
    v19 = *v18 == 0;
    if (v17 >= 0x41)
    {
LABEL_22:
      if (v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        if (!v19)
          goto LABEL_32;
LABEL_26:
        v20 = a4[2];
        if (v20 && mlir::RewriterBase::Listener::classof(v20))
        else
          v21 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v19 = 0;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v19)
    goto LABEL_26;
LABEL_32:
  v22 = mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThanEqual,llvm::SmallVector<mlir::Value,6u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v22);
  v21 = 1;
LABEL_33:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::GreaterThanOrEqualToOp &>(mlir::mps::GreaterThanOrEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqual>::matchAndRewriteWithStaticShapes(mlir::mps::GreaterThanOrEqualToOp,mlir::mps::GreaterThanOrEqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompare expects the second operand to be non-zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThanEqual,llvm::SmallVector<mlir::Value,6u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.greater_than_equal", (const unsigned __int8 *)0x17, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.greater_than_equal";
    v15[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::ElementwiseEqual::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThanEqual,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqualZero>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrHalH13g *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
LABEL_28:
    v22 = a4[2];
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
    else
      v21 = 0;
    goto LABEL_32;
  }
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (!v16)
  {
    v19 = 0;
    if (v30 < 0x41)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (v30 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
    {
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_28;
    }
    v18 = v29;
  }
  else
  {
    v18 = &v29;
  }
  v19 = *v18 == 0;
  if (v17 >= 0x41)
  {
LABEL_22:
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
LABEL_24:
  if (!v19)
    goto LABEL_28;
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThanEqualZero,mlir::Value &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  v21 = 1;
LABEL_32:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::GreaterThanOrEqualToOp,mlir::anec::ElementwiseGreaterThanEqualZero>::matchAndRewriteWithStaticShapes(mlir::mps::GreaterThanOrEqualToOp,mlir::mps::GreaterThanOrEqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompareToZero expects the second operand to be zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseGreaterThanEqualZero,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.greater_than_equal_zero", (const unsigned __int8 *)0x1C, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.greater_than_equal_zero";
    v15[3] = 28;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseGreaterThanEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseGreaterThanEqualZero,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThan>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThan>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LessThanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LessThanOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LessThanOpGenericAdaptorBase::LessThanOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LessThanOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LessThanOpGenericAdaptorBase::LessThanOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LessThanOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LessThanOp &>(mlir::mps::LessThanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LessThanOp &>(mlir::mps::LessThanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThan>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
    goto LABEL_32;
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (v16)
  {
    if (v30 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
      {
        if (v29)
          MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        goto LABEL_32;
      }
      v18 = v29;
    }
    else
    {
      v18 = &v29;
    }
    v19 = *v18 == 0;
    if (v17 >= 0x41)
    {
LABEL_22:
      if (v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        if (!v19)
          goto LABEL_32;
LABEL_26:
        v20 = a4[2];
        if (v20 && mlir::RewriterBase::Listener::classof(v20))
        else
          v21 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v19 = 0;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v19)
    goto LABEL_26;
LABEL_32:
  v22 = mlir::OpBuilder::create<mlir::anec::ElementwiseLessThan,llvm::SmallVector<mlir::Value,6u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v22);
  v21 = 1;
LABEL_33:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LessThanOp &>(mlir::mps::LessThanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThan>::matchAndRewriteWithStaticShapes(mlir::mps::LessThanOp,mlir::mps::LessThanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompare expects the second operand to be non-zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseLessThan,llvm::SmallVector<mlir::Value,6u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.less_than", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.less_than";
    v15[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::ElementwiseEqual::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThan,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThanZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThanZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThanZero>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrHalH13g *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
LABEL_28:
    v22 = a4[2];
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
    else
      v21 = 0;
    goto LABEL_32;
  }
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (!v16)
  {
    v19 = 0;
    if (v30 < 0x41)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (v30 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
    {
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_28;
    }
    v18 = v29;
  }
  else
  {
    v18 = &v29;
  }
  v19 = *v18 == 0;
  if (v17 >= 0x41)
  {
LABEL_22:
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
LABEL_24:
  if (!v19)
    goto LABEL_28;
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanZero,mlir::Value &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  v21 = 1;
LABEL_32:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOp,mlir::anec::ElementwiseLessThanZero>::matchAndRewriteWithStaticShapes(mlir::mps::LessThanOp,mlir::mps::LessThanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompareToZero expects the second operand to be zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanZero,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.less_than_zero", (const unsigned __int8 *)0x13, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.less_than_zero";
    v15[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseGreaterThanEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThanZero,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqual>::~ConvertBinaryCompare(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LessThanOrEqualToOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LessThanOrEqualToOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LessThanOrEqualToOpGenericAdaptorBase::LessThanOrEqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::LessThanOrEqualToOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::LessThanOrEqualToOpGenericAdaptorBase::LessThanOrEqualToOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::LessThanOrEqualToOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LessThanOrEqualToOp &>(mlir::mps::LessThanOrEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LessThanOrEqualToOp &>(mlir::mps::LessThanOrEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqual>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
    goto LABEL_32;
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (v16)
  {
    if (v30 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
      {
        if (v29)
          MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        goto LABEL_32;
      }
      v18 = v29;
    }
    else
    {
      v18 = &v29;
    }
    v19 = *v18 == 0;
    if (v17 >= 0x41)
    {
LABEL_22:
      if (v29)
      {
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
        if (!v19)
          goto LABEL_32;
LABEL_26:
        v20 = a4[2];
        if (v20 && mlir::RewriterBase::Listener::classof(v20))
        else
          v21 = 0;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v19 = 0;
    if (v30 >= 0x41)
      goto LABEL_22;
  }
  if (v19)
    goto LABEL_26;
LABEL_32:
  v22 = mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanEqual,llvm::SmallVector<mlir::Value,6u> &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t)&v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v22);
  v21 = 1;
LABEL_33:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::LessThanOrEqualToOp &>(mlir::mps::LessThanOrEqualToOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompare<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqual>::matchAndRewriteWithStaticShapes(mlir::mps::LessThanOrEqualToOp,mlir::mps::LessThanOrEqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompare expects the second operand to be non-zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanEqual,llvm::SmallVector<mlir::Value,6u> &>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.less_than_equal", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.less_than_equal";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::ElementwiseEqual::build(a1, (uint64_t)v18, v17[0], v17[1], 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThanEqual,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqualZero>::~ConvertBinaryCompareToZero(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqualZero>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _BYTE *v14;
  mlir::Operation *DefiningOp;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  ZinIrHalH13g *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v26 = v28;
  v27 = 0x600000000;
  if (v6 < 7)
  {
    v29 = v7;
    v30 = 0;
    if (!v6)
    {
      v13 = 0;
      v14 = v28;
      goto LABEL_12;
    }
    v8 = 0;
    v9 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v6, 8);
    v8 = v27;
    v9 = v26;
    v29 = v7;
    v30 = 0;
  }
  v10 = 0;
  v11 = (uint64_t *)&v9[8 * v8];
  do
  {
    *v11++ = mlir::ValueRange::dereference_iterator(&v29, v10);
    v10 = ++v30;
  }
  while (v29 != v7 || v10 != v6);
  v13 = v27;
  v14 = v26;
LABEL_12:
  LODWORD(v27) = v13 + v6;
  v24 = *((_QWORD *)v14 + 1);
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
LABEL_28:
    v22 = a4[2];
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
    else
      v21 = 0;
    goto LABEL_32;
  }
  LODWORD(v30) = 1;
  v29 = 0;
  v25 = &v29;
  v16 = mlir::detail::constant_int_op_binder_any_splat::match((mlir::detail::constant_int_op_binder_any_splat *)&v25, DefiningOp);
  v17 = v30;
  if (!v16)
  {
    v19 = 0;
    if (v30 < 0x41)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (v30 >= 0x41)
  {
    if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v29) > 0x40)
    {
      if (v29)
        MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
      goto LABEL_28;
    }
    v18 = v29;
  }
  else
  {
    v18 = &v29;
  }
  v19 = *v18 == 0;
  if (v17 >= 0x41)
  {
LABEL_22:
    if (v29)
      MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
LABEL_24:
  if (!v19)
    goto LABEL_28;
  v20 = mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanEqualZero,mlir::Value &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)v26);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v20);
  v21 = 1;
LABEL_32:
  if (v26 != v28)
    free(v26);
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertBinaryCompareToZero<mlir::mps::LessThanOrEqualToOp,mlir::anec::ElementwiseLessThanEqualZero>::matchAndRewriteWithStaticShapes(mlir::mps::LessThanOrEqualToOp,mlir::mps::LessThanOrEqualToOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: ConvertBinaryCompareToZero expects the second operand to be zero. \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseLessThanEqualZero,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.less_than_equal_zero", (const unsigned __int8 *)0x19, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"anec.less_than_equal_zero";
    v15[3] = 25;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::anec::ElementwiseGreaterThanEqualZero::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseLessThanEqualZero,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NotOp,mlir::anec::ElementwiseEqualZero>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C0326C8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075C6B08()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::NotOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NotOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::NotOpGenericAdaptorBase::NotOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::NotOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::NotOpGenericAdaptorBase::NotOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::NotOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NotOp &>(mlir::mps::NotOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NotOp &>(mlir::mps::NotOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NotOp,mlir::anec::ElementwiseEqualZero>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::ElementwiseEqualZero,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::NotOp &>(mlir::mps::NotOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::NotOp,mlir::anec::ElementwiseEqualZero>::matchAndRewriteWithStaticShapes(mlir::mps::NotOp,mlir::mps::NotOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseEqualZero,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.equal_zero", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.equal_zero";
    v21[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseEqualZero,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_QWORD *mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolAvgOp,mlir::anec::AveragePool>::~ConvertPool(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolAvgOp,mlir::anec::AveragePool>::~ConvertPool(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolAvgOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolAvgOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PoolAvgOpGenericAdaptorBase::PoolAvgOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolAvgOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PoolAvgOpGenericAdaptorBase::PoolAvgOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::PoolAvgOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolAvgOp,mlir::anec::AveragePool>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *Strides;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *InputAttributeNames;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int PaddingStyle;
  char v34;
  uint64_t *ExplicitPadding;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *WindowSizes;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL4 NormalizeCoordinates;
  _BOOL4 InferredResultTypes;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  _BYTE *v71;
  int v72;
  unsigned int v73;
  _BYTE *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  const char *v97;
  BOOL v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  unint64_t v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t *v119;
  char *v120;
  int v121;
  char *v122;
  unsigned int v123;
  uint64_t v124;
  size_t v125;
  uint64_t *v126;
  char *v127;
  int v128;
  char *v129;
  unsigned int v130;
  uint64_t v131;
  size_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t IntegerType;
  uint64_t v139;
  uint64_t StringAttr;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  mlir::MLIRContext *v152;
  uint64_t UnitAttr;
  ZinIrHalH13g *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  char v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t Shape;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  _BYTE *v170;
  uint64_t v171;
  _BOOL4 v172;
  __int128 v173;
  int v174;
  unsigned int *v175;
  uint64_t v176[2];
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186[2];
  void *v187;
  uint64_t v188;
  _BYTE v189[64];
  void *v190;
  uint64_t v191;
  _BYTE v192[32];
  void *__dst;
  uint64_t v194;
  _BYTE v195[32];
  void *v196;
  uint64_t v197;
  _BYTE v198[32];
  void *v199;
  uint64_t v200;
  _BYTE v201[64];
  void *v202;
  uint64_t v203;
  _BYTE v204[32];
  void *__src;
  uint64_t v206;
  _BYTE v207[32];
  __int128 v208;
  uint64_t IndexFromDim;
  uint64_t v210;
  __int16 v211;
  char *v212;
  uint64_t v213;
  _QWORD v214[2];
  __int16 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v175 = (unsigned int *)a2;
  v208 = *(_OWORD *)(a3 + 96);
  v6 = mlir::ValueRange::dereference_iterator(&v208, 0);
  if (*(_DWORD *)(a2 + 36) >= 2u && *(_QWORD *)(a2 - 32))
  {
    v212 = "failed: pooling with indices operation is not supported on ANEs.";
    v215 = 259;
    v199 = &v212;
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      if (mlir::RewriterBase::Listener::classof(v7))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v199);
      else
        return 0;
    }
    return v7;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
    mlir::TypeID::get<mlir::ShapedType>();
  if (*(_QWORD *)(a2 - 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  mlir::getElementBitWidth(v8);
  __src = v207;
  v206 = 0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v175);
  v10 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_19;
  v11 = *Strides;
  v12 = mlir::TypeID::get<mlir::ElementsAttr>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_19;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_19:
    v20 = 0;
  mlir::getIntValues<unsigned long long>(v10, v20, (uint64_t)&__src, 1);
  v202 = v204;
  v203 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v175);
  v22 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_29;
  v23 = *InputAttributeNames;
  v24 = mlir::TypeID::get<mlir::ElementsAttr>();
  v25 = *(unsigned int *)(v23 + 16);
  if (!(_DWORD)v25)
    goto LABEL_29;
  v26 = *(_QWORD **)(v23 + 8);
  v27 = &v26[2 * v25];
  do
  {
    v28 = v25 >> 1;
    v29 = &v26[2 * (v25 >> 1)];
    v31 = *v29;
    v30 = v29 + 2;
    v25 += ~(v25 >> 1);
    if (v31 < v24)
      v26 = v30;
    else
      v25 = v28;
  }
  while (v25);
  if (v26 != v27 && *v26 == v24)
    v32 = v26[1];
  else
LABEL_29:
    v32 = 0;
  mlir::getIntValues<unsigned long long>(v22, v32, (uint64_t)&v202, 1);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v175);
  v199 = v201;
  v200 = 0x800000000;
  if (PaddingStyle)
  {
LABEL_44:
    v196 = v198;
    v197 = 0x400000000;
    WindowSizes = (uint64_t *)mlir::mps::PoolAvgOp::getWindowSizes((mlir::mps::PoolAvgOp *)&v175);
    v49 = (uint64_t)WindowSizes;
    if (!WindowSizes)
      goto LABEL_53;
    v50 = *WindowSizes;
    v51 = mlir::TypeID::get<mlir::ElementsAttr>();
    v52 = *(unsigned int *)(v50 + 16);
    if (!(_DWORD)v52)
      goto LABEL_53;
    v53 = *(_QWORD **)(v50 + 8);
    v54 = &v53[2 * v52];
    do
    {
      v55 = v52 >> 1;
      v56 = &v53[2 * (v52 >> 1)];
      v58 = *v56;
      v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51)
        v53 = v57;
      else
        v52 = v55;
    }
    while (v52);
    if (v53 != v54 && *v53 == v51)
      v59 = v53[1];
    else
LABEL_53:
      v59 = 0;
    mlir::getIntValues<unsigned long long>(v49, v59, (uint64_t)&v196, 1);
    NormalizeCoordinates = mlir::mps::CropResizeOp::getNormalizeCoordinates((mlir::mps::CropResizeOp *)&v175);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v175);
    if ((_DWORD)v203)
    {
      v62 = v202;
      v63 = 8 * v203;
      while (*v62 == 1)
      {
        ++v62;
        v63 -= 8;
        if (!v63)
          goto LABEL_58;
      }
      v212 = "Dilated Pooling not supported on ANE";
      v215 = 259;
      v68 = v175;
      IndexFromDim = (uint64_t)&v212;
      v7 = *(_QWORD *)(a4 + 16);
      if (v7)
      {
        if (mlir::RewriterBase::Listener::classof(v7))
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)v68 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
        else
          v7 = 0;
      }
      goto LABEL_165;
    }
LABEL_58:
    v64 = (uint64_t)v175;
    v173 = v208;
    __dst = v195;
    v194 = 0x400000000;
    v65 = v206;
    if (!(_DWORD)v206)
    {
LABEL_68:
      v190 = v192;
      v191 = 0x400000000;
      v69 = v197;
      if (!(_DWORD)v197)
        goto LABEL_75;
      if (v197 < 5)
      {
        v71 = v192;
        v70 = v197;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, v197, 8);
        v70 = v197;
        if (!(_DWORD)v197)
        {
LABEL_74:
          LODWORD(v191) = v69;
LABEL_75:
          v172 = NormalizeCoordinates;
          v187 = v189;
          v188 = 0x800000000;
          v72 = v200;
          if (!(_DWORD)v200)
            goto LABEL_82;
          if (v200 < 9)
          {
            v74 = v189;
            v73 = v200;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v200, 8);
            v73 = v200;
            if (!(_DWORD)v200)
            {
LABEL_81:
              LODWORD(v188) = v72;
LABEL_82:
              v185 = v64;
              v217 = v173;
              v184 = mlir::ValueRange::dereference_iterator(&v217, 0);
              v75 = (uint64_t *)(*(_QWORD *)(v184 + 8) & 0xFFFFFFFFFFFFFFF8);
              if (!v75)
                goto LABEL_91;
              v76 = *v75;
              v77 = mlir::TypeID::get<mlir::ShapedType>();
              v78 = *(unsigned int *)(v76 + 16);
              if (!(_DWORD)v78)
                goto LABEL_91;
              v79 = *(_QWORD **)(v76 + 8);
              v80 = &v79[2 * v78];
              do
              {
                v81 = v78 >> 1;
                v82 = &v79[2 * (v78 >> 1)];
                v84 = *v82;
                v83 = v82 + 2;
                v78 += ~(v78 >> 1);
                if (v84 < v77)
                  v79 = v83;
                else
                  v78 = v81;
              }
              while (v78);
              if (v79 != v80 && *v79 == v77)
                v85 = v79[1];
              else
LABEL_91:
                v85 = 0;
              RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE((uint64_t)v75, v85);
              v183 = v86;
              mlir::getElementBitWidth(RankPromotionTypeForANE);
              v87 = *(_QWORD *)__dst;
              v88 = *((_QWORD *)__dst + 1);
              if (*(_QWORD *)__dst == 1)
              {
                v89 = *((_QWORD *)__dst + 1);
                if (v88 == 1)
                {
                  v90 = 0;
                  goto LABEL_100;
                }
              }
              else
              {
                if (v88 != 1)
                {
                  v97 = "Cannot infer 5D layout based on strides";
                  goto LABEL_147;
                }
                v89 = 1;
              }
              v91 = v87 >= v89;
              LODWORD(v89) = v87 >= v89;
              v90 = !v91;
LABEL_100:
              v92 = v190;
              v93 = *(_QWORD *)v190;
              v94 = *((_QWORD *)v190 + 1);
              if (*(_QWORD *)v190 == 1)
              {
                if (v94 == 1)
                {
                  v95 = 0;
LABEL_107:
                  if (v87 == 1 && v88 == 1)
                  {
                    LODWORD(v89) = v94;
                    v90 = v95;
                  }
                  else if ((_DWORD)v89 != (_DWORD)v94 || v90 != v95)
                  {
                    v97 = "Unable to infer layout";
LABEL_147:
                    v212 = (char *)v97;
                    v215 = 259;
                    v111 = v185;
                    IndexFromDim = (uint64_t)&v212;
                    v112 = *(_QWORD *)(a4 + 16);
                    if (v112 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v112 + 64))(v112, *(_QWORD *)(v111 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
LABEL_150:
                    LOBYTE(v113) = 0;
                    v114 = 0;
                    v115 = 0;
LABEL_151:
                    if (v187 != v189)
                      free(v187);
                    if (v190 != v192)
                      free(v190);
                    if (__dst != v195)
                      free(__dst);
                    if (v114)
                    {
                      v212 = (char *)v214;
                      v214[0] = v115 & 0xFFFFFFFFFFFFFF00 | v113;
                      v213 = 0x200000001;
                      v116 = v175;
                      if (v175[9] < 2)
                      {
                        v117 = 1;
                      }
                      else
                      {
                        v214[1] = 0;
                        v117 = 2;
                        LODWORD(v213) = 2;
                      }
                      mlir::ValueRange::ValueRange(v186, (uint64_t)v214, v117);
                      mlir::ConversionPatternRewriter::replaceOp(a4, v116, v186[0], v186[1]);
                      if (v212 != (char *)v214)
                        free(v212);
                      v7 = 1;
                    }
                    else
                    {
                      v7 = 0;
                    }
LABEL_165:
                    if (v196 != v198)
                      free(v196);
LABEL_167:
                    if (v199 != v201)
                      free(v199);
                    if (v202 != v204)
                      free(v202);
                    if (__src != v207)
                      free(__src);
                    return v7;
                  }
                  if ((_DWORD)v89)
                    v98 = 1;
                  else
                    v98 = v90 == 0;
                  v99 = !v98;
                  if (!v98)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                    IndexFromDim = mlir::anec::getIndexFromDim(1, v100);
                    v210 = v101;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                    v180 = (uint64_t *)mlir::anec::getIndexFromDim(2, v102);
                    v181 = v103;
                    if (!(_BYTE)v210 || !(_BYTE)v103)
                    {
                      v212 = "Cannot infer channel and depth dimensions for pooling";
                      v215 = 259;
                      v109 = v185;
                      v176[0] = (uint64_t)&v212;
                      v110 = *(_QWORD *)(a4 + 16);
                      if (v110 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                        (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v110 + 64))(v110, *(_QWORD *)(v109 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v176);
                      goto LABEL_150;
                    }
                    *(int8x16_t *)__dst = vextq_s8(*(int8x16_t *)__dst, *(int8x16_t *)__dst, 8uLL);
                    *(int8x16_t *)v190 = vextq_s8(*(int8x16_t *)v190, *(int8x16_t *)v190, 8uLL);
                    if (!PaddingStyle)
                    {
                      v104 = v187;
                      v105 = *(_OWORD *)v187;
                      *(_OWORD *)v187 = *((_OWORD *)v187 + 1);
                      v104[1] = v105;
                    }
                    v184 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), *(_QWORD *)(v185 + 24), &v184, (uint64_t *)&v180, &IndexFromDim)- 16;
                    LODWORD(v89) = 1;
                    v92 = v190;
                  }
                  if (v92[v89] != 1)
                  {
                    v97 = "ANEC does not kernel size != 1 in channel dimension";
                    goto LABEL_147;
                  }
                  v174 = v99;
                  v106 = v89;
                  v107 = (char *)__dst;
                  if (*((_QWORD *)__dst + v89) != 1)
                  {
                    v97 = "ANEC does not support striding in channel dimension";
                    goto LABEL_147;
                  }
                  switch(PaddingStyle)
                  {
                    case 0:
                      v162 = (char *)v187 + 8 * (2 * v89);
                      if (*v162 || v162[1])
                      {
                        v163 = "padding is only supported in t,b,l,r,f,b";
                        goto LABEL_198;
                      }
                      if (InferredResultTypes && (_DWORD)v194)
                      {
                        v164 = 0;
                        v165 = 0;
                        v171 = 16 * v194;
                        do
                        {
                          Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                          v167 = *(_QWORD *)((char *)v187 + v165 + 8);
                          if ((unint64_t)(*(_QWORD *)((char *)v187 + v165)
                                                + *(_QWORD *)(Shape + v164)
                                                + v167
                                                - *(_QWORD *)((char *)v190 + v164)
                                                + *(_QWORD *)&v107[v164])
                             % *(_QWORD *)&v107[v164])
                          {
                            *(_QWORD *)((char *)v187 + v165 + 8) = v167 + 1;
                          }
                          v165 += 16;
                          v164 += 8;
                        }
                        while (v171 != v165);
                      }
                      break;
                    case 1:
                      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v187, 8uLL, 0);
                      break;
                    case 2:
                    case 4:
                      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v187, 8uLL, 0);
                      break;
                    default:
                      v163 = "Unsupported paddingStyle";
LABEL_198:
                      mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(a4, &v185, v163);
                      goto LABEL_150;
                  }
                  v119 = (uint64_t *)__dst;
                  v120 = (char *)__dst + 8 * v106;
                  v121 = v194;
                  v122 = (char *)__dst + 8 * v194;
                  if (v122 != v120 + 8)
                  {
                    memmove(v120, v120 + 8, v122 - (v120 + 8));
                    v121 = v194;
                    v119 = (uint64_t *)__dst;
                  }
                  v123 = v121 - 1;
                  LODWORD(v194) = v123;
                  if (v123 != 1)
                  {
                    v124 = *v119;
                    v125 = 8 * v123 - 8;
                    memmove(v119, v119 + 1, v125);
                    *(uint64_t *)((char *)v119 + v125) = v124;
                  }
                  v126 = (uint64_t *)v190;
                  v127 = (char *)v190 + 8 * v106;
                  v128 = v191;
                  v129 = (char *)v190 + 8 * v191;
                  if (v129 != v127 + 8)
                  {
                    memmove(v127, v127 + 8, v129 - (v127 + 8));
                    v128 = v191;
                    v126 = (uint64_t *)v190;
                  }
                  v130 = v128 - 1;
                  LODWORD(v191) = v130;
                  if (v130 != 1)
                  {
                    v131 = *v126;
                    v132 = 8 * v130 - 8;
                    memmove(v126, v126 + 1, v132);
                    *(uint64_t *)((char *)v126 + v132) = v131;
                  }
                  v133 = (char *)v187;
                  v134 = (char *)v187 + 8 * (2 * v106);
                  v135 = (char *)v187 + 8 * v188;
                  v136 = v135 - (v134 + 16);
                  if (v135 != v134 + 16)
                  {
                    memmove((char *)v187 + 8 * (2 * v106), v134 + 16, v135 - (v134 + 16));
                    v133 = (char *)v187;
                  }
                  v137 = &v134[v136] - v133;
                  LODWORD(v188) = v137 >> 3;
                  std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(v133, v133 + 16, &v133[v137 & 0x7FFFFFFF8]);
                  v212 = (char *)v214;
                  v213 = 0x400000000;
                  v216 = 4;
                  IndexFromDim = 3;
                  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
                  v179 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&IndexFromDim, 1, IntegerType, 0);
                  IndexFromDim = 6;
                  v139 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
                  v178 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&IndexFromDim, 1, v139, 0);
                  IndexFromDim = (uint64_t)"ksize";
                  v211 = 259;
                  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v141 = mlir::Type::cast<mlir::ShapedType>(&v179);
                  v143 = mlir::DenseElementsAttr::getFromRawBuffer(v141, v142, v190, 8 * v191, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v212, StringAttr, v143);
                  IndexFromDim = (uint64_t)"stride";
                  v211 = 259;
                  v144 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v145 = mlir::Type::cast<mlir::ShapedType>(&v179);
                  v147 = mlir::DenseElementsAttr::getFromRawBuffer(v145, v146, __dst, 8 * v194, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v212, v144, v147);
                  IndexFromDim = (uint64_t)"padding";
                  v211 = 259;
                  v148 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v149 = mlir::Type::cast<mlir::ShapedType>(&v178);
                  v151 = mlir::DenseElementsAttr::getFromRawBuffer(v149, v150, v187, 8 * v188, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v212, v148, v151);
                  if (v172)
                  {
                    UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)(a4 + 8), v152);
                    mlir::NamedAttrList::set((uint64_t)&v212, (uint64_t)"inc_pad", 7, UnitAttr);
                  }
                  v154 = mlir::OpBuilder::create<mlir::anec::AveragePool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *(_QWORD *)(v185 + 24), (uint64_t)&v184, (uint64_t)&v212);
                  v113 = (unint64_t)v154 - 16;
                  v177 = (uint64_t)v154 - 16;
                  if (v174)
                  {
                    v180 = (uint64_t *)(*((_QWORD *)v154 - 1) & 0xFFFFFFFFFFFFFFF8);
                    IndexFromDim = (uint64_t)mlir::Type::cast<mlir::ShapedType>(&v180);
                    v210 = v155;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
                    v157 = (uint64_t *)mlir::anec::getIndexFromDim(1, v156);
                    v159 = v158;
                    v180 = v157;
                    v181 = v158;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
                    v176[0] = mlir::anec::getIndexFromDim(2, v160);
                    v176[1] = v161;
                    if (!v159 || !(_BYTE)v161)
                    {
                      mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(a4, &v185, "Cannot infer channel and depth dimensions for 3D Pooling");
                      LOBYTE(v113) = 0;
                      v114 = 0;
                      v115 = 0;
LABEL_200:
                      if (v212 != (char *)v214)
                        free(v212);
                      goto LABEL_151;
                    }
                    v113 = (unint64_t)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), *(_QWORD *)(v185 + 24), &v177, v176, (uint64_t *)&v180)- 16;
                  }
                  v115 = v113 & 0xFFFFFFFFFFFFFF00;
                  v114 = 1;
                  goto LABEL_200;
                }
              }
              else if (v94 != 1)
              {
                v97 = "Cannot infer 5D layout based on kernel size";
                goto LABEL_147;
              }
              v91 = v93 >= v94;
              LODWORD(v94) = v93 >= v94;
              v95 = !v91;
              goto LABEL_107;
            }
            v74 = v187;
          }
          memcpy(v74, v199, 8 * v73);
          goto LABEL_81;
        }
        v71 = v190;
      }
      memcpy(v71, v196, 8 * v70);
      goto LABEL_74;
    }
    if (v206 < 5)
    {
      v67 = v195;
      v66 = v206;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v195, v206, 8);
      v66 = v206;
      if (!(_DWORD)v206)
      {
LABEL_67:
        LODWORD(v194) = v65;
        goto LABEL_68;
      }
      v67 = __dst;
    }
    memcpy(v67, __src, 8 * v66);
    goto LABEL_67;
  }
  mlir::mps::PoolAvgOp::getExplicitPadding((mlir::mps::PoolAvgOp *)&v175);
  if (!v34)
  {
    v212 = "padding is null but paddingStyle is EXPLICT";
    v215 = 259;
    v108 = v175;
    v196 = &v212;
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      if (mlir::RewriterBase::Listener::classof(v7))
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)v108 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v196);
      else
        v7 = 0;
    }
    goto LABEL_167;
  }
  ExplicitPadding = (uint64_t *)mlir::mps::PoolAvgOp::getExplicitPadding((mlir::mps::PoolAvgOp *)&v175);
  if (v36)
  {
    v37 = (uint64_t)ExplicitPadding;
    if (!ExplicitPadding)
      goto LABEL_42;
    v38 = *ExplicitPadding;
    v39 = mlir::TypeID::get<mlir::ElementsAttr>();
    v40 = *(unsigned int *)(v38 + 16);
    if (!(_DWORD)v40)
      goto LABEL_42;
    v41 = *(_QWORD **)(v38 + 8);
    v42 = &v41[2 * v40];
    do
    {
      v43 = v40 >> 1;
      v44 = &v41[2 * (v40 >> 1)];
      v46 = *v44;
      v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39)
        v41 = v45;
      else
        v40 = v43;
    }
    while (v40);
    if (v41 != v42 && *v41 == v39)
      v47 = v41[1];
    else
LABEL_42:
      v47 = 0;
    mlir::getIntValues<unsigned long long>(v37, v47, (uint64_t)&v199, 1);
    goto LABEL_44;
  }
  v168 = std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(v168, v169, v170);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolAvgOp &>(mlir::mps::PoolAvgOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::SmallVectorImpl<unsigned long long>::resize(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int64x2_t v9;
  int64x2_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(result + 8);
  v4 = a2 - v3;
  if (a2 != v3)
  {
    v5 = a2;
    if (a2 < v3)
    {
LABEL_11:
      *(_DWORD *)(result + 8) = v5;
      return result;
    }
    if (*(unsigned int *)(result + 12) < a2)
    {
      v14 = result;
      v12 = a2 - v3;
      v13 = a3;
      llvm::SmallVectorBase<unsigned int>::grow_pod(result, (void *)(result + 16), a2, 8);
      v4 = v12;
      a3 = v13;
      result = v14;
      v3 = *(unsigned int *)(v14 + 8);
      if (v12)
        goto LABEL_5;
    }
    else if (v4)
    {
LABEL_5:
      v6 = *(_QWORD *)result + 8 * v3;
      v7 = (unint64_t *)v6;
      v8 = v4;
      if (v4 < 4)
        goto LABEL_17;
      v7 = (unint64_t *)(v6 + 8 * (v4 & 0xFFFFFFFFFFFFFFFCLL));
      v8 = v4 & 3;
      v9 = vdupq_n_s64(a3);
      v10 = (int64x2_t *)(v6 + 16);
      v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v10[-1] = v9;
        *v10 = v9;
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
      if (v4 != (v4 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_17:
        do
        {
          *v7++ = a3;
          --v8;
        }
        while (v8);
      }
    }
    v5 = v3 + v4;
    goto LABEL_11;
  }
  return result;
}

uint64_t mlir::`anonymous namespace'::updatePoolPadding(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, unint64_t **a7, int a8, char a9)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD v55[2];

  v55[0] = a1;
  v55[1] = a2;
  v13 = *a3;
  v14 = *a5;
  mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  v16 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v55) + 8 * (v15 - 4));
  v17 = v16 % v14;
  if (v16 % v14)
    v18 = v16 % v14;
  else
    v18 = v14;
  v19 = (v13 - v18) & ~((v13 - v18) >> 63);
  v20 = v19 >> 1;
  v21 = *a7;
  v22 = v19 - (v19 >> 1);
  *v21 = v20;
  v21[1] = v22;
  if (a9)
  {
    *v21 = v22;
    v21[1] = v20;
    v22 = v20;
  }
  if (v17)
    v23 = a8 == 0;
  else
    v23 = 1;
  if (!v23)
    v21[1] = v22 + 1;
  v24 = a3[1];
  v25 = a5[1];
  mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  v27 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v55) + 8 * (v26 - 3));
  v28 = v27 % v25;
  if (v27 % v25)
    v29 = v27 % v25;
  else
    v29 = v25;
  v30 = (v24 - v29) & ~((v24 - v29) >> 63);
  v31 = v30 >> 1;
  v32 = *a7;
  v33 = v30 - (v30 >> 1);
  v32[2] = v31;
  v32[3] = v33;
  if (a9)
  {
    v32[2] = v33;
    v32[3] = v31;
    v33 = v31;
  }
  if (v28)
    v34 = a8 == 0;
  else
    v34 = 1;
  if (!v34)
    v32[3] = v33 + 1;
  v35 = a3[2];
  v36 = a5[2];
  mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  v38 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v55) + 8 * (v37 - 2)) % v36;
  if (v38)
    v39 = v38;
  else
    v39 = v36;
  v40 = (v35 - v39) & ~((v35 - v39) >> 63);
  v41 = v40 >> 1;
  v42 = *a7;
  v43 = v40 - (v40 >> 1);
  v42[4] = v41;
  v42[5] = v43;
  if (a9)
  {
    v42[4] = v43;
    v42[5] = v41;
    v43 = v41;
  }
  if (v38 && a8)
    v42[5] = v43 + 1;
  v44 = a3[3];
  v45 = a5[3];
  mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  v47 = v46 - 1;
  result = mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  v49 = *(_QWORD *)(result + 8 * v47) % v45;
  if (v49)
    v50 = *(_QWORD *)(result + 8 * v47) % v45;
  else
    v50 = v45;
  v51 = (v44 - v50) & ~((v44 - v50) >> 63);
  v52 = v51 >> 1;
  v53 = *a7;
  v54 = v51 - (v51 >> 1);
  v53[6] = v52;
  v53[7] = v54;
  if (a9)
  {
    v53[6] = v54;
    v53[7] = v52;
    v54 = v52;
  }
  if (v49)
  {
    if (a8)
      v53[7] = v54 + 1;
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::AveragePool,mlir::Value &,mlir::NamedAttrList &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  const void *v11;
  uint64_t v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.average_pool", (const unsigned __int8 *)0x11, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.average_pool";
    v19[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::AveragePool::build(a1, (uint64_t)v21, a3, 1, v11, v12);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::AveragePool,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v13 = *(_QWORD *)__src;
      v14 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v14];
      *(_QWORD *)v4 = v13;
    }
    else if (a2 + 8 == a3)
    {
      v15 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v16 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v16);
      *(_QWORD *)__src = v15;
    }
    else
    {
      v6 = (a2 - __src) >> 3;
      v7 = (a3 - a2) >> 3;
      if (v6 == v7)
      {
        v8 = 0;
        do
        {
          v9 = *(_QWORD *)&__src[v8];
          *(_QWORD *)&__src[v8] = *(_QWORD *)&a2[v8];
          v10 = &__src[v8 + 8];
          *(_QWORD *)&a2[v8] = v9;
          v11 = (uint64_t)&a2[v8 + 8];
          v8 += 8;
        }
        while (v10 != a2 && v11 != (_QWORD)a3);
        return a2;
      }
      else
      {
        v17 = (a3 - a2) >> 3;
        v18 = (a2 - __src) >> 3;
        do
        {
          v19 = v18;
          v18 = v17;
          v17 = v19 % v17;
        }
        while (v17);
        if (v18)
        {
          v20 = &__src[8 * v18];
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            v21 = v22;
            v23 = &v20[8 * v6];
            v24 = v20;
            do
            {
              v25 = v24;
              v24 = v23;
              *(_QWORD *)v25 = *(_QWORD *)v23;
              v26 = (a3 - v23) >> 3;
              v27 = __OFSUB__(v6, v26);
              v29 = v6 - v26;
              v28 = (v29 < 0) ^ v27;
              v23 = &__src[8 * v29];
              if (v28)
                v23 = &v24[8 * v6];
            }
            while (v23 != v20);
            *(_QWORD *)v24 = v21;
          }
          while (v20 != __src);
        }
        return &__src[8 * v7];
      }
    }
  }
  return v4;
}

_QWORD *mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolL2NormOp,mlir::anec::L2NormPool>::~ConvertPool(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolL2NormOp,mlir::anec::L2NormPool>::~ConvertPool(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolL2NormOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolL2NormOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::PoolL2NormOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolL2NormOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[96];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PoolL2NormOpGenericAdaptorBase::PoolL2NormOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::PoolL2NormOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 96);
  v9 = *(_QWORD *)(a3 + 104);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 32);
      v36[3] = *(_OWORD *)(a3 + 48);
      v36[4] = v29;
      v36[2] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolL2NormOp,mlir::anec::L2NormPool>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *Strides;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *InputAttributeNames;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int PaddingStyle;
  char v34;
  uint64_t *ExplicitPadding;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *WindowSizes;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL4 InferredResultTypes;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  _BYTE *v70;
  int v71;
  unsigned int v72;
  _BYTE *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  const char *v96;
  BOOL v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  unsigned int *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unsigned int *v112;
  unint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  int v120;
  char *v121;
  unsigned int v122;
  uint64_t v123;
  size_t v124;
  uint64_t *v125;
  char *v126;
  int v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  size_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t IntegerType;
  uint64_t v138;
  uint64_t StringAttr;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  ZinIrHalH13g *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t Shape;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  _BYTE *v167;
  int v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  unsigned int *v172;
  uint64_t v173[2];
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183[2];
  void *v184;
  uint64_t v185;
  _BYTE v186[64];
  void *v187;
  uint64_t v188;
  _BYTE v189[32];
  void *__dst;
  uint64_t v191;
  _BYTE v192[32];
  void *v193;
  uint64_t v194;
  _BYTE v195[32];
  void *v196;
  uint64_t v197;
  _BYTE v198[64];
  void *v199;
  uint64_t v200;
  _BYTE v201[32];
  void *__src;
  uint64_t v203;
  _BYTE v204[32];
  __int128 v205;
  uint64_t IndexFromDim;
  uint64_t v207;
  __int16 v208;
  char *v209;
  uint64_t v210;
  _QWORD v211[2];
  __int16 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v172 = (unsigned int *)a2;
  v205 = *(_OWORD *)(a3 + 96);
  v6 = mlir::ValueRange::dereference_iterator(&v205, 0);
  if (*(_DWORD *)(a2 + 36) >= 2u && *(_QWORD *)(a2 - 32))
  {
    v209 = "failed: pooling with indices operation is not supported on ANEs.";
    v212 = 259;
    v196 = &v209;
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      if (mlir::RewriterBase::Listener::classof(v7))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v196);
      else
        return 0;
    }
    return v7;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
    mlir::TypeID::get<mlir::ShapedType>();
  if (*(_QWORD *)(a2 - 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  mlir::getElementBitWidth(v8);
  __src = v204;
  v203 = 0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v172);
  v10 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_19;
  v11 = *Strides;
  v12 = mlir::TypeID::get<mlir::ElementsAttr>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_19;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_19:
    v20 = 0;
  mlir::getIntValues<unsigned long long>(v10, v20, (uint64_t)&__src, 1);
  v199 = v201;
  v200 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v172);
  v22 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_29;
  v23 = *InputAttributeNames;
  v24 = mlir::TypeID::get<mlir::ElementsAttr>();
  v25 = *(unsigned int *)(v23 + 16);
  if (!(_DWORD)v25)
    goto LABEL_29;
  v26 = *(_QWORD **)(v23 + 8);
  v27 = &v26[2 * v25];
  do
  {
    v28 = v25 >> 1;
    v29 = &v26[2 * (v25 >> 1)];
    v31 = *v29;
    v30 = v29 + 2;
    v25 += ~(v25 >> 1);
    if (v31 < v24)
      v26 = v30;
    else
      v25 = v28;
  }
  while (v25);
  if (v26 != v27 && *v26 == v24)
    v32 = v26[1];
  else
LABEL_29:
    v32 = 0;
  mlir::getIntValues<unsigned long long>(v22, v32, (uint64_t)&v199, 1);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v172);
  v196 = v198;
  v197 = 0x800000000;
  if (PaddingStyle)
  {
LABEL_44:
    v193 = v195;
    v194 = 0x400000000;
    WindowSizes = (uint64_t *)mlir::mps::PoolAvgOp::getWindowSizes((mlir::mps::PoolAvgOp *)&v172);
    v49 = (uint64_t)WindowSizes;
    if (!WindowSizes)
      goto LABEL_53;
    v50 = *WindowSizes;
    v51 = mlir::TypeID::get<mlir::ElementsAttr>();
    v52 = *(unsigned int *)(v50 + 16);
    if (!(_DWORD)v52)
      goto LABEL_53;
    v53 = *(_QWORD **)(v50 + 8);
    v54 = &v53[2 * v52];
    do
    {
      v55 = v52 >> 1;
      v56 = &v53[2 * (v52 >> 1)];
      v58 = *v56;
      v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51)
        v53 = v57;
      else
        v52 = v55;
    }
    while (v52);
    if (v53 != v54 && *v53 == v51)
      v59 = v53[1];
    else
LABEL_53:
      v59 = 0;
    mlir::getIntValues<unsigned long long>(v49, v59, (uint64_t)&v193, 1);
    mlir::mps::CropResizeOp::getNormalizeCoordinates((mlir::mps::CropResizeOp *)&v172);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v172);
    if ((_DWORD)v200)
    {
      v61 = v199;
      v62 = 8 * v200;
      while (*v61 == 1)
      {
        ++v61;
        v62 -= 8;
        if (!v62)
          goto LABEL_58;
      }
      v209 = "Dilated Pooling not supported on ANE";
      v212 = 259;
      v67 = v172;
      IndexFromDim = (uint64_t)&v209;
      v7 = *(_QWORD *)(a4 + 16);
      if (v7)
      {
        if (mlir::RewriterBase::Listener::classof(v7))
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)v67 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
        else
          v7 = 0;
      }
      goto LABEL_156;
    }
LABEL_58:
    v168 = InferredResultTypes;
    v63 = (uint64_t)v172;
    v170 = v205;
    __dst = v192;
    v191 = 0x400000000;
    v64 = v203;
    if (!(_DWORD)v203)
    {
LABEL_68:
      v187 = v189;
      v188 = 0x400000000;
      v68 = v194;
      if (!(_DWORD)v194)
        goto LABEL_75;
      if (v194 < 5)
      {
        v70 = v189;
        v69 = v194;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v194, 8);
        v69 = v194;
        if (!(_DWORD)v194)
        {
LABEL_74:
          LODWORD(v188) = v68;
LABEL_75:
          v184 = v186;
          v185 = 0x800000000;
          v71 = v197;
          if (!(_DWORD)v197)
            goto LABEL_82;
          if (v197 < 9)
          {
            v73 = v186;
            v72 = v197;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v184, v186, v197, 8);
            v72 = v197;
            if (!(_DWORD)v197)
            {
LABEL_81:
              LODWORD(v185) = v71;
LABEL_82:
              v182 = v63;
              v214 = v170;
              v181 = mlir::ValueRange::dereference_iterator(&v214, 0);
              v74 = (uint64_t *)(*(_QWORD *)(v181 + 8) & 0xFFFFFFFFFFFFFFF8);
              if (!v74)
                goto LABEL_91;
              v75 = *v74;
              v76 = mlir::TypeID::get<mlir::ShapedType>();
              v77 = *(unsigned int *)(v75 + 16);
              if (!(_DWORD)v77)
                goto LABEL_91;
              v78 = *(_QWORD **)(v75 + 8);
              v79 = &v78[2 * v77];
              do
              {
                v80 = v77 >> 1;
                v81 = &v78[2 * (v77 >> 1)];
                v83 = *v81;
                v82 = v81 + 2;
                v77 += ~(v77 >> 1);
                if (v83 < v76)
                  v78 = v82;
                else
                  v77 = v80;
              }
              while (v77);
              if (v78 != v79 && *v78 == v76)
                v84 = v78[1];
              else
LABEL_91:
                v84 = 0;
              RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE((uint64_t)v74, v84);
              v180 = v85;
              mlir::getElementBitWidth(RankPromotionTypeForANE);
              v86 = *(_QWORD *)__dst;
              v87 = *((_QWORD *)__dst + 1);
              if (*(_QWORD *)__dst == 1)
              {
                v88 = *((_QWORD *)__dst + 1);
                if (v87 == 1)
                {
                  v89 = 0;
                  goto LABEL_100;
                }
              }
              else
              {
                if (v87 != 1)
                {
                  v96 = "Cannot infer 5D layout based on strides";
                  goto LABEL_138;
                }
                v88 = 1;
              }
              v90 = v86 >= v88;
              LODWORD(v88) = v86 >= v88;
              v89 = !v90;
LABEL_100:
              v91 = v187;
              v92 = *(_QWORD *)v187;
              v93 = *((_QWORD *)v187 + 1);
              if (*(_QWORD *)v187 == 1)
              {
                if (v93 == 1)
                {
                  v94 = 0;
LABEL_107:
                  if (v86 == 1 && v87 == 1)
                  {
                    LODWORD(v88) = v93;
                    v89 = v94;
                  }
                  else if ((_DWORD)v88 != (_DWORD)v93 || v89 != v94)
                  {
                    v96 = "Unable to infer layout";
LABEL_138:
                    v209 = (char *)v96;
                    v212 = 259;
                    IndexFromDim = (uint64_t)&v209;
                    v108 = *(_QWORD *)(a4 + 16);
                    if (v108 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v108 + 64))(v108, *(_QWORD *)(v63 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
LABEL_141:
                    LOBYTE(v109) = 0;
                    v110 = 0;
                    v111 = 0;
LABEL_142:
                    if (v184 != v186)
                      free(v184);
                    if (v187 != v189)
                      free(v187);
                    if (__dst != v192)
                      free(__dst);
                    if (v110)
                    {
                      v209 = (char *)v211;
                      v211[0] = v111 & 0xFFFFFFFFFFFFFF00 | v109;
                      v210 = 0x200000001;
                      v112 = v172;
                      if (v172[9] < 2)
                      {
                        v113 = 1;
                      }
                      else
                      {
                        v211[1] = 0;
                        v113 = 2;
                        LODWORD(v210) = 2;
                      }
                      mlir::ValueRange::ValueRange(v183, (uint64_t)v211, v113);
                      mlir::ConversionPatternRewriter::replaceOp(a4, v112, v183[0], v183[1]);
                      if (v209 != (char *)v211)
                        free(v209);
                      v7 = 1;
                    }
                    else
                    {
                      v7 = 0;
                    }
LABEL_156:
                    if (v193 != v195)
                      free(v193);
LABEL_158:
                    if (v196 != v198)
                      free(v196);
                    if (v199 != v201)
                      free(v199);
                    if (__src != v204)
                      free(__src);
                    return v7;
                  }
                  if ((_DWORD)v88)
                    v97 = 1;
                  else
                    v97 = v89 == 0;
                  v98 = !v97;
                  if (!v97)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                    IndexFromDim = mlir::anec::getIndexFromDim(1, v99);
                    v207 = v100;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                    v177 = (uint64_t *)mlir::anec::getIndexFromDim(2, v101);
                    v178 = v102;
                    if (!(_BYTE)v207 || !(_BYTE)v102)
                    {
                      v209 = "Cannot infer channel and depth dimensions for pooling";
                      v212 = 259;
                      v173[0] = (uint64_t)&v209;
                      v115 = *(_QWORD *)(a4 + 16);
                      if (v115 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                        (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v115 + 64))(v115, *(_QWORD *)(v63 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v173);
                      goto LABEL_141;
                    }
                    *(int8x16_t *)__dst = vextq_s8(*(int8x16_t *)__dst, *(int8x16_t *)__dst, 8uLL);
                    *(int8x16_t *)v187 = vextq_s8(*(int8x16_t *)v187, *(int8x16_t *)v187, 8uLL);
                    if (!PaddingStyle)
                    {
                      v103 = v184;
                      v104 = *(_OWORD *)v184;
                      *(_OWORD *)v184 = *((_OWORD *)v184 + 1);
                      v103[1] = v104;
                    }
                    v181 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), *(_QWORD *)(v63 + 24), &v181, (uint64_t *)&v177, &IndexFromDim)- 16;
                    LODWORD(v88) = 1;
                    v91 = v187;
                  }
                  if (v91[v88] != 1)
                  {
                    v96 = "ANEC does not kernel size != 1 in channel dimension";
                    goto LABEL_138;
                  }
                  v105 = v88;
                  v106 = (char *)__dst;
                  if (*((_QWORD *)__dst + v88) != 1)
                  {
                    v209 = "ANEC does not support striding in channel dimension";
                    v212 = 259;
                    v116 = v182;
                    IndexFromDim = (uint64_t)&v209;
                    v117 = *(_QWORD *)(a4 + 16);
                    if (v117 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v117 + 64))(v117, *(_QWORD *)(v116 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
                    LOBYTE(v109) = 0;
                    v110 = 0;
                    v111 = 0;
                    goto LABEL_142;
                  }
                  switch(PaddingStyle)
                  {
                    case 0:
                      v159 = (char *)v184 + 8 * (2 * v88);
                      if (*v159 || v159[1])
                      {
                        v160 = "padding is only supported in t,b,l,r,f,b";
                        goto LABEL_199;
                      }
                      v171 = v98;
                      if ((v168 & 1) != 0 && (_DWORD)v191)
                      {
                        v161 = 0;
                        v162 = 0;
                        v169 = 16 * v191;
                        do
                        {
                          Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                          v164 = *(_QWORD *)((char *)v184 + v162 + 8);
                          if ((unint64_t)(*(_QWORD *)((char *)v184 + v162)
                                                + *(_QWORD *)(Shape + v161)
                                                + v164
                                                - *(_QWORD *)((char *)v187 + v161)
                                                + *(_QWORD *)&v106[v161])
                             % *(_QWORD *)&v106[v161])
                          {
                            *(_QWORD *)((char *)v184 + v162 + 8) = v164 + 1;
                          }
                          v162 += 16;
                          v161 += 8;
                        }
                        while (v169 != v162);
                      }
                      break;
                    case 1:
                      v171 = v98;
                      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v184, 8uLL, 0);
                      break;
                    case 2:
                    case 4:
                      v171 = v98;
                      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v184, 8uLL, 0);
                      break;
                    default:
                      v160 = "Unsupported paddingStyle";
LABEL_199:
                      mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(a4, &v182, v160);
                      goto LABEL_141;
                  }
                  v118 = (uint64_t *)__dst;
                  v119 = (char *)__dst + 8 * v105;
                  v120 = v191;
                  v121 = (char *)__dst + 8 * v191;
                  if (v121 != v119 + 8)
                  {
                    memmove(v119, v119 + 8, v121 - (v119 + 8));
                    v120 = v191;
                    v118 = (uint64_t *)__dst;
                  }
                  v122 = v120 - 1;
                  LODWORD(v191) = v122;
                  if (v122 != 1)
                  {
                    v123 = *v118;
                    v124 = 8 * v122 - 8;
                    memmove(v118, v118 + 1, v124);
                    *(uint64_t *)((char *)v118 + v124) = v123;
                  }
                  v125 = (uint64_t *)v187;
                  v126 = (char *)v187 + 8 * v105;
                  v127 = v188;
                  v128 = (char *)v187 + 8 * v188;
                  if (v128 != v126 + 8)
                  {
                    memmove(v126, v126 + 8, v128 - (v126 + 8));
                    v127 = v188;
                    v125 = (uint64_t *)v187;
                  }
                  v129 = v127 - 1;
                  LODWORD(v188) = v129;
                  if (v129 != 1)
                  {
                    v130 = *v125;
                    v131 = 8 * v129 - 8;
                    memmove(v125, v125 + 1, v131);
                    *(uint64_t *)((char *)v125 + v131) = v130;
                  }
                  v132 = (char *)v184;
                  v133 = (char *)v184 + 8 * (2 * v105);
                  v134 = (char *)v184 + 8 * v185;
                  v135 = v134 - (v133 + 16);
                  if (v134 != v133 + 16)
                  {
                    memmove((char *)v184 + 8 * (2 * v105), v133 + 16, v134 - (v133 + 16));
                    v132 = (char *)v184;
                  }
                  v136 = &v133[v135] - v132;
                  LODWORD(v185) = v136 >> 3;
                  std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(v132, v132 + 16, &v132[v136 & 0x7FFFFFFF8]);
                  v209 = (char *)v211;
                  v210 = 0x400000000;
                  v213 = 4;
                  IndexFromDim = 3;
                  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
                  v176 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&IndexFromDim, 1, IntegerType, 0);
                  IndexFromDim = 6;
                  v138 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
                  v175 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&IndexFromDim, 1, v138, 0);
                  IndexFromDim = (uint64_t)"ksize";
                  v208 = 259;
                  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v140 = mlir::Type::cast<mlir::ShapedType>(&v176);
                  v142 = mlir::DenseElementsAttr::getFromRawBuffer(v140, v141, v187, 8 * v188, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v209, StringAttr, v142);
                  IndexFromDim = (uint64_t)"stride";
                  v208 = 259;
                  v143 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v144 = mlir::Type::cast<mlir::ShapedType>(&v176);
                  v146 = mlir::DenseElementsAttr::getFromRawBuffer(v144, v145, __dst, 8 * v191, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v209, v143, v146);
                  IndexFromDim = (uint64_t)"padding";
                  v208 = 259;
                  v147 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v148 = mlir::Type::cast<mlir::ShapedType>(&v175);
                  v150 = mlir::DenseElementsAttr::getFromRawBuffer(v148, v149, v184, 8 * v185, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v209, v147, v150);
                  v151 = mlir::OpBuilder::create<mlir::anec::L2NormPool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *(_QWORD *)(v182 + 24), (uint64_t)&v181, (uint64_t)&v209);
                  v109 = (unint64_t)v151 - 16;
                  v174 = (uint64_t)v151 - 16;
                  if (v171)
                  {
                    v177 = (uint64_t *)(*((_QWORD *)v151 - 1) & 0xFFFFFFFFFFFFFFF8);
                    IndexFromDim = (uint64_t)mlir::Type::cast<mlir::ShapedType>(&v177);
                    v207 = v152;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
                    v154 = (uint64_t *)mlir::anec::getIndexFromDim(1, v153);
                    v156 = v155;
                    v177 = v154;
                    v178 = v155;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
                    v173[0] = mlir::anec::getIndexFromDim(2, v157);
                    v173[1] = v158;
                    if (!v156 || !(_BYTE)v158)
                    {
                      mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(a4, &v182, "Cannot infer channel and depth dimensions for 3D Pooling");
                      LOBYTE(v109) = 0;
                      v110 = 0;
                      v111 = 0;
LABEL_201:
                      if (v209 != (char *)v211)
                        free(v209);
                      goto LABEL_142;
                    }
                    v109 = (unint64_t)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), *(_QWORD *)(v182 + 24), &v174, v173, (uint64_t *)&v177)- 16;
                  }
                  v111 = v109 & 0xFFFFFFFFFFFFFF00;
                  v110 = 1;
                  goto LABEL_201;
                }
              }
              else if (v93 != 1)
              {
                v96 = "Cannot infer 5D layout based on kernel size";
                goto LABEL_138;
              }
              v90 = v92 >= v93;
              LODWORD(v93) = v92 >= v93;
              v94 = !v90;
              goto LABEL_107;
            }
            v73 = v184;
          }
          memcpy(v73, v196, 8 * v72);
          goto LABEL_81;
        }
        v70 = v187;
      }
      memcpy(v70, v193, 8 * v69);
      goto LABEL_74;
    }
    if (v203 < 5)
    {
      v66 = v192;
      v65 = v203;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v192, v203, 8);
      v65 = v203;
      if (!(_DWORD)v203)
      {
LABEL_67:
        LODWORD(v191) = v64;
        goto LABEL_68;
      }
      v66 = __dst;
    }
    memcpy(v66, __src, 8 * v65);
    goto LABEL_67;
  }
  mlir::mps::PoolAvgOp::getExplicitPadding((mlir::mps::PoolAvgOp *)&v172);
  if (!v34)
  {
    v209 = "padding is null but paddingStyle is EXPLICT";
    v212 = 259;
    v107 = v172;
    v193 = &v209;
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      if (mlir::RewriterBase::Listener::classof(v7))
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)v107 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v193);
      else
        v7 = 0;
    }
    goto LABEL_158;
  }
  ExplicitPadding = (uint64_t *)mlir::mps::PoolAvgOp::getExplicitPadding((mlir::mps::PoolAvgOp *)&v172);
  if (v36)
  {
    v37 = (uint64_t)ExplicitPadding;
    if (!ExplicitPadding)
      goto LABEL_42;
    v38 = *ExplicitPadding;
    v39 = mlir::TypeID::get<mlir::ElementsAttr>();
    v40 = *(unsigned int *)(v38 + 16);
    if (!(_DWORD)v40)
      goto LABEL_42;
    v41 = *(_QWORD **)(v38 + 8);
    v42 = &v41[2 * v40];
    do
    {
      v43 = v40 >> 1;
      v44 = &v41[2 * (v40 >> 1)];
      v46 = *v44;
      v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39)
        v41 = v45;
      else
        v40 = v43;
    }
    while (v40);
    if (v41 != v42 && *v41 == v39)
      v47 = v41[1];
    else
LABEL_42:
      v47 = 0;
    mlir::getIntValues<unsigned long long>(v37, v47, (uint64_t)&v196, 1);
    goto LABEL_44;
  }
  v165 = std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(v165, v166, v167);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolL2NormOp &>(mlir::mps::PoolL2NormOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::L2NormPool,mlir::Value &,mlir::NamedAttrList &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  const void *v11;
  uint64_t v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.l2norm_pool", (const unsigned __int8 *)0x10, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.l2norm_pool";
    v19[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::L2NormPool::build(a1, (uint64_t)v21, a3, 1, v11, v12);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::L2NormPool,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolMaxOp,mlir::anec::MaxPool>::~ConvertPool(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolMaxOp,mlir::anec::MaxPool>::~ConvertPool(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolMaxOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[112];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PoolMaxOpGenericAdaptorBase::PoolMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::PoolMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[112];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::PoolMaxOpGenericAdaptorBase::PoolMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::PoolMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[8];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 112);
  v9 = *(_QWORD *)(a3 + 120);
  v37 = v8;
  v38 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 112);
      v36[6] = *(_OWORD *)(a3 + 96);
      v36[7] = v28;
      v29 = *(_OWORD *)(a3 + 80);
      v36[4] = *(_OWORD *)(a3 + 64);
      v36[5] = v29;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 48);
      v36[2] = *(_OWORD *)(a3 + 32);
      v36[3] = v31;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v37 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v38 = v23;
      if (v37)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v37);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v37, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v38;
    if (v37 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertPool<mlir::mps::PoolMaxOp,mlir::anec::MaxPool>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *Strides;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *InputAttributeNames;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int WeightsLayout;
  char v34;
  uint64_t *ExplicitPadding;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *WindowSizes;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL4 InferredResultTypes;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  _BYTE *v70;
  int v71;
  unsigned int v72;
  _BYTE *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  const char *v96;
  BOOL v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  unsigned int *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unsigned int *v112;
  unint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  int v120;
  char *v121;
  unsigned int v122;
  uint64_t v123;
  size_t v124;
  uint64_t *v125;
  char *v126;
  int v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  size_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t IntegerType;
  uint64_t v138;
  uint64_t StringAttr;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  ZinIrHalH13g *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t Shape;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  _BYTE *v167;
  int v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  unsigned int *v172;
  uint64_t v173[2];
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183[2];
  void *v184;
  uint64_t v185;
  _BYTE v186[64];
  void *v187;
  uint64_t v188;
  _BYTE v189[32];
  void *__dst;
  uint64_t v191;
  _BYTE v192[32];
  void *v193;
  uint64_t v194;
  _BYTE v195[32];
  void *v196;
  uint64_t v197;
  _BYTE v198[64];
  void *v199;
  uint64_t v200;
  _BYTE v201[32];
  void *__src;
  uint64_t v203;
  _BYTE v204[32];
  __int128 v205;
  uint64_t IndexFromDim;
  uint64_t v207;
  __int16 v208;
  char *v209;
  uint64_t v210;
  _QWORD v211[2];
  __int16 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v172 = (unsigned int *)a2;
  v205 = *(_OWORD *)(a3 + 112);
  v6 = mlir::ValueRange::dereference_iterator(&v205, 0);
  if (*(_DWORD *)(a2 + 36) >= 2u && *(_QWORD *)(a2 - 32))
  {
    v209 = "failed: pooling with indices operation is not supported on ANEs.";
    v212 = 259;
    v196 = &v209;
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      if (mlir::RewriterBase::Listener::classof(v7))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v196);
      else
        return 0;
    }
    return v7;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
    mlir::TypeID::get<mlir::ShapedType>();
  if (*(_QWORD *)(a2 - 8) >= 8uLL)
    mlir::TypeID::get<mlir::ShapedType>();
  mlir::getElementBitWidth(v8);
  __src = v204;
  v203 = 0x400000000;
  Strides = (uint64_t *)mlir::mps::PoolMaxOp::getStrides((mlir::mps::PoolMaxOp *)&v172);
  v10 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_19;
  v11 = *Strides;
  v12 = mlir::TypeID::get<mlir::ElementsAttr>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_19;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_19:
    v20 = 0;
  mlir::getIntValues<unsigned long long>(v10, v20, (uint64_t)&__src, 1);
  v199 = v201;
  v200 = 0x400000000;
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v172);
  v22 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_29;
  v23 = *InputAttributeNames;
  v24 = mlir::TypeID::get<mlir::ElementsAttr>();
  v25 = *(unsigned int *)(v23 + 16);
  if (!(_DWORD)v25)
    goto LABEL_29;
  v26 = *(_QWORD **)(v23 + 8);
  v27 = &v26[2 * v25];
  do
  {
    v28 = v25 >> 1;
    v29 = &v26[2 * (v25 >> 1)];
    v31 = *v29;
    v30 = v29 + 2;
    v25 += ~(v25 >> 1);
    if (v31 < v24)
      v26 = v30;
    else
      v25 = v28;
  }
  while (v25);
  if (v26 != v27 && *v26 == v24)
    v32 = v26[1];
  else
LABEL_29:
    v32 = 0;
  mlir::getIntValues<unsigned long long>(v22, v32, (uint64_t)&v199, 1);
  WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v172);
  v196 = v198;
  v197 = 0x800000000;
  if (WeightsLayout)
  {
LABEL_44:
    v193 = v195;
    v194 = 0x400000000;
    WindowSizes = (uint64_t *)mlir::mps::PoolMaxOp::getWindowSizes((mlir::mps::PoolMaxOp *)&v172);
    v49 = (uint64_t)WindowSizes;
    if (!WindowSizes)
      goto LABEL_53;
    v50 = *WindowSizes;
    v51 = mlir::TypeID::get<mlir::ElementsAttr>();
    v52 = *(unsigned int *)(v50 + 16);
    if (!(_DWORD)v52)
      goto LABEL_53;
    v53 = *(_QWORD **)(v50 + 8);
    v54 = &v53[2 * v52];
    do
    {
      v55 = v52 >> 1;
      v56 = &v53[2 * (v52 >> 1)];
      v58 = *v56;
      v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51)
        v53 = v57;
      else
        v52 = v55;
    }
    while (v52);
    if (v53 != v54 && *v53 == v51)
      v59 = v53[1];
    else
LABEL_53:
      v59 = 0;
    mlir::getIntValues<unsigned long long>(v49, v59, (uint64_t)&v193, 1);
    mlir::mps::CropResizeOp::getNormalizeCoordinates((mlir::mps::CropResizeOp *)&v172);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v172);
    if ((_DWORD)v200)
    {
      v61 = v199;
      v62 = 8 * v200;
      while (*v61 == 1)
      {
        ++v61;
        v62 -= 8;
        if (!v62)
          goto LABEL_58;
      }
      v209 = "Dilated Pooling not supported on ANE";
      v212 = 259;
      v67 = v172;
      IndexFromDim = (uint64_t)&v209;
      v7 = *(_QWORD *)(a4 + 16);
      if (v7)
      {
        if (mlir::RewriterBase::Listener::classof(v7))
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)v67 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
        else
          v7 = 0;
      }
      goto LABEL_156;
    }
LABEL_58:
    v168 = InferredResultTypes;
    v63 = (uint64_t)v172;
    v170 = v205;
    __dst = v192;
    v191 = 0x400000000;
    v64 = v203;
    if (!(_DWORD)v203)
    {
LABEL_68:
      v187 = v189;
      v188 = 0x400000000;
      v68 = v194;
      if (!(_DWORD)v194)
        goto LABEL_75;
      if (v194 < 5)
      {
        v70 = v189;
        v69 = v194;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v194, 8);
        v69 = v194;
        if (!(_DWORD)v194)
        {
LABEL_74:
          LODWORD(v188) = v68;
LABEL_75:
          v184 = v186;
          v185 = 0x800000000;
          v71 = v197;
          if (!(_DWORD)v197)
            goto LABEL_82;
          if (v197 < 9)
          {
            v73 = v186;
            v72 = v197;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v184, v186, v197, 8);
            v72 = v197;
            if (!(_DWORD)v197)
            {
LABEL_81:
              LODWORD(v185) = v71;
LABEL_82:
              v182 = v63;
              v214 = v170;
              v181 = mlir::ValueRange::dereference_iterator(&v214, 0);
              v74 = (uint64_t *)(*(_QWORD *)(v181 + 8) & 0xFFFFFFFFFFFFFFF8);
              if (!v74)
                goto LABEL_91;
              v75 = *v74;
              v76 = mlir::TypeID::get<mlir::ShapedType>();
              v77 = *(unsigned int *)(v75 + 16);
              if (!(_DWORD)v77)
                goto LABEL_91;
              v78 = *(_QWORD **)(v75 + 8);
              v79 = &v78[2 * v77];
              do
              {
                v80 = v77 >> 1;
                v81 = &v78[2 * (v77 >> 1)];
                v83 = *v81;
                v82 = v81 + 2;
                v77 += ~(v77 >> 1);
                if (v83 < v76)
                  v78 = v82;
                else
                  v77 = v80;
              }
              while (v77);
              if (v78 != v79 && *v78 == v76)
                v84 = v78[1];
              else
LABEL_91:
                v84 = 0;
              RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE((uint64_t)v74, v84);
              v180 = v85;
              mlir::getElementBitWidth(RankPromotionTypeForANE);
              v86 = *(_QWORD *)__dst;
              v87 = *((_QWORD *)__dst + 1);
              if (*(_QWORD *)__dst == 1)
              {
                v88 = *((_QWORD *)__dst + 1);
                if (v87 == 1)
                {
                  v89 = 0;
                  goto LABEL_100;
                }
              }
              else
              {
                if (v87 != 1)
                {
                  v96 = "Cannot infer 5D layout based on strides";
                  goto LABEL_138;
                }
                v88 = 1;
              }
              v90 = v86 >= v88;
              LODWORD(v88) = v86 >= v88;
              v89 = !v90;
LABEL_100:
              v91 = v187;
              v92 = *(_QWORD *)v187;
              v93 = *((_QWORD *)v187 + 1);
              if (*(_QWORD *)v187 == 1)
              {
                if (v93 == 1)
                {
                  v94 = 0;
LABEL_107:
                  if (v86 == 1 && v87 == 1)
                  {
                    LODWORD(v88) = v93;
                    v89 = v94;
                  }
                  else if ((_DWORD)v88 != (_DWORD)v93 || v89 != v94)
                  {
                    v96 = "Unable to infer layout";
LABEL_138:
                    v209 = (char *)v96;
                    v212 = 259;
                    IndexFromDim = (uint64_t)&v209;
                    v108 = *(_QWORD *)(a4 + 16);
                    if (v108 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v108 + 64))(v108, *(_QWORD *)(v63 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
LABEL_141:
                    LOBYTE(v109) = 0;
                    v110 = 0;
                    v111 = 0;
LABEL_142:
                    if (v184 != v186)
                      free(v184);
                    if (v187 != v189)
                      free(v187);
                    if (__dst != v192)
                      free(__dst);
                    if (v110)
                    {
                      v209 = (char *)v211;
                      v211[0] = v111 & 0xFFFFFFFFFFFFFF00 | v109;
                      v210 = 0x200000001;
                      v112 = v172;
                      if (v172[9] < 2)
                      {
                        v113 = 1;
                      }
                      else
                      {
                        v211[1] = 0;
                        v113 = 2;
                        LODWORD(v210) = 2;
                      }
                      mlir::ValueRange::ValueRange(v183, (uint64_t)v211, v113);
                      mlir::ConversionPatternRewriter::replaceOp(a4, v112, v183[0], v183[1]);
                      if (v209 != (char *)v211)
                        free(v209);
                      v7 = 1;
                    }
                    else
                    {
                      v7 = 0;
                    }
LABEL_156:
                    if (v193 != v195)
                      free(v193);
LABEL_158:
                    if (v196 != v198)
                      free(v196);
                    if (v199 != v201)
                      free(v199);
                    if (__src != v204)
                      free(__src);
                    return v7;
                  }
                  if ((_DWORD)v88)
                    v97 = 1;
                  else
                    v97 = v89 == 0;
                  v98 = !v97;
                  if (!v97)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                    IndexFromDim = mlir::anec::getIndexFromDim(1, v99);
                    v207 = v100;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                    v177 = (uint64_t *)mlir::anec::getIndexFromDim(2, v101);
                    v178 = v102;
                    if (!(_BYTE)v207 || !(_BYTE)v102)
                    {
                      v209 = "Cannot infer channel and depth dimensions for pooling";
                      v212 = 259;
                      v173[0] = (uint64_t)&v209;
                      v115 = *(_QWORD *)(a4 + 16);
                      if (v115 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                        (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v115 + 64))(v115, *(_QWORD *)(v63 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v173);
                      goto LABEL_141;
                    }
                    *(int8x16_t *)__dst = vextq_s8(*(int8x16_t *)__dst, *(int8x16_t *)__dst, 8uLL);
                    *(int8x16_t *)v187 = vextq_s8(*(int8x16_t *)v187, *(int8x16_t *)v187, 8uLL);
                    if (!WeightsLayout)
                    {
                      v103 = v184;
                      v104 = *(_OWORD *)v184;
                      *(_OWORD *)v184 = *((_OWORD *)v184 + 1);
                      v103[1] = v104;
                    }
                    v181 = (uint64_t)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), *(_QWORD *)(v63 + 24), &v181, (uint64_t *)&v177, &IndexFromDim)- 16;
                    LODWORD(v88) = 1;
                    v91 = v187;
                  }
                  if (v91[v88] != 1)
                  {
                    v96 = "ANEC does not kernel size != 1 in channel dimension";
                    goto LABEL_138;
                  }
                  v105 = v88;
                  v106 = (char *)__dst;
                  if (*((_QWORD *)__dst + v88) != 1)
                  {
                    v209 = "ANEC does not support striding in channel dimension";
                    v212 = 259;
                    v116 = v182;
                    IndexFromDim = (uint64_t)&v209;
                    v117 = *(_QWORD *)(a4 + 16);
                    if (v117 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
                      (*(void (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t *))(*(_QWORD *)v117 + 64))(v117, *(_QWORD *)(v116 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &IndexFromDim);
                    LOBYTE(v109) = 0;
                    v110 = 0;
                    v111 = 0;
                    goto LABEL_142;
                  }
                  switch(WeightsLayout)
                  {
                    case 0:
                      v159 = (char *)v184 + 8 * (2 * v88);
                      if (*v159 || v159[1])
                      {
                        v160 = "padding is only supported in t,b,l,r,f,b";
                        goto LABEL_199;
                      }
                      v171 = v98;
                      if ((v168 & 1) != 0 && (_DWORD)v191)
                      {
                        v161 = 0;
                        v162 = 0;
                        v169 = 16 * v191;
                        do
                        {
                          Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
                          v164 = *(_QWORD *)((char *)v184 + v162 + 8);
                          if ((unint64_t)(*(_QWORD *)((char *)v184 + v162)
                                                + *(_QWORD *)(Shape + v161)
                                                + v164
                                                - *(_QWORD *)((char *)v187 + v161)
                                                + *(_QWORD *)&v106[v161])
                             % *(_QWORD *)&v106[v161])
                          {
                            *(_QWORD *)((char *)v184 + v162 + 8) = v164 + 1;
                          }
                          v162 += 16;
                          v161 += 8;
                        }
                        while (v169 != v162);
                      }
                      break;
                    case 1:
                      v171 = v98;
                      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v184, 8uLL, 0);
                      break;
                    case 2:
                    case 4:
                      v171 = v98;
                      llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v184, 8uLL, 0);
                      break;
                    default:
                      v160 = "Unsupported paddingStyle";
LABEL_199:
                      mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(a4, &v182, v160);
                      goto LABEL_141;
                  }
                  v118 = (uint64_t *)__dst;
                  v119 = (char *)__dst + 8 * v105;
                  v120 = v191;
                  v121 = (char *)__dst + 8 * v191;
                  if (v121 != v119 + 8)
                  {
                    memmove(v119, v119 + 8, v121 - (v119 + 8));
                    v120 = v191;
                    v118 = (uint64_t *)__dst;
                  }
                  v122 = v120 - 1;
                  LODWORD(v191) = v122;
                  if (v122 != 1)
                  {
                    v123 = *v118;
                    v124 = 8 * v122 - 8;
                    memmove(v118, v118 + 1, v124);
                    *(uint64_t *)((char *)v118 + v124) = v123;
                  }
                  v125 = (uint64_t *)v187;
                  v126 = (char *)v187 + 8 * v105;
                  v127 = v188;
                  v128 = (char *)v187 + 8 * v188;
                  if (v128 != v126 + 8)
                  {
                    memmove(v126, v126 + 8, v128 - (v126 + 8));
                    v127 = v188;
                    v125 = (uint64_t *)v187;
                  }
                  v129 = v127 - 1;
                  LODWORD(v188) = v129;
                  if (v129 != 1)
                  {
                    v130 = *v125;
                    v131 = 8 * v129 - 8;
                    memmove(v125, v125 + 1, v131);
                    *(uint64_t *)((char *)v125 + v131) = v130;
                  }
                  v132 = (char *)v184;
                  v133 = (char *)v184 + 8 * (2 * v105);
                  v134 = (char *)v184 + 8 * v185;
                  v135 = v134 - (v133 + 16);
                  if (v134 != v133 + 16)
                  {
                    memmove((char *)v184 + 8 * (2 * v105), v133 + 16, v134 - (v133 + 16));
                    v132 = (char *)v184;
                  }
                  v136 = &v133[v135] - v132;
                  LODWORD(v185) = v136 >> 3;
                  std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(v132, v132 + 16, &v132[v136 & 0x7FFFFFFF8]);
                  v209 = (char *)v211;
                  v210 = 0x400000000;
                  v213 = 4;
                  IndexFromDim = 3;
                  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
                  v176 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&IndexFromDim, 1, IntegerType, 0);
                  IndexFromDim = 6;
                  v138 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
                  v175 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&IndexFromDim, 1, v138, 0);
                  IndexFromDim = (uint64_t)"ksize";
                  v208 = 259;
                  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v140 = mlir::Type::cast<mlir::ShapedType>(&v176);
                  v142 = mlir::DenseElementsAttr::getFromRawBuffer(v140, v141, v187, 8 * v188, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v209, StringAttr, v142);
                  IndexFromDim = (uint64_t)"stride";
                  v208 = 259;
                  v143 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v144 = mlir::Type::cast<mlir::ShapedType>(&v176);
                  v146 = mlir::DenseElementsAttr::getFromRawBuffer(v144, v145, __dst, 8 * v191, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v209, v143, v146);
                  IndexFromDim = (uint64_t)"padding";
                  v208 = 259;
                  v147 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)&IndexFromDim);
                  v148 = mlir::Type::cast<mlir::ShapedType>(&v175);
                  v150 = mlir::DenseElementsAttr::getFromRawBuffer(v148, v149, v184, 8 * v185, 8, 1, 0);
                  mlir::NamedAttrList::set((uint64_t)&v209, v147, v150);
                  v151 = mlir::OpBuilder::create<mlir::anec::MaxPool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *(_QWORD *)(v182 + 24), (uint64_t)&v181, (uint64_t)&v209);
                  v109 = (unint64_t)v151 - 16;
                  v174 = (uint64_t)v151 - 16;
                  if (v171)
                  {
                    v177 = (uint64_t *)(*((_QWORD *)v151 - 1) & 0xFFFFFFFFFFFFFFF8);
                    IndexFromDim = (uint64_t)mlir::Type::cast<mlir::ShapedType>(&v177);
                    v207 = v152;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
                    v154 = (uint64_t *)mlir::anec::getIndexFromDim(1, v153);
                    v156 = v155;
                    v177 = v154;
                    v178 = v155;
                    mlir::ShapedType::getShape((mlir::ShapedType *)&IndexFromDim);
                    v173[0] = mlir::anec::getIndexFromDim(2, v157);
                    v173[1] = v158;
                    if (!v156 || !(_BYTE)v158)
                    {
                      mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(a4, &v182, "Cannot infer channel and depth dimensions for 3D Pooling");
                      LOBYTE(v109) = 0;
                      v110 = 0;
                      v111 = 0;
LABEL_201:
                      if (v209 != (char *)v211)
                        free(v209);
                      goto LABEL_142;
                    }
                    v109 = (unint64_t)mlir::OpBuilder::create<mlir::anec::Transpose,mlir::Value &,unsigned long long &,unsigned long long &>((mlir::Builder *)(a4 + 8), *(_QWORD *)(v182 + 24), &v174, v173, (uint64_t *)&v177)- 16;
                  }
                  v111 = v109 & 0xFFFFFFFFFFFFFF00;
                  v110 = 1;
                  goto LABEL_201;
                }
              }
              else if (v93 != 1)
              {
                v96 = "Cannot infer 5D layout based on kernel size";
                goto LABEL_138;
              }
              v90 = v92 >= v93;
              LODWORD(v93) = v92 >= v93;
              v94 = !v90;
              goto LABEL_107;
            }
            v73 = v184;
          }
          memcpy(v73, v196, 8 * v72);
          goto LABEL_81;
        }
        v70 = v187;
      }
      memcpy(v70, v193, 8 * v69);
      goto LABEL_74;
    }
    if (v203 < 5)
    {
      v66 = v192;
      v65 = v203;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v192, v203, 8);
      v65 = v203;
      if (!(_DWORD)v203)
      {
LABEL_67:
        LODWORD(v191) = v64;
        goto LABEL_68;
      }
      v66 = __dst;
    }
    memcpy(v66, __src, 8 * v65);
    goto LABEL_67;
  }
  mlir::mps::PoolAvgOp::getExplicitPadding((mlir::mps::PoolAvgOp *)&v172);
  if (!v34)
  {
    v209 = "padding is null but paddingStyle is EXPLICT";
    v212 = 259;
    v107 = v172;
    v193 = &v209;
    v7 = *(_QWORD *)(a4 + 16);
    if (v7)
    {
      if (mlir::RewriterBase::Listener::classof(v7))
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)v107 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v193);
      else
        v7 = 0;
    }
    goto LABEL_158;
  }
  ExplicitPadding = (uint64_t *)mlir::mps::PoolAvgOp::getExplicitPadding((mlir::mps::PoolAvgOp *)&v172);
  if (v36)
  {
    v37 = (uint64_t)ExplicitPadding;
    if (!ExplicitPadding)
      goto LABEL_42;
    v38 = *ExplicitPadding;
    v39 = mlir::TypeID::get<mlir::ElementsAttr>();
    v40 = *(unsigned int *)(v38 + 16);
    if (!(_DWORD)v40)
      goto LABEL_42;
    v41 = *(_QWORD **)(v38 + 8);
    v42 = &v41[2 * v40];
    do
    {
      v43 = v40 >> 1;
      v44 = &v41[2 * (v40 >> 1)];
      v46 = *v44;
      v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39)
        v41 = v45;
      else
        v40 = v43;
    }
    while (v40);
    if (v41 != v42 && *v41 == v39)
      v47 = v41[1];
    else
LABEL_42:
      v47 = 0;
    mlir::getIntValues<unsigned long long>(v37, v47, (uint64_t)&v196, 1);
    goto LABEL_44;
  }
  v165 = std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(v165, v166, v167);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::PoolMaxOp &>(mlir::mps::PoolMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::MaxPool,mlir::Value &,mlir::NamedAttrList &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  const void *v11;
  uint64_t v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.max_pool", (const unsigned __int8 *)0xD, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.max_pool";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::MaxPool::build(a1, (uint64_t)v21, a3, 1, v11, v12);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::MaxPool,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void mlir::`anonymous namespace'::ConvertStencil::~ConvertStencil(mlir::_anonymous_namespace_::ConvertStencil *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::StencilOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::StencilOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[104];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::StencilOpGenericAdaptorBase::StencilOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::StencilOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[104];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::StencilOpGenericAdaptorBase::StencilOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::StencilOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  _OWORD v36[7];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 104);
  v9 = *(_QWORD *)(a3 + 112);
  v38 = v8;
  v39 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 96);
      v37 = *(_QWORD *)(a3 + 112);
      v29 = *(_OWORD *)(a3 + 64);
      v36[5] = *(_OWORD *)(a3 + 80);
      v36[6] = v28;
      v30 = *(_OWORD *)(a3 + 16);
      v36[0] = *(_OWORD *)a3;
      v36[1] = v30;
      v31 = *(_OWORD *)(a3 + 48);
      v36[2] = *(_OWORD *)(a3 + 32);
      v36[3] = v31;
      v36[4] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v36, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v38 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v39 = v23;
      if (v38)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v38)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v38))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v38);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v34[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v35 = 259;
    v32[0] = v34;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v32);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v38, v10);
    v32[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v32[1] = v13;
    if (v32[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v32))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v32);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v39;
    if (v38 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v35 = 259;
  v33 = v34;
  v34[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v33);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertStencil::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Shape;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t IndexFromDim;
  char v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *Strides;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *FastmathAttr;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  int PaddingStyle;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t IntegerType;
  uint64_t v114;
  const void *v115;
  uint64_t v116;
  uint64_t *v117;
  mlir::AffineMap *v118;
  uint64_t ElementTypeOrSelf;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  mlir::MLIRContext *v127;
  unint64_t v128;
  mlir::MLIRContext *v129;
  unint64_t v130;
  ZinIrHalH13g *GOCConstant;
  char v132;
  char *v133;
  uint64_t v134;
  uint64_t *v135;
  mlir::AffineMap *v136;
  mlir::AffineMap *v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v141;
  uint64_t *v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t UnitAttr;
  uint64_t v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  _QWORD v150[2];
  _QWORD v151[2];
  uint64_t RankPromotionTypeForANE;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160[2];
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  void *v167;
  unsigned int v168;
  uint64_t v169;
  void *v170;
  unsigned int v171;
  uint64_t v172;
  void *v173[2];
  _BYTE v174[16];
  __int16 v175;
  void *v176;
  uint64_t v177;
  _BYTE v178[32];
  char *v179;
  uint64_t v180;
  _BYTE v181[32];
  char *v182;
  uint64_t v183;
  _BYTE v184[32];
  __int128 v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  v158 = a2;
  v185 = *(_OWORD *)(a3 + 104);
  v5 = mlir::ValueRange::dereference_iterator(&v185, 0);
  v157 = v5;
  v6 = mlir::ValueRange::dereference_iterator(&v185, 1);
  v7 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v158);
  if (mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v158) != 2)
  {
    v173[0] = "failed: stencil reduction_mode != sum is not supported on ANEs.";
    v175 = 259;
    v54 = v158;
    *(_QWORD *)&v165 = v173;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), __int128 *))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(v54 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v165);
      else
        return 0;
    }
    return v55;
  }
  v154 = &v156;
  v155 = 0x100000000;
  if (!mlir::matchConstantWithFloatVector<float>(v6, (uint64_t)&v154))
  {
    v56 = "Failed to match kernel value";
    goto LABEL_47;
  }
  if ((_DWORD)v155)
  {
    v8 = (float *)v154;
    v9 = 4 * v155;
    while (*v8 == 1.0)
    {
      ++v8;
      v9 -= 4;
      if (!v9)
        goto LABEL_7;
    }
    v56 = "Can only convert to AvgPool if stencil kernel is all ones";
    goto LABEL_47;
  }
LABEL_7:
  v10 = (uint64_t *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_16;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_16;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_16:
    v20 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v153 = v21;
  v22 = (uint64_t *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v22)
    goto LABEL_26;
  v23 = *v22;
  v24 = mlir::TypeID::get<mlir::ShapedType>();
  v25 = *(unsigned int *)(v23 + 16);
  if (!(_DWORD)v25)
    goto LABEL_26;
  v26 = *(_QWORD **)(v23 + 8);
  v27 = &v26[2 * v25];
  do
  {
    v28 = v25 >> 1;
    v29 = &v26[2 * (v25 >> 1)];
    v31 = *v29;
    v30 = v29 + 2;
    v25 += ~(v25 >> 1);
    if (v31 < v24)
      v26 = v30;
    else
      v25 = v28;
  }
  while (v25);
  if (v26 != v27 && *v26 == v24)
    v32 = v26[1];
  else
LABEL_26:
    v32 = 0;
  v151[0] = v22;
  v151[1] = v32;
  v33 = (uint64_t *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v33)
    goto LABEL_36;
  v34 = *v33;
  v35 = mlir::TypeID::get<mlir::ShapedType>();
  v36 = *(unsigned int *)(v34 + 16);
  if (!(_DWORD)v36)
    goto LABEL_36;
  v37 = *(_QWORD **)(v34 + 8);
  v38 = &v37[2 * v36];
  do
  {
    v39 = v36 >> 1;
    v40 = &v37[2 * (v36 >> 1)];
    v42 = *v40;
    v41 = v40 + 2;
    v36 += ~(v36 >> 1);
    if (v42 < v35)
      v37 = v41;
    else
      v36 = v39;
  }
  while (v36);
  if (v37 != v38 && *v37 == v35)
    v43 = v37[1];
  else
LABEL_36:
    v43 = 0;
  v150[0] = mlir::getRankPromotionTypeForANE((uint64_t)v33, v43);
  v150[1] = v44;
  mlir::ShapedType::getShape((mlir::ShapedType *)v151);
  if (v45 != 4)
  {
    v56 = "failed: stencil kernel rank != 4 is not supported on ANEs.";
LABEL_47:
    v173[0] = (void *)v56;
    v175 = 259;
    v57 = v158;
    *(_QWORD *)&v165 = v173;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
        v55 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), __int128 *))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(v57 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v165);
      else
        v55 = 0;
    }
    goto LABEL_135;
  }
  Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v151);
  v47 = mlir::ShapedType::getShape((mlir::ShapedType *)v151);
  v49 = v48;
  v50 = (uint64_t *)(v47 + 8 * v48);
  v182 = v184;
  v183 = 0x400000000;
  v51 = (uint64_t)v50 - Shape;
  if ((unint64_t)v50 - Shape < 0x21)
  {
    v52 = 0;
    v53 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, v184, v51 >> 3, 8);
    v52 = v183;
    v53 = v183;
  }
  if (v50 != (uint64_t *)Shape)
  {
    v58 = &v182[8 * v52];
    v59 = v47 + 8 * v49 - Shape - 8;
    if (v59 < 0x38)
    {
      v60 = (uint64_t *)Shape;
      do
      {
LABEL_59:
        v68 = *v60++;
        *(_QWORD *)v58 = v68;
        v58 += 8;
      }
      while (v60 != v50);
      goto LABEL_60;
    }
    v61 = &v182[8 * v52];
    v60 = (uint64_t *)Shape;
    if ((unint64_t)&v61[-Shape] < 0x20)
      goto LABEL_59;
    v62 = (v59 >> 3) + 1;
    v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
    v58 += v63;
    v60 = (uint64_t *)(Shape + v63);
    v64 = (__int128 *)(Shape + 16);
    v65 = v61 + 16;
    v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *v64;
      *(v65 - 1) = *(v64 - 1);
      *v65 = v67;
      v64 += 2;
      v65 += 2;
      v66 -= 4;
    }
    while (v66);
    if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
  }
LABEL_60:
  LODWORD(v183) = v53 + ((unint64_t)v51 >> 3);
  mlir::ShapedType::getShape((mlir::ShapedType *)v151);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v69);
  if (v71)
  {
    v72 = *(_QWORD *)&v182[8 * IndexFromDim];
    mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
    if (v73 == 5 && v72 >= 2)
    {
      v173[0] = "failed: stencil along channel with rank 5 input is not supported on ANEs.";
      v175 = 259;
      v74 = v158;
      *(_QWORD *)&v165 = v173;
      v55 = *(_QWORD *)(a4 + 16);
      if (v55)
      {
        if (mlir::RewriterBase::Listener::classof(v55))
          v55 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), __int128 *))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(v74 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v165);
        else
          v55 = 0;
      }
LABEL_133:
      if (v182 != v184)
        free(v182);
LABEL_135:
      if (v154 != &v156)
        free(v154);
      return v55;
    }
    v179 = v181;
    v180 = 0x400000000;
    Strides = (uint64_t *)mlir::mps::PoolMaxOp::getStrides((mlir::mps::PoolMaxOp *)&v158);
    v76 = (uint64_t)Strides;
    if (!Strides)
      goto LABEL_75;
    v77 = *Strides;
    v78 = mlir::TypeID::get<mlir::ElementsAttr>();
    v79 = *(unsigned int *)(v77 + 16);
    if (!(_DWORD)v79)
      goto LABEL_75;
    v80 = *(_QWORD **)(v77 + 8);
    v81 = &v80[2 * v79];
    do
    {
      v82 = v79 >> 1;
      v83 = &v80[2 * (v79 >> 1)];
      v85 = *v83;
      v84 = v83 + 2;
      v79 += ~(v79 >> 1);
      if (v85 < v78)
        v80 = v84;
      else
        v79 = v82;
    }
    while (v79);
    if (v80 != v81 && *v80 == v78)
      v86 = v80[1];
    else
LABEL_75:
      v86 = 0;
    mlir::getIntValues<unsigned long long>(v76, v86, (uint64_t)&v179, 1);
    v176 = v178;
    v177 = 0x400000000;
    FastmathAttr = (uint64_t *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v158);
    v88 = (uint64_t)FastmathAttr;
    if (!FastmathAttr)
      goto LABEL_85;
    v89 = *FastmathAttr;
    v90 = mlir::TypeID::get<mlir::ElementsAttr>();
    v91 = *(unsigned int *)(v89 + 16);
    if (!(_DWORD)v91)
      goto LABEL_85;
    v92 = *(_QWORD **)(v89 + 8);
    v93 = &v92[2 * v91];
    do
    {
      v94 = v91 >> 1;
      v95 = &v92[2 * (v91 >> 1)];
      v97 = *v95;
      v96 = v95 + 2;
      v91 += ~(v91 >> 1);
      if (v97 < v90)
        v92 = v96;
      else
        v91 = v94;
    }
    while (v91);
    if (v92 != v93 && *v92 == v90)
      v98 = v92[1];
    else
LABEL_85:
      v98 = 0;
    mlir::getIntValues<unsigned long long>(v88, v98, (uint64_t)&v176, 1);
    PaddingStyle = mlir::mps::StencilOp::getPaddingStyle((mlir::mps::StencilOp *)&v158);
    v173[0] = v174;
    v173[1] = (void *)0x800000000;
    v100 = PaddingStyle;
    switch(PaddingStyle)
    {
      case 0:
        mlir::mps::StencilOp::getExplicitPadding((mlir::mps::StencilOp *)&v158);
        if (!v101)
        {
          v106 = "padding is null but paddingStyle is EXPLICT";
          goto LABEL_126;
        }
        *(_QWORD *)&v165 = mlir::mps::StencilOp::getExplicitPadding((mlir::mps::StencilOp *)&v158);
        *((_QWORD *)&v165 + 1) = v102;
        if (!(_BYTE)v102)
          break;
        v103 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&v165);
        mlir::getIntValues<unsigned long long>((uint64_t)v103, v104, (uint64_t)v173, 1);
        goto LABEL_96;
      case 1:
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)v173, 8uLL, 0);
        goto LABEL_96;
      case 2:
      case 4:
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)v173, 8uLL, 0);
LABEL_96:
        v105 = (char *)v173[0] + 16 * (v72 < 2);
        if (*v105 || v105[1])
        {
          v106 = "Channel padding is not supported on ANE";
LABEL_126:
          v55 = mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(a4, &v158, v106);
LABEL_127:
          if (v173[0] != v174)
            free(v173[0]);
          if (v176 != v178)
            free(v176);
          if (v179 != v181)
            free(v179);
          goto LABEL_133;
        }
        if ((_DWORD)v177)
        {
          v107 = v176;
          v108 = 8 * v177;
          while (*v107 == 1)
          {
            ++v107;
            v108 -= 8;
            if (!v108)
              goto LABEL_104;
          }
          v106 = "Dilated Stencil not supported on ANE";
          goto LABEL_126;
        }
LABEL_104:
        if ((_DWORD)v180)
        {
          v109 = 8 * v180;
          v110 = v179;
          while (*v110 == 1)
          {
            ++v110;
            v109 -= 8;
            if (!v109)
              goto LABEL_108;
          }
          v106 = "Strided Stencil not supported on ANE";
          goto LABEL_126;
        }
LABEL_108:
        v165 = *((_OWORD *)v179 + 1);
        v111 = 8 * (v72 > 1);
        v166 = *(_QWORD *)&v179[v111];
        llvm::SmallVector<unsigned long long,3u>::SmallVector(&v170, &v165, 3);
        v165 = *((_OWORD *)v182 + 1);
        v166 = *(_QWORD *)&v182[v111];
        llvm::SmallVector<unsigned long long,3u>::SmallVector(&v167, &v165, 3);
        v112 = *((_OWORD *)v173[0] + 3);
        v161 = *((_OWORD *)v173[0] + 2);
        v162 = v112;
        v163 = *((_QWORD *)v173[0] + 2 * (v72 > 1));
        v164 = *((_QWORD *)v173[0] + ((2 * (v72 > 1)) | 1u));
        llvm::SmallVector<long long,6u>::SmallVector(&v165, &v161, 6);
        *(_QWORD *)&v161 = 3;
        IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
        v149 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v161, 1, IntegerType, 0);
        *(_QWORD *)&v161 = 6;
        v114 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
        v147 = (char *)v5;
        v148 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v161, 1, v114, 0);
        if (v72 >= 2)
        {
          v115 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
          llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v161, v115, v116);
          v159 = 1;
          llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v161, v161 + 16, &v159);
          v144 = *(_QWORD *)(v158 + 24);
          v117 = (uint64_t *)v161;
          v118 = (mlir::AffineMap *)DWORD2(v161);
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v5);
          v159 = mlir::MemRefType::get(v117, v118, ElementTypeOrSelf, 0, 0, 0);
          v147 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v144, &v159, &v157)- 16;
          if ((__int128 *)v161 != &v162)
            free((void *)v161);
        }
        v120 = *(_QWORD *)(v158 + 24);
        v121 = mlir::Type::cast<mlir::ShapedType>(&v149);
        *(_QWORD *)&v161 = mlir::DenseElementsAttr::getFromRawBuffer(v121, v122, v170, 8 * v171, 8, 1, 0);
        v123 = mlir::Type::cast<mlir::ShapedType>(&v148);
        v159 = mlir::DenseElementsAttr::getFromRawBuffer(v123, v124, v165, 8 * DWORD2(v165), 8, 1, 0);
        v125 = mlir::Type::cast<mlir::ShapedType>(&v149);
        v146 = mlir::DenseElementsAttr::getFromRawBuffer(v125, v126, v167, 8 * v168, 8, 1, 0);
        UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)(a4 + 8), v127);
        v147 = (char *)mlir::OpBuilder::create<mlir::anec::AveragePool,mlir::Value &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::UnitAttr>((mlir::UnknownLoc **)(a4 + 8), v120, (uint64_t *)&v147, (uint64_t *)&v161, &v159, &v146, &UnitAttr)- 16;
        v128 = *((_QWORD *)v167 + 1) * *(_QWORD *)v167 * *((_QWORD *)v167 + 2);
        v129 = *(mlir::MLIRContext **)(v158 + 24);
        mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
        *(float *)&v161 = (float)v128;
        if (v132)
        {
          v147 = v133;
          if (v72 >= 2)
          {
            v134 = *(_QWORD *)(v158 + 24);
            v135 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v150);
            v137 = v136;
            v138 = mlir::getElementTypeOrSelf((uint64_t)v147);
            *(_QWORD *)&v161 = mlir::MemRefType::get(v135, v137, v138, 0, 0, 0);
            v133 = (char *)mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), v134, (uint64_t *)&v161, (uint64_t *)&v147)- 16;
            v147 = v133;
          }
          v139 = (unsigned int *)v158;
          *(_QWORD *)&v161 = v133;
          mlir::ValueRange::ValueRange(v160, (uint64_t)&v161, 1uLL);
          mlir::ConversionPatternRewriter::replaceOp(a4, v139, v160[0], v160[1]);
          if ((uint64_t *)v165 != &v166)
            free((void *)v165);
          if (v167 != &v169)
            free(v167);
          if (v170 != &v172)
            free(v170);
          v55 = 1;
          goto LABEL_127;
        }
        break;
      default:
        v106 = "Unsupported paddingStyle";
        goto LABEL_126;
    }
  }
  v141 = std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(v141, v142, v143);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StencilOp &>(mlir::mps::StencilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

_QWORD *llvm::SmallVector<unsigned long long,3u>::SmallVector(_QWORD *a1, const void *a2, uint64_t a3)
{
  size_t v6;
  unsigned int v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v6 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, (8 * a3) >> 3, 8);
    v7 = *((_DWORD *)a1 + 2);
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + (v6 >> 3);
  return a1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::AveragePool,mlir::Value &,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::UnitAttr>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.average_pool", (const unsigned __int8 *)0x11, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"anec.average_pool";
    v23[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::anec::AveragePool::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::AveragePool,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::CeilOp,mlir::anec::Ceil>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C0327A8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075CCC78()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::CeilOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CeilOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::CeilOpGenericAdaptorBase::CeilOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::CeilOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::CeilOpGenericAdaptorBase::CeilOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::CeilOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CeilOp &>(mlir::mps::CeilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CeilOp &>(mlir::mps::CeilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::CeilOp,mlir::anec::Ceil>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Ceil,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::CeilOp &>(mlir::mps::CeilOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::CeilOp,mlir::anec::Ceil>::matchAndRewriteWithStaticShapes(mlir::mps::CeilOp,mlir::mps::CeilOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Ceil,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.ceil", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.ceil";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Ceil,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ErfOp,mlir::anec::Erf>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032658;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075CD880()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ErfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ErfOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ErfOpGenericAdaptorBase::ErfOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ErfOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ErfOpGenericAdaptorBase::ErfOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ErfOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ErfOp &>(mlir::mps::ErfOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ErfOp &>(mlir::mps::ErfOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ErfOp,mlir::anec::Erf>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Erf,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ErfOp &>(mlir::mps::ErfOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ErfOp,mlir::anec::Erf>::matchAndRewriteWithStaticShapes(mlir::mps::ErfOp,mlir::mps::ErfOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Erf,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.erf", (const unsigned __int8 *)8, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.erf";
    v21[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Erf,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ExponentBase2Op,mlir::anec::Exp2>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032428;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075CE488()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExponentBase2Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExponentBase2Op>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ExponentBase2OpGenericAdaptorBase::ExponentBase2OpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExponentBase2Op>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ExponentBase2OpGenericAdaptorBase::ExponentBase2OpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ExponentBase2Op>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExponentBase2Op &>(mlir::mps::ExponentBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExponentBase2Op &>(mlir::mps::ExponentBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ExponentBase2Op,mlir::anec::Exp2>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Exp2,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExponentBase2Op &>(mlir::mps::ExponentBase2Op &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::ExponentBase2Op,mlir::anec::Exp2>::matchAndRewriteWithStaticShapes(mlir::mps::ExponentBase2Op,mlir::mps::ExponentBase2OpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Exp2,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.exp2", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.exp2";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Exp2,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::FloorOp,mlir::anec::Floor>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032AB8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075CF090()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::FloorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::FloorOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::FloorOpGenericAdaptorBase::FloorOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::FloorOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::FloorOpGenericAdaptorBase::FloorOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::FloorOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::FloorOp &>(mlir::mps::FloorOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::FloorOp &>(mlir::mps::FloorOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::FloorOp,mlir::anec::Floor>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Floor,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::FloorOp &>(mlir::mps::FloorOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::FloorOp,mlir::anec::Floor>::matchAndRewriteWithStaticShapes(mlir::mps::FloorOp,mlir::mps::FloorOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Floor,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.floor", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.floor";
    v21[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Floor,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SignOp,mlir::anec::Sign>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C0328F8;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075CFC98()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SignOpGenericAdaptorBase::SignOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::SignOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::SignOpGenericAdaptorBase::SignOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::SignOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignOp &>(mlir::mps::SignOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignOp &>(mlir::mps::SignOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SignOp,mlir::anec::Sign>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Sign,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::SignOp &>(mlir::mps::SignOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::SignOp,mlir::anec::Sign>::matchAndRewriteWithStaticShapes(mlir::mps::SignOp,mlir::mps::SignOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Sign,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.sign", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.sign";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Sign,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::TruncateOp,mlir::anec::Trunc>::~ConvertElementwiseUnary(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C032268;
  v2 = *(char **)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v3)
  {
    v4 = 56 * v3;
    do
    {
      while (1)
      {
        v5 = (void **)&v2[v4];
        if (v2[v4 - 1] < 0)
          operator delete(*(v5 - 3));
        v7 = *(v5 - 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 - 6);
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) != v7)
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v6);
        v4 -= 56;
        if (!v4)
          goto LABEL_8;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v6);
      v4 -= 56;
    }
    while (v4);
LABEL_8:
    v2 = *(char **)(a1 + 128);
  }
  if (v2 != (char *)(a1 + 144))
    free(v2);
  v8 = *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    do
    {
      if (*(_DWORD *)v9 <= 0xFFFFFFFD && *(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 104);
    v11 = (void *)(32 * *(unsigned int *)(a1 + 120));
  }
  else
  {
    v11 = 0;
  }
  llvm::deallocate_buffer((llvm *)v9, v11);
}

{
}

_QWORD *sub_2075D08A0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)v0[10];
  if (v1 != v0 + 12)
    free(v1);
  v2 = (_QWORD *)v0[4];
  if (v2 != v0 + 6)
    free(v2);
  return v0;
}

uint64_t mlir::OpConversionPattern<mlir::mps::TruncateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TruncateOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::TruncateOpGenericAdaptorBase::TruncateOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::TruncateOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::TruncateOpGenericAdaptorBase::TruncateOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::TruncateOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TruncateOp &>(mlir::mps::TruncateOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TruncateOp &>(mlir::mps::TruncateOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::TruncateOp,mlir::anec::Trunc>::matchAndRewriteWithStaticShapes(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  mlir::Float16Type **v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  llvm::APFloatBase *v23;
  void *v24;
  llvm::APFloatBase *v25;
  void *v26;
  mlir::MLIRContext *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t F16Type;
  uint64_t FloatAttr;
  llvm::APFloatBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  mlir::Float16Type **v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::detail::DoubleAPFloat *v42;
  llvm::APFloatBase *v43;
  void *v44;
  mlir::MLIRContext *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ZinIrHalH13g *v51;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[24];
  _QWORD *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[32];
  void *v69[2];
  _QWORD v70[11];

  v5 = a1;
  v70[9] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(a3 + 48);
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v70[8] = 4;
  v65 = 0;
  v66 = v68;
  v67 = 0x400000000;
  v63 = 0;
  v64 = v7;
  v55 = v6;
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = (mlir::Float16Type **)(a4 + 1);
    do
    {
      a1 = (llvm::APFloatBase *)mlir::ValueRange::dereference_iterator(&v64, v8);
      v11 = a1;
      v12 = *((_QWORD *)v5 + 13);
      v13 = *((unsigned int *)v5 + 30);
      if ((_DWORD)v13)
      {
        v14 = v13 - 1;
        v15 = (_DWORD *)(v12 + 32 * (((_DWORD)v13 - 1) & (37 * v9)));
        v16 = *v15;
        if (*v15 == v9)
        {
LABEL_5:
          v17 = (_DWORD *)(v12 + 32 * v13);
          goto LABEL_11;
        }
        v18 = 1;
        LODWORD(v19) = v14 & (37 * v9);
        while (v16 != -1)
        {
          v20 = v19 + v18++;
          v19 = v20 & v14;
          v16 = *(_DWORD *)(v12 + 32 * v19);
          if (v16 == v9)
          {
            v15 = (_DWORD *)(v12 + 32 * v19);
            goto LABEL_5;
          }
        }
      }
      v15 = (_DWORD *)(v12 + 32 * v13);
      v17 = v15;
LABEL_11:
      v59[0] = v15;
      v59[1] = v17;
      if ((_DWORD *)(v12 + 32 * v13) == v15)
      {
        v35 = v67;
        if (v67 >= (unint64_t)HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
          v35 = v67;
        }
        *((_QWORD *)v66 + v35) = v11;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        v56 = &v58;
        v57 = 0x100000000;
        if (mlir::matchConstantWithFloatVector<float>((uint64_t)a1, (uint64_t)&v56))
          v21 = (_DWORD)v57 == 1;
        else
          v21 = 0;
        v22 = v21;
        if (v21)
        {
          v23 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v60, *(float *)v56);
          v24 = llvm::APFloatBase::IEEEsingle(v23);
          llvm::APFloat::Storage::Storage(v62, v60, v24);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v60);
          v26 = llvm::APFloatBase::IEEEhalf(v25);
          v60[0] = 0;
          llvm::APFloat::convert((uint64_t)&v61, v26, 1, v60);
          v28 = *(char *)(v59[0] + 31);
          if (v28 >= 0)
            v29 = v59[0] + 8;
          else
            v29 = *(_QWORD *)(v59[0] + 8);
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v59[0] + 31);
          else
            v30 = *(_QWORD *)(v59[0] + 16);
          F16Type = mlir::Builder::getF16Type(v10, v27);
          FloatAttr = mlir::Builder::getFloatAttr((uint64_t)v10, F16Type, (uint64_t)&v61);
          v33 = (llvm::APFloatBase *)mlir::NamedAttrList::set((uint64_t)v69, v29, v30, FloatAttr);
          v34 = (void *)v62[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v33) == v34)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
        }
        else
        {
          v61 = v59;
          v4 = a4[2];
          if (v4)
          {
            if (mlir::RewriterBase::Listener::classof(a4[2]))
            else
              v4 = 0;
          }
        }
        a1 = (llvm::APFloatBase *)v56;
        if (v56 != &v58)
          free(v56);
        if ((v22 & 1) == 0)
          goto LABEL_57;
      }
      v9 = v63 + 1;
      v8 = v65 + 1;
      ++v63;
      ++v65;
    }
    while (v64 != v7 || v8 != v55);
  }
  v36 = *((unsigned int *)v5 + 34);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v5 + 16);
    v38 = llvm::APFloatBase::PPCDoubleDouble(a1);
    v39 = (mlir::Float16Type **)(a4 + 1);
    v40 = 56 * v36;
    v41 = v37 + 32;
    do
    {
      v42 = (const llvm::detail::DoubleAPFloat *)(v41 - 24);
      if (v38 == *(void **)(v41 - 24))
        v43 = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v62, v42);
      else
        v43 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v62, v42);
      v44 = llvm::APFloatBase::IEEEhalf(v43);
      v60[0] = 0;
      llvm::APFloat::convert((uint64_t)&v61, v44, 1, v60);
      v46 = *(char *)(v41 + 23);
      if (v46 >= 0)
        v47 = v41;
      else
        v47 = *(_QWORD *)v41;
      if (v46 >= 0)
        v48 = *(unsigned __int8 *)(v41 + 23);
      else
        v48 = *(_QWORD *)(v41 + 8);
      v49 = mlir::Builder::getF16Type(v39, v45);
      v50 = mlir::Builder::getFloatAttr((uint64_t)v39, v49, (uint64_t)&v61);
      mlir::NamedAttrList::append((uint64_t)v69, v47, v48, v50);
      if (v38 == (void *)v62[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v62);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v62);
      v41 += 56;
      v40 -= 56;
    }
    while (v40);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v61, (uint64_t)v66, v67);
  v51 = mlir::OpBuilder::create<mlir::anec::Trunc,mlir::ValueRange,mlir::NamedAttrList &>(a4 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v61, (uint64_t)v69);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a4 + 32))(a4, a2, v51);
  v4 = 1;
LABEL_57:
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  return v4;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::TruncateOp &>(mlir::mps::TruncateOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertElementwiseUnary<mlir::mps::TruncateOp,mlir::anec::Trunc>::matchAndRewriteWithStaticShapes(mlir::mps::TruncateOp,mlir::mps::TruncateOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(unsigned int ***a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  int v15;
  uint64_t v16;

  v3 = mlir::Diagnostic::operator<<(a2, "Failed to extract fpValues from Operand ");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = ***a1;
  v15 = 5;
  v16 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v15;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v7 + 1;
    v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v12, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v15;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " \n");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Trunc,mlir::ValueRange,mlir::NamedAttrList &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.trunc", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"anec.trunc";
    v21[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v9);
  v12 = *a3;
  v11 = a3[1];
  v13 = (const void *)ANECStepToZinIrDims3D(a4);
  mlir::anec::Ceil::build(a1, (uint64_t)v23, v12, v11, v13, v14);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Trunc,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMaxOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::ReductionMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::ReductionMaxOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 56);
  v9 = *(_QWORD *)(a3 + 64);
  v36 = v8;
  v37 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v28;
      v35 = *(_QWORD *)(a3 + 64);
      v29 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v37 = v23;
      if (v36)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v36);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMaxOp &>(mlir::mps::ReductionMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v37;
    if (v36 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMaxOp &>(mlir::mps::ReductionMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrHalH13g *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[2];
  unsigned int *v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t *v28;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v25 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 64);
  v29[0] = *(_QWORD *)(a3 + 56);
  v29[1] = v6;
  v24[1] = v7;
  if ((_BYTE)v7)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v26[0] = mlir::ValueRange::dereference_iterator(v29, 0);
    v9 = mlir::OpBuilder::create<mlir::anec::ReduceMax,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), v8, v26, v24);
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v25))
    {
      v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v25) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v10)
        goto LABEL_12;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ShapedType>();
      v13 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v13)
        goto LABEL_12;
      v14 = *(_QWORD **)(v11 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_12:
        v20 = 0;
      v26[0] = (uint64_t)v10;
      v26[1] = v20;
    }
    v26[0] = (uint64_t)v9 - 16;
    v21 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, v25, (uint64_t)v26, 1);
  }
  else
  {
    v26[0] = (uint64_t)"failed to convert operand axes";
    v27 = 259;
    v28 = v26;
    v22 = *(_QWORD *)(a4 + 16);
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v22 + 64))(v22, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMaxOp &>(mlir::mps::ReductionMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v28);
    else
      return 0;
  }
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMaxOp &>(mlir::mps::ReductionMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

unint64_t mlir::`anonymous namespace'::convertAxes(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t SortedUniquePromotedPositiveAxesAttr;
  char v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  uint64_t Context;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[48];
  _QWORD v55[3];

  v55[2] = *MEMORY[0x24BDAC8D0];
  v55[0] = a1;
  v55[1] = a2;
  v51 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v52 = v5;
  v53 = v15;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v52);
  v17 = v16;
  v51 = v16;
  if (a2 > 1)
  {
    v21 = (_QWORD *)mlir::ValueRange::dereference_iterator(v55, 1);
    SortedUniquePromotedPositiveAxesAttr = mlir::getSortedUniquePromotedPositiveAxesAttr(v21, v17, 0, 0);
    if (v23)
      v24 = SortedUniquePromotedPositiveAxesAttr;
    else
      v24 = 0;
    if (v23)
      v25 = SortedUniquePromotedPositiveAxesAttr & 0xFFFFFFFFFFFFFF00;
    else
      v25 = 0;
    return v25 | v24;
  }
  v52 = v54;
  v53 = 0x600000000;
  if (!v16)
    goto LABEL_31;
  if (v16 < 7)
  {
    v18 = 0;
    v19 = (int64x2_t *)v54;
    v20 = v16;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v54, v16, 8);
    v18 = v53;
    v19 = (int64x2_t *)v52;
    v20 = v17 - v53;
    if (v17 == v53)
      goto LABEL_24;
  }
  bzero((char *)v19 + 8 * v18, 8 * v20);
LABEL_24:
  LODWORD(v53) = v17;
  if (!(_DWORD)v17)
    goto LABEL_31;
  v26 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v26 < 3)
  {
    v27 = 0;
    v28 = (uint64_t *)v19;
    do
LABEL_30:
      *v28++ = v27++;
    while (v28 != (uint64_t *)((char *)v19 + 8 * v17));
    goto LABEL_31;
  }
  v29 = v26 + 1;
  v27 = (v26 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v28 = &v19->i64[v27];
  v30 = (int64x2_t)xmmword_207A80930;
  v31 = v19 + 1;
  v32 = vdupq_n_s64(2uLL);
  v33 = vdupq_n_s64(4uLL);
  v34 = v27;
  do
  {
    v31[-1] = v30;
    *v31 = vaddq_s64(v30, v32);
    v30 = vaddq_s64(v30, v33);
    v31 += 2;
    v34 -= 4;
  }
  while (v34);
  if (v29 != v27)
    goto LABEL_30;
LABEL_31:
  Context = mlir::Attribute::getContext((mlir::Attribute *)(a3 + 24));
  v36 = mlir::IntegerType::get(Context, 0x40u, 2u);
  v37 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v51, 1, v36, 0);
  v38 = v37;
  if (!v37)
    goto LABEL_40;
  v39 = *v37;
  v40 = mlir::TypeID::get<mlir::ShapedType>();
  v41 = *(unsigned int *)(v39 + 16);
  if (!(_DWORD)v41)
    goto LABEL_40;
  v42 = *(_QWORD **)(v39 + 8);
  v43 = &v42[2 * v41];
  do
  {
    v44 = v41 >> 1;
    v45 = &v42[2 * (v41 >> 1)];
    v47 = *v45;
    v46 = v45 + 2;
    v41 += ~(v41 >> 1);
    if (v47 < v40)
      v42 = v46;
    else
      v41 = v44;
  }
  while (v41);
  if (v42 != v43 && *v42 == v40)
    v48 = v42[1];
  else
LABEL_40:
    v48 = 0;
  v49 = mlir::DenseElementsAttr::getFromRawBuffer(v38, v48, v52, 8 * v53, 8, 1, 0);
  v24 = v49;
  v25 = v49 & 0xFFFFFFFFFFFFFF00;
  if (v52 != v54)
    free(v52);
  return v25 | v24;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ReduceMax,mlir::Value,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.reduce_max", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.reduce_max";
    v17[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ReduceMax::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ReduceMax,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMeanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMeanOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::ReductionMeanOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMeanOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::ReductionMeanOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionMeanOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 48);
  v9 = *(_QWORD *)(a3 + 56);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v28;
      v29 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMeanOp &>(mlir::mps::ReductionMeanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMeanOp &>(mlir::mps::ReductionMeanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrHalH13g *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[2];
  unsigned int *v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t *v28;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v25 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 56);
  v29[0] = *(_QWORD *)(a3 + 48);
  v29[1] = v6;
  v24[1] = v7;
  if ((_BYTE)v7)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v26[0] = mlir::ValueRange::dereference_iterator(v29, 0);
    v9 = mlir::OpBuilder::create<mlir::anec::ReduceAvg,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), v8, v26, v24);
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v25))
    {
      v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v25) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v10)
        goto LABEL_12;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ShapedType>();
      v13 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v13)
        goto LABEL_12;
      v14 = *(_QWORD **)(v11 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_12:
        v20 = 0;
      v26[0] = (uint64_t)v10;
      v26[1] = v20;
    }
    v26[0] = (uint64_t)v9 - 16;
    v21 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, v25, (uint64_t)v26, 1);
  }
  else
  {
    v26[0] = (uint64_t)"failed to convert operand axes";
    v27 = 259;
    v28 = v26;
    v22 = *(_QWORD *)(a4 + 16);
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v22 + 64))(v22, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMeanOp &>(mlir::mps::ReductionMeanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v28);
    else
      return 0;
  }
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMeanOp &>(mlir::mps::ReductionMeanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ReduceAvg,mlir::Value,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.reduce_avg", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.reduce_avg";
    v17[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ReduceAvg::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ReduceAvg,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMinOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionMinOpGenericAdaptorBase::ReductionMinOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[56];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionMinOpGenericAdaptorBase::ReductionMinOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 56);
  v9 = *(_QWORD *)(a3 + 64);
  v36 = v8;
  v37 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v28;
      v35 = *(_QWORD *)(a3 + 64);
      v29 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v36 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v37 = v23;
      if (v36)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v36))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v36);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMinOp &>(mlir::mps::ReductionMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v36, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v37;
    if (v36 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMinOp &>(mlir::mps::ReductionMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrHalH13g *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[2];
  unsigned int *v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t *v28;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v25 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 64);
  v29[0] = *(_QWORD *)(a3 + 56);
  v29[1] = v6;
  v24[1] = v7;
  if ((_BYTE)v7)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v26[0] = mlir::ValueRange::dereference_iterator(v29, 0);
    v9 = mlir::OpBuilder::create<mlir::anec::ReduceMin,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), v8, v26, v24);
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v25))
    {
      v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v25) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v10)
        goto LABEL_12;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ShapedType>();
      v13 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v13)
        goto LABEL_12;
      v14 = *(_QWORD **)(v11 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_12:
        v20 = 0;
      v26[0] = (uint64_t)v10;
      v26[1] = v20;
    }
    v26[0] = (uint64_t)v9 - 16;
    v21 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, v25, (uint64_t)v26, 1);
  }
  else
  {
    v26[0] = (uint64_t)"failed to convert operand axes";
    v27 = 259;
    v28 = v26;
    v22 = *(_QWORD *)(a4 + 16);
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v22 + 64))(v22, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMinOp &>(mlir::mps::ReductionMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v28);
    else
      return 0;
  }
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMinOp &>(mlir::mps::ReductionMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ReduceMin,mlir::Value,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.reduce_min", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.reduce_min";
    v17[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ReduceMin::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ReduceMin,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Plus<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)2>::~ConvertReductionA14Plus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionSumOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionSumOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionSumOpGenericAdaptorBase::ReductionSumOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReductionSumOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReductionSumOpGenericAdaptorBase::ReductionSumOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReductionSumOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 48);
  v9 = *(_QWORD *)(a3 + 56);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v28;
      v29 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionSumOp &>(mlir::mps::ReductionSumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionSumOp &>(mlir::mps::ReductionSumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrHalH13g *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[2];
  unsigned int *v25;
  uint64_t v26[4];
  __int16 v27;
  uint64_t *v28;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v25 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 56);
  v29[0] = *(_QWORD *)(a3 + 48);
  v29[1] = v6;
  v24[1] = v7;
  if ((_BYTE)v7)
  {
    v8 = *(_QWORD *)(a2 + 24);
    v26[0] = mlir::ValueRange::dereference_iterator(v29, 0);
    v9 = mlir::OpBuilder::create<mlir::anec::ReduceSum,mlir::Value,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), v8, v26, v24);
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v25))
    {
      v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v25) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v10)
        goto LABEL_12;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ShapedType>();
      v13 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v13)
        goto LABEL_12;
      v14 = *(_QWORD **)(v11 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_12:
        v20 = 0;
      v26[0] = (uint64_t)v10;
      v26[1] = v20;
    }
    v26[0] = (uint64_t)v9 - 16;
    v21 = 1;
    mlir::ConversionPatternRewriter::replaceOp(a4, v25, (uint64_t)v26, 1);
  }
  else
  {
    v26[0] = (uint64_t)"failed to convert operand axes";
    v27 = 259;
    v28 = v26;
    v22 = *(_QWORD *)(a4 + 16);
    if (v22 && mlir::RewriterBase::Listener::classof(v22))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v22 + 64))(v22, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionSumOp &>(mlir::mps::ReductionSumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v28);
    else
      return 0;
  }
  return v21;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionSumOp &>(mlir::mps::ReductionSumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ReduceSum,mlir::Value,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.reduce_sum", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.reduce_sum";
    v17[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::ReduceSum::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ReduceSum,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Shape;
  uint64_t IntegerType;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t StringAttr;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  void *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  mlir::Operation ***v89;
  uint64_t v90;
  char *v91;
  _QWORD v92[2];
  unsigned int *v93;
  _QWORD v94[4];
  __int16 v95;
  void *v96;
  uint64_t v97;
  _WORD v98[32];
  uint64_t v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[48];
  void *v103;
  uint64_t v104;
  _BYTE v105[48];
  _OWORD *v106;
  uint64_t v107;
  _OWORD v108[3];
  void **v109;
  uint64_t v110;
  _BYTE v111[48];
  uint64_t v112[4];

  v112[2] = *MEMORY[0x24BDAC8D0];
  v93 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 64);
  v112[0] = *(_QWORD *)(a3 + 56);
  v112[1] = v6;
  if (!v8)
  {
    v96 = "failed to convert operand axes";
    v98[8] = 259;
    v109 = &v96;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMaxOp &>(mlir::mps::ReductionMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v109);
      return 0;
    }
    return v55;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v93))
  {
    v57 = v93;
    v96 = &v93;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
      return 0;
    }
    return v55;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v93) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v109 = (void **)v111;
  v110 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v109, 1);
  v106 = v108;
  memset(v108, 0, sizeof(v108));
  v107 = 0x600000006;
  v103 = v105;
  memset_pattern16(v105, &unk_207A80400, 0x18uLL);
  v104 = 0x600000003;
  v100 = v102;
  memset_pattern16(v102, &unk_207A80400, 0x18uLL);
  v101 = 0x600000003;
  v92[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v92[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v92);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v110)
    {
      v35 = IndexFromDim;
      v36 = (uint64_t *)v109;
      v37 = 8 * v110;
      while (1)
      {
        v38 = *v36;
        v94[0] = v38;
        if (v38 == v35)
          break;
        if (v38 <= 1)
        {
          v61 = v93;
          v96 = &v93;
          v55 = *(_QWORD *)(a4 + 16);
          if (!v55)
            goto LABEL_89;
          if (mlir::RewriterBase::Listener::classof(v55))
          {
            v59 = *((_QWORD *)v61 + 3);
            goto LABEL_54;
          }
          goto LABEL_56;
        }
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v92);
        *((_QWORD *)v100 + v38 - 2) = *(_QWORD *)(Shape + 8 * v38);
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_29;
      }
      v58 = v93;
      v96 = v94;
      v97 = (uint64_t)&v93;
      v55 = *(_QWORD *)(a4 + 16);
      if (!v55)
        goto LABEL_89;
      if (mlir::RewriterBase::Listener::classof(v55))
      {
        v59 = *((_QWORD *)v58 + 3);
LABEL_54:
        v55 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void **))(*(_QWORD *)v55 + 64))(v55, v59, v60, &v96);
        goto LABEL_89;
      }
LABEL_56:
      v55 = 0;
    }
    else
    {
LABEL_29:
      v96 = v98;
      v97 = 0x400000000;
      v99 = 4;
      v94[0] = 3;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v41 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v94, 1, IntegerType, 0);
      v94[0] = 6;
      v42 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v43 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v94, 1, v42, 0);
      v94[0] = "ksize";
      v95 = 259;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v94);
      if (v41)
      {
        v45 = *v41;
        v46 = mlir::TypeID::get<mlir::ShapedType>();
        v47 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD **)(v45 + 8);
          v49 = &v48[2 * v47];
          do
          {
            v50 = v47 >> 1;
            v51 = &v48[2 * (v47 >> 1)];
            v53 = *v51;
            v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46)
              v48 = v52;
            else
              v47 = v50;
          }
          while (v47);
          if (v48 == v49)
          {
            v54 = 0;
          }
          else if (*v48 == v46)
          {
            v54 = v48[1];
          }
          else
          {
            v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
      v62 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v54, v100, 8 * v101, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v96, StringAttr, v62);
      v94[0] = "stride";
      v95 = 259;
      v63 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v94);
      if (v41)
      {
        v64 = v43;
        v65 = *v41;
        v66 = mlir::TypeID::get<mlir::ShapedType>();
        v67 = *(unsigned int *)(v65 + 16);
        if ((_DWORD)v67)
        {
          v68 = *(_QWORD **)(v65 + 8);
          v69 = &v68[2 * v67];
          do
          {
            v70 = v67 >> 1;
            v71 = &v68[2 * (v67 >> 1)];
            v73 = *v71;
            v72 = v71 + 2;
            v67 += ~(v67 >> 1);
            if (v73 < v66)
              v68 = v72;
            else
              v67 = v70;
          }
          while (v67);
          v43 = v64;
          if (v68 == v69)
          {
            v74 = 0;
          }
          else if (*v68 == v66)
          {
            v74 = v68[1];
          }
          else
          {
            v74 = 0;
          }
        }
        else
        {
          v74 = 0;
          v43 = v64;
        }
      }
      else
      {
        v74 = 0;
      }
      v75 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v74, v103, 8 * v104, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v96, v63, v75);
      v94[0] = "padding";
      v95 = 259;
      v76 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v94);
      if (v43
        && (v77 = *v43, v78 = mlir::TypeID::get<mlir::ShapedType>(), v79 = *(unsigned int *)(v77 + 16), (_DWORD)v79))
      {
        v80 = *(_QWORD **)(v77 + 8);
        v81 = &v80[2 * v79];
        do
        {
          v82 = v79 >> 1;
          v83 = &v80[2 * (v79 >> 1)];
          v85 = *v83;
          v84 = v83 + 2;
          v79 += ~(v79 >> 1);
          if (v85 < v78)
            v80 = v84;
          else
            v79 = v82;
        }
        while (v79);
        if (v80 != v81 && *v80 == v78)
          v86 = v80[1];
        else
          v86 = 0;
      }
      else
      {
        v86 = 0;
      }
      v87 = mlir::DenseElementsAttr::getFromRawBuffer(v43, v86, v106, 8 * v107, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v96, v76, v87);
      v94[0] = mlir::ValueRange::dereference_iterator(v112, 0);
      v91 = (char *)mlir::OpBuilder::create<mlir::anec::MaxPool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *((_QWORD *)v93 + 3), (uint64_t)v94, (uint64_t)&v96)- 16;
      mlir::ConversionPatternRewriter::replaceOp(a4, v93, (uint64_t)&v91, 1);
      if (v96 != v98)
        free(v96);
      v55 = 1;
    }
LABEL_89:
    if (v100 != v102)
      free(v100);
    if (v103 != v105)
      free(v103);
    if (v106 != v108)
      free(v106);
    if (v109 != (void **)v111)
      free(v109);
    return v55;
  }
  v89 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMaxOp,mlir::mps::ReductionMaxOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMaxOp,mlir::mps::ReductionMaxOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  mlir::Diagnostic *v11;
  mlir::Diagnostic *v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v3 = mlir::Diagnostic::operator<<(a2, "MaxPool/AveragePool for axes:");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = **a1;
  v17 = 2;
  v18 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v14 = v7 + 1;
    v15 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v16[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  v11 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(v3, "reduced from Op ");
  v12 = mlir::Diagnostic::operator<<(v11, (mlir::Operation *)*a1[1]);
  return mlir::Diagnostic::operator<<((uint64_t)v12, "is not supported for A13 and below\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMaxOp,mlir::mps::ReductionMaxOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Axis value is incorrect for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Shape;
  uint64_t IntegerType;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t StringAttr;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  void *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  mlir::MLIRContext *v88;
  uint64_t UnitAttr;
  mlir::Operation ***v91;
  uint64_t v92;
  char *v93;
  _QWORD v94[2];
  unsigned int *v95;
  _QWORD v96[4];
  __int16 v97;
  void *v98;
  uint64_t v99;
  _WORD v100[32];
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[48];
  void *v105;
  uint64_t v106;
  _BYTE v107[48];
  _OWORD *v108;
  uint64_t v109;
  _OWORD v110[3];
  void **v111;
  uint64_t v112;
  _BYTE v113[48];
  uint64_t v114[4];

  v114[2] = *MEMORY[0x24BDAC8D0];
  v95 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 56);
  v114[0] = *(_QWORD *)(a3 + 48);
  v114[1] = v6;
  if (!v8)
  {
    v98 = "failed to convert operand axes";
    v100[8] = 259;
    v111 = &v98;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMeanOp &>(mlir::mps::ReductionMeanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v111);
      return 0;
    }
    return v55;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v95))
  {
    v57 = v95;
    v98 = &v95;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
      return 0;
    }
    return v55;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v111 = (void **)v113;
  v112 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v111, 1);
  v108 = v110;
  memset(v110, 0, sizeof(v110));
  v109 = 0x600000006;
  v105 = v107;
  memset_pattern16(v107, &unk_207A80400, 0x18uLL);
  v106 = 0x600000003;
  v102 = v104;
  memset_pattern16(v104, &unk_207A80400, 0x18uLL);
  v103 = 0x600000003;
  v94[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v94[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v94);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v112)
    {
      v35 = IndexFromDim;
      v36 = (uint64_t *)v111;
      v37 = 8 * v112;
      while (1)
      {
        v38 = *v36;
        v96[0] = v38;
        if (v38 == v35)
          break;
        if (v38 <= 1)
        {
          v61 = v95;
          v98 = &v95;
          v55 = *(_QWORD *)(a4 + 16);
          if (!v55)
            goto LABEL_89;
          if (mlir::RewriterBase::Listener::classof(v55))
          {
            v59 = *((_QWORD *)v61 + 3);
            goto LABEL_54;
          }
          goto LABEL_56;
        }
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v94);
        *((_QWORD *)v102 + v38 - 2) = *(_QWORD *)(Shape + 8 * v38);
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_29;
      }
      v58 = v95;
      v98 = v96;
      v99 = (uint64_t)&v95;
      v55 = *(_QWORD *)(a4 + 16);
      if (!v55)
        goto LABEL_89;
      if (mlir::RewriterBase::Listener::classof(v55))
      {
        v59 = *((_QWORD *)v58 + 3);
LABEL_54:
        v55 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void **))(*(_QWORD *)v55 + 64))(v55, v59, v60, &v98);
        goto LABEL_89;
      }
LABEL_56:
      v55 = 0;
    }
    else
    {
LABEL_29:
      v98 = v100;
      v99 = 0x400000000;
      v101 = 4;
      v96[0] = 3;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v41 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v96, 1, IntegerType, 0);
      v96[0] = 6;
      v42 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v43 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v96, 1, v42, 0);
      v96[0] = "ksize";
      v97 = 259;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v96);
      if (v41)
      {
        v45 = *v41;
        v46 = mlir::TypeID::get<mlir::ShapedType>();
        v47 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD **)(v45 + 8);
          v49 = &v48[2 * v47];
          do
          {
            v50 = v47 >> 1;
            v51 = &v48[2 * (v47 >> 1)];
            v53 = *v51;
            v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46)
              v48 = v52;
            else
              v47 = v50;
          }
          while (v47);
          if (v48 == v49)
          {
            v54 = 0;
          }
          else if (*v48 == v46)
          {
            v54 = v48[1];
          }
          else
          {
            v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
      v62 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v54, v102, 8 * v103, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v98, StringAttr, v62);
      v96[0] = "stride";
      v97 = 259;
      v63 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v96);
      if (v41)
      {
        v64 = v43;
        v65 = *v41;
        v66 = mlir::TypeID::get<mlir::ShapedType>();
        v67 = *(unsigned int *)(v65 + 16);
        if ((_DWORD)v67)
        {
          v68 = *(_QWORD **)(v65 + 8);
          v69 = &v68[2 * v67];
          do
          {
            v70 = v67 >> 1;
            v71 = &v68[2 * (v67 >> 1)];
            v73 = *v71;
            v72 = v71 + 2;
            v67 += ~(v67 >> 1);
            if (v73 < v66)
              v68 = v72;
            else
              v67 = v70;
          }
          while (v67);
          v43 = v64;
          if (v68 == v69)
          {
            v74 = 0;
          }
          else if (*v68 == v66)
          {
            v74 = v68[1];
          }
          else
          {
            v74 = 0;
          }
        }
        else
        {
          v74 = 0;
          v43 = v64;
        }
      }
      else
      {
        v74 = 0;
      }
      v75 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v74, v105, 8 * v106, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v98, v63, v75);
      v96[0] = "padding";
      v97 = 259;
      v76 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v96);
      if (v43
        && (v77 = *v43, v78 = mlir::TypeID::get<mlir::ShapedType>(), v79 = *(unsigned int *)(v77 + 16), (_DWORD)v79))
      {
        v80 = *(_QWORD **)(v77 + 8);
        v81 = &v80[2 * v79];
        do
        {
          v82 = v79 >> 1;
          v83 = &v80[2 * (v79 >> 1)];
          v85 = *v83;
          v84 = v83 + 2;
          v79 += ~(v79 >> 1);
          if (v85 < v78)
            v80 = v84;
          else
            v79 = v82;
        }
        while (v79);
        if (v80 != v81 && *v80 == v78)
          v86 = v80[1];
        else
          v86 = 0;
      }
      else
      {
        v86 = 0;
      }
      v87 = mlir::DenseElementsAttr::getFromRawBuffer(v43, v86, v108, 8 * v109, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v98, v76, v87);
      v96[0] = mlir::ValueRange::dereference_iterator(v114, 0);
      UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)(a4 + 8), v88);
      mlir::NamedAttrList::set((uint64_t)&v98, (uint64_t)"inc_pad", 7, UnitAttr);
      v93 = (char *)mlir::OpBuilder::create<mlir::anec::AveragePool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *((_QWORD *)v95 + 3), (uint64_t)v96, (uint64_t)&v98)- 16;
      mlir::ConversionPatternRewriter::replaceOp(a4, v95, (uint64_t)&v93, 1);
      if (v98 != v100)
        free(v98);
      v55 = 1;
    }
LABEL_89:
    if (v102 != v104)
      free(v102);
    if (v105 != v107)
      free(v105);
    if (v108 != v110)
      free(v108);
    if (v111 != (void **)v113)
      free(v111);
    return v55;
  }
  v91 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMeanOp,mlir::mps::ReductionMeanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMeanOp,mlir::mps::ReductionMeanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  mlir::Diagnostic *v11;
  mlir::Diagnostic *v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v3 = mlir::Diagnostic::operator<<(a2, "MaxPool/AveragePool for axes:");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = **a1;
  v17 = 2;
  v18 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v14 = v7 + 1;
    v15 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v16[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  v11 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(v3, "reduced from Op ");
  v12 = mlir::Diagnostic::operator<<(v11, (mlir::Operation *)*a1[1]);
  return mlir::Diagnostic::operator<<((uint64_t)v12, "is not supported for A13 and below\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMeanOp,mlir::mps::ReductionMeanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Axis value is incorrect for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t Shape;
  uint64_t IntegerType;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t StringAttr;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t OperandRange;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  mlir::MLIRContext *v109;
  uint64_t v110;
  unsigned int *v112;
  uint64_t v113;
  mlir::Operation ***v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  _QWORD v118[2];
  unsigned int *v119;
  uint64_t v120;
  uint64_t GOC;
  uint64_t *v122[4];
  __int16 v123;
  void *v124;
  uint64_t v125;
  _WORD v126[32];
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _BYTE v130[48];
  void *v131;
  uint64_t v132;
  _BYTE v133[48];
  _OWORD *v134;
  uint64_t v135;
  _OWORD v136[3];
  void **v137;
  uint64_t v138;
  _BYTE v139[48];
  uint64_t v140[4];

  v140[2] = *MEMORY[0x24BDAC8D0];
  v119 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 64);
  v140[0] = *(_QWORD *)(a3 + 56);
  v140[1] = v6;
  if (!v8)
  {
    v124 = "failed to convert operand axes";
    v126[8] = 259;
    v137 = &v124;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55 && mlir::RewriterBase::Listener::classof(v55))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMinOp &>(mlir::mps::ReductionMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v137);
    return 0;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v119))
  {
    v57 = v119;
    v124 = &v119;
    v58 = *(_QWORD *)(a4 + 16);
    if (v58 && mlir::RewriterBase::Listener::classof(v58))
    return 0;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v119) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v118[0] = v10;
  v118[1] = v20;
  v137 = (void **)v139;
  v138 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v137, 1);
  v134 = v136;
  memset(v136, 0, sizeof(v136));
  v135 = 0x600000006;
  v131 = v133;
  memset_pattern16(v133, &unk_207A80400, 0x18uLL);
  v132 = 0x600000003;
  v128 = v130;
  memset_pattern16(v130, &unk_207A80400, 0x18uLL);
  v129 = 0x600000003;
  v117[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v117[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v117);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v138)
    {
      v35 = (uint64_t *)IndexFromDim;
      v36 = (uint64_t **)v137;
      v37 = 8 * v138;
      while (1)
      {
        v38 = *v36;
        v122[0] = v38;
        if (v38 == v35)
          break;
        if ((uint64_t)v38 <= 1)
        {
          v64 = v119;
          v124 = &v119;
          v61 = *(_QWORD *)(a4 + 16);
          if (v61 && mlir::RewriterBase::Listener::classof(v61))
          {
            v62 = *((_QWORD *)v64 + 3);
            goto LABEL_54;
          }
          goto LABEL_55;
        }
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v117);
        *((_QWORD *)v128 + (_QWORD)v38 - 2) = *(_QWORD *)(Shape + 8 * v38);
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_29;
      }
      v60 = v119;
      v124 = v122;
      v125 = (uint64_t)&v119;
      v61 = *(_QWORD *)(a4 + 16);
      if (v61 && mlir::RewriterBase::Listener::classof(v61))
      {
        v62 = *((_QWORD *)v60 + 3);
LABEL_54:
        v59 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void **))(*(_QWORD *)v61 + 64))(v61, v62, v63, &v124);
        goto LABEL_96;
      }
LABEL_55:
      v59 = 0;
    }
    else
    {
LABEL_29:
      v124 = v126;
      v125 = 0x400000000;
      v127 = 4;
      v122[0] = (uint64_t *)3;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v41 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v122, 1, IntegerType, 0);
      v122[0] = (uint64_t *)6;
      v42 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v43 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v122, 1, v42, 0);
      v122[0] = (uint64_t *)"ksize";
      v123 = 259;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v122);
      if (v41)
      {
        v45 = *v41;
        v46 = mlir::TypeID::get<mlir::ShapedType>();
        v47 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD **)(v45 + 8);
          v49 = &v48[2 * v47];
          do
          {
            v50 = v47 >> 1;
            v51 = &v48[2 * (v47 >> 1)];
            v53 = *v51;
            v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46)
              v48 = v52;
            else
              v47 = v50;
          }
          while (v47);
          if (v48 == v49)
          {
            v54 = 0;
          }
          else if (*v48 == v46)
          {
            v54 = v48[1];
          }
          else
          {
            v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
      v65 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v54, v128, 8 * v129, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v124, StringAttr, v65);
      v122[0] = (uint64_t *)"stride";
      v123 = 259;
      v66 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v122);
      if (!v41)
        goto LABEL_70;
      v67 = *v41;
      v68 = mlir::TypeID::get<mlir::ShapedType>();
      v69 = *(unsigned int *)(v67 + 16);
      if (!(_DWORD)v69)
        goto LABEL_70;
      v70 = *(_QWORD **)(v67 + 8);
      v71 = &v70[2 * v69];
      do
      {
        v72 = v69 >> 1;
        v73 = &v70[2 * (v69 >> 1)];
        v75 = *v73;
        v74 = v73 + 2;
        v69 += ~(v69 >> 1);
        if (v75 < v68)
          v70 = v74;
        else
          v69 = v72;
      }
      while (v69);
      if (v70 != v71 && *v70 == v68)
        v76 = v70[1];
      else
LABEL_70:
        v76 = 0;
      v77 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v76, v131, 8 * v132, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v124, v66, v77);
      v122[0] = (uint64_t *)"padding";
      v123 = 259;
      v78 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v122);
      if (!v43)
        goto LABEL_80;
      v79 = *v43;
      v80 = mlir::TypeID::get<mlir::ShapedType>();
      v81 = *(unsigned int *)(v79 + 16);
      if (!(_DWORD)v81)
        goto LABEL_80;
      v82 = *(_QWORD **)(v79 + 8);
      v83 = &v82[2 * v81];
      do
      {
        v84 = v81 >> 1;
        v85 = &v82[2 * (v81 >> 1)];
        v87 = *v85;
        v86 = v85 + 2;
        v81 += ~(v81 >> 1);
        if (v87 < v80)
          v82 = v86;
        else
          v81 = v84;
      }
      while (v81);
      if (v82 != v83 && *v82 == v80)
        v88 = v82[1];
      else
LABEL_80:
        v88 = 0;
      v89 = mlir::DenseElementsAttr::getFromRawBuffer(v43, v88, v134, 8 * v135, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v124, v78, v89);
      v90 = mlir::ValueRange::dereference_iterator(v140, 0);
      v122[0] = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
      if (mlir::Type::isF16((mlir::Type *)v122)
        || (GOC = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118),
            mlir::Type::isF32((mlir::Type *)&GOC)))
      {
        GOC = 1;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        v92 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&GOC, 1, OperandRange, 0);
        v93 = (uint64_t)v92;
        if (!v92)
          goto LABEL_92;
        v94 = *v92;
        v95 = mlir::TypeID::get<mlir::ShapedType>();
        v96 = *(unsigned int *)(v94 + 16);
        if (!(_DWORD)v96)
          goto LABEL_92;
        v97 = *(_QWORD **)(v94 + 8);
        v98 = &v97[2 * v96];
        do
        {
          v99 = v96 >> 1;
          v100 = &v97[2 * (v96 >> 1)];
          v102 = *v100;
          v101 = v100 + 2;
          v96 += ~(v96 >> 1);
          if (v102 < v95)
            v97 = v101;
          else
            v96 = v99;
        }
        while (v96);
        if (v97 != v98 && *v97 == v95)
          v103 = v97[1];
        else
LABEL_92:
          v103 = 0;
        v104 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        v120 = (uint64_t)mlir::FloatAttr::get(v104, -1.0);
        v59 = 1;
        v122[0] = (uint64_t *)mlir::DenseElementsAttr::get(v93, v103, &v120, 1uLL);
        v105 = *((_QWORD *)v119 + 3);
        v120 = 1;
        v106 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        GOC = mlir::MemRefType::get(&v120, (mlir::AffineMap *)1, v106, 0, 0, 0);
        v107 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>((mlir::OpBuilder *)(a4 + 8), v105, &GOC, v122)- 16;
        v108 = *((_QWORD *)v119 + 3);
        v116 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
        v120 = (uint64_t)mlir::OpBuilder::create<mlir::anec::MaxPool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), v108, (uint64_t)&v116, (uint64_t)&v124);
        v109 = (mlir::MLIRContext *)*((_QWORD *)v119 + 3);
        v110 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v120);
        mlir::ConversionPatternRewriter::replaceOp(a4, v119, (uint64_t)v122, 1);
      }
      else
      {
        v112 = v119;
        v122[0] = v118;
        v113 = *(_QWORD *)(a4 + 16);
        if (v113)
        {
          if (mlir::RewriterBase::Listener::classof(v113))
          else
            v59 = 0;
        }
        else
        {
          v59 = 0;
        }
      }
      if (v124 != v126)
        free(v124);
    }
LABEL_96:
    if (v128 != v130)
      free(v128);
    if (v131 != v133)
      free(v131);
    if (v134 != v136)
      free(v134);
    if (v137 != (void **)v139)
      free(v137);
    return v59;
  }
  v114 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  mlir::Diagnostic *v11;
  mlir::Diagnostic *v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v3 = mlir::Diagnostic::operator<<(a2, "MaxPool/AveragePool for axes:");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = **a1;
  v17 = 2;
  v18 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v14 = v7 + 1;
    v15 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v16[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  v11 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(v3, "reduced from Op ");
  v12 = mlir::Diagnostic::operator<<(v11, (mlir::Operation *)*a1[1]);
  return mlir::Diagnostic::operator<<((uint64_t)v12, "is not supported for A13 and below\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Axis value is incorrect for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(mlir::MemoryMapperInterface **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t OperandRange;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  _BYTE *v14;
  _BYTE v15[24];

  v3 = mlir::Diagnostic::operator<<(a2, "ReduceMin for non fp type: ");
  OperandRange = mlir::MemoryMapperInterface::getOperandRange(*a1);
  v5 = v15;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v15, OperandRange);
  v6 = v3 + 16;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(unsigned int *)(v3 + 24);
  if (v8 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v8 + 1;
    v13 = v7 + 24 * v8 > (unint64_t)v15;
    if (v7 <= (unint64_t)v15 && v13)
    {
      v14 = &v15[-v7];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v3 + 32), v12, 24);
      v7 = *(_QWORD *)(v3 + 16);
      v5 = &v14[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v3 + 32), v12, 24);
      v7 = *(_QWORD *)(v3 + 16);
      v5 = v15;
    }
  }
  v9 = v7 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v5;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " is not supported for A13 and below\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)1>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

ZinIrHalH13g *mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t *Value;
  uint64_t v38;
  llvm::APFloatBase *NumElements;
  llvm::APFloatBase *v40;
  llvm::APFloatBase *v41;
  uint64_t v42;
  mlir::Operation *v44;
  mlir::Operation *v45;
  mlir::MLIRContext *v46;
  void *v47;
  uint64_t v48;
  uint64_t F16Type;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  mlir::Builder *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  mlir::Operation *v72;
  __n128 *ElementsAttr;
  _QWORD v74[3];
  void *v75;
  uint64_t v76;
  _WORD v77[256];
  void *v78;
  uint64_t v79;
  uint64_t v80[2];
  int64x2_t v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[48];
  void *v85;
  uint64_t v86;
  _BYTE v87[48];
  _BYTE *v88;
  uint64_t v89;
  _BYTE v90[48];
  _QWORD *v91;
  uint64_t v92;
  _BYTE v93[48];
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v72 = a2;
  v6 = *(_QWORD *)(a3 + 56);
  v94 = *(_QWORD *)(a3 + 48);
  v95 = v6;
  if (!v8)
  {
    v75 = "failed to convert operand axes";
    v77[8] = 259;
    v78 = &v75;
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      if (mlir::RewriterBase::Listener::classof(v42))
        return (ZinIrHalH13g *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v42 + 64))(v42, *((_QWORD *)a2 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionSumOp &>(mlir::mps::ReductionSumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v78);
      return 0;
    }
    return (ZinIrHalH13g *)v42;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v72))
  {
    v44 = v72;
    v75 = &v72;
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      if (mlir::RewriterBase::Listener::classof(v42))
      return 0;
    }
    return (ZinIrHalH13g *)v42;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v72) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v91 = v93;
  v92 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v91, 1);
  v88 = v90;
  memset(v90, 0, sizeof(v90));
  v89 = 0x600000006;
  v85 = v87;
  memset_pattern16(v87, &unk_207A80400, 0x18uLL);
  v86 = 0x600000003;
  v82 = v84;
  memset_pattern16(v84, &unk_207A80400, 0x18uLL);
  v83 = 0x600000003;
  v71[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v71[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v71);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v92 == 1 && *v91 == IndexFromDim)
    {
      v69 = *((_QWORD *)v72 + 3);
      v35 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v71) + 8 * IndexFromDim);
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v71);
      v78 = v80;
      v80[0] = 1;
      v80[1] = v35;
      v81 = vdupq_n_s64(1uLL);
      v79 = 0x1000000004;
      v70 = mlir::MemRefType::get(v80, (mlir::AffineMap *)4, OperandRange, 0, 0, 0);
      Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70);
      NumElements = (llvm::APFloatBase *)mlir::ShapedType::getNumElements(Value, v38);
      v40 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(NumElements);
      v41 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v40);
      if (v41 == v40)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v74, (uint64_t)v40, 1);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v74, (uint64_t)v40, (llvm::APInt *)1);
      v75 = v77;
      v76 = 0x1000000000;
      llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&v75, (unint64_t)NumElements, (uint64_t)&ElementsAttr);
      if (v41 == (llvm::APFloatBase *)v74[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v74);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v74);
      v47 = v78;
      v48 = v79;
      F16Type = mlir::Builder::getF16Type((mlir::Float16Type **)(a4 + 8), v46);
      v50 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v47, v48, F16Type, 0);
      ElementsAttr = mlir::createElementsAttr(v50, (uint64_t)v75, v76);
      v74[0] = v51;
      mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v69, &v70, (_QWORD **)&ElementsAttr);
      v52 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v72) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v52)
        goto LABEL_53;
      v53 = *v52;
      v54 = mlir::TypeID::get<mlir::ShapedType>();
      v55 = *(unsigned int *)(v53 + 16);
      if (!(_DWORD)v55)
        goto LABEL_53;
      v56 = *(_QWORD **)(v53 + 8);
      v57 = &v56[2 * v55];
      do
      {
        v58 = v55 >> 1;
        v59 = &v56[2 * (v55 >> 1)];
        v61 = *v59;
        v60 = v59 + 2;
        v55 += ~(v55 >> 1);
        if (v61 < v54)
          v56 = v60;
        else
          v55 = v58;
      }
      while (v55);
      if (v56 != v57 && *v56 == v54)
        v62 = v56[1];
      else
LABEL_53:
        v62 = 0;
    }
    v45 = v72;
    v75 = &v72;
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      if (mlir::RewriterBase::Listener::classof(v42))
      else
        v42 = 0;
    }
    if (v82 != v84)
      free(v82);
    if (v85 != v87)
      free(v85);
    if (v88 != v90)
      free(v88);
    if (v91 != (_QWORD *)v93)
      free(v91);
    return (ZinIrHalH13g *)v42;
  }
  v64 = (mlir::Builder *)std::__throw_bad_optional_access[abi:nn180100]();
  return mlir::OpBuilder::create<mlir::anec::Convolution,mlir::MemRefType &,mlir::Value,mlir::Value&>(v64, v65, v66, v67, v68);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Convolution,mlir::MemRefType &,mlir::Value,mlir::Value&>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.convolution", (const unsigned __int8 *)0x10, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.convolution";
    v19[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::Convolution::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionSumOp,mlir::mps::ReductionSumOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

void llvm::SmallVectorImpl<llvm::APFloat>::assign(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  llvm::APFloatBase *v8;
  unint64_t v9;
  uint64_t v10;
  const llvm::detail::DoubleAPFloat *v11;
  void *v12;
  llvm::detail::IEEEFloat *v13;
  _QWORD *v14;
  uint64_t v16;
  void *v17;
  llvm::detail::DoubleAPFloat *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = a1;
  if (a1[3] >= a2)
  {
    v6 = a1[2];
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = a1[2];
    if (v7)
    {
      v8 = (llvm::APFloatBase *)(*(_QWORD *)a1 + 8);
      do
      {
        a1 = (unsigned int *)llvm::APFloat::Storage::operator=(v8, (uint64_t *)(a3 + 8));
        v8 = (llvm::APFloatBase *)((char *)v8 + 32);
        --v7;
      }
      while (v7);
      v6 = v5[2];
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v16 = *(_QWORD *)v5;
        v17 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
        v18 = (llvm::detail::DoubleAPFloat *)(32 * v6 + v16 - 24);
        v19 = 32 * a2 - 32 * v6;
        do
        {
          if (v17 == *(void **)v18)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v18);
          else
            llvm::detail::IEEEFloat::~IEEEFloat(v18);
          v18 = (llvm::detail::DoubleAPFloat *)(v20 - 32);
          v19 += 32;
        }
        while (v19);
      }
    }
    else
    {
      v10 = *(_QWORD *)v5;
      v11 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
      v12 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
      v13 = (llvm::detail::IEEEFloat *)(v10 + 32 * v6 + 8);
      do
      {
        if (v12 == *(void **)v11)
          v14 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v11);
        else
          v14 = (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v13, v11);
        v13 = (llvm::detail::IEEEFloat *)(v14 + 4);
      }
      while (!__CFADD__(v9++, 1));
    }
    v5[2] = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::growAndAssign((uint64_t)a1, a2, a3);
  }
}

void llvm::SmallVectorTemplateBase<llvm::APFloat,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  llvm::APFloatBase *v7;
  llvm::APFloatBase *v8;
  const llvm::detail::DoubleAPFloat *v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  llvm::detail::DoubleAPFloat *v18;
  int v19;
  unint64_t v20;

  v20 = 0;
  v6 = (char *)(a1 + 16);
  v7 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v20);
  v8 = v7;
  if (a2)
  {
    v9 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
    v10 = llvm::APFloatBase::PPCDoubleDouble(v7);
    v7 = (llvm::APFloatBase *)((char *)v8 + 8);
    v11 = a2;
    do
    {
      if (v10 == *(void **)v9)
        v12 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v9);
      else
        v12 = (_QWORD *)llvm::detail::IEEEFloat::IEEEFloat(v7, v9);
      v7 = (llvm::APFloatBase *)(v12 + 4);
      --v11;
    }
    while (v11);
  }
  v13 = *(char **)a1;
  v14 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v14)
  {
    v15 = llvm::APFloatBase::PPCDoubleDouble(v7);
    v16 = v13 - 24;
    v17 = 32 * v14;
    do
    {
      while (1)
      {
        v18 = (llvm::detail::DoubleAPFloat *)&v16[v17];
        if (v15 != *(void **)&v16[v17])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v18);
        v17 -= 32;
        if (!v17)
          goto LABEL_12;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v18);
      v17 -= 32;
    }
    while (v17);
LABEL_12:
    v13 = *(char **)a1;
  }
  v19 = v20;
  if (v13 != v6)
    free(v13);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v19;
}

llvm::APFloatBase *llvm::APFloat::Storage::operator=(llvm::APFloatBase *a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v8;

  v4 = *(void **)a1;
  v5 = llvm::APFloatBase::PPCDoubleDouble(a1);
  v6 = *a2;
  if (v5 != v4 && v5 != (void *)v6)
  {
    llvm::detail::IEEEFloat::operator=((uint64_t *)a1, a2);
    return a1;
  }
  v8 = v5;
  if (v5 != v4)
  {
    if (a1 == (llvm::APFloatBase *)a2)
      return a1;
    llvm::detail::IEEEFloat::~IEEEFloat(a1);
    goto LABEL_12;
  }
  if (v4 == (void *)v6)
  {
    llvm::detail::DoubleAPFloat::operator=((uint64_t *)a1, a2);
    return a1;
  }
  if (a1 != (llvm::APFloatBase *)a2)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
LABEL_12:
    if (v8 == (void *)*a2)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (const llvm::detail::DoubleAPFloat *)a2);
    else
      llvm::detail::IEEEFloat::IEEEFloat(a1, (const llvm::detail::IEEEFloat *)a2);
  }
  return a1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionSumOp,mlir::mps::ReductionSumOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "ReduceSum for axes other than channel axis: ");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, " is not supported for A13 and below\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Shape;
  uint64_t IntegerType;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t StringAttr;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  void *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  mlir::Operation ***v89;
  uint64_t v90;
  char *v91;
  _QWORD v92[2];
  unsigned int *v93;
  _QWORD v94[4];
  __int16 v95;
  void *v96;
  uint64_t v97;
  _WORD v98[32];
  uint64_t v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[48];
  void *v103;
  uint64_t v104;
  _BYTE v105[48];
  _OWORD *v106;
  uint64_t v107;
  _OWORD v108[3];
  void **v109;
  uint64_t v110;
  _BYTE v111[48];
  uint64_t v112[4];

  v112[2] = *MEMORY[0x24BDAC8D0];
  v93 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 64);
  v112[0] = *(_QWORD *)(a3 + 56);
  v112[1] = v6;
  if (!v8)
  {
    v96 = "failed to convert operand axes";
    v98[8] = 259;
    v109 = &v96;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMaxOp &>(mlir::mps::ReductionMaxOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v109);
      return 0;
    }
    return v55;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v93))
  {
    v57 = v93;
    v96 = &v93;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
      return 0;
    }
    return v55;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v93) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v109 = (void **)v111;
  v110 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v109, 1);
  v106 = v108;
  memset(v108, 0, sizeof(v108));
  v107 = 0x600000006;
  v103 = v105;
  memset_pattern16(v105, &unk_207A80400, 0x18uLL);
  v104 = 0x600000003;
  v100 = v102;
  memset_pattern16(v102, &unk_207A80400, 0x18uLL);
  v101 = 0x600000003;
  v92[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v92[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v92);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v110)
    {
      v35 = IndexFromDim;
      v36 = (uint64_t *)v109;
      v37 = 8 * v110;
      while (1)
      {
        v38 = *v36;
        v94[0] = v38;
        if (v38 == v35)
          break;
        if (v38 <= 1)
        {
          v61 = v93;
          v96 = &v93;
          v55 = *(_QWORD *)(a4 + 16);
          if (!v55)
            goto LABEL_89;
          if (mlir::RewriterBase::Listener::classof(v55))
          {
            v59 = *((_QWORD *)v61 + 3);
            goto LABEL_54;
          }
          goto LABEL_56;
        }
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v92);
        *((_QWORD *)v100 + v38 - 2) = *(_QWORD *)(Shape + 8 * v38);
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_29;
      }
      v58 = v93;
      v96 = v94;
      v97 = (uint64_t)&v93;
      v55 = *(_QWORD *)(a4 + 16);
      if (!v55)
        goto LABEL_89;
      if (mlir::RewriterBase::Listener::classof(v55))
      {
        v59 = *((_QWORD *)v58 + 3);
LABEL_54:
        v55 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void **))(*(_QWORD *)v55 + 64))(v55, v59, v60, &v96);
        goto LABEL_89;
      }
LABEL_56:
      v55 = 0;
    }
    else
    {
LABEL_29:
      v96 = v98;
      v97 = 0x400000000;
      v99 = 4;
      v94[0] = 3;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v41 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v94, 1, IntegerType, 0);
      v94[0] = 6;
      v42 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v43 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v94, 1, v42, 0);
      v94[0] = "ksize";
      v95 = 259;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v94);
      if (v41)
      {
        v45 = *v41;
        v46 = mlir::TypeID::get<mlir::ShapedType>();
        v47 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD **)(v45 + 8);
          v49 = &v48[2 * v47];
          do
          {
            v50 = v47 >> 1;
            v51 = &v48[2 * (v47 >> 1)];
            v53 = *v51;
            v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46)
              v48 = v52;
            else
              v47 = v50;
          }
          while (v47);
          if (v48 == v49)
          {
            v54 = 0;
          }
          else if (*v48 == v46)
          {
            v54 = v48[1];
          }
          else
          {
            v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
      v62 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v54, v100, 8 * v101, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v96, StringAttr, v62);
      v94[0] = "stride";
      v95 = 259;
      v63 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v94);
      if (v41)
      {
        v64 = v43;
        v65 = *v41;
        v66 = mlir::TypeID::get<mlir::ShapedType>();
        v67 = *(unsigned int *)(v65 + 16);
        if ((_DWORD)v67)
        {
          v68 = *(_QWORD **)(v65 + 8);
          v69 = &v68[2 * v67];
          do
          {
            v70 = v67 >> 1;
            v71 = &v68[2 * (v67 >> 1)];
            v73 = *v71;
            v72 = v71 + 2;
            v67 += ~(v67 >> 1);
            if (v73 < v66)
              v68 = v72;
            else
              v67 = v70;
          }
          while (v67);
          v43 = v64;
          if (v68 == v69)
          {
            v74 = 0;
          }
          else if (*v68 == v66)
          {
            v74 = v68[1];
          }
          else
          {
            v74 = 0;
          }
        }
        else
        {
          v74 = 0;
          v43 = v64;
        }
      }
      else
      {
        v74 = 0;
      }
      v75 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v74, v103, 8 * v104, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v96, v63, v75);
      v94[0] = "padding";
      v95 = 259;
      v76 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v94);
      if (v43
        && (v77 = *v43, v78 = mlir::TypeID::get<mlir::ShapedType>(), v79 = *(unsigned int *)(v77 + 16), (_DWORD)v79))
      {
        v80 = *(_QWORD **)(v77 + 8);
        v81 = &v80[2 * v79];
        do
        {
          v82 = v79 >> 1;
          v83 = &v80[2 * (v79 >> 1)];
          v85 = *v83;
          v84 = v83 + 2;
          v79 += ~(v79 >> 1);
          if (v85 < v78)
            v80 = v84;
          else
            v79 = v82;
        }
        while (v79);
        if (v80 != v81 && *v80 == v78)
          v86 = v80[1];
        else
          v86 = 0;
      }
      else
      {
        v86 = 0;
      }
      v87 = mlir::DenseElementsAttr::getFromRawBuffer(v43, v86, v106, 8 * v107, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v96, v76, v87);
      v94[0] = mlir::ValueRange::dereference_iterator(v112, 0);
      v91 = (char *)mlir::OpBuilder::create<mlir::anec::MaxPool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *((_QWORD *)v93 + 3), (uint64_t)v94, (uint64_t)&v96)- 16;
      mlir::ConversionPatternRewriter::replaceOp(a4, v93, (uint64_t)&v91, 1);
      if (v96 != v98)
        free(v96);
      v55 = 1;
    }
LABEL_89:
    if (v100 != v102)
      free(v100);
    if (v103 != v105)
      free(v103);
    if (v106 != v108)
      free(v106);
    if (v109 != (void **)v111)
      free(v109);
    return v55;
  }
  v89 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMaxOp,mlir::mps::ReductionMaxOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMaxOp,mlir::mps::ReductionMaxOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  mlir::Diagnostic *v11;
  mlir::Diagnostic *v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v3 = mlir::Diagnostic::operator<<(a2, "MaxPool/AveragePool for axes:");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = **a1;
  v17 = 2;
  v18 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v14 = v7 + 1;
    v15 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v16[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  v11 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(v3, "reduced from Op ");
  v12 = mlir::Diagnostic::operator<<(v11, (mlir::Operation *)*a1[1]);
  return mlir::Diagnostic::operator<<((uint64_t)v12, "is not supported for A13 and below\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMaxOp,mlir::anec::ReduceMax,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMaxOp,mlir::mps::ReductionMaxOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Axis value is incorrect for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Shape;
  uint64_t IntegerType;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t StringAttr;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  void *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  mlir::MLIRContext *v88;
  uint64_t UnitAttr;
  mlir::Operation ***v91;
  uint64_t v92;
  char *v93;
  _QWORD v94[2];
  unsigned int *v95;
  _QWORD v96[4];
  __int16 v97;
  void *v98;
  uint64_t v99;
  _WORD v100[32];
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[48];
  void *v105;
  uint64_t v106;
  _BYTE v107[48];
  _OWORD *v108;
  uint64_t v109;
  _OWORD v110[3];
  void **v111;
  uint64_t v112;
  _BYTE v113[48];
  uint64_t v114[4];

  v114[2] = *MEMORY[0x24BDAC8D0];
  v95 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 56);
  v114[0] = *(_QWORD *)(a3 + 48);
  v114[1] = v6;
  if (!v8)
  {
    v98 = "failed to convert operand axes";
    v100[8] = 259;
    v111 = &v98;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMeanOp &>(mlir::mps::ReductionMeanOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v111);
      return 0;
    }
    return v55;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v95))
  {
    v57 = v95;
    v98 = &v95;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55)
    {
      if (mlir::RewriterBase::Listener::classof(v55))
      return 0;
    }
    return v55;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v111 = (void **)v113;
  v112 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v111, 1);
  v108 = v110;
  memset(v110, 0, sizeof(v110));
  v109 = 0x600000006;
  v105 = v107;
  memset_pattern16(v107, &unk_207A80400, 0x18uLL);
  v106 = 0x600000003;
  v102 = v104;
  memset_pattern16(v104, &unk_207A80400, 0x18uLL);
  v103 = 0x600000003;
  v94[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v94[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v94);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v112)
    {
      v35 = IndexFromDim;
      v36 = (uint64_t *)v111;
      v37 = 8 * v112;
      while (1)
      {
        v38 = *v36;
        v96[0] = v38;
        if (v38 == v35)
          break;
        if (v38 <= 1)
        {
          v61 = v95;
          v98 = &v95;
          v55 = *(_QWORD *)(a4 + 16);
          if (!v55)
            goto LABEL_89;
          if (mlir::RewriterBase::Listener::classof(v55))
          {
            v59 = *((_QWORD *)v61 + 3);
            goto LABEL_54;
          }
          goto LABEL_56;
        }
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v94);
        *((_QWORD *)v102 + v38 - 2) = *(_QWORD *)(Shape + 8 * v38);
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_29;
      }
      v58 = v95;
      v98 = v96;
      v99 = (uint64_t)&v95;
      v55 = *(_QWORD *)(a4 + 16);
      if (!v55)
        goto LABEL_89;
      if (mlir::RewriterBase::Listener::classof(v55))
      {
        v59 = *((_QWORD *)v58 + 3);
LABEL_54:
        v55 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void **))(*(_QWORD *)v55 + 64))(v55, v59, v60, &v98);
        goto LABEL_89;
      }
LABEL_56:
      v55 = 0;
    }
    else
    {
LABEL_29:
      v98 = v100;
      v99 = 0x400000000;
      v101 = 4;
      v96[0] = 3;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v41 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v96, 1, IntegerType, 0);
      v96[0] = 6;
      v42 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v43 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v96, 1, v42, 0);
      v96[0] = "ksize";
      v97 = 259;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v96);
      if (v41)
      {
        v45 = *v41;
        v46 = mlir::TypeID::get<mlir::ShapedType>();
        v47 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD **)(v45 + 8);
          v49 = &v48[2 * v47];
          do
          {
            v50 = v47 >> 1;
            v51 = &v48[2 * (v47 >> 1)];
            v53 = *v51;
            v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46)
              v48 = v52;
            else
              v47 = v50;
          }
          while (v47);
          if (v48 == v49)
          {
            v54 = 0;
          }
          else if (*v48 == v46)
          {
            v54 = v48[1];
          }
          else
          {
            v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
      v62 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v54, v102, 8 * v103, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v98, StringAttr, v62);
      v96[0] = "stride";
      v97 = 259;
      v63 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v96);
      if (v41)
      {
        v64 = v43;
        v65 = *v41;
        v66 = mlir::TypeID::get<mlir::ShapedType>();
        v67 = *(unsigned int *)(v65 + 16);
        if ((_DWORD)v67)
        {
          v68 = *(_QWORD **)(v65 + 8);
          v69 = &v68[2 * v67];
          do
          {
            v70 = v67 >> 1;
            v71 = &v68[2 * (v67 >> 1)];
            v73 = *v71;
            v72 = v71 + 2;
            v67 += ~(v67 >> 1);
            if (v73 < v66)
              v68 = v72;
            else
              v67 = v70;
          }
          while (v67);
          v43 = v64;
          if (v68 == v69)
          {
            v74 = 0;
          }
          else if (*v68 == v66)
          {
            v74 = v68[1];
          }
          else
          {
            v74 = 0;
          }
        }
        else
        {
          v74 = 0;
          v43 = v64;
        }
      }
      else
      {
        v74 = 0;
      }
      v75 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v74, v105, 8 * v106, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v98, v63, v75);
      v96[0] = "padding";
      v97 = 259;
      v76 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v96);
      if (v43
        && (v77 = *v43, v78 = mlir::TypeID::get<mlir::ShapedType>(), v79 = *(unsigned int *)(v77 + 16), (_DWORD)v79))
      {
        v80 = *(_QWORD **)(v77 + 8);
        v81 = &v80[2 * v79];
        do
        {
          v82 = v79 >> 1;
          v83 = &v80[2 * (v79 >> 1)];
          v85 = *v83;
          v84 = v83 + 2;
          v79 += ~(v79 >> 1);
          if (v85 < v78)
            v80 = v84;
          else
            v79 = v82;
        }
        while (v79);
        if (v80 != v81 && *v80 == v78)
          v86 = v80[1];
        else
          v86 = 0;
      }
      else
      {
        v86 = 0;
      }
      v87 = mlir::DenseElementsAttr::getFromRawBuffer(v43, v86, v108, 8 * v109, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v98, v76, v87);
      v96[0] = mlir::ValueRange::dereference_iterator(v114, 0);
      UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)(a4 + 8), v88);
      mlir::NamedAttrList::set((uint64_t)&v98, (uint64_t)"inc_pad", 7, UnitAttr);
      v93 = (char *)mlir::OpBuilder::create<mlir::anec::AveragePool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), *((_QWORD *)v95 + 3), (uint64_t)v96, (uint64_t)&v98)- 16;
      mlir::ConversionPatternRewriter::replaceOp(a4, v95, (uint64_t)&v93, 1);
      if (v98 != v100)
        free(v98);
      v55 = 1;
    }
LABEL_89:
    if (v102 != v104)
      free(v102);
    if (v105 != v107)
      free(v105);
    if (v108 != v110)
      free(v108);
    if (v111 != (void **)v113)
      free(v111);
    return v55;
  }
  v91 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMeanOp,mlir::mps::ReductionMeanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMeanOp,mlir::mps::ReductionMeanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  mlir::Diagnostic *v11;
  mlir::Diagnostic *v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v3 = mlir::Diagnostic::operator<<(a2, "MaxPool/AveragePool for axes:");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = **a1;
  v17 = 2;
  v18 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v14 = v7 + 1;
    v15 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v16[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  v11 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(v3, "reduced from Op ");
  v12 = mlir::Diagnostic::operator<<(v11, (mlir::Operation *)*a1[1]);
  return mlir::Diagnostic::operator<<((uint64_t)v12, "is not supported for A13 and below\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMeanOp,mlir::anec::ReduceAvg,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMeanOp,mlir::mps::ReductionMeanOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Axis value is incorrect for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t Shape;
  uint64_t IntegerType;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t StringAttr;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t OperandRange;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  mlir::MLIRContext *v109;
  uint64_t v110;
  unsigned int *v112;
  uint64_t v113;
  mlir::Operation ***v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  _QWORD v118[2];
  unsigned int *v119;
  uint64_t v120;
  uint64_t GOC;
  uint64_t *v122[4];
  __int16 v123;
  void *v124;
  uint64_t v125;
  _WORD v126[32];
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _BYTE v130[48];
  void *v131;
  uint64_t v132;
  _BYTE v133[48];
  _OWORD *v134;
  uint64_t v135;
  _OWORD v136[3];
  void **v137;
  uint64_t v138;
  _BYTE v139[48];
  uint64_t v140[4];

  v140[2] = *MEMORY[0x24BDAC8D0];
  v119 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a3 + 64);
  v140[0] = *(_QWORD *)(a3 + 56);
  v140[1] = v6;
  if (!v8)
  {
    v124 = "failed to convert operand axes";
    v126[8] = 259;
    v137 = &v124;
    v55 = *(_QWORD *)(a4 + 16);
    if (v55 && mlir::RewriterBase::Listener::classof(v55))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v55 + 64))(v55, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionMinOp &>(mlir::mps::ReductionMinOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v137);
    return 0;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v119))
  {
    v57 = v119;
    v124 = &v119;
    v58 = *(_QWORD *)(a4 + 16);
    if (v58 && mlir::RewriterBase::Listener::classof(v58))
    return 0;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v119) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v118[0] = v10;
  v118[1] = v20;
  v137 = (void **)v139;
  v138 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v137, 1);
  v134 = v136;
  memset(v136, 0, sizeof(v136));
  v135 = 0x600000006;
  v131 = v133;
  memset_pattern16(v133, &unk_207A80400, 0x18uLL);
  v132 = 0x600000003;
  v128 = v130;
  memset_pattern16(v130, &unk_207A80400, 0x18uLL);
  v129 = 0x600000003;
  v117[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v117[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v117);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v138)
    {
      v35 = (uint64_t *)IndexFromDim;
      v36 = (uint64_t **)v137;
      v37 = 8 * v138;
      while (1)
      {
        v38 = *v36;
        v122[0] = v38;
        if (v38 == v35)
          break;
        if ((uint64_t)v38 <= 1)
        {
          v64 = v119;
          v124 = &v119;
          v61 = *(_QWORD *)(a4 + 16);
          if (v61 && mlir::RewriterBase::Listener::classof(v61))
          {
            v62 = *((_QWORD *)v64 + 3);
            goto LABEL_54;
          }
          goto LABEL_55;
        }
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v117);
        *((_QWORD *)v128 + (_QWORD)v38 - 2) = *(_QWORD *)(Shape + 8 * v38);
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_29;
      }
      v60 = v119;
      v124 = v122;
      v125 = (uint64_t)&v119;
      v61 = *(_QWORD *)(a4 + 16);
      if (v61 && mlir::RewriterBase::Listener::classof(v61))
      {
        v62 = *((_QWORD *)v60 + 3);
LABEL_54:
        v59 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void **))(*(_QWORD *)v61 + 64))(v61, v62, v63, &v124);
        goto LABEL_96;
      }
LABEL_55:
      v59 = 0;
    }
    else
    {
LABEL_29:
      v124 = v126;
      v125 = 0x400000000;
      v127 = 4;
      v122[0] = (uint64_t *)3;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v41 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v122, 1, IntegerType, 0);
      v122[0] = (uint64_t *)6;
      v42 = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
      v43 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v122, 1, v42, 0);
      v122[0] = (uint64_t *)"ksize";
      v123 = 259;
      StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v122);
      if (v41)
      {
        v45 = *v41;
        v46 = mlir::TypeID::get<mlir::ShapedType>();
        v47 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v47)
        {
          v48 = *(_QWORD **)(v45 + 8);
          v49 = &v48[2 * v47];
          do
          {
            v50 = v47 >> 1;
            v51 = &v48[2 * (v47 >> 1)];
            v53 = *v51;
            v52 = v51 + 2;
            v47 += ~(v47 >> 1);
            if (v53 < v46)
              v48 = v52;
            else
              v47 = v50;
          }
          while (v47);
          if (v48 == v49)
          {
            v54 = 0;
          }
          else if (*v48 == v46)
          {
            v54 = v48[1];
          }
          else
          {
            v54 = 0;
          }
        }
        else
        {
          v54 = 0;
        }
      }
      else
      {
        v54 = 0;
      }
      v65 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v54, v128, 8 * v129, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v124, StringAttr, v65);
      v122[0] = (uint64_t *)"stride";
      v123 = 259;
      v66 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v122);
      if (!v41)
        goto LABEL_70;
      v67 = *v41;
      v68 = mlir::TypeID::get<mlir::ShapedType>();
      v69 = *(unsigned int *)(v67 + 16);
      if (!(_DWORD)v69)
        goto LABEL_70;
      v70 = *(_QWORD **)(v67 + 8);
      v71 = &v70[2 * v69];
      do
      {
        v72 = v69 >> 1;
        v73 = &v70[2 * (v69 >> 1)];
        v75 = *v73;
        v74 = v73 + 2;
        v69 += ~(v69 >> 1);
        if (v75 < v68)
          v70 = v74;
        else
          v69 = v72;
      }
      while (v69);
      if (v70 != v71 && *v70 == v68)
        v76 = v70[1];
      else
LABEL_70:
        v76 = 0;
      v77 = mlir::DenseElementsAttr::getFromRawBuffer(v41, v76, v131, 8 * v132, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v124, v66, v77);
      v122[0] = (uint64_t *)"padding";
      v123 = 259;
      v78 = mlir::Builder::getStringAttr((mlir::StringAttr **)(a4 + 8), (mlir::MLIRContext *)v122);
      if (!v43)
        goto LABEL_80;
      v79 = *v43;
      v80 = mlir::TypeID::get<mlir::ShapedType>();
      v81 = *(unsigned int *)(v79 + 16);
      if (!(_DWORD)v81)
        goto LABEL_80;
      v82 = *(_QWORD **)(v79 + 8);
      v83 = &v82[2 * v81];
      do
      {
        v84 = v81 >> 1;
        v85 = &v82[2 * (v81 >> 1)];
        v87 = *v85;
        v86 = v85 + 2;
        v81 += ~(v81 >> 1);
        if (v87 < v80)
          v82 = v86;
        else
          v81 = v84;
      }
      while (v81);
      if (v82 != v83 && *v82 == v80)
        v88 = v82[1];
      else
LABEL_80:
        v88 = 0;
      v89 = mlir::DenseElementsAttr::getFromRawBuffer(v43, v88, v134, 8 * v135, 8, 1, 0);
      mlir::NamedAttrList::set((uint64_t)&v124, v78, v89);
      v90 = mlir::ValueRange::dereference_iterator(v140, 0);
      v122[0] = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
      if (mlir::Type::isF16((mlir::Type *)v122)
        || (GOC = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118),
            mlir::Type::isF32((mlir::Type *)&GOC)))
      {
        GOC = 1;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        v92 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&GOC, 1, OperandRange, 0);
        v93 = (uint64_t)v92;
        if (!v92)
          goto LABEL_92;
        v94 = *v92;
        v95 = mlir::TypeID::get<mlir::ShapedType>();
        v96 = *(unsigned int *)(v94 + 16);
        if (!(_DWORD)v96)
          goto LABEL_92;
        v97 = *(_QWORD **)(v94 + 8);
        v98 = &v97[2 * v96];
        do
        {
          v99 = v96 >> 1;
          v100 = &v97[2 * (v96 >> 1)];
          v102 = *v100;
          v101 = v100 + 2;
          v96 += ~(v96 >> 1);
          if (v102 < v95)
            v97 = v101;
          else
            v96 = v99;
        }
        while (v96);
        if (v97 != v98 && *v97 == v95)
          v103 = v97[1];
        else
LABEL_92:
          v103 = 0;
        v104 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        v120 = (uint64_t)mlir::FloatAttr::get(v104, -1.0);
        v59 = 1;
        v122[0] = (uint64_t *)mlir::DenseElementsAttr::get(v93, v103, &v120, 1uLL);
        v105 = *((_QWORD *)v119 + 3);
        v120 = 1;
        v106 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v118);
        GOC = mlir::MemRefType::get(&v120, (mlir::AffineMap *)1, v106, 0, 0, 0);
        v107 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>((mlir::OpBuilder *)(a4 + 8), v105, &GOC, v122)- 16;
        v108 = *((_QWORD *)v119 + 3);
        v116 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&GOC);
        v120 = (uint64_t)mlir::OpBuilder::create<mlir::anec::MaxPool,mlir::Value &,mlir::NamedAttrList &>((mlir::UnknownLoc **)(a4 + 8), v108, (uint64_t)&v116, (uint64_t)&v124);
        v109 = (mlir::MLIRContext *)*((_QWORD *)v119 + 3);
        v110 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v120);
        mlir::ConversionPatternRewriter::replaceOp(a4, v119, (uint64_t)v122, 1);
      }
      else
      {
        v112 = v119;
        v122[0] = v118;
        v113 = *(_QWORD *)(a4 + 16);
        if (v113)
        {
          if (mlir::RewriterBase::Listener::classof(v113))
          else
            v59 = 0;
        }
        else
        {
          v59 = 0;
        }
      }
      if (v124 != v126)
        free(v124);
    }
LABEL_96:
    if (v128 != v130)
      free(v128);
    if (v131 != v133)
      free(v131);
    if (v134 != v136)
      free(v134);
    if (v137 != (void **)v139)
      free(v137);
    return v59;
  }
  v114 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  __int128 v10;
  mlir::Diagnostic *v11;
  mlir::Diagnostic *v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v3 = mlir::Diagnostic::operator<<(a2, "MaxPool/AveragePool for axes:");
  v4 = v3 + 16;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = **a1;
  v17 = 2;
  v18 = v6;
  v7 = *(unsigned int *)(v3 + 24);
  v8 = &v17;
  if (v7 >= *(_DWORD *)(v3 + 28))
  {
    v14 = v7 + 1;
    v15 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = (int *)&v16[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(v3 + 32), v14, 24);
      v5 = *(_QWORD *)(v3 + 16);
      v8 = &v17;
    }
  }
  v9 = v5 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v8;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  v11 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(v3, "reduced from Op ");
  v12 = mlir::Diagnostic::operator<<(v11, (mlir::Operation *)*a1[1]);
  return mlir::Diagnostic::operator<<((uint64_t)v12, "is not supported for A13 and below\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Axis value is incorrect for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionMinOp,mlir::anec::ReduceMin,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionMinOp,mlir::mps::ReductionMinOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(mlir::MemoryMapperInterface **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t OperandRange;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  _BYTE *v14;
  _BYTE v15[24];

  v3 = mlir::Diagnostic::operator<<(a2, "ReduceMin for non fp type: ");
  OperandRange = mlir::MemoryMapperInterface::getOperandRange(*a1);
  v5 = v15;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v15, OperandRange);
  v6 = v3 + 16;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(unsigned int *)(v3 + 24);
  if (v8 >= *(_DWORD *)(v3 + 28))
  {
    v12 = v8 + 1;
    v13 = v7 + 24 * v8 > (unint64_t)v15;
    if (v7 <= (unint64_t)v15 && v13)
    {
      v14 = &v15[-v7];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v3 + 32), v12, 24);
      v7 = *(_QWORD *)(v3 + 16);
      v5 = &v14[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v3 + 32), v12, 24);
      v7 = *(_QWORD *)(v3 + 16);
      v5 = v15;
    }
  }
  v9 = v7 + 24 * *(unsigned int *)(v3 + 24);
  v10 = *(_OWORD *)v5;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v9 = v10;
  ++*(_DWORD *)(v3 + 24);
  return mlir::Diagnostic::operator<<(v3, " is not supported for A13 and below\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReductionA14Minus<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)0>::~ConvertReductionA14Minus(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t IndexFromDim;
  char v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t *Value;
  uint64_t v38;
  llvm::APFloatBase *NumElements;
  llvm::APFloatBase *v40;
  llvm::APFloatBase *v41;
  uint64_t v42;
  mlir::Operation *v44;
  mlir::Operation *v45;
  mlir::MLIRContext *v46;
  void *v47;
  uint64_t v48;
  uint64_t F16Type;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  mlir::Operation ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  mlir::Operation *v69;
  __n128 *ElementsAttr;
  _QWORD v71[3];
  void *v72;
  uint64_t v73;
  _WORD v74[256];
  void *v75;
  uint64_t v76;
  uint64_t v77[2];
  int64x2_t v78;
  void *v79;
  uint64_t v80;
  _BYTE v81[48];
  void *v82;
  uint64_t v83;
  _BYTE v84[48];
  _BYTE *v85;
  uint64_t v86;
  _BYTE v87[48];
  _QWORD *v88;
  uint64_t v89;
  _BYTE v90[48];
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v69 = a2;
  v6 = *(_QWORD *)(a3 + 56);
  v91 = *(_QWORD *)(a3 + 48);
  v92 = v6;
  if (!v8)
  {
    v72 = "failed to convert operand axes";
    v74[8] = 259;
    v75 = &v72;
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      if (mlir::RewriterBase::Listener::classof(v42))
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v42 + 64))(v42, *((_QWORD *)a2 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReductionSumOp &>(mlir::mps::ReductionSumOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v75);
      return 0;
    }
    return v42;
  }
  v9 = (uint64_t *)v7;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v69))
  {
    v44 = v69;
    v72 = &v69;
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      if (mlir::RewriterBase::Listener::classof(v42))
      return 0;
    }
    return v42;
  }
  v10 = (uint64_t *)(*(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v69) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_12;
  v11 = *v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_12;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_12:
    v20 = 0;
  v88 = v90;
  v89 = 0x600000000;
  if (!v9)
    goto LABEL_22;
  v21 = *v9;
  v22 = mlir::TypeID::get<mlir::ElementsAttr>();
  v23 = *(unsigned int *)(v21 + 16);
  if (!(_DWORD)v23)
    goto LABEL_22;
  v24 = *(_QWORD **)(v21 + 8);
  v25 = &v24[2 * v23];
  do
  {
    v26 = v23 >> 1;
    v27 = &v24[2 * (v23 >> 1)];
    v29 = *v27;
    v28 = v27 + 2;
    v23 += ~(v23 >> 1);
    if (v29 < v22)
      v24 = v28;
    else
      v23 = v26;
  }
  while (v23);
  if (v24 != v25 && *v24 == v22)
    v30 = v24[1];
  else
LABEL_22:
    v30 = 0;
  mlir::getIntValues<long long>((uint64_t)v9, v30, (uint64_t)&v88, 1);
  v85 = v87;
  memset(v87, 0, sizeof(v87));
  v86 = 0x600000006;
  v82 = v84;
  memset_pattern16(v84, &unk_207A80400, 0x18uLL);
  v83 = 0x600000003;
  v79 = v81;
  memset_pattern16(v81, &unk_207A80400, 0x18uLL);
  v80 = 0x600000003;
  v68[0] = mlir::getRankPromotionTypeForANE((uint64_t)v10, v20);
  v68[1] = v31;
  mlir::ShapedType::getShape((mlir::ShapedType *)v68);
  IndexFromDim = mlir::anec::getIndexFromDim(1, v32);
  if (v34)
  {
    if ((_DWORD)v89 == 1 && *v88 == IndexFromDim)
    {
      v66 = *((_QWORD *)v69 + 3);
      v35 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v68) + 8 * IndexFromDim);
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68);
      v75 = v77;
      v77[0] = 1;
      v77[1] = v35;
      v78 = vdupq_n_s64(1uLL);
      v76 = 0x1000000004;
      v67 = mlir::MemRefType::get(v77, (mlir::AffineMap *)4, OperandRange, 0, 0, 0);
      Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v67);
      NumElements = (llvm::APFloatBase *)mlir::ShapedType::getNumElements(Value, v38);
      v40 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEhalf(NumElements);
      v41 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v40);
      if (v41 == v40)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v71, (uint64_t)v40, 1);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v71, (uint64_t)v40, (llvm::APInt *)1);
      v72 = v74;
      v73 = 0x1000000000;
      llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&v72, (unint64_t)NumElements, (uint64_t)&ElementsAttr);
      if (v41 == (llvm::APFloatBase *)v71[0])
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v71);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v71);
      v47 = v75;
      v48 = v76;
      F16Type = mlir::Builder::getF16Type((mlir::Float16Type **)(a4 + 8), v46);
      v50 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v47, v48, F16Type, 0);
      ElementsAttr = mlir::createElementsAttr(v50, (uint64_t)v72, v73);
      v71[0] = v51;
      mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a4 + 8), v66, &v67, (_QWORD **)&ElementsAttr);
      v52 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v69) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v52)
        goto LABEL_53;
      v53 = *v52;
      v54 = mlir::TypeID::get<mlir::ShapedType>();
      v55 = *(unsigned int *)(v53 + 16);
      if (!(_DWORD)v55)
        goto LABEL_53;
      v56 = *(_QWORD **)(v53 + 8);
      v57 = &v56[2 * v55];
      do
      {
        v58 = v55 >> 1;
        v59 = &v56[2 * (v55 >> 1)];
        v61 = *v59;
        v60 = v59 + 2;
        v55 += ~(v55 >> 1);
        if (v61 < v54)
          v56 = v60;
        else
          v55 = v58;
      }
      while (v55);
      if (v56 != v57 && *v56 == v54)
        v62 = v56[1];
      else
LABEL_53:
        v62 = 0;
    }
    v45 = v69;
    v72 = &v69;
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      if (mlir::RewriterBase::Listener::classof(v42))
      else
        v42 = 0;
    }
    if (v79 != v81)
      free(v79);
    if (v82 != v84)
      free(v82);
    if (v85 != v87)
      free(v85);
    if (v88 != (_QWORD *)v90)
      free(v88);
    return v42;
  }
  v64 = (mlir::Operation ***)std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionSumOp,mlir::mps::ReductionSumOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "Collapsing dimension for Op");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, "to MaxPool, AveragePool or Conv for A13 and below on ane is not supported \n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertReduction<mlir::mps::ReductionSumOp,mlir::anec::ReduceSum,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReductionSumOp,mlir::mps::ReductionSumOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(mlir::Operation ***a1, uint64_t a2)
{
  mlir::Diagnostic *v3;
  mlir::Diagnostic *v4;

  v3 = (mlir::Diagnostic *)mlir::Diagnostic::operator<<(a2, "ReduceSum for axes other than channel axis: ");
  v4 = mlir::Diagnostic::operator<<(v3, **a1);
  return mlir::Diagnostic::operator<<((uint64_t)v4, " is not supported for A13 and below\n");
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)0>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)0>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReshapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReshapeOp>::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReshapeOpGenericAdaptorBase::ReshapeOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ReshapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[48];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ReshapeOpGenericAdaptorBase::ReshapeOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ReshapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD *v31;
  _QWORD v32[4];
  __int16 v33;
  _OWORD v34[4];
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 48);
  v9 = *(_QWORD *)(a3 + 56);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v28;
      v29 = *(_OWORD *)(a3 + 48);
      v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v29;
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v34, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v32[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v33 = 259;
    v30[0] = v32;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v30);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v13;
    if (v30[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v33 = 259;
  v31 = v32;
  v32[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v31);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t RankPromotionTypeForANE;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t Context;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t IntegerType;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  ZinIrHalH13g *v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v134[2];
  __int128 v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143[2];
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  _QWORD v147[4];
  __int128 v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v138 = a2;
  v144 = *(_OWORD *)(a3 + 48);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v144, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v136 = v5;
  v137 = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v138) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  *(_QWORD *)&v146 = v16;
  *((_QWORD *)&v146 + 1) = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v146);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v136);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  *(_QWORD *)&v135 = mlir::getRankPromotionTypeForANE(v32, v42);
  *((_QWORD *)&v135 + 1) = v43;
  v134[0] = mlir::getRankPromotionTypeForANE((uint64_t)v136, v137);
  v134[1] = v44;
  v45 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v135);
  v47 = v46;
  v48 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v134);
  if (v47 == v49 && !memcmp(v45, v48, 8 * v47))
  {
    v128 = (unsigned int *)v138;
    *(_QWORD *)&v146 = mlir::ValueRange::dereference_iterator(&v144, 0);
    v79 = 1;
    mlir::ValueRange::ValueRange(v143, (uint64_t)&v146, 1uLL);
    mlir::ConversionPatternRewriter::replaceOp(a4, v128, v143[0], v143[1]);
    return v79;
  }
  *(_QWORD *)&v148 = v138;
  v146 = v144;
  v50 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v146, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v50)
    goto LABEL_42;
  v51 = *v50;
  v52 = mlir::TypeID::get<mlir::ShapedType>();
  v53 = *(unsigned int *)(v51 + 16);
  if (!(_DWORD)v53)
    goto LABEL_42;
  v54 = *(_QWORD **)(v51 + 8);
  v55 = &v54[2 * v53];
  do
  {
    v56 = v53 >> 1;
    v57 = &v54[2 * (v53 >> 1)];
    v59 = *v57;
    v58 = v57 + 2;
    v53 += ~(v53 >> 1);
    if (v59 < v52)
      v54 = v58;
    else
      v53 = v56;
  }
  while (v53);
  if (v54 != v55 && *v54 == v52)
    v60 = v54[1];
  else
LABEL_42:
    v60 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v50, v60);
  v63 = v62;
  v64 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v148) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v64)
    goto LABEL_52;
  v65 = *v64;
  v66 = mlir::TypeID::get<mlir::ShapedType>();
  v67 = *(unsigned int *)(v65 + 16);
  if (!(_DWORD)v67)
    goto LABEL_52;
  v68 = *(_QWORD **)(v65 + 8);
  v69 = &v68[2 * v67];
  do
  {
    v70 = v67 >> 1;
    v71 = &v68[2 * (v67 >> 1)];
    v73 = *v71;
    v72 = v71 + 2;
    v67 += ~(v67 >> 1);
    if (v73 < v66)
      v68 = v72;
    else
      v67 = v70;
  }
  while (v67);
  if (v68 != v69 && *v68 == v66)
    v74 = v68[1];
  else
LABEL_52:
    v74 = 0;
  v75 = mlir::getRankPromotionTypeForANE((uint64_t)v64, v74);
  if (mlir::anec::verifyCompatibilityWithFlatten(RankPromotionTypeForANE, v63, v75, v76))
  {
    v77 = *(_QWORD *)(v148 + 24);
    v142 = mlir::ValueRange::dereference_iterator(&v146, 0);
    Context = mlir::Attribute::getContext((mlir::Attribute *)(v148 + 24));
    v140 = mlir::anec::BoxCoordinateModeAttr::get(Context, 1);
    *(_QWORD *)&v141 = (char *)mlir::OpBuilder::create<mlir::anec::Flatten,mlir::Value,mlir::anec::FlattenModeAttr>((mlir::UnknownLoc **)(a4 + 8), v77, &v142, &v140)- 16;
    mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)v148, (uint64_t)&v141, 1);
    return 1;
  }
  v80 = *(_QWORD *)(a4 + 16);
  if (v80)
  {
    v81 = v148;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      {
        return 1;
      }
    }
  }
  v142 = v138;
  v148 = v144;
  v141 = v135;
  v82 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v148, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v82)
    goto LABEL_67;
  v83 = *v82;
  v84 = mlir::TypeID::get<mlir::ShapedType>();
  v85 = *(unsigned int *)(v83 + 16);
  if (!(_DWORD)v85)
    goto LABEL_67;
  v86 = *(_QWORD **)(v83 + 8);
  v87 = &v86[2 * v85];
  do
  {
    v88 = v85 >> 1;
    v89 = &v86[2 * (v85 >> 1)];
    v91 = *v89;
    v90 = v89 + 2;
    v85 += ~(v85 >> 1);
    if (v91 < v84)
      v86 = v90;
    else
      v85 = v88;
  }
  while (v85);
  if (v86 != v87 && *v86 == v84)
    v92 = v86[1];
  else
LABEL_67:
    v92 = 0;
  v93 = mlir::getRankPromotionTypeForANE((uint64_t)v82, v92);
  v95 = v94;
  v96 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v142) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v96)
    goto LABEL_77;
  v97 = *v96;
  v98 = mlir::TypeID::get<mlir::ShapedType>();
  v99 = *(unsigned int *)(v97 + 16);
  if (!(_DWORD)v99)
    goto LABEL_77;
  v100 = *(_QWORD **)(v97 + 8);
  v101 = &v100[2 * v99];
  do
  {
    v102 = v99 >> 1;
    v103 = &v100[2 * (v99 >> 1)];
    v105 = *v103;
    v104 = v103 + 2;
    v99 += ~(v99 >> 1);
    if (v105 < v98)
      v100 = v104;
    else
      v99 = v102;
  }
  while (v99);
  if (v100 != v101 && *v100 == v98)
    v106 = v100[1];
  else
LABEL_77:
    v106 = 0;
  v107 = mlir::getRankPromotionTypeForANE((uint64_t)v96, v106);
  if (mlir::anec::verifyCompatibilityWithUnflatten(v93, v95, v107, v108))
  {
    v109 = mlir::Attribute::getContext((mlir::Attribute *)(v142 + 24));
    v140 = mlir::anec::BoxCoordinateModeAttr::get(v109, 1);
    v110 = mlir::ShapedType::getShape((mlir::ShapedType *)&v141);
    v112 = v110 + 8 * v111;
    *(_QWORD *)&v146 = v147;
    v147[0] = *(_QWORD *)(v112 - 24);
    v147[1] = *(_QWORD *)(v112 - 16);
    v147[2] = *(_QWORD *)(v112 - 8);
    *((_QWORD *)&v146 + 1) = 0x300000003;
    v145 = 3;
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
    v114 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v145, 1, IntegerType, 0);
    v115 = v114;
    if (!v114)
      goto LABEL_88;
    v116 = *v114;
    v117 = mlir::TypeID::get<mlir::ShapedType>();
    v118 = *(unsigned int *)(v116 + 16);
    if (!(_DWORD)v118)
      goto LABEL_88;
    v119 = *(_QWORD **)(v116 + 8);
    v120 = &v119[2 * v118];
    do
    {
      v121 = v118 >> 1;
      v122 = &v119[2 * (v118 >> 1)];
      v124 = *v122;
      v123 = v122 + 2;
      v118 += ~(v118 >> 1);
      if (v124 < v117)
        v119 = v123;
      else
        v118 = v121;
    }
    while (v118);
    if (v119 != v120 && *v119 == v117)
      v125 = v119[1];
    else
LABEL_88:
      v125 = 0;
    v145 = mlir::DenseElementsAttr::getFromRawBuffer(v115, v125, v146, 8 * DWORD2(v146), 8, 1, 0);
    v126 = v142;
    v139 = mlir::ValueRange::dereference_iterator(&v148, 0);
    v127 = mlir::OpBuilder::create<mlir::anec::Unflatten,mlir::Value,mlir::anec::FlattenModeAttr &,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), *(_QWORD *)(v126 + 24), &v139, &v140, &v145);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v126, v127);
    if ((_QWORD *)v146 != v147)
      free((void *)v146);
    return 1;
  }
  v129 = *(_QWORD *)(a4 + 16);
  if (v129)
  {
    v130 = v142;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      {
        return 1;
      }
    }
  }
  v131 = *(_QWORD *)(a4 + 16);
  if (v131 && (v132 = v138, mlir::RewriterBase::Listener::classof(v131)))
  else
    return 0;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReshapeOp &>(mlir::mps::ReshapeOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Flatten,mlir::Value,mlir::anec::FlattenModeAttr>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.flatten", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"anec.flatten";
    v17[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Flatten::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Flatten,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)0>::tryConvertToFlatten(mlir::mps::ReshapeOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: Reshape target shape must be NxCx1x1 to be lowered as Flatten on ANEs.\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)0>::tryConvertToUnflatten(mlir::mps::ReshapeOp,mlir::ValueRange,mlir::ShapedType,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: Reshape input shape must be NxCx1x1 to be lowered as Unflatten on ANEs.");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Unflatten,mlir::Value,mlir::anec::FlattenModeAttr &,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.unflatten", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"anec.unflatten";
    v19[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::Unflatten::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Unflatten,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ReshapeOp,mlir::mps::ReshapeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: op couldn't be folded or converted to flatten on A11/A12.");
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)1>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)1>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t RankPromotionTypeForANE;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t Context;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t IntegerType;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  ZinIrHalH13g *v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v134[2];
  __int128 v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143[2];
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  _QWORD v147[4];
  __int128 v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v138 = a2;
  v144 = *(_OWORD *)(a3 + 48);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v144, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v136 = v5;
  v137 = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v138) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  *(_QWORD *)&v146 = v16;
  *((_QWORD *)&v146 + 1) = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v146);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v136);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  *(_QWORD *)&v135 = mlir::getRankPromotionTypeForANE(v32, v42);
  *((_QWORD *)&v135 + 1) = v43;
  v134[0] = mlir::getRankPromotionTypeForANE((uint64_t)v136, v137);
  v134[1] = v44;
  v45 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v135);
  v47 = v46;
  v48 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v134);
  if (v47 == v49 && !memcmp(v45, v48, 8 * v47))
  {
    v128 = (unsigned int *)v138;
    *(_QWORD *)&v146 = mlir::ValueRange::dereference_iterator(&v144, 0);
    v79 = 1;
    mlir::ValueRange::ValueRange(v143, (uint64_t)&v146, 1uLL);
    mlir::ConversionPatternRewriter::replaceOp(a4, v128, v143[0], v143[1]);
    return v79;
  }
  *(_QWORD *)&v148 = v138;
  v146 = v144;
  v50 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v146, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v50)
    goto LABEL_42;
  v51 = *v50;
  v52 = mlir::TypeID::get<mlir::ShapedType>();
  v53 = *(unsigned int *)(v51 + 16);
  if (!(_DWORD)v53)
    goto LABEL_42;
  v54 = *(_QWORD **)(v51 + 8);
  v55 = &v54[2 * v53];
  do
  {
    v56 = v53 >> 1;
    v57 = &v54[2 * (v53 >> 1)];
    v59 = *v57;
    v58 = v57 + 2;
    v53 += ~(v53 >> 1);
    if (v59 < v52)
      v54 = v58;
    else
      v53 = v56;
  }
  while (v53);
  if (v54 != v55 && *v54 == v52)
    v60 = v54[1];
  else
LABEL_42:
    v60 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE((uint64_t)v50, v60);
  v63 = v62;
  v64 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v148) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v64)
    goto LABEL_52;
  v65 = *v64;
  v66 = mlir::TypeID::get<mlir::ShapedType>();
  v67 = *(unsigned int *)(v65 + 16);
  if (!(_DWORD)v67)
    goto LABEL_52;
  v68 = *(_QWORD **)(v65 + 8);
  v69 = &v68[2 * v67];
  do
  {
    v70 = v67 >> 1;
    v71 = &v68[2 * (v67 >> 1)];
    v73 = *v71;
    v72 = v71 + 2;
    v67 += ~(v67 >> 1);
    if (v73 < v66)
      v68 = v72;
    else
      v67 = v70;
  }
  while (v67);
  if (v68 != v69 && *v68 == v66)
    v74 = v68[1];
  else
LABEL_52:
    v74 = 0;
  v75 = mlir::getRankPromotionTypeForANE((uint64_t)v64, v74);
  if (mlir::anec::verifyCompatibilityWithFlatten(RankPromotionTypeForANE, v63, v75, v76))
  {
    v77 = *(_QWORD *)(v148 + 24);
    v142 = mlir::ValueRange::dereference_iterator(&v146, 0);
    Context = mlir::Attribute::getContext((mlir::Attribute *)(v148 + 24));
    v140 = mlir::anec::BoxCoordinateModeAttr::get(Context, 1);
    *(_QWORD *)&v141 = (char *)mlir::OpBuilder::create<mlir::anec::Flatten,mlir::Value,mlir::anec::FlattenModeAttr>((mlir::UnknownLoc **)(a4 + 8), v77, &v142, &v140)- 16;
    mlir::ConversionPatternRewriter::replaceOp(a4, (unsigned int *)v148, (uint64_t)&v141, 1);
    return 1;
  }
  v80 = *(_QWORD *)(a4 + 16);
  if (v80)
  {
    v81 = v148;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      {
        return 1;
      }
    }
  }
  v142 = v138;
  v148 = v144;
  v141 = v135;
  v82 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v148, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v82)
    goto LABEL_67;
  v83 = *v82;
  v84 = mlir::TypeID::get<mlir::ShapedType>();
  v85 = *(unsigned int *)(v83 + 16);
  if (!(_DWORD)v85)
    goto LABEL_67;
  v86 = *(_QWORD **)(v83 + 8);
  v87 = &v86[2 * v85];
  do
  {
    v88 = v85 >> 1;
    v89 = &v86[2 * (v85 >> 1)];
    v91 = *v89;
    v90 = v89 + 2;
    v85 += ~(v85 >> 1);
    if (v91 < v84)
      v86 = v90;
    else
      v85 = v88;
  }
  while (v85);
  if (v86 != v87 && *v86 == v84)
    v92 = v86[1];
  else
LABEL_67:
    v92 = 0;
  v93 = mlir::getRankPromotionTypeForANE((uint64_t)v82, v92);
  v95 = v94;
  v96 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v142) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v96)
    goto LABEL_77;
  v97 = *v96;
  v98 = mlir::TypeID::get<mlir::ShapedType>();
  v99 = *(unsigned int *)(v97 + 16);
  if (!(_DWORD)v99)
    goto LABEL_77;
  v100 = *(_QWORD **)(v97 + 8);
  v101 = &v100[2 * v99];
  do
  {
    v102 = v99 >> 1;
    v103 = &v100[2 * (v99 >> 1)];
    v105 = *v103;
    v104 = v103 + 2;
    v99 += ~(v99 >> 1);
    if (v105 < v98)
      v100 = v104;
    else
      v99 = v102;
  }
  while (v99);
  if (v100 != v101 && *v100 == v98)
    v106 = v100[1];
  else
LABEL_77:
    v106 = 0;
  v107 = mlir::getRankPromotionTypeForANE((uint64_t)v96, v106);
  if (mlir::anec::verifyCompatibilityWithUnflatten(v93, v95, v107, v108))
  {
    v109 = mlir::Attribute::getContext((mlir::Attribute *)(v142 + 24));
    v140 = mlir::anec::BoxCoordinateModeAttr::get(v109, 1);
    v110 = mlir::ShapedType::getShape((mlir::ShapedType *)&v141);
    v112 = v110 + 8 * v111;
    *(_QWORD *)&v146 = v147;
    v147[0] = *(_QWORD *)(v112 - 24);
    v147[1] = *(_QWORD *)(v112 - 16);
    v147[2] = *(_QWORD *)(v112 - 8);
    *((_QWORD *)&v146 + 1) = 0x300000003;
    v145 = 3;
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a4 + 8), 0x40u, 0);
    v114 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v145, 1, IntegerType, 0);
    v115 = v114;
    if (!v114)
      goto LABEL_88;
    v116 = *v114;
    v117 = mlir::TypeID::get<mlir::ShapedType>();
    v118 = *(unsigned int *)(v116 + 16);
    if (!(_DWORD)v118)
      goto LABEL_88;
    v119 = *(_QWORD **)(v116 + 8);
    v120 = &v119[2 * v118];
    do
    {
      v121 = v118 >> 1;
      v122 = &v119[2 * (v118 >> 1)];
      v124 = *v122;
      v123 = v122 + 2;
      v118 += ~(v118 >> 1);
      if (v124 < v117)
        v119 = v123;
      else
        v118 = v121;
    }
    while (v118);
    if (v119 != v120 && *v119 == v117)
      v125 = v119[1];
    else
LABEL_88:
      v125 = 0;
    v145 = mlir::DenseElementsAttr::getFromRawBuffer(v115, v125, v146, 8 * DWORD2(v146), 8, 1, 0);
    v126 = v142;
    v139 = mlir::ValueRange::dereference_iterator(&v148, 0);
    v127 = mlir::OpBuilder::create<mlir::anec::Unflatten,mlir::Value,mlir::anec::FlattenModeAttr &,mlir::DenseIntElementsAttr &>((mlir::UnknownLoc **)(a4 + 8), *(_QWORD *)(v126 + 24), &v139, &v140, &v145);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v126, v127);
    if ((_QWORD *)v146 != v147)
      free((void *)v146);
    return 1;
  }
  v129 = *(_QWORD *)(a4 + 16);
  if (v129)
  {
    v130 = v142;
    if (mlir::RewriterBase::Listener::classof(*(_QWORD *)(a4 + 16)))
    {
      {
        return 1;
      }
    }
  }
  v131 = *(_QWORD *)(a4 + 16);
  if (v131 && (v132 = v138, mlir::RewriterBase::Listener::classof(v131)))
  else
    return 0;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)1>::tryConvertToFlatten(mlir::mps::ReshapeOp,mlir::ValueRange,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: Reshape target shape must be NxCx1x1 to be lowered as Flatten on ANEs.\n");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)1>::tryConvertToUnflatten(mlir::mps::ReshapeOp,mlir::ValueRange,mlir::ShapedType,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: Reshape input shape must be NxCx1x1 to be lowered as Unflatten on ANEs.");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ReshapeOp,mlir::mps::ReshapeOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: op couldn't be folded or converted to flatten on A11/A12.");
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)2>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)2>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 48);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)3>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)3>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 48);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)4>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)4>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 48);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)5>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)5>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)5>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 48);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)6>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertReshape<(mlir::anec::Family)6>::~ConvertReshape(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ReshapeOp,(mlir::anec::Family)6>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 48);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)0>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)0>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExpandDimsOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExpandDimsOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ExpandDimsOpGenericAdaptorBase::ExpandDimsOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::ExpandDimsOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::detail::ExpandDimsOpGenericAdaptorBase::ExpandDimsOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::`anonymous namespace'::OpConversionPatternMPSToANEC<mlir::mps::ExpandDimsOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NextResultAtOffset;
  uint64_t v23;
  _QWORD *Shape;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = *(uint64_t **)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 48);
  v35 = v8;
  v36 = 0;
  if (!v9)
  {
LABEL_18:
    v19 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v19)
      v20 = a2 - 16;
    else
      v20 = 0;
    if (!(_DWORD)v19)
    {
LABEL_36:
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      v33[2] = *(_OWORD *)(a3 + 32);
      v34 = *(_QWORD *)(a3 + 48);
      return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v33, a4);
    }
    v21 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v21);
      v35 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      v36 = v23;
      if (v35)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v35))
        {
          goto LABEL_32;
        }
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v35);
        if (v25)
          break;
      }
LABEL_23:
      if (++v21 == v19)
        goto LABEL_36;
    }
    v26 = 8 * v25;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v26 -= 8;
      if (!v26)
        goto LABEL_23;
    }
LABEL_32:
    v31[0] = "failed: mps ops with unranked output types or dynamic shapes are not supported on ANEs.";
    v32 = 259;
    v29[0] = v31;
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      result = mlir::RewriterBase::Listener::classof(v27);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD *))(*(_QWORD *)v27 + 64))(v27, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExpandDimsOp &>(mlir::mps::ExpandDimsOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v29);
      return result;
    }
    return 0;
  }
  v10 = 0;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v35, v10);
    v29[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
    v29[1] = v13;
    if (v29[0])
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
      {
        goto LABEL_15;
      }
      v14 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
      if (v15)
        break;
    }
LABEL_3:
    v10 = ++v36;
    if (v35 == v8 && v10 == v9)
      goto LABEL_18;
  }
  v16 = 8 * v15;
  while (*v14 != 0x8000000000000000)
  {
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_3;
  }
LABEL_15:
  v32 = 259;
  v30 = v31;
  v31[0] = "failed: unranked input types or dynamic shapes are not supported on ANEs.";
  v17 = *(_QWORD *)(a4 + 16);
  if (!v17)
    return 0;
  result = mlir::RewriterBase::Listener::classof(v17);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExpandDimsOp &>(mlir::mps::ExpandDimsOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v30);
  return result;
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int *v53;
  _QWORD v55[2];
  uint64_t RankPromotionTypeForANE;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62[2];
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v60 = a2;
  v63 = *(_OWORD *)(a3 + 40);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v58 = v5;
  v59 = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v60) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = (uint64_t)v16;
  v57 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v58);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE(v32, v42);
  v57 = v43;
  v55[0] = mlir::getRankPromotionTypeForANE((uint64_t)v58, v59);
  v55[1] = v44;
  v45 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v47 = v46;
  v48 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  if (v47 == v49 && !memcmp(v45, v48, 8 * v47))
  {
    v53 = v60;
    v61 = mlir::ValueRange::dereference_iterator(&v63, 0);
    v52 = 1;
    mlir::ValueRange::ValueRange(v62, (uint64_t)&v61, 1uLL);
    mlir::ConversionPatternRewriter::replaceOp(a4, v53, v62[0], v62[1]);
  }
  else
  {
    v50 = *(_QWORD *)(a4 + 16);
    if (v50 && (v51 = v60, mlir::RewriterBase::Listener::classof(v50)))
    else
      return 0;
  }
  return v52;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ExpandDimsOp &>(mlir::mps::ExpandDimsOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)0>::matchAndRewriteWithStaticShapes(mlir::mps::ExpandDimsOp,mlir::mps::ExpandDimsOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: op couldn't be folded or converted to flatten on A11/A12.");
}

_QWORD *mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)1>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)1>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int *v53;
  _QWORD v55[2];
  uint64_t RankPromotionTypeForANE;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62[2];
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v60 = a2;
  v63 = *(_OWORD *)(a3 + 40);
  v5 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v58 = v5;
  v59 = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v60) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = (uint64_t)v16;
  v57 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v58);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = mlir::getRankPromotionTypeForANE(v32, v42);
  v57 = v43;
  v55[0] = mlir::getRankPromotionTypeForANE((uint64_t)v58, v59);
  v55[1] = v44;
  v45 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v47 = v46;
  v48 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  if (v47 == v49 && !memcmp(v45, v48, 8 * v47))
  {
    v53 = v60;
    v61 = mlir::ValueRange::dereference_iterator(&v63, 0);
    v52 = 1;
    mlir::ValueRange::ValueRange(v62, (uint64_t)&v61, 1uLL);
    mlir::ConversionPatternRewriter::replaceOp(a4, v53, v62[0], v62[1]);
  }
  else
  {
    v50 = *(_QWORD *)(a4 + 16);
    if (v50 && (v51 = v60, mlir::RewriterBase::Listener::classof(v50)))
    else
      return 0;
  }
  return v52;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)1>::matchAndRewriteWithStaticShapes(mlir::mps::ExpandDimsOp,mlir::mps::ExpandDimsOpAdaptor,mlir::ConversionPatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "failed: op couldn't be folded or converted to flatten on A11/A12.");
}

_QWORD *mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)2>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)2>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)2>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 40);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)3>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)3>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)3>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 40);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

_QWORD *mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)4>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::`anonymous namespace'::ConvertExpandDims<(mlir::anec::Family)4>::~ConvertExpandDims(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::`anonymous namespace'::ConvertToReshape<mlir::mps::ExpandDimsOp,(mlir::anec::Family)4>::matchAndRewriteWithStaticShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *Shape;
  mlir::AffineMap *v28;
  mlir::AffineMap *v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ZinIrHalH13g *v45;
  uint64_t v47;
  _QWORD *RankPromotionTypeForANE;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v51 = a2;
  v52 = *(_OWORD *)(a3 + 40);
  v5 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v52, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v50[0] = v5;
  v50[1] = v15;
  v16 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v51) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  RankPromotionTypeForANE = v16;
  v49 = v26;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&RankPromotionTypeForANE);
  v29 = v28;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  v31 = (uint64_t *)mlir::MemRefType::get(Shape, v29, OperandRange, 0, 0, 0);
  v32 = (uint64_t)v31;
  if (!v31)
    goto LABEL_30;
  v33 = *v31;
  v34 = mlir::TypeID::get<mlir::ShapedType>();
  v35 = *(unsigned int *)(v33 + 16);
  if (!(_DWORD)v35)
    goto LABEL_30;
  v36 = *(_QWORD **)(v33 + 8);
  v37 = &v36[2 * v35];
  do
  {
    v38 = v35 >> 1;
    v39 = &v36[2 * (v35 >> 1)];
    v41 = *v39;
    v40 = v39 + 2;
    v35 += ~(v35 >> 1);
    if (v41 < v34)
      v36 = v40;
    else
      v35 = v38;
  }
  while (v35);
  if (v36 != v37 && *v36 == v34)
    v42 = v36[1];
  else
LABEL_30:
    v42 = 0;
  RankPromotionTypeForANE = (_QWORD *)mlir::getRankPromotionTypeForANE(v32, v42);
  v49 = v43;
  v44 = v51;
  v47 = mlir::ValueRange::dereference_iterator(&v52, 0);
  v45 = mlir::OpBuilder::create<mlir::anec::Reshape,mlir::MemRefType &,mlir::Value>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(v44 + 24), (uint64_t *)&RankPromotionTypeForANE, &v47);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a4 + 32))(a4, v44, v45);
  return 1;
}

