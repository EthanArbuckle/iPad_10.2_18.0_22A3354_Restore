uint64_t std::__split_buffer<ZinDramDependentInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<ZinDramDependentInfo,0>(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<ZinDramDependentInfo>::__push_back_slow_path<ZinDramDependentInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[80 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[80 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v11 + 40), (uint64_t *)(a2 + 40));
  v14[2] = v11 + 80;
  std::vector<ZinDramDependentInfo>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_206ED3BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDramDependentInfo *,ZinDramDependentInfo *,ZinDramDependentInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *a4 = *(_DWORD *)v5;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign((uint64_t)(a4 + 2), (__n128 *)(v5 + 8));
    a4[8] = *(_DWORD *)(v5 + 32);
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)(a4 + 10), (uint64_t *)(v5 + 40));
    a4 += 20;
    v5 += 80;
  }
  while (v5 != v6);
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize<std::bitset<4ul>>(unint64_t *a1, char **a2)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  if (a2[1] != *a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinIrOpLayer *>::reserve((void **)a2, v7);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = a1[1];
      v10 = *a1 + 8;
      if (v9)
      {
        if (v10 > a1[2])
          break;
      }
      v11 = *(_QWORD *)(v9 + *a1);
      *a1 = v10;
      v12 = v11 & 0xF;
      v14 = a2[1];
      v13 = (unint64_t)a2[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = (v14 - *a2) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*a2;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v15 = v21 + 8;
        v23 = *a2;
        v22 = a2[1];
        if (v22 != *a2)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = *a2;
        }
        *a2 = v21;
        a2[1] = v15;
        a2[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v14 = v12;
        v15 = v14 + 8;
      }
      a2[1] = v15;
      if (++v8 == (_DWORD)v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

void std::vector<ZinOcgKernelData>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 56;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(v3, a2);
    v7 = &v6[56 * v5];
    v9 = &v6[56 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 56);
        v14 = *(_OWORD *)(v10 - 40);
        v15 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::vector<ZinNeKernelData>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<ZinNeKernelData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_206ED3F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinNeKernelData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v13 + 1) - 56;
      *((_QWORD *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<ZinNeKernelData>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<ZinNeKernelData>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<ZinNeKernelData>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(_QWORD *)(v2 - 32) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

uint64_t std::vector<ZinNeKernelData>::__push_back_slow_path<ZinNeKernelData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[56 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  v14[2] = v11 + 56;
  std::vector<ZinNeKernelData>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_206ED42E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,long>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__construct_node<std::pair<std::string const,ZinIrOpLayer *> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned short>(unint64_t *a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  _WORD *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;

  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
    return 3;
  v5 = a1[1];
  v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2])
      return 3;
  }
  v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<unsigned short>::reserve((void **)a2, v7);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (1)
    {
      v9 = a1[1];
      v10 = *a1 + 2;
      if (v9)
      {
        if (v10 > a1[2])
          break;
      }
      v11 = *(_WORD *)(v9 + *a1);
      *a1 = v10;
      v13 = *(_WORD **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(_WORD **)a2;
        v16 = (uint64_t)v13 - *(_QWORD *)a2;
        if (v16 <= -3)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = v16 >> 1;
        v18 = v12 - (_QWORD)v15;
        if (v18 <= (v16 >> 1) + 1)
          v19 = v17 + 1;
        else
          v19 = v18;
        if (v18 >= 0x7FFFFFFFFFFFFFFELL)
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(a2 + 16, v20);
          v15 = *(_WORD **)a2;
          v13 = *(_WORD **)(a2 + 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[2 * v17];
        *(_WORD *)v22 = v11;
        v14 = v22 + 2;
        while (v13 != v15)
        {
          v23 = *--v13;
          *((_WORD *)v22 - 1) = v23;
          v22 -= 2;
        }
        *(_QWORD *)a2 = v22;
        *(_QWORD *)(a2 + 8) = v14;
        *(_QWORD *)(a2 + 16) = &v21[2 * v20];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
      }
      *(_QWORD *)(a2 + 8) = v14;
      if (++v8 == (_DWORD)v7)
        return 0;
    }
    return 3;
  }
  return 0;
}

void std::vector<ZinMirUnitBasicBlock::EdgeInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ZinSerial::Deserializer::Deserialize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

uint64_t ZinIrFlattenInfo::ZinIrFlattenInfo(uint64_t a1, int a2)
{
  uint64_t result;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 10);
  *(_QWORD *)result = &unk_24C01B990;
  *(_DWORD *)(result + 12) = a2;
  return result;
}

_QWORD *ZinFlattenLayer::ZinFlattenLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01A4C0;
  return a1;
}

void sub_206EE0980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinFlattenLayer::LowerEngine(uint64_t a1, uint64_t **a2)
{
  uint64_t Hal;
  uint64_t v5;
  uint64_t *v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  ZinIrOpLayer *Transpose;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  ZinIrOpLayer *Reshape;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  _DWORD *v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  _OWORD v38[2];
  int v39;
  void *v40;
  uint64_t v41;
  char *v42;
  void *__p[2];
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  std::string v48;
  _QWORD v49[3];
  char v50;
  _QWORD v51[3];

  v51[1] = *MEMORY[0x24BDAC8D0];
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 16) + 160));
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1881)
    || (v5 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 16) + 160)),
        !*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) + 1880)))
  {
    ZinAssertImpl("Error: Flatten is not supported on this architecture");
  }
  v6 = *(uint64_t **)(a1 + 88);
  if (*(char *)(a1 + 47) >= 0)
    v7 = *(unsigned __int8 *)(a1 + 47);
  else
    v7 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v7 + 1);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v48;
  else
    v8 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a1 + 47) >= 0)
      v9 = (const void *)(a1 + 24);
    else
      v9 = *(const void **)(a1 + 24);
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
  v10 = std::string::append(&v48, "reshaped", 8uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v44 = (void *)v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = ZinObjectNameFactory::ZinObjectNameFactory(v49, __p);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)*v6 + 32))(*v6, 0, 0, v12);
  Transpose = (ZinIrOpLayer *)*v6;
  memset(&v48, 0, sizeof(v48));
  v46 = 0;
  v47 = 0;
  v45 = 0;
  ZinFlattenLayerUtils::DecomposeFlatten(*(_DWORD *)(v13 + 88), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 12), v13 + 48, (uint64_t *)&v48, (char **)&v45);
  v35 = v13;
  v36 = (uint64_t **)a1;
  v37 = v6;
  v15 = v48.__r_.__value_.__r.__words[0];
  if (v48.__r_.__value_.__l.__size_ == v48.__r_.__value_.__r.__words[0])
    goto LABEL_42;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  Reshape = 0;
  v34 = &unk_24C02BB18;
  v20 = 1;
  do
  {
    v21 = *(_DWORD *)(v15 + v17);
    if (v21 == 21)
    {
      v29 = *(_QWORD *)(*v37 + 16);
      v30 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v37 + 32))(*v37, 0, 0);
      v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v37 + 32))(*v37, 0, 0);
      Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v29, (uint64_t)v49, v30 + 48, *(_DWORD *)(v31 + 88), v15 + v17 + 88);
      v51[0] = v36;
      v40 = v51;
      v41 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v40);
      v27 = ZinIrOpLayerGraph::AddNode(a2, Transpose, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        v44 = __p[1];
        operator delete(__p[1]);
      }
      v28 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *v37, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      if (v21 != 22)
        ZinAssertImpl("Invalid flatten decomposition");
      v22 = *((_QWORD *)Transpose + 2);
      v23 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
      v24 = *(_DWORD *)(v35 + 88);
      v25 = (char *)v45;
      v26 = operator new(0x14uLL);
      v41 = (uint64_t)(v26 + 5);
      v42 = (char *)(v26 + 5);
      v26[4] = 4;
      *(_OWORD *)v26 = xmmword_207AA88F8;
      v40 = v26;
      DimensionOrderHint::DimensionOrderHint(__p, &v40);
      Reshape = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v22, (uint64_t)v49, v23 + 48, v24, (__int128 *)&v25[v16], (const DimensionOrderHint *)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v40)
      {
        v41 = (uint64_t)v40;
        operator delete(v40);
      }
      v51[0] = v36;
      v40 = v51;
      v41 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v40);
      v27 = ZinIrOpLayerGraph::AddNode(a2, Reshape, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        v44 = __p[1];
        operator delete(__p[1]);
      }
      v28 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Transpose, (uint64_t)Reshape, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    v20 &= v27 & v28;
    ++v18;
    v15 = v48.__r_.__value_.__r.__words[0];
    v17 += 152;
    v16 += 40;
  }
  while (0x86BCA1AF286BCA1BLL * ((uint64_t)(v48.__r_.__value_.__l.__size_ - v48.__r_.__value_.__r.__words[0]) >> 3) > v18);
  if (!Reshape)
LABEL_42:
    ZinAssertImpl("Invalid flatten decomposition", v34);
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  v32 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v36, Reshape, v38);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
  if ((v20 & v32 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v36, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: graph manipulation error during flatten layer decomposition", &unk_24C02BB18);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  __p[0] = &v48;
  std::vector<ZinFlattenLayerUtils::FlattenDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v49[0] = off_24C01FBB0;
  if (v50 < 0)
    operator delete((void *)v49[1]);
  return 0;
}

void sub_206EE0EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  a21 = &a31;
  std::vector<ZinFlattenLayerUtils::FlattenDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(_QWORD *)(v36 - 144) = off_24C01FBB0;
  if (*(char *)(v36 - 113) < 0)
    operator delete(*(void **)(v36 - 136));
  _Unwind_Resume(a1);
}

_QWORD *ZinFlattenLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  ZinIrOpLayerOpCode *v18;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  *(_QWORD *)v8 = &unk_24C01B990;
  *((_DWORD *)v8 + 3) = *((_DWORD *)v7 + 3);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinFlattenLayer::ZinFlattenLayer(v6, (uint64_t *)&v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206EE10FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinFlattenLayer::OpCodeKindToString@<X0>(ZinFlattenLayer *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*(_DWORD *)(*((_QWORD *)this + 8) + 12))
    v2 = "NHWC";
  else
    v2 = "NCHW";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t ZinFlattenLayer::DebugDetailPrint@<X0>(ZinFlattenLayer *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr, ZinFlattenLayer *))(*(_QWORD *)this + 184))(__p, this);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11 = v6;
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v14);
}

void sub_206EE128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL ZinFlattenLayer::ValidateFlattenTensorDims(ZinFlattenLayer *this, const ZinTensorDimensions *a2)
{
  _QWORD *v3;
  size_t v4;
  _BOOL8 result;
  size_t v6;
  size_t v7;
  int64x2_t v8;
  size_t v9;

  v3 = (_QWORD *)(*(uint64_t (**)(ZinFlattenLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v4 = *((_QWORD *)a2 + 2) * *((_QWORD *)a2 + 1) * *((_QWORD *)a2 + 3);
  v6 = *(_QWORD *)a2;
  v7 = v4;
  v8 = vdupq_n_s64(1uLL);
  v9 = *((_QWORD *)a2 + 4);
  result = ZinTensorPosition::operator==(v3 + 6, &v6);
  if (!result)
    ZinAssertImpl("Error: incorrect flatten output dimensions N%zdD%zdC%zdH%zdW%zd. With input dim N%zdD%zdC%zdH%zdW%zd, output dim N%zdD%zdC%zdH%zdW%zd is expected", v3[6], v3[10], v3[7], v3[8], v3[9], *(_QWORD *)a2, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), v6, v9, v7, v8.u64[0], v8.u64[1]);
  return result;
}

BOOL ZinFlattenLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  if (a2[1] - *a2 != 120)
    ZinAssertImpl("Flatten layer can only have one bottom");
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  if (*(_QWORD *)(*a2 + 40) != 1)
    ZinAssertImpl("Error: depth = %zd > 1 is supported for flatten layer", *(_QWORD *)(*a2 + 40));
  return ZinFlattenLayer::ValidateFlattenTensorDims(a1, (const ZinTensorDimensions *)(*a2 + 8));
}

uint64_t details::ZinGetProgrammedKernelDimension(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != 1)
  {
    if (a1 == 1 && a2 == 2)
    {
      v4 = a3 + 2;
      if (a3 >= -1)
        v4 = a3 + 1;
      v5 = v4 >> 1;
      if (a3 >= 0)
        v6 = a3;
      else
        v6 = a3 + 1;
      v7 = v6 >> 1;
      if (((a4 | a3) & 1) != 0)
        return v5;
      else
        return v7 + 1;
    }
    else if ((a3 & 1) == 0 && a1 == 2 && a2 == 2)
    {
      ++a3;
    }
  }
  return a3;
}

uint64_t details::ZinGetProgrammedPadDimension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 0)
    v3 = a3;
  else
    v3 = a3 + 1;
  v4 = v3 >> 1;
  if (a2 != 2)
    v4 = a3;
  if (a1 != 1)
    v4 = a3;
  if (a2 == 1)
    return a3;
  else
    return v4;
}

unint64_t details::ZinGetProgrammedOutputTensorDimension(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3 != 1)
  {
    if (a2 == 1 && a3 == 2)
    {
      return (result + 1) >> 1;
    }
    else
    {
      v3 = (result + 1) >> 1;
      if (a3 != 2)
        v3 = result;
      if (a2 == 2)
        return v3;
    }
  }
  return result;
}

uint64_t ZinIrOpLayer::ZinIrOpLayer(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, ZinIrKernel **a5)
{
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  ZinIrKernel *v14;

  v10 = (std::string *)ZinIrIrObject::ZinIrIrObject((_QWORD *)a1, *(_QWORD *)(*a3 + 16));
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C016898;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10 + 1, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    v10[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v10[1].__r_.__value_.__l.__data_ = v11;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  v12 = *a2;
  *a2 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *a5;
  *a5 = 0;
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(a1 + 136), v14);
  *(_QWORD *)(*a3 + 96) = a1;
  std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]((_QWORD *)(a1 + 72), a3);
  ZinIrContext::AddIrObj(*(uint64_t ***)(*a3 + 16), (ZinIrIrObject *)a1);
  return a1;
}

void sub_206EE15CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  ZinIrKernel **v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;

  if (*(_BYTE *)(v1 + 184))
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v5, *(_QWORD **)(v1 + 168));
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v4, 0);
  v7 = *(void **)(v1 + 112);
  if (v7)
  {
    *(_QWORD *)(v1 + 120) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v1 + 88);
  if (v8)
  {
    *(_QWORD *)(v1 + 96) = v8;
    operator delete(v8);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v3);
  v9 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrOpLayer::SetTensor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = a1 + 72;
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 96) = 0;
  result = std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]((_QWORD *)(a1 + 72), a2);
  *(_QWORD *)(*(_QWORD *)v3 + 96) = a1;
  return result;
}

uint64_t ZinIrOpLayer::ShuffleChannels(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const void **v3;
  size_t v5;
  void **v6;
  const void *v7;
  ZinIrKernel *v8;
  ZinIrKernel *v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrKernel *v13;
  void *__p[2];
  char v15;

  v2 = (uint64_t *)(a1 + 136);
  v3 = *(const void ***)(a1 + 136);
  if (!v3)
    return 3;
  if (*((char *)v3 + 23) >= 0)
    v5 = *((unsigned __int8 *)v3 + 23);
  else
    v5 = (size_t)v3[1];
  v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 9);
  if (v15 < 0)
    v6 = (void **)__p[0];
  if (v5)
  {
    if (*((char *)v3 + 23) >= 0)
      v7 = v3;
    else
      v7 = *v3;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_shuffled");
  ZinIrKernel::ShuffleChannels(*v2, (__int128 *)__p, a2, (uint64_t *)&v13);
  v8 = v13;
  if (v13)
  {
    v13 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)v2, v8);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      ZinIrKernel::~ZinIrKernel(v9);
      MEMORY[0x20BD002F8](v10);
    }
    v11 = 0;
  }
  else
  {
    v11 = 3;
  }
  if (v15 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_206EE17B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrOpLayer::DebugPrintSourceLayers@<X0>(ZinIrOpLayer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD v7[10];
  char v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 19);
  if (!v3
    || (*(_DWORD *)(*((_QWORD *)this + 8) + 8) & 0xFFFFFFFC) == 0x1C
    || !*((_QWORD *)Layer2TDMapper::LayerTracker::GetSourceLayerIds((Layer2TDMapper::LayerTracker *)(v3 + 152), this) + 3))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "{ None }");
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7, a2);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v4;
  v7[0] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x20BD0022C](&v9);
}

void sub_206EE18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayer::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206EE1988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t ZinIrOpLayer::GetIndexOfMatchedInputTensor(ZinIrOpLayer *this, const ZinIrTensor *a2)
{
  uint64_t v2;
  unint64_t v5;

  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12) == v2)
    return -1;
  v5 = 0;
  while ((const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * v5) + 32))(*(_QWORD *)(v2 + 8 * v5), 0, 0) != a2)
  {
    ++v5;
    v2 = *((_QWORD *)this + 11);
    if (v5 >= (*((_QWORD *)this + 12) - v2) >> 3)
      return -1;
  }
  return v5;
}

uint64_t ZinIrOpLayer::IsNoOp(ZinIrOpLayer *this, uint64_t *a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  result = 1;
  v5 = (v3 - 28);
  if (v5 <= 0x34)
  {
    if (((1 << (v3 - 28)) & 0x1F80000000016FLL) != 0)
      return result;
    if (v5 == 7)
      return ZinReshapeLayer::IsNoOp(this, a2);
    if (v5 == 9)
      return ZinTransposeLayer::IsNoOpTranspose(this);
  }
  if (v3 != 7)
    return 0;
  return result;
}

BOOL ZinIrOpLayer::IsNELayer(ZinIrOpLayer *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 8) + 8) - 85) < 9;
}

BOOL ZinIrOpLayer::IsPELayer(ZinIrOpLayer *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 8) + 8) - 81) < 4;
}

BOOL ZinIrOpLayer::IsTransposeEngineLayer(ZinIrOpLayer *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 94;
}

BOOL ZinIrOpLayer::IsANELayer(ZinIrOpLayer *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 8) + 8) - 81) < 0xE;
}

uint64_t ZinIrOpLayer::IsSNELayer(ZinIrOpLayer *this)
{
  return 0;
}

uint64_t ZinIrOpLayer::IsValidForCompression(ZinIrOpLayer *this)
{
  return 0;
}

BOOL ZinIrOpLayer::ReplaceTensorKernel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 136);
  if (!v2)
    return 0;
  v3 = a2[1];
  v11 = *a2;
  v12 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = ZinIrKernel::ReplaceTensorKernel(v2, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_206EE1B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayer::IsAllInputsResident(ZinIrOpLayer *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  ZinIrTensor *v5;

  v1 = (uint64_t *)*((_QWORD *)this + 11);
  v2 = (uint64_t *)*((_QWORD *)this + 12);
  v3 = 1;
  while (v1 != v2)
  {
    v4 = *v1++;
    v5 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0);
    v3 = v3 & ZinIrTensor::IsResident(v5);
  }
  return v3;
}

void ZinIrOpLayer::CreateSpatialSplitCopyName(ZinIrOpLayer *this@<X0>, const TiledLayerTensorRegions *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  char *v9;
  const void *v10;
  const void *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  std::string __p;
  std::string v16;

  if (*((char *)this + 47) >= 0)
    v6 = *((unsigned __int8 *)this + 47);
  else
    v6 = *((_QWORD *)this + 4);
  v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    v10 = (const void *)*((_QWORD *)this + 3);
    v9 = (char *)this + 24;
    v8 = v10;
    if (v9[23] >= 0)
      v11 = v9;
    else
      v11 = v8;
    memmove(v7, v11, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  TiledLayerTensorRegions::Id::ToStringForIr((const TiledLayerTensorRegions *)((char *)a2 + 152), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  *a3 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_206EE1CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ZinIrOpLayer::CreateSpatialSplitCopyTensor(ZinIrOpLayer *this@<X0>, const TiledLayerTensorRegions *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  std::string *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  ZinIrTensor *v25;
  int v26;
  ZinIrTensor::MirInfo *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  ZinIrTensor::MirInfo *v31;
  std::string v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  std::string __p;
  std::string v39;

  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v7 = v6;
  if (*(char *)(v6 + 47) >= 0)
    v8 = *(unsigned __int8 *)(v6 + 47);
  else
    v8 = *(_QWORD *)(v6 + 32);
  v9 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v8 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if (v8)
  {
    v12 = *(char **)(v7 + 24);
    v11 = (char *)(v7 + 24);
    v10 = v12;
    if (v11[23] >= 0)
      v13 = v11;
    else
      v13 = v10;
    memmove(v9, v13, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 95;
  TiledLayerTensorRegions::Id::ToStringForIr((const TiledLayerTensorRegions *)((char *)a2 + 152), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  ZinIrContext::GetAlternativeNameForTensor(*((_QWORD *)this + 2), (uint64_t)&v39, (uint64_t)&v32);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v39 = v32;
  v18 = *((_QWORD *)this + 2);
  v19 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)
                  + 88);
  v36 = 0;
  v37 = 0;
  v35 = 0;
  LODWORD(v32.__r_.__value_.__l.__data_) = 0;
  v33 = 0;
  *(_OWORD *)&v32.__r_.__value_.__r.__words[1] = 0uLL;
  v34 = 0;
  ZinIrTensor::CreateTensor(v18, v19, (__int128 *)((char *)a2 + 40), (__int128 *)&v39, &v37, &v35, (unsigned int *)&v32, (uint64_t *)&__p);
  v20 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v37;
  v37 = 0;
  if (v23)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v37, v23);
  v24 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
  v25 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v25, &v31);
  v26 = ZinIrTensor::SetTensorMirInfo(v24, &v31);
  v27 = v31;
  v31 = 0;
  if (v27)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v31, v27);
  if (v26)
  {
    *a3 = 0;
    a3[1] = 0;
    v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_206EE1FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  _QWORD *v29;

  v29 = a10;
  a10 = 0;
  if (v29)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a10, v29);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayer::UpdateGraph(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t **v7;
  _QWORD ***v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void **v19;
  const void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  ZinIrOpLayer *v29;
  _BOOL4 v30;
  uint64_t i;
  uint64_t *v32;
  int v33;
  ZinIrKernel *v34;
  _QWORD *v36;
  uint64_t v37;
  _OWORD v39[2];
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD *v47;
  void *__p[2];
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  __int128 v53[2];
  uint64_t v54;
  ZinIrKernel *v55;
  _BYTE v56[24];
  _OWORD v57[2];
  int v58;
  uint64_t v59[2];
  uint64_t **v60;
  char v61;
  uint64_t v62;

  v6 = a1;
  v62 = *MEMORY[0x24BDAC8D0];
  memset(v57, 0, sizeof(v57));
  v58 = 1065353216;
  *(_QWORD *)&v41 = a1;
  *(_QWORD *)&v53[0] = &v41;
  v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a2 + 64), (unint64_t **)v53);
  if (v7)
    v8 = (_QWORD ***)(v7 + 3);
  else
    v8 = (_QWORD ***)(a2 + 104);
  v37 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)***v8 + 32))(***v8, 0, 0) + 16);
  ZinIrUnitStatus::ZinIrUnitStatus((ZinIrUnitStatus *)v56);
  v55 = 0;
  v9 = *a4;
  if (a4[1] == *a4)
  {
    v29 = 0;
    v11 = 1;
  }
  else
  {
    v10 = 0;
    v36 = v8;
    v11 = 1;
    do
    {
      v53[0] = (__int128)vdupq_n_s64(1uLL);
      v53[1] = v53[0];
      v54 = 1;
      v12 = *(_QWORD **)(v9 + 8 * v10);
      *(_QWORD *)(v9 + 8 * v10) = 0;
      v13 = a3;
      (*(void (**)(_QWORD *, uint64_t, __int128 *, _BYTE *))(*v12 + 48))(v12, a3, v53, v56);
      v14 = v6;
      v15 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*v12 + 112))(v12) + 68);
      v16 = (*(uint64_t (**)(_QWORD *))(*v12 + 112))(v12);
      v17 = v16;
      if (*(char *)(v16 + 31) >= 0)
        v18 = *(unsigned __int8 *)(v16 + 31);
      else
        v18 = *(_QWORD *)(v16 + 16);
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 11);
      if (v49 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if (v18)
      {
        if (*(char *)(v17 + 31) >= 0)
          v20 = (const void *)(v17 + 8);
        else
          v20 = *(const void **)(v17 + 8);
        memmove(v19, v20, v18);
      }
      strcpy((char *)v19 + v18, "_out_tensor");
      v46 = 0;
      v47 = 0;
      v45 = 0;
      LODWORD(v41) = 0;
      v42 = 0;
      v43 = 0;
      *((_QWORD *)&v41 + 1) = 0;
      v44 = 0;
      ZinIrTensor::CreateTensor(v37, v15, v53, (__int128 *)__p, &v47, &v45, (unsigned int *)&v41, v59);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v60 = &v50;
      v61 = 0;
      v21 = operator new(0x10uLL);
      v6 = v14;
      v50 = v21;
      v51 = v21;
      v52 = v21 + 2;
      v22 = v59[1];
      *v21 = v59[0];
      v21[1] = v22;
      a3 = v13;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v51 = v21 + 2;
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v59);
      v25 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v47;
      v47 = 0;
      if (v28)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v47, v28);
      if (v49 < 0)
        operator delete(__p[0]);
      v29 = (ZinIrOpLayer *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD **, ZinIrKernel **))(*v12 + 80))(v12, v13, &v50, &v55);
      v60 = v6;
      __p[0] = &v60;
      __p[1] = (void *)1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v41, __p);
      v30 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v29, (ZinIrOpLayer ***)&v41);
      *(_QWORD *)&v41 = &unk_24C02BB18;
      if (*((_QWORD *)&v41 + 1))
      {
        v42 = *((_QWORD *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      *(_QWORD *)&v41 = v12;
      *((_QWORD *)&v41 + 1) = v29;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer * const,ZinAneInstruction *> const&>((uint64_t)v57, &v41, &v41);
      v11 &= v30;
      for (i = v12[4]; i != v12[5]; i += 16)
      {
        *(_QWORD *)&v41 = 0;
        *(_QWORD *)&v41 = *(_QWORD *)i;
        if ((_QWORD)v41)
        {
          __p[0] = &v41;
          v32 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v57, &v41, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 3;
        }
        else
        {
          v32 = *(uint64_t **)(*v36 + 8 * *(unsigned int *)(i + 8));
        }
        v11 &= ZinIrOpLayerGraph::AddEdge(a2, *v32, (uint64_t)v29, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      }
      *(_QWORD *)&v41 = &v50;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
      ++v10;
      v9 = *a4;
    }
    while (v10 < (a4[1] - *a4) >> 3);
  }
  memset(v39, 0, sizeof(v39));
  v40 = 1065353216;
  v33 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v6, v29, v39);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v39);
  if ((v11 & v33 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v6, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: graph manipulation error");
  v34 = v55;
  v55 = 0;
  if (v34)
  {
    ZinIrKernel::~ZinIrKernel(v34);
    MEMORY[0x20BD002F8]();
  }
  ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)v56);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v57);
  return 0;
}

void sub_206EE2528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  uint64_t v35;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v35 - 208), 0);
  ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)(v35 - 200));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v35 - 176);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayer::ComputeOutputDimensions()
{
  return 3;
}

uint64_t ZinIrOpLayer::GetTensor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t ZinIrOpLayer::GetTensorPtr(uint64_t a1)
{
  return a1 + 72;
}

uint64_t ZinIrOpLayer::GetOutputPort()
{
  return 0;
}

uint64_t ZinIrOpLayer::GetOutputPort(ZinIrOpLayer *this, ZinIrTensor *a2)
{
  return 0;
}

uint64_t ZinIrOpLayer::GetInputTensorPtr(ZinIrOpLayer *this, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *OutputPortsOfInEdges;
  const char *v9;

  v4 = *((_QWORD *)this + 11);
  v5 = (*((_QWORD *)this + 12) - v4) >> 3;
  if (v5 <= a2)
  {
    v9 = (char *)this + 24;
    if (*((char *)this + 47) < 0)
      v9 = *(const char **)v9;
    ZinAssertImpl("Invalid operand index %zu from layer %s (Max: %zu)", a2, v9, v5);
  }
  v6 = *(_QWORD **)(v4 + 8 * a2);
  if ((*(_DWORD *)(v6[8] + 8) - 81) <= 0xD)
  {
    OutputPortsOfInEdges = ZinIrOpLayerGraph::GetOutputPortsOfInEdges(*((ZinIrOpLayerGraph **)this + 19), this);
    if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) != OutputPortsOfInEdges[1] - *OutputPortsOfInEdges)
      ZinAssertImpl("inconsistent size between incoming src nodes and incoming src_node_ports");
    if (*(_QWORD *)(*OutputPortsOfInEdges + 8 * a2) == 3)
      ZinAssertImpl("invalid port");
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 40))(v6);
}

__n128 ZinIrOpLayer::GetTensorInfo@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  uint64_t Interleave;
  __n128 result;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_DWORD *)(v3 + 88);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v6 = v5 == 28;
  v7 = v5 == 29;
  Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v3);
  result = *(__n128 *)(v3 + 48);
  v10 = *(_OWORD *)(v3 + 64);
  *(__n128 *)(a2 + 8) = result;
  *(_DWORD *)a2 = v4;
  *(_OWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v3 + 80);
  *(_BYTE *)(a2 + 48) = v6;
  *(_BYTE *)(a2 + 49) = v7;
  *(_QWORD *)(a2 + 56) = Interleave;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 92) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  return result;
}

BOOL ZinIrOpLayer::HasOutputPort(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ZinIrOpLayer::Hash(ZinIrOpLayer *this, int *a2)
{
  return 0;
}

BOOL ZinIrOpLayer::NeedsTypeCastToRead(uint64_t a1, int a2)
{
  return !IsPrimaryFormat(a2);
}

BOOL ZinIrOpLayer::NeedsTypeCastToWrite(uint64_t a1, int a2)
{
  return !IsPrimaryFormat(a2);
}

uint64_t ZinIrOpLayer::IsRedundant(ZinIrOpLayer *this)
{
  return 0;
}

uint64_t ZinIrOpLayer::CanMergeWithFollowingGOC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD **v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  ZinIrKernel *v13;
  _BOOL4 v14;
  const char *v16;
  char v17[8];
  _QWORD *v18[2];
  int v19[10];
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_OWORD *)v19 = xmmword_207AA8934;
    *(_OWORD *)&v19[3] = *(__int128 *)((char *)&xmmword_207AA8934 + 12);
    std::set<ZinIrOpLayerOpCodeType>::set[abi:ne180100]((uint64_t)v17, v19, 7);
    v4 = v18[0];
    if (!v18[0])
      goto LABEL_21;
    v5 = *(_DWORD *)(a1[8] + 8);
    v6 = v18;
    do
    {
      v7 = v4;
      v8 = v6;
      v9 = *((_DWORD *)v4 + 7);
      v10 = v4 + 1;
      if (v9 >= v5)
      {
        v10 = v7;
        v6 = (_QWORD **)v7;
      }
      v4 = (_QWORD *)*v10;
    }
    while (v4);
    if (v6 == v18)
      goto LABEL_21;
    v11 = v9 >= v5 ? v7 : v8;
    if (v5 < *((_DWORD *)v11 + 7))
      goto LABEL_21;
    v12 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 200))(v2, v12) & 1) != 0)
      goto LABEL_21;
    v13 = *(ZinIrKernel **)(v2 + 136);
    if (!v13)
    {
      v16 = (const char *)(v2 + 24);
      if (*(char *)(v2 + 47) < 0)
        v16 = *(const char **)v16;
      ZinAssertImpl("ERROR: following goc %s has no kernel", v16);
    }
    v14 = *((_QWORD *)v13 + 73)
       || *((_QWORD *)v13 + 75)
       || ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v2 + 136))
       || ZinIrKernel::HasPerCoutBias(v13);
    if (((*(unsigned int (**)(_QWORD *))(*a1 + 120))(a1) & v14 & 1) != 0
      || a1[17] && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2) & 1) != 0)
    {
LABEL_21:
      v2 = 0;
    }
    else
    {
      v2 = 1;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v17, v18[0]);
  }
  return v2;
}

void sub_206EE29F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinIrRingBufferReaderInfo::ZinIrRingBufferReaderInfo(ZinIrRingBufferReaderInfo *this, const ZinIrRingBufferReaderUnitInfo *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 76);
  *v4 = &unk_24C023690;
  ZinIrRingBufferUnitInfo::ZinIrRingBufferUnitInfo((ZinIrRingBufferUnitInfo *)(v4 + 2), a2);
  *((_QWORD *)this + 2) = &unk_24C024F58;
  std::unordered_map<ZinIrDimension,long>::unordered_map((uint64_t)this + 176, (uint64_t)a2 + 160);
}

void sub_206EE2A84(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;
  void **v2;

  *((_QWORD *)v1 + 2) = &unk_24C022308;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v1 + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)v1 + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinRingBufferReaderLayer::ZinRingBufferReaderLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C023118;
  return a1;
}

void sub_206EE2BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinRingBufferReaderLayer::LowerEngine(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  ZinIrTensor *v8;
  ZinIrTensor *RootTensor;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v15;
  ZinTensorDimensions *v16;
  uint64_t Interleave;
  char v18;
  size_t v19;
  void *p_p;
  uint64_t *v21;
  __n128 v22;
  uint64_t v23;
  int v24;
  ZinIrTensor *v25;
  ZinIrOpLayer *v26;
  ZinIrTensor::MirInfo *v27;
  BOOL v28;
  char v29;
  char v30;
  int64x2_t v32;
  _OWORD v33[2];
  int v34;
  _QWORD v35[2];
  void *__p;
  void *v37;
  void *v38;
  _BYTE v39[172];
  ZinIrTensor::MirInfo *v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x24BDAC8D0];
  v6 = *a1[11];
  v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 88);
  if (v7 != *(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0) + 88))
    ZinAssertImpl("Input state and output state format mismatched");
  v8 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v8);
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)RootTensor + 12) + 64) + 8) | 2) != 0x1E
    && ZinIrTensor::SetAllocationHint(RootTensor, 2, 1))
  {
    ZinAssertImpl("Error: failed to set the allocation hint to DRAM for BSS tensor input");
  }
  v10 = a1[14];
  v11 = a1[15];
  if (v10 == v11)
    return 0;
  v12 = 0;
  v32 = vdupq_n_s64(1uLL);
  do
  {
    v13 = *(_DWORD *)(*(_QWORD *)(*v10 + 64) + 8);
    if (v13 == 7 || v13 == 31)
    {
      v12 = 1;
    }
    else if (v13 == 33)
    {
      v15 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v10 + 32))(*v10, 0, 0);
      v41 = v32;
      v42 = v32;
      v43 = 1;
      v16 = *(ZinTensorDimensions **)(v15 + 104);
      Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v15);
      v12 |= ZinIrTensor::ZinIrTensorValidateCustomStrides(v16, (ZinTensorDimensions *)(v15 + 48), Interleave, v18, *(_DWORD *)(v15 + 88), (uint64_t)&v41, 1, *(_QWORD *)(**(_QWORD **)a3 + 528)) != 0;
    }
    ++v10;
  }
  while (v10 != v11);
  if ((v12 & 1) == 0)
    return 0;
  if (*((char *)a1 + 47) >= 0)
    v19 = *((unsigned __int8 *)a1 + 47);
  else
    v19 = (size_t)a1[4];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v19 + 36);
  if (SHIBYTE(v38) < 0)
    p_p = __p;
  if (v19)
  {
    if (*((char *)a1 + 47) >= 0)
      v21 = (uint64_t *)(a1 + 3);
    else
      v21 = a1[3];
    memmove(p_p, v21, v19);
  }
  strcpy((char *)p_p + v19, "_ringbufferreader_output_concat_copy");
  v22 = ZinObjectNameFactory::ZinObjectNameFactory(&v41, &__p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  v23 = (uint64_t)a1[2];
  v24 = *(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD, __n128))(*a1)[4])(a1, 0, 0, v22) + 88);
  v25 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v25, &v40);
  v39[0] = 0;
  v39[168] = 0;
  v26 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v23, (uint64_t)&v41, (uint64_t)a1, v24, &v40, 0, (uint64_t)v39, 1.0);
  v27 = v40;
  v40 = 0;
  if (v27)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v40, v27);
  v44[0] = a1;
  v35[0] = v44;
  v35[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v35);
  v28 = ZinIrOpLayerGraph::AddNode(a2, v26, (ZinIrOpLayer ***)&__p);
  __p = &unk_24C02BB18;
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  v29 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, a1, v26, v33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  v30 = v28 & v29 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)a1, (uint64_t)v26, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v41.i64[0] = (uint64_t)off_24C01FBB0;
  if (v42.i8[15] < 0)
  {
    operator delete((void *)v41.i64[1]);
    if ((v30 & 1) != 0)
      return 0;
    return 3;
  }
  if ((v30 & 1) == 0)
    return 3;
  return 0;
}

void sub_206EE2FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 144) = off_24C01FBB0;
  if (*(char *)(v20 - 113) < 0)
    operator delete(*(void **)(v20 - 136));
  _Unwind_Resume(exception_object);
}

_QWORD *ZinRingBufferReaderLayer::Clone(uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *GroupId;
  uint64_t v16[2];
  uint64_t v17;

  v6 = (_QWORD *)operator new();
  std::make_unique[abi:ne180100]<ZinIrRingBufferReaderInfo,ZinIrRingBufferReaderInfo&>(a1[8], &v17);
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v16[0] = v7;
  v16[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  ZinRingBufferReaderLayer::ZinRingBufferReaderLayer(v6, &v17, v16, a3);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId((ZinIrOpLayer *)a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206EE3158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrRingBufferReaderInfo,ZinIrRingBufferReaderInfo&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v4, (const ZinIrOpLayerOpCode *)a1);
  *(_QWORD *)v4 = &unk_24C023690;
  ZinIrRingBufferUnitInfo::ZinIrRingBufferUnitInfo((ZinIrRingBufferUnitInfo *)(v4 + 16), (const ZinIrRingBufferUnitInfo *)(a1 + 16));
  *(_QWORD *)(v4 + 16) = &unk_24C024F58;
  result = std::unordered_map<ZinIrDimension,long>::unordered_map(v4 + 176, a1 + 176);
  *a2 = v4;
  return result;
}

void sub_206EE3230(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;
  void **v2;

  *((_QWORD *)v1 + 2) = &unk_24C022308;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v1 + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)v1 + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  MEMORY[0x20BD002F8](v1, 0x10B3C409D57A31ALL);
  _Unwind_Resume(a1);
}

_QWORD *ZinRingBufferReaderLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RINGBUFFER_READER");
}

void ZinRingBufferReaderLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t Dimension;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void **v18;
  void **v19;
  uint64_t *v20;
  void **v21;
  void **v22;
  int v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  int v27;
  char *v28;
  char *v29;
  _OWORD v30[2];
  uint64_t v31;

  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, (unsigned __int8 *)a3);
  if (a2[1] - *a2 != 120)
    ZinAssertImpl("RingBufferReader layer should only have one input");
  v6 = *((_QWORD *)a1 + 8);
  v30[0] = vdupq_n_s64(1uLL);
  v30[1] = v30[0];
  v31 = 1;
  GetAllZinIrDimensions(&v28);
  v7 = (int *)v28;
  v8 = (int *)v29;
  if (v28 != v29)
  {
    do
    {
      v27 = 0;
      v27 = *v7;
      DimensionToString(v27, __p);
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v6 + 176), &v27))
      {
        v9 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v6 + 176), &v27);
        if (!v9)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v9[3] <= 0)
        {
          v17 = std::unordered_map<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>::at((_QWORD *)(v6 + 176), &v27);
          v18 = __p;
          if (v26 < 0)
            v18 = (void **)__p[0];
          ZinAssertImpl("Error: output size (%zd) at axis %s should be positive", *v17, (const char *)v18);
        }
        v10 = v27;
        v11 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v6 + 176), &v27);
        if (!v11)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (SetValueAtDimension<ZinTensorDimensions>(v30, v10, v11[3]))
        {
          v19 = __p;
          if (v26 < 0)
            v19 = (void **)__p[0];
          ZinAssertImpl("Invalid axis %s.", (const char *)v19);
        }
      }
      else
      {
        v12 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
        Dimension = ZinTensorDimensions::GetDimension((uint64_t *)(v12 + 48), v27);
        v14 = ZinTensorDimensions::GetDimension((uint64_t *)(*a2 + 8), v27);
        if (Dimension != v14)
        {
          v21 = __p;
          if (v26 < 0)
            v21 = (void **)__p[0];
          ZinAssertImpl("Error: output size (%zd) at axis %s should be equal to the state dimension (%zd)", Dimension, (const char *)v21, v14);
        }
        if (SetValueAtDimension<ZinTensorDimensions>(v30, v27, Dimension))
        {
          v22 = __p;
          if (v26 < 0)
            v22 = (void **)__p[0];
          ZinAssertImpl("Invalid axis %s.", (const char *)v22);
        }
      }
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v6 + 136), &v27)&& v27 == 4&& !*(_BYTE *)(a3 + 1327))
      {
        v24 = 0;
        if (ZinTensorFormatGetSize(*(_DWORD *)*a2, &v24))
          ZinAssertImpl("Error: Could not retrieve state tensor format size.");
        if (*(_BYTE *)(*a2 + 64))
          v15 = *(_QWORD *)(*a2 + 56);
        else
          v15 = 1;
        v23 = 4;
        v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)(v6 + 136), &v23);
        if (!v16)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if ((unint64_t)(v16[3] * v15 * v24) % *(_QWORD *)(a3 + 528))
        {
          v23 = 4;
          v20 = std::unordered_map<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>::at((_QWORD *)(v6 + 136), &v23);
          ZinAssertImpl("Error: Static width offset (%ld) must be aligned along %zu bytes", *v20, *(_QWORD *)(a3 + 528));
        }
      }
      if (v26 < 0)
        operator delete(__p[0]);
      ++v7;
    }
    while (v7 != v8);
    v7 = (int *)v28;
  }
  if (v7)
  {
    v29 = (char *)v7;
    operator delete(v7);
  }
  ZinLayerValidationUtils::ValidateRingBufferUnitInfo(v6 + 16, *a2, a3, (uint64_t *)v30);
}

void sub_206EE35F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a19 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t ZinRingBufferReaderLayer::GetStateInputLayer(ZinRingBufferReaderLayer *this)
{
  return **((_QWORD **)this + 11);
}

uint64_t ZinRingBufferReaderLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206EE3710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinIrRingBufferReaderInfo::~ZinIrRingBufferReaderInfo(ZinIrRingBufferReaderInfo *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &unk_24C023690;
  *((_QWORD *)this + 2) = &unk_24C024F58;
  v2 = (_QWORD *)((char *)this + 16);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  *v2 = &unk_24C022308;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &unk_24C023690;
  *((_QWORD *)this + 2) = &unk_24C024F58;
  v2 = (_QWORD *)((char *)this + 16);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  *v2 = &unk_24C022308;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 2);
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

_QWORD *ZinKernelBufferControl::ZinKernelBufferControl(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a3;
  result[1] = a2;
  return result;
}

uint64_t ZinKernelBufferControl::IdentifySpatiallySplitSubgraph(uint64_t a1, uint64_t *a2)
{
  ZinIrOpLayer ***v2;
  ZinIrOpLayer **v3;
  ZinIrOpLayer **v4;
  ZinIrOpLayer *v5;
  uint64_t v6;
  _QWORD *v7;
  ZinIrOpLayer **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  ZinIrOpLayer **v17;
  char *v18;
  char *v19;
  ZinIrOpLayer *v20;
  _QWORD *i;
  ZinIrOpLayer **v22;
  ZinIrOpLayer **v23;
  uint64_t v24;
  int v25;
  uint64_t **v26;
  uint64_t **v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  _QWORD *v51[2];
  uint64_t **v52;
  uint64_t **v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  int v57;
  void *v58[6];

  v55 = 0u;
  v56 = 0u;
  v57 = 1065353216;
  v2 = *(ZinIrOpLayer ****)(a1 + 8);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v3))
      {
        v5 = *v3;
        if (*(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0, 0)+ 144))
        {
          v46 = 0;
          v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
          if (!*(_BYTE *)(v6 + 144))
            std::__throw_bad_optional_access[abi:ne180100]();
          v46 = *(_QWORD *)(v6 + 136);
          if ((v46 & 0x8000000000000000) != 0)
            ZinAssertImpl("Subgraph id should've been updated\n");
          v58[0] = &v46;
          v7 = std::__hash_table<std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)&v55, &v46, (uint64_t)&std::piecewise_construct, (uint64_t **)v58);
          v8 = (ZinIrOpLayer **)v7[4];
          v9 = v7[5];
          if ((unint64_t)v8 >= v9)
          {
            v11 = v7[3];
            v12 = ((uint64_t)v8 - v11) >> 3;
            if ((unint64_t)(v12 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v13 = v9 - v11;
            v14 = v13 >> 2;
            if (v13 >> 2 <= (unint64_t)(v12 + 1))
              v14 = v12 + 1;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 5), v15);
            else
              v16 = 0;
            v17 = (ZinIrOpLayer **)&v16[8 * v12];
            *v17 = v5;
            v10 = v17 + 1;
            v19 = (char *)v7[3];
            v18 = (char *)v7[4];
            if (v18 != v19)
            {
              do
              {
                v20 = (ZinIrOpLayer *)*((_QWORD *)v18 - 1);
                v18 -= 8;
                *--v17 = v20;
              }
              while (v18 != v19);
              v18 = (char *)v7[3];
            }
            v7[3] = v17;
            v7[4] = v10;
            v7[5] = &v16[8 * v15];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *v8 = v5;
            v10 = v8 + 1;
          }
          v7[4] = v10;
        }
      }
      ++v3;
    }
    while (v3 != v4);
    for (i = (_QWORD *)v56; i; i = (_QWORD *)*i)
    {
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v22 = (ZinIrOpLayer **)i[3];
      v23 = (ZinIrOpLayer **)i[4];
      if (v22 != v23)
      {
        do
        {
          if (!*(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v22 + 32))(*v22, 0, 0)+ 144))ZinAssertImpl("Spatial Split Info must exist\n");
          v24 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*v22 + 32))(*v22, 0, 0);
          if (!*(_BYTE *)(v24 + 144))
            std::__throw_bad_optional_access[abi:ne180100]();
          v25 = *(unsigned __int16 *)(v24 + 128);
          v26 = v52;
          if (v52 != v53)
          {
            while (*(unsigned __int16 *)v26 != v25)
            {
              v26 += 4;
              if (v26 == v53)
                goto LABEL_34;
            }
          }
          if (v26 == v53)
          {
LABEL_34:
            v51[0] = 0;
            v51[1] = 0;
            v50 = (uint64_t *)v51;
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v50, v22, (uint64_t *)v22);
            LOWORD(v46) = v25;
            std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>::set[abi:ne180100]((uint64_t *)&v47, (ZinIrOpLayer ***)&v50);
            v27 = v53;
            if ((unint64_t)v53 >= v54)
            {
              v31 = ((char *)v53 - (char *)v52) >> 5;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 59)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v33 = v54 - (_QWORD)v52;
              if ((uint64_t)(v54 - (_QWORD)v52) >> 4 > v32)
                v32 = v33 >> 4;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
                v34 = 0x7FFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              v58[4] = &v54;
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>((uint64_t)&v54, v34);
              v36 = &v35[32 * v31];
              v58[0] = v35;
              v58[1] = v36;
              v58[3] = &v35[32 * v37];
              *(_WORD *)v36 = v46;
              *((_QWORD *)v36 + 1) = v47;
              v38 = v48;
              *((_QWORD *)v36 + 2) = v48;
              v39 = v36 + 16;
              v40 = v49;
              *((_QWORD *)v36 + 3) = v49;
              if (v40)
              {
                v38[2] = v39;
                v47 = (uint64_t *)&v48;
                v48 = 0;
                v49 = 0;
              }
              else
              {
                *((_QWORD *)v36 + 1) = v39;
              }
              v58[2] = v36 + 32;
              std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__swap_out_circular_buffer((uint64_t *)&v52, v58);
              v41 = v53;
              std::__split_buffer<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::~__split_buffer(v58);
            }
            else
            {
              *(_WORD *)v53 = v46;
              v27[1] = v47;
              v28 = v48;
              v27[2] = v48;
              v29 = (uint64_t *)(v27 + 2);
              v30 = v49;
              v27[3] = v49;
              if (v30)
              {
                v28[2] = v29;
                v47 = (uint64_t *)&v48;
                v48 = 0;
                v49 = 0;
              }
              else
              {
                v27[1] = v29;
              }
              v41 = v27 + 4;
            }
            v53 = v41;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v47, v48);
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v50, v51[0]);
          }
          else
          {
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v26 + 1, v22, (uint64_t *)v22);
          }
          ++v22;
        }
        while (v22 != v23);
        if (v53 != v52)
        {
          v42 = a2[1];
          if (v42 >= a2[2])
          {
            v43 = std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>(a2, (uint64_t *)&v52);
          }
          else
          {
            std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>((uint64_t)a2, (uint64_t *)&v52);
            v43 = v42 + 24;
          }
          a2[1] = v43;
        }
      }
      v58[0] = &v52;
      std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    }
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)&v55);
  return 0;
}

void sub_206EE3C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy((va_list)v4, va1);
  std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ZinKernelBufferControl::LegalizeKBufPressure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 1;
  while (1)
  {
    v4 = *(_QWORD **)(v2 + 8);
    if (v4 != (_QWORD *)(v2 + 16))
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(v4[4] + 136);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 784);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 40);
            if (v8)
              v5 += *(_QWORD *)(*(_QWORD *)(v8 + 32) + 40);
          }
        }
        v9 = (_QWORD *)v4[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v4[2];
            v11 = *v10 == (_QWORD)v4;
            v4 = v10;
          }
          while (!v11);
        }
        v4 = v10;
      }
      while (v10 != (_QWORD *)(v2 + 16));
      if (v5 > *(_QWORD *)(*(_QWORD *)a1 + 480))
        break;
    }
    v2 += 32;
    if (v2 == v3)
      return 1;
  }
  return 0;
}

uint64_t ZinKernelBufferControl::IdentifyKernelSharingCandidates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  ZinIrKernel *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  std::string __p;
  ZinIrOpLayer *v14;
  std::string *p_p;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v6 = *(_QWORD **)(v3 + 8);
      if (v6 != (_QWORD *)(v3 + 16))
      {
        do
        {
          v14 = (ZinIrOpLayer *)v6[4];
          v7 = (ZinIrKernel *)*((_QWORD *)v14 + 17);
          if (v7)
          {
            ZinIrKernel::GetFinalHash(v7, &__p);
            p_p = &__p;
            v8 = std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v8 + 5, &v14, (uint64_t *)&v14);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v9 = (_QWORD *)v6[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v6[2];
              v11 = *v10 == (_QWORD)v6;
              v6 = v10;
            }
            while (!v11);
          }
          v6 = v10;
        }
        while (v10 != (_QWORD *)(v3 + 16));
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
  return 0;
}

void sub_206EE3EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinKernelBufferControl::SetKernelBufferControlRegsMirInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;

  v3 = *(_QWORD **)(a3 + 16);
  if (v3[7] >= 2uLL)
  {
    v4 = (_QWORD *)v3[5];
    *(_BYTE *)(*(_QWORD *)(v4[4] + 264) + 1384) = 1;
    v5 = (_QWORD *)v4[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v4[2];
        v7 = *v6 == (_QWORD)v4;
        v4 = v6;
      }
      while (!v7);
    }
    v8 = v3 + 6;
    if (v6 != v8)
    {
      do
      {
        *(_BYTE *)(*(_QWORD *)(v6[4] + 264) + 1386) = 1;
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v6[2];
            v7 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v7);
        }
        v6 = v10;
      }
      while (v10 != v8);
    }
  }
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12 - 32)
  {
    v13 = *a2;
    do
    {
      v14 = *(_QWORD **)(v13 + 8);
      if (v14 != (_QWORD *)(v13 + 16))
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(v14[4] + 264) + 1385) = 0;
          v15 = (_QWORD *)v14[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v14[2];
              v7 = *v16 == (_QWORD)v14;
              v14 = v16;
            }
            while (!v7);
          }
          v14 = v16;
        }
        while (v16 != (_QWORD *)(v13 + 16));
      }
      v13 += 32;
    }
    while (v13 != v12 - 32);
  }
  for (; v11 != v12; v11 += 32)
  {
    v17 = *(_QWORD **)(v11 + 8);
    v18 = (_QWORD *)(v11 + 16);
    if (v17 != (_QWORD *)(v11 + 16))
    {
      do
      {
        v19 = *(_QWORD *)(v17[4] + 136);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 784);
          if (v20)
            v21 = *(_QWORD *)(v20 + 40);
          else
            v21 = 0;
          v22 = (_QWORD *)v17[1];
          v23 = v22;
          v24 = v17;
          if (v22)
          {
            do
            {
              v25 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v24[2];
              v7 = *v25 == (_QWORD)v24;
              v24 = v25;
            }
            while (!v7);
          }
          if (v25 != v18)
          {
            while (1)
            {
              v26 = v25[4];
              v27 = *(_QWORD *)(v26 + 136);
              if (v27)
                break;
              v28 = (_QWORD *)v25[1];
              if (v28)
              {
                do
                {
                  v29 = v28;
                  v28 = (_QWORD *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  v29 = (_QWORD *)v25[2];
                  v7 = *v29 == (_QWORD)v25;
                  v25 = v29;
                }
                while (!v7);
              }
              v25 = v29;
              if (v29 == v18)
                goto LABEL_48;
            }
            if (v25 != v18)
            {
              v30 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v27 + 784) + 40) + 32);
              v31 = *(_QWORD *)(v21 + 16) + **(_QWORD **)(v21 + 32);
              if (v30 != v31)
              {
                v32 = v30 - v31;
                v33 = *(_QWORD *)(v26 + 264);
                *(_BYTE *)(v33 + 1386) = 1;
                *(_DWORD *)(v33 + 1388) = v32;
              }
            }
          }
        }
        else
        {
          v22 = (_QWORD *)v17[1];
        }
LABEL_48:
        if (v22)
        {
          do
          {
            v34 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v17[2];
            v7 = *v34 == (_QWORD)v17;
            v17 = v34;
          }
          while (!v7);
        }
        v17 = v34;
      }
      while (v34 != v18);
    }
  }
  return 0;
}

uint64_t ZinKernelBufferControl::Run(ZinKernelBufferControl *this)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  ZinKernelBufferControl::IdentifySpatiallySplitSubgraph((uint64_t)this, (uint64_t *)&v10);
  v2 = v10;
  for (i = v11; v2 != i; v2 += 3)
  {
    v4 = ZinKernelBufferControl::LegalizeKBufPressure((uint64_t)this, v2);
    if ((_DWORD)v4)
    {
      v7 = 0u;
      v8 = 0u;
      v9 = 1065353216;
      v5 = ZinKernelBufferControl::IdentifyKernelSharingCandidates(v4, v2, (uint64_t)&v7);
      if (*((_QWORD *)&v8 + 1))
        ZinKernelBufferControl::SetKernelBufferControlRegsMirInfo(v5, v2, (uint64_t)&v7);
      std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__hash_table((uint64_t)&v7);
    }
  }
  *(_QWORD *)&v7 = &v10;
  std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return 0;
}

void sub_206EE41F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v8 = a3 - 2;
    do
    {
      *(_WORD *)(v7 - 32) = *((_WORD *)v8 - 8);
      *(_QWORD *)(v7 - 24) = *(v8 - 1);
      v9 = *v8;
      *(_QWORD *)(v7 - 16) = *v8;
      v10 = v7 - 16;
      v11 = v8[1];
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(v8 - 1) = v8;
        *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v10;
      }
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>,std::reverse_iterator<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t *std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>::set[abi:ne180100](uint64_t *a1, ZinIrOpLayer ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_206EE43CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(v3, *a2, a2[1], (a2[1] - *a2) >> 5);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_206EE442C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(v11, *a2, a2[1], (a2[1] - *a2) >> 5);
  v15 += 24;
  std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__split_buffer(v14);
  return v12;
}

void sub_206EE4534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206EE45AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_WORD *)v4 = *(_WORD *)v6;
      std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>::set[abi:ne180100]((uint64_t *)(v4 + 8), (ZinIrOpLayer ***)(v6 + 8));
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206EE4660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 32;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 24, *(_QWORD **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206EE4BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_206EE4E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[6] = 0;
  v8[7] = 0;
  v8[5] = v8 + 6;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_206EE4EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

__CFDictionary *ZinCreateConcatUnit(const ZinIrConcatUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  const __CFString *v4;
  const void **v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v4 = ZinIrCoordinateToCFString((_DWORD *)a1 + 20);
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v4);
  v5 = (const void **)MEMORY[0x24BDBD270];
  if (!*((_BYTE *)a1 + 84))
    v5 = (const void **)MEMORY[0x24BDBD268];
  CFDictionaryAddValue(Mutable, CFSTR("Interleaved"), *v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateNMSUnit(uint64_t a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  int v13;
  int valuePtr;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  valuePtr = *(_QWORD *)(a1 + 80);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("NMSRounds"), v5);
  CFRelease(v5);
  v13 = *(_DWORD *)(a1 + 88);
  v6 = CFNumberCreate(v3, kCFNumberFloat32Type, &v13);
  CFDictionaryAddValue(Mutable, CFSTR("IoUThreshold"), v6);
  CFRelease(v6);
  v7 = (const void *)*MEMORY[0x24BDBD268];
  v8 = (const void *)*MEMORY[0x24BDBD270];
  if (*(_BYTE *)(a1 + 92))
    v9 = (const void *)*MEMORY[0x24BDBD270];
  else
    v9 = (const void *)*MEMORY[0x24BDBD268];
  CFDictionaryAddValue(Mutable, CFSTR("PerClassSuppression"), v9);
  if (*(_BYTE *)(a1 + 93))
    v10 = v8;
  else
    v10 = v7;
  CFDictionaryAddValue(Mutable, CFSTR("ReturnPerClassResults"), v10);
  v11 = (const void *)ZinIrNMSTypeToCFString(*(_DWORD *)(a1 + 96));
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v11);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinTensorMap::AddTensor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  __int128 *v12;

  v4 = *a2;
  if ((*(char *)(*a2 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(*a2 + 47))
      goto LABEL_3;
LABEL_11:
    ZinAssertImpl("Tensor has empty name");
  }
  if (!*(_QWORD *)(v4 + 32))
    goto LABEL_11;
LABEL_3:
  v5 = (const char *)(v4 + 24);
  if ((void **)(a1 + 8) != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, (void **)(v4 + 24)))
  {
    if (*(char *)(v4 + 47) < 0)
      v5 = *(const char **)v5;
    ZinAssertImpl("Tensor with same name (%s) already exists in map", v5);
  }
  v12 = (__int128 *)(v4 + 24);
  v6 = std::__tree<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)(v4 + 24), (uint64_t)&std::piecewise_construct, &v12);
  v8 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[8];
  v6[7] = v8;
  v6[8] = v7;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

BOOL ZinTensorMap::IsTensorNameInUse(uint64_t a1, void **a2)
{
  return a1 + 8 != (_QWORD)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, a2);
}

BOOL ZinTensorMap::AllTensorNamesInUse(uint64_t a1, void ***a2)
{
  void **v2;
  void **v3;
  void **v5;
  void **v6;
  BOOL v7;
  _BOOL8 result;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 1;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, v2);
    v7 = v5 == v6;
    result = v5 != v6;
    if (v7)
      break;
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

uint64_t ZinTensorMap::RemoveTensor(uint64_t **this, void **a2)
{
  return std::__tree<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>>>::__erase_unique<std::string>(this, a2 + 3);
}

void **ZinTensorMap::GetTensor@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  void **result;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  result = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, a2);
  if ((void **)(a1 + 8) == result)
  {
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v6 = (char *)result[8];
    *(_QWORD *)a3 = result[7];
    *(_QWORD *)(a3 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 16);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = 1;
  }
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_206EE54C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ZinIrTensor>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ZinIrTensor>>>>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ZinIrTensor>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t ZinIrScaledEWUnit::ZinIrScaledEWUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;
  __int128 v8;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C01CE58;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24C020AA8;
  v8 = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 96);
  *(_OWORD *)(a1 + 136) = v8;
  return a1;
}

void sub_206EE5654(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrScaledEWUnit::CreateOpcode(ZinIrScaledEWUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;

  v7 = 0;
  if (GetScaledEWMode((_DWORD *)this + 34, (unsigned int *)&v7))
  {
    v5 = operator new();
    ZinIrScaledEWInfo::ZinIrScaledEWInfo(v5, v7, *((_BYTE *)this + 152), *((_BYTE *)this + 153), *((float *)this + 36), *((float *)this + 35), *((float *)this + 37));
    v6 = 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrScaledEWUnit::CreateOpcode();
    v5 = 0;
    v6 = 3;
  }
  *(_DWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
}

void sub_206EE5730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40752B76BFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrScaledEWUnit::CreateLayer(ZinIrScaledEWUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrScaledEWUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206EE5864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrScaledEWUnit::TensorDimensions(ZinIrScaledEWUnit *this, const ZinIrHalParameters *a2, int8x16_t *a3, ZinIrUnitStatus *a4)
{
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v10[2];
  uint64_t v11;

  v5 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v5 == 120)
  {
    v6 = *(int8x16_t *)(v5 + 8);
    v7 = *(int8x16_t *)(v5 + 24);
    a3[2].i64[0] = *(_QWORD *)(v5 + 40);
    *a3 = v6;
    a3[1] = v7;
  }
  else
  {
    ZinElementWiseLayerUtils::GetOutputTensorDims((int64x2_t *)(v5 + 8), (int64x2_t *)(v5 + 128), v10);
    v8 = v10[1];
    *a3 = v10[0];
    a3[1] = v8;
    a3[2].i64[0] = v11;
  }
  return 0;
}

uint64_t ZinIrScaledEWUnit::PropagateAxisType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_OWORD *)(v2 + 96);
  a2[4] = *(_DWORD *)(v2 + 112);
  *(_OWORD *)a2 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 16) - v4) >> 3) >= 2)
  {
    v7 = 1;
    v8 = 216;
    do
    {
      ZinTensorAxisType::operator|=(a2, (unsigned int *)(v4 + v8));
      ++v7;
      v4 = *(_QWORD *)(a1 + 8);
      v8 += 120;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 16) - v4) >> 3) > v7);
  }
  return 0;
}

uint64_t ZinIrScaledEWUnit::ValidateForDynamicShapes(ZinIrScaledEWUnit *this, CFArrayRef *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v6;
  int v7;
  char v9;
  uint64_t v10;
  BOOL v11;
  char v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char v20;
  BOOL v21;
  char v23;
  BOOL v24;
  char v26;
  BOOL v27;
  char v29;
  int v30;
  BOOL v31;
  int v32;
  char v34;
  BOOL v35;
  char v37;
  char v38;
  uint64_t v43;
  void *v45[4];
  int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  __int16 v53;

  v2 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v2 == 240)
  {
    v3 = *(_DWORD *)(v2 + 96);
    v4 = *(_DWORD *)(v2 + 100);
    if (v4)
      _ZF = 1;
    else
      _ZF = *(_QWORD *)(v2 + 40) == 1;
    v6 = *(_DWORD *)(v2 + 216);
    v7 = *(_DWORD *)(v2 + 220);
    v9 = !_ZF && v7 == 1;
    v10 = *(_QWORD *)(v2 + 152);
    if (v7)
      v11 = 1;
    else
      v11 = *(_QWORD *)(v2 + 160) == 1;
    if (!v11 && v4 == 1)
      v13 = 1;
    else
      v13 = v9;
    v14 = *(_DWORD *)(v2 + 104);
    v15 = *(_DWORD *)(v2 + 108);
    if (v14)
      v16 = 1;
    else
      v16 = *(_QWORD *)(v2 + 16) == 1;
    v18 = *(_DWORD *)(v2 + 224);
    v17 = *(_DWORD *)(v2 + 228);
    v20 = !v16 && v18 == 1;
    if (v18)
      v21 = 1;
    else
      v21 = *(_QWORD *)(v2 + 136) == 1;
    if (!v21 && v14 == 1)
      v23 = 1;
    else
      v23 = v20;
    if (v15)
      v24 = 1;
    else
      v24 = *(_QWORD *)(v2 + 24) == 1;
    v26 = !v24 && v17 == 1;
    if (v17)
      v27 = 1;
    else
      v27 = *(_QWORD *)(v2 + 144) == 1;
    if (!v27 && v15 == 1)
      v29 = 1;
    else
      v29 = v26;
    v30 = *(_DWORD *)(v2 + 112);
    if (v30)
      v31 = 1;
    else
      v31 = *(_QWORD *)(v2 + 32) == 1;
    v32 = *(_DWORD *)(v2 + 232);
    v34 = !v31 && v32 == 1;
    if (v32)
      v35 = 1;
    else
      v35 = v10 == 1;
    if (!v35 && v30 == 1)
      v37 = 1;
    else
      v37 = v34;
    v38 = (v13 | v23 | v29 | v37) ^ 1;
    if (v3 != v6)
      v38 = 0;
    v47 = 0u;
    v48 = 0u;
    v49 = -1;
    v45[0] = &unk_24C020AA8;
    memset(&v45[1], 0, 24);
    v50 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v51 = _D0;
    v52 = 0;
    v53 = 0;
    v46 = 5;
    if (*((float *)this + 35) != 1.0 || *((float *)this + 36) != 1.0 || *((float *)this + 37) != 0.0)
      goto LABEL_84;
    if (*((_BYTE *)this + 152))
      v38 = 0;
    if ((v38 & 1) != 0)
    {
      v43 = 0;
    }
    else
    {
LABEL_84:
      ZinIrUnitStatus::SetError(a2, CFSTR("UnsupportedForDynamicShapes"));
      v43 = 3;
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v45);
  }
  else
  {
    ZinIrUnitStatus::SetError(a2, CFSTR("UnsupportedForDynamicShapes"));
    return 3;
  }
  return v43;
}

void sub_206EE5B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)va);
  _Unwind_Resume(a1);
}

void ZinIrScaledEWUnit::~ZinIrScaledEWUnit(void **this)
{
  *this = &off_24C01CE58;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C01CE58;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrScaledEWUnit::CreateOpcode()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid Scaled EW\n", v0, 2u);
}

__CFDictionary *ZinCreatePlaneReaderUnit(uint64_t a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 80));
  CFDictionaryAddValue(Mutable, CFSTR("Input4CCFormat"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 84));
  CFDictionaryAddValue(Mutable, CFSTR("PlaneIndex"), v6);
  CFRelease(v6);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)a1 = &unk_24C020438;
  *(_QWORD *)(a1 + 40) = off_24C017CA0;
  v7 = (std::string *)(a1 + 48);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(__int128 **)(a3 + 40), *(__int128 **)(a3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 3));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 40) = off_24C021970;
  v10 = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a1 + 136) = off_24C021970;
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = -1;
  *(_OWORD *)(a1 + 216) = xmmword_207A8A490;
  v11 = *a4;
  v12 = a4[1];
  v13 = a4[3];
  *(_OWORD *)(a1 + 264) = a4[2];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 248) = v12;
  v14 = a4[4];
  v15 = a4[5];
  v16 = a4[6];
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a4 + 14);
  *(_OWORD *)(a1 + 312) = v15;
  *(_OWORD *)(a1 + 328) = v16;
  *(_OWORD *)(a1 + 296) = v14;
  v17 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 432) = v17;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a1 + 328);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a1 + 344);
  v18 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 368) = v18;
  v19 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 400) = v19;
  std::string::operator=((std::string *)(a1 + 144), v7);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 72);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 176), *(std::string **)(a1 + 80), *(__int128 **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 120);
  return a1;
}

void sub_206EE5F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t ZinIrTileUnit::ZinIrTileUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C017B20;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C01CF68;
  std::unordered_map<ZinIrDimension,int>::unordered_map(a1 + 136, a2 + 80);
  return a1;
}

void sub_206EE603C(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTileUnit::TensorDimensions(ZinIrTileUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v18;

  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v7 = (_QWORD *)((char *)this + 136);
  v18 = 0;
  v8 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((_QWORD *)this + 17, &v18);
  if (!v8)
    goto LABEL_7;
  *(_QWORD *)a3 = v6 * *((int *)v8 + 5);
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v18 = 1;
  v10 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18);
  if (!v10)
    goto LABEL_7;
  *((_QWORD *)a3 + 4) = v9 * *((int *)v10 + 5);
  v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  v18 = 2;
  v12 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18);
  if (!v12)
    goto LABEL_7;
  *((_QWORD *)a3 + 1) = v11 * *((int *)v12 + 5);
  v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v18 = 3;
  v14 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18);
  if (!v14
    || (*((_QWORD *)a3 + 2) = v13 * *((int *)v14 + 5),
        v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 32),
        v18 = 4,
        (v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18)) == 0))
  {
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *((_QWORD *)a3 + 3) = v15 * *((int *)v16 + 5);
  return 0;
}

ZinIrTileInfo *ZinIrTileUnit::CreateOpcode@<X0>(ZinIrTileUnit *this@<X0>, uint64_t a2@<X8>)
{
  const ZinIrTileUnitInfo *v4;
  ZinIrTileInfo *v5;
  ZinIrTileInfo *result;

  v4 = (ZinIrTileUnit *)((char *)this + 56);
  v5 = (ZinIrTileInfo *)operator new();
  result = ZinIrTileInfo::ZinIrTileInfo(v5, v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206EE61EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C4095116A54);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTileUnit::CreateLayer(ZinIrTileUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrTileUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinTileLayer::ZinTileLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206EE6320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef ZinCreateResampleUnit(const ZinIrResampleUnitInfo *a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  _DWORD *v4;
  _DWORD *v5;
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  __CFDictionary *v8;
  const __CFString *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  const __CFString *v13;
  CFMutableDictionaryRef theDict;
  CFMutableDictionaryRef Unit;

  Unit = ZinCreateUnit(a1);
  theDict = ZinCreateTextureCommonUnit(a1);
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD690]);
  v5 = (_DWORD *)*((_QWORD *)a1 + 20);
  v4 = (_DWORD *)*((_QWORD *)a1 + 21);
  if (v5 != v4)
  {
    v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v8 = CFDictionaryCreateMutable(v2, 0, v6, v7);
      v9 = ZinIrCoordinateToCFString(v5);
      CFDictionaryAddValue(v8, CFSTR("Coordinate"), v9);
      v10 = ZinIrCoordinateTypeToCFString(v5[1]);
      CFDictionaryAddValue(v8, CFSTR("CoordinateType"), v10);
      CFArrayAppendValue(Mutable, v8);
      CFRelease(v8);
      v5 += 2;
    }
    while (v5 != v4);
  }
  CFDictionaryAddValue(theDict, CFSTR("CoordinateTypeInfo"), Mutable);
  CFRelease(Mutable);
  v11 = *((_DWORD *)a1 + 46);
  v12 = CFSTR("YX");
  if (v11 != 1)
    v12 = 0;
  if (v11)
    v13 = v12;
  else
    v13 = CFSTR("XY");
  CFDictionaryAddValue(theDict, CFSTR("CoordinateMode"), v13);
  CFDictionaryAddValue(Unit, CFSTR("Params"), theDict);
  CFRelease(theDict);
  return Unit;
}

void ZinIrKernelRasterizerUnit::ZinIrKernelRasterizerUnit(ZinIrKernelRasterizerUnit *this, const ZinIrKernelRasterizerUnitInfo *a2)
{
  __int128 v4;
  int v5;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  *(_QWORD *)this = &off_24C0235A0;
  *((_QWORD *)this + 7) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 120) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 7) = &unk_24C024F38;
  *(_OWORD *)((char *)this + 136) = *((_OWORD *)a2 + 5);
}

void sub_206EE660C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit *v11;

  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernelRasterizerUnit::Validate(ZinIrUnit *this, uint64_t *a2, int a3, int a4, CFArrayRef *a5)
{
  uint64_t result;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _QWORD v21[2];
  char v22;

  if (*(_BYTE *)(a2[1] + 492)
    && (*(unsigned int (**)(ZinIrUnit *, CFArrayRef *))(*(_QWORD *)this + 144))(this, a5))
  {
    ZinIrUnit::GetUnitTypeString(this, v21);
    if (v22 >= 0)
      v20 = (const char *)v21;
    else
      v20 = (const char *)v21[0];
    ZinAssertImpl("Unit %s is not supported for dynamic shapes", v20);
  }
  result = ZinIrUnit::ValidateBottomCount(this, 1, a5);
  if (!(_DWORD)result)
  {
    result = ZinIrKernelRasterizerUnit::ValidateRasterizerMode(this, a5);
    if (!(_DWORD)result)
    {
      result = ZinIrUnit::ValidateFormats(this, a5);
      if (!(_DWORD)result)
      {
        if (!(*(unsigned int (**)(ZinIrUnit *, uint64_t, CFArrayRef *))(*(_QWORD *)this + 120))(this, 1, a5)&& !ZinIrKernelRasterizerUnit::ValidateNumGroups(this, (const ZinIrHalParameters *)*a2, a5))
        {
          v9 = *((_DWORD *)this + 34);
          if (v9)
          {
            if (v9 == 1)
            {
              v10 = (_QWORD *)*((_QWORD *)this + 1);
              v11 = v10[1] * v10[2];
            }
            else
            {
              v11 = 0;
              v10 = (_QWORD *)*((_QWORD *)this + 1);
            }
          }
          else
          {
            v10 = (_QWORD *)*((_QWORD *)this + 1);
            v11 = v10[2];
          }
          if (ZinIrKernelRasterizerUnit::Rasterizable(*a2, *((_QWORD *)this + 16), v11 / *((_QWORD *)this + 16), v10[3], v10[4], *((_QWORD *)this + 18), *((_DWORD *)this + 31)))
          {
            return 0;
          }
          v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v12)
            ZinIrKernelRasterizerUnit::Validate(v12, v13, v14, v15, v16, v17, v18, v19);
          ZinIrUnitStatus::SetError(a5, CFSTR("UnsupportedKernelRasterizerSize"));
        }
        return 3;
      }
    }
  }
  return result;
}

void sub_206EE67D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernelRasterizerUnit::ValidateRasterizerMode(ZinIrKernelRasterizerUnit *this, CFArrayRef *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)this + 34) != 2)
    return 0;
  v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v3)
    ZinIrKernelRasterizerUnit::ValidateRasterizerMode(v3, v4, v5, v6, v7, v8, v9, v10);
  ZinIrUnitStatus::SetError(a2, CFSTR("InvalidMode"));
  return 3;
}

uint64_t ZinIrKernelRasterizerUnit::ValidateNumGroups(ZinIrKernelRasterizerUnit *this, const ZinIrHalParameters *a2, CFArrayRef *a3)
{
  uint64_t v4;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)this + 18);
  if (*((_QWORD *)a2 + 47) > (unint64_t)v4 || (unint64_t)v4 > *((_QWORD *)a2 + 48))
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinIrKernelRasterizerUnit::ValidateNumGroups(v6, v7, v8, v9, v10, v11, v12, v13);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidGroupConfiguration"));
    return 3;
  }
  if (v4 < 2)
    return 0;
  v14 = *((_DWORD *)this + 34);
  if (v14 == 1)
  {
    v15 = (_QWORD *)(*((_QWORD *)this + 1) + 8);
    goto LABEL_14;
  }
  if (!v14)
  {
    v15 = (_QWORD *)(*((_QWORD *)this + 1) + 16);
LABEL_14:
    if (v4 == *v15 && v4 == *((_QWORD *)this + 16))
      return 0;
  }
  ZinIrUnitStatus::SetError(a3, CFSTR("InvalidGroupConfiguration"));
  v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v17)
    ZinIrKernelRasterizerUnit::ValidateNumGroups(v17, v18, v19, v20, v21, v22, v23, v24);
  return 3;
}

BOOL ZinIrKernelRasterizerUnit::Rasterizable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  ZinTensorFormatGetSize(a7, &v17);
  v14 = a4 * a3 * a5;
  v15 = ZinAlignPower2(v17 * v14, *(_QWORD *)(a1 + 528));
  return v15 == ZinAlignPower2(v17 * v14, *(_QWORD *)(a1 + 568))
      || (a6 > 1 || a2 == 1 && a3 == 1) && (a4 == 6 && a5 == 6 && a7 == 3 || a4 == 4 && a5 == 4 && a7 == 3);
}

uint64_t ZinIrKernelRasterizerUnit::CreateOpcode@<X0>(ZinIrKernelRasterizerUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = operator new();
  result = ZinIrKernelRasterizerInfo::ZinIrKernelRasterizerInfo(v5, *((_QWORD *)this + 18), *((_DWORD *)this + 34));
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206EE6A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40F818AD22);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernelRasterizerUnit::TensorDimensions(ZinIrKernelRasterizerUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t result;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v5 == 120)
  {
    v6 = *((_DWORD *)this + 34);
    if (v6)
    {
      v7 = *((_QWORD *)this + 16);
      *(_QWORD *)a3 = 1;
      *((_QWORD *)a3 + 1) = v7;
      *((_QWORD *)a3 + 2) = 1;
      if (v6 == 1)
        v8 = v5[1] * v5[2];
      else
        v8 = 0;
    }
    else
    {
      v7 = *((_QWORD *)this + 16);
      *((_QWORD *)a3 + 1) = v7;
      v8 = v5[2];
      *(_QWORD *)a3 = v5[1];
      *((_QWORD *)a3 + 2) = 1;
    }
    *((_QWORD *)a3 + 3) = v5[3] * (v8 / v7) * v5[4];
    if (v5[5] == 1)
    {
      result = 0;
      *((_QWORD *)a3 + 4) = 1;
      return result;
    }
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinIrKernelRasterizerUnit::TensorDimensions(v11, v12, v13, v14, v15, v16, v17, v18);
    v9 = CFSTR("InvalidInputDepth");
  }
  else
  {
    v9 = CFSTR("InvalidBottomCount");
  }
  ZinIrUnitStatus::SetError(a4, v9);
  return 3;
}

uint64_t ZinIrKernelRasterizerUnit::ValidateOutputChannel(ZinIrKernelRasterizerUnit *this, uint64_t a2, ZinIrUnitStatus *a3)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((_QWORD *)this + 18);
  if (v3 > 1)
  {
LABEL_7:
    v6 = *((_QWORD *)this + 16);
    if (v6 != -1)
    {
      v7 = *((_DWORD *)this + 34);
      if (v7 == 1)
      {
        v8 = (uint64_t *)(*((_QWORD *)this + 1) + 8);
      }
      else
      {
        if (v7)
        {
          v14 = 0;
LABEL_22:
          if (v14 != v6)
            return 3;
          return 0;
        }
        v8 = (uint64_t *)(*((_QWORD *)this + 1) + 16);
      }
      v14 = *v8;
      goto LABEL_22;
    }
    v11 = *((_QWORD *)this + 1);
    if (0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)this + 2) - v11) >> 3) != a2)
      goto LABEL_39;
    v12 = *((_DWORD *)this + 34);
    if (v12 == 1)
    {
      v13 = (uint64_t *)(v11 + 8);
    }
    else
    {
      if (v12)
      {
        v17 = 0;
LABEL_36:
        if (v3 == v17)
        {
          *((_QWORD *)this + 16) = v3;
          return 0;
        }
LABEL_39:
        v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v18)
          ZinIrKernelRasterizerUnit::ValidateOutputChannel(v18, v19, v20, v21, v22, v23, v24, v25);
        return 3;
      }
      v13 = (uint64_t *)(v11 + 16);
    }
    v17 = *v13;
    goto LABEL_36;
  }
  v4 = *((_DWORD *)this + 34);
  if (v4 == 1)
  {
    v5 = (_QWORD *)(*((_QWORD *)this + 1) + 8);
  }
  else
  {
    if (v4)
      goto LABEL_11;
    v5 = (_QWORD *)(*((_QWORD *)this + 1) + 16);
  }
  if (*v5 == 1)
    goto LABEL_7;
LABEL_11:
  v9 = *((_QWORD *)this + 16);
  if (v9 != -1)
  {
    if (v4)
      goto LABEL_13;
LABEL_30:
    v16 = 3;
    if (v3 == 1 && !(*(_QWORD *)(*((_QWORD *)this + 1) + 16) % v9))
      return 0;
    return v16;
  }
  v15 = *((_QWORD *)this + 1);
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v15 + 8);
    *((_QWORD *)this + 16) = v9;
    v10 = v9;
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(v15 + 16);
  *((_QWORD *)this + 16) = v9;
  if (!v4)
    goto LABEL_30;
LABEL_13:
  if (v4 != 1)
    return 3;
  v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
LABEL_26:
  v16 = 3;
  if (v3 == 1 && v10 == v9)
    return 0;
  return v16;
}

uint64_t ZinIrKernelRasterizerUnit::CreateLayer(ZinIrKernelRasterizerUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;

  ZinIrKernelRasterizerUnit::CreateOpcode(a1, (uint64_t)&v19);
  if (v19)
  {
    v7 = 0;
  }
  else
  {
    v10 = operator new();
    v7 = v10;
    v11 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    ZinKernelRasterizerLayer::ZinKernelRasterizerLayer(v10, &v20, &v17, (char *)a1 + 64, a4);
    v14 = v18;
    if (v18)
    {
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v8 = v20;
  v20 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v7;
}

void sub_206EE6E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrKernelRasterizerUnit::~ZinIrKernelRasterizerUnit(void **this)
{
  *this = &off_24C0235A0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C0235A0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrKernelRasterizerUnitInfo::~ZinIrKernelRasterizerUnitInfo(void **this)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(this);
  JUMPOUT(0x20BD002F8);
}

void ZinIrKernelRasterizerUnit::Validate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unsupported kernel-rasterizer size!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernelRasterizerUnit::ValidateRasterizerMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Rasterizer Mode\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernelRasterizerUnit::ValidateNumGroups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid num_groups value\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Only channelwise convolution kernel rasterization is supported for group greater than 1.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernelRasterizerUnit::TensorDimensions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Input depth size invalid!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrKernelRasterizerUnit::ValidateOutputChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "For channelwise kernel rasterization, bottom tensors channel should match group number\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrLinearUnit::ZinIrLinearUnit(uint64_t a1, const ZinIrKernelUnitInfo *a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C01A948;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)(v5 + 7), a2);
  *(_QWORD *)(a1 + 56) = off_24C01EDE0;
  *(_DWORD *)(a1 + 296) = *((_DWORD *)a2 + 60);
  *(_QWORD *)(a1 + 304) = 1;
  return a1;
}

void sub_206EE7090(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLinearUnit::TensorDimensions(ZinIrLinearUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  *((_QWORD *)a3 + 1) = *((_QWORD *)this + 16);
  return 0;
}

uint64_t ZinIrLinearUnit::SetBottoms(uint64_t a1, __n128 *a2)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 296);
  if (v4 != 5)
    *(_QWORD *)(a1 + 304) = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(a2->n128_u64[0] + 8), v4);
  return ZinIrUnit::SetBottoms(a1, a2);
}

uint64_t ZinIrLinearUnit::CreateOpcode@<X0>(ZinIrLinearUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = ZinIrLinearInfo::ZinIrLinearInfo(v4, *((_QWORD *)this + 38), *((_DWORD *)this + 74));
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

void sub_206EE716C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40F818AD22);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLinearUnit::CreateLayer(ZinIrLinearUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;

  ZinIrLinearUnit::CreateOpcode(a1, (uint64_t)&v19);
  if (v19)
  {
    v7 = 0;
  }
  else
  {
    v8 = operator new();
    v7 = v8;
    v9 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ZinLinearLayer::ZinLinearLayer(v8, &v20, &v17, (char *)a1 + 64, a4);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v7);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

void sub_206EE72A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLinearUnit::CreateKernel(ZinIrLinearUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, ZinIrKernel **a6, CFArrayRef *a7)
{
  std::string *v13;
  __int128 v14;
  uint64_t Kernel;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _BYTE v20[280];

  ZinIrLinearUnit::CreateKernelDescriptor(a1, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(&v17, "linear_kernel");
  v13 = std::string::append(&v17, "_xfm", 4uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v19 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  Kernel = ZinIrKernelCreationUtils::CreateKernel((uint64_t)a1 + 56, (uint64_t)v20, a2, a3, a4, a6, (uint64_t)__p, a7);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return Kernel;
}

void sub_206EE73D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ZinIrLinearUnit::CreateKernelDescriptor@<D0>(ZinIrLinearUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  __int128 v7;
  int v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  v4 = *((_QWORD *)this + 38);
  v5 = v4 * *((_QWORD *)this + 16);
  *(_DWORD *)(a2 + 12) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_WORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 8) = 0;
  v6 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a2 + 120) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 152) = v7;
  *(_QWORD *)(a2 + 168) = 0x100000001;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 200) = xmmword_207A85790;
  *(_DWORD *)(a2 + 216) = 1;
  *(_DWORD *)(a2 + 232) = 0;
  *(_DWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  v8 = *((_DWORD *)this + 35);
  if (v8 == 6)
    v8 = 4;
  *(_DWORD *)a2 = v8;
  *(_QWORD *)(a2 + 72) = v5;
  *(_QWORD *)(a2 + 80) = v3;
  *(int64x2_t *)(a2 + 88) = v6;
  *(int64x2_t *)(a2 + 104) = v6;
  *(_QWORD *)(a2 + 224) = v4;
  *(_QWORD *)(a2 + 240) = *((unsigned int *)this + 58);
  *(_QWORD *)(a2 + 248) = 0;
  ZinKernelDescriptorStrides((int *)(a2 + 152), (int *)(a2 + 164), (_QWORD *)(a2 + 72), (_DWORD *)(a2 + 176), v11);
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)(a2 + 112) = v11[0];
  *(_OWORD *)(a2 + 128) = v10;
  *(_QWORD *)(a2 + 144) = v12;
  return result;
}

void ZinIrLinearUnit::CreateDummyKernel(ZinIrLinearUnit *a1, uint64_t a2, ZinIrKernel **a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  _BYTE v14[280];

  ZinIrLinearUnit::CreateKernelDescriptor(a1, (uint64_t)v14);
  std::string::basic_string[abi:ne180100]<0>(&v10, "linear_kernel");
  v6 = std::string::append(&v10, "_xfm", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v11, "_dummy", 6uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v13 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  ZinIrKernelCreationUtils::CreateDummyKernel((uint64_t)a1 + 56, (uint64_t)v14, a2, a3, (uint64_t)__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_206EE75F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLinearUnit::ValidateWeightFileInfos(ZinIrLinearUnit *this, unint64_t a2, unint64_t a3)
{
  return ValidateWeightFileInfosHelper((ZinIrLinearUnit *)((char *)this + 56), a2, a3);
}

uint64_t ZinIrLinearUnit::IsMutable(ZinIrLinearUnit *this)
{
  return *((unsigned __int8 *)this + 236);
}

uint64_t *ZinIrFileManager::UnmapData(uint64_t **a1, void **a2)
{
  uint64_t *result;
  uint64_t v4;

  result = (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)a1, a2);
  v4 = (uint64_t)result;
  if (a1 + 1 != (uint64_t **)result)
  {
    munmap((void *)result[7], result[8]);
    return std::__tree<std::string>::erase(a1, v4);
  }
  return result;
}

_OWORD *ZinIrFileManager::AddFileEntry(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _OWORD *v6;
  std::string __p;
  __int128 v9;
  __int128 v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v5 = a3[1];
  v9 = *a3;
  v10 = v5;
  v6 = std::__tree<std::__value_type<std::string,ZinIrFileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrFileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrFileInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinIrFileInfo>>(a1, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_206EE7748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *ZinIrFileManager::MapEncryptedData(uint64_t **a1, __int128 *a2)
{
  uint64_t OCGSize;
  uint64_t Hal;
  uint64_t Lut;
  uint64_t FullPassCount;
  _BYTE v9[40];
  void *__p;
  char v11;
  __int128 v12;
  __int128 v13;

  v12 = 0u;
  v13 = 0u;
  EncryptedFile::EncryptedFile((uint64_t)v9, a2);
  EncryptedFile::LoadFile((EncryptedFile *)v9);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v9);
  Hal = ZinIrTarget::GetHal((ZinIrTarget *)v9);
  Lut = ZinIrTarget::GetLut((ZinIrTarget *)v9);
  FullPassCount = ZinChannelAssignment::GetFullPassCount((ZinChannelAssignment *)v9);
  *(_QWORD *)&v12 = OCGSize;
  *((_QWORD *)&v12 + 1) = Hal;
  *(_QWORD *)&v13 = Lut;
  *((_QWORD *)&v13 + 1) = FullPassCount;
  if (v11 < 0)
    operator delete(__p);
  return ZinIrFileManager::AddFileEntry(a1, (uint64_t)a2, &v12);
}

void sub_206EE7810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t *v19;
  void *v22;

  if (a19 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v22 = __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrFileManager::MapEncryptedData(v19, (uint64_t)v22);
    __cxa_end_catch();
    JUMPOUT(0x206EE77F4);
  }
  _Unwind_Resume(exception_object);
}

void **ZinIrFileManager::MapData(uint64_t **a1, uint64_t a2, int a3)
{
  void **v6;
  const char *v8;
  const char *v10;
  int v11;
  void *v12;
  const char *v13;
  stat v14;
  _BYTE buf[24];
  off_t st_size;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)a1, (void **)a2);
  if (a1 + 1 == (uint64_t **)v6)
  {
    if (a3)
      return (void **)ZinIrFileManager::MapEncryptedData(a1, (__int128 *)a2);
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const char *)a2;
    else
      v8 = *(const char **)a2;
    if (!stat(v8, &v14))
    {
      if (*(char *)(a2 + 23) >= 0)
        v10 = (const char *)a2;
      else
        v10 = *(const char **)a2;
      v11 = open(v10, 0);
      v12 = mmap(0, v14.st_size, 1, 1, v11, 0);
      close(v11);
      if (v12 != (void *)-1)
      {
        *(_QWORD *)buf = v12;
        *(_QWORD *)&buf[8] = v14.st_size;
        *(_QWORD *)&buf[16] = v12;
        st_size = v14.st_size;
        return (void **)ZinIrFileManager::AddFileEntry(a1, a2, (__int128 *)buf);
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0)
          v13 = (const char *)a2;
        else
          v13 = *(const char **)a2;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v14.st_size;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(st_size) = v11;
        _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed to map file %s, size %lld, fid %d\n", buf, 0x1Cu);
      }
    }
  }
  return v6;
}

BOOL ZinIrFileManager::GetData(uint64_t **a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void **v9;
  void **v10;
  void **v11;
  void *v12;

  *a3 = 0;
  *a4 = 0;
  v9 = ZinIrFileManager::MapData(a1, (uint64_t)a2, a5);
  v10 = v9;
  v11 = (void **)(a1 + 1);
  if (v11 == v9)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinIrFileManager::GetData(a2);
  }
  else
  {
    v12 = v9[10];
    *a3 = v9[9];
    *a4 = v12;
  }
  return v11 != v10;
}

_OWORD *std::__tree<std::__value_type<std::string,ZinIrFileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrFileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrFileInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinIrFileInfo>>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x58uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void ZinIrFileManager::MapEncryptedData(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v2 = a1;
  else
    v2 = (uint64_t *)*a1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v4 = 136315394;
  v5 = v2;
  v6 = 2080;
  v7 = v3;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Cannot load encrypted file \"%s\": %s", (uint8_t *)&v4, 0x16u);
}

void ZinIrFileManager::GetData(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ERROR: ZinIrFileManager::GetData() -- No mapping found. File \"%s\" could not be mapped.\n", (uint8_t *)&v2, 0xCu);
}

uint64_t ZinParsePEPoolUnit(const __CFDictionary *a1, ZinIrPEPoolUnitInfo *a2, CFArrayRef *a3)
{
  uint64_t v6;
  size_t v7;
  void **v8;
  char *v9;
  void *__p[2];
  char v12;

  v6 = ZinParsePEUnit(a1, a2, a3);
  if (!(_DWORD)v6)
  {
    if (*((char *)a2 + 31) >= 0)
      v7 = *((unsigned __int8 *)a2 + 31);
    else
      v7 = *((_QWORD *)a2 + 2);
    v8 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 5);
    if (v12 < 0)
      v8 = (void **)__p[0];
    if (v7)
    {
      if (*((char *)a2 + 31) >= 0)
        v9 = (char *)a2 + 8;
      else
        v9 = (char *)*((_QWORD *)a2 + 1);
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, ".pool");
    v6 = RequiredSubunitParser<ZinIrPoolUnitInfo>(a1, (const char *)__p, (uint64_t (*)(const void *, void **, CFArrayRef *))ZinParsePoolUnit, (uint64_t)a2 + 968, a3);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return v6;
}

void sub_206EE7D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::SerializeZinIrOpLayer(uint64_t *a1, ZinIrOpLayer *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  std::vector<std::string>::pointer end;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  ZinIrOpLayerOpCode *v19;
  unsigned int v20;
  uint64_t v21;
  ZinIrOpLayerOpCode *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *GroupId;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const ZinEngineLayer *v42;
  int IsNoOp;
  const char *v44;
  const char *v45;
  uint64_t v46;
  unsigned __int8 v47[24];
  char v48;
  void **v49[3];
  char v50;
  _BYTE v51[24];
  _BYTE v52[8];
  uint64_t v53;
  char v54;
  std::vector<std::string> v55;
  char *v56;
  char *v57;
  uint64_t v58;

  memset(&v55, 0, sizeof(v55));
  std::vector<std::string>::reserve(&v55, (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3);
  v8 = (uint64_t *)*((_QWORD *)a2 + 11);
  v9 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (v8 != v9)
  {
    end = v55.__end_;
    do
    {
      v11 = *v8;
      v12 = (__int128 *)(*v8 + 24);
      if (end >= v55.__end_cap_.__value_)
      {
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v55, (uint64_t)v12);
      }
      else
      {
        if (*(char *)(v11 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)(v11 + 24), *(_QWORD *)(v11 + 32));
        }
        else
        {
          v13 = *v12;
          end->__r_.__value_.__r.__words[2] = *(_QWORD *)(*v8 + 40);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v13;
        }
        ++end;
      }
      v55.__end_ = end;
      ++v8;
    }
    while (v8 != v9);
  }
  v14 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  if (!v14)
  {
    v27 = 3;
    goto LABEL_36;
  }
  LOBYTE(v53) = 0;
  v54 = 0;
  LOBYTE(v49[0]) = 0;
  v50 = 0;
  v51[0] = 0;
  v52[0] = 0;
  v47[0] = 0;
  v48 = 0;
  if (ZinIrOpLayer::IsANELayer(a2))
  {
    v15 = 0;
    v53 = *((_QWORD *)a2 + 45);
    v16 = 1;
    v54 = 1;
    do
    {
      v17 = v16;
      v18 = *((_QWORD *)a2 + v15 + 30);
      if (v18)
      {
        v19 = *(ZinIrOpLayerOpCode **)(v18 + 64);
        v20 = *((_DWORD *)v19 + 2);
        if (v20 != 102)
        {
          ZinIrEnumToStringUtil::OpCodeToString(v20, &v56);
          if (v58 >= 0)
            v44 = (const char *)&v56;
          else
            v44 = v56;
          ZinAssertImpl("Unsupported serialization for DMA layer type %s", v44);
        }
        std::optional<ZinIrDMAConvertInfo>::operator=[abi:ne180100]<ZinIrDMAConvertInfo const&,void>((uint64_t)&v49[4 * v15], v19);
      }
      v16 = 0;
      v15 = 1;
    }
    while ((v17 & 1) != 0);
    v21 = *((_QWORD *)a2 + 32);
    if (v21)
    {
      v22 = *(ZinIrOpLayerOpCode **)(v21 + 64);
      v23 = *((_DWORD *)v22 + 2);
      if (v23 != 102)
      {
        ZinIrEnumToStringUtil::OpCodeToString(v23, &v56);
        if (v58 >= 0)
          v45 = (const char *)&v56;
        else
          v45 = v56;
        ZinAssertImpl("Unsupported serialization for DMA layer type %s", v45);
      }
      std::optional<ZinIrDMAConvertInfo>::operator=[abi:ne180100]<ZinIrDMAConvertInfo const&,void>((uint64_t)v47, v22);
    }
  }
  v46 = *(_QWORD *)(*((_QWORD *)a2 + 19) + 592);
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v46))ZinAssertImpl("Error: Basic block not found in map.");
  v24 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v46);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v25 = v24[3];
  v26 = a1[1];
  if (v26)
  {
    if (*a1 + 4 > (unint64_t)a1[2])
      goto LABEL_27;
    *(_DWORD *)(v26 + *a1) = *(_DWORD *)(*((_QWORD *)a2 + 8) + 8);
  }
  *a1 += 4;
  if (ZinSerial::BufferWriter::Write<std::string const>(a1, (_QWORD *)a2 + 3)
    || ZinSerial::Serializer::Serialize<std::string>(a1, (char **)&v55))
  {
    goto LABEL_27;
  }
  v30 = a1[1];
  v31 = *a1 + 4;
  if (v30)
  {
    if (v31 > a1[2])
      goto LABEL_27;
    *(_DWORD *)(v30 + *a1) = *(_DWORD *)(v14 + 88);
    v33 = *a1;
    v32 = a1[1];
    v31 = *a1 + 4;
    *a1 = v31;
    if (v32)
    {
      if (v33 + 12 > (unint64_t)a1[2])
        goto LABEL_27;
      *(_QWORD *)(v32 + v31) = *((_QWORD *)a2 + 6);
      v35 = *a1;
      v34 = a1[1];
      v36 = *a1 + 8;
      *a1 = v36;
      if (v34)
      {
        if (v35 + 16 > (unint64_t)a1[2])
          goto LABEL_27;
        *(_QWORD *)(v34 + v36) = *((_QWORD *)a2 + 1);
        v36 = *a1;
      }
      goto LABEL_46;
    }
  }
  else
  {
    *a1 = v31;
  }
  v36 = v31 + 8;
  *a1 = v36;
LABEL_46:
  *a1 = v36 + 8;
  GroupId = (_QWORD *)ZinIrOpLayer::GetGroupId(a2);
  v38 = a1[1];
  v39 = *a1 + 8;
  if (v38)
  {
    if (v39 > a1[2])
      goto LABEL_27;
    *(_QWORD *)(v38 + *a1) = *GroupId;
    v41 = *a1;
    v40 = a1[1];
    v39 = *a1 + 8;
    *a1 = v39;
    if (v40)
    {
      if (v41 + 16 > (unint64_t)a1[2])
        goto LABEL_27;
      *(_QWORD *)(v40 + v39) = v25;
      v39 = *a1;
    }
  }
  else
  {
    *a1 = v39;
  }
  *a1 = v39 + 8;
  if (!ZinSerial::Serializer::Serialize<long>(a1, (uint64_t)&v53)
    && !ZinSerial::Serializer::Serialize((ZinSerial::Serializer *)a1, (const ZinTensorDimensions *)(v14 + 48))&& !ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>,2ul>((ZinSerial::Serializer *)a1, (uint64_t)v49)&& !ZinSerial::Serializer::Serialize<ZinIrDMAConvertInfo>((ZinSerial::Serializer *)a1, v47))
  {
    if (!ZinIrOpLayer::IsANELayer(a2))
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      IsNoOp = ZinIrOpLayer::IsNoOp(a2, (uint64_t *)&v56);
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (!IsNoOp)
        ZinAssertImpl("Unexpected OpLayer type during serialization.");
      v27 = ZinSerial::SerializeNoOpLayer(a1, a2, a3);
      goto LABEL_28;
    }
    if (!ZinSerial::SerializeZinEngineLayer((ZinSerial *)a1, a2, v42))
    {
      if (ZinSerial::SerializeOpLayerMirInfoAndSymbols((ZinSerial::Serializer *)a1, (const ZinEngineLayerMirInfo **)a2, a3))v27 = 3;
      else
        v27 = 0;
      goto LABEL_28;
    }
  }
LABEL_27:
  v27 = 3;
LABEL_28:
  if (v48)
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v47);
  for (i = 0; i != -64; i -= 32)
  {
    if (v52[i])
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v51[i]);
  }
LABEL_36:
  v49[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v49);
  return v27;
}

void sub_206EE8244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;
  uint64_t v28;

  v27 = *(void **)(v25 - 104);
  if (v27)
  {
    *(_QWORD *)(v25 - 96) = v27;
    operator delete(v27);
  }
  if (a14)
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a11);
  v28 = 0;
  while (1)
  {
    if (LOBYTE((&a15)[v28 + 7]))
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&(&a15)[v28 + 4]);
    v28 -= 4;
    if (v28 == -8)
    {
      a15 = (void **)&a25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>,2ul>(ZinSerial::Serializer *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v5[3];
  unsigned __int8 **v6;

  memset(v5, 0, sizeof(v5));
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__init_with_size[abi:ne180100]<std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*>((ZinIrOpLayerOpCode *)v5, a2, a2 + 64, 2uLL);
  v3 = ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>>(a1, v5);
  v6 = v5;
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  return v3;
}

void sub_206EE835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrDMAConvertInfo>(ZinSerial::Serializer *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;

  v2 = a2[24];
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v3 + *(_QWORD *)a1) = v2;
  }
  ++*(_QWORD *)a1;
  if (!v2)
    return 0;
  if (!a2[24])
    std::__throw_bad_optional_access[abi:ne180100]();
  return ZinSerial::Serializer::Serialize(a1, (const ZinIrDMAConvertInfo *)a2);
}

uint64_t ZinSerial::SerializeZinEngineLayer(ZinSerial *this, ZinSerial::Serializer *a2, const ZinEngineLayer *a3)
{
  uint64_t v5;
  const ZinIrBroadcastInfo *v6;
  uint64_t OutputScale;
  uint64_t OutputBias;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  ZinReshapeLayer *ReshapeInfo;
  uint64_t v31;
  ZinSerial *v32;
  uint64_t v33;
  int v34;
  uint64_t Seeds;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const ZinNELayer *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const ZinIrElementWiseInfo *v48;
  uint64_t v49;
  const ZinIrPoolingInfo *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const ZinIrActivationParams *v54;
  ZinReshapeLayer *v55;
  char **v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  const ZinIrBroadcastInfo *v60;
  uint64_t v61;
  const ZinIrActivationParams *v62;
  uint64_t v63;
  uint64_t v64;
  const ZinIrElementWiseInfo *v65;
  uint64_t v66;
  const ZinIrActivationParams *v67;
  uint64_t v68;
  const ZinIrActivationParams *v69;
  uint64_t v70;
  const ZinIrActivationParams *v71;
  ZinReshapeLayer *v72;
  uint64_t v73;
  ZinSerial::Serializer *v74;
  char **v75;
  ZinReshapeLayer *v76;
  uint64_t v77;
  uint64_t v78;
  const ZinIrActivationParams *v79;
  ZinReshapeLayer *v80;
  char **v81;
  uint64_t v82;
  const ZinIrActivationParams *v83;
  ZinReshapeLayer *v84;
  uint64_t v85;
  uint64_t v86;
  const ZinIrElementWiseInfo *v87;
  const ZinIrActivationParams *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const ZinIrActivationParams *v92;
  const ZinIrActivationParams *v93;
  ZinReshapeLayer *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  ZinReshapeLayer *v119;
  uint64_t v120;
  uint64_t v121;
  const ZinIrPoolingInfo *v122;
  uint64_t v123;
  const ZinIrElementWiseInfo *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  int v156;
  const ZinIrActivationParams *v157;
  const ZinIrElementWiseInfo *v158;
  const ZinIrReductionInfo *v159;
  const ZinIrScaledEWInfo *v160;
  char **v161;
  const ZinIrBroadcastInfo *v162;
  uint64_t v163;
  char **v164;
  const ZinIrPoolingInfo *v165;
  char **v166;
  const ZinIrIndexInfo *v167;
  const ZinIrDynamicGOCInfo *v168;
  char **v169;
  void *v170;
  int v171;
  _BYTE v172[28];
  void *__p;
  _BYTE v174[32];
  char v175;

  if (ZinIrOpLayer::IsNELayer(a2))
  {
    v5 = *((_QWORD *)a2 + 46);
    if (v5)
      v6 = *(const ZinIrBroadcastInfo **)(v5 + 64);
    else
      v6 = 0;
    v10 = *((_QWORD *)a2 + 47);
    if (v10)
    {
      v11 = operator new();
      v13 = *(_OWORD *)(v10 + 208);
      v12 = *(_OWORD *)(v10 + 224);
      *(_OWORD *)v11 = *(_OWORD *)(v10 + 192);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v12;
      v14 = *(_OWORD *)(v10 + 288);
      v16 = *(_OWORD *)(v10 + 240);
      v15 = *(_OWORD *)(v10 + 256);
      *(_OWORD *)(v11 + 80) = *(_OWORD *)(v10 + 272);
      *(_OWORD *)(v11 + 96) = v14;
      *(_OWORD *)(v11 + 48) = v16;
      *(_OWORD *)(v11 + 64) = v15;
      v18 = *(_OWORD *)(v10 + 320);
      v17 = *(_OWORD *)(v10 + 336);
      v19 = *(_OWORD *)(v10 + 304);
      *(_QWORD *)(v11 + 160) = *(_QWORD *)(v10 + 352);
      *(_OWORD *)(v11 + 128) = v18;
      *(_OWORD *)(v11 + 144) = v17;
      *(_OWORD *)(v11 + 112) = v19;
    }
    else
    {
      v11 = 0;
    }
    v20 = *((_QWORD *)a2 + 49);
    if (v20)
    {
      v21 = operator new();
      v22 = *(_OWORD *)(v20 + 192);
      v23 = *(_OWORD *)(v20 + 224);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)(v20 + 208);
      *(_OWORD *)(v21 + 32) = v23;
      *(_OWORD *)v21 = v22;
      v24 = *(_OWORD *)(v20 + 240);
      v25 = *(_OWORD *)(v20 + 256);
      v26 = *(_OWORD *)(v20 + 288);
      *(_OWORD *)(v21 + 80) = *(_OWORD *)(v20 + 272);
      *(_OWORD *)(v21 + 96) = v26;
      *(_OWORD *)(v21 + 48) = v24;
      *(_OWORD *)(v21 + 64) = v25;
      v27 = *(_OWORD *)(v20 + 304);
      v28 = *(_OWORD *)(v20 + 320);
      v29 = *(_OWORD *)(v20 + 336);
      *(_QWORD *)(v21 + 160) = *(_QWORD *)(v20 + 352);
      *(_OWORD *)(v21 + 128) = v28;
      *(_OWORD *)(v21 + 144) = v29;
      *(_OWORD *)(v21 + 112) = v27;
    }
    else
    {
      v21 = 0;
    }
    ReshapeInfo = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 416))(a2);
    if (ReshapeInfo)
      ReshapeInfo = (ZinReshapeLayer *)ZinReshapeLayer::GetReshapeInfo(ReshapeInfo);
    v163 = *(_QWORD *)((char *)a2 + 420);
    v166 = (char **)ReshapeInfo;
    if ((v163 & 0xFF00000000) == 0)
      ZinAssertImpl("Binary point not set.");
    LOBYTE(__p) = 0;
    v175 = 0;
    v31 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 576))(a2);
    if (v31)
    {
      v32 = this;
      v33 = *(_QWORD *)(v31 + 64);
      v34 = *(_DWORD *)(v33 + 12);
      Seeds = ZinIrStochasticRoundInfo::GetSeeds((ZinIrStochasticRoundInfo *)v33);
      v37 = v36;
      v38 = *(_QWORD *)(v33 + 32);
      ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)&v170, 72);
      v170 = &unk_24C022FA0;
      *(_DWORD *)v172 = v34;
      *(_QWORD *)&v172[4] = Seeds;
      *(_QWORD *)&v172[12] = v37;
      *(_QWORD *)&v172[20] = v38;
      if (v175)
      {
        *(_OWORD *)&v174[4] = *(_OWORD *)v172;
        *(_OWORD *)&v174[16] = *(_OWORD *)&v172[12];
      }
      else
      {
        __p = &unk_24C022FA0;
        *(_OWORD *)&v174[4] = *(_OWORD *)v172;
        *(_OWORD *)&v174[16] = *(_OWORD *)&v172[12];
        v175 = 1;
      }
      this = v32;
      *(_DWORD *)v174 = v171;
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v170);
    }
    if (ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(this, v6)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v11)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v21)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v166))
    {
      goto LABEL_31;
    }
    v40 = *((_QWORD *)this + 1);
    if (v40)
    {
      if ((unint64_t)(*(_QWORD *)this + 4) > *((_QWORD *)this + 2))
        goto LABEL_31;
      *(_DWORD *)(v40 + *(_QWORD *)this) = v163;
    }
    *(_QWORD *)this += 4;
    if (!ZinSerial::SerializeNEKernelInfo(this, a2, v39))
    {
      if (ZinSerial::Serializer::Serialize<ZinIrStochasticRoundInfo>(this, (unsigned __int8 *)&__p))
        v9 = 3;
      else
        v9 = 0;
      goto LABEL_32;
    }
LABEL_31:
    v9 = 3;
LABEL_32:
    if (v175)
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__p);
    if (v21)
      MEMORY[0x20BD002F8](v21, 0x1000C4097E74013);
    if (v11)
      MEMORY[0x20BD002F8](v11, 0x1000C4097E74013);
    if (!(_DWORD)v9)
    {
      v9 = 6;
      switch(*(_DWORD *)(*((_QWORD *)a2 + 8) + 8))
      {
        case 'U':
          v42 = *(_QWORD *)this;
          v43 = *((_QWORD *)this + 1);
          if (v43)
          {
            if ((unint64_t)(v42 + 1) > *((_QWORD *)this + 2))
              return 3;
            *(_BYTE *)(v43 + v42) = *((_QWORD *)a2 + 54) != 0;
            v42 = *(_QWORD *)this;
          }
          v9 = 0;
          *(_QWORD *)this = v42 + 1;
          break;
        case 'Y':
          v49 = *((_QWORD *)a2 + 54);
          if (v49)
            v50 = *(const ZinIrPoolingInfo **)(v49 + 64);
          else
            v50 = 0;
          v58 = ZinSerial::Serializer::Serialize<ZinIrPoolingInfo>(this, v50);
          goto LABEL_71;
        case 'Z':
          __p = 0;
          *(_QWORD *)v174 = 0;
          *(_QWORD *)&v174[8] = 0;
          std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *((const void **)a2 + 54), *((_QWORD *)a2 + 55), (uint64_t)(*((_QWORD *)a2 + 55) - *((_QWORD *)a2 + 54)) >> 2);
          v47 = *((_QWORD *)a2 + 57);
          if (v47)
            v48 = *(const ZinIrElementWiseInfo **)(v47 + 64);
          else
            v48 = 0;
          if (ZinSerial::Serializer::Serialize<ZinDramDependentSrcType>((uint64_t *)this, (char **)&__p))
          {
            v9 = 3;
          }
          else if (ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v48))
          {
            v9 = 3;
          }
          else
          {
            v9 = 0;
          }
          if (__p)
          {
            *(_QWORD *)v174 = __p;
            operator delete(__p);
          }
          break;
        case '\\':
          v51 = *((_QWORD *)a2 + 54);
          if (v51)
            v52 = *(_QWORD *)(v51 + 64);
          else
            v52 = 0;
          v58 = ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v52);
LABEL_71:
          if (v58)
            v9 = 3;
          else
            v9 = 0;
          break;
        default:
          return v9;
      }
    }
    return v9;
  }
  if (!ZinIrOpLayer::IsPELayer(a2))
    ZinAssertImpl("Unsupported engine layer type.");
  OutputScale = ZinPELayer::GetOutputScale(a2);
  OutputBias = ZinPELayer::GetOutputBias(a2);
  if (ZinSerial::Serializer::Serialize<SingularValue>((unint64_t *)this, OutputScale)
    || ZinSerial::Serializer::Serialize<SingularValue>((unint64_t *)this, OutputBias))
  {
    return 3;
  }
  v44 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 8);
  if (v44 == 81)
  {
    v57 = *((_QWORD *)a2 + 57);
    if (v57)
      v167 = *(const ZinIrIndexInfo **)(v57 + 64);
    else
      v167 = 0;
    v76 = (ZinReshapeLayer *)*((_QWORD *)a2 + 58);
    if (v76)
      v164 = (char **)ZinReshapeLayer::GetReshapeInfo(v76);
    else
      v164 = 0;
    v77 = *((_QWORD *)a2 + 59);
    if (v77)
      v162 = *(const ZinIrBroadcastInfo **)(v77 + 64);
    else
      v162 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 576))(a2))
      v78 = *(_QWORD *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 584))(a2) + 64);
    else
      v78 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 608))(a2))
      v79 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 624))(a2)
                                          + 192);
    else
      v79 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 640))(a2))
    {
      v80 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 712))(a2);
      v81 = (char **)ZinReshapeLayer::GetReshapeInfo(v80);
    }
    else
    {
      v81 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 592))(a2))
      v82 = *(_QWORD *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 600))(a2) + 64);
    else
      v82 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 616))(a2))
      v83 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 632))(a2)
                                          + 192);
    else
      v83 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 648))(a2))
    {
      v84 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 720))(a2);
      v85 = ZinReshapeLayer::GetReshapeInfo(v84);
    }
    else
    {
      v85 = 0;
    }
    v86 = *((_QWORD *)a2 + 60);
    v161 = (char **)v85;
    if (v86)
      v160 = *(const ZinIrScaledEWInfo **)(v86 + 64);
    else
      v160 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 792))(a2))
      v87 = *(const ZinIrElementWiseInfo **)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 808))(a2)
                                           + 64);
    else
      v87 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 800))(a2))
      v88 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 816))(a2)
                                          + 192);
    else
      v88 = 0;
    v89 = *((_QWORD *)a2 + 63);
    if (v89)
      v159 = *(const ZinIrReductionInfo **)(v89 + 64);
    else
      v159 = 0;
    v90 = *((_QWORD *)a2 + 67);
    if (v90)
      v158 = *(const ZinIrElementWiseInfo **)(v90 + 64);
    else
      v158 = 0;
    v156 = *((_DWORD *)a2 + 132);
    v91 = *((_QWORD *)a2 + 68);
    if (v91)
      v92 = (const ZinIrActivationParams *)(v91 + 192);
    else
      v92 = 0;
    v157 = v92;
    v93 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 680))(a2))
      v93 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 776))(a2)
                                          + 192);
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 408))(a2))
    {
      v94 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 416))(a2);
      v155 = ZinReshapeLayer::GetReshapeInfo(v94);
    }
    else
    {
      v155 = 0;
    }
    if (ZinSerial::Serializer::Serialize<ZinIrIndexInfo>(this, v167)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v164)
      || ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(this, v162)
      || ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v78)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v79)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v81)
      || ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v82)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v83)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v161)
      || ZinSerial::Serializer::Serialize<ZinIrScaledEWInfo>(this, v160)
      || ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v87)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v88)
      || ZinSerial::Serializer::Serialize<ZinIrReductionInfo>(this, v159)
      || ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)this, (uint64_t)a2 + 512)
      || ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)this, (uint64_t)a2 + 520))
    {
      return 3;
    }
    v95 = *((_QWORD *)this + 1);
    if (v95)
    {
      if ((unint64_t)(*(_QWORD *)this + 4) > *((_QWORD *)this + 2))
        return 3;
      *(_DWORD *)(v95 + *(_QWORD *)this) = v156;
    }
    *(_QWORD *)this += 4;
    if (ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v158)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v157))
    {
      return 3;
    }
    v9 = 3;
    if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v93))
      return v9;
    v74 = this;
    v75 = (char **)v155;
LABEL_114:
    if (ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(v74, v75))
      return 3;
    else
      return 0;
  }
  if (v44 == 84)
  {
    v53 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 624))(a2);
    if (v53)
      v54 = (const ZinIrActivationParams *)(v53 + 192);
    else
      v54 = 0;
    v55 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 712))(a2);
    if (v55)
      v56 = (char **)ZinReshapeLayer::GetReshapeInfo(v55);
    else
      v56 = 0;
    v59 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 696))(a2);
    if (v59)
      v60 = *(const ZinIrBroadcastInfo **)(v59 + 64);
    else
      v60 = 0;
    v61 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 632))(a2);
    if (v61)
      v62 = (const ZinIrActivationParams *)(v61 + 192);
    else
      v62 = 0;
    v63 = *((_QWORD *)a2 + 55);
    if (v63)
      v168 = *(const ZinIrDynamicGOCInfo **)(v63 + 64);
    else
      v168 = 0;
    v64 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 808))(a2);
    if (v64)
      v65 = *(const ZinIrElementWiseInfo **)(v64 + 64);
    else
      v65 = 0;
    v66 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 816))(a2);
    if (v66)
      v67 = (const ZinIrActivationParams *)(v66 + 192);
    else
      v67 = 0;
    v68 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 776))(a2);
    if (v68)
      v69 = (const ZinIrActivationParams *)(v68 + 192);
    else
      v69 = 0;
    v70 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 784))(a2);
    if (v70)
      v71 = (const ZinIrActivationParams *)(v70 + 192);
    else
      v71 = 0;
    v72 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 416))(a2);
    if (v72)
      v73 = ZinReshapeLayer::GetReshapeInfo(v72);
    else
      v73 = 0;
    if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v54)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v56)
      || ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(this, v60)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v62)
      || ZinSerial::Serializer::Serialize<ZinIrDynamicGOCInfo>(this, v168)
      || ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v65)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v67)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v69))
    {
      return 3;
    }
    v9 = 3;
    if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v71))
      return v9;
    v74 = this;
    v75 = (char **)v73;
    goto LABEL_114;
  }
  if (v44 != 83)
    return 6;
  v45 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 584))(a2);
  if (v45)
    v46 = *(_QWORD *)(v45 + 64);
  else
    v46 = 0;
  v96 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 624))(a2);
  if (v96)
  {
    v97 = v96;
    v98 = operator new();
    v100 = *(_OWORD *)(v97 + 208);
    v99 = *(_OWORD *)(v97 + 224);
    *(_OWORD *)v98 = *(_OWORD *)(v97 + 192);
    *(_OWORD *)(v98 + 16) = v100;
    *(_OWORD *)(v98 + 32) = v99;
    v101 = *(_OWORD *)(v97 + 288);
    v103 = *(_OWORD *)(v97 + 240);
    v102 = *(_OWORD *)(v97 + 256);
    *(_OWORD *)(v98 + 80) = *(_OWORD *)(v97 + 272);
    *(_OWORD *)(v98 + 96) = v101;
    *(_OWORD *)(v98 + 48) = v103;
    *(_OWORD *)(v98 + 64) = v102;
    v105 = *(_OWORD *)(v97 + 320);
    v104 = *(_OWORD *)(v97 + 336);
    v106 = *(_OWORD *)(v97 + 304);
    *(_QWORD *)(v98 + 160) = *(_QWORD *)(v97 + 352);
    *(_OWORD *)(v98 + 128) = v105;
    *(_OWORD *)(v98 + 144) = v104;
    *(_OWORD *)(v98 + 112) = v106;
  }
  else
  {
    v98 = 0;
  }
  v107 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 600))(a2);
  if (v107)
    v108 = *(_QWORD *)(v107 + 64);
  else
    v108 = 0;
  v109 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 632))(a2);
  if (v109)
  {
    v110 = operator new();
    v111 = *(_OWORD *)(v109 + 192);
    v112 = *(_OWORD *)(v109 + 224);
    *(_OWORD *)(v110 + 16) = *(_OWORD *)(v109 + 208);
    *(_OWORD *)(v110 + 32) = v112;
    *(_OWORD *)v110 = v111;
    v113 = *(_OWORD *)(v109 + 240);
    v114 = *(_OWORD *)(v109 + 256);
    v115 = *(_OWORD *)(v109 + 288);
    *(_OWORD *)(v110 + 80) = *(_OWORD *)(v109 + 272);
    *(_OWORD *)(v110 + 96) = v115;
    *(_OWORD *)(v110 + 48) = v113;
    *(_OWORD *)(v110 + 64) = v114;
    v116 = *(_OWORD *)(v109 + 304);
    v117 = *(_OWORD *)(v109 + 320);
    v118 = *(_OWORD *)(v109 + 336);
    *(_QWORD *)(v110 + 160) = *(_QWORD *)(v109 + 352);
    *(_OWORD *)(v110 + 128) = v117;
    *(_OWORD *)(v110 + 144) = v118;
    *(_OWORD *)(v110 + 112) = v116;
  }
  else
  {
    v110 = 0;
  }
  v119 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 720))(a2);
  if (v119)
    v120 = ZinReshapeLayer::GetReshapeInfo(v119);
  else
    v120 = 0;
  v121 = *((_QWORD *)a2 + 54);
  if (v121)
    v122 = *(const ZinIrPoolingInfo **)(v121 + 64);
  else
    v122 = 0;
  v123 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 808))(a2);
  v165 = v122;
  v169 = (char **)v120;
  if (v123)
  {
    ZinIrElementWiseInfo::Clone(*(ZinIrElementWiseInfo **)(v123 + 64), (uint64_t *)&__p);
    v124 = (const ZinIrElementWiseInfo *)__p;
  }
  else
  {
    v124 = 0;
  }
  v125 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 816))(a2);
  if (v125)
  {
    v126 = operator new();
    v127 = *(_OWORD *)(v125 + 192);
    v128 = *(_OWORD *)(v125 + 224);
    *(_OWORD *)(v126 + 16) = *(_OWORD *)(v125 + 208);
    *(_OWORD *)(v126 + 32) = v128;
    *(_OWORD *)v126 = v127;
    v129 = *(_OWORD *)(v125 + 240);
    v130 = *(_OWORD *)(v125 + 256);
    v131 = *(_OWORD *)(v125 + 288);
    *(_OWORD *)(v126 + 80) = *(_OWORD *)(v125 + 272);
    *(_OWORD *)(v126 + 96) = v131;
    *(_OWORD *)(v126 + 48) = v129;
    *(_OWORD *)(v126 + 64) = v130;
    v132 = *(_OWORD *)(v125 + 304);
    v133 = *(_OWORD *)(v125 + 320);
    v134 = *(_OWORD *)(v125 + 336);
    *(_QWORD *)(v126 + 160) = *(_QWORD *)(v125 + 352);
    *(_OWORD *)(v126 + 128) = v133;
    *(_OWORD *)(v126 + 144) = v134;
    *(_OWORD *)(v126 + 112) = v132;
  }
  else
  {
    v126 = 0;
  }
  v135 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 776))(a2);
  if (v135)
  {
    v136 = operator new();
    v137 = *(_OWORD *)(v135 + 192);
    v138 = *(_OWORD *)(v135 + 224);
    *(_OWORD *)(v136 + 16) = *(_OWORD *)(v135 + 208);
    *(_OWORD *)(v136 + 32) = v138;
    *(_OWORD *)v136 = v137;
    v139 = *(_OWORD *)(v135 + 240);
    v140 = *(_OWORD *)(v135 + 256);
    v141 = *(_OWORD *)(v135 + 288);
    *(_OWORD *)(v136 + 80) = *(_OWORD *)(v135 + 272);
    *(_OWORD *)(v136 + 96) = v141;
    *(_OWORD *)(v136 + 48) = v139;
    *(_OWORD *)(v136 + 64) = v140;
    v142 = *(_OWORD *)(v135 + 304);
    v143 = *(_OWORD *)(v135 + 320);
    v144 = *(_OWORD *)(v135 + 336);
    *(_QWORD *)(v136 + 160) = *(_QWORD *)(v135 + 352);
    *(_OWORD *)(v136 + 128) = v143;
    *(_OWORD *)(v136 + 144) = v144;
    *(_OWORD *)(v136 + 112) = v142;
  }
  else
  {
    v136 = 0;
  }
  v145 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(_QWORD *)a2 + 784))(a2);
  if (v145)
  {
    v146 = operator new();
    v147 = *(_OWORD *)(v145 + 192);
    v148 = *(_OWORD *)(v145 + 224);
    *(_OWORD *)(v146 + 16) = *(_OWORD *)(v145 + 208);
    *(_OWORD *)(v146 + 32) = v148;
    *(_OWORD *)v146 = v147;
    v149 = *(_OWORD *)(v145 + 240);
    v150 = *(_OWORD *)(v145 + 256);
    v151 = *(_OWORD *)(v145 + 288);
    *(_OWORD *)(v146 + 80) = *(_OWORD *)(v145 + 272);
    *(_OWORD *)(v146 + 96) = v151;
    *(_OWORD *)(v146 + 48) = v149;
    *(_OWORD *)(v146 + 64) = v150;
    v152 = *(_OWORD *)(v145 + 304);
    v153 = *(_OWORD *)(v145 + 320);
    v154 = *(_OWORD *)(v145 + 336);
    *(_QWORD *)(v146 + 160) = *(_QWORD *)(v145 + 352);
    *(_OWORD *)(v146 + 128) = v153;
    *(_OWORD *)(v146 + 144) = v154;
    *(_OWORD *)(v146 + 112) = v152;
  }
  else
  {
    v146 = 0;
  }
  if (!ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v46)
    && !ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v98)
    && !ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v108)
    && !ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v110)
    && !ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v169)
    && !ZinSerial::Serializer::Serialize<ZinIrPoolingInfo>(this, v165)
    && !ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v124)
    && !ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v126)
    && !ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v136))
  {
    if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, (const ZinIrActivationParams *)v146))v9 = 3;
    else
      v9 = 0;
    if (!v146)
      goto LABEL_226;
    goto LABEL_225;
  }
  v9 = 3;
  if (v146)
LABEL_225:
    MEMORY[0x20BD002F8](v146, 0x1000C4097E74013);
LABEL_226:
  if (v136)
    MEMORY[0x20BD002F8](v136, 0x1000C4097E74013);
  if (v126)
    MEMORY[0x20BD002F8](v126, 0x1000C4097E74013);
  if (v124)
    (*(void (**)(const ZinIrElementWiseInfo *))(*(_QWORD *)v124 + 8))(v124);
  if (v110)
    MEMORY[0x20BD002F8](v110, 0x1000C4097E74013);
  if (v98)
    MEMORY[0x20BD002F8](v98, 0x1000C4097E74013);
  return v9;
}

void sub_206EE92B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (v33)
  {
    MEMORY[0x20BD002F8](v33, 0x1000C4097E74013);
    if (v32)
      goto LABEL_3;
  }
  else if (v32)
  {
LABEL_3:
    MEMORY[0x20BD002F8](v32, 0x1000C4097E74013);
    if (!v31)
      goto LABEL_8;
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_8:
    if (v30)
      MEMORY[0x20BD002F8](v30, 0x1000C4097E74013);
    if (v29)
      MEMORY[0x20BD002F8](v29, 0x1000C4097E74013);
    _Unwind_Resume(a1);
  }
  if (!v31)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t ZinSerial::SerializeOpLayerMirInfoAndSymbols(ZinSerial::Serializer *a1, const ZinEngineLayerMirInfo **this, _QWORD *a3)
{
  const ZinEngineLayerMirInfo *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *L2RdAccess;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t MirUnitSymbolInfoFromL2Access;
  int v14;
  int v15;
  int v16;
  int v17;
  const ZinEngineLayerMirInfo *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t MirUnitSymbolInfoFromDRAMAccess;
  uint64_t v26;

  if (!ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)this))
    return 6;
  v6 = this[33];
  if (!v6)
    goto LABEL_18;
  if (ZinSerial::Serializer::Serialize<ZinEngineLayerMirInfo>(a1, v6))
    return 3;
  v8 = (uint64_t)this[33];
  if (!v8)
    goto LABEL_18;
  L2RdAccess = (unsigned int *)ZinEngineLayerMirInfo::GetL2RdAccess(v8, 0);
  v10 = (unsigned int *)ZinEngineLayerMirInfo::GetL2RdAccess((uint64_t)this[33], 1);
  v11 = (unsigned int *)ZinEngineLayerMirInfo::GetL2RdAccess((uint64_t)this[33], 2);
  v12 = (unsigned int *)((char *)this[33] + 1608);
  MirUnitSymbolInfoFromL2Access = ZinSerial::GetMirUnitSymbolInfoFromL2Access(L2RdAccess, a3);
  LOBYTE(L2RdAccess) = v14;
  MirUnitSymbolInfoFromDRAMAccess = MirUnitSymbolInfoFromL2Access;
  LODWORD(v26) = v14;
  v23 = ZinSerial::GetMirUnitSymbolInfoFromL2Access(v10, a3);
  LODWORD(v24) = v15;
  v21 = ZinSerial::GetMirUnitSymbolInfoFromL2Access(v11, a3);
  LODWORD(v22) = v16;
  v19 = ZinSerial::GetMirUnitSymbolInfoFromL2Access(v12, a3);
  LODWORD(v20) = v17;
  if (!(_BYTE)L2RdAccess
    || !(_BYTE)v17
    || ZinSerial::Serializer::Serialize((unint64_t *)a1, &MirUnitSymbolInfoFromDRAMAccess)
    || ZinSerial::Serializer::Serialize<ZinMirUnitL2Symbol>((unint64_t *)a1, (uint64_t)&v23)
    || ZinSerial::Serializer::Serialize<ZinMirUnitL2Symbol>((unint64_t *)a1, (uint64_t)&v21)
    || ZinSerial::Serializer::Serialize((unint64_t *)a1, &v19))
  {
    return 3;
  }
  v18 = this[33];
  if (!v18)
LABEL_18:
    ZinAssertImpl("No MIR info present!", v19, v20, v21, v22, v23, v24, MirUnitSymbolInfoFromDRAMAccess, v26);
  MirUnitSymbolInfoFromDRAMAccess = ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess((uint64_t)v18 + 712, a3);
  v23 = ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess((uint64_t)this[33] + 808, a3);
  v21 = ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess((uint64_t)this[33] + 904, a3);
  if (ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)a1, (uint64_t)&MirUnitSymbolInfoFromDRAMAccess))return 3;
  if (ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)a1, (uint64_t)&v23))
    return 3;
  result = ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)a1, (uint64_t)&v21);
  if ((_DWORD)result)
    return 3;
  return result;
}

uint64_t ZinSerial::SerializeNoOpLayer(uint64_t *a1, ZinTransposeLayer *this, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void ***v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  ZinIrTensor *v26;
  ZinIrTensor *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  int v32;
  BOOL IsResident;
  const ZinIrReshapeInfo *ReshapeInfo;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int64x2_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  int64x2_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  int64x2_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  int64x2_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  char *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  int64x2_t v120;
  char *v121;
  int64x2_t v122;
  _QWORD v123[2];
  void **Interleave;
  int64x2_t v125;
  char *v126;
  _QWORD *v127;

  v4 = *((_QWORD *)this + 8);
  v5 = *(_DWORD *)(v4 + 8);
  result = 6;
  v9 = 0;
  switch(v5)
  {
    case 28:
    case 30:
    case 31:
      return v9;
    case 29:
      v10 = *(_QWORD *)((*(uint64_t (**)(ZinTransposeLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 104);
      if (!v10 || (v11 = *(void ****)(v10 + 40), v11 == *(void ****)(v10 + 48)) || (Interleave = *v11) == 0)
        ZinAssertImpl("Unexpected null symbol for ConstIn layer.");
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &Interleave))ZinAssertImpl("ConstIn' tensor's symbol not found in map.");
      v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &Interleave);
      if (!v12)
        goto LABEL_129;
      v13 = a1[1];
      if (!v13)
        goto LABEL_10;
      if (*a1 + 4 > (unint64_t)a1[2])
        return 3;
      *(_DWORD *)(v13 + *a1) = *((_DWORD *)v12 + 6);
LABEL_10:
      v9 = 0;
      v14 = *a1 + 4;
      goto LABEL_36;
    case 32:
    case 34:
      return result;
    case 33:
      v26 = (ZinIrTensor *)(*(uint64_t (**)(ZinTransposeLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
      if (!v26)
        ZinAssertImpl("Unexpected null tensor for alias layer.");
      v27 = v26;
      Interleave = (void **)ZinIrTensor::GetInterleave(v26);
      v125.i64[0] = v28;
      v29 = *((_QWORD *)v27 + 13);
      if (!v29 || (v30 = *(uint64_t **)(v29 + 40), v30 == *(uint64_t **)(v29 + 48)) || (v122.i64[0] = *v30) == 0)
        ZinAssertImpl("Unexpected null symbol for alias layer.", v122.i64[0]);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v122))ZinAssertImpl("Alias' tensor's symbol not found in map.", v122.i64[0]);
      v31 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v122);
      if (!v31)
LABEL_129:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v32 = *((_DWORD *)v31 + 6);
      IsResident = ZinIrTensor::IsResident(v27);
      if (ZinSerial::Serializer::Serialize<long>(a1, (uint64_t)&Interleave))
        return 3;
      v35 = a1[1];
      v36 = *a1 + 4;
      if (!v35)
        goto LABEL_35;
      if (v36 > a1[2])
        return 3;
      *(_DWORD *)(v35 + *a1) = v32;
      v38 = *a1;
      v37 = a1[1];
      v36 = *a1 + 4;
      *a1 = v36;
      if (!v37)
        goto LABEL_35;
      if (v38 + 5 > (unint64_t)a1[2])
        return 3;
      *(_BYTE *)(v37 + v36) = IsResident;
      v36 = *a1;
LABEL_35:
      v9 = 0;
      v14 = v36 + 1;
LABEL_36:
      *a1 = v14;
      return v9;
    case 35:
      ReshapeInfo = (const ZinIrReshapeInfo *)ZinReshapeLayer::GetReshapeInfo(this);
      return ZinSerial::Serializer::Serialize<ZinIrReshapeInfo>((ZinSerial::Serializer *)a1, ReshapeInfo);
    case 36:
      v17 = (*(uint64_t (**)(ZinTransposeLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
      if (!v17)
        ZinAssertImpl("Tensor should exist.");
      v18 = (_QWORD *)v17;
      v122 = 0uLL;
      v123[0] = 0;
      if (ZinViewLayer::IsViewInDimension(this, 0))
      {
        v19 = *(_QWORD *)(v4 + 16);
        v20 = v18[6];
        v21 = *(_QWORD *)(v4 + 56);
        v22 = operator new();
        v23 = v22;
        *(_DWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = 0;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_QWORD *)(v22 + 72) = -1;
        *(_QWORD *)v22 = off_24C021970;
        *(_QWORD *)(v22 + 8) = 0;
        *(_DWORD *)(v22 + 80) = v19;
        *(_DWORD *)(v22 + 84) = v20;
        *(_QWORD *)(v22 + 88) = v21;
        v24 = v122.i64[1];
        if (v122.i64[1] >= v123[0])
        {
          v39 = (v122.i64[1] - v122.i64[0]) >> 3;
          if ((unint64_t)(v39 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v40 = (v123[0] - v122.i64[0]) >> 2;
          if (v40 <= v39 + 1)
            v40 = v39 + 1;
          if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          v127 = v123;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v123, v41);
          else
            v42 = 0;
          v43 = (uint64_t *)&v42[8 * v39];
          v44 = &v42[8 * v41];
          v126 = v44;
          *v43 = v23;
          v25 = v43 + 1;
          v125.i64[1] = (uint64_t)(v43 + 1);
          v45 = (_QWORD *)v122.i64[1];
          v46 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] == v122.i64[0])
          {
            v48 = vdupq_n_s64(v122.u64[1]);
          }
          else
          {
            do
            {
              v47 = *--v45;
              *v45 = 0;
              *--v43 = v47;
            }
            while (v45 != v46);
            v48 = v122;
            v25 = (_QWORD *)v125.i64[1];
            v44 = v126;
          }
          v122.i64[0] = (uint64_t)v43;
          v122.i64[1] = (uint64_t)v25;
          v125 = v48;
          v49 = (char *)v123[0];
          v123[0] = v44;
          v126 = v49;
          Interleave = (void **)v48.i64[0];
          std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&Interleave);
        }
        else
        {
          *(_QWORD *)v122.i64[1] = v22;
          v25 = (_QWORD *)(v24 + 8);
        }
        v122.i64[1] = (uint64_t)v25;
      }
      if (ZinViewLayer::IsViewInDimension(this, 2))
      {
        v50 = *(_QWORD *)(v4 + 24);
        v51 = v18[7];
        v52 = *(_QWORD *)(v4 + 64);
        v53 = operator new();
        v54 = v53;
        *(_DWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)(v53 + 24) = 0;
        *(_OWORD *)(v53 + 40) = 0u;
        *(_QWORD *)(v53 + 72) = -1;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_QWORD *)v53 = off_24C021970;
        *(_QWORD *)(v53 + 8) = 0;
        *(_DWORD *)(v53 + 80) = v50;
        *(_DWORD *)(v53 + 84) = v51;
        *(_DWORD *)(v53 + 88) = v52;
        *(_DWORD *)(v53 + 92) = 2;
        v55 = v122.i64[1];
        if (v122.i64[1] >= v123[0])
        {
          v57 = (v122.i64[1] - v122.i64[0]) >> 3;
          if ((unint64_t)(v57 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v58 = (v123[0] - v122.i64[0]) >> 2;
          if (v58 <= v57 + 1)
            v58 = v57 + 1;
          if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          v127 = v123;
          if (v59)
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v123, v59);
          else
            v60 = 0;
          v61 = (uint64_t *)&v60[8 * v57];
          v62 = &v60[8 * v59];
          v126 = v62;
          *v61 = v54;
          v56 = v61 + 1;
          v125.i64[1] = (uint64_t)(v61 + 1);
          v63 = (_QWORD *)v122.i64[1];
          v64 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] == v122.i64[0])
          {
            v66 = vdupq_n_s64(v122.u64[1]);
          }
          else
          {
            do
            {
              v65 = *--v63;
              *v63 = 0;
              *--v61 = v65;
            }
            while (v63 != v64);
            v66 = v122;
            v56 = (_QWORD *)v125.i64[1];
            v62 = v126;
          }
          v122.i64[0] = (uint64_t)v61;
          v122.i64[1] = (uint64_t)v56;
          v125 = v66;
          v67 = (char *)v123[0];
          v123[0] = v62;
          v126 = v67;
          Interleave = (void **)v66.i64[0];
          std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&Interleave);
        }
        else
        {
          *(_QWORD *)v122.i64[1] = v53;
          v56 = (_QWORD *)(v55 + 8);
        }
        v122.i64[1] = (uint64_t)v56;
      }
      if (ZinViewLayer::IsViewInDimension(this, 3))
      {
        v68 = *(_QWORD *)(v4 + 32);
        v69 = v18[8];
        v70 = *(_QWORD *)(v4 + 72);
        v71 = operator new();
        v72 = v71;
        *(_DWORD *)(v71 + 32) = 0;
        *(_QWORD *)(v71 + 16) = 0;
        *(_QWORD *)(v71 + 24) = 0;
        *(_OWORD *)(v71 + 40) = 0u;
        *(_QWORD *)(v71 + 72) = -1;
        *(_OWORD *)(v71 + 56) = 0u;
        *(_QWORD *)v71 = off_24C021970;
        *(_QWORD *)(v71 + 8) = 0;
        *(_DWORD *)(v71 + 80) = v68;
        *(_DWORD *)(v71 + 84) = v69;
        *(_DWORD *)(v71 + 88) = v70;
        *(_DWORD *)(v71 + 92) = 3;
        v73 = v122.i64[1];
        if (v122.i64[1] >= v123[0])
        {
          v75 = (v122.i64[1] - v122.i64[0]) >> 3;
          if ((unint64_t)(v75 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v76 = (v123[0] - v122.i64[0]) >> 2;
          if (v76 <= v75 + 1)
            v76 = v75 + 1;
          if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v77 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v77 = v76;
          v127 = v123;
          if (v77)
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v123, v77);
          else
            v78 = 0;
          v79 = (uint64_t *)&v78[8 * v75];
          v80 = &v78[8 * v77];
          v126 = v80;
          *v79 = v72;
          v74 = v79 + 1;
          v125.i64[1] = (uint64_t)(v79 + 1);
          v81 = (_QWORD *)v122.i64[1];
          v82 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] == v122.i64[0])
          {
            v84 = vdupq_n_s64(v122.u64[1]);
          }
          else
          {
            do
            {
              v83 = *--v81;
              *v81 = 0;
              *--v79 = v83;
            }
            while (v81 != v82);
            v84 = v122;
            v74 = (_QWORD *)v125.i64[1];
            v80 = v126;
          }
          v122.i64[0] = (uint64_t)v79;
          v122.i64[1] = (uint64_t)v74;
          v125 = v84;
          v85 = (char *)v123[0];
          v123[0] = v80;
          v126 = v85;
          Interleave = (void **)v84.i64[0];
          std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&Interleave);
        }
        else
        {
          *(_QWORD *)v122.i64[1] = v71;
          v74 = (_QWORD *)(v73 + 8);
        }
        v122.i64[1] = (uint64_t)v74;
      }
      if (ZinViewLayer::IsViewInDimension(this, 4))
      {
        v86 = *(_QWORD *)(v4 + 40);
        v87 = v18[9];
        v88 = *(_QWORD *)(v4 + 80);
        v89 = operator new();
        v90 = v89;
        *(_DWORD *)(v89 + 32) = 0;
        *(_QWORD *)(v89 + 16) = 0;
        *(_QWORD *)(v89 + 24) = 0;
        *(_OWORD *)(v89 + 40) = 0u;
        *(_QWORD *)(v89 + 72) = -1;
        *(_OWORD *)(v89 + 56) = 0u;
        *(_QWORD *)v89 = off_24C021970;
        *(_QWORD *)(v89 + 8) = 0;
        *(_DWORD *)(v89 + 80) = v86;
        *(_DWORD *)(v89 + 84) = v87;
        *(_DWORD *)(v89 + 88) = v88;
        *(_DWORD *)(v89 + 92) = 4;
        v91 = v122.i64[1];
        if (v122.i64[1] >= v123[0])
        {
          v93 = (v122.i64[1] - v122.i64[0]) >> 3;
          if ((unint64_t)(v93 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v94 = (v123[0] - v122.i64[0]) >> 2;
          if (v94 <= v93 + 1)
            v94 = v93 + 1;
          if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v95 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v95 = v94;
          v127 = v123;
          if (v95)
            v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v123, v95);
          else
            v96 = 0;
          v97 = (uint64_t *)&v96[8 * v93];
          v98 = &v96[8 * v95];
          v126 = v98;
          *v97 = v90;
          v92 = v97 + 1;
          v125.i64[1] = (uint64_t)(v97 + 1);
          v99 = (_QWORD *)v122.i64[1];
          v100 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] == v122.i64[0])
          {
            v102 = vdupq_n_s64(v122.u64[1]);
          }
          else
          {
            do
            {
              v101 = *--v99;
              *v99 = 0;
              *--v97 = v101;
            }
            while (v99 != v100);
            v102 = v122;
            v92 = (_QWORD *)v125.i64[1];
            v98 = v126;
          }
          v122.i64[0] = (uint64_t)v97;
          v122.i64[1] = (uint64_t)v92;
          v125 = v102;
          v103 = (char *)v123[0];
          v123[0] = v98;
          v126 = v103;
          Interleave = (void **)v102.i64[0];
          std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&Interleave);
        }
        else
        {
          *(_QWORD *)v122.i64[1] = v89;
          v92 = (_QWORD *)(v91 + 8);
        }
        v122.i64[1] = (uint64_t)v92;
      }
      if (ZinViewLayer::IsViewInDimension(this, 1))
      {
        v104 = *(_QWORD *)(v4 + 48);
        v105 = v18[10];
        v106 = *(_QWORD *)(v4 + 88);
        v107 = operator new();
        v108 = v107;
        *(_DWORD *)(v107 + 32) = 0;
        *(_QWORD *)(v107 + 16) = 0;
        *(_QWORD *)(v107 + 24) = 0;
        *(_OWORD *)(v107 + 40) = 0u;
        *(_QWORD *)(v107 + 72) = -1;
        *(_OWORD *)(v107 + 56) = 0u;
        *(_QWORD *)v107 = off_24C021970;
        *(_QWORD *)(v107 + 8) = 0;
        *(_DWORD *)(v107 + 80) = v104;
        *(_DWORD *)(v107 + 84) = v105;
        *(_DWORD *)(v107 + 88) = v106;
        *(_DWORD *)(v107 + 92) = 1;
        v109 = v122.i64[1];
        if (v122.i64[1] >= v123[0])
        {
          v111 = (v122.i64[1] - v122.i64[0]) >> 3;
          if ((unint64_t)(v111 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v112 = (v123[0] - v122.i64[0]) >> 2;
          if (v112 <= v111 + 1)
            v112 = v111 + 1;
          if (v123[0] - v122.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v113 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v113 = v112;
          v127 = v123;
          if (v113)
            v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v123, v113);
          else
            v114 = 0;
          v115 = (uint64_t *)&v114[8 * v111];
          v116 = &v114[8 * v113];
          v126 = v116;
          *v115 = v108;
          v110 = v115 + 1;
          v125.i64[1] = (uint64_t)(v115 + 1);
          v117 = (_QWORD *)v122.i64[1];
          v118 = (_QWORD *)v122.i64[0];
          if (v122.i64[1] == v122.i64[0])
          {
            v120 = vdupq_n_s64(v122.u64[1]);
          }
          else
          {
            do
            {
              v119 = *--v117;
              *v117 = 0;
              *--v115 = v119;
            }
            while (v117 != v118);
            v120 = v122;
            v110 = (_QWORD *)v125.i64[1];
            v116 = v126;
          }
          v122.i64[0] = (uint64_t)v115;
          v122.i64[1] = (uint64_t)v110;
          v125 = v120;
          v121 = (char *)v123[0];
          v123[0] = v116;
          v126 = v121;
          Interleave = (void **)v120.i64[0];
          std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&Interleave);
        }
        else
        {
          *(_QWORD *)v122.i64[1] = v107;
          v110 = (_QWORD *)(v109 + 8);
        }
        v122.i64[1] = (uint64_t)v110;
      }
      v9 = ZinSerial::Serializer::Serialize<std::unique_ptr<ZinIrInputViewUnitInfo>>((ZinSerial::Serializer *)a1, (const ZinIrInputViewUnitInfo ***)&v122);
      Interleave = (void **)&v122;
      std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100](&Interleave);
      return v9;
    case 37:
      if ((ZinTransposeLayer::IsNoOpTranspose(this) & 1) == 0)
        ZinAssertImpl("Only to be used for NoOp transposes.");
      v16 = (char **)ZinReshapeLayer::GetReshapeInfo(this);
      if (!v16)
        ZinAssertImpl("Transpose should not have a null info.");
      return ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>((ZinSerial::Serializer *)a1, v16);
    default:
      if (v5 != 7)
        return result;
      return ZinSerial::Serializer::Serialize<ZinIrConcatInfo>((ZinSerial::Serializer *)a1, *((const ZinIrConcatInfo **)this + 8));
  }
}

void sub_206EE9F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  a18 = (void **)&a9;
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::SerializeOrderedOpLayers(uint64_t *a1, ZinIrOpLayer ***a2, _QWORD *a3, _QWORD *a4)
{
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  uint64_t v9;
  uint64_t result;
  ZinIrOpLayer *v11;

  v7 = *a2;
  v8 = a2[1];
  v9 = a1[1];
  if (v9)
  {
    if (*a1 + 4 > (unint64_t)a1[2])
      return 3;
    *(_DWORD *)(v9 + *a1) = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    v7 = *a2;
    v8 = a2[1];
  }
  *a1 += 4;
  while (1)
  {
    if (v7 == v8)
      return 0;
    v11 = *v7;
    result = ZinSerial::SerializeZinIrOpLayer(a1, *v7, a3, a4);
    if ((_DWORD)result)
      break;
    ++v7;
  }
  if ((_DWORD)result == 6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinSerial::SerializeOrderedOpLayers((uint64_t)v11);
    return 6;
  }
  return result;
}

uint64_t ZinSerial::SerializeGraphData(unint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int *v52;
  char *v53;
  char *v54;
  char *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  int v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *__format;
  unint64_t *v92;
  _OWORD v93[2];
  int v94;
  _OWORD v95[2];
  int v96;
  int v97;
  void *__p;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104[6];

  memset(v95, 0, sizeof(v95));
  v96 = 1065353216;
  memset(v93, 0, sizeof(v93));
  v94 = 1065353216;
  if (ZinSerial::SerializeSymbolTable(a1, a2, v95))
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinSerial::SerializeGraphData(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else if (ZinSerial::SerializeSymbolTable(a1, a3, v95))
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinSerial::SerializeGraphData(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  else if (ZinSerial::SerializeSymbolTable(a1, a4, v95))
  {
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinSerial::SerializeGraphData(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    v92 = a1;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    if (!*(_QWORD *)(a5 + 344))
      ZinAssertImpl("Must run scheduler first");
    v33 = *(_QWORD **)(a5 + 328);
    v34 = (_QWORD *)(a5 + 336);
    if (v33 != (_QWORD *)(a5 + 336))
    {
      __format = "Error: Unable to retrieve edge type for basic blocks.";
      do
      {
        v35 = v33 + 4;
        if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v93, v33 + 4))
        {
          v37 = v101;
          v36 = v102;
          v104[0] = v33 + 4;
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v93, v33 + 4, (uint64_t)&std::piecewise_construct, v104)[3] = 0xCCCCCCCCCCCCCCCDLL * ((v36 - v37) >> 3);
          v104[0] = v33 + 4;
          v38 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a5 + 64), v104);
          v39 = v38 + 3;
          if (!v38)
            v39 = (uint64_t **)(a5 + 104);
          v99 = 0;
          v100 = 0;
          __p = 0;
          v40 = (uint64_t **)*v39;
          v41 = (uint64_t **)v39[1];
          if (*v39 == (uint64_t *)v41)
          {
            v57 = 0;
            v46 = 0;
            v56 = 0;
          }
          else
          {
            do
            {
              v42 = *v40;
              v97 = 2;
              if ((ZinIrControlFlowGraph::HasEdge(a5, *v42, *v35, &v97) & 1) == 0)
                goto LABEL_66;
              if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v93, v42))
              {
                __format = "Error: Incoming basic block cannot be found in map.  Basic blocks may be serialized out of order.";
LABEL_66:
                ZinAssertImpl(__format);
              }
              v43 = v97;
              v104[0] = v42;
              v44 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v93, v42, (uint64_t)&std::piecewise_construct, v104)[3];
              v45 = v99;
              if (v99 >= v100)
              {
                v47 = (v99 - (_BYTE *)__p) >> 4;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 60)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v49 = v100 - (_BYTE *)__p;
                if ((v100 - (_BYTE *)__p) >> 3 > v48)
                  v48 = v49 >> 3;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
                  v50 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                  v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v100, v50);
                else
                  v51 = 0;
                v52 = (int *)&v51[16 * v47];
                *v52 = v43;
                v52[1] = 0;
                *((_QWORD *)v52 + 1) = v44;
                v54 = (char *)__p;
                v53 = v99;
                v55 = (char *)v52;
                if (v99 != __p)
                {
                  do
                  {
                    *((_OWORD *)v55 - 1) = *((_OWORD *)v53 - 1);
                    v55 -= 16;
                    v53 -= 16;
                  }
                  while (v53 != v54);
                  v53 = (char *)__p;
                }
                v46 = (char *)(v52 + 4);
                __p = v55;
                v99 = (char *)(v52 + 4);
                v100 = &v51[16 * v50];
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *(_DWORD *)v99 = v43;
                *((_DWORD *)v45 + 1) = 0;
                v46 = v45 + 16;
                *((_QWORD *)v45 + 1) = v44;
              }
              v99 = v46;
              ++v40;
            }
            while (v40 != v41);
            v56 = __p;
            v57 = v100;
          }
          v58 = *v35;
          v60 = *(_QWORD *)*v35;
          v59 = *(_QWORD *)(v58 + 8);
          v99 = 0;
          v100 = 0;
          __p = 0;
          v61 = v102;
          if ((unint64_t)v102 >= v103)
          {
            v63 = 0xCCCCCCCCCCCCCCCDLL * ((v102 - v101) >> 3);
            v64 = v63 + 1;
            if (v63 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(v103 - (_QWORD)v101) >> 3) > v64)
              v64 = 0x999999999999999ALL * ((uint64_t)(v103 - (_QWORD)v101) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v103 - (_QWORD)v101) >> 3) >= 0x333333333333333)
              v65 = 0x666666666666666;
            else
              v65 = v64;
            v104[4] = &v103;
            v66 = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v103, v65);
            v67 = &v66[5 * v63];
            v104[0] = v66;
            v104[1] = v67;
            v104[3] = &v66[5 * v68];
            *v67 = v60;
            v67[1] = v59;
            v67[2] = v56;
            v67[3] = 0;
            v67[3] = v46;
            v67[4] = v57;
            v104[2] = v67 + 5;
            std::vector<ZinMirUnitBasicBlock>::__swap_out_circular_buffer((uint64_t *)&v101, v104);
            v62 = v102;
            std::__split_buffer<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::~__split_buffer((uint64_t)v104);
          }
          else
          {
            *(_QWORD *)v102 = v60;
            *((_QWORD *)v61 + 1) = v59;
            *((_QWORD *)v61 + 2) = v56;
            *((_QWORD *)v61 + 3) = v46;
            v62 = v61 + 40;
            *((_QWORD *)v61 + 4) = v57;
          }
          v34 = (_QWORD *)(a5 + 336);
          v102 = v62;
          if (__p)
          {
            v99 = (char *)__p;
            operator delete(__p);
          }
        }
        v69 = (_QWORD *)v33[1];
        if (v69)
        {
          do
          {
            v70 = v69;
            v69 = (_QWORD *)*v69;
          }
          while (v69);
        }
        else
        {
          do
          {
            v70 = (_QWORD *)v33[2];
            v71 = *v70 == (_QWORD)v33;
            v33 = v70;
          }
          while (!v71);
        }
        v33 = v70;
      }
      while (v70 != v34);
    }
    v72 = ZinSerial::Serializer::Serialize<ZinMirUnitBasicBlock>(v92, &v101);
    v104[0] = &v101;
    std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100]((void ***)v104);
    if (v72)
    {
      v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v73)
        ZinSerial::SerializeGraphData(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      if (*(_QWORD *)(a5 + 360) == *(_QWORD *)(a5 + 352))
        ZinAssertImpl("Must run scheduler first");
      if (!ZinSerial::SerializeOrderedOpLayers((uint64_t *)v92, (ZinIrOpLayer ***)(a5 + 352), v95, v93))
      {
        v89 = 0;
        goto LABEL_63;
      }
      v81 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v81)
        ZinSerial::SerializeGraphData(v81, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  v89 = 3;
LABEL_63:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v93);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v95);
  return v89;
}

void sub_206EEA5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  __p = (void *)(v31 - 160);
  std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::SerializeSymbolTable(unint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  char *v39;
  char *i;
  uint64_t v41;
  uint64_t v42;
  void **v44;
  std::string __p[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  __int128 v61;
  char v62;
  _BYTE v63[25];
  int v64;
  char v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72[2];

  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<ZinMirUnitSymbolInfo>::reserve(&v69, a2[2]);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      v10 = v7 + 4;
      v9 = v7[4];
      if (!v9)
        ZinAssertImpl("Unexpected null symbol.");
      memset(__p, 0, sizeof(__p));
      *(_QWORD *)&v46 = -1;
      *((_QWORD *)&v46 + 1) = -1;
      LOBYTE(v47) = 0;
      v60 = 0;
      LOBYTE(v61) = 0;
      v62 = 0;
      v63[0] = 0;
      v63[24] = 0;
      LOBYTE(v64) = 0;
      v65 = 0;
      v44 = (void **)vrev64_s32(*(int32x2_t *)(v9 + 152));
      std::string::operator=(__p, (const std::string *)(v9 + 160));
      *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = *(_OWORD *)(v9 + 16);
      __p[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 184);
      v46 = *(_OWORD *)(v9 + 192);
      v11 = *(_OWORD *)(v9 + 384);
      v57 = *(_OWORD *)(v9 + 368);
      v58 = v11;
      v59 = *(_OWORD *)(v9 + 400);
      v12 = *(_OWORD *)(v9 + 352);
      v55 = *(_OWORD *)(v9 + 336);
      v56 = v12;
      v13 = *(_OWORD *)(v9 + 320);
      v53 = *(_OWORD *)(v9 + 304);
      v54 = v13;
      v14 = *(_OWORD *)(v9 + 256);
      v49 = *(_OWORD *)(v9 + 240);
      v50 = v14;
      v15 = *(_OWORD *)(v9 + 288);
      v51 = *(_OWORD *)(v9 + 272);
      v52 = v15;
      v16 = *(_OWORD *)(v9 + 224);
      v47 = *(_OWORD *)(v9 + 208);
      v48 = v16;
      if (!v60)
        v60 = 1;
      v61 = *(_OWORD *)(v9 + 520);
      if (!v62)
        v62 = 1;
      v17 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)&v63[9] = *(_OWORD *)(v9 + 41);
      *(_OWORD *)v63 = v17;
      v72[0] = *(_QWORD **)(v9 + 512);
      if (v72[0]
        && std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v72))
      {
        v18 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v72);
        if (!v18)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v64 = *((_DWORD *)v18 + 6);
        v65 = 1;
      }
      std::vector<ZinMirUnitSymbolInfo>::push_back[abi:ne180100](&v69, (uint64_t)&v44);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v19 = v69;
      v20 = v70;
      if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v7 + 4))
      {
        ZinAssertImpl("Duplicate symbol found in symbol table.");
      }
      v72[0] = v7 + 4;
      v21 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)a3, v7 + 4, (uint64_t)&std::piecewise_construct, v72);
      v22 = -1 - 1171354717 * ((unint64_t)(v20 - v19) >> 5);
      *((_DWORD *)v21 + 6) = v22;
      v23 = *v10;
      if (*(_QWORD *)(*v10 + 512) && !*(_BYTE *)(v19 + 352 * v22 + 348))
      {
        v24 = v19 + 352 * v22;
        v25 = v67;
        if (v67 >= v68)
        {
          v27 = (v67 - v66) >> 4;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v29 = v68 - v66;
          if ((v68 - v66) >> 3 > v28)
            v28 = v29 >> 3;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
            v30 = 0xFFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v68, v30);
          else
            v31 = 0;
          v32 = (uint64_t *)&v31[16 * v27];
          *v32 = v24;
          v32[1] = v23;
          v34 = v66;
          v33 = v67;
          v35 = (char *)v32;
          if (v67 != v66)
          {
            do
            {
              *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
              v35 -= 16;
              v33 -= 16;
            }
            while (v33 != v34);
            v33 = v66;
          }
          v26 = (char *)(v32 + 2);
          v66 = v35;
          v67 = (char *)(v32 + 2);
          v68 = &v31[16 * v30];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v67 = v24;
          *((_QWORD *)v25 + 1) = v23;
          v26 = v25 + 16;
        }
        v67 = v26;
      }
      v36 = (_QWORD *)v7[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v7[2];
          v38 = *v37 == (_QWORD)v7;
          v7 = v37;
        }
        while (!v38);
      }
      v7 = v37;
    }
    while (v37 != v6);
    v39 = v66;
    for (i = v67; v39 != i; v39 += 16)
    {
      v41 = *(_QWORD *)v39;
      v44 = *(void ***)(*((_QWORD *)v39 + 1) + 512);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v44))ZinAssertImpl("Symbol not yet serialized.  All symbols should be serialized at this point.");
      v72[0] = &v44;
      *(_DWORD *)(v41 + 344) = *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)a3, &v44, (uint64_t)&std::piecewise_construct, v72)+ 6);
      *(_BYTE *)(v41 + 348) = 1;
    }
  }
  v42 = ZinSerial::Serializer::Serialize<ZinMirUnitSymbolInfo>(a1, &v69);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  v44 = (void **)&v69;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v44);
  return v42;
}

void sub_206EEAA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)(v20 - 152);
  if (v22)
  {
    *(_QWORD *)(v20 - 144) = v22;
    operator delete(v22);
  }
  a14 = v20 - 128;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::SerializeIOData(ZinSerial::Serializer *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  std::string *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void **v40;
  uint64_t *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  ZinSerial::Serializer *v49;
  _QWORD *v50;
  uint64_t v51;
  std::string v54;
  char **v55;
  char *v56[2];
  char **v57;
  char *v58[2];
  uint64_t *v59;
  _QWORD *v60[2];
  uint64_t v61[3];
  uint64_t v62[3];
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65[3];
  __int128 *v66[2];

  std::map<std::string,std::string>::map[abi:ne180100](v61, a2);
  std::map<std::string,std::string>::map[abi:ne180100](v62, a2 + 24);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v63, a2 + 48);
  std::map<std::string,std::string>::map[abi:ne180100](v65, a2 + 72);
  v50 = a5;
  v60[0] = 0;
  v60[1] = 0;
  v58[1] = 0;
  v59 = (uint64_t *)v60;
  v55 = v56;
  v56[0] = 0;
  v56[1] = 0;
  v57 = v58;
  v58[0] = 0;
  if (a6 && &v55 != (char ***)a6)
    std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long>,std::__tree_node<std::__value_type<std::string,long>,void *> *,long>>((uint64_t **)&v55, *(_QWORD **)a6, (_QWORD *)(a6 + 8));
  v49 = a1;
  v12 = (_QWORD *)*a3;
  v10 = a3 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    v13 = v10;
    v14 = a4 + 1;
    v51 = a6 + 24;
    do
    {
      v15 = (_QWORD *)v11[4];
      if (v15[12] == v15[11])
        ZinAssertImpl("No incoming layers into liveout.");
      v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*v15 + 32))(v11[4], 0, 0);
      v17 = v16;
      if (!v16)
        ZinAssertImpl("Unexpected null tensor.");
      v18 = *(_QWORD *)(v16 + 104);
      if (!v18 || (v19 = *(uint64_t **)(v18 + 40), v19 == *(uint64_t **)(v18 + 48)) || (v20 = *v19) == 0)
        ZinAssertImpl("Unexpected null symbol.");
      v21 = (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v63, (void **)(v20 + 160));
      if (&v64 != (_QWORD **)v21)
      {
        v22 = (std::string *)(*(_QWORD *)v15[11] + 24);
        std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v63, v21);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v21 + 4));
        operator delete(v21);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v63, (void **)&v22->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v54);
        std::string::operator=((std::string *)(v23 + 7), v22);
        memset(&v54, 0, sizeof(v54));
        v24 = (_QWORD *)*a4;
        if ((_QWORD *)*a4 != v14)
        {
          while (1)
          {
            v25 = *(unsigned __int8 *)(v17 + 47);
            if ((v25 & 0x80u) == 0)
              v26 = *(unsigned __int8 *)(v17 + 47);
            else
              v26 = *(_QWORD *)(v17 + 32);
            v27 = *((unsigned __int8 *)v24 + 103);
            v28 = (char)v27;
            if ((v27 & 0x80u) != 0)
              v27 = v24[11];
            if (v26 != v27)
              goto LABEL_30;
            v29 = v28 >= 0 ? (unsigned __int8 *)(v24 + 10) : (unsigned __int8 *)v24[10];
            if ((v25 & 0x80) == 0)
              break;
            if (!memcmp(*(const void **)(v17 + 24), v29, *(_QWORD *)(v17 + 32)))
              goto LABEL_29;
LABEL_30:
            v32 = (_QWORD *)v24[1];
            if (v32)
            {
              do
              {
                v33 = v32;
                v32 = (_QWORD *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                v33 = (_QWORD *)v24[2];
                v34 = *v33 == (_QWORD)v24;
                v24 = v33;
              }
              while (!v34);
            }
            v24 = v33;
            if (v33 == v14)
              goto LABEL_36;
          }
          if (*(_BYTE *)(v17 + 47))
          {
            v30 = (unsigned __int8 *)(v17 + 24);
            while (*v30 == *v29)
            {
              ++v30;
              ++v29;
              if (!--v25)
                goto LABEL_29;
            }
            goto LABEL_30;
          }
LABEL_29:
          v66[0] = (__int128 *)(v24 + 4);
          v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, (void **)v24 + 4, (uint64_t)&std::piecewise_construct, v66);
          std::string::operator=((std::string *)(v31 + 7), v22);
          std::string::operator=(&v54, (const std::string *)(v24 + 4));
          goto LABEL_30;
        }
LABEL_36:
        if (a6
          && (void **)(a6 + 32) != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v51, (void **)(v17 + 24)))
        {
          v35 = *(_QWORD *)std::map<std::string,BOOL>::at(v51, (void **)(v17 + 24));
          v66[0] = (__int128 *)&v54;
          std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v57, (void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v66)[7] = v35;
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
      v36 = (_QWORD *)v11[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v11[2];
          v34 = *v37 == (_QWORD)v11;
          v11 = v37;
        }
        while (!v34);
      }
      v11 = v37;
    }
    while (v37 != v13);
  }
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0uLL;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54.__r_.__value_.__l.__size_;
  v39 = a5 + 1;
  v38 = (_QWORD *)*v50;
  if ((_QWORD *)*v50 != v50 + 1)
  {
    do
    {
      v40 = (void **)(v38 + 4);
      if (*((_BYTE *)v38 + 192))
      {
        v66[0] = (__int128 *)(v38 + 4);
        v41 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v54, v40, (uint64_t)&std::piecewise_construct, v66);
        v42 = *(_OWORD *)(v38 + 19);
        v43 = *(_OWORD *)(v38 + 21);
        v44 = v38[23];
      }
      else
      {
        v66[0] = (__int128 *)(v38 + 4);
        v41 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v54, v40, (uint64_t)&std::piecewise_construct, v66);
        v42 = *((_OWORD *)v38 + 7);
        v43 = *((_OWORD *)v38 + 8);
        v44 = v38[18];
      }
      v41[11] = v44;
      *(_OWORD *)(v41 + 9) = v43;
      *(_OWORD *)(v41 + 7) = v42;
      v45 = (_QWORD *)v38[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v38[2];
          v34 = *v46 == (_QWORD)v38;
          v38 = v46;
        }
        while (!v34);
      }
      v38 = v46;
    }
    while (v46 != v39);
  }
  if (ZinSerial::Serializer::Serialize(v49, (const ZinIrNameMaps *)v61)
    || ZinSerial::Serializer::Serialize<std::string,std::string>(v49, (uint64_t)&v59)
    || ZinSerial::Serializer::Serialize(v49, (const ZinIrLiveIORankMaps *)&v55))
  {
    v47 = 3;
  }
  else if (ZinSerial::Serializer::Serialize<std::string,ZinTensorDimensions>(v49, (uint64_t)&v54))
  {
    v47 = 3;
  }
  else
  {
    v47 = 0;
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v54, (char *)v54.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v57, v58[0]);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v55, v56[0]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)&v59, v60[0]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)v65, (_QWORD *)v65[1]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)&v63, v64);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)v62, (_QWORD *)v62[1]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)v61, (_QWORD *)v61[1]);
  return v47;
}

void sub_206EEB044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  ZinIrLiveIORankMaps::~ZinIrLiveIORankMaps(&a26);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)&a32, a33);
  ZinIrNameMaps::~ZinIrNameMaps((ZinIrNameMaps *)&a35);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Serializer::Serialize<std::string,ZinTensorDimensions>(ZinSerial::Serializer *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 4) > *((_QWORD *)a1 + 2))
      return 3;
    *(_DWORD *)(v3 + *(_QWORD *)a1) = *(_DWORD *)(a2 + 16);
  }
  *(_QWORD *)a1 += 4;
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == a2 + 8)
    return 0;
  while (1)
  {
    result = ZinSerial::BufferWriter::Write<std::string const>(a1, v6 + 4);
    if ((_DWORD)result)
      break;
    result = ZinSerial::Serializer::Serialize(a1, (const ZinTensorDimensions *)(v6 + 7));
    if ((_DWORD)result)
      break;
    v7 = (_QWORD *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v6[2];
        v9 = *v8 == (_QWORD)v6;
        v6 = v8;
      }
      while (!v9);
    }
    v6 = v8;
    if (v8 == v5)
      return 0;
  }
  return result;
}

void ZinIrLiveIORankMaps::~ZinIrLiveIORankMaps(char **this)
{
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this, this[1]);
}

uint64_t ZinSerial::SerializeBarUsage(ZinSerial::Serializer *a1, uint64_t a2, _QWORD *a3)
{
  void **v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  ZinIrTensor *v20;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v22;
  void **v23;
  uint64_t v24;
  std::string::size_type size;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  ZinSerial::Serializer *v34;
  std::string v35;
  std::string v36;
  std::string v37;
  uint64_t v38[3];
  char **v39;
  char *v40[2];
  _QWORD v41[3];

  std::map<BarIdType,unsigned char>::map[abi:ne180100](v38, a2);
  v39 = v40;
  v40[0] = 0;
  v40[1] = 0;
  memset(v41, 0, sizeof(v41));
  v8 = *(void ***)(a2 + 24);
  v7 = a2 + 24;
  v6 = v8;
  v9 = (void **)(v7 + 8);
  if (v8 != (void **)(v7 + 8))
  {
    do
    {
      if (!*((_DWORD *)v6 + 14))
      {
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 4);
        v10 = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v39, v6 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v37);
        v11 = (uint64_t)v6[7];
        *((_BYTE *)v10 + 64) = *((_BYTE *)v6 + 64);
        v10[7] = v11;
      }
      v12 = (void **)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (void **)v6[2];
          v14 = *v13 == v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v9);
  }
  v34 = a1;
  v17 = (_QWORD *)*a3;
  v15 = a3 + 1;
  v16 = v17;
  if (v17 == v15)
  {
LABEL_46:
    v32 = ZinSerial::Serializer::Serialize(v34, (const ZinBarUsage *)v38);
  }
  else
  {
    while (1)
    {
      v18 = *(_QWORD **)(v16[4] + 88);
      if (*(_QWORD **)(v16[4] + 96) == v18)
        ZinAssertImpl("No incoming layers into liveout.", v34);
      v19 = *v18;
      v20 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v18 + 32))(*v18, 0, 0);
      if (!v20)
        ZinAssertImpl("Unexpected null tensor.", v34);
      RootTensor = ZinIrTensor::GetRootTensor(v20);
      v22 = RootTensor;
      if (!RootTensor)
        ZinAssertImpl("Unexpected null root tensor.", v34);
      if (*((char *)RootTensor + 47) < 0)
        std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)RootTensor + 3), *((_QWORD *)RootTensor + 4));
      else
        v37 = *(std::string *)((_BYTE *)RootTensor + 1);
      v23 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v7, (void **)&v37.__r_.__value_.__l.__data_);
      if (v9 == v23)
        break;
      v24 = *((_QWORD *)v22 + 12);
      if (*(char *)(v24 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v24 + 24), *(_QWORD *)(v24 + 32));
        v24 = *((_QWORD *)v22 + 12);
      }
      else
      {
        v36 = *(std::string *)(v24 + 24);
      }
      if (v19 == v24)
      {
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        else
          size = v36.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v35, size + 4);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v35;
        else
          v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v36;
          else
            v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
          memmove(v26, v27, size);
        }
        strcpy((char *)v26 + size, "/src");
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        v36 = v35;
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      v28 = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v39, (void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v35);
      v29 = v23[7];
      *((_BYTE *)v28 + 64) = *((_BYTE *)v23 + 64);
      v28[7] = (uint64_t)v29;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v30 = (_QWORD *)v16[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v16[2];
          v14 = *v31 == (_QWORD)v16;
          v16 = v31;
        }
        while (!v14);
      }
      v16 = v31;
      if (v31 == v15)
        goto LABEL_46;
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v32 = 3;
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v39, v40[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v38, (_QWORD *)v38[1]);
  return v32;
}

void sub_206EEB55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26)
{
  ZinBarUsage::~ZinBarUsage(&a26);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Serializer::Serialize<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>(ZinSerial::Serializer *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  const ZinLargeStridePoolTransform ***v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 4) > *((_QWORD *)a1 + 2))
      return 3;
    *(_DWORD *)(v3 + *(_QWORD *)a1) = *(_DWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 += 4;
  v5 = (const ZinLargeStridePoolTransform ***)(a2 + 16);
  while (1)
  {
    v5 = (const ZinLargeStridePoolTransform ***)*v5;
    if (!v5)
      break;
    v6 = *(_QWORD *)a1;
    v7 = *((_QWORD *)a1 + 1);
    if (v7)
    {
      if ((unint64_t)(v6 + 8) > *((_QWORD *)a1 + 2))
        return 3;
      *(_QWORD *)(v7 + v6) = v5[2];
      v6 = *(_QWORD *)a1;
    }
    *(_QWORD *)a1 = v6 + 8;
    result = ZinSerial::Serializer::Serialize<std::unique_ptr<ZinShapeDependentTransform>>(a1, v5 + 3);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t ZinSerial::SerializeGraphAndMetadata(uint64_t *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _OWORD v45[9];

  memset(v45, 0, sizeof(v45));
  LODWORD(v45[0]) = -1413844880;
  DWORD2(v45[0]) = 1179649;
  if (ZinSerial::Serializer::Serialize(a1, (uint64_t)v45))
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinSerial::SerializeGraphAndMetadata(v4, v5, v6, v7, v8, v9, v10, v11);
    return 3;
  }
  v12 = *a1;
  if (ZinSerial::SerializeIOData((ZinSerial::Serializer *)a1, *(_QWORD *)a2, *(_QWORD **)(a2 + 24), *(_QWORD **)(a2 + 32), *(_QWORD **)(a2 + 40), *(_QWORD *)(a2 + 48)))
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinSerial::SerializeGraphAndMetadata(v13, v14, v15, v16, v17, v18, v19, v20);
    return 3;
  }
  v21 = *a1;
  if (ZinSerial::SerializeBarUsage((ZinSerial::Serializer *)a1, *(_QWORD *)(a2 + 16), *(_QWORD **)(a2 + 24)))
  {
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinSerial::SerializeGraphAndMetadata(v22, v23, v24, v25, v26, v27, v28, v29);
    return 3;
  }
  v30 = *a1;
  if (ZinSerial::SerializeGraphData((unint64_t *)a1, *(_QWORD **)(a2 + 64), *(_QWORD **)(a2 + 72), *(_QWORD **)(a2 + 80), *(_QWORD *)(a2 + 8)))return 3;
  v31 = *a1;
  if (ZinSerial::Serializer::Serialize<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>((ZinSerial::Serializer *)a1, *(_QWORD *)(a2 + 56)))
  {
    v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v32)
      ZinSerial::SerializeGraphAndMetadata(v32, v33, v34, v35, v36, v37, v38, v39);
    return 3;
  }
  v41 = a1[1];
  if (!v41)
    return 0;
  v42 = *a1;
  v43 = *a1 - v31;
  *(_QWORD *)(v41 + 16) = v12;
  *(_QWORD *)(v41 + 24) = v21 - v12;
  *(_QWORD *)(v41 + 32) = v21;
  *(_QWORD *)(v41 + 40) = v30 - v21;
  *(_QWORD *)(v41 + 48) = v30;
  *(_QWORD *)(v41 + 56) = v31 - v30;
  *(_QWORD *)(v41 + 64) = v31;
  *(_QWORD *)(v41 + 72) = v43;
  v44 = ZinHash((const void *)(v41 + 8), (int)v42 - 8);
  result = 0;
  *(_DWORD *)(v41 + 4) = v44;
  return result;
}

uint64_t ZinSerial::SerializeDataAndWriteToSection(uint64_t a1, void **a2, uint64_t *a3)
{
  size_t SerializedDataSize;
  void *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10[3];

  SerializedDataSize = ZinSerial::GetSerializedDataSize(a1);
  *a3 = SerializedDataSize;
  v7 = malloc_type_malloc(SerializedDataSize, 0x6B23A9CAuLL);
  *a2 = v7;
  v8 = *a3;
  v10[0] = 0;
  v10[1] = (uint64_t)v7;
  v10[2] = v8;
  result = ZinSerial::SerializeGraphAndMetadata(v10, a1);
  if ((_DWORD)result)
  {
    free(*a2);
    return 3;
  }
  return result;
}

uint64_t ZinSerial::GetSerializedDataSize(uint64_t a1)
{
  uint64_t v2[3];

  memset(v2, 0, sizeof(v2));
  if (ZinSerial::SerializeGraphAndMetadata(v2, a1))
    ZinAssertImpl("Failed to calculate total size of serialized data.");
  return v2[0];
}

void std::optional<ZinIrDMAConvertInfo>::operator=[abi:ne180100]<ZinIrDMAConvertInfo const&,void>(uint64_t a1, ZinIrOpLayerOpCode *a2)
{
  int v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_DWORD *)(a1 + 12) = v3;
  }
  else
  {
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)a1, a2);
    *(_QWORD *)v4 = &unk_24C01EC70;
    *(_QWORD *)(v4 + 12) = *(_QWORD *)((char *)a2 + 12);
    *(_BYTE *)(v4 + 24) = 1;
  }
}

uint64_t ZinSerial::SerializeNEKernelInfo(ZinSerial *this, ZinSerial::Serializer *a2, const ZinNELayer *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string v13;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v5 = *((_QWORD *)a2 + 17);
  if (v5)
  {
    v6 = (void *)operator new();
    memcpy(v6, (const void *)(v5 + 176), 0x118uLL);
    ZinIrKernel::GetFinalHash(*((ZinIrKernel **)a2 + 17), &v13);
    __p = v13;
  }
  else
  {
    v6 = 0;
  }
  if (ZinSerial::Serializer::Serialize<ZinKernelDescriptor>(this, (const ZinKernelDescriptor *)v6)
    || ZinSerial::BufferWriter::Write<std::string const>(this, &__p))
  {
    goto LABEL_6;
  }
  v9 = *((_QWORD *)a2 + 17);
  if (!v9)
    goto LABEL_19;
  v10 = *(_QWORD *)(v9 + 784);
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    if ((unint64_t)(*(_QWORD *)this + 1) > *((_QWORD *)this + 2))
    {
LABEL_6:
      v7 = 3;
      goto LABEL_7;
    }
    *(_BYTE *)(v11 + *(_QWORD *)this) = v10 != 0;
  }
  ++*(_QWORD *)this;
  if (v10)
  {
    v12 = *((_QWORD *)a2 + 17);
    if (!*(_QWORD *)(v12 + 784))
      ZinAssertImpl("MIR Kernel Data is unexpectedly null.");
    v7 = ZinSerial::SerializeZinMirAneKernel(this, (uint64_t *)(v12 + 784));
  }
  else
  {
LABEL_19:
    v7 = 0;
  }
LABEL_7:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v6)
    MEMORY[0x20BD002F8](v6, 0x1000C40557A1F5BLL);
  return v7;
}

void sub_206EEBA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  if (v18)
    MEMORY[0x20BD002F8](v18, 0x1000C40557A1F5BLL);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrStochasticRoundInfo>(ZinSerial::Serializer *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;

  v2 = a2[40];
  v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v3 + *(_QWORD *)a1) = v2;
  }
  ++*(_QWORD *)a1;
  if (!v2)
    return 0;
  if (!a2[40])
    std::__throw_bad_optional_access[abi:ne180100]();
  return ZinSerial::Serializer::Serialize(a1, (const ZinIrStochasticRoundInfo *)a2);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(ZinSerial::Serializer *a1, const ZinIrBroadcastInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrActivationParams>(ZinSerial::Serializer *a1, const ZinIrActivationParams *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(ZinSerial::Serializer *a1, char **a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::SerializeZinMirAneKernel(ZinSerial::Serializer *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = 3;
  if (!ZinSerial::Serializer::Serialize((unint64_t *)a1, *a2))
  {
    if (ZinSerial::Serializer::Serialize(a1, *(const ZinMirAneKernelCoeff **)(*a2 + 40)))
      return 3;
    else
      return 0;
  }
  return v4;
}

uint64_t ZinSerial::Serializer::Serialize<ZinKernelDescriptor>(ZinSerial::Serializer *a1, const ZinKernelDescriptor *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(Layer2TDMapper::SourceLayer *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return Layer2TDMapper::SourceLayer::IsGraphInitialization(a1);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrPoolingInfo>(ZinSerial::Serializer *a1, const ZinIrPoolingInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(ZinSerial::Serializer *a1, const ZinIrElementWiseInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<SingularValue>(unint64_t *a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = a1[1];
  if (v3)
  {
    if (*a1 + 1 > a1[2])
      return 3;
    *(_BYTE *)(v3 + *a1) = v2;
  }
  ++*a1;
  if (!v2)
    return 0;
  if (!*(_BYTE *)(a2 + 8))
    std::__throw_bad_optional_access[abi:ne180100]();
  return ZinSerial::Serializer::Serialize(a1, a2);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrIndexInfo>(ZinSerial::Serializer *a1, const ZinIrIndexInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrScaledEWInfo>(ZinSerial::Serializer *a1, const ZinIrScaledEWInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrReductionInfo>(ZinSerial::Serializer *a1, const ZinIrReductionInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrDynamicGOCInfo>(ZinSerial::Serializer *a1, const ZinIrDynamicGOCInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinEngineLayerMirInfo>(ZinSerial::Serializer *a1, const ZinEngineLayerMirInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

unint64_t ZinSerial::GetMirUnitSymbolInfoFromL2Access(unsigned int *a1, _QWORD *a2)
{
  uint64_t v3;
  ZinIrSymbol *Symbol;
  BOOL v5;
  int MemType;
  _QWORD *v8;
  ZinIrSymbol *v9;

  v3 = a1[6];
  Symbol = (ZinIrSymbol *)ZinL2Access::GetSymbol((ZinL2Access *)a1);
  v9 = Symbol;
  if ((_DWORD)v3)
    v5 = Symbol == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  MemType = ZinIrSymbol::GetMemType(Symbol);
  if (MemType != 2)
    ZinAssertImpl("Invalid symbol.  Symbol should be in L2.");
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v9))ZinAssertImpl("L2 Symbol not found in map.  Symbol should have been serialized.");
  v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v9);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (_DWORD)v8[3] & 0xFFFFFF00 | (unint64_t)(v3 << 32) | *((_DWORD *)v8 + 6);
}

uint64_t ZinSerial::Serializer::Serialize<ZinMirUnitL2Symbol>(unint64_t *a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = a1[1];
  if (v3)
  {
    if (*a1 + 1 > a1[2])
      return 3;
    *(_BYTE *)(v3 + *a1) = v2;
  }
  ++*a1;
  if (!v2)
    return 0;
  if (!*(_BYTE *)(a2 + 8))
    std::__throw_bad_optional_access[abi:ne180100]();
  return ZinSerial::Serializer::Serialize(a1, (_DWORD *)a2);
}

uint64_t ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess(uint64_t a1, _QWORD *a2)
{
  ZinIrSymbol *v2;
  unsigned int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v12;
  ZinIrSymbol *v13;

  v2 = *(ZinIrSymbol **)(a1 + 40);
  v13 = v2;
  if (v2
    && ((v4 = *(_DWORD *)(*((_QWORD *)ZinIrSymbol::GetRootSymbol(v2) + 1) + 8), v5 = v4 > 7,
                                                                                  v6 = (1 << v4) & 0x8C,
                                                                                  !v5)
      ? (v7 = v6 == 0)
      : (v7 = 1),
        v7))
  {
    if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v13))ZinAssertImpl("DRAM Symbol not found in map.  Symbol should have been serialized.");
    v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v13);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v9 = v12[3] & 0xFFFFFF00;
    v8 = *((_DWORD *)v12 + 6);
    v10 = 0x100000000;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  return v10 | v9 | v8;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrConcatInfo>(ZinSerial::Serializer *a1, const ZinIrConcatInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<std::unique_ptr<ZinIrInputViewUnitInfo>>(ZinSerial::Serializer *a1, const ZinIrInputViewUnitInfo ***a2)
{
  const ZinIrInputViewUnitInfo **v3;
  const ZinIrInputViewUnitInfo **v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 4) > *((_QWORD *)a1 + 2))
      return 3;
    *(_DWORD *)(v5 + *(_QWORD *)a1) = (unint64_t)((char *)v4 - (char *)v3) >> 3;
    v3 = *a2;
    v4 = a2[1];
  }
  *(_QWORD *)a1 += 4;
  while (v3 != v4)
  {
    result = ZinSerial::Serializer::Serialize<ZinIrInputViewUnitInfo>(a1, *v3);
    if ((_DWORD)result)
      return result;
    ++v3;
  }
  return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrInputViewUnitInfo>(ZinSerial::Serializer *a1, const ZinIrInputViewUnitInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrReshapeInfo>(ZinSerial::Serializer *a1, const ZinIrReshapeInfo *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinMirUnitSymbolInfo>(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  if (v5)
  {
    if (*a1 + 4 > a1[2])
      return 3;
    *(_DWORD *)(v5 + *a1) = -1171354717 * ((unint64_t)(v4 - v3) >> 5);
    v3 = *a2;
    v4 = a2[1];
  }
  *a1 += 4;
  while (v3 != v4)
  {
    result = ZinSerial::Serializer::Serialize(a1, v3);
    if ((_DWORD)result)
      return result;
    v3 += 352;
  }
  return 0;
}

void std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ZinMirUnitSymbolInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<ZinMirUnitSymbolInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 344;
    do
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v5 = v4 - 8;
      v4 -= 352;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

uint64_t ZinSerial::Serializer::Serialize<ZinMirUnitBasicBlock>(unint64_t *a1, char **a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t result;

  v3 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  if (v5)
  {
    if (*a1 + 4 > a1[2])
      return 3;
    *(_DWORD *)(v5 + *a1) = -858993459 * ((unint64_t)(v4 - v3) >> 3);
    v3 = *a2;
    v4 = a2[1];
  }
  *a1 += 4;
  while (v3 != v4)
  {
    result = ZinSerial::Serializer::Serialize(a1, v3);
    if ((_DWORD)result)
      return result;
    v3 += 40;
  }
  return 0;
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_206EEC4AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206EEC62C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_206EEC6BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>>(ZinSerial::Serializer *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 4) > *((_QWORD *)a1 + 2))
      return 3;
    *(_DWORD *)(v5 + *(_QWORD *)a1) = (unint64_t)(v4 - v3) >> 5;
    v3 = *a2;
    v4 = a2[1];
  }
  *(_QWORD *)a1 += 4;
  while (v3 != v4)
  {
    result = ZinSerial::Serializer::Serialize<ZinIrDMAConvertInfo>(a1, v3);
    if ((_DWORD)result)
      return result;
    v3 += 32;
  }
  return 0;
}

ZinIrOpLayerOpCode *std::vector<std::optional<ZinIrDMAConvertInfo>>::__init_with_size[abi:ne180100]<std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*>(ZinIrOpLayerOpCode *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  ZinIrOpLayerOpCode *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo>*>((uint64_t)v6 + 16, a2, a3, *((ZinIrOpLayerOpCode **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_206EEC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

ZinIrOpLayerOpCode *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo>*>(uint64_t a1, uint64_t a2, uint64_t a3, ZinIrOpLayerOpCode *this)
{
  ZinIrOpLayerOpCode *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  ZinIrOpLayerOpCode *v10;
  ZinIrOpLayerOpCode *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__optional_copy_base<ZinIrDMAConvertInfo,false>::__optional_copy_base[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = (ZinIrOpLayerOpCode *)((char *)v11 + 32);
      v11 = (ZinIrOpLayerOpCode *)((char *)v11 + 32);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206EEC874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ZinIrOpLayerOpCode *std::__optional_copy_base<ZinIrDMAConvertInfo,false>::__optional_copy_base[abi:ne180100](ZinIrOpLayerOpCode *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(this, (const ZinIrOpLayerOpCode *)a2);
    *(_QWORD *)this = &unk_24C01EC70;
    *(_QWORD *)((char *)this + 12) = *(_QWORD *)(a2 + 12);
    *((_BYTE *)this + 24) = 1;
  }
  return this;
}

void sub_206EEC8E4(_Unwind_Exception *exception_object)
{
  ZinIrHalH13g *v1;

  if (*((_BYTE *)v1 + 24))
    ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>::operator()[abi:ne180100](uint64_t a1)
{
  ZinIrHalH13g *v1;
  ZinIrHalH13g *v2;
  ZinIrHalH13g *v3;

  v1 = **(ZinIrHalH13g ***)(a1 + 16);
  v2 = **(ZinIrHalH13g ***)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = (ZinIrHalH13g *)((char *)v1 - 32);
      if (*((_BYTE *)v1 - 8))
        ZinIrHalH13g::~ZinIrHalH13g(v3);
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long>,std::__tree_node<std::__value_type<std::string,long>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_multi<std::pair<std::string const,long> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_206EECAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_multi<std::pair<std::string const,long> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__construct_node<std::pair<std::string const,ZinIrOpLayer *> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_206EECB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,ZinTensorDimensions>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206EECC74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Serializer::Serialize<std::unique_ptr<ZinShapeDependentTransform>>(ZinSerial::Serializer *a1, const ZinLargeStridePoolTransform ***a2)
{
  const ZinLargeStridePoolTransform **v3;
  const ZinLargeStridePoolTransform **v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 4) > *((_QWORD *)a1 + 2))
      return 3;
    *(_DWORD *)(v5 + *(_QWORD *)a1) = (unint64_t)((char *)v4 - (char *)v3) >> 3;
    v3 = *a2;
    v4 = a2[1];
  }
  *(_QWORD *)a1 += 4;
  while (v3 != v4)
  {
    result = ZinSerial::Serializer::Serialize<ZinShapeDependentTransform>(a1, *v3);
    if ((_DWORD)result)
      return result;
    ++v3;
  }
  return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinShapeDependentTransform>(ZinSerial::Serializer *a1, const ZinLargeStridePoolTransform *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)a1 + 1) > *((_QWORD *)a1 + 2))
      return 3;
    *(_BYTE *)(v2 + *(_QWORD *)a1) = a2 != 0;
  }
  ++*(_QWORD *)a1;
  if (a2)
    return ZinSerial::Serializer::Serialize(a1, a2);
  else
    return 0;
}

void ZinSerial::SerializeOrderedOpLayers(uint64_t a1)
{
  void **v2;
  _QWORD *v3;
  void *__p[2];
  char v5;
  uint8_t buf[4];
  void **v7;
  __int16 v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  ZinIrEnumToStringUtil::OpCodeToString(*(_DWORD *)(*(_QWORD *)(a1 + 64) + 8), __p);
  v2 = (void **)__p[0];
  if (v5 >= 0)
    v2 = __p;
  v3 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v3 = (_QWORD *)*v3;
  *(_DWORD *)buf = 136315394;
  v7 = v2;
  v8 = 2080;
  v9 = v3;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Unsupported OpLayer(%s): %s", buf, 0x16u);
  if (v5 < 0)
    operator delete(__p[0]);
}

void ZinSerial::SerializeGraphData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize OpLayers.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize basic blocks.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize DRAM symbols table for Const Tensor.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize DRAM symbols table for data tensor.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize L2 symbols table.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinSerial::SerializeGraphAndMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize shape transforms metadata.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize bar usage.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize io data.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to serialize header.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinMirSetActiveNE(ZinIrControlFlowGraph *a1, ZinIrNetworkStatus *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  ZinIrNetworkStatus *v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v7[0] = &off_24BFFF090;
  v7[1] = &v6;
  v8 = v7;
  v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v7, 1);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206EED0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSetActiveNE(ZinIrOpLayer *a1, CFArrayRef *a2)
{
  uint64_t Hal;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 IsTransposeEngineLayer;
  uint64_t v9;
  ZinEngineLayerMirInfo *v10;
  uint64_t v11;
  ZinEngineLayerMirInfo *v12;
  ZinEngineLayerMirInfo *v13;
  uint64_t v14;
  ZinEngineLayerMirInfo *v16;
  ZinEngineLayerMirInfo *v17;
  ZinEngineLayerMirInfo *v18;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a1 + 2) + 160));
  v5 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v6 = *((_QWORD *)a1 + 2);
  v7 = v5[2];
  if (!ZinIrOpLayer::IsIntermediate(a1) || !ZinIrOpLayer::IsANELayer(a1))
    return 0;
  if (ZinIrOpLayer::IsPELayer(a1))
  {
    if (!*((_QWORD *)a1 + 33))
    {
LABEL_8:
      v10 = (ZinEngineLayerMirInfo *)operator new();
      ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v10, v7);
      v18 = v10;
      *((_QWORD *)v10 + 13) = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0)+ 48);
      *((_QWORD *)v18 + 10) = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)a1 + 360))(a1, 2);
      v11 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)a1 + 368))(a1, 2);
      v12 = v18;
      *((_QWORD *)v18 + 11) = v11;
      ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v12 + 120), a1);
      ZinANELayer::SetMirInfo((uint64_t)a1, (int **)&v18);
      v13 = v18;
      v18 = 0;
      if (v13)
      {
        ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v13);
        MEMORY[0x20BD002F8]();
      }
    }
    return 0;
  }
  IsTransposeEngineLayer = ZinIrOpLayer::IsTransposeEngineLayer(a1);
  v9 = *((_QWORD *)a1 + 33);
  if (IsTransposeEngineLayer)
  {
    if (!v9)
      goto LABEL_8;
    return 0;
  }
  if (v9)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1)
      && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 592))(a1) & 1) == 0)
    {
      ZinIrNetworkStatus::SetError(a2, CFSTR("NeTransposeFailure"));
      return 3;
    }
    return 0;
  }
  v16 = (ZinEngineLayerMirInfo *)operator new();
  ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v16, v7);
  v18 = v16;
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1))
  {
    ZinNELayer::FindValidMirInfoForOutputTranspose(a1, v5, v6 + 176, &v18);
LABEL_18:
    if (!v18)
      ZinAssertImpl("Valid EngineLayerMirInfo must exist");
    ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v18 + 120), a1);
    ZinANELayer::SetMirInfo((uint64_t)a1, (int **)&v18);
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1)
      && ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 592))(a1) & 1) == 0)
    {
      ZinIrNetworkStatus::SetError(a2, CFSTR("NeTransposeFailure"));
      v14 = 3;
    }
    else
    {
      v14 = 0;
    }
    goto LABEL_24;
  }
  v14 = ZinNELayer::ComputeMirInfo(a1, (uint64_t)v5, (char **)&v18, 1);
  if (!(_DWORD)v14)
    goto LABEL_18;
LABEL_24:
  v17 = v18;
  v18 = 0;
  if (v17)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v17);
    MEMORY[0x20BD002F8]();
  }
  return v14;
}

void sub_206EED450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B0C40CB92D005);
  _Unwind_Resume(a1);
}

uint64_t ZinMirOptimizeForDoubleInt8(ZinIrOpLayer *a1, ZinIrNetworkStatus *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(*((_QWORD *)a1 + 8) + 8) == 85)
  {
    v2 = *((_QWORD *)a1 + 33);
    if (v2)
    {
      if (*((_QWORD *)a1 + 54) && !*(_BYTE *)(v2 + 1) && !*(_BYTE *)(v2 + 148))
        *(_BYTE *)(*((_QWORD *)a1 + 33) + 1) = ZinNEConvLayer::CanUseDoubleInt8Mode(a1, *(_DWORD *)(v2 + 144), 0);
    }
  }
  return 0;
}

uint64_t ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *a1, ZinIrNetworkStatus *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  ZinIrNetworkStatus *v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v7[0] = &off_24BFF4C70;
  v7[1] = &v6;
  v8 = v7;
  v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v7, 1);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_206EED5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFFF090;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFFF090;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  return ZinMirSetActiveNE(*a3, **(CFArrayRef ***)(a1 + 8));
}

uint64_t std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFF4C70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFF4C70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrNetworkStatus *a2, ZinIrOpLayer **a3)
{
  ZinMirOptimizeForDoubleInt8(*a3, a2);
  return 0;
}

uint64_t std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

BOOL ZinIrTransposeInfo::operator==(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  _BOOL8 result;
  _QWORD *v7;

  v3 = *(char **)(a1 + 16);
  v2 = *(char **)(a1 + 24);
  v5 = *(char **)(a2 + 16);
  v4 = *(char **)(a2 + 24);
  if (v2 - v3 != v4 - v5)
    return 0;
  if (v3 != v2)
  {
    result = v5 != v4;
    while (v5 != v4)
    {
      v7 = *(_QWORD **)(a2 + 16);
      while (*(_QWORD *)v3 != *v7)
      {
        if (++v7 == (_QWORD *)v4)
          return 0;
      }
      v3 += 8;
      if (v3 == v2)
        return result;
    }
    return 0;
  }
  return 1;
}

void ZinIrTransposeInfo::GetInverseMappings(ZinIrTransposeInfo *this@<X0>, char **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *v2;
      v8 = v2[1];
      if ((unint64_t)v5 >= *v6)
      {
        v9 = ((char *)v5 - *a2) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v10 = *v6 - (_QWORD)*a2;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v12);
        else
          v13 = 0;
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v8 | (v7 << 32);
        v5 = (uint64_t *)(v14 + 8);
        v16 = *a2;
        v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            v17 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *((_QWORD *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          v15 = *a2;
        }
        *a2 = v14;
        a2[1] = (char *)v5;
        a2[2] = &v13[8 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v5++ = v8 | (v7 << 32);
      }
      a2[1] = (char *)v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_206EED910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrTransposeInfo::IsInverse(ZinIrTransposeInfo *this, const ZinIrTransposeInfo *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  char v9;

  v3 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)*((_QWORD *)this + 3);
  v5 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  if (v2 - v3 == v4 - v5)
  {
    if (v3 == v2)
      return 1;
    while (v5 != v4)
    {
      v6 = 0;
      v7 = v5 + 8;
      do
      {
        v8 = *(_DWORD *)v3 == *(_DWORD *)(v7 - 4) && *((_DWORD *)v3 + 1) == *(_DWORD *)(v7 - 8);
        v9 = v8;
        v6 |= v9;
        if (v8)
          break;
        v8 = v7 == v4;
        v7 += 8;
      }
      while (!v8);
      if ((v6 & 1) == 0)
        break;
      v3 += 8;
      if (v3 == v2)
        return 1;
    }
  }
  return 0;
}

uint64_t ZinIrTransposeInfo::GetDstDimension(uint64_t a1, uint64_t a2)
{
  _DWORD *i;

  for (i = *(_DWORD **)(a1 + 16); i != *(_DWORD **)(a1 + 24); i += 2)
  {
    if (*i == (_DWORD)a2)
      return i[1];
  }
  return a2;
}

uint64_t ZinIrTransposeInfo::GetSrcDimension(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  for (i = *(unsigned int **)(a1 + 16); i != *(unsigned int **)(a1 + 24); i += 2)
  {
    if (i[1] == (_DWORD)a2)
      return *i;
  }
  return a2;
}

uint64_t ZinIrTransposeInfo::HasDimension(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;
  BOOL v4;
  uint64_t result;

  v2 = *(_DWORD **)(a1 + 16);
  v3 = *(_DWORD **)(a1 + 24);
  if (v2 == v3)
    return 0;
  do
  {
    v4 = *v2 == a2 || v2[1] == a2;
    result = v4;
    if (v4)
      break;
    v2 += 2;
  }
  while (v2 != v3);
  return result;
}

uint64_t ZinIrTransposeInfo::TensorDimensions(ZinIrTransposeInfo *this, ZinTensorDimensions *a2)
{
  __int128 v2;
  _OWORD v4[2];
  uint64_t v5;

  v2 = *((_OWORD *)a2 + 1);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  v5 = *((_QWORD *)a2 + 4);
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(v4, (uint64_t)this + 16, a2);
  return 0;
}

_QWORD *ZinTransposeLayer::ZinTransposeLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C01D478;
  return a1;
}

void sub_206EEDB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

BOOL ZinTransposeLayer::NeedsTypeCastToRead(uint64_t a1, int a2)
{
  if (a2 == 10)
    return *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88) != 10;
  else
    return !IsPrimaryFormat(a2);
}

BOOL ZinTransposeLayer::NeedsTypeCastToWrite(ZinIrOpLayer *a1, int a2)
{
  if (a2 == 10)
    return *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a1, 0) + 88) != 10;
  else
    return !IsPrimaryFormat(a2);
}

_QWORD *ZinTransposeLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  ZinIrOpLayerOpCode *v18;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C01E1F0;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)v8 + 2, *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 3);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinTransposeLayer::ZinTransposeLayer(v6, (uint64_t *)&v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206EEDD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinTransposeLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  ZinTransposeLayer::TransposeKindToString(__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11, a1);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10 = v5;
  v11[0] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v13);
}

void sub_206EEDECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinTransposeLayer::TransposeKindToString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[3];
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  v4[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v4[2] = v2;
  v5[0] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v7);
}

void sub_206EEDFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinTransposeLayer::IsCNTranspose(ZinTransposeLayer *this)
{
  return ZinIrTransposeUnit::IsCNTranspose((int **)(*((_QWORD *)this + 8) + 16));
}

BOOL ZinTransposeLayer::IsCHTranspose(ZinTransposeLayer *this)
{
  return ZinIrTransposeUnit::IsCHTranspose((int **)(*((_QWORD *)this + 8) + 16));
}

BOOL ZinTransposeLayer::IsHWTranspose(ZinTransposeLayer *this)
{
  return ZinIrTransposeUnit::IsHWTranspose((int **)(*((_QWORD *)this + 8) + 16));
}

uint64_t ZinTransposeLayer::Hash(ZinTransposeLayer *this, int *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25[2];
  void *__p;
  char *v27;
  char *v28;

  v3 = *((_QWORD *)this + 8);
  __p = 0;
  v27 = 0;
  v28 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24 = (uint64_t *)v25;
  v4 = *(uint64_t **)(v3 + 16);
  v5 = *(uint64_t **)(v3 + 24);
  if (v4 == v5)
    goto LABEL_28;
  do
  {
    v23 = *v4;
    std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__emplace_unique_key_args<std::pair<ZinIrDimension,ZinIrDimension>,std::pair<ZinIrDimension,ZinIrDimension>>(&v24, (int *)&v23, &v23);
    ++v4;
  }
  while (v4 != v5);
  v6 = v24;
  if (v24 == (uint64_t *)v25)
  {
LABEL_28:
    v7 = v27;
  }
  else
  {
    v7 = v27;
    do
    {
      v8 = *((unsigned int *)v6 + 7);
      v9 = *((unsigned int *)v6 + 8);
      if (v7 >= v28)
      {
        v10 = (v7 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v11 = (v28 - (_BYTE *)__p) >> 2;
        if (v11 <= v10 + 1)
          v11 = v10 + 1;
        if ((unint64_t)(v28 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v28, v12);
        else
          v13 = 0;
        v14 = &v13[8 * v10];
        *(_QWORD *)v14 = v8 | (v9 << 32);
        v7 = v14 + 8;
        v16 = (char *)__p;
        v15 = v27;
        if (v27 != __p)
        {
          do
          {
            v17 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *((_QWORD *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          v15 = (char *)__p;
        }
        __p = v14;
        v27 = v7;
        v28 = &v13[8 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v7 = v8 | (v9 << 32);
        v7 += 8;
      }
      v27 = v7;
      v18 = (uint64_t *)v6[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (uint64_t *)v6[2];
          v20 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v20);
      }
      v6 = v19;
    }
    while (v19 != (uint64_t *)v25);
  }
  if (__p == v7)
    v21 = 0;
  else
    v21 = ZinHash(__p, (int)v7 - (int)__p);
  *a2 = v21;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v24, v25[0]);
  if (__p)
  {
    v27 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_206EEE1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, void *__p, uint64_t a15)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__emplace_unique_key_args<std::pair<ZinIrDimension,ZinIrDimension>,std::pair<ZinIrDimension,ZinIrDimension>>(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__find_equal<std::pair<ZinIrDimension,ZinIrDimension>>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *a3;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__find_equal<std::pair<ZinIrDimension,ZinIrDimension>>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  BOOL v11;
  char v12;
  char v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      v8 = v4;
      v9 = *((_DWORD *)v4 + 7);
      if (v6 == v9)
      {
        v10 = *((_DWORD *)v8 + 8);
        if (v7 >= v10)
        {
          v11 = v10 == v7;
          if (v10 >= v7)
            v12 = 1;
          else
            v12 = -1;
          if (v11)
            v12 = 0;
          if ((v12 & 0x80) == 0)
            goto LABEL_22;
          goto LABEL_19;
        }
LABEL_13:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_22;
      }
      else
      {
        if (v6 < v9)
          goto LABEL_13;
        if (v9 >= v6)
          v13 = 1;
        else
          v13 = -1;
        if ((v13 & 0x80) == 0)
          goto LABEL_22;
LABEL_19:
        result = v8 + 1;
        v4 = (uint64_t *)v8[1];
        if (!v4)
          goto LABEL_22;
      }
    }
  }
  v8 = result;
LABEL_22:
  *a2 = v8;
  return result;
}

uint64_t ZinIrOptForkDilatedConvs(uint64_t **a1, ZinIrOpLayer *this)
{
  ZinIrOpLayerGraph *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t GreatestCommonDivisor;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  __n128 v42;
  uint64_t v43;
  ZinIrOpLayer *SpaceToBatch;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  size_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  ZinIrOpLayer *v58;
  ZinIrConvolutionInfo *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  size_t v62;
  void *v63;
  const void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  ZinIrOpLayer **v75;
  char *v76;
  char *v77;
  ZinIrOpLayer *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  ZinIrKernel *v82;
  uint64_t JoinForSharingBatchToSpace;
  uint64_t ***v84;
  ZinIrOpLayer *v85;
  unint64_t *v86;
  unint64_t v87;
  size_t v88;
  __int128 *v89;
  const void *v90;
  ZinIrOpLayer *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::string *v101;
  std::string::size_type size;
  std::string *v103;
  __int128 v104;
  __n128 v105;
  uint64_t v106;
  ZinIrOpLayer *BatchToSpace;
  char v108;
  uint64_t **v109;
  size_t v110;
  std::string *v111;
  uint64_t *v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  __n128 v119;
  uint64_t v120;
  _OWORD *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  ZinIrOpLayer *v125;
  char v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  _QWORD v133[5];
  _QWORD v134[5];
  std::string v135;
  std::string v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  _QWORD v141[2];
  uint64_t v142;
  uint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *v150;
  char *v151;
  char *v152;
  _QWORD v153[3];
  char v154;
  int v155[3];
  int v156;
  int v157;
  void *v158;
  char *v159;
  char *i;
  void *__p;
  char *v162;
  char *v163;
  void *v164;
  char *v165;
  uint64_t v166;
  std::string v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) || !ZinConvLayer::IsDilated(this))
    return 0;
  v4 = (ZinIrOpLayerGraph *)**((_QWORD **)this + 11);
  v5 = *((_QWORD *)v4 + 14);
  v6 = *((_QWORD *)v4 + 15);
  v164 = 0;
  v165 = 0;
  v166 = 0;
  *(_QWORD *)&v168 = &v164;
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    do
    {
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 64) + 8) && ZinConvLayer::IsDilated(*(ZinConvLayer **)v5))
        std::back_insert_iterator<std::vector<ZinIrOpLayer *>>::operator=[abi:ne180100]((void ***)&v168, (_QWORD *)v5);
      v5 += 8;
    }
    while (v5 != v6);
    v9 = (char *)v164;
    v8 = v165;
  }
  if (v7 < 9 || (unint64_t)(v8 - v9) < 9)
    goto LABEL_60;
  __p = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  for (i = 0; v9 != v8; v9 += 8)
  {
    v10 = *(_DWORD **)(*(_QWORD *)v9 + 136);
    v11 = (int)v10[96];
    v12 = v162;
    if (v162 >= v163)
    {
      v14 = (char *)__p;
      v15 = (v162 - (_BYTE *)__p) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v17 = v163 - (_BYTE *)__p;
      if ((v163 - (_BYTE *)__p) >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v163, v18);
        v14 = (char *)__p;
        v12 = v162;
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *(_QWORD *)v20 = v11;
      v13 = v20 + 8;
      while (v12 != v14)
      {
        v21 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v20 - 1) = v21;
        v20 -= 8;
      }
      __p = v20;
      v162 = v13;
      v163 = &v19[8 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v162 = v11;
      v13 = v12 + 8;
    }
    v162 = v13;
    v22 = (int)v10[97];
    v23 = v159;
    if (v159 >= i)
    {
      v25 = (char *)v158;
      v26 = (v159 - (_BYTE *)v158) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v28 = i - (_BYTE *)v158;
      if ((i - (_BYTE *)v158) >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&i, v29);
        v25 = (char *)v158;
        v23 = v159;
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * v26];
      *(_QWORD *)v31 = v22;
      v24 = v31 + 8;
      while (v23 != v25)
      {
        v32 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v31 - 1) = v32;
        v31 -= 8;
      }
      v158 = v31;
      v159 = v24;
      i = &v30[8 * v29];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v159 = v22;
      v24 = v23 + 8;
    }
    v159 = v24;
    v33 = v10[96];
    if (v10[88] % v33)
      goto LABEL_53;
    if (v10[89] % v33)
      goto LABEL_53;
    v34 = v10[97];
    if (v10[90] % v34 || v10[91] % v34)
      goto LABEL_53;
  }
  GreatestCommonDivisor = FindGreatestCommonDivisor((uint64_t)&__p);
  v36 = FindGreatestCommonDivisor((uint64_t)&v158);
  v37 = v36;
  if (GreatestCommonDivisor == 1 && v36 == 1
    || (v38 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)v4 + 32))(v4, 0, 0),
        *(_QWORD *)(v38 + 72) % GreatestCommonDivisor))
  {
LABEL_53:
    v5 = 0;
    v39 = 1;
    goto LABEL_54;
  }
  v39 = 1;
  if (*(_QWORD *)(v38 + 64) % v37)
  {
    v5 = 0;
    goto LABEL_54;
  }
  *(_QWORD *)&v168 = __PAIR64__(v37, GreatestCommonDivisor);
  DWORD2(v168) = 1;
  ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo((uint64_t)v155, (uint64_t *)&v168);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_s2b", (const void **)v4 + 3, (void **)&v168);
  v42 = ZinObjectNameFactory::ZinObjectNameFactory(v153, &v168);
  if (SBYTE7(v169) < 0)
    operator delete((void *)v168);
  v43 = *((_QWORD *)v4 + 2);
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayerGraph *, _QWORD, _QWORD, __n128))(*(_QWORD *)v4 + 80))(&v168, v4, 0, 0, v42);
  std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v137, &v168, 1uLL);
  SpaceToBatch = (ZinIrOpLayer *)ZinBuilder::CreateSpaceToBatch(v43, (uint64_t)v153, (uint64_t *)&v137, (uint64_t)v155);
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&v168, (uint64_t **)&v164);
  ZinIrOpLayerGraph::AddNode(a1, SpaceToBatch, (ZinIrOpLayer ***)&v168);
  *(_QWORD *)&v168 = &unk_24C02BB18;
  if (*((_QWORD *)&v168 + 1))
  {
    *(_QWORD *)&v169 = *((_QWORD *)&v168 + 1);
    operator delete(*((void **)&v168 + 1));
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v4, (uint64_t)SpaceToBatch, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v45 = (uint64_t *)v164;
  v46 = (uint64_t *)v165;
  if (v164 == v165)
  {
    v150 = 0;
    v151 = 0;
    v152 = 0;
  }
  else
  {
    do
      ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a1, v4, SpaceToBatch, *v45++, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    while (v45 != v46);
    v47 = (char *)v164;
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v131 = v165;
    if (v164 != v165)
    {
      do
      {
        v48 = *(_QWORD *)v47;
        v49 = *(const void ***)(*(_QWORD *)v47 + 136);
        *(_QWORD *)&v174 = v49[69];
        v50 = *(_OWORD *)(v49 + 67);
        v172 = *(_OWORD *)(v49 + 65);
        v173 = v50;
        v51 = *(_OWORD *)(v49 + 59);
        v168 = *(_OWORD *)(v49 + 57);
        v169 = v51;
        v52 = *(_OWORD *)(v49 + 63);
        v170 = *(_OWORD *)(v49 + 61);
        SDWORD2(v172) /= v156;
        SHIDWORD(v172) /= v157;
        LODWORD(v171) = (int)v52 / v156;
        DWORD1(v171) = SDWORD1(v52) / v156;
        DWORD2(v171) = SDWORD2(v52) / v156;
        HIDWORD(v171) = SHIDWORD(v52) / v156;
        if (*((char *)v49 + 23) >= 0)
          v53 = *((unsigned __int8 *)v49 + 23);
        else
          v53 = (size_t)v49[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v137, v53 + 4);
        if (SHIBYTE(v139) >= 0)
          v54 = &v137;
        else
          v54 = v137;
        if (v53)
        {
          if (*((char *)v49 + 23) >= 0)
            v55 = v49;
          else
            v55 = *v49;
          memmove(v54, v55, v53);
        }
        strcpy((char *)v54 + v53, "_s2b");
        v56 = *(_QWORD *)(v48 + 136);
        v57 = operator new();
        ZinIrKernel::ZinIrKernel(v57, &v137, &v168, v56);
        v136.__r_.__value_.__r.__words[0] = v57;
        if (SHIBYTE(v139) < 0)
          operator delete(v137);
        CreateOutputTensor((_QWORD *)v48, v155, &v146);
        v58 = (ZinIrOpLayer *)operator new();
        v59 = (ZinIrConvolutionInfo *)operator new();
        ZinIrConvolutionInfo::ZinIrConvolutionInfo(v59);
        v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
        v148 = v146;
        v149 = v147;
        if (v147)
        {
          p_shared_owners = (unint64_t *)&v147->__shared_owners_;
          do
            v61 = __ldxr(p_shared_owners);
          while (__stxr(v61 + 1, p_shared_owners));
        }
        if (*(char *)(v48 + 47) >= 0)
          v62 = *(unsigned __int8 *)(v48 + 47);
        else
          v62 = *(_QWORD *)(v48 + 32);
        std::string::basic_string[abi:ne180100]((uint64_t)&v137, v62 + 4);
        if (SHIBYTE(v139) >= 0)
          v63 = &v137;
        else
          v63 = v137;
        if (v62)
        {
          if (*(char *)(v48 + 47) >= 0)
            v64 = (const void *)(v48 + 24);
          else
            v64 = *(const void **)(v48 + 24);
          memmove(v63, v64, v62);
        }
        strcpy((char *)v63 + v62, "_s2b");
        ZinConvLayer::ZinConvLayer(v58, &v167, &v148, &v137, &v136);
        if (SHIBYTE(v139) < 0)
          operator delete(v137);
        v65 = v149;
        if (v149)
        {
          v66 = (unint64_t *)&v149->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = v167.__r_.__value_.__r.__words[0];
        v167.__r_.__value_.__r.__words[0] = 0;
        if (v68)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v68 + 8))(v68);
        v137 = &unk_24C02BB18;
        v139 = 0;
        v140 = 0;
        v138 = 0;
        ZinIrOpLayerGraph::ReplaceNode(a1, (ZinIrOpLayer *)v48, v58, (const Layer2TDMapper::SourceLayer *)&v137);
        v137 = &unk_24C02BB18;
        if (v138)
        {
          v139 = v138;
          operator delete(v138);
        }
        v69 = v151;
        if (v151 >= v152)
        {
          v71 = (v151 - (_BYTE *)v150) >> 3;
          if ((unint64_t)(v71 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v72 = (v152 - (_BYTE *)v150) >> 2;
          if (v72 <= v71 + 1)
            v72 = v71 + 1;
          if ((unint64_t)(v152 - (_BYTE *)v150) >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v72;
          if (v73)
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v152, v73);
          else
            v74 = 0;
          v75 = (ZinIrOpLayer **)&v74[8 * v71];
          *v75 = v58;
          v70 = (char *)(v75 + 1);
          v77 = (char *)v150;
          v76 = v151;
          if (v151 != v150)
          {
            do
            {
              v78 = (ZinIrOpLayer *)*((_QWORD *)v76 - 1);
              v76 -= 8;
              *--v75 = v78;
            }
            while (v76 != v77);
            v76 = (char *)v150;
          }
          v150 = v75;
          v151 = v70;
          v152 = &v74[8 * v73];
          if (v76)
            operator delete(v76);
        }
        else
        {
          *(_QWORD *)v151 = v58;
          v70 = v69 + 8;
        }
        v151 = v70;
        v79 = v147;
        if (v147)
        {
          v80 = (unint64_t *)&v147->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = (ZinIrKernel *)v136.__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = 0;
        if (v82)
        {
          ZinIrKernel::~ZinIrKernel(v82);
          MEMORY[0x20BD002F8]();
        }
        v47 += 8;
      }
      while (v47 != v131);
    }
  }
  *(_QWORD *)&v168 = __PAIR64__(v37, GreatestCommonDivisor);
  DWORD2(v168) = 1;
  ZinIrBatchToSpaceInfo::ZinIrBatchToSpaceInfo((uint64_t)&v146, (uint64_t *)&v168);
  JoinForSharingBatchToSpace = FindJoinForSharingBatchToSpace((uint64_t)&v150);
  v84 = (uint64_t ***)v150;
  v132 = v151;
  if (JoinForSharingBatchToSpace)
  {
    if (v150 != v151)
    {
      do
      {
        v85 = (ZinIrOpLayer *)*(*v84)[14];
        while (v85 != (ZinIrOpLayer *)JoinForSharingBatchToSpace)
        {
          CreateOutputTensor(v85, v155, (uint64_t *)&v137);
          v144 = v137;
          v145 = (std::__shared_weak_count *)v138;
          if (v138)
          {
            v86 = (unint64_t *)((char *)v138 + 8);
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          if (*((char *)v85 + 47) >= 0)
            v88 = *((unsigned __int8 *)v85 + 47);
          else
            v88 = *((_QWORD *)v85 + 4);
          std::string::basic_string[abi:ne180100]((uint64_t)&v168, v88 + 4);
          if ((SBYTE7(v169) & 0x80u) == 0)
            v89 = &v168;
          else
            v89 = (__int128 *)v168;
          if (v88)
          {
            if (*((char *)v85 + 47) >= 0)
              v90 = (char *)v85 + 24;
            else
              v90 = (const void *)*((_QWORD *)v85 + 3);
            memmove(v89, v90, v88);
          }
          strcpy((char *)v89 + v88, "_s2b");
          v91 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinIrOpLayer *, void **, __int128 *))(*(_QWORD *)v85 + 176))(v85, &v144, &v168);
          if (SBYTE7(v169) < 0)
            operator delete((void *)v168);
          v92 = v145;
          if (v145)
          {
            v93 = (unint64_t *)&v145->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          *(_QWORD *)&v168 = &unk_24C02BB18;
          v169 = 0uLL;
          *((_QWORD *)&v168 + 1) = 0;
          ZinIrOpLayerGraph::ReplaceNode(a1, v85, v91, (const Layer2TDMapper::SourceLayer *)&v168);
          *(_QWORD *)&v168 = &unk_24C02BB18;
          if (*((_QWORD *)&v168 + 1))
          {
            *(_QWORD *)&v169 = *((_QWORD *)&v168 + 1);
            operator delete(*((void **)&v168 + 1));
          }
          v85 = (ZinIrOpLayer *)**((_QWORD **)v91 + 14);
          v95 = (std::__shared_weak_count *)v138;
          if (v138)
          {
            v96 = (unint64_t *)((char *)v138 + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        ++v84;
      }
      while (v84 != (uint64_t ***)v132);
    }
    CreateOutputTensor((_QWORD *)JoinForSharingBatchToSpace, v155, &v142);
    v141[0] = v142;
    v141[1] = v143;
    if (v143)
    {
      v98 = (unint64_t *)(v143 + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_s2b", (const void **)(JoinForSharingBatchToSpace + 24), (void **)&v168);
    v100 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)JoinForSharingBatchToSpace + 176))(JoinForSharingBatchToSpace, v141, &v168);
    if (SBYTE7(v169) < 0)
      operator delete((void *)v168);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v141);
    *(_QWORD *)&v168 = &unk_24C02BB18;
    *((_QWORD *)&v168 + 1) = 0;
    v169 = 0uLL;
    ZinIrOpLayerGraph::ReplaceNode(a1, (ZinIrOpLayer *)JoinForSharingBatchToSpace, (ZinIrOpLayer *)v100, (const Layer2TDMapper::SourceLayer *)&v168);
    *(_QWORD *)&v168 = &unk_24C02BB18;
    if (*((_QWORD *)&v168 + 1))
    {
      *(_QWORD *)&v169 = *((_QWORD *)&v168 + 1);
      operator delete(*((void **)&v168 + 1));
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_", (const void **)(v100 + 24), (void **)&v136.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v135, "b2s_join");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_xfm", &v135, &v167);
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v101 = &v167;
    else
      v101 = (std::string *)v167.__r_.__value_.__r.__words[0];
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v167.__r_.__value_.__r.__words[2]);
    else
      size = v167.__r_.__value_.__l.__size_;
    v103 = std::string::append(&v136, (const std::string::value_type *)v101, size);
    v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    *(_QWORD *)&v169 = *((_QWORD *)&v103->__r_.__value_.__l + 2);
    v168 = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    v105 = ZinObjectNameFactory::ZinObjectNameFactory(&v137, &v168);
    if (SBYTE7(v169) < 0)
      operator delete((void *)v168);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    v106 = *(_QWORD *)(v100 + 16);
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v100 + 80))(&v168, v100, 0, 0, v105);
    std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v136, &v168, 1uLL);
    BatchToSpace = (ZinIrOpLayer *)ZinBuilder::CreateBatchToSpace(v106, (uint64_t)&v137, (uint64_t *)&v136, (uint64_t)&v146);
    if (v136.__r_.__value_.__r.__words[0])
    {
      v136.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    Layer2TDMapper::SourceLayer::SourceLayer<std::vector<ZinIrOpLayer *>>(&v168, (uint64_t **)&v164);
    ZinIrOpLayerGraph::AddNode(a1, BatchToSpace, (ZinIrOpLayer ***)&v168);
    *(_QWORD *)&v168 = &unk_24C02BB18;
    if (*((_QWORD *)&v168 + 1))
    {
      *(_QWORD *)&v169 = *((_QWORD *)&v168 + 1);
      operator delete(*((void **)&v168 + 1));
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v100, (uint64_t)BatchToSpace, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_QWORD *)&v168 = BatchToSpace;
    std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)v134, &v168, 1);
    v108 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v100, BatchToSpace, v134);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v134);
    if ((v108 & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      v128 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v128)
        MirOpt::MergeGOCsToConvs(v128, v129, v130);
      v5 = 3;
    }
    v137 = off_24C01FBB0;
    if (SHIBYTE(v140) < 0)
      operator delete(v138);
    std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v142);
    if ((v108 & 1) != 0)
      goto LABEL_246;
LABEL_247:
    v39 = 1;
    goto LABEL_248;
  }
  v5 = 0;
  if (v150 != v151)
  {
    do
    {
      v109 = *v84;
      if (*((char *)*v84 + 47) >= 0)
        v110 = *((unsigned __int8 *)*v84 + 47);
      else
        v110 = (size_t)(*v84)[4];
      std::string::basic_string[abi:ne180100]((uint64_t)&v136, v110 + 1);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = &v136;
      else
        v111 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if (v110)
      {
        if (*((char *)v109 + 47) >= 0)
          v112 = (uint64_t *)(v109 + 3);
        else
          v112 = v109[3];
        memmove(v111, v112, v110);
      }
      *(_WORD *)((char *)&v111->__r_.__value_.__l.__data_ + v110) = 95;
      std::string::basic_string[abi:ne180100]<0>(&v135, "b2s_dilconv");
      v113 = std::string::append(&v135, "_xfm", 4uLL);
      v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
      v167.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v114;
      v113->__r_.__value_.__l.__size_ = 0;
      v113->__r_.__value_.__r.__words[2] = 0;
      v113->__r_.__value_.__r.__words[0] = 0;
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = &v167;
      else
        v115 = (std::string *)v167.__r_.__value_.__r.__words[0];
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v116 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
      else
        v116 = v167.__r_.__value_.__l.__size_;
      v117 = std::string::append(&v136, (const std::string::value_type *)v115, v116);
      v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      *(_QWORD *)&v169 = *((_QWORD *)&v117->__r_.__value_.__l + 2);
      v168 = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      v119 = ZinObjectNameFactory::ZinObjectNameFactory(&v137, &v168);
      if (SBYTE7(v169) < 0)
        operator delete((void *)v168);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v135.__r_.__value_.__l.__data_);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v120 = (uint64_t)v109[2];
      ((void (*)(__int128 *__return_ptr, uint64_t **, _QWORD, _QWORD, __n128))(*v109)[10])(&v168, v109, 0, 0, v119);
      v121 = operator new(0x78uLL);
      v136.__r_.__value_.__l.__size_ = (std::string::size_type)v121 + 120;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v121 + 120;
      v122 = v173;
      v121[4] = v172;
      v121[5] = v122;
      v121[6] = v174;
      *((_DWORD *)v121 + 28) = v175;
      v123 = v169;
      *v121 = v168;
      v121[1] = v123;
      v124 = v171;
      v121[2] = v170;
      v121[3] = v124;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
      v125 = (ZinIrOpLayer *)ZinBuilder::CreateBatchToSpace(v120, (uint64_t)&v137, (uint64_t *)&v136, (uint64_t)&v146);
      if (v136.__r_.__value_.__r.__words[0])
      {
        v136.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
        operator delete(v136.__r_.__value_.__l.__data_);
      }
      v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
      v136.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v168, &v136);
      ZinIrOpLayerGraph::AddNode(a1, v125, (ZinIrOpLayer ***)&v168);
      *(_QWORD *)&v168 = &unk_24C02BB18;
      if (*((_QWORD *)&v168 + 1))
      {
        *(_QWORD *)&v169 = *((_QWORD *)&v168 + 1);
        operator delete(*((void **)&v168 + 1));
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v109, (uint64_t)v125, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      *(_QWORD *)&v168 = v125;
      std::unordered_set<ZinIrOpLayer *>::unordered_set((uint64_t)v133, &v168, 1);
      v126 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, v109, v125, v133);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v133);
      if ((v126 & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          MirOpt::MergeGOCsToConvs((uint8_t *)&v142, (_BYTE *)&v142 + 1, v127);
        v5 = 3;
      }
      v137 = off_24C01FBB0;
      if (SHIBYTE(v140) < 0)
        operator delete(v138);
      if ((v126 & 1) == 0)
        goto LABEL_247;
      ++v84;
    }
    while (v84 != (uint64_t ***)v132);
  }
LABEL_246:
  v39 = 0;
LABEL_248:
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v146);
  if (v150)
  {
    v151 = (char *)v150;
    operator delete(v150);
  }
  v153[0] = off_24C01FBB0;
  if (v154 < 0)
    operator delete((void *)v153[1]);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v155);
LABEL_54:
  if (v158)
  {
    v159 = (char *)v158;
    operator delete(v158);
  }
  if (__p)
  {
    v162 = (char *)__p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = 0;
    goto LABEL_61;
  }
LABEL_60:
  v40 = 1;
LABEL_61:
  if (v164)
  {
    v165 = (char *)v164;
    operator delete(v164);
  }
  if ((v40 & 1) != 0)
    return 0;
  return v5;
}

void sub_206EEF3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  void *a67;
  uint64_t a68;
  void *a70;
  uint64_t a71;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a19);
  a30 = off_24C01FBB0;
  if (a36 < 0)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a45);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  a53 = (uint64_t)off_24C01FBB0;
  if (a59 < 0)
    operator delete(a54);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a61);
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void CreateOutputTensor(_QWORD *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  void **v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  void *__p[2];
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v6 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  v7 = v6;
  v8 = *(_OWORD *)(v6 + 64);
  v35 = *(_OWORD *)(v6 + 48);
  v36 = v8;
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = *(_QWORD *)(v6 + 80) / v11;
  *((_QWORD *)&v36 + 1) = *((_QWORD *)&v8 + 1) / v9;
  v37 = v12;
  *(_QWORD *)&v36 = (uint64_t)v8 / v10;
  *(_QWORD *)&v35 = (int)v10 * (uint64_t)(int)v9 * v11 * v35;
  v13 = a1[2];
  v14 = *(_DWORD *)(v6 + 88);
  if (*(char *)(v6 + 47) >= 0)
    v15 = *(unsigned __int8 *)(v6 + 47);
  else
    v15 = *(_QWORD *)(v6 + 32);
  v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 4);
  if (v34 < 0)
    v16 = (void **)__p[0];
  if (v15)
  {
    v19 = *(char **)(v7 + 24);
    v18 = (char *)(v7 + 24);
    v17 = v19;
    if (v18[23] >= 0)
      v20 = v18;
    else
      v20 = v17;
    memmove(v16, v20, v15);
  }
  strcpy((char *)v16 + v15, "_s2b");
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v25 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  ZinIrTensor::CreateTensor(v13, v14, &v35, (__int128 *)__p, &v32, &v30, &v25, a3);
  v21 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v32;
  v32 = 0;
  if (v24)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v32, v24);
  if (v34 < 0)
    operator delete(__p[0]);
}

void sub_206EEF9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, _QWORD *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v24;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v24 = a17;
  a17 = 0;
  if (v24)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a17, v24);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t FindJoinForSharingBatchToSpace(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v6, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  if (v7 == (_BYTE *)v6)
  {
LABEL_9:
    v4 = *v6;
  }
  else
  {
    v1 = 0;
    v2 = (v7 - (_BYTE *)v6) >> 3;
    if (v2 <= 1)
      v2 = 1;
    while (1)
    {
      v3 = (_QWORD *)v6[v1];
      if (v3[15] - v3[14] == 8 && v3[12] - v3[11] == 8)
        break;
      if (v1 && v3 != (_QWORD *)v6[(v1 - 1)])
        break;
      if (v2 == ++v1)
        goto LABEL_9;
    }
    v4 = 0;
  }
  v7 = v6;
  operator delete(v6);
  return v4;
}

uint64_t ZinParseGOCUnit(const __CFDictionary *a1, ZinIrGOCUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  uint64_t result;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  CFTypeID v11;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    result = ZinParseScalarInfo(v6, CFSTR("ScaleShift"), CFSTR("ScaleScalar"), CFSTR("ScaleCount"), (BOOL *)a2 + 80, (signed __int8 *)a2 + 81, (float *)a2 + 21, a3);
    if (!(_DWORD)result)
    {
      result = ZinParseScalarInfo(v6, CFSTR("BiasShift"), CFSTR("BiasScalar"), CFSTR("BiasCount"), (BOOL *)a2 + 92, (signed __int8 *)a2 + 93, (float *)a2 + 24, a3);
      if (!(_DWORD)result)
      {
        v9 = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("BiasScaleGroupData"));
        if (!v9 || (v10 = v9, v11 = CFGetTypeID(v9), v11 != CFDictionaryGetTypeID()))
        {
          *((_BYTE *)a2 + 92) = 1;
          *((_BYTE *)a2 + 80) = 1;
          return 0;
        }
        result = ZinGetFloatFormat(v10, CFSTR("ScaleType"), (int *)a2 + 22, a3);
        if (!(_DWORD)result)
        {
          result = ZinGetFloatFormat(v10, CFSTR("BiasType"), (int *)a2 + 25, a3);
          if (!(_DWORD)result)
          {
            result = ZinParseGroupDataInfo(v10, CFSTR("BiasMutable"), CFSTR("BiasCount"), CFSTR("BiasIndex"), CFSTR("BiasOffset"), (_BYTE *)a2 + 92, (uint64_t)a2 + 128, a3);
            if (!(_DWORD)result)
            {
              result = ZinParseGroupDataInfo(v10, CFSTR("ScaleMutable"), CFSTR("ScaleCount"), CFSTR("ScaleIndex"), CFSTR("ScaleOffset"), (_BYTE *)a2 + 80, (uint64_t)a2 + 104, a3);
              if (!(_DWORD)result)
                return 0;
            }
          }
        }
      }
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  return result;
}

uint64_t ZinParseScalarInfo(const __CFDictionary *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, BOOL *a5, signed __int8 *a6, float *a7, CFArrayRef *a8)
{
  const __CFDictionary *Value;
  const __CFDictionary *v17;
  CFTypeID v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  uint64_t result;
  const __CFNumber *v23;
  CFTypeID v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  __int16 v34;
  int valuePtr;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("BiasScaleGroupData"));
  v17 = Value;
  if (Value)
  {
    v18 = CFGetTypeID(Value);
    if (v18 != CFDictionaryGetTypeID())
      v17 = 0;
  }
  *a6 = 0;
  v19 = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (v19)
  {
    v20 = v19;
    v21 = CFGetTypeID(v19);
    if (v21 == CFNumberGetTypeID())
      CFNumberGetValue(v20, kCFNumberSInt8Type, a6);
  }
  result = (uint64_t)CFDictionaryGetValue(a1, a3);
  if (result)
  {
    v23 = (const __CFNumber *)result;
    v24 = CFGetTypeID((CFTypeRef)result);
    if (v24 == CFNumberGetTypeID())
    {
      *a5 = 1;
      if (v17
        && (valuePtr = 1, (v25 = (const __CFNumber *)CFDictionaryGetValue(v17, a4)) != 0)
        && (v26 = v25, v27 = CFGetTypeID(v25), v27 == CFNumberGetTypeID())
        && (CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr), valuePtr != 1))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinParseScalarInfo();
        ZinIrUnitStatus::SetError(a8, CFSTR("InvalidScaleBiasCount"));
        return 3;
      }
      else
      {
        v34 = 0;
        CFNumberGetValue(v23, kCFNumberSInt16Type, &v34);
        result = 0;
        _H0 = v34;
        __asm { FCVT            S0, H0 }
        *(_DWORD *)a7 = _S0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ZinParseGroupDataInfo(const __CFDictionary *a1, const __CFString *a2, void *key, const __CFString *a4, const __CFString *a5, _BYTE *a6, uint64_t a7, CFArrayRef *a8)
{
  const __CFNumber *Value;
  const __CFNumber *v16;
  CFTypeID v17;
  int v18;
  uint64_t result;

  if (*a6)
    return 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (!Value || (v16 = Value, v17 = CFGetTypeID(Value), v17 != CFNumberGetTypeID()))
  {
    *(_BYTE *)a7 = 0;
    *a6 = 1;
    return 0;
  }
  CFNumberGetValue(v16, kCFNumberSInt32Type, (void *)(a7 + 8));
  v18 = *(_DWORD *)(a7 + 8);
  if (v18 > 0)
  {
    ZinParseBoolean(a1, a2, (BOOL *)a7);
    ZinParseIndexToken(a1, a4, (int *)(a7 + 4));
    result = ZinParseOffsetToken(a1, a5, CFSTR("InvalidScaleBiasOffsetSyntax"), (uint64_t *)(a7 + 16), a8);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinParseGroupDataInfo(v18);
  ZinIrUnitStatus::SetError(a8, CFSTR("InvalidScaleBiasOffsetSyntax"));
  return 3;
}

void ZinParseScalarInfo()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Scalar is set but data count is not 1.\n", v0, 2u);
}

void ZinParseGroupDataInfo(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid GOC GroupData count value: %d\n", (uint8_t *)v1, 8u);
}

uint64_t ZinCodegenUtil::ConvertInt32ToCustomUnsignedType(ZinCodegenUtil *this, unint64_t a2)
{
  int v2;

  v2 = -1 << a2;
  if ((v2 & this) != v2 && (v2 & this) != 0)
    ZinAssertImpl("Out of range");
  if (a2 >= 0x21)
    ZinAssertImpl("Invalid conversion.");
  return this & ~v2;
}

BOOL ZinCodegenUtil::ValueToRegister(unint64_t a1, unsigned int *a2, _DWORD *a3)
{
  _BOOL8 v4;

  v4 = *a2 <= a1 && a2[1] >= a1;
  if (v4)
    *a3 = a1;
  return v4;
}

BOOL ZinCodegenUtil::SignedValueToRegister(ZinCodegenUtil *a1, unint64_t a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v6;
  _BOOL8 v8;

  v6 = ZinCodegenUtil::ConvertInt32ToCustomUnsignedType(a1, a2);
  v8 = v6 >= *a3 && v6 <= a3[1];
  if (v8)
    *a4 = v6;
  return v8;
}

_QWORD *ZinCodegenUtil::SplitInstructionListByHWNetwork@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v11[0] = v11;
  v11[1] = v11;
  v12 = 0;
  for (i = *(_QWORD *)(a1 + 8); i != a1; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    v6 = operator new(0x18uLL);
    v6[1] = v11;
    v6[2] = v5;
    v7 = v11[0];
    *v6 = v11[0];
    *(_QWORD *)(v7 + 8) = v6;
    v11[0] = v6;
    ++v12;
    if (*(_BYTE *)(v5 + 198))
    {
      v8 = a2[1];
      if (v8 >= a2[2])
      {
        v9 = std::vector<std::list<ZinAneInstruction *>>::__push_back_slow_path<std::list<ZinAneInstruction *> const&>(a2, (uint64_t)v11);
      }
      else
      {
        std::list<ZinAneInstruction *>::list((_QWORD *)a2[1], (uint64_t)v11);
        v9 = v8 + 24;
        a2[1] = v8 + 24;
      }
      a2[1] = v9;
      std::__list_imp<ZinIrSection *>::clear(v11);
    }
  }
  return std::__list_imp<ZinIrSection *>::clear(v11);
}

void sub_206EF01B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  std::__list_imp<ZinIrSection *>::clear(&a10);
  a10 = (void **)v10;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::list<ZinAneInstruction *>>::__push_back_slow_path<std::list<ZinAneInstruction *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  std::list<ZinAneInstruction *>::list(v14, a2);
  v15 = v14 + 24;
  std::vector<std::list<ZinAneInstruction *>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::list<ZinAneInstruction *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206EF02D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::list<ZinAneInstruction *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::list<ZinAneInstruction *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_206EF0368(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMatrixMultUnit::ZinIrMatrixMultUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C01EE20;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C0221F8;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_206EF044C(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrMatrixMultUnit::CreateOpcode(ZinIrMatrixMultUnit *this@<X0>, const ZinIrHalParameters *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v5 = **((_DWORD **)this + 1);
  if (IsFormatDMAConvertibleToFP16(v5))
    v6 = 3;
  else
    v6 = v5;
  v7 = operator new();
  ZinIrMatrixMultInfo::ZinIrMatrixMultInfo((ZinIrMatrixMultInfo *)v7);
  v9 = *((unsigned __int8 *)this + 136);
  *(_BYTE *)(v7 + 12) = v9;
  if (!v9)
    goto LABEL_15;
  if (v6 > 2)
  {
    if (v6 == 3)
    {
      _H0 = *((_WORD *)this + 69);
      __asm { FCVT            S0, H0 }
      goto LABEL_14;
    }
    if (v6 != 12)
    {
LABEL_12:
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      return;
    }
LABEL_11:
    _S0 = (float)*((char *)this + 138);
    goto LABEL_14;
  }
  if (v6 == 1)
    goto LABEL_11;
  if (v6 != 2)
    goto LABEL_12;
  LOBYTE(v8) = *((_BYTE *)this + 138);
  _S0 = (float)v8;
LABEL_14:
  *(float *)(v7 + 16) = _S0;
LABEL_15:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v7;
}

void sub_206EF0568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40D29F85BDLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMatrixMultUnit::TensorDimensions(ZinIrMatrixMultUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  return ZinGetOutputTensorDimensionMatrixMult((const ZinTensorDimensions *)(*((_QWORD *)this + 1) + 8), (const ZinTensorDimensions *)(*((_QWORD *)this + 1) + 128), *(_QWORD *)(*((_QWORD *)this + 1) + 16), a3);
}

uint64_t ZinIrMatrixMultUnit::CreateLayer(ZinIrMatrixMultUnit *a1, const ZinIrHalParameters *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;

  ZinIrMatrixMultUnit::CreateOpcode(a1, a2, (uint64_t)&v19);
  if (v19)
  {
    v7 = 0;
  }
  else
  {
    v8 = operator new();
    v7 = v8;
    v9 = (std::__shared_weak_count *)(*a3)[1];
    v17 = **a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ZinMatrixMultLayer::ZinMatrixMultLayer(v8, &v20, &v17, (char *)a1 + 64, a4);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v7);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

void sub_206EF06BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrMatrixMultUnit::~ZinIrMatrixMultUnit(void **this)
{
  *this = &off_24C01EE20;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C01EE20;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

BOOL LayerAndUsageInfo::operator<(_DWORD *a1, _DWORD *a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8) < *(_QWORD *)(*(_QWORD *)a2 + 8) || a1[2] < a2[2];
}

uint64_t GetTensorFromLayerAndUsage(uint64_t a1, int a2)
{
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;

  GetTensorPtrFromLayerAndUsage(a1, a2);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)())v6->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void GetTensorPtrFromLayerAndUsage(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_206EF0840(ZinIrOpLayer *a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (_QWORD *)ZinIrOpLayer::GetInputTensorPtr(a1, 0);
  v3 = result[1];
  *v1 = *result;
  v1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void ZinTensorFamilyUtil::ZinTensorFamilyUtil(ZinTensorFamilyUtil *this, const ZinIrControlFlowGraph *a2, int a3, int a4)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  ZinTensorFamilyUtil::BuildRootTensorMap((uint64_t)this, a2, (uint64_t)this + 40);
  if (a3)
    ZinTensorFamilyUtil::SetTensorFamilyAttributes((int)this, a2, this, a4);
}

void sub_206EF092C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v3, *(_QWORD **)(v1 + 88));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::BuildRootTensorMap(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t Hal;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t **v13;
  void *__p;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      Hal = ZinIrTarget::GetHal((ZinIrTarget *)v5[4]);
      std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v17, Hal);
      __p = 0;
      v15 = 0;
      v16 = 0;
      v8 = std::vector<ZinIrTensor *>::insert<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>((uint64_t)&__p, 0, v17, &v18);
      ZinTensorFamilyUtil::BuildRootTensorMap((uint64_t)v8, (uint64_t *)&__p, a3);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v17, v18);
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v4);
  }
  v12 = *(_QWORD **)(a1 + 56);
  if (v12)
  {
    v13 = (uint64_t **)(a1 + 80);
    do
    {
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v13, v12 + 3, v12 + 3);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
}

void sub_206EF0A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::SetTensorFamilyAttributes(int a1, _QWORD *a2, _QWORD *a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t Hal;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      Hal = ZinIrTarget::GetHal((ZinIrTarget *)v5[4]);
      std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v16, Hal);
      __p = 0;
      v14 = 0;
      v15 = 0;
      std::vector<ZinIrTensor *>::insert<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>((uint64_t)&__p, 0, v16, &v17);
      ZinTensorFamilyUtil::SetTensorFamilyAttributes(a1, (ZinIrOpLayer ***)&__p, a3, a4);
      if (__p)
      {
        v14 = __p;
        operator delete(__p);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17);
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
    }
    while (v11 != v4);
  }
}

void sub_206EF0B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::BuildRootTensorMap(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  ZinIrTensor **v6;
  ZinIrTensor **v7;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v9;
  _QWORD v10[3];
  void ***v11;
  void **v12;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v3 + 72))(v10);
      v6 = (ZinIrTensor **)v10[0];
      v7 = (ZinIrTensor **)v10[1];
      while (v6 != v7)
      {
        RootTensor = ZinIrTensor::GetRootTensor(*v6);
        v9 = *v6;
        v11 = &v12;
        v12 = (void **)v9;
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(a3, &v12, (uint64_t)&std::piecewise_construct, &v11)[3] = RootTensor;
        v6 += 2;
      }
      v12 = (void **)v10;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v12);
      v3 += 8;
    }
    while (v3 != v4);
  }
}

void sub_206EF0C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::SetTensorFamilyAttributes(int a1, ZinIrOpLayer ***a2, _QWORD *a3, int a4)
{
  ZinIrOpLayer **v4;
  ZinIrOpLayer **v5;
  ZinIrOpLayer *v9;
  char IsNoOp;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  ZinIrTensor *v14;
  ZinIrTensor **v15;
  ZinIrTensor **v16;
  void *__p;
  ZinIrTensor **v18;
  uint64_t v19;
  void **p_p;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v9 = *v4;
      __p = 0;
      v18 = 0;
      v19 = 0;
      IsNoOp = ZinIrOpLayer::IsNoOp(v9, (uint64_t *)&__p);
      if (__p)
      {
        v18 = (ZinIrTensor **)__p;
        operator delete(__p);
      }
      if ((IsNoOp & 1) == 0)
      {
        v11 = (uint64_t *)*((_QWORD *)v9 + 11);
        v12 = (uint64_t *)*((_QWORD *)v9 + 12);
        while (v11 != v12)
        {
          v13 = *v11++;
          v14 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
          ZinTensorFamilyUtil::InitializeTensorFamilyAttributes(a1, v14, a3, a4);
        }
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(_QWORD *)v9 + 72))(&__p, v9);
        v15 = (ZinIrTensor **)__p;
        v16 = v18;
        while (v15 != v16)
        {
          ZinTensorFamilyUtil::InitializeTensorFamilyAttributes(a1, *v15, a3, a4);
          v15 += 2;
        }
        p_p = &__p;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&p_p);
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_206EF0DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinTensorFamilyUtil::InitializeTensorFamilyAttributes(int a1, ZinIrTensor *this, _QWORD *a3, int a4)
{
  ZinIrTensor *RootTensor;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  const ZinIrTensor *v19;
  const ZinIrTensor **v20;

  RootTensor = ZinIrTensor::GetRootTensor(this);
  v19 = RootTensor;
  if ((!a4 || !*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(*((_QWORD *)RootTensor + 13) + 40) + 8) + 12))
    && !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v19))
  {
    ZinTensorFamilyUtil::BuildTensorFamilyAttribute(v19, (uint64_t)v11);
    v20 = &v19;
    v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)a3, &v19, (uint64_t)&std::piecewise_construct, &v20);
    v8 = (void *)v7[3];
    if (v8)
    {
      v7[4] = v8;
      operator delete(v8);
      v7[3] = 0;
      v7[4] = 0;
      v7[5] = 0;
    }
    v9 = (void *)v7[6];
    *(_OWORD *)(v7 + 3) = *(_OWORD *)v11;
    v7[5] = v12;
    v11[1] = 0;
    v12 = 0;
    v11[0] = 0;
    if (v9)
    {
      v7[7] = v9;
      operator delete(v9);
      v7[6] = 0;
      v7[7] = 0;
      v7[8] = 0;
    }
    v10 = (void *)v7[9];
    *((_OWORD *)v7 + 3) = *(_OWORD *)__p;
    v7[8] = v14;
    __p[1] = 0;
    v14 = 0;
    __p[0] = 0;
    if (v10)
    {
      v7[10] = v10;
      operator delete(v10);
      v7[9] = 0;
      v7[10] = 0;
      v7[11] = 0;
      v10 = __p[0];
    }
    *(_OWORD *)(v7 + 9) = v15;
    v7[11] = v16;
    v16 = 0;
    v15 = 0uLL;
    *((_WORD *)v7 + 48) = v17;
    *((_BYTE *)v7 + 98) = v18;
    if (v10)
    {
      __p[1] = v10;
      operator delete(v10);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
}

void sub_206EF0F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SplitOutputs::~SplitOutputs((SplitOutputs *)&a9);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::BuildTensorFamilyAttribute(const ZinIrTensor *a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  ZinIrTensor **v5;
  ZinIrTensor **v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL IsLiveOut;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  void *__p;
  _BYTE *v20;
  void *v21[3];
  void *v22;
  _BYTE *v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  ZinIrTensor::GetTensorFamily(a1, (uint64_t)&v24);
  v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(_QWORD *)(a2 + 56) = v4;
    operator delete(v4);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  *(_OWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 64) = v25;
  ZinTensorFamilyUtil::FindUsers((uint64_t **)(a2 + 48), 0, (void **)&v24);
  ZinTensorFamilyUtil::SortLayersBySched((uint64_t)&v24, (ZinIrOpLayer ***)&v22);
  ZinTensorFamilyUtil::FindUsers((uint64_t **)(a2 + 48), 1, v21);
  ZinTensorFamilyUtil::SortLayersBySched((uint64_t)v21, (ZinIrOpLayer ***)&__p);
  if (&v22 != (void **)a2)
    std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)a2, (char *)v22, (uint64_t)v23, (v23 - (_BYTE *)v22) >> 4);
  if ((void **)(a2 + 24) != &__p)
    std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)(a2 + 24), (char *)__p, (uint64_t)v20, (v20 - (_BYTE *)__p) >> 4);
  v5 = *(ZinIrTensor ***)(a2 + 48);
  v6 = *(ZinIrTensor ***)(a2 + 56);
  if (v5 == v6)
  {
    *(_BYTE *)(a2 + 73) = 0;
LABEL_28:
    v17 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_29;
  }
  while (*((_QWORD *)*v5 + 14) || !ZinIrTensor::IsLiveInLiveStateOrConstTensor(*v5))
  {
    if (++v5 == v6)
    {
      v7 = 0;
      goto LABEL_14;
    }
  }
  v7 = 1;
LABEL_14:
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a2 + 73) = v7;
  if (v8 == v9)
    goto LABEL_28;
  v10 = v8 + 8;
  do
  {
    IsLiveOut = ZinIrTensor::IsLiveOut(*(ZinIrTensor **)(v10 - 8));
    v12 = v10 == v9 || IsLiveOut;
    v10 += 8;
  }
  while ((v12 & 1) == 0);
  v14 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a2 + 72) = IsLiveOut;
  if (v14 == v13)
  {
    v17 = 0;
  }
  else
  {
    v15 = v14 + 8;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 112);
      v18 = v16 == 0;
      v17 = v16 != 0;
      v18 = !v18 || v15 == v13;
      v15 += 8;
    }
    while (!v18);
  }
LABEL_29:
  *(_BYTE *)(a2 + 74) = v17;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if ((_QWORD)v24)
  {
    *((_QWORD *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
}

void sub_206EF1150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  SplitOutputs *v17;
  uint64_t v18;
  void *v20;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v20 = *(void **)(v18 - 64);
  if (v20)
  {
    *(_QWORD *)(v18 - 56) = v20;
    operator delete(v20);
  }
  SplitOutputs::~SplitOutputs(v17);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::FindUsers(uint64_t **a1@<X1>, char a2@<W2>, void **a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  ZinIrOpLayer **v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer *v9;
  char IsNoOp;
  unint64_t i;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  ZinIrOpLayer *v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v52;
  void *__p;
  void *v54;
  uint64_t v55;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v50 = a1[1];
  if (*a1 != v50)
  {
    do
    {
      v52 = v4;
      v5 = *v4;
      v6 = *(_QWORD *)(*v4 + 96);
      v8 = *(ZinIrOpLayer ***)(v6 + 112);
      v7 = *(ZinIrOpLayer ***)(v6 + 120);
      while (v8 != v7)
      {
        v9 = *v8;
        __p = 0;
        v54 = 0;
        v55 = 0;
        IsNoOp = ZinIrOpLayer::IsNoOp(v9, (uint64_t *)&__p);
        if (__p)
        {
          v54 = __p;
          operator delete(__p);
        }
        if ((IsNoOp & 1) == 0 && *((_QWORD *)v9 + 12) != *((_QWORD *)v9 + 11))
        {
          for (i = 0; i < (uint64_t)(*((_QWORD *)v9 + 12) - *((_QWORD *)v9 + 11)) >> 3; ++i)
          {
            if (ZinIrOpLayer::GetInputTensor(v9, i) == v5)
            {
              if (i == 1)
              {
                v14 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 120))(v9);
                v13 = (char *)a3[1];
                v15 = (char *)a3[2];
                if (v14)
                {
                  if (v13 < v15)
                  {
                    *(_QWORD *)v13 = v9;
                    v16 = 2;
                    goto LABEL_27;
                  }
                  v23 = (v13 - (_BYTE *)*a3) >> 4;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v25 = v15 - (_BYTE *)*a3;
                  if (v25 >> 3 > v24)
                    v24 = v25 >> 3;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
                    v20 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v20 = v24;
                  if (v20)
                    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v20);
                  else
                    v21 = 0;
                  v29 = &v21[16 * v23];
                  *(_QWORD *)v29 = v9;
                  *((_DWORD *)v29 + 2) = 2;
                  v33 = (char *)*a3;
                  v30 = (char *)a3[1];
                  v32 = v29;
                  if (v30 == *a3)
                    goto LABEL_57;
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v33);
                }
                else
                {
                  if (v13 < v15)
                  {
                    *(_QWORD *)v13 = v9;
                    v16 = 1;
LABEL_27:
                    *((_DWORD *)v13 + 2) = v16;
LABEL_28:
                    v22 = v13 + 16;
                    goto LABEL_59;
                  }
                  v26 = (v13 - (_BYTE *)*a3) >> 4;
                  v27 = v26 + 1;
                  if ((unint64_t)(v26 + 1) >> 60)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v28 = v15 - (_BYTE *)*a3;
                  if (v28 >> 3 > v27)
                    v27 = v28 >> 3;
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
                    v20 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v20 = v27;
                  if (v20)
                    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v20);
                  else
                    v21 = 0;
                  v29 = &v21[16 * v26];
                  *(_QWORD *)v29 = v9;
                  *((_DWORD *)v29 + 2) = 1;
                  v34 = (char *)*a3;
                  v30 = (char *)a3[1];
                  v32 = v29;
                  if (v30 == *a3)
                    goto LABEL_57;
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v34);
                }
LABEL_56:
                v30 = (char *)*a3;
                goto LABEL_57;
              }
              if (!i)
              {
                v13 = (char *)a3[1];
                v12 = (char *)a3[2];
                if (v13 < v12)
                {
                  *(_QWORD *)v13 = v9;
                  *((_DWORD *)v13 + 2) = 0;
                  goto LABEL_28;
                }
                v17 = (v13 - (_BYTE *)*a3) >> 4;
                v18 = v17 + 1;
                if ((unint64_t)(v17 + 1) >> 60)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v19 = v12 - (_BYTE *)*a3;
                if (v19 >> 3 > v18)
                  v18 = v19 >> 3;
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
                  v20 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v20 = v18;
                if (v20)
                  v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v20);
                else
                  v21 = 0;
                v29 = &v21[16 * v17];
                *(_QWORD *)v29 = v9;
                *((_DWORD *)v29 + 2) = 0;
                v31 = (char *)*a3;
                v30 = (char *)a3[1];
                v32 = v29;
                if (v30 != *a3)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
                  goto LABEL_56;
                }
LABEL_57:
                v22 = v29 + 16;
                *a3 = v32;
                a3[1] = v29 + 16;
                a3[2] = &v21[16 * v20];
                if (v30)
                  operator delete(v30);
LABEL_59:
                a3[1] = v22;
              }
            }
          }
        }
        ++v8;
      }
      if ((a2 & 1) != 0)
      {
        v35 = *(ZinIrOpLayer **)(v5 + 96);
        __p = 0;
        v54 = 0;
        v55 = 0;
        v36 = ZinIrOpLayer::IsNoOp(v35, (uint64_t *)&__p);
        if (__p)
        {
          v54 = __p;
          operator delete(__p);
        }
        if ((v36 & 1) == 0)
        {
          v37 = *(_QWORD *)(v5 + 96);
          v39 = (char *)a3[1];
          v38 = (char *)a3[2];
          if (v39 >= v38)
          {
            v41 = (v39 - (_BYTE *)*a3) >> 4;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v43 = v38 - (_BYTE *)*a3;
            if (v43 >> 3 > v42)
              v42 = v43 >> 3;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
              v44 = 0xFFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v44);
            else
              v45 = 0;
            v46 = &v45[16 * v41];
            *(_QWORD *)v46 = v37;
            *((_DWORD *)v46 + 2) = 3;
            v48 = (char *)*a3;
            v47 = (char *)a3[1];
            v49 = v46;
            if (v47 != *a3)
            {
              do
              {
                *((_OWORD *)v49 - 1) = *((_OWORD *)v47 - 1);
                v49 -= 16;
                v47 -= 16;
              }
              while (v47 != v48);
              v47 = (char *)*a3;
            }
            v40 = v46 + 16;
            *a3 = v49;
            a3[1] = v46 + 16;
            a3[2] = &v45[16 * v44];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *(_QWORD *)v39 = v37;
            *((_DWORD *)v39 + 2) = 3;
            v40 = v39 + 16;
          }
          a3[1] = v40;
        }
      }
      v4 = v52 + 1;
    }
    while (v52 + 1 != v50);
  }
}

void sub_206EF1614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void ZinTensorFamilyUtil::SortLayersBySched(uint64_t a1@<X1>, ZinIrOpLayer ***a2@<X8>)
{
  ZinIrOpLayer **v3;
  unint64_t v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(a2, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2[1];
  v4 = 126 - 2 * __clz(((char *)v3 - (char *)*a2) >> 4);
  if (v3 == *a2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,false>(*a2, v3, v5, 1);
}

void sub_206EF16D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinTensorFamilyUtil::GetNextUsage(ZinTensorFamilyUtil *this, const ZinIrTensor *a2, uint64_t a3)
{
  _QWORD *AllUsages;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  AllUsages = ZinTensorFamilyUtil::GetAllUsages(this, a2);
  v5 = (_QWORD *)*AllUsages;
  v6 = (_QWORD *)AllUsages[1];
  if (v6 != (_QWORD *)*AllUsages)
  {
    v7 = ((uint64_t)v6 - *AllUsages) >> 4;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[2 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (*(_QWORD *)(v11 + 48) <= a3)
        v5 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v5 == v6)
    return 0;
  else
    return *v5;
}

_QWORD *ZinTensorFamilyUtil::GetAllUsages(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  _QWORD *v3;
  const ZinIrTensor *v5;

  v5 = a2;
  v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v5)[3];
  v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3 + 6;
}

uint64_t ZinTensorFamilyUtil::GetNextReadUsage(ZinTensorFamilyUtil *this, const ZinIrTensor *a2, uint64_t a3)
{
  _QWORD *Usages;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  Usages = ZinTensorFamilyUtil::GetReadUsages(this, a2);
  v5 = (_QWORD *)*Usages;
  v6 = (_QWORD *)Usages[1];
  if (v6 != (_QWORD *)*Usages)
  {
    v7 = ((uint64_t)v6 - *Usages) >> 4;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[2 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (*(_QWORD *)(v11 + 48) <= a3)
        v5 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  if (v5 == v6)
    return 0;
  else
    return *v5;
}

_QWORD *ZinTensorFamilyUtil::GetReadUsages(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  _QWORD *v3;
  const ZinIrTensor *v5;

  v5 = a2;
  v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v5)[3];
  v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3 + 3;
}

char **ZinTensorFamilyUtil::GetNextReadUsages@<X0>(ZinTensorFamilyUtil *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char **result;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  result = (char **)ZinTensorFamilyUtil::GetReadUsages(this, a2);
  v7 = *result;
  v8 = (uint64_t)result[1];
  if ((char *)v8 == *result)
  {
    v7 = result[1];
  }
  else
  {
    v9 = (v8 - (uint64_t)*result) >> 4;
    do
    {
      v10 = v9 >> 1;
      v11 = &v7[16 * (v9 >> 1)];
      v13 = *(_QWORD *)v11;
      v12 = v11 + 16;
      v9 += ~(v9 >> 1);
      if (*(_QWORD *)(v13 + 48) <= a3)
        v7 = v12;
      else
        v9 = v10;
    }
    while (v9);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if ((char *)v8 != v7)
    return (char **)std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(a4, v7, v8, (v8 - (uint64_t)v7) >> 4);
  return result;
}

uint64_t ZinTensorFamilyUtil::GetRootTensor(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  const ZinIrTensor *v3;

  v3 = a2;
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v3)[3];
}

BOOL ZinTensorFamilyUtil::IsLastUsage(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t TensorFromLayerAndUsage;

  TensorFromLayerAndUsage = GetTensorFromLayerAndUsage(*(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  TensorFromLayerAndUsage = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1 + 5, &TensorFromLayerAndUsage)[3];
  v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1, &TensorFromLayerAndUsage);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if ((v4[4] - v4[3] < 0x11uLL || *(_QWORD *)(v4[4] - 16) != *(_QWORD *)(v4[4] - 32))
    && (v5 = v4[7], *(_QWORD *)(v5 - 16) == *(_QWORD *)a2))
  {
    return *(_DWORD *)(v5 - 8) == *(_DWORD *)(a2 + 8);
  }
  else
  {
    return 0;
  }
}

_QWORD *ZinTensorFamilyUtil::GetLastReadUsage@<X0>(ZinTensorFamilyUtil *this@<X0>, const ZinIrTensor *a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  char v6;

  result = ZinTensorFamilyUtil::GetReadUsages(this, a2);
  v5 = result[1];
  if (*result == v5)
  {
    v6 = 0;
    *a3 = 0;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)(v5 - 16);
    v6 = 1;
  }
  a3[16] = v6;
  return result;
}

BOOL ZinTensorFamilyUtil::IsLiveInLiveOutOrConstIn(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t TensorFromLayerAndUsage;

  TensorFromLayerAndUsage = GetTensorFromLayerAndUsage(*(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  TensorFromLayerAndUsage = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1 + 5, &TensorFromLayerAndUsage)[3];
  v3 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1, &TensorFromLayerAndUsage);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3[97] | v3[96] || v3[98] != 0;
}

BOOL ZinTensorFamilyUtil::HasReshapeInTensorFamily(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  _QWORD *TensorFamily;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 result;
  BOOL v7;

  TensorFamily = ZinTensorFamilyUtil::GetTensorFamily(this, a2);
  v3 = TensorFamily[1];
  if (*TensorFamily == v3)
    return 0;
  v4 = *TensorFamily + 8;
  do
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 96) + 64) + 8);
    result = v5 == 35;
    v7 = v5 == 35 || v4 == v3;
    v4 += 8;
  }
  while (!v7);
  return result;
}

_QWORD *ZinTensorFamilyUtil::GetTensorFamily(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  _QWORD *v3;
  const ZinIrTensor *v5;

  v5 = a2;
  v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v5)[3];
  v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3 + 9;
}

uint64_t ZinTensorFamilyUtil::FindPath(uint64_t a1, uint64_t a2, void **a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer *v21;
  int IsNoOp;
  uint64_t result;
  void *__p;
  void *v25;
  uint64_t v26;

  v6 = (unint64_t)a3[2];
  v7 = a3[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a3) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a3;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a1;
    v8 = v14 + 8;
    v17 = (char *)*a3;
    v16 = (char *)a3[1];
    if (v16 != *a3)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a3;
    }
    *a3 = v14;
    a3[1] = v8;
    a3[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a1;
    v8 = v7 + 1;
  }
  a3[1] = v8;
  if (a1 != a2)
  {
    v19 = *(ZinIrOpLayer ***)(a1 + 112);
    v20 = *(ZinIrOpLayer ***)(a1 + 120);
    if (v19 == v20)
    {
LABEL_25:
      result = 0;
      a3[1] = v8 - 1;
      return result;
    }
    while (1)
    {
      v21 = *v19;
      __p = 0;
      v25 = 0;
      v26 = 0;
      IsNoOp = ZinIrOpLayer::IsNoOp(v21, (uint64_t *)&__p);
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
      if (IsNoOp && (ZinTensorFamilyUtil::FindPath(v21, a2, a3) & 1) != 0)
        break;
      if (++v19 == v20)
      {
        v8 = a3[1];
        goto LABEL_25;
      }
    }
  }
  return 1;
}

void sub_206EF1CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinTensorFamilyUtil::GetIntermediateLayers(uint64_t a1, ZinIrOpLayer *a2, unint64_t a3, char a4, void **a5)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  ZinIrTensor *v27;
  ZinIrTensor *RootTensor;
  ZinIrTensor *v29;
  ZinIrTensor *InputTensor;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ZinIrTensor *v40;
  ZinIrTensor *v41;
  ZinIrTensor *v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  int64_t v46;

  if (*a5 != a5[1])
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      ZinTensorFamilyUtil::GetIntermediateLayers(v5, v6, v7, v8, v9, v10, v11, v12);
    return 3;
  }
  if (a4)
  {
    v17 = a3;
    v18 = *((_QWORD *)a2 + 11);
    if (a3 >= (*((_QWORD *)a2 + 12) - v18) >> 3)
    {
      v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v19)
        ZinTensorFamilyUtil::GetIntermediateLayers(v19, v20, v21, v22, v23, v24, v25, v26);
      return 3;
    }
  }
  else
  {
    v27 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v27);
    if (*((_QWORD *)a2 + 12) == *((_QWORD *)a2 + 11))
    {
LABEL_14:
      v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v31)
        ZinTensorFamilyUtil::GetIntermediateLayers(v31, v32, v33, v34, v35, v36, v37, v38);
      return 3;
    }
    v29 = RootTensor;
    v17 = 0;
    while (1)
    {
      InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v17);
      if (v29 == ZinIrTensor::GetRootTensor(InputTensor))
        break;
      if (++v17 >= (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3)
        goto LABEL_14;
    }
    v18 = *((_QWORD *)a2 + 11);
  }
  v39 = *(_QWORD *)(v18 + 8 * v17);
  v40 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 32))(v39, 0, 0);
  v41 = ZinIrTensor::GetRootTensor(v40);
  v42 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  if (v41 != ZinIrTensor::GetRootTensor(v42))
    return 0;
  result = ZinTensorFamilyUtil::FindPath(a1, v39, a5);
  if ((_DWORD)result)
  {
    v44 = (char *)*a5;
    v43 = (char *)a5[1];
    v45 = (char *)*a5 + 8;
    v46 = v43 - v45;
    if (v43 != v45)
      memmove(*a5, v45, v43 - v45);
    result = 0;
    a5[1] = &v44[v46];
  }
  return result;
}

uint64_t ZinTensorFamilyUtil::FindAllIntermediateLayerPaths(uint64_t a1, ZinIrOpLayer *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t i;
  uint64_t IntermediateLayers;
  int v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;

  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 11))
  {
    for (i = 0; i < (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3; ++i)
    {
      __p = 0;
      v16 = 0;
      v17 = 0;
      IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers(a1, a2, i, 1, &__p);
      v9 = IntermediateLayers;
      v10 = IntermediateLayers;
      if (!(_DWORD)IntermediateLayers)
      {
        v11 = __p;
        if (__p == v16)
          goto LABEL_10;
        v12 = a3[1];
        if (v12 >= a3[2])
        {
          v13 = std::vector<std::vector<ZinIrOpLayer *>>::__push_back_slow_path<std::vector<ZinIrOpLayer *> const&>(a3, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)a3, (uint64_t)&__p);
          v13 = v12 + 24;
        }
        a3[1] = v13;
        v10 = v3;
      }
      v11 = __p;
      v3 = v10;
LABEL_10:
      if (v11)
      {
        v16 = v11;
        operator delete(v11);
      }
      if (v9)
        return v3;
    }
  }
  return 0;
}

void sub_206EF1F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinTensorFamilyUtil::DeleteTensorFromFamilyAttributesAndRootTensorMap(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  _QWORD *v4;
  uint64_t **TensorFamily;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  const ZinIrTensor *v11;

  v11 = a2;
  v4 = (_QWORD *)((char *)this + 40);
  v11 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v11)[3];
  TensorFamily = (uint64_t **)ZinTensorFamilyUtil::GetTensorFamily(this, a2);
  v6 = *TensorFamily;
  v7 = TensorFamily[1];
  while (v6 != v7)
  {
    v8 = *v6++;
    v10 = v8;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v4, &v10);
  }
  std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>((uint64_t **)this + 10, (uint64_t *)&v11);
  return std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__erase_unique<ZinIrTensor *>(this, &v11);
}

void ZinTensorFamilyUtil::UpdateFamilyAttributesAndRootTensorMap(uint64_t **this, const ZinIrTensor *a2, char a3)
{
  ZinIrTensor *RootTensor;
  char *v6;
  char *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12[2];
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  void *v20;
  char *v21;
  const ZinIrTensor *v22;
  const ZinIrTensor **v23;

  RootTensor = ZinIrTensor::GetRootTensor(a2);
  v22 = RootTensor;
  ZinIrTensor::GetTensorFamily(RootTensor, (uint64_t)&v20);
  v6 = (char *)v20;
  v7 = v21;
  if (v20 != v21)
  {
    do
    {
      v12[0] = v6;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)(this + 5), v6, (uint64_t)&std::piecewise_construct, (_QWORD **)v12)[3] = RootTensor;
      v6 += 8;
    }
    while (v6 != v7);
  }
  if ((a3 & 1) == 0 || !*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(*((_QWORD *)RootTensor + 13) + 40) + 8) + 12))
  {
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(this + 10, (uint64_t *)&v22, (uint64_t *)&v22);
    ZinTensorFamilyUtil::BuildTensorFamilyAttribute(v22, (uint64_t)v12);
    v23 = &v22;
    v8 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this, &v22, (uint64_t)&std::piecewise_construct, &v23);
    v9 = (void *)v8[3];
    if (v9)
    {
      v8[4] = v9;
      operator delete(v9);
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
    }
    v10 = (void *)v8[6];
    *(_OWORD *)(v8 + 3) = *(_OWORD *)v12;
    v8[5] = v13;
    v12[1] = 0;
    v13 = 0;
    v12[0] = 0;
    if (v10)
    {
      v8[7] = v10;
      operator delete(v10);
      v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
    }
    v11 = (void *)v8[9];
    *((_OWORD *)v8 + 3) = *(_OWORD *)__p;
    v8[8] = v15;
    __p[1] = 0;
    v15 = 0;
    __p[0] = 0;
    if (v11)
    {
      v8[10] = v11;
      operator delete(v11);
      v8[9] = 0;
      v8[10] = 0;
      v8[11] = 0;
      v11 = __p[0];
    }
    *(_OWORD *)(v8 + 9) = v16;
    v8[11] = v17;
    v17 = 0;
    v16 = 0uLL;
    *((_WORD *)v8 + 48) = v18;
    *((_BYTE *)v8 + 98) = v19;
    if (v11)
    {
      __p[1] = v11;
      operator delete(v11);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete(v12[0]);
    }
  }
  if (v20)
  {
    v21 = (char *)v20;
    operator delete(v20);
  }
}

void sub_206EF2234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  SplitOutputs::~SplitOutputs((SplitOutputs *)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinTensorFamilyUtil::GetRootTensors(ZinTensorFamilyUtil *this)
{
  return (uint64_t)this + 80;
}

BOOL ZinTensorFamilyUtil::HasValidTensorAttributes(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  const ZinIrTensor *v4;

  v4 = a2;
  v4 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v4)[3];
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v4) != 0;
}

BOOL ZinTensorFamilyUtil::HasMultipleUsers(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  _QWORD *v3;
  const ZinIrTensor *v5;

  v5 = a2;
  v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)this + 5, &v5)[3];
  v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v3[4] - v3[3] > 0x10uLL;
}

char *std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,false>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, uint64_t a3, char a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  ZinIrOpLayer **v15;
  _QWORD *v16;
  _QWORD *v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer **v20;
  _QWORD *v21;
  _QWORD *v22;
  ZinIrOpLayer **v23;
  _QWORD *v24;
  _QWORD *v25;
  ZinIrOpLayer **v26;
  unint64_t v27;
  ZinIrOpLayer *v28;
  _QWORD *v29;
  _QWORD *v30;
  ZinIrOpLayer **v31;
  ZinIrOpLayer *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  ZinIrOpLayer **v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  ZinIrOpLayer **v52;
  _QWORD *v53;
  _QWORD *v54;
  ZinIrOpLayer **v55;
  BOOL v57;
  uint64_t v58;
  ZinIrOpLayer **v59;
  ZinIrOpLayer **v60;
  ZinIrOpLayer *v61;
  _QWORD *v62;
  _QWORD *v63;
  ZinIrOpLayer *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  ZinIrOpLayer **v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  ZinIrOpLayer **v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  ZinIrOpLayer **v78;
  _QWORD *v79;
  ZinIrOpLayer *v80;
  _QWORD *v81;
  ZinIrOpLayer **v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  ZinIrOpLayer **v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  ZinIrOpLayer **v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  ZinIrOpLayer **v100;
  _QWORD *v101;
  ZinIrOpLayer *v102;
  _QWORD *v103;
  uint64_t v104;
  _OWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _OWORD *v109;
  ZinIrOpLayer **v110;
  ZinIrOpLayer *v111;
  _QWORD *v112;
  _QWORD *v113;
  ZinIrOpLayer *v114;
  _OWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  ZinIrOpLayer **v118;
  ZinIrOpLayer **v119;
  ZinIrOpLayer *v120;
  ZinIrOpLayer **v121;
  int64_t v123;
  ZinIrOpLayer **v124;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,0>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4, ZinIrOpLayer **a5)
{
  __n128 result;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a2, a3, a4);
  if (ZinIrOpLayer::IsANELayer(*a5) && ZinIrOpLayer::IsANELayer(*a4))
  {
    v11 = (_QWORD *)((char *)*a5 + 360);
    v12 = (_QWORD *)((char *)*a4 + 360);
  }
  else
  {
    v11 = (_QWORD *)((char *)*a5 + 48);
    v12 = (_QWORD *)((char *)*a4 + 48);
  }
  if (*v11 < *v12)
  {
    v13 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v13;
    if (ZinIrOpLayer::IsANELayer(*a4) && ZinIrOpLayer::IsANELayer(*a3))
    {
      v14 = (_QWORD *)((char *)*a4 + 360);
      v15 = (_QWORD *)((char *)*a3 + 360);
    }
    else
    {
      v14 = (_QWORD *)((char *)*a4 + 48);
      v15 = (_QWORD *)((char *)*a3 + 48);
    }
    if (*v14 < *v15)
    {
      v16 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v16;
      if (ZinIrOpLayer::IsANELayer(*a3) && ZinIrOpLayer::IsANELayer(*a2))
      {
        v17 = (_QWORD *)((char *)*a3 + 360);
        v18 = (_QWORD *)((char *)*a2 + 360);
      }
      else
      {
        v17 = (_QWORD *)((char *)*a3 + 48);
        v18 = (_QWORD *)((char *)*a2 + 48);
      }
      if (*v17 < *v18)
      {
        v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v19;
        if (ZinIrOpLayer::IsANELayer(*a2) && ZinIrOpLayer::IsANELayer(*a1))
        {
          v20 = (_QWORD *)((char *)*a2 + 360);
          v21 = (_QWORD *)((char *)*a1 + 360);
        }
        else
        {
          v20 = (_QWORD *)((char *)*a2 + 48);
          v21 = (_QWORD *)((char *)*a1 + 48);
        }
        if (*v20 < *v21)
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;

  if (ZinIrOpLayer::IsANELayer(*a2) && ZinIrOpLayer::IsANELayer(*a1))
  {
    v6 = (uint64_t *)((char *)*a2 + 360);
    v7 = (uint64_t *)((char *)*a1 + 360);
  }
  else
  {
    v6 = (uint64_t *)((char *)*a2 + 48);
    v7 = (uint64_t *)((char *)*a1 + 48);
  }
  v8 = *v6;
  v9 = *v7;
  result = ZinIrOpLayer::IsANELayer(*a3);
  if (v8 >= v9)
  {
    if (result && (result = ZinIrOpLayer::IsANELayer(*a2)))
    {
      v13 = (_QWORD *)((char *)*a3 + 360);
      v14 = (_QWORD *)((char *)*a2 + 360);
    }
    else
    {
      v13 = (_QWORD *)((char *)*a3 + 48);
      v14 = (_QWORD *)((char *)*a2 + 48);
    }
    if (*v13 < *v14)
    {
      v16 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v16;
      result = ZinIrOpLayer::IsANELayer(*a2);
      if (result && (result = ZinIrOpLayer::IsANELayer(*a1)))
      {
        v17 = (_QWORD *)((char *)*a2 + 360);
        v18 = (_QWORD *)((char *)*a1 + 360);
      }
      else
      {
        v17 = (_QWORD *)((char *)*a2 + 48);
        v18 = (_QWORD *)((char *)*a1 + 48);
      }
      if (*v17 < *v18)
      {
        v22 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v22;
      }
    }
  }
  else
  {
    if (result && (result = ZinIrOpLayer::IsANELayer(*a2)))
    {
      v11 = (_QWORD *)((char *)*a3 + 360);
      v12 = (_QWORD *)((char *)*a2 + 360);
    }
    else
    {
      v11 = (_QWORD *)((char *)*a3 + 48);
      v12 = (_QWORD *)((char *)*a2 + 48);
    }
    if (*v11 < *v12)
    {
      v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_29:
      *(_OWORD *)a3 = v15;
      return result;
    }
    v19 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v19;
    result = ZinIrOpLayer::IsANELayer(*a3);
    if (result && (result = ZinIrOpLayer::IsANELayer(*a2)))
    {
      v20 = (_QWORD *)((char *)*a3 + 360);
      v21 = (_QWORD *)((char *)*a2 + 360);
    }
    else
    {
      v20 = (_QWORD *)((char *)*a3 + 48);
      v21 = (_QWORD *)((char *)*a2 + 48);
    }
    if (*v20 < *v21)
    {
      v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_29;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(ZinIrOpLayer **a1, ZinIrOpLayer **a2)
{
  ZinIrOpLayer **v2;
  uint64_t v4;
  _BOOL8 result;
  ZinIrOpLayer **v6;
  _QWORD *v7;
  _QWORD *v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  uint64_t v11;
  int v12;
  ZinIrOpLayer *v13;
  _QWORD *v14;
  _QWORD *v15;
  ZinIrOpLayer **v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  ZinIrOpLayer **v21;
  __int128 v22;
  ZinIrOpLayer *v23;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (ZinIrOpLayer::IsANELayer(*(a2 - 2)) && ZinIrOpLayer::IsANELayer(*a1))
      {
        v7 = (_QWORD *)((char *)*v6 + 360);
        v8 = (_QWORD *)((char *)*a1 + 360);
      }
      else
      {
        v7 = (_QWORD *)((char *)*v6 + 48);
        v8 = (_QWORD *)((char *)*a1 + 48);
      }
      if (*v7 < *v8)
      {
        v22 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v22;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == v2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (ZinIrOpLayer::IsANELayer(*v10) && ZinIrOpLayer::IsANELayer(*v9))
    {
      v13 = *v10;
      v14 = (_QWORD *)((char *)*v10 + 360);
      v15 = (_QWORD *)((char *)*v9 + 360);
    }
    else
    {
      v13 = *v10;
      v14 = (_QWORD *)((char *)*v10 + 48);
      v15 = (_QWORD *)((char *)*v9 + 48);
    }
    if (*v14 < *v15)
    {
      v16 = v2;
      v23 = v10[1];
      v17 = v11;
      while (1)
      {
        v18 = (char *)a1 + v17;
        *(_OWORD *)((char *)a1 + v17 + 48) = *(_OWORD *)((char *)a1 + v17 + 32);
        if (v17 == -32)
          break;
        if (ZinIrOpLayer::IsANELayer(v13) && ZinIrOpLayer::IsANELayer(*((ZinIrOpLayer **)v18 + 2)))
        {
          v19 = (_QWORD *)(*((_QWORD *)v18 + 2) + 360);
          v20 = (_QWORD *)((char *)v13 + 360);
        }
        else
        {
          v19 = (_QWORD *)(*((_QWORD *)v18 + 2) + 48);
          v20 = (_QWORD *)((char *)v13 + 48);
        }
        v17 -= 16;
        if (*v20 >= *v19)
        {
          v21 = (ZinIrOpLayer **)((char *)a1 + v17 + 48);
          goto LABEL_21;
        }
      }
      v21 = a1;
LABEL_21:
      v2 = v16;
      *v21 = v13;
      v21[1] = v23;
      if (++v12 == 8)
        return v10 + 2 == v16;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == v2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4)
{
  __n128 result;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a2, a3);
  if (ZinIrOpLayer::IsANELayer(*a4) && ZinIrOpLayer::IsANELayer(*a3))
  {
    v9 = (_QWORD *)((char *)*a4 + 360);
    v10 = (_QWORD *)((char *)*a3 + 360);
  }
  else
  {
    v9 = (_QWORD *)((char *)*a4 + 48);
    v10 = (_QWORD *)((char *)*a3 + 48);
  }
  if (*v9 < *v10)
  {
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if (ZinIrOpLayer::IsANELayer(*a3) && ZinIrOpLayer::IsANELayer(*a2))
    {
      v12 = (_QWORD *)((char *)*a3 + 360);
      v13 = (_QWORD *)((char *)*a2 + 360);
    }
    else
    {
      v12 = (_QWORD *)((char *)*a3 + 48);
      v13 = (_QWORD *)((char *)*a2 + 48);
    }
    if (*v12 < *v13)
    {
      v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      if (ZinIrOpLayer::IsANELayer(*a2) && ZinIrOpLayer::IsANELayer(*a1))
      {
        v15 = (_QWORD *)((char *)*a2 + 360);
        v16 = (_QWORD *)((char *)*a1 + 360);
      }
      else
      {
        v15 = (_QWORD *)((char *)*a2 + 48);
        v16 = (_QWORD *)((char *)*a1 + 48);
      }
      if (*v15 < *v16)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = (char *)operator new(0x68uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_206EF3AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__erase_unique<ZinIrTensor *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void ZinTensorFamilyUtil::GetIntermediateLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Consumer is not in the tensor family of producer or a direct consumer", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Operand index larger than input layer count", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Intermediates should be empty", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

__CFDictionary *ZinCreateLinearUnit(const ZinIrLinearUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  const __CFString *v5;
  const __CFString *v6;
  const void **v7;
  const __CFString *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  const __CFString *v11;
  CFNumberRef v12;
  CFNumberRef v13;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (*((_DWORD *)a1 + 60) != 5)
  {
    v5 = ZinIrCoordinateToCFString((_DWORD *)a1 + 60);
    CFDictionaryAddValue(Mutable, CFSTR("GroupDimension"), v5);
  }
  v6 = ZinIrConvKernelModeToCFString(*((_DWORD *)a1 + 20));
  if (v6)
    CFDictionaryAddValue(Mutable, CFSTR("KernelMode"), v6);
  v7 = (const void **)MEMORY[0x24BDBD270];
  if (!*((_BYTE *)a1 + 180))
    v7 = (const void **)MEMORY[0x24BDBD268];
  CFDictionaryAddValue(Mutable, CFSTR("KernelMutable"), *v7);
  v8 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 21));
  if (v8)
    CFDictionaryAddValue(Mutable, CFSTR("KernelType"), v8);
  if (ZinKernelModeIsPalette(*((_DWORD *)a1 + 20)))
  {
    ZinDictionaryAddVector<long long>(Mutable, CFSTR("KernelPaletteLUTOffset"), (const void **)a1 + 19);
    ZinDictionaryAddVector<int>(Mutable, CFSTR("KernelPaletteLUTIndex"), (const void **)a1 + 16);
    v9 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 176);
    CFDictionaryAddValue(Mutable, CFSTR("KernelPaletteVectorSize"), v9);
    CFRelease(v9);
  }
  if (ZinKernelModeIsSparse(*((_DWORD *)a1 + 20)))
  {
    ZinAddWeightInfoToParamsDict(Mutable, CFSTR("KernelMaskIndex"), CFSTR("KernelMaskByteOffset"), (const int *)a1 + 26, (char *)a1 + 112);
    v10 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 120);
    CFDictionaryAddValue(Mutable, CFSTR("KernelCoeffCount"), v10);
    CFRelease(v10);
  }
  if (*((_DWORD *)a1 + 20) != 15)
    ZinAddWeightInfoToParamsDict(Mutable, CFSTR("KernelIndex"), CFSTR("KernelOffset"), (const int *)a1 + 22, (char *)a1 + 96);
  if (*((_BYTE *)a1 + 184))
  {
    v11 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 56));
    if (v11)
      CFDictionaryAddValue(Mutable, CFSTR("KernelPerCoutScaleFormat"), v11);
    ZinAddWeightInfoToParamsDict(Mutable, CFSTR("KernelScaleIndex"), CFSTR("KernelScaleByteOffset"), (const int *)a1 + 48, (char *)a1 + 200);
  }
  else if (!ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarScale((const ZinIrLinearUnitInfo *)((char *)a1 + 184)))
  {
    v12 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 228);
    CFDictionaryAddValue(Mutable, CFSTR("KernelScaleScalar"), v12);
    CFRelease(v12);
  }
  if (*((_BYTE *)a1 + 185))
  {
    ZinAddWeightInfoToParamsDict(Mutable, CFSTR("KernelZeroPointIndex"), CFSTR("KernelZeroPointByteOffset"), (const int *)a1 + 52, (char *)a1 + 216);
  }
  else if (!ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarZeroPoint((const ZinIrLinearUnitInfo *)((char *)a1 + 184)))
  {
    v13 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 232);
    CFDictionaryAddValue(Mutable, CFSTR("KernelZeroPointScalar"), v13);
    CFRelease(v13);
  }
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

_QWORD *ZinBasicBlockOutLayer::ZinBasicBlockOutLayer(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  ZinIrKernel *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  ZinIrKernel *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v6 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v6, 80);
  v7 = a2[1];
  v18 = *a2;
  v19 = (std::__shared_weak_count *)v7;
  v20 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v17 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v20, &v18, a3, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x20BD002F8](v11, 0x1032C40DEE44497);
  }
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = &off_24BFF2318;
  return a1;
}

void sub_206EF4008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinBasicBlockOutLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *GroupId;
  uint64_t v16[2];

  v6 = (_QWORD *)operator new();
  v7 = (uint64_t)v6;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v16[0] = v8;
  v16[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinBasicBlockOutLayer::ZinBasicBlockOutLayer(v6, v16, a3);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId(v7, *GroupId);
  return v7;
}

void sub_206EF4130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v9, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinBasicBlockOutLayer::HasOutputParentTensor(ZinBasicBlockOutLayer *this)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD **v3;
  BOOL v4;
  _QWORD **v6;
  _QWORD *v7[2];

  ZinIrControlFlowGraph::GetBasicBlockInConsumers(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 19) + 592) + 24), (uint64_t)this, (uint64_t *)&v6);
  v1 = v6;
  if (v6 == v7)
  {
LABEL_9:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v6, v7[0]);
    return 0;
  }
  else
  {
    while (((*(uint64_t (**)(_QWORD *))(*v1[4] + 104))(v1[4]) & 1) == 0)
    {
      v2 = v1[1];
      if (v2)
      {
        do
        {
          v3 = (_QWORD **)v2;
          v2 = (_QWORD *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          v3 = (_QWORD **)v1[2];
          v4 = *v3 == v1;
          v1 = v3;
        }
        while (!v4);
      }
      v1 = v3;
      if (v3 == v7)
        goto LABEL_9;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v6, v7[0]);
    return 1;
  }
}

void sub_206EF4218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateLRNUnit(uint64_t a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  CFNumberRef v9;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  __int16 v19;
  int valuePtr;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = Mutable;
  v6 = *(_DWORD *)(a1 + 80);
  v7 = CFSTR("Channel");
  if (v6 != 1)
    v7 = 0;
  if (v6)
    v8 = v7;
  else
    v8 = CFSTR("Spatial");
  CFDictionaryAddValue(Mutable, CFSTR("Type"), v8);
  valuePtr = 1;
  if (*(_DWORD *)(a1 + 80) == 1)
    valuePtr = *(_QWORD *)(a1 + 104);
  v9 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v5, CFSTR("KernelChannel"), v9);
  CFRelease(v9);
  if (!*(_DWORD *)(a1 + 80))
    ZinAddKernelSizeToParamsDict(v5, (_QWORD *)(a1 + 88), 1);
  _S0 = *(_DWORD *)(a1 + 136);
  __asm { FCVT            H0, S0 }
  v19 = _S0;
  v15 = CFNumberCreate(v3, kCFNumberSInt16Type, &v19);
  CFDictionaryAddValue(v5, CFSTR("Alpha"), v15);
  CFRelease(v15);
  v16 = CFNumberCreate(v3, kCFNumberFloat32Type, (const void *)(a1 + 140));
  CFDictionaryAddValue(v5, CFSTR("Beta"), v16);
  CFRelease(v16);
  v17 = CFNumberCreate(v3, kCFNumberFloat32Type, (const void *)(a1 + 144));
  CFDictionaryAddValue(v5, CFSTR("K"), v17);
  CFRelease(v17);
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

ZinIrSymbol::Descriptor *ZinIrSymbol::Descriptor::Descriptor(ZinIrSymbol::Descriptor *this)
{
  *(_QWORD *)this = 6;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, &byte_207AF6795);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = -1;
  *((_QWORD *)this + 6) = -1;
  return this;
}

uint64_t ZinIrSymbol::Descriptor::Descriptor(uint64_t a1, int a2, __int128 *a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  std::string *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1;
  v10 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)(a1 + 32) = a5;
  *(_OWORD *)(a1 + 40) = *a4;
  v12 = a6[3];
  v13 = a6[4];
  v14 = a6[2];
  *(_OWORD *)(a1 + 72) = a6[1];
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 88) = v14;
  v15 = a6[7];
  v16 = a6[8];
  v17 = a6[6];
  *(_OWORD *)(a1 + 136) = a6[5];
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v17;
  v18 = a6[11];
  v19 = a6[12];
  v20 = a6[10];
  *(_OWORD *)(a1 + 200) = a6[9];
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v20;
  *(_OWORD *)(a1 + 56) = *a6;
  return a1;
}

uint64_t ZinIrSymbol::Descriptor::Descriptor(uint64_t a1, int a2, __int128 *a3, _OWORD *a4, uint64_t a5)
{
  std::string *v8;
  __int128 v9;
  int64x2_t v10;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  v8 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 32) = a5;
  *(_OWORD *)(a1 + 40) = *a4;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 96) = 0;
  *(int64x2_t *)(a1 + 104) = v10;
  *(int64x2_t *)(a1 + 120) = v10;
  *(int64x2_t *)(a1 + 136) = v10;
  *(int64x2_t *)(a1 + 152) = v10;
  *(int64x2_t *)(a1 + 168) = v10;
  *(int64x2_t *)(a1 + 184) = v10;
  *(int64x2_t *)(a1 + 200) = v10;
  *(int64x2_t *)(a1 + 216) = v10;
  *(int64x2_t *)(a1 + 232) = v10;
  *(int64x2_t *)(a1 + 248) = v10;
  return a1;
}

uint64_t ZinIrSymbol::Descriptor::Descriptor(uint64_t a1, __int128 *a2, _OWORD *a3, uint64_t a4, void *__src)
{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = 0x200000003;
  v9 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 40) = *a3;
  memcpy((void *)(a1 + 56), __src, 0x118uLL);
  return a1;
}

_QWORD *ZinIrSymbol::Descriptor::Descriptor(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *a1 = 0x300000003;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[4] = a3;
  a1[5] = -1;
  a1[6] = -1;
  return a1;
}

uint64_t ZinIrSymbol::ZinIrSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6)
{
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = &off_24C015D10;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)a5;
  v9 = (std::string *)(a1 + 160);
  if (*(char *)(a5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(a5 + 8);
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 24);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  memcpy((void *)(a1 + 184), (const void *)(a5 + 32), 0x130uLL);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 520) = *a6;
  return a1;
}

void sub_206EF4730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 144))
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v2);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrSymbol::Descriptor::Descriptor(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_QWORD *)a2;
  v4 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  memcpy(a1 + 4, (const void *)(a2 + 32), 0x130uLL);
  return a1;
}

void ZinIrSymbol::~ZinIrSymbol(ZinIrSymbol *this)
{
  *(_QWORD *)this = &off_24C015D10;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 488, *((_QWORD **)this + 62));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((_BYTE *)this + 144))
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 96);
}

{
  ZinIrSymbol::~ZinIrSymbol(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIrSymbol::AddSymbolAlias(ZinIrSymbol *this, const ZinIrSymbol *a2)
{
  const ZinIrSymbol *v4;

  v4 = a2;
  if (ZinIrSymbol::VerifyChildSymbol((ZinIrSymbol **)this, a2))
    return 1;
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)this + 61, (uint64_t *)&v4, (uint64_t *)&v4);
  return 0;
}

uint64_t ZinIrSymbol::VerifyChildSymbol(ZinIrSymbol **this, const ZinIrSymbol *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  ZinIrSymbol *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;

  ZinIrSymbol::GetSpaceRanges(a2, 1, &v33);
  if (v35)
  {
    if (this)
    {
      while (1)
      {
        ZinIrSymbol::GetSpaceRanges((ZinIrSymbol *)this, 1, &v30);
        if (v35 > v32)
          break;
        v3 = v34;
        if (v34 == &v33)
          goto LABEL_26;
        if (v31 != &v30)
        {
          do
          {
            v4 = v31;
            while (1)
            {
              v5 = v4[2];
              v6 = v4[3];
              if (v5 <= v6)
              {
                v7 = v3[2];
                v8 = v3[3];
                v9 = v6 < v8 || v5 > v7;
                if (!v9 && v7 <= v8)
                  break;
              }
              v4 = (uint64_t *)v4[1];
              if (v4 == &v30)
                goto LABEL_20;
            }
            v3 = (uint64_t *)v3[1];
          }
          while (v3 != &v33);
LABEL_26:
          v20 = 0;
          goto LABEL_30;
        }
LABEL_20:
        v11 = this[64];
        if (!v11)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrSymbol::VerifyChildSymbol();
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrSymbol::VerifyChildSymbol();
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrSymbol::VerifyChildSymbol();
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrSymbol::VerifyChildSymbol();
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrSymbol::VerifyChildSymbol();
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrSymbol::VerifyChildSymbol();
          ZinAssertImpl("Illegal symbol");
        }
        std::__list_imp<ZinIrSection *>::clear(&v30);
        this = (ZinIrSymbol **)v11;
      }
      v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v21)
        ZinIrSymbol::VerifyChildSymbol(v21, v22, v23, v24, v25, v26, v27, v28);
      v20 = 3;
LABEL_30:
      std::__list_imp<ZinIrSection *>::clear(&v30);
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinIrSymbol::VerifyChildSymbol(v12, v13, v14, v15, v16, v17, v18, v19);
    v20 = 3;
  }
  std::__list_imp<ZinIrSection *>::clear(&v33);
  return v20;
}

void sub_206EF4A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<ZinIrSection *>::clear(&a9);
  std::__list_imp<ZinIrSection *>::clear(&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSymbol::GetComputeProgramMutableSymbolSize(ZinIrSymbol *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 23);
  if (*((_DWORD *)this + 39) == 1)
    return *((_QWORD *)this + 3) + result - *((_QWORD *)this + 2);
  return result;
}

ZinIrSymbol *ZinIrSymbol::GetRootSymbol(ZinIrSymbol *this)
{
  ZinIrSymbol *v1;

  do
  {
    v1 = this;
    this = (ZinIrSymbol *)*((_QWORD *)this + 64);
  }
  while (this);
  return v1;
}

uint64_t ZinIrSymbol::GetMemType(ZinIrSymbol *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 12);
}

uint64_t ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection(ZinIrSymbol *this)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v1 + 12))
    ZinAssertImpl("This API is only used to relocate base addresses for RDMA and WDMA.");
  if (*((_BYTE *)this + 144) && *((_BYTE *)this + 137))
    v2 = (unsigned __int8 *)this + 136;
  else
    v2 = (unsigned __int8 *)(v1 + 56);
  return *v2;
}

_QWORD *ZinIrSymbol::GetSpaceRanges@<X0>(ZinIrSymbol *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  result = ZinIrSymbol::GetSpaceRangesWithoutWrapAround(this, a2, a3);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 120);
  if (v6 && *(_BYTE *)(v6 + 40))
  {
    v7 = *(_QWORD *)(v6 + 8);
    v18 = &v18;
    v19 = &v18;
    v20 = 0;
    v8 = a3[1];
    if ((uint64_t *)v8 != a3)
    {
      v9 = 0;
      v10 = &v18;
      while (1)
      {
        v11 = *(_QWORD *)(v8 + 16);
        v17 = *(_OWORD *)(v8 + 24);
        v12 = v17 - v7;
        if ((unint64_t)v17 <= v7)
          break;
        v13 = v11 - v7;
        if (v11 >= v7)
        {
          v15 = operator new(0x28uLL);
          v15[2] = v13;
          v15[3] = v12;
          v15[4] = v12 - v13;
          goto LABEL_10;
        }
        v14 = operator new(0x28uLL);
        v14[2] = v11;
        v14[3] = v7;
        v14[4] = v7 - v11;
        *v14 = v10;
        v14[1] = &v18;
        v10[1] = v14;
        v18 = v14;
        v20 = v9 + 1;
        v15 = operator new(0x28uLL);
        v10 = v15;
        v15[2] = 0;
        v15[3] = v12;
        v15[4] = v12;
        *v15 = v14;
        v15[1] = &v18;
        v14[1] = v15;
        v16 = 2;
LABEL_11:
        v18 = v15;
        v9 += v16;
        v20 = v9;
        v8 = *(_QWORD *)(v8 + 8);
        if ((uint64_t *)v8 == a3)
          goto LABEL_12;
      }
      v15 = operator new(0x28uLL);
      v15[2] = v11;
      *(_OWORD *)(v15 + 3) = v17;
LABEL_10:
      *v15 = v10;
      v15[1] = &v18;
      v10[1] = v15;
      v16 = 1;
      v10 = v15;
      goto LABEL_11;
    }
LABEL_12:
    if (&v18 != (_QWORD **)a3)
      std::list<ZinSpaceRange>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ZinSpaceRange,void *>,std::__list_const_iterator<ZinSpaceRange,void *>>(a3, (uint64_t)v19, (uint64_t)&v18);
    return std::__list_imp<ZinIrSection *>::clear(&v18);
  }
  return result;
}

void sub_206EF4CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  va_list va;

  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  std::__list_imp<ZinIrSection *>::clear(v4);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrSymbol::GetSpaceRangesWithoutWrapAround@<X0>(ZinIrSymbol *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t Dimension;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  ZinViewLayerUtils *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *__p;
  _DWORD *v79;
  char *v80;
  void *v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;

  v3 = (uint64_t *)this;
  v83 = &v83;
  v84 = &v83;
  v85 = 0;
  v77 = *((_QWORD *)this + 3);
  if ((a2 & 1) != 0 || *((_DWORD *)this + 39) != 1)
  {
    v12 = *((_QWORD *)this + 23);
    v13 = operator new(0x28uLL);
    v14 = v12 + v77;
    v13[2] = v77;
    v13[3] = v12 + v77;
    v13[4] = v12;
    *v13 = &v83;
    v13[1] = &v83;
    v83 = v13;
    v84 = v13;
    v85 = 1;
    if ((v3[66] & 0x3FFFFFFFFFFFFFLL) == 0)
    {
      *a3 = a3;
      a3[1] = a3;
      v23 = &v83;
      v22 = 1;
      v24 = &v83;
      v25 = v13;
      a3[2] = 0;
      goto LABEL_73;
    }
    std::__list_imp<ZinIrSection *>::clear(&v83);
    v15 = v3[65];
    if (v14 <= v15 << 10)
    {
      v13 = operator new(0x28uLL);
      v13[2] = v77;
      v13[3] = v14;
    }
    else
    {
      v16 = v15 << 10;
      v17 = v3[66] << 10;
      v18 = v77 - (v15 << 10);
      if (v77 < v15 << 10)
      {
        v19 = operator new(0x28uLL);
        v19[2] = v77;
        v19[3] = v16;
        v19[4] = v16 - v77;
        v20 = v83;
        *v19 = v83;
        v19[1] = &v83;
        v20[1] = v19;
        v21 = v85;
        v83 = v19;
        ++v85;
        v13 = operator new(0x28uLL);
        v13[2] = v17 + v16;
        v13[3] = v18 + v12 + v17 + v16;
        v13[4] = v18 + v12;
        *v13 = v19;
        v13[1] = &v83;
        v19[1] = v13;
        v22 = v21 + 2;
        v83 = v13;
LABEL_71:
        v85 = v22;
        *a3 = a3;
        a3[1] = a3;
        a3[2] = 0;
        if (!v22)
          return std::__list_imp<ZinIrSection *>::clear(&v83);
        v25 = v84;
        v24 = (_QWORD *)v13[1];
        v23 = (_QWORD *)*v84;
LABEL_73:
        v23[1] = v24;
        *(_QWORD *)v13[1] = v23;
        v65 = *a3;
        *(_QWORD *)(v65 + 8) = v25;
        *v25 = v65;
        *a3 = v13;
        v13[1] = a3;
        a3[2] = v22;
        v85 = 0;
        return std::__list_imp<ZinIrSection *>::clear(&v83);
      }
      v13 = operator new(0x28uLL);
      v13[2] = v17 + v77;
      v13[3] = v17 + v77 + v12;
    }
    v13[4] = v12;
    v64 = v83;
    *v13 = v83;
    v13[1] = &v83;
    v64[1] = v13;
    v83 = v13;
    v22 = v85 + 1;
    goto LABEL_71;
  }
  v5 = operator new(0x14uLL);
  v6 = v3 + 37;
  v79 = v5 + 5;
  v80 = (char *)(v5 + 5);
  v5[4] = 4;
  *(_OWORD *)v5 = xmmword_207AA8CF4;
  __p = v5;
  ZinViewLayerUtils::GetSortedAxesByDimensionOrder(v3 + 37, (int **)&__p, (char **)&v81);
  v72 = (ZinViewLayerUtils *)(v3 + 32);
  if (__p)
  {
    v79 = __p;
    operator delete(__p);
  }
  v7 = v3[64];
  v67 = a3;
  if (v7)
  {
    ZinViewLayerUtils::GetAxesOfView(v72, (const ZinTensorDimensions *)(v7 + 256), (char **)&__p);
    v8 = __p;
    if (__p == v79)
    {
      v9 = 4;
    }
    else
    {
      v9 = 4;
      do
      {
        if (v81 == v82)
        {
          v10 = (char *)v81;
        }
        else
        {
          v10 = (char *)v81;
          while (*(_DWORD *)v10 != *v8)
          {
            v10 += 4;
            if (v10 == v82)
            {
              v10 = v82;
              break;
            }
          }
        }
        v11 = (v10 - (_BYTE *)v81) >> 2;
        if (v9 >= v11 + 1)
          v9 = v11 + 1;
        ++v8;
      }
      while (v8 != v79);
    }
    do
    {
      v26 = v9;
      if (!v9)
        break;
      Dimension = ZinTensorDimensions::GetDimension(v3 + 37, *((_DWORD *)v81 + v9 - 1));
      v28 = v26;
      v29 = ZinTensorDimensions::GetDimension(v3 + 37, *((_DWORD *)v81 + v26));
      v30 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + v28));
      v9 = v28 - 1;
      v31 = Dimension == v30 * v29;
      v26 = v28;
    }
    while (v31);
    if (__p)
    {
      v79 = __p;
      operator delete(__p);
    }
    if (!v26)
    {
      v75 = 1;
      v69 = 1;
      v68 = 1;
      v70 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v26 = 4;
  }
  v68 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *(_DWORD *)v81);
  if (v26 < 2)
  {
    v70 = 1;
    v69 = 1;
    goto LABEL_38;
  }
  v69 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + 1));
  if (v26 < 3)
  {
    v70 = 1;
    goto LABEL_38;
  }
  v70 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + 2));
  if (v26 < 4)
  {
LABEL_38:
    v75 = 1;
    goto LABEL_39;
  }
  v75 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + 3));
LABEL_39:
  if (v68)
  {
LABEL_40:
    v73 = 0;
    v71 = v26;
    while (!v69)
    {
LABEL_58:
      if (++v73 == v68)
        goto LABEL_59;
    }
    v74 = 0;
    while (!v70)
    {
LABEL_57:
      if (++v74 == v69)
        goto LABEL_58;
    }
    v76 = 0;
    while (!v75)
    {
LABEL_56:
      if (++v76 == v70)
        goto LABEL_57;
    }
    v32 = 0;
    while (1)
    {
      v33 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + v26));
      v34 = v3;
      v35 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + v26));
      v36 = ZinTensorDimensions::GetDimension(v6, *(_DWORD *)v81);
      v37 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + 1));
      v38 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + 2));
      v39 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + 3));
      v40 = v6;
      v41 = operator new(0x28uLL);
      v42 = v77 + v36 * v73 + v37 * v74 + v38 * v76 + v39 * v32;
      v43 = v35 * v33;
      v44 = v42 + v35 * v33;
      v41[2] = v42;
      v41[3] = v44;
      v41[4] = v35 * v33;
      v45 = v83;
      *v41 = v83;
      v41[1] = &v83;
      v45[1] = v41;
      v46 = v85;
      v83 = v41;
      ++v85;
      v3 = v34;
      if ((v34[66] & 0x3FFFFFFFFFFFFFLL) != 0)
        break;
LABEL_55:
      ++v32;
      v26 = v71;
      v6 = v40;
      if (v75 == v32)
        goto LABEL_56;
    }
    v45[1] = v41[1];
    *(_QWORD *)v41[1] = v45;
    v85 = v46;
    operator delete(v41);
    v47 = v34[65];
    if (v44 <= v47 << 10)
    {
      v55 = operator new(0x28uLL);
      v55[2] = v42;
      v55[3] = v44;
      v55[4] = v43;
      v56 = v83;
      v55[1] = &v83;
    }
    else
    {
      v48 = v47 << 10;
      v49 = v34[66] << 10;
      if (v77 < v47 << 10)
      {
        v50 = operator new(0x28uLL);
        v50[2] = v42;
        v50[3] = v48;
        v50[4] = v48 - v42;
        v51 = v83;
        *v50 = v83;
        v50[1] = &v83;
        v51[1] = v50;
        v52 = v85;
        v83 = v50;
        ++v85;
        v53 = operator new(0x28uLL);
        v53[2] = v49 + v48;
        v53[3] = v49 + v44;
        v53[4] = v44 - v48;
        *v53 = v50;
        v53[1] = &v83;
        v50[1] = v53;
        v54 = v52 + 2;
        v83 = v53;
LABEL_54:
        v85 = v54;
        goto LABEL_55;
      }
      v55 = operator new(0x28uLL);
      v55[2] = v49 + v42;
      v55[3] = v49 + v44;
      v55[4] = v43;
      v56 = v83;
      v55[1] = &v83;
    }
    *v55 = v56;
    v56[1] = v55;
    v83 = v55;
    v54 = v85 + 1;
    goto LABEL_54;
  }
LABEL_59:
  *v67 = v67;
  v67[1] = v67;
  v67[2] = 0;
  v57 = v84;
  if (v84 != &v83)
  {
    v58 = 0;
    v59 = v67;
    do
    {
      v60 = v57[3];
      v61 = &v83;
      if ((_QWORD **)v57[1] != &v83)
      {
        v61 = (_QWORD *)v57[1];
        while (v60 == v61[2])
        {
          v60 = v61[3];
          v61 = (_QWORD *)v61[1];
          if (v61 == &v83)
          {
            v61 = &v83;
            break;
          }
        }
      }
      v62 = v57[2];
      v63 = operator new(0x28uLL);
      v63[2] = v62;
      v63[3] = v60;
      v63[4] = v60 - v62;
      *v63 = v59;
      v63[1] = v67;
      v59[1] = v63;
      ++v58;
      *v67 = v63;
      v57 = v61;
      v59 = v63;
      v67[2] = v58;
    }
    while (v61 != &v83);
  }
  if (v81)
  {
    v82 = (char *)v81;
    operator delete(v81);
  }
  return std::__list_imp<ZinIrSection *>::clear(&v83);
}

void sub_206EF53FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(v25 - 112));
  _Unwind_Resume(a1);
}

uint64_t AddrWrapInfo::GetWrapAddrInByte(AddrWrapInfo *this)
{
  return *(_QWORD *)this << 10;
}

uint64_t AddrWrapInfo::GetWrapAddrOffsetInByte(AddrWrapInfo *this)
{
  return *((_QWORD *)this + 1) << 10;
}

uint64_t ZinIrSection::GetPageAlignedDataSize(ZinIrSection *this, uint64_t a2)
{
  return ZinAlignPower2(*((_QWORD *)this + 4), a2);
}

uint64_t ZinIrSection::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206EF5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMemoryPool::ZinIrMemoryPool(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;

  *(_QWORD *)result = &off_24C01A9F8;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 40) = a8;
  *(_QWORD *)(result + 48) = a4;
  *(_BYTE *)(result + 56) = a7;
  *(_QWORD *)(result + 64) = a5;
  *(_QWORD *)(result + 72) = a6;
  *(_BYTE *)(result + 80) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 88) = result + 96;
  v8 = 0x20000000;
  if (a3 != 1)
    v8 = 0x10000000;
  if (!a3)
    v8 = 805306368;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = v8;
  return result;
}

void ZinIrMemoryPool::~ZinIrMemoryPool(ZinIrMemoryPool *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24C01A9F8;
  v2 = (char *)this + 96;
  v3 = (char *)this + 88;
  v4 = (char *)*((_QWORD *)this + 11);
  if (v4 != (char *)this + 96)
  {
    do
    {
      v5 = *((_QWORD *)v4 + 5);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = (char *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v2);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v3, *((_QWORD **)this + 12));
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
}

{
  ZinIrMemoryPool::~ZinIrMemoryPool(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIrMemoryPool::SetAllocator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t ZinIrMemoryPool::AllocateMemory(ZinIrMemoryPool *this, uint64_t a2, ZinIrSection *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  _BYTE v14[32];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[3];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = 1;
  if (a3
    && a5
    && *((_DWORD *)a3 + 3) == *((_DWORD *)this + 4)
    && *(_QWORD *)(a2 + 32)
    && ZinIrMemoryPool::MempoolHasSection(this, a3))
  {
    if (*(_QWORD *)(a2 + 32) <= *((_QWORD *)this + 1))
    {
      v16 = 0;
      v17 = 0;
      v15 = 0;
      v6 = (***((uint64_t (****)(_QWORD, uint64_t, ZinIrSection *, uint64_t, uint64_t *, uint64_t *, uint64_t))this
              + 3))(*((_QWORD *)this + 3), a2, a3, a4, &v17, &v15, a6);
      if ((_DWORD)v6)
      {
        *a5 = 0;
      }
      else
      {
        ZinIrSymbol::Descriptor::Descriptor(v18, a2);
        v14[0] = 0;
        v14[24] = 0;
        *a5 = ZinIrSection::CreateSymbolAtOffset((uint64_t)a3, (uint64_t)v18, 0, v17, v17, v15, v16, (uint64_t)v14);
        if (v19 < 0)
          operator delete(v18[1]);
      }
    }
    else
    {
      return 5;
    }
  }
  return v6;
}

void sub_206EF5840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrSection::CreateSymbolAtOffset(uint64_t a1, uint64_t a2, ZinIrSymbol *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  unint64_t v15;
  __int128 v17;

  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v14 = operator new();
  ZinIrSymbol::ZinIrSymbol(v14, a1, a4, a5, a2, &v17);
  v15 = *(_QWORD *)(v14 + 184) + *(_QWORD *)(v14 + 24);
  if (v15 > *(_QWORD *)(a1 + 32))
    *(_QWORD *)(a1 + 32) = v15;
  if (a3)
  {
    if (ZinIrSymbol::AddSymbolAlias(a3, (const ZinIrSymbol *)v14))
      return 0;
    *(_QWORD *)(v14 + 512) = a3;
  }
  if (*(_BYTE *)(a8 + 24))
  {
    *(_OWORD *)(v14 + 32) = *(_OWORD *)a8;
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(a8 + 16);
    *(_BYTE *)(v14 + 56) = 1;
  }
  ZinIrSymbolTable::AddSymbol((ZinIrSymbolTable *)(a1 + 64), (ZinIrSymbol *)v14);
  return v14;
}

void sub_206EF5958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C4013B7CD13);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMemoryPool::CreateSymbolAlias(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4, ZinIrSymbol *a5, int a6, uint64_t *a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  const void *v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;
  std::string __p;
  _BYTE v29[304];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 1;
  v7 = a4;
  v8 = a3;
  result = 1;
  if (a4 >= a3)
  {
    v11 = a2 + 4;
    v10 = a2[4];
    if (v10)
    {
      if (*((_QWORD *)a5 + 23) + *((_QWORD *)a5 + 3) >= a4)
      {
        v14 = *((_QWORD *)a5 + 66);
        if ((v14 & 0x3FFFFFFFFFFFFFLL) != 0)
        {
          if (a6)
          {
            v15 = *((_QWORD *)a5 + 65);
          }
          else
          {
            v16 = *((_QWORD *)a5 + 2) + a4;
            v17 = *((_QWORD *)a5 + 65);
            v18 = a3 + (v14 << 10);
            v19 = a4 + (v14 << 10);
            v20 = v16 + v10;
            v21 = v20 > v17 << 10;
            if (v20 <= v17 << 10)
              v22 = 0;
            else
              v22 = *((_QWORD *)a5 + 65);
            if (v21)
              v23 = *((_QWORD *)a5 + 66);
            else
              v23 = 0;
            if (v16 < v17 << 10)
              v15 = v22;
            else
              v15 = 0;
            if (v16 < v17 << 10)
              v14 = v23;
            else
              v14 = 0;
            if (v16 >= v17 << 10)
            {
              v7 = v19;
              v8 = v18;
            }
          }
        }
        else
        {
          v15 = 0;
          v14 = 0;
        }
        v24 = *((_QWORD *)a5 + 1);
        v27 = *a2;
        if (*((char *)a2 + 31) < 0)
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a2[1], a2[2]);
        else
          __p = *(std::string *)(a2 + 1);
        memcpy(v29, v11, sizeof(v29));
        v25 = *((_QWORD *)a5 + 2);
        v26[0] = 0;
        v26[24] = 0;
        *a7 = ZinIrSection::CreateSymbolAtOffset(v24, (uint64_t)&v27, a5, v25 + v8, v25 + v7, v15, v14, (uint64_t)v26);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return 0;
      }
    }
  }
  return result;
}

void sub_206EF5B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

_QWORD *ZinIrMemoryPool::GetSections@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int v14;

  v14 = a2;
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  result = std::__tree<std::__value_type<ZinIrSection::SectType,ZinIrSection*>,std::__map_value_compare<ZinIrSection::SectType,std::__value_type<ZinIrSection::SectType,ZinIrSection*>,std::less<ZinIrSection::SectType>,true>,std::allocator<std::__value_type<ZinIrSection::SectType,ZinIrSection*>>>::__equal_range_multi<ZinIrSection::SectType>(a1 + 88, &v14);
  v5 = result;
  v7 = v6;
  if (result != v6)
  {
    v8 = a3[2];
    v9 = (_QWORD *)*a3;
    do
    {
      result = operator new(0x18uLL);
      v10 = v5[5];
      result[1] = a3;
      result[2] = v10;
      *result = v9;
      v9[1] = result;
      *a3 = result;
      a3[2] = ++v8;
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v5[2];
          v13 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
      v9 = result;
    }
    while (v12 != v7);
  }
  return result;
}

void sub_206EF5C14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSection::SetComputeProgramSectionAndTransferBarId(uint64_t result, uint64_t a2)
{
  if (!a2)
    ZinAssertImpl("missing compute program section");
  *(_DWORD *)(a2 + 56) = *(unsigned __int8 *)(result + 56);
  *(_QWORD *)(result + 128) = a2;
  return result;
}

uint64_t ZinIrMemoryPool::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206EF5D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float ZinIrMemoryPool::ComputeBankInterval(ZinIrMemoryPool *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4;

  v4 = *((_QWORD *)this + 9);
  log2((double)v4);
  return (float)a3 / (float)v4;
}

uint64_t ZinIrMemoryPool::OverlapBankInterval(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v5;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *__p;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = a1;
  v3 = *(_QWORD *)(a1 + 64);
  if (a2[1] >= v3 || a3[1] >= v3)
    return 1;
  ZinIrMemoryPool::OverlapBankInterval(ZinIrMemoryPool::BankInterval const&,ZinIrMemoryPool::BankInterval const&)const::$_0::operator()(&v16, a2, &v14);
  ZinIrMemoryPool::OverlapBankInterval(ZinIrMemoryPool::BankInterval const&,ZinIrMemoryPool::BankInterval const&)const::$_0::operator()(&v16, a3, &__p);
  v7 = v14;
  if (v14 != v15)
  {
    v8 = v14;
    while (__p == v13)
    {
LABEL_16:
      v8 += 2;
      if (v8 == v15)
        goto LABEL_17;
    }
    v9 = __p;
    while (v8[1] < *v9 || v9[1] < *v8)
    {
      v9 += 2;
      if (v9 == v13)
        goto LABEL_16;
    }
    v5 = 1;
    if (!__p)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_17:
  v5 = 0;
  if (__p)
LABEL_20:
    operator delete(__p);
LABEL_21:
  if (v7)
    operator delete(v7);
  return v5;
}

void sub_206EF5E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrMemoryPool::OverlapBankInterval(ZinIrMemoryPool::BankInterval const&,ZinIrMemoryPool::BankInterval const&)const::$_0::operator()(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;

  v4 = *a1;
  v5 = *a2;
  v6 = a2[1];
  v7 = *a2 + v6 - 1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v8 = *(_QWORD *)(v4 + 64);
  if (v7 < v8)
  {
    v9 = operator new(0x10uLL);
    *v9 = v5;
    v9[1] = v7;
    a3[1] = v9 + 2;
    a3[2] = v9 + 2;
    *a3 = v9;
    return;
  }
  v10 = operator new(0x10uLL);
  v11 = (char *)(v10 + 2);
  *v10 = v5;
  v10[1] = v8 - 1;
  a3[1] = v10 + 2;
  a3[2] = v10 + 2;
  *a3 = v10;
  v12 = v5 - v8 + v6;
  if (v8 > v12)
  {
    v13 = v7 % v8;
    v14 = (char *)(v10 + 2);
    goto LABEL_30;
  }
  v15 = 0;
  v16 = v12 / v8;
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  do
  {
    v18 = *(_QWORD *)(v4 + 64) - 1;
    v19 = a3[2];
    if ((unint64_t)v11 < v19)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = v18;
      v11 += 16;
      goto LABEL_27;
    }
    v20 = (char *)*a3;
    v21 = (uint64_t)&v11[-*a3] >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v23 = v19 - (_QWORD)v20;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = (char *)operator new(16 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[16 * v21];
    v27 = &v25[16 * v24];
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = v18;
    v28 = v26 + 16;
    if (v11 == v20)
    {
      *a3 = v26;
      a3[1] = v28;
      a3[2] = v27;
    }
    else
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v11 - 1);
        v26 -= 16;
        v11 -= 16;
      }
      while (v11 != v20);
      v11 = (char *)*a3;
      *a3 = v26;
      a3[1] = v28;
      a3[2] = v27;
      if (!v11)
        goto LABEL_26;
    }
    operator delete(v11);
LABEL_26:
    v11 = v28;
LABEL_27:
    a3[1] = v11;
    ++v15;
  }
  while (v15 != v17);
  v14 = (char *)a3[2];
  v13 = v7 % *(_QWORD *)(v4 + 64);
  if (v11 < v14)
  {
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = v13;
    v29 = v11 + 16;
    goto LABEL_46;
  }
LABEL_30:
  v30 = (char *)*a3;
  v31 = (uint64_t)&v11[-*a3] >> 4;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 60)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v33 = v14 - v30;
  if (v33 >> 3 > v32)
    v32 = v33 >> 3;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
    v34 = 0xFFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
  {
    if (v34 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v35 = (char *)operator new(16 * v34);
  }
  else
  {
    v35 = 0;
  }
  v36 = &v35[16 * v31];
  v37 = &v35[16 * v34];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = v13;
  v29 = v36 + 16;
  if (v11 == v30)
  {
    *a3 = v36;
    a3[1] = v29;
    a3[2] = v37;
LABEL_45:
    operator delete(v11);
    goto LABEL_46;
  }
  do
  {
    *((_OWORD *)v36 - 1) = *((_OWORD *)v11 - 1);
    v36 -= 16;
    v11 -= 16;
  }
  while (v11 != v30);
  v11 = (char *)*a3;
  *a3 = v36;
  a3[1] = v29;
  a3[2] = v37;
  if (v11)
    goto LABEL_45;
LABEL_46:
  a3[1] = v29;
}

void sub_206EF6100(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *ZinIrSymbolTable::AddSymbol(ZinIrSymbolTable *this, ZinIrSymbol *a2)
{
  char *v4;
  uint64_t **v5;
  ZinIrSymbol *v6;
  uint64_t *result;
  ZinIrSymbol *v8;
  char *v9;

  v8 = a2;
  v4 = (char *)a2 + 160;
  if (std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__count_unique<ZinIrSymbol *>((uint64_t)this, (uint64_t *)&v8))
  {
    if (*((char *)a2 + 183) < 0)
      v4 = *(char **)v4;
    ZinAssertImpl("Symbol object already in symbol table: %s", v4);
  }
  v5 = (uint64_t **)((char *)this + 24);
  if (std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>((uint64_t)this + 24, (void **)v4))
  {
    if (*((char *)a2 + 183) < 0)
      v4 = *(char **)v4;
    ZinAssertImpl("Symbol name already in symbol table: %s", v4);
  }
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)this, (uint64_t *)&v8, (uint64_t *)&v8);
  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Insert(*((uint64_t ***)this + 6), (uint64_t)v8, (_QWORD *)v8 + 24);
  v6 = v8;
  v9 = v4;
  result = std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)v4, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
  result[7] = (uint64_t)v6;
  return result;
}

BOOL ZinIrSection::HasValidBarId(ZinIrSection *this)
{
  return *((unsigned __int8 *)this + 56) < *((unsigned __int8 *)this + 16);
}

void ZinIrSection::IncrementScheduleFrom(ZinIrSection *this, unint64_t a2)
{
  ZinIrSymbolTable::IncrementScheduleFrom((ZinIrSection *)((char *)this + 64), a2);
}

void ZinIrSymbolTable::IncrementScheduleFrom(ZinIrSymbolTable *this, unint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;
  int64x2_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  uint64x2_t v10;
  _QWORD **v11;
  _QWORD *v12[2];

  std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::set[abi:ne180100]((uint64_t *)&v11, (uint64_t)this);
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((_QWORD **)this + 6, v4);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  v5 = v11;
  if (v11 != v12)
  {
    v10 = (uint64x2_t)vdupq_n_s64(a2);
    do
    {
      v6 = (int64x2_t *)v5[4];
      v6[12] = vsubq_s64(v6[12], (int64x2_t)vcgeq_u64((uint64x2_t)v6[12], v10));
      ZinIrSymbolTable::AddSymbol(this, (ZinIrSymbol *)v6);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v12);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_206EF6334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinIrSection::UpdateSchedule(ZinIrSection *this, ZinIrSymbol *a2, unint64_t a3, unint64_t a4)
{
  ZinIrSymbolTable::UpdateSchedule((ZinIrSection *)((char *)this + 64), a2, a3, a4);
}

void ZinIrSymbolTable::UpdateSchedule(ZinIrSymbolTable *this, ZinIrSymbol *a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  int64x2_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int8x16_t v18;
  int64x2_t v19;
  char v20;
  unint64_t v21[2];
  ZinIrSymbol *v22;
  uint64_t (**v23)();
  ZinIrSymbol **v24;
  char *v25;
  uint64_t **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v21[1] = a3;
  v22 = a2;
  v21[0] = a3;
  v20 = 1;
  v7 = (uint64_t *)*((_QWORD *)this + 6);
  v23 = &off_24C000D70;
  v24 = &v22;
  v25 = &v20;
  v26 = (uint64_t **)&v23;
  ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::TraverseIntersectNodeVisitor((uint64_t)v7, *v7, v21, (uint64_t)&v23);
  v8 = (uint64_t (***)())v26;
  if (v26 == (uint64_t **)&v23)
  {
    v9 = 4;
    v8 = &v23;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_6:
  if (!v20)
  {
    v24 = 0;
    v25 = 0;
    v23 = (uint64_t (**)())&v24;
    if (v22)
    {
      do
      {
        std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)&v23, (uint64_t *)&v22, (uint64_t *)&v22);
        v22 = (ZinIrSymbol *)*((_QWORD *)v22 + 64);
      }
      while (v22);
      v10 = (uint64_t *)v23;
      if (v23 != (uint64_t (**)())&v24)
      {
        do
        {
          ZinIrSymbolTable::RemoveSymbol((uint64_t **)this, (ZinIrSymbol *)v10[4]);
          v11 = (uint64_t *)v10[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (uint64_t *)v10[2];
              v13 = *v12 == (_QWORD)v10;
              v10 = v12;
            }
            while (!v13);
          }
          v10 = v12;
        }
        while (v12 != (uint64_t *)&v24);
        v14 = (uint64_t *)v23;
        if (v23 != (uint64_t (**)())&v24)
        {
          v18 = (int8x16_t)vdupq_n_s64(a4);
          v19 = vdupq_n_s64(a3);
          do
          {
            v15 = (int64x2_t *)v14[4];
            v15[12] = (int64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v15[12], v19), v18, (int8x16_t)v15[12]);
            ZinIrSymbolTable::AddSymbol(this, (ZinIrSymbol *)v15);
            v16 = (uint64_t *)v14[1];
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (uint64_t *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (uint64_t *)v14[2];
                v13 = *v17 == (_QWORD)v14;
                v14 = v17;
              }
              while (!v13);
            }
            v14 = v17;
          }
          while (v17 != (uint64_t *)&v24);
        }
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, v24);
  }
}

void sub_206EF6538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrSymbol::HasSpaceIntersect(ZinIrSymbol *this, const ZinIrSymbol *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  if (*((_QWORD *)this + 1) != *((_QWORD *)a2 + 1))
    return 0;
  ZinIrSymbol::GetSpaceRanges(this, 1, &v15);
  ZinIrSymbol::GetSpaceRanges(a2, 1, &v13);
  v4 = v16;
  if (v16 == &v15)
  {
LABEL_17:
    v2 = 0;
  }
  else
  {
    while (v14 == &v13)
    {
LABEL_16:
      v4 = (uint64_t *)v4[1];
      if (v4 == &v15)
        goto LABEL_17;
    }
    v5 = v4[2];
    v6 = v4[3];
    v7 = v14;
    while (1)
    {
      if (v5 <= v6)
      {
        v9 = v7[2];
        v8 = v7[3];
        v10 = v9 >= v6 || v5 >= v8;
        if (!v10 && v9 <= v8)
          break;
      }
      v7 = (uint64_t *)v7[1];
      if (v7 == &v13)
        goto LABEL_16;
    }
    v2 = 1;
  }
  std::__list_imp<ZinIrSection *>::clear(&v13);
  std::__list_imp<ZinIrSection *>::clear(&v15);
  return v2;
}

void sub_206EF6664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL ZinIrSymbol::SpaceContains(ZinIrSymbol *this, const ZinIrSymbol *a2)
{
  _BOOL8 v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;

  if (*((_QWORD *)this + 1) != *((_QWORD *)a2 + 1))
    return 0;
  ZinIrSymbol::GetSpaceRanges(this, 1, &v16);
  ZinIrSymbol::GetSpaceRanges(a2, 1, &v14);
  v4 = v15;
  if (v15 == &v14)
  {
    v2 = 1;
  }
  else
  {
    v2 = v17 != &v16;
    do
    {
      if (v17 == &v16)
        break;
      v5 = v4[2];
      v6 = v4[3];
      v7 = v17;
      while (1)
      {
        v8 = v7[2];
        v9 = v7[3];
        v10 = v8 <= v9 && v9 >= v6;
        v11 = !v10 || v5 > v6;
        if (!v11 && v8 <= v5)
          break;
        v7 = (uint64_t *)v7[1];
        if (v7 == &v16)
        {
          v2 = 0;
          goto LABEL_23;
        }
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v14);
  }
LABEL_23:
  std::__list_imp<ZinIrSection *>::clear(&v14);
  std::__list_imp<ZinIrSection *>::clear(&v16);
  return v2;
}

void sub_206EF675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ZinIrSection::~ZinIrSection(void **this)
{
  ZinIrSection *v2;
  uint64_t v3;
  ZinIrSection *v4;
  ZinIrSection *v5;
  BOOL v6;

  *this = &off_24C016AA0;
  free(this[3]);
  v2 = (ZinIrSection *)this[8];
  if (v2 != (ZinIrSection *)(this + 9))
  {
    do
    {
      v3 = *((_QWORD *)v2 + 4);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = (ZinIrSection *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(ZinIrSection **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (ZinIrSection *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (ZinIrSection *)(this + 9));
  }
  ZinIrSymbolTable::~ZinIrSymbolTable((ZinIrSymbolTable *)(this + 8));
}

{
  ZinIrSection::~ZinIrSection(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Insert(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = (uint64_t *)result;
  if (result)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_BYTE *)(result + 48) = 1;
  }
  return result;
}

uint64_t ZinIrSymbolTable::RemoveSymbol(uint64_t **this, ZinIrSymbol *a2)
{
  ZinIrSymbolTable *v3;
  uint64_t *v4;
  void **v5;
  uint64_t result;
  ZinIrSymbol *v7;

  v7 = a2;
  v3 = (ZinIrSymbolTable *)std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::find<ZinIrSymbol const*>((uint64_t)this, (uint64_t *)&v7);
  if (this + 1 == (uint64_t **)v3)
    return 0;
  v4 = (uint64_t *)v3;
  v5 = (void **)((char *)v7 + 160);
  result = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>((uint64_t)(this + 3), (void **)v7 + 20);
  if (result)
  {
    std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(this, v4);
    operator delete(v4);
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Remove(this[6], (uint64_t)v7, (_QWORD *)v7 + 24);
    std::__tree<std::string>::__erase_unique<std::string>(this + 3, v5);
    return 1;
  }
  return result;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Remove(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = result;
  if (result)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_BYTE *)(result + 48) = 1;
  }
  return result;
}

void ZinIrSymbolTable::GetCoveringSymbols(uint64_t **this@<X0>, const ZinLiveRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;

  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodes(this[6], (unint64_t *)a2, (uint64_t)&v6);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v4 = v6;
  v5 = v7;
  if (v6 != v7)
  {
    do
    {
      std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)a3, *v4, *v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = v6;
  }
  if (v4)
  {
    v7 = v4;
    operator delete(v4);
  }
}

void sub_206EF6A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v11, *(_QWORD **)(v11 + 8));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodes@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor((uint64_t)a1, *a1, a2, (void **)a3);
}

void sub_206EF6A5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrSymbolTable::GetSymbolByName(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t result;
  void **v5;

  v3 = (uint64_t **)(a1 + 24);
  result = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>(a1 + 24, a2);
  if (result)
  {
    v5 = a2;
    return std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)[7];
  }
  return result;
}

uint64_t ZinIrSymbol::GetWrapInfo@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v2;
  char v3;

  if (*(_BYTE *)(this + 88))
  {
    v2 = *(_OWORD *)(this + 64);
  }
  else
  {
    v3 = *(_BYTE *)(this + 56);
    if (!v3)
    {
      *a2 = 0;
      goto LABEL_6;
    }
    v2 = *(_OWORD *)(this + 32);
  }
  *(_OWORD *)a2 = v2;
  v3 = 1;
LABEL_6:
  a2[16] = v3;
  return this;
}

void ZinIrSymbolTable::ZinIrSymbolTable(ZinIrSymbolTable *this)
{
  _QWORD *v2;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  *((_QWORD *)this + 6) = v2;
}

void sub_206EF6B70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v2, *(char **)(v1 + 32));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ZinIrSymbolTable::~ZinIrSymbolTable(ZinIrSymbolTable *this)
{
  std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((_QWORD **)this + 6, 0);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

_QWORD *std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::~ZinIntervalTree(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

uint64_t StaticWrapInfo::GetWrapIndex(StaticWrapInfo *this)
{
  return (*((_DWORD *)this + 2) - *((_DWORD *)this + 4));
}

uint64_t std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__count_unique<ZinIrSymbol *>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  char v9;
  BOOL v10;
  char v11;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      v5 = *a2;
      v6 = v2[4];
      if (*a2)
        v7 = v6 == 0;
      else
        v7 = 1;
      if (v7)
      {
        if (v5)
          v8 = v6 == 0;
        else
          v8 = 0;
        if (v8)
          goto LABEL_26;
      }
      else
      {
        v9 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v5 + 160), (void **)(v6 + 160));
        if (v9 < 0)
          goto LABEL_26;
        v6 = v2[4];
        v5 = *a2;
      }
      if (v6)
        v10 = v5 == 0;
      else
        v10 = 1;
      if (v10)
      {
        if (!v6 || v5)
          return v4;
      }
      else
      {
        v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v6 + 160), (void **)(v5 + 160));
        if ((v11 & 0x80) == 0)
          return v4;
      }
      ++v2;
LABEL_26:
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, int *a5)
{
  uint64_t v8;
  uint64_t inserted;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;

  *a5 = 0;
  if (a2)
  {
    v8 = (uint64_t)a2;
    if (ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::LessThan::operator()((uint64_t)&v25, a3, *a2, a4, a2 + 1))
    {
      inserted = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor(a1, *(_QWORD *)(v8 + 64), a3, a4, a5);
      if (inserted)
        *(_QWORD *)(inserted + 56) = v8;
      *(_QWORD *)(v8 + 64) = inserted;
    }
    else
    {
      v12 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor(a1, *(_QWORD *)(v8 + 72), a3, a4, a5);
      if (v12)
        *(_QWORD *)(v12 + 56) = v8;
      *(_QWORD *)(v8 + 72) = v12;
    }
    ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
    switch(*a5)
    {
      case 1:
        goto LABEL_14;
      case 2:
        v13 = *(_QWORD **)(v8 + 64);
        v14 = (_QWORD *)v13[9];
        v15 = v14[8];
        if (v15)
          *(_QWORD *)(v15 + 56) = v13;
        v13[9] = v15;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v13);
        v13[7] = v14;
        v14[8] = v13;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v14);
        v14[7] = v8;
        *(_QWORD *)(v8 + 64) = v14;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
LABEL_14:
        v16 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(a1, (_QWORD *)v8);
        goto LABEL_19;
      case 3:
        v17 = *(_QWORD **)(v8 + 72);
        v18 = (_QWORD *)v17[8];
        v19 = v18[9];
        if (v19)
          *(_QWORD *)(v19 + 56) = v17;
        v17[8] = v19;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v17);
        v17[7] = v18;
        v18[9] = v17;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v18);
        v18[7] = v8;
        *(_QWORD *)(v8 + 72) = v18;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
        goto LABEL_18;
      case 4:
LABEL_18:
        v16 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(a1, (_QWORD *)v8);
LABEL_19:
        *(_BYTE *)(v8 + 48) = 0;
        *((_BYTE *)v16 + 48) = 1;
        v8 = (uint64_t)v16;
        break;
      default:
        break;
    }
    if (ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::HasDoubleRed(v8, a5))
    {
      v20 = *(_QWORD *)(v8 + 56);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 64);
        v22 = v21;
        if (v21 == v8)
          v22 = *(_QWORD *)(v20 + 72);
        if (v22 && !*(_BYTE *)(v22 + 48))
        {
          *(_BYTE *)(v20 + 48) = 0;
          v23 = *(_QWORD *)(v20 + 72);
          if (v21)
            *(_BYTE *)(v21 + 48) = 1;
          if (v23)
            *(_BYTE *)(v23 + 48) = 1;
          *a5 = 0;
        }
      }
    }
  }
  else
  {
    v8 = operator new();
    *(_QWORD *)v8 = a3;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)a4;
    v11 = *(_OWORD *)a4;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)a4;
    *(_QWORD *)(v8 + 40) = v11;
    *(_BYTE *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 56) = 0;
  }
  return v8;
}

BOOL ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::LessThan::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a4 < *a5;
  if (*a4 != *a5)
    return v5;
  v6 = a4[1];
  v7 = a5[1];
  v5 = v6 < v7;
  if (v6 != v7)
    return v5;
  if (a2 && a3)
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 160), (void **)(a3 + 160)) & 0x80u) != 0;
  return a2 && a3 == 0;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;

  v24 = a2;
  if (!a2)
    return 0;
  v10 = (_QWORD *)(a2 + 8);
  if (ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::LessThan::operator()((uint64_t)&v23, a3, *(_QWORD *)a2, a4, (_QWORD *)(a2 + 8)))
  {
    v11 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor(a1, *(_QWORD *)(a2 + 64), a3, a4, a5);
    if (v11)
      *(_QWORD *)(v11 + 56) = a2;
    *(_QWORD *)(a2 + 64) = v11;
LABEL_18:
    ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)a2);
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(a1, a5, &v24);
    return v24;
  }
  if (*(_QWORD *)a2 != a3 || *v10 != *a4 || *(_QWORD *)(a2 + 16) != a4[1])
  {
    v19 = *(_QWORD *)(a2 + 72);
    v18 = a1;
    v17 = a3;
    v16 = a4;
LABEL_15:
    v20 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor(v18, v19, v17, v16, a5);
    if (v20)
      *(_QWORD *)(v20 + 56) = a2;
    *(_QWORD *)(a2 + 72) = v20;
    goto LABEL_18;
  }
  v13 = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  if (!v13)
  {
    if (v12)
    {
      if (*(_BYTE *)(a2 + 48) == 1)
        *(_BYTE *)(v12 + 48) = 1;
      MEMORY[0x20BD002F8](a2, 0x1020C40823E9ACBLL);
      return v12;
    }
    if (*(_BYTE *)(a2 + 48))
    {
      v21 = *(_QWORD *)(a2 + 56);
      if (v21)
        *a5 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(a1, v21, a2);
    }
    MEMORY[0x20BD002F8](a2, 0x1020C40823E9ACBLL);
    return 0;
  }
  if (v12)
  {
    v14 = *(_QWORD *)(a2 + 72);
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 64);
    }
    while (v14);
    *(_QWORD *)a2 = *(_QWORD *)v15;
    v16 = (_QWORD *)(v15 + 8);
    *(_OWORD *)v10 = *(_OWORD *)(v15 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v15 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v15 + 40);
    v17 = *(_QWORD *)v15;
    v18 = a1;
    v19 = v12;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a2 + 48) == 1)
    *(_BYTE *)(v13 + 48) = 1;
  MEMORY[0x20BD002F8](a2, 0x1020C40823E9ACBLL);
  return v13;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  int v13;

  v3 = *(_QWORD *)(a2 + 72);
  v4 = v3;
  if (v3 == a3)
    v4 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(v4 + 48) != 1)
  {
    v8 = v3 == a3;
    v9 = 5;
    v10 = 2;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v4 + 64);
  if (!v5)
  {
    v7 = *(_QWORD *)(v4 + 72);
    if (v7)
    {
      if (v3 != a3)
        goto LABEL_16;
      if (*(_BYTE *)(v7 + 48))
        return 3;
      else
        return 1;
    }
    v8 = v3 == a3;
    v9 = 6;
    v10 = 3;
LABEL_10:
    if (v8)
      return v10;
    else
      return v9;
  }
  v6 = *(unsigned __int8 *)(v5 + 48);
  if (v3 != a3)
  {
    if (!v6)
      return 4;
    v7 = *(_QWORD *)(v4 + 72);
    if (!v7)
      return 6;
LABEL_16:
    if (*(_BYTE *)(v7 + 48))
      return 6;
    return 4;
  }
  if (!v6)
    return 1;
  v12 = *(_QWORD *)(v4 + 72);
  result = 3;
  if (v12)
  {
    v13 = *(unsigned __int8 *)(v12 + 48);
    result = v13 ? 3 : 1;
    if (!v13)
      return 1;
  }
  return result;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int DoubleBlackType;
  uint64_t v29;

  v5 = result;
  v6 = *a3;
  v7 = *(unsigned __int8 *)(*a3 + 48);
  switch(*a2)
  {
    case 1:
      v8 = *(_QWORD *)(v6 + 64);
      v9 = *(_QWORD *)(v8 + 64);
      if (v9 && *(_BYTE *)(v9 + 48) != 1)
      {
        result = (uint64_t)ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(result, (_QWORD *)*a3);
        goto LABEL_34;
      }
      v10 = *(_QWORD *)(v8 + 72);
      v11 = *(_QWORD *)(v10 + 64);
      if (v11)
        *(_QWORD *)(v11 + 56) = v8;
      *(_QWORD *)(v8 + 72) = v11;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v8);
      v12 = *(_QWORD *)(v10 + 72);
      if (v12)
        *(_QWORD *)(v12 + 56) = v6;
      *(_QWORD *)(v6 + 64) = v12;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v6);
      *(_QWORD *)(v8 + 56) = v10;
      *(_QWORD *)(v10 + 64) = v8;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v10);
      *(_QWORD *)(v6 + 56) = v10;
      *(_QWORD *)(v10 + 72) = v6;
      result = (uint64_t)ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v10);
      *(_BYTE *)(v10 + 48) = v7;
      *(_BYTE *)(v8 + 48) = 1;
      *(_BYTE *)(v6 + 48) = 1;
      goto LABEL_24;
    case 2:
      v13 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(result, (_QWORD *)*a3);
      *a3 = (uint64_t)v13;
      *((_BYTE *)v13 + 48) = 1;
      v14 = v13[9];
      *(_BYTE *)(v14 + 48) = 0;
      v29 = v14;
      DoubleBlackType = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(v5, v14, *(_QWORD *)(v14 + 72));
      ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(v5, &DoubleBlackType, &v29);
      v15 = (_QWORD *)*a3;
      v16 = v29;
      if (v29)
        *(_QWORD *)(v29 + 56) = v15;
      v15[9] = v16;
      goto LABEL_28;
    case 3:
      *(_BYTE *)(v6 + 48) = 1;
      v17 = *(_QWORD *)(v6 + 64);
      if (v17)
        goto LABEL_13;
      goto LABEL_14;
    case 4:
      v19 = *(_QWORD *)(v6 + 72);
      v20 = *(_QWORD *)(v19 + 72);
      if (v20 && *(_BYTE *)(v20 + 48) != 1)
      {
        result = (uint64_t)ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(result, (_QWORD *)*a3);
LABEL_34:
        *a3 = result;
        *(_BYTE *)(result + 48) = v7;
        v27 = *(_QWORD *)(result + 64);
        v26 = *(_QWORD *)(result + 72);
        if (v27)
          *(_BYTE *)(v27 + 48) = 1;
        if (v26)
          *(_BYTE *)(v26 + 48) = 1;
      }
      else
      {
        v10 = *(_QWORD *)(v19 + 64);
        v21 = *(_QWORD *)(v10 + 64);
        if (v21)
          *(_QWORD *)(v21 + 56) = v6;
        *(_QWORD *)(v6 + 72) = v21;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v6);
        v22 = *(_QWORD *)(v10 + 72);
        if (v22)
          *(_QWORD *)(v22 + 56) = v19;
        *(_QWORD *)(v19 + 64) = v22;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v19);
        *(_QWORD *)(v6 + 56) = v10;
        *(_QWORD *)(v10 + 64) = v6;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v10);
        *(_QWORD *)(v19 + 56) = v10;
        *(_QWORD *)(v10 + 72) = v19;
        result = (uint64_t)ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((_QWORD *)v10);
        *(_BYTE *)(v10 + 48) = v7;
        *(_BYTE *)(v6 + 48) = 1;
        *(_BYTE *)(v19 + 48) = 1;
LABEL_24:
        *a3 = v10;
      }
      goto LABEL_29;
    case 5:
      v23 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(result, (_QWORD *)*a3);
      *a3 = (uint64_t)v23;
      *((_BYTE *)v23 + 48) = 1;
      v24 = v23[8];
      *(_BYTE *)(v24 + 48) = 0;
      v29 = v24;
      DoubleBlackType = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(v5, v24, *(_QWORD *)(v24 + 64));
      ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(v5, &DoubleBlackType, &v29);
      v15 = (_QWORD *)*a3;
      v25 = v29;
      if (v29)
        *(_QWORD *)(v29 + 56) = v15;
      v15[8] = v25;
LABEL_28:
      result = (uint64_t)ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v15);
      goto LABEL_29;
    case 6:
      *(_BYTE *)(v6 + 48) = 1;
      v17 = *(_QWORD *)(v6 + 72);
      if (v17)
LABEL_13:
        *(_BYTE *)(v17 + 48) = 0;
LABEL_14:
      if (v7 && (v18 = *(_QWORD *)(v6 + 56)) != 0)
      {
        result = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(result, v18, v6);
        *a2 = result;
      }
      else
      {
LABEL_29:
        *a2 = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor(uint64_t result, uint64_t a2, unint64_t *a3, void **a4)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  if (a2 && *(_QWORD *)(a2 + 32) >= *a3 && *(_QWORD *)(a2 + 40) <= a3[1])
  {
    v7 = result;
    v21 = *(_OWORD *)(a2 + 8);
    if (ZinLiveRange::Contains((unint64_t *)&v21, a3))
    {
      v8 = (unint64_t)a4[2];
      v9 = a4[1];
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((char *)v9 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v12 = v8 - (_QWORD)*a4;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        v17 = &v15[8 * v14];
        *(_QWORD *)v16 = a2;
        v10 = v16 + 8;
        v19 = (char *)*a4;
        v18 = (char *)a4[1];
        if (v18 != *a4)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v16 - 1) = v20;
            v16 -= 8;
          }
          while (v18 != v19);
          v18 = (char *)*a4;
        }
        *a4 = v16;
        a4[1] = v10;
        a4[2] = v17;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v9 = a2;
        v10 = v9 + 1;
      }
      a4[1] = v10;
    }
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor(v7, *(_QWORD *)(a2 + 64), a3, a4);
    return ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor(v7, *(_QWORD *)(a2 + 72), a3, a4);
  }
  return result;
}

_QWORD *ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::~ZinIntervalTree(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetTreeNodes(a1, (void **)&v5);
  v2 = v5;
  v3 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v2)
        MEMORY[0x20BD002F8](*v2, 0x1020C40823E9ACBLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = v5;
  }
  if (v2)
  {
    v6 = v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetTreeNodes@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v20 = 0u;
  memset(v19, 0, sizeof(v19));
  if (*a1)
  {
    std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(v19, a1);
    for (i = *((_QWORD *)&v20 + 1); *((_QWORD *)&v20 + 1); i = *((_QWORD *)&v20 + 1))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v19[0] + 1) + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v20 & 0x1FF));
      *(_QWORD *)&v20 = v20 + 1;
      *((_QWORD *)&v20 + 1) = i - 1;
      if ((unint64_t)v20 >= 0x400)
      {
        operator delete(**((void ***)&v19[0] + 1));
        *((_QWORD *)&v19[0] + 1) += 8;
        *(_QWORD *)&v20 = v20 - 512;
      }
      if (*(_QWORD *)(v4 + 64))
      {
        v18 = *(_QWORD *)(v4 + 64);
        std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      if (*(_QWORD *)(v4 + 72))
      {
        v18 = *(_QWORD *)(v4 + 72);
        std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      v6 = a2[1];
      v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v4;
        v7 = v13 + 8;
        v15 = (char *)*a2;
        v14 = (char *)a2[1];
        if (v14 != *a2)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v6 = v4;
        v7 = v6 + 1;
      }
      a2[1] = v7;
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v19);
}

void sub_206EF785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206EF7BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C000D70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C000D70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = **a2;
  v3 = **(_QWORD **)(a1 + 8);
  if (v2 == v3)
    **(_BYTE **)(a1 + 16) = 0;
  return v2 != v3;
}

uint64_t std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::target_type()
{
}

void ZinIrSymbol::VerifyChildSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Child space ranges can not be empty.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Child can't have more space ranges than its parent.", a5, a6, a7, a8, 0);
}

void ZinIrSymbol::VerifyChildSymbol()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Child symbol size   : %zu\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Child symbol begin offset : %zu\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Child symbol name   : %s\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Parent symbol size  : %zu\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Parent symbol begin offset: %zu\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Parent symbol name  : %s\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinIrFactoryJIT::ZinIrFactoryJIT(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, ZinIrCompilationStatus *a12)
{
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 88) = a6;
  *(_QWORD *)(a1 + 96) = a7;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a8;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = a9;
  *(_QWORD *)(a1 + 184) = a10;
  *(_QWORD *)(a1 + 192) = a11;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)a1 = &off_24C01A748;
  *(_QWORD *)(a1 + 8) = a2;
  ZinIrFactoryJIT::FillContext(a1, a3, a4, a12);
  return a1;
}

{
  return ZinIrFactoryJIT::ZinIrFactoryJIT(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_206EF80EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::~__hash_table(v2 + 296);
  v6 = *(void **)(v2 + 272);
  if (v6)
  {
    *(_QWORD *)(v2 + 280) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v2 + 248);
  if (v7)
  {
    *(_QWORD *)(v2 + 256) = v7;
    operator delete(v7);
  }
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 144) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v3, *(char **)(v2 + 112));
  ZinIrFactoryBase::~ZinIrFactoryBase((ZinIrBindings **)v2);
  _Unwind_Resume(a1);
}

void ZinIrFactoryJIT::FillContext(uint64_t a1, uint64_t a2, int a3, ZinIrCompilationStatus *a4)
{
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef *v9;
  const char *v10;
  CFStringRef v11;
  const __CFString *v12;
  CFTypeID v13;
  ZinIrBindings *v14;
  uint64_t Hal;
  const ZinIrHalParameters *v16;
  ZinIrLiveIOManager *v17;
  const __CFDictionary *v18;
  const __CFArray *Value;
  const __CFArray *v20;
  CFTypeID v21;
  unint64_t v22;
  NSObject *v23;
  const __CFString *ValueAtIndex;
  const __CFString *v25;
  CFTypeID v26;
  void **v27;
  void **v28;
  void **v29;
  int v30;
  void *__p[2];
  uint64_t v32;
  std::string v33[2];
  uint8_t buf[4];
  void **v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v7 + 52) = a3;
  std::string::operator=((std::string *)(v7 + 24), (const std::string *)a2);
  ZinIrCompilerParameters::setEnableDynamicShapes((ZinIrCompilerParameters *)(*(_QWORD *)(a1 + 8) + 176), 1);
  v8 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v8 + 84) = 2;
  *(_BYTE *)(v8 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "1.0.15");
  ZinIrVersion::ZinIrVersion(v33, __p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  ZinIrVersion::SetVersion((std::string *)(*(_QWORD *)(a1 + 8) + 944), v33);
  v9 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 80) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v10 = (const char *)a2;
  else
    v10 = *(const char **)a2;
  v11 = CFStringCreateWithCString(*v9, v10, 0x8000100u);
  v12 = v11;
  if (v11)
  {
    v13 = CFGetTypeID(v11);
    if (v13 != CFStringGetTypeID())
      v12 = 0;
  }
  *(_QWORD *)(a1 + 32) = ZinIrCompilationStatus::AddNetwork(a4, v12);
  CFRelease(v12);
  v14 = (ZinIrBindings *)operator new();
  ZinIrBindings::ZinIrBindings(v14);
  std::unique_ptr<ZinIrBindings>::reset[abi:ne180100]((ZinIrBindings **)(a1 + 24), v14);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 8) + 160));
  v16 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v17 = (ZinIrLiveIOManager *)operator new();
  ZinIrLiveIOManager::ZinIrLiveIOManager(v17, v16);
  std::unique_ptr<ZinIrLiveIOManager>::reset[abi:ne180100]((ZinIrLiveIOManager **)(a1 + 16), v17);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 992) + 16) != 1)
    ZinAssertImpl("ZinIrFactoryJIT does not support CFG with more than one basic block.");
  v30 = ZinIrFactoryJIT::AddOpLayers((ZinIrFactoryJIT *)a1);
  v18 = (const __CFDictionary *)ZinIrNetworkStatus::Status(*(ZinIrNetworkStatus **)(a1 + 32));
  if (v18)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("NetworkErrorList"));
    v20 = Value;
    if (Value)
    {
      v21 = CFGetTypeID(Value);
      if (v21 != CFArrayGetTypeID())
        v20 = 0;
    }
    if (CFArrayGetCount(v20) < 1)
      ZinAssertImpl("Missing JIT pass error details");
    v22 = 0;
    v23 = MEMORY[0x24BDACB70];
    while (v22 < CFArrayGetCount(v20))
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v20, v22);
      v25 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v26 = CFGetTypeID(ValueAtIndex);
        if (v26 != CFStringGetTypeID())
          v25 = 0;
      }
      __p[0] = 0;
      __p[1] = 0;
      v32 = 0;
      ZinGetString(v25, (uint64_t)__p);
      ZinIrUnitStatus::SetError((CFArrayRef *)a4, v25);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        if (v32 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v35 = v27;
        _os_log_impl(&dword_2069AB000, v23, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
      }
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
      ++v22;
    }
  }
  if (v30)
  {
    if ((ZinIrControlFlowGraph::Validate(*(ZinIrControlFlowGraph ***)(*(_QWORD *)(a1 + 8) + 992)) & 1) != 0)
      goto LABEL_42;
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to validate network");
    ZinIrUnitStatus::SetError((CFArrayRef *)a4, CFSTR("InvalidNetworkSyntax"));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v28 = __p;
      if (v32 < 0)
        v28 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v35 = v28;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    }
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Failed to add OpLayers");
  ZinIrUnitStatus::SetError((CFArrayRef *)a4, CFSTR("InvalidNetworkSyntax"));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v29 = __p;
    if (v32 < 0)
      v29 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v35 = v29;
    _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
LABEL_42:
  ZinIrVersion::~ZinIrVersion((void **)&v33[0].__r_.__value_.__l.__data_);
}

void sub_206EF85D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  if (a19 < 0)
    operator delete(__p);
  ZinIrVersion::~ZinIrVersion(&a20);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::AddOpLayers(ZinIrFactoryJIT *this)
{
  uint64_t *v2;
  std::string *v3;
  __int128 *v4;
  __int128 v5;
  char *v6;
  char **v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t **Hal;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  ZinDynamicOffsetCustomBarCmd **v103;
  uint64_t v104;
  unsigned __int8 *DynamicOffsetInfo;
  ZinDynamicOffsetCustomBarCmd **v106;
  _BOOL8 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[5];
  uint64_t v124;
  void *v125[2];
  char v126;
  _OWORD v127[2];
  int v128;
  __int128 *v129[4];
  int v130;
  _QWORD *v131;
  __int128 __p;
  __int128 v133;
  int v134;
  void **v135[3];
  char v136;
  uint64_t v137;
  std::string *v138;
  unint64_t v139;
  char **v140;
  char *v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;

  kdebug_trace();
  if (ZinIrFactoryJIT::ParseSymbolTables(this) && ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(this))
  {
    v143 = 0u;
    v144 = 0u;
    v142 = 0u;
    if ((ZinIrFactoryJIT::ParseUnits((uint64_t)this, &v142) & 1) != 0)
    {
      kdebug_trace();
      kdebug_trace();
      if ((ZinIrLiveIOManager::SetLiveIO(*((_QWORD *)this + 2), *((_QWORD *)this + 10), *((std::string ***)this + 11), *((CFArrayRef **)this + 4)) & 1) != 0)
      {
        v141[0] = 0;
        v141[1] = 0;
        v140 = v141;
        if (!ZinIrFactoryBase::CreateLiveIns((uint64_t)this, (uint64_t **)&v140))
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("InvalidInput"));
          v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v36)
            ZinIrFactoryJIT::AddOpLayers(v36, v37, v38, v39, v40, v41, v42, v43);
          v27 = 0;
          goto LABEL_61;
        }
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v2 = (uint64_t *)v140;
        if (v140 != v141)
        {
          v3 = 0;
          do
          {
            v4 = (__int128 *)(v2 + 4);
            if ((unint64_t)v3 >= v139)
            {
              v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v137, (uint64_t)v4);
            }
            else
            {
              if (*((char *)v2 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v2[4], v2[5]);
              }
              else
              {
                v5 = *v4;
                v3->__r_.__value_.__r.__words[2] = v2[6];
                *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
              }
              ++v3;
            }
            v138 = v3;
            v6 = (char *)v2[1];
            if (v6)
            {
              do
              {
                v7 = (char **)v6;
                v6 = *(char **)v6;
              }
              while (v6);
            }
            else
            {
              do
              {
                v7 = (char **)v2[2];
                v8 = *v7 == (char *)v2;
                v2 = (uint64_t *)v7;
              }
              while (!v8);
            }
            v2 = (uint64_t *)v7;
          }
          while (v7 != v141);
        }
        v9 = *(_QWORD **)(*((_QWORD *)this + 1) + 992);
        if (v9[2] != 1)
          ZinAssertImpl("ZinIrFactoryJIT does not support CFG with more than one basic block.");
        Hal = (uint64_t **)ZinIrTarget::GetHal(*(ZinIrTarget **)(*v9 + 32));
        ZinIrBasicBlock::GetName(&__p);
        ZinObjectNameFactory::ZinObjectNameFactory(v135, &__p);
        if (SBYTE7(v133) < 0)
          operator delete((void *)__p);
        if ((ZinIrFactoryBase::AddInputLayersIfNeeded((uint64_t)this, &v137, (uint64_t **)&v140, (uint64_t)v135, Hal) & 1) == 0)
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("InvalidUnit"));
          v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v44)
            ZinIrFactoryJIT::AddOpLayers(v44, v45, v46, v47, v48, v49, v50, v51);
          v27 = 0;
          goto LABEL_58;
        }
        __p = 0u;
        v133 = 0u;
        v134 = 1065353216;
        v11 = *((_QWORD *)this + 10);
        LODWORD(v129[0]) = 0;
        v12 = std::map<ZinIrDimension,unsigned long>::at(v11, (int *)v129);
        v13 = *v12;
        v14 = v12[1];
        if (*v12 != v14)
        {
          do
          {
            v129[0] = (__int128 *)v13;
            v15 = std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (unsigned __int8 *)v13, (uint64_t)&std::piecewise_construct, v129);
            v16 = *(_OWORD *)(v13 + 56);
            v17 = *(_OWORD *)(v13 + 72);
            *((_QWORD *)v15 + 9) = *(_QWORD *)(v13 + 88);
            *(_OWORD *)(v15 + 56) = v17;
            *(_OWORD *)(v15 + 40) = v16;
            v13 += 248;
          }
          while (v13 != v14);
        }
        if ((ZinIrFactoryBase::PrepareLiveOuts(this) & 1) == 0)
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("InvalidOutput"));
          v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v52)
            ZinIrFactoryJIT::AddOpLayers(v52, v53, v54, v55, v56, v57, v58, v59);
          v27 = 0;
          goto LABEL_57;
        }
        std::make_unique[abi:ne180100]<ZinMirUnitGraph>((uint64_t *)&v131);
        if (ZinIrFactoryJIT::CreateMirUnitGraph(v18, &v142, (uint64_t)v131))
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("InvalidUnit"));
          v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v19)
            ZinIrFactoryJIT::AddOpLayers(v19, v20, v21, v22, v23, v24, v25, v26);
          v27 = 0;
          goto LABEL_55;
        }
        kdebug_trace();
        kdebug_trace();
        memset(v129, 0, sizeof(v129));
        v130 = 1065353216;
        if (ZinSerial::DeserializeShapeTransformMap(*((_QWORD *)this + 23), *((_QWORD *)this + 24), (uint64_t)v129))
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("InvalidUnit"));
          v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v60)
          {
LABEL_53:
            v27 = 0;
LABEL_54:
            std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>>>::~__hash_table((uint64_t)v129);
LABEL_55:
            v76 = (uint64_t)v131;
            v131 = 0;
            if (v76)
              std::default_delete<ZinMirUnitGraph>::operator()[abi:ne180100]((uint64_t)&v131, v76);
LABEL_57:
            std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&__p);
LABEL_58:
            v135[0] = (void **)off_24C01FBB0;
            if (v136 < 0)
              operator delete(v135[1]);
            v135[0] = (void **)&v137;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v135);
LABEL_61:
            std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v140, v141[0]);
            goto LABEL_62;
          }
LABEL_46:
          ZinIrFactoryJIT::AddOpLayers(v60, v61, v62, v63, v64, v65, v66, v67);
          goto LABEL_53;
        }
        kdebug_trace();
        if (ZinIrFactoryJIT::PopulateDependencyMap((uint64_t)this, (uint64_t)v129, (uint64_t)&v131))
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("UnsupportedJITTransform"));
          v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v60)
            goto LABEL_53;
          goto LABEL_46;
        }
        if (ZinMirUnitGraph::AddDependencies((uint64_t)v131, (uint64_t)this + 296))
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("UnsupportedJITTransform"));
          v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v68)
            ZinIrFactoryJIT::AddOpLayers(v68, v69, v70, v71, v72, v73, v74, v75);
          goto LABEL_53;
        }
        kdebug_trace();
        memset(v127, 0, sizeof(v127));
        v128 = 1065353216;
        v78 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 1) + 160));
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
        v80 = ZinDynamicShapesPass::Run((uint64_t)v127, (uint64_t)&__p, (uint64_t)v129, v79, (uint64_t)v131);
        v81 = *((_QWORD *)this + 1);
        if ((*(_BYTE *)(v81 + 272) & 1) != 0)
        {
          v82 = v131;
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".mir_unit_graph.dot", (const void **)(v81 + 200), v125);
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v127);
          ZinMirUnitGraph::CreateDotFile(v82, (uint64_t)v125, v83);
          if (v126 < 0)
            operator delete(v125[0]);
        }
        if (v80)
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("UnsupportedJITTransform"));
          v84 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v84)
            ZinIrFactoryJIT::AddOpLayers(v84, v85, v86, v87, v88, v89, v90, v91);
LABEL_73:
          v27 = 0;
LABEL_74:
          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v127);
          goto LABEL_54;
        }
        kdebug_trace();
        if (ZinMirUnitGraph::RemoveDependencies((uint64_t)v131, (uint64_t)this + 296))
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("UnsupportedJITTransform"));
          v92 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v92)
            ZinIrFactoryJIT::AddOpLayers(v92, v93, v94, v95, v96, v97, v98, v99);
          goto LABEL_73;
        }
        kdebug_trace();
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v127);
        std::unordered_map<std::string,ZinTensorDimensions>::unordered_map((uint64_t)v125, v100);
        if ((ZinIrFactoryJIT::CalculateJITLiveOutStrides((uint64_t)this, v125) & 1) != 0)
        {
          v101 = (uint64_t)v131;
          *((_BYTE *)this + 336) = v131[2] != *((_QWORD *)&v144 + 1);
          v124 = v101;
          ZinIrFactoryJIT::AddOpLayers(void)::$_1::operator()((unsigned __int8 *)&v124, (uint64_t)v123);
          if ((_QWORD)v143 != *((_QWORD *)&v142 + 1))
          {
            v102 = (_QWORD *)(*((_QWORD *)&v142 + 1) + 8 * ((unint64_t)v144 >> 8));
            v103 = (ZinDynamicOffsetCustomBarCmd **)(*v102 + 16 * v144);
            v104 = *(_QWORD *)(*((_QWORD *)&v142 + 1)
                             + (((*((_QWORD *)&v144 + 1) + (_QWORD)v144) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (BYTE8(v144) + v144);
            while (1)
            {
              if (v103 == (ZinDynamicOffsetCustomBarCmd **)v104)
                goto LABEL_90;
              DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v103);
              if (ZinMirUnit::IsInput(*v103))
                break;
              if (std::__hash_table<std::__hash_value_type<std::string,long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long>>>::find<std::string>(v123, DynamicOffsetInfo))
              {
                if (!ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph((uint64_t)this, (unint64_t *)v103, (uint64_t *)&v131, v125))goto LABEL_97;
                goto LABEL_84;
              }
LABEL_85:
              v103 += 2;
              if ((ZinDynamicOffsetCustomBarCmd **)((char *)v103 - *v102) == (ZinDynamicOffsetCustomBarCmd **)4096)
              {
                v106 = (ZinDynamicOffsetCustomBarCmd **)v102[1];
                ++v102;
                v103 = v106;
              }
            }
            if ((ZinIrFactoryJIT::UpdateLiveInAndAddToOrderedList(this, v103) & 1) == 0)
              goto LABEL_97;
LABEL_84:
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(v123, DynamicOffsetInfo);
            goto LABEL_85;
          }
LABEL_90:
          if (v123[3])
            ZinAssertImpl("There are some units not used to generate layers");
          if (((*(uint64_t (**)(ZinIrFactoryJIT *))(*(_QWORD *)this + 16))(this) & 1) != 0)
          {
            if (*(_BYTE *)(*((_QWORD *)this + 1) + 296))
              Layer2TDMapper::LayerTracker::SetOption((uint64_t)(Hal + 19), 0);
            kdebug_trace();
            v27 = 1;
          }
          else
          {
            ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("InvalidOutput"));
            v115 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v115)
              ZinIrFactoryJIT::AddOpLayers(v115, v116, v117, v118, v119, v120, v121, v122);
LABEL_97:
            v27 = 0;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v123);
        }
        else
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), CFSTR("CompilationFailure"));
          v107 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v107)
            ZinIrFactoryJIT::AddOpLayers(v107, v108, v109, v110, v111, v112, v113, v114);
          v27 = 0;
        }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v125);
        goto LABEL_74;
      }
      v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v28)
        ZinIrFactoryJIT::AddOpLayers(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    v27 = 0;
LABEL_62:
    std::deque<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>::~deque[abi:ne180100](&v142);
    return v27;
  }
  return 0;
}

void sub_206EF8F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v43;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>>>::~__hash_table((uint64_t)&a30);
  v43 = a35;
  a35 = 0;
  if (v43)
    std::default_delete<ZinMirUnitGraph>::operator()[abi:ne180100]((uint64_t)&a35, v43);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a36);
  *(_QWORD *)(v41 - 200) = off_24C01FBB0;
  if (*(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  *(_QWORD *)(v41 - 200) = v41 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 200));
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v41 - 136, *(char **)(v41 - 128));
  std::deque<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>::~deque[abi:ne180100]((_QWORD *)(v41 - 112));
  _Unwind_Resume(a1);
}

BOOL ZinIrFactoryJIT::ParseSymbolTables(ZinIrFactoryJIT *this)
{
  int v2;
  _QWORD *PrivatePool;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  uint64_t v13;
  uint64_t j;
  __int128 v15;
  uint64_t v16;
  uint64_t k;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t Symbol;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  __int128 __p;
  uint64_t v41;
  _BYTE v42[317];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v2 = ZinSerial::DeserializeMirUnitSymbolTables((uint64_t *)this + 20, &v50, &v47, &v44);
  if (!v2)
  {
    PrivatePool = ZinIrMemoryPools::GetPrivatePool(*((_QWORD **)this + 16), 2, 0);
    ZinIrMemoryPool::GetSections((uint64_t)PrivatePool, 4, &v39);
    v5 = *(_QWORD *)(__p + 16);
    std::__list_imp<ZinIrSection *>::clear(&v39);
    v6 = ZinIrMemoryPools::GetPrivatePool(*((_QWORD **)this + 16), 0, 0);
    ZinIrMemoryPool::GetSections((uint64_t)v6, 4, &v39);
    v7 = *(_QWORD *)(__p + 16);
    std::__list_imp<ZinIrSection *>::clear(&v39);
    v8 = ZinIrMemoryPools::GetPrivatePool(*((_QWORD **)this + 16), 0, 0);
    ZinIrMemoryPool::GetSections((uint64_t)v8, 0, &v39);
    v9 = *(_QWORD *)(__p + 16);
    std::__list_imp<ZinIrSection *>::clear(&v39);
    v10 = v50;
    for (i = v51; v10 != i; v10 += 352)
    {
      v39 = *(void ***)v10;
      v12 = *(_OWORD *)(v10 + 8);
      v41 = *(_QWORD *)(v10 + 24);
      __p = v12;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      memcpy(v42, (const void *)(v10 + 32), sizeof(v42));
      v43 = v5;
      std::vector<SymbolInfoAndSection>::push_back[abi:ne180100]((uint64_t *)this + 25, (uint64_t)&v39);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)__p);
    }
    v13 = v47;
    for (j = v48; v13 != j; v13 += 352)
    {
      v39 = *(void ***)v13;
      v15 = *(_OWORD *)(v13 + 8);
      v41 = *(_QWORD *)(v13 + 24);
      __p = v15;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 8) = 0;
      memcpy(v42, (const void *)(v13 + 32), sizeof(v42));
      v43 = v7;
      std::vector<SymbolInfoAndSection>::push_back[abi:ne180100]((uint64_t *)this + 28, (uint64_t)&v39);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)__p);
    }
    v16 = v44;
    for (k = v45; v16 != k; v16 += 352)
    {
      v39 = *(void ***)v16;
      v18 = *(_OWORD *)(v16 + 8);
      v41 = *(_QWORD *)(v16 + 24);
      __p = v18;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 8) = 0;
      memcpy(v42, (const void *)(v16 + 32), sizeof(v42));
      v43 = v9;
      std::vector<SymbolInfoAndSection>::push_back[abi:ne180100]((uint64_t *)this + 28, (uint64_t)&v39);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)__p);
    }
    v19 = *((_QWORD *)this + 25);
    v20 = *((_QWORD *)this + 26);
    while (v19 != v20)
    {
      if (*(_DWORD *)v19 > 2u)
        goto LABEL_2;
      if (!ZinMirCreateSymbol(v19, *(_QWORD *)(v19 + 352), (_QWORD *)this + 25))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
LABEL_45:
          ZinIrFactoryJIT::ParseSymbolTables(v19, v37, v38);
        goto LABEL_2;
      }
      v19 += 360;
    }
    v19 = *((_QWORD *)this + 28);
    v21 = *((_QWORD *)this + 29);
    if (v19 != v21)
    {
      v22 = (char **)((char *)this + 248);
      while (*(_DWORD *)v19 <= 2u)
      {
        Symbol = ZinMirCreateSymbol(v19, *(_QWORD *)(v19 + 352), (_QWORD *)this + 28);
        v24 = Symbol;
        if (!Symbol)
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            break;
          goto LABEL_45;
        }
        if (!*(_DWORD *)(*(_QWORD *)(v19 + 352) + 8))
        {
          v26 = (uint64_t *)*((_QWORD *)this + 32);
          v25 = *((_QWORD *)this + 33);
          if ((unint64_t)v26 >= v25)
          {
            v28 = ((char *)v26 - *v22) >> 3;
            if ((unint64_t)(v28 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v29 = v25 - (_QWORD)*v22;
            v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1))
              v30 = v28 + 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 264, v31);
            else
              v32 = 0;
            v33 = (uint64_t *)&v32[8 * v28];
            *v33 = v24;
            v27 = v33 + 1;
            v35 = (char *)*((_QWORD *)this + 31);
            v34 = (char *)*((_QWORD *)this + 32);
            if (v34 != v35)
            {
              do
              {
                v36 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *--v33 = v36;
              }
              while (v34 != v35);
              v34 = *v22;
            }
            *((_QWORD *)this + 31) = v33;
            *((_QWORD *)this + 32) = v27;
            *((_QWORD *)this + 33) = &v32[8 * v31];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v26 = Symbol;
            v27 = v26 + 1;
          }
          *((_QWORD *)this + 32) = v27;
        }
        v19 += 360;
        if (v19 == v21)
          break;
      }
    }
  }
LABEL_2:
  v39 = (void **)&v44;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v39);
  v39 = (void **)&v47;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v39);
  v39 = (void **)&v50;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v39);
  return v2 == 0;
}

void sub_206EF947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  a10 = v16 - 160;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v16 - 136;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v16 - 112;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolInfoAndSection>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v11 + 1) > 0xB60B60B60B60B6)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v12 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v5 - *a1) >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x5B05B05B05B05BLL)
      v14 = 0xB60B60B60B60B6;
    else
      v14 = v13;
    v19[4] = v4;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolInfoAndSection>>(v4, v14);
    v16 = &v15[360 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[360 * v17];
    *(_QWORD *)v16 = *(_QWORD *)a2;
    v18 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v16 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v16 + 8) = v18;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    memcpy(v16 + 32, (const void *)(a2 + 32), 0x13DuLL);
    *((_QWORD *)v16 + 44) = *(_QWORD *)(a2 + 352);
    v19[2] = v16 + 360;
    std::vector<SymbolInfoAndSection>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    result = std::__split_buffer<SymbolInfoAndSection>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    result = (uint64_t)memcpy((void *)(v7 + 32), (const void *)(a2 + 32), 0x13DuLL);
    *(_QWORD *)(v7 + 352) = *(_QWORD *)(a2 + 352);
    v10 = v7 + 360;
    a1[1] = v7 + 360;
  }
  a1[1] = v10;
  return result;
}

void sub_206EF9660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SymbolInfoAndSection>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(ZinIrFactoryJIT *this)
{
  uint64_t v2;
  ZinIrControlFlowGraph *v4;
  uint64_t v5;
  char **v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  ZinIrBasicBlock *Basic;
  unint64_t v32;
  ZinIrBasicBlock **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  ZinIrBasicBlock **v40;
  char *v41;
  char *v42;
  ZinIrBasicBlock *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;

  v68 = 0;
  v69 = 0;
  v70 = 0;
  if (!ZinSerial::DeserializeMirUnitBasicBlocks((char *)this + 160, &v68))
  {
    if (v69 == v68)
    {
      v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v10)
        ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      v4 = *(ZinIrControlFlowGraph **)(*((_QWORD *)this + 1) + 992);
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 32);
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v68 + 8);
      v6 = (char **)((char *)this + 272);
      v8 = (_QWORD *)*((_QWORD *)this + 35);
      v7 = *((_QWORD *)this + 36);
      if ((unint64_t)v8 >= v7)
      {
        v18 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v19 = v7 - (_QWORD)*v6;
        v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 288, v21);
        else
          v22 = 0;
        v23 = &v22[8 * v18];
        v24 = &v22[8 * v21];
        *(_QWORD *)v23 = v5;
        v9 = v23 + 8;
        v26 = (char *)*((_QWORD *)this + 34);
        v25 = (char *)*((_QWORD *)this + 35);
        if (v25 != v26)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v23 - 1) = v27;
            v23 -= 8;
          }
          while (v25 != v26);
          v25 = *v6;
        }
        *((_QWORD *)this + 34) = v23;
        *((_QWORD *)this + 35) = v9;
        *((_QWORD *)this + 36) = v24;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v8 = v5;
        v9 = v8 + 1;
      }
      *((_QWORD *)this + 35) = v9;
      v29 = v68;
      v28 = v69;
      if (0xCCCCCCCCCCCCCCCDLL * ((v69 - v68) >> 3) < 2)
      {
LABEL_43:
        if (v28 == v29)
        {
          v2 = 1;
          goto LABEL_3;
        }
        v44 = 0;
        while (1)
        {
          v45 = v29 + 40 * v44;
          v46 = *(_QWORD *)(v45 + 16);
          v47 = *(_QWORD *)(v45 + 24);
          if (v46 != v47)
            break;
LABEL_51:
          ++v44;
          v2 = 1;
          if (0xCCCCCCCCCCCCCCCDLL * ((v28 - v29) >> 3) <= v44)
            goto LABEL_3;
        }
        v48 = *(uint64_t **)&(*v6)[8 * v44];
        while (1)
        {
          v49 = *(_QWORD *)(v46 + 8);
          v50 = *((_QWORD *)this + 34);
          if (v49 >= (*((_QWORD *)this + 35) - v50) >> 3)
            break;
          v51 = *(uint64_t **)(v50 + 8 * v49);
          if ((ZinIrControlFlowGraph::AddEdge((uint64_t)v4, v51, v48, *(_DWORD *)v46) & 1) == 0)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v51, v48);
            goto LABEL_2;
          }
          v46 += 16;
          if (v46 == v47)
          {
            v29 = v68;
            v28 = v69;
            goto LABEL_51;
          }
        }
        v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v60)
          ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        v30 = 1;
        while (1)
        {
          Basic = (ZinIrBasicBlock *)ZinIrControlFlowGraph::CreateBasicBlock<>((uint64_t)v4);
          *((_QWORD *)Basic + 1) = *(_QWORD *)(v68 + 40 * v30 + 8);
          if (!ZinIrControlFlowGraph::AddNode(v4, Basic))
            break;
          v33 = (ZinIrBasicBlock **)*((_QWORD *)this + 35);
          v32 = *((_QWORD *)this + 36);
          if ((unint64_t)v33 >= v32)
          {
            v35 = ((char *)v33 - *v6) >> 3;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v36 = v32 - (_QWORD)*v6;
            v37 = v36 >> 2;
            if (v36 >> 2 <= (unint64_t)(v35 + 1))
              v37 = v35 + 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 288, v38);
            else
              v39 = 0;
            v40 = (ZinIrBasicBlock **)&v39[8 * v35];
            *v40 = Basic;
            v34 = v40 + 1;
            v42 = (char *)*((_QWORD *)this + 34);
            v41 = (char *)*((_QWORD *)this + 35);
            if (v41 != v42)
            {
              do
              {
                v43 = (ZinIrBasicBlock *)*((_QWORD *)v41 - 1);
                v41 -= 8;
                *--v40 = v43;
              }
              while (v41 != v42);
              v41 = *v6;
            }
            *((_QWORD *)this + 34) = v40;
            *((_QWORD *)this + 35) = v34;
            *((_QWORD *)this + 36) = &v39[8 * v38];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *v33 = Basic;
            v34 = v33 + 1;
          }
          *((_QWORD *)this + 35) = v34;
          ++v30;
          v29 = v68;
          v28 = v69;
          if (0xCCCCCCCCCCCCCCCDLL * ((v69 - v68) >> 3) <= v30)
            goto LABEL_43;
        }
        v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v52)
          ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v52, v53, v54, v55, v56, v57, v58, v59);
      }
    }
  }
LABEL_2:
  v2 = 0;
LABEL_3:
  v71 = (void **)&v68;
  std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100](&v71);
  return v2;
}

void sub_206EF99F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::ParseUnits(uint64_t a1, _QWORD *a2)
{
  uint64_t Hal;
  const ZinIrHalParameters *v5;
  int v6;
  void **v7;
  uint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v22;
  unsigned int v23;
  _OWORD v24[2];
  int v25;
  _OWORD v26[2];
  int v27;
  _OWORD v28[2];
  int v29;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 8) + 160));
  v5 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  memset(v26, 0, sizeof(v26));
  v27 = 1065353216;
  memset(v28, 0, sizeof(v28));
  v29 = 1065353216;
  v23 = 0;
  ZinSerial::DeserializeNumberOfOrderedLayers((uint64_t *)(a1 + 160), &v23);
  if (!v23)
  {
LABEL_8:
    v8 = 1;
    goto LABEL_26;
  }
  v6 = 0;
  while (1)
  {
    v22 = 0;
    if (ZinCreateMirUnit(v5, (unint64_t *)(a1 + 160), &v22, *(ZinIrNetworkStatus **)(a1 + 32))
      || ((*((uint64_t (**)(void **, _OWORD *))*v22 + 4))(v22, v24) & 1) == 0)
    {
      break;
    }
    std::deque<std::shared_ptr<ZinMirUnit>>::emplace_back<std::unique_ptr<ZinMirUnit>>(a2, (uint64_t *)&v22);
    v7 = v22;
    v22 = 0;
    if (v7)
      (*((void (**)(void **))*v7 + 1))(v7);
    if (++v6 >= v23)
      goto LABEL_8;
  }
  v9 = (void **)a2[1];
  v10 = (void **)a2[2];
  if (v10 == v9)
  {
    v11 = a2 + 5;
    v10 = (void **)a2[1];
  }
  else
  {
    v11 = a2 + 5;
    v12 = a2[4];
    v13 = &v9[v12 >> 8];
    v14 = (uint64_t)*v13 + 16 * v12;
    v15 = *(uint64_t *)((char *)v9 + (((a2[5] + v12) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)a2 + 40) + v12);
    if (v14 != v15)
    {
      do
      {
        v14 = std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v14) + 16;
        if (v14 - (_QWORD)*v13 == 4096)
        {
          v16 = (uint64_t)v13[1];
          ++v13;
          v14 = v16;
        }
      }
      while (v14 != v15);
      v9 = (void **)a2[1];
      v10 = (void **)a2[2];
    }
  }
  *v11 = 0;
  v17 = (char *)v10 - (char *)v9;
  if (v17 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v18 = a2[2];
      v9 = (void **)(a2[1] + 8);
      a2[1] = v9;
      v17 = v18 - (_QWORD)v9;
    }
    while (v17 > 0x10);
  }
  if (v17 >> 3 == 1)
  {
    v19 = 128;
    goto LABEL_22;
  }
  if (v17 >> 3 == 2)
  {
    v19 = 256;
LABEL_22:
    a2[4] = v19;
  }
  v20 = v22;
  v22 = 0;
  if (v20)
    (*((void (**)(void **))*v20 + 1))(v20);
  v8 = 0;
LABEL_26:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v24);
  return v8;
}

void sub_206EF9C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ZinMirUnitValidationContext::~ZinMirUnitValidationContext((ZinMirUnitValidationContext *)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<ZinMirUnit>>::emplace_back<std::unique_ptr<ZinMirUnit>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 32 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::shared_ptr<ZinMirUnit>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (uint64_t *)(*(_QWORD *)(v4 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7);
  }
  std::shared_ptr<ZinMirUnit>::shared_ptr[abi:ne180100]<ZinMirUnit,std::default_delete<ZinMirUnit>,void>(v8, a2);
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 >> 8));
  v14 = *v13 + 16 * v11;
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4096;
  return v14 - 16;
}

void ZinMirUnitValidationContext::~ZinMirUnitValidationContext(ZinMirUnitValidationContext *this)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)this);
}

uint64_t ZinIrFactoryJIT::UpdateLiveInAndAddToOrderedList(_QWORD *a1, ZinDynamicOffsetCustomBarCmd **a2)
{
  _QWORD *v4;
  unsigned __int8 *DynamicOffsetInfo;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD **v31;
  _QWORD *v32[2];

  ZinIrControlFlowGraph::GetLiveInLayers(*(ZinIrControlFlowGraph ***)(a1[1] + 992), (uint64_t)&v31);
  v4 = v31;
  if (v31 == v32)
  {
LABEL_23:
    v15 = 0;
    goto LABEL_41;
  }
  while (1)
  {
    DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a2);
    v6 = v4[4];
    v7 = DynamicOffsetInfo[23];
    if ((v7 & 0x80u) == 0)
      v8 = DynamicOffsetInfo[23];
    else
      v8 = *((_QWORD *)DynamicOffsetInfo + 1);
    v9 = *(unsigned __int8 *)(v6 + 47);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(v6 + 32);
    if (v8 != v9)
      goto LABEL_17;
    v11 = v10 >= 0 ? (unsigned __int8 *)(v6 + 24) : *(unsigned __int8 **)(v6 + 24);
    if ((v7 & 0x80) != 0)
      break;
    if (!DynamicOffsetInfo[23])
      goto LABEL_24;
    while (*DynamicOffsetInfo == *v11)
    {
      ++DynamicOffsetInfo;
      ++v11;
      if (!--v7)
        goto LABEL_24;
    }
LABEL_17:
    v12 = (_QWORD *)v4[1];
    if (v12)
    {
      do
      {
        v13 = (_QWORD **)v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (_QWORD **)v4[2];
        v14 = *v13 == v4;
        v4 = v13;
      }
      while (!v14);
    }
    v4 = v13;
    if (v13 == v32)
      goto LABEL_23;
  }
  if (memcmp(*(const void **)DynamicOffsetInfo, v11, *((_QWORD *)DynamicOffsetInfo + 1)))
    goto LABEL_17;
LABEL_24:
  *(_QWORD *)(v6 + 48) = *((_QWORD *)*a2 + 9);
  v16 = a1[19];
  v17 = (_QWORD *)a1[18];
  if ((unint64_t)v17 >= v16)
  {
    v19 = a1[17];
    v20 = ((uint64_t)v17 - v19) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v21 = v16 - v19;
    v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1))
      v22 = v20 + 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 19), v23);
      v6 = v4[4];
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * v20];
    v26 = &v24[8 * v23];
    *(_QWORD *)v25 = v6;
    v18 = v25 + 8;
    v28 = (char *)a1[17];
    v27 = (char *)a1[18];
    if (v27 != v28)
    {
      do
      {
        v29 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v25 - 1) = v29;
        v25 -= 8;
      }
      while (v27 != v28);
      v27 = (char *)a1[17];
    }
    a1[17] = v25;
    a1[18] = v18;
    a1[19] = v26;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v17 = v6;
    v18 = v17 + 1;
  }
  a1[18] = v18;
  v15 = 1;
LABEL_41:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32[0]);
  return v15;
}

void sub_206EF9F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph(uint64_t a1, unint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  ZinDynamicOffsetCustomBarCmd ***v11;
  ZinDynamicOffsetCustomBarCmd ***v12;
  uint64_t DynamicOffsetInfo;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  int v17;
  uint64_t v18;
  void **v20;
  std::string *v21;
  unint64_t v22;
  void ***v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = (void ***)a2;
  v8 = *a3;
  v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(*a3 + 64), (unint64_t **)&v23);
  v10 = (uint64_t **)(v8 + 104);
  if (v9)
    v10 = v9 + 3;
  v11 = (ZinDynamicOffsetCustomBarCmd ***)*v10;
  v12 = (ZinDynamicOffsetCustomBarCmd ***)v10[1];
  while (v11 != v12)
  {
    DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(**v11);
    v14 = v21;
    if ((unint64_t)v21 >= v22)
    {
      v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v20, DynamicOffsetInfo);
    }
    else
    {
      if (*(char *)(DynamicOffsetInfo + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)DynamicOffsetInfo, *(_QWORD *)(DynamicOffsetInfo + 8));
      }
      else
      {
        v15 = *(_OWORD *)DynamicOffsetInfo;
        v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(DynamicOffsetInfo + 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      v16 = v14 + 1;
    }
    v21 = v16;
    ++v11;
  }
  memset(v24, 0, 24);
  v17 = ZinIrFactoryBase::InputReady(a1, &v20, (uint64_t)v24);
  v23 = (void ***)v24;
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (!v17)
  {
    ZinIrNetworkStatus::SetError(*(CFArrayRef **)(a1 + 32), CFSTR("InvalidAOTSerializationData"));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)*a2);
      ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph();
    }
    goto LABEL_19;
  }
  if ((ZinIrFactoryJIT::AddInputReadyOpLayer(a1, (ZinDynamicOffsetCustomBarCmd **)a2, *a3, a4) & 1) == 0)
  {
    ZinIrNetworkStatus::SetError(*(CFArrayRef **)(a1 + 32), CFSTR("InvalidUnit"));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)*a2);
      ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph();
    }
LABEL_19:
    v18 = 0;
    goto LABEL_20;
  }
  v18 = 1;
LABEL_20:
  v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v18;
}

void sub_206EFA158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::AddInputReadyOpLayer(uint64_t a1, ZinDynamicOffsetCustomBarCmd **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v10;
  const char *v11;
  CFStringRef v12;
  const __CFString *v13;
  CFTypeID v14;
  const __CFString *v15;
  CFMutableDictionaryRef *v16;
  uint64_t **v17;
  uint64_t **v18;
  ZinDynamicOffsetCustomBarCmd ***v19;
  ZinDynamicOffsetCustomBarCmd ***v20;
  NSObject *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  ZinDynamicOffsetCustomBarCmd **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *Dimensions;
  __int128 v44;
  __int128 v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned __int8 *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  size_t v55;
  __int128 *p_p;
  const void *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  int v82;
  char v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_count v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  std::__shared_count v107;
  __int128 v108;
  char *v109;
  __int128 v110;
  std::__shared_count v111;
  char *v112;
  unint64_t *v113;
  unint64_t v114;
  ZinIrOpLayer *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t *v120;
  _QWORD *v121;
  _BOOL8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t DynamicOffsetInfo;
  const char *v149;
  uint64_t Hal;
  _QWORD *v151;
  ZinDynamicOffsetCustomBarCmd **v152;
  __int128 __p;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  _QWORD *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint8_t v174;
  char v175[7];
  char *v176;
  char *v177;
  char *v178;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 992) + 16) != 1)
    ZinAssertImpl("ZinIrFactoryJIT does not support CFG with more than one basic block.");
  v6 = *((_QWORD *)*a2 + 16);
  v7 = *(_QWORD *)(a1 + 272);
  if (v6 >= (*(_QWORD *)(a1 + 280) - v7) >> 3)
  {
    DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a2);
    if (*(char *)(DynamicOffsetInfo + 23) >= 0)
      v149 = (const char *)DynamicOffsetInfo;
    else
      v149 = *(const char **)DynamicOffsetInfo;
    ZinAssertImpl("Error: Basic block ID, %lu, for unit, %s, is out of bounds.", v6, v149);
  }
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v7 + 8 * v6));
  v10 = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a2);
  if (*(char *)(v10 + 23) >= 0)
    v11 = (const char *)v10;
  else
    v11 = *(const char **)v10;
  v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v11, 0x8000100u);
  if (v12)
  {
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (v14 == CFStringGetTypeID())
      v15 = v13;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  v16 = ZinIrNetworkStatus::AddUnit(*(ZinIrNetworkStatus **)(a1 + 32), v15);
  CFRelease(v15);
  v176 = 0;
  v177 = 0;
  v178 = 0;
  *(_QWORD *)&v171 = a2;
  v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a3 + 64), (unint64_t **)&v171);
  v151 = a4;
  v152 = a2;
  v18 = (uint64_t **)(a3 + 104);
  if (v17)
    v18 = v17 + 3;
  v20 = (ZinDynamicOffsetCustomBarCmd ***)*v18;
  v19 = (ZinDynamicOffsetCustomBarCmd ***)v18[1];
  if (*v18 == (uint64_t *)v19)
  {
LABEL_45:
    v40 = v152;
    v41 = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v152);
    if (!ZinOutputShapes::Contains(v151, v41))
    {
      v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v73)
        ZinIrFactoryJIT::AddInputReadyOpLayer(v73, v74, v75, v76, v77, v78, v79, v80);
      v24 = 0;
      goto LABEL_168;
    }
    v42 = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v152);
    Dimensions = ZinOutputShapes::GetDimensions(v151, v42);
    v44 = *(_OWORD *)Dimensions;
    v45 = *((_OWORD *)Dimensions + 1);
    v173 = *((_QWORD *)Dimensions + 4);
    v171 = v44;
    v172 = v45;
    v170 = 0uLL;
    v46 = (uint64_t **)Hal;
    if (ZinMirUnit::IsOutput(*v152))
    {
      v47 = *(_QWORD *)v176;
      v48 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v176 + 40))(*(_QWORD *)v176, 0, 0);
      v50 = *(unsigned __int8 **)v48;
      v49 = *(unint64_t **)(v48 + 8);
      v156 = *(void **)v48;
      v157 = (std::__shared_weak_count *)v49;
      if (v49)
      {
        v51 = v49 + 1;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = *(_QWORD *)(a1 + 8);
      v54 = *((_DWORD *)v50 + 22);
      if ((v50[47] & 0x80u) == 0)
        v55 = v50[47];
      else
        v55 = *((_QWORD *)v50 + 4);
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v55 + 4);
      if (v154 >= 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if (v55)
      {
        if ((v50[47] & 0x80u) == 0)
          v57 = v50 + 24;
        else
          v57 = (const void *)*((_QWORD *)v50 + 3);
        memmove(p_p, v57, v55);
      }
      strcpy((char *)p_p + v55, "/src");
      v166 = 0;
      v167 = 0;
      v165 = 0;
      LODWORD(v161) = 0;
      v162 = 0;
      v163 = 0;
      *((_QWORD *)&v161 + 1) = 0;
      LODWORD(v164) = 0;
      ZinIrTensor::CreateTensor(v53, v54, (__int128 *)v50 + 3, &__p, &v167, &v165, (unsigned int *)&v161, &v168);
      v58 = v166;
      v46 = (uint64_t **)Hal;
      v40 = v152;
      if (v166)
      {
        p_shared_owners = (unint64_t *)&v166->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v167;
      v167 = 0;
      if (v61)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v167, v61);
      if (SHIBYTE(v154) < 0)
        operator delete((void *)__p);
      v159 = v168;
      v160 = v169;
      if (v169)
      {
        v62 = (unint64_t *)&v169->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v47 + 24))(v47, &v159);
      v64 = v160;
      if (v160)
      {
        v65 = (unint64_t *)&v160->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](&v170, (uint64_t *)&v156);
      v67 = v169;
      if (v169)
      {
        v68 = (unint64_t *)&v169->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v157;
      if (!v157)
        goto LABEL_105;
      v71 = (unint64_t *)&v157->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
    }
    else
    {
      v81 = (void **)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v152);
      v82 = ZinMirUnit::Format(*v152);
      v83 = (*(uint64_t (**)(ZinDynamicOffsetCustomBarCmd *))(*(_QWORD *)*v152 + 40))(*v152);
      __p = 0uLL;
      ZinIrFactoryBase::AddTensorToMap(a1, v81, &v171, v82, v83, (uint64_t *)&__p, &v161);
      v84 = v161;
      v161 = 0uLL;
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      v170 = v84;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
      if (*((_QWORD *)&v161 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      v70 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_105;
      v91 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v72 = __ldaxr(v91);
      while (__stlxr(v72 - 1, v91));
    }
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
LABEL_105:
    v92 = v170;
    if ((_QWORD)v170)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v93 = v176;
      v94 = v177;
      if (v176 != v177)
      {
        do
        {
          v95 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v93 + 32))(*(_QWORD *)v93, 0, 0);
          v96 = v95 + 48;
          v97 = v157;
          if (v157 >= v158)
          {
            v101 = (std::__shared_weak_count *)v156;
            v102 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v157 - (_BYTE *)v156) >> 3);
            v103 = v102 + 1;
            if (v102 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * (((char *)v158 - (_BYTE *)v156) >> 3) > v103)
              v103 = 0x999999999999999ALL * (((char *)v158 - (_BYTE *)v156) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * (((char *)v158 - (_BYTE *)v156) >> 3) >= 0x333333333333333)
              v104 = 0x666666666666666;
            else
              v104 = v103;
            if (v104)
            {
              v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v158, v104);
              v101 = (std::__shared_weak_count *)v156;
              v97 = v157;
            }
            else
            {
              v105 = 0;
            }
            v106 = &v105[40 * v102];
            v107 = *(std::__shared_count *)v96;
            v108 = *(_OWORD *)(v96 + 16);
            *((_QWORD *)v106 + 4) = *(_QWORD *)(v96 + 32);
            *(std::__shared_count *)v106 = v107;
            *((_OWORD *)v106 + 1) = v108;
            if (v97 == v101)
            {
              v112 = &v105[40 * v102];
            }
            else
            {
              v109 = &v105[40 * v102];
              do
              {
                v110 = *(_OWORD *)&v97[-2].__shared_owners_;
                v111 = v97[-1].std::__shared_count;
                v112 = v109 - 40;
                *((_QWORD *)v109 - 1) = v97[-1].__shared_weak_owners_;
                *(std::__shared_count *)(v109 - 24) = v111;
                *(_OWORD *)(v109 - 40) = v110;
                v97 = (std::__shared_weak_count *)((char *)v97 - 40);
                v109 -= 40;
              }
              while (v97 != v101);
            }
            v100 = (std::__shared_weak_count *)(v106 + 40);
            v156 = v112;
            v157 = (std::__shared_weak_count *)(v106 + 40);
            v158 = (std::__shared_weak_count *)&v105[40 * v104];
            if (v101)
              operator delete(v101);
          }
          else
          {
            v98 = *(std::__shared_count *)v96;
            v99 = *(_OWORD *)(v95 + 64);
            v157[1].__shared_owners_ = *(_QWORD *)(v95 + 80);
            v97->std::__shared_count = v98;
            *(_OWORD *)&v97->__shared_weak_owners_ = v99;
            v100 = (std::__shared_weak_count *)((char *)v97 + 40);
          }
          v157 = v100;
          v93 += 8;
        }
        while (v93 != v94);
        v92 = v170;
        v46 = (uint64_t **)Hal;
        v40 = v152;
      }
      *(_QWORD *)&v161 = &v156;
      *((_QWORD *)&v161 + 1) = v92;
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      if (*((_QWORD *)&v170 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      v163 = a1 + 200;
      v164 = a1 + 224;
      v115 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinDynamicOffsetCustomBarCmd *, __int128 *))(*(_QWORD *)*v40 + 24))(*v40, &v161);
      v116 = (uint64_t)v115;
      v24 = v115 != 0;
      if (v115)
      {
        *((_QWORD *)v115 + 6) = *((_QWORD *)*v40 + 9);
        v154 = 0;
        v155 = 0;
        *(_QWORD *)&__p = &unk_24C02BB30;
        *((_QWORD *)&__p + 1) = 0;
        ZinIrOpLayerGraph::AddNode(v46, v115, (ZinIrOpLayer ***)&__p);
        *(_QWORD *)&__p = &unk_24C02BB18;
        if (*((_QWORD *)&__p + 1))
        {
          v154 = *((_QWORD *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
        v117 = (uint64_t *)v176;
        v118 = (uint64_t *)v177;
        while (v117 != v118)
          ZinIrOpLayerGraph::AddEdge((uint64_t)v46, *v117++, v116, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v119 = *(_QWORD *)(a1 + 152);
        v120 = *(uint64_t **)(a1 + 144);
        if ((unint64_t)v120 >= v119)
        {
          v130 = *(_QWORD *)(a1 + 136);
          v131 = ((uint64_t)v120 - v130) >> 3;
          if ((unint64_t)(v131 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v132 = v119 - v130;
          v133 = v132 >> 2;
          if (v132 >> 2 <= (unint64_t)(v131 + 1))
            v133 = v131 + 1;
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
            v134 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v134 = v133;
          if (v134)
            v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 152, v134);
          else
            v135 = 0;
          v136 = (uint64_t *)&v135[8 * v131];
          v137 = &v135[8 * v134];
          *v136 = v116;
          v121 = v136 + 1;
          v139 = *(char **)(a1 + 136);
          v138 = *(char **)(a1 + 144);
          if (v138 != v139)
          {
            do
            {
              v140 = *((_QWORD *)v138 - 1);
              v138 -= 8;
              *--v136 = v140;
            }
            while (v138 != v139);
            v138 = *(char **)(a1 + 136);
          }
          *(_QWORD *)(a1 + 136) = v136;
          *(_QWORD *)(a1 + 144) = v121;
          *(_QWORD *)(a1 + 152) = v137;
          if (v138)
            operator delete(v138);
        }
        else
        {
          *v120 = v116;
          v121 = v120 + 1;
        }
        *(_QWORD *)(a1 + 144) = v121;
      }
      v141 = v162;
      if (v162)
      {
        v142 = (unint64_t *)&v162->__shared_owners_;
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      if (v156)
      {
        v157 = (std::__shared_weak_count *)v156;
        operator delete(v156);
      }
    }
    else
    {
      v122 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v122)
        ZinIrFactoryJIT::AddInputReadyOpLayer(v122, v123, v124, v125, v126, v127, v128, v129);
      v24 = 0;
    }
    v144 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
    if (*((_QWORD *)&v170 + 1))
    {
      v145 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    goto LABEL_168;
  }
  v21 = MEMORY[0x24BDACB70];
  while (1)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    v23 = (void **)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(**v20);
    ZinTensorMap::GetTensor(v22, v23, (uint64_t)&v171);
    v24 = v172;
    if ((_BYTE)v172)
    {
      v25 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)&v171 + 1));
      *(_QWORD *)&v161 = v171;
      *((_QWORD *)&v161 + 1) = v25;
      v26 = *(_QWORD *)(v171 + 96);
      v27 = v177;
      if (v177 >= v178)
      {
        v30 = (v177 - v176) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v31 = (v178 - v176) >> 2;
        if (v31 <= v30 + 1)
          v31 = v30 + 1;
        if ((unint64_t)(v178 - v176) >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v178, v32);
        else
          v33 = 0;
        v34 = &v33[8 * v30];
        *(_QWORD *)v34 = v26;
        v28 = v34 + 8;
        v36 = v176;
        v35 = v177;
        if (v177 != v176)
        {
          do
          {
            v37 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *((_QWORD *)v34 - 1) = v37;
            v34 -= 8;
          }
          while (v35 != v36);
          v35 = v176;
        }
        v176 = v34;
        v177 = v28;
        v178 = &v33[8 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v177 = v26;
        v28 = v27 + 8;
      }
      v177 = v28;
      if (*((_QWORD *)&v161 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v161 + 1) + 16))(*((_QWORD *)&v161 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
        }
      }
    }
    else
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        ZinIrFactoryJIT::AddInputReadyOpLayer(&v174, v175, v29);
      ZinIrUnitStatus::SetError(v16, CFSTR("InvalidBottomName"));
    }
    if ((_BYTE)v172 && *((_QWORD *)&v171 + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v171 + 1));
    if (!(_DWORD)v24)
      break;
    if (++v20 == v19)
      goto LABEL_45;
  }
LABEL_168:
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  return v24;
}

void sub_206EFAC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 192);
  v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(_QWORD *)(v33 - 112) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::CalculateJITLiveOutStrides(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t Hal;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *Dimensions;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t v37;
  char v38[7];
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  int v42;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = v3 + 8;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < 1;
    if (v7 >= 1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 + 8 || *(int *)(v6 + 32) > 1)
    return 0;
  v10 = 1;
  v33.i32[0] = 1;
  v11 = std::map<ZinIrDimension,unsigned long>::at(v3, v33.i32);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 8) + 160));
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v13 = *v11;
  v14 = v11[1];
  if (*v11 != v14)
  {
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 96);
      if ((void **)(v15 + 8) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v15, (void **)v13))return 0;
      v16 = std::map<std::string,BOOL>::at(*(_QWORD *)(a1 + 96), (void **)v13);
      v40 = 0;
      v41 = 0;
      __p = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)v16, *(_QWORD *)(v16 + 8), (uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 2);
      v42 = *(_DWORD *)(v16 + 24);
      DimensionOrderHint::DimensionOrderHint(&v33, 2);
      v17 = (int *)__p;
      if (v33.i64[1] - v33.i64[0] != v40 - (_BYTE *)__p)
        break;
      if (v33.i64[0] != v33.i64[1])
      {
        v18 = v33.i64[0] + 4;
        do
        {
          v19 = *v17++;
          v20 = *(_DWORD *)(v18 - 4) == v19;
          v21 = *(_DWORD *)(v18 - 4) != v19 || v18 == v33.i64[1];
          v18 += 4;
        }
        while (!v21);
LABEL_23:
        if (!v33.i64[0])
          goto LABEL_25;
LABEL_24:
        v33.i64[1] = v33.i64[0];
        operator delete((void *)v33.i64[0]);
        goto LABEL_25;
      }
      v20 = 1;
      if (v33.i64[0])
        goto LABEL_24;
LABEL_25:
      if (v20)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
      }
      else
      {
        if (!ZinOutputShapes::Contains(a2, (unsigned __int8 *)(v13 + 24)))
        {
          ZinIrNetworkStatus::SetError(*(CFArrayRef **)(a1 + 32), CFSTR("UnsupportedJITTransform"));
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrFactoryJIT::CalculateJITLiveOutStrides(&v37, v38, v30);
          v29 = 0;
          goto LABEL_33;
        }
        Dimensions = ZinOutputShapes::GetDimensions(a2, (unsigned __int8 *)(v13 + 24));
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)Dimensions, *(_DWORD *)(v13 + 48), 2, (uint64_t)&__p, *(_QWORD *)(v32 + 528), *(_QWORD *)(v13 + 144), 1, &v33);
        v23 = v33.i64[1];
        v24 = v33.i64[0];
        v22 = v34;
        v25 = v35;
        v26 = v36;
      }
      v33.i64[0] = v13 + 24;
      v28 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 104), (void **)(v13 + 24), (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
      v28[7] = v24;
      v28[8] = v23;
      v28[9] = v22;
      v28[10] = v25;
      v29 = 1;
      v28[11] = v26;
LABEL_33:
      if (__p)
      {
        v40 = __p;
        operator delete(__p);
      }
      if ((v29 & 1) == 0)
        return 0;
      v13 += 248;
      if (v13 == v14)
        return 1;
    }
    v20 = 0;
    goto LABEL_23;
  }
  return v10;
}

void sub_206EFAFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double std::make_unique[abi:ne180100]<ZinMirUnitGraph>@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_QWORD *)(v2 + 192) = 0;
  ZinIrNgraph<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,ZinIrIdComparator<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>>::ZinIrNgraph(v2);
  *(_BYTE *)(v2 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_DWORD *)(v2 + 192) = 1065353216;
  *a1 = v2;
  return result;
}

void sub_206EFB088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B2C404A64EC4FLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::CreateMirUnitGraph(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  ZinMirL2Config::NE **v23;
  uint64_t v24;
  uint64_t ChannelAssignment;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  ZinMirL2Config::NE **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  ZinDynamicOffsetCustomBarCmd *v34;
  std::__shared_weak_count *v35;
  _OWORD v36[2];
  int v37;
  unsigned __int8 *DynamicOffsetInfo;

  if (a3)
  {
    memset(v36, 0, sizeof(v36));
    v37 = 1065353216;
    v5 = a2[4];
    v6 = v5 >> 8;
    v7 = a2[1];
    v8 = a2[2];
    if (v8 == v7)
    {
      v11 = a2 + 5;
    }
    else
    {
      v9 = (_QWORD *)(v7 + 8 * v6);
      v10 = *v9 + 16 * v5;
      v11 = a2 + 5;
      v12 = *(_QWORD *)(v7 + (((a2[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)a2 + 40) + v5);
      if (v10 != v12)
      {
        while (1)
        {
          v13 = *(std::__shared_weak_count **)(v10 + 8);
          v34 = *(ZinDynamicOffsetCustomBarCmd **)v10;
          v35 = v13;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }
          if (!ZinMirUnitGraph::AddNode(a3, &v34))
            break;
          DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(v34);
          v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v36, DynamicOffsetInfo, (uint64_t)&std::piecewise_construct, (__int128 **)&DynamicOffsetInfo);
          std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100]((_QWORD *)v16 + 5, (uint64_t *)&v34);
          v17 = v35;
          if (v35)
          {
            v18 = (unint64_t *)&v35->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v10 += 16;
          if (v10 - *v9 == 4096)
          {
            v20 = v9[1];
            ++v9;
            v10 = v20;
          }
          if (v10 == v12)
          {
            v5 = a2[4];
            v7 = a2[1];
            v8 = a2[2];
            v6 = v5 >> 8;
            goto LABEL_19;
          }
        }
        v30 = v35;
        if (v35)
        {
          v31 = (unint64_t *)&v35->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
LABEL_36:
        v21 = 3;
        goto LABEL_37;
      }
    }
LABEL_19:
    if (v8 == v7
      || (v22 = (_QWORD *)(v7 + 8 * v6),
          v23 = (ZinMirL2Config::NE **)(*v22 + 16 * v5),
          v24 = *(_QWORD *)(v7 + (((*v11 + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (*(_BYTE *)v11 + v5),
          v23 == (ZinMirL2Config::NE **)v24))
    {
      v21 = 0;
    }
    else
    {
      do
      {
        ChannelAssignment = ZinMirL2Config::NE::GetChannelAssignment(*v23);
        v26 = *(unsigned __int8 **)ChannelAssignment;
        v27 = *(unsigned __int8 **)(ChannelAssignment + 8);
        while (v26 != v27)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long>>>::find<std::string>(v36, v26))goto LABEL_36;
          v34 = (ZinDynamicOffsetCustomBarCmd *)v26;
          v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v36, v26, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
          if ((ZinMirUnitGraph::AddEdge(a3, (ZinDynamicOffsetCustomBarCmd **)v28 + 5, v23, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_36;
          v26 += 24;
        }
        v23 += 2;
        if ((ZinMirL2Config::NE **)((char *)v23 - *v22) == (ZinMirL2Config::NE **)4096)
        {
          v29 = (ZinMirL2Config::NE **)v22[1];
          ++v22;
          v23 = v29;
        }
        v21 = 0;
      }
      while (v23 != (ZinMirL2Config::NE **)v24);
    }
LABEL_37:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::~__hash_table((uint64_t)v36);
    return v21;
  }
  return 3;
}

void sub_206EFB338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::PopulateDependencyMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = a1 + 296;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::clear(a1 + 296);
  v6 = *(_QWORD **)(a2 + 16);
  if (v6)
  {
    while (2)
    {
      v7 = (_QWORD *)v6[3];
      v8 = (_QWORD *)v6[4];
      while (v7 != v8)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 32))(*v7, a3, v5))
          return 3;
        ++v7;
      }
      v6 = (_QWORD *)*v6;
      if (v6)
        continue;
      break;
    }
  }
  return 0;
}

unsigned __int8 *ZinIrFactoryJIT::AddOpLayers(void)::$_1::operator()@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 *DynamicOffsetInfo;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = *(_QWORD *)result + 8;
  v4 = **(_QWORD ***)result;
  if (v4 != (_QWORD *)v3)
  {
    do
    {
      DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v4[4]);
      result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, DynamicOffsetInfo, (uint64_t)DynamicOffsetInfo);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (_QWORD *)v3);
  }
  return result;
}

void sub_206EFB480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL ZinIrFactoryJIT::AddLiveOuts(ZinIrFactoryJIT *this)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!ZinIrLiveIOManager::ValidateMultiplanarLiveOutput(*((ZinIrLiveIOManager **)this + 2)))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinIrFactoryJIT::AddLiveOuts(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  if (!ZinIrLiveIOManager::PrepareLiveOutBinding(*((_QWORD *)this + 2), *((_QWORD *)this + 1), (uint64_t *)this + 3, *((CFArrayRef **)this + 4)))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinIrFactoryJIT::AddLiveOuts(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  v2 = *(_QWORD **)(*((_QWORD *)this + 1) + 992);
  v28[0] = &off_24C058950;
  v28[1] = this;
  v29 = v28;
  v3 = ZinIrControlFlowGraph::TraverseForward(v2, (uint64_t)v28, 1);
  v4 = v29;
  if (v29 == v28)
  {
    v5 = 4;
    v4 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_12;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
  if (!v3)
    return 1;
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinIrFactoryJIT::AddLiveOuts(result, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  return result;
}

void sub_206EFB5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrFactoryJIT::GetOrderedLayers(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v3;
  char *v4;

  v4 = *(char **)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v2 = (char *)(a1 + 136);
  if ((char *)v3 == v4)
    return 3;
  if (v2 != a2)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(a2, v4, v3, (v3 - (uint64_t)v4) >> 3);
  return 0;
}

uint64_t ZinIrFactoryJIT::GetConstTensorSymbols(ZinIrFactoryJIT *this)
{
  return (uint64_t)this + 248;
}

void ZinIrFactoryJIT::~ZinIrFactoryJIT(ZinIrFactoryJIT *this)
{
  ZinIrFactoryJIT::~ZinIrFactoryJIT(this);
  JUMPOUT(0x20BD002F8);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_24C01A748;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::~__hash_table((uint64_t)this + 296);
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v5 = (void **)((char *)this + 224);
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 200);
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  ZinIrFactoryBase::~ZinIrFactoryBase((ZinIrBindings **)this);
}

void std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<SymbolInfoAndSection>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<SymbolInfoAndSection>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 352;
    do
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v5 = v4 - 8;
      v4 -= 360;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<SymbolInfoAndSection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolInfoAndSection>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB60B60B60B60B7)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(360 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  BOOL v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3 - 360;
    do
    {
      v10 = v7 - 360;
      *(_QWORD *)v10 = *(_QWORD *)v9;
      v11 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      memcpy((void *)(v7 - 328), (const void *)(v9 + 32), 0x13DuLL);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 + 352);
      v7 = *((_QWORD *)&v18 + 1) - 360;
      *((_QWORD *)&v18 + 1) -= 360;
      v12 = v9 == a5;
      v9 -= 360;
    }
    while (!v12);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 360;
  }
}

uint64_t std::__split_buffer<SymbolInfoAndSection>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<SymbolInfoAndSection>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<SymbolInfoAndSection>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 360;
      *(_QWORD *)(a1 + 16) = v2 - 360;
      if (*(char *)(v2 - 329) < 0)
      {
        operator delete(*(void **)(v2 - 352));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::unordered_map<std::string,ZinTensorDimensions>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ZinTensorDimensions> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_206EFB9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ZinTensorDimensions> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__construct_node_hash<std::pair<std::string const,ZinTensorDimensions> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_206EFBC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerfTracerCategory>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__construct_node_hash<std::pair<std::string const,ZinTensorDimensions> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __n128 result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 24);
  result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v8 + 56) = result;
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a3 + 56);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206EFBD28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerfTracerCategory>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 32);
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v4);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 16));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::deque<std::shared_ptr<ZinMirUnit>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_206EFC140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<ZinMirUnit>::shared_ptr[abi:ne180100]<ZinMirUnit,std::default_delete<ZinMirUnit>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_24C05CAD8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

uint64_t std::__shared_ptr_pointer<ZinMirUnit  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ZinMirUnit  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::default_delete<ZinMirUnitGraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>>>::~__hash_table(a2 + 160);
    if (*(char *)(a2 + 151) < 0)
      operator delete(*(void **)(a2 + 128));
    v3 = *(void **)(a2 + 104);
    if (v3)
    {
      *(_QWORD *)(a2 + 112) = v3;
      operator delete(v3);
    }
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(a2 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(a2 + 24);
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x20BD002F8);
  }
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerfTracerCategory>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

void std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C058950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C058950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD ***v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  const ZinTensorDimensions *v7;
  ZinIrTensor *v8;
  ZinIrTensor *v9;
  uint64_t v10;
  uint64_t Hal;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[2];
  void *__p;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];
  std::__shared_weak_count *v24;

  v3 = (_QWORD ***)*a3;
  if (*(_DWORD *)(*(_QWORD *)(*a3 + 64) + 8) != 31)
    return 0;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (void **)(((uint64_t (*)(_QWORD, _QWORD, _QWORD))(*v3)[4])(*a3, 0, 0) + 24);
  if ((void **)(v5 + 112) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v5 + 104, v6))return 3;
  v7 = (const ZinTensorDimensions *)std::map<std::string,BOOL>::at(v5 + 104, v6);
  v8 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**v3[11] + 32))(*v3[11], 0, 0);
  if (ZinIrTensor::SetCustomStrides(v8, v7))
    return 3;
  v9 = (ZinIrTensor *)((uint64_t (*)(_QWORD ***, _QWORD, _QWORD))(*v3)[4])(v3, 0, 0);
  if (ZinIrTensor::SetCustomStrides(v9, v7))
    return 3;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(v5 + 8) + 160));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v14 = *(_QWORD *)(v5 + 8) + 176;
  v18[0] = v13;
  v18[1] = v14;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  __p = 0;
  v23[0] = v18;
  v23[1] = 0;
  v24 = 0;
  v10 = ((uint64_t (*)(_QWORD ***, uint64_t, _QWORD *))(*v3)[21])(v3, v4, v23);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  return v10;
}

void sub_206EFC548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21)
    std::__function::__func<MirOpt::OptimizeConvWithSmallCout(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<MirOpt::OptimizeConvWithSmallCout(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(a21);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ZinMirUnit>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ZinMirUnit>>,0>(uint64_t a1)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_206EFC8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_206EFC984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ZinMirUnit>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void ZinIrFactoryJIT::AddOpLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to add output tensors!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to calculate JIT live-out strides", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to remove implicit dependencies!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Dynamic shapes transform handling pass failed!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to add implicit dependencies!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse shape dependent transform map!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to create MirUnit graph", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to prepare liveout tensors!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to add LiveIO layers\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to add input tensors!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrFactoryJIT::ParseSymbolTables(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v3 = (_QWORD *)*v3;
  v4 = 136315138;
  v5 = v3;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to create symbol %s.\n", (uint8_t *)&v4);
  OUTLINED_FUNCTION_4();
}

void ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: No basic blocks were serialized.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Basic block ID is out of bounds.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to add basic block to graph.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *a2;
  v4 = 134218240;
  v5 = v2;
  v6 = 2048;
  v7 = v3;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Failed to add edge from basic block %llu to basic block %llu.\n", (uint8_t *)&v4, 0x16u);
  OUTLINED_FUNCTION_4();
}

void ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_4_7();
  *(_DWORD *)v0 = 136315138;
  *(_QWORD *)(v0 + 4) = v1;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "Failed to add an input-ready %s layer.\n", v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_4_7();
  *(_DWORD *)v0 = 136315138;
  *(_QWORD *)(v0 + 4) = v1;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "%s layer is not ready.\n", v3);
}

void ZinIrFactoryJIT::AddInputReadyOpLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to add a tensor to the tensor map.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "No output shape for unit!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrFactoryJIT::AddInputReadyOpLayer(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Cannot find the required input tensor in tensor map!\n", a1);
}

void ZinIrFactoryJIT::CalculateJITLiveOutStrides(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fails to infer live-out shapes", a1);
}

void ZinIrFactoryJIT::AddLiveOuts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to lower engine for JIT liveouts\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to add bindings for liveouts\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid multiplanar liveouts\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinIrOpt::SumSquareDetection(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char **v32;
  char v33;
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _QWORD v38[3];
  _QWORD v39[4];
  uint64_t v40;
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[40];
  void **v45[23];
  uint64_t v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v38, "ew_add");
  v39[0] = &off_24C003330;
  v39[3] = v39;
  v23 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v40, &v23, 1);
  std::string::basic_string[abi:ne180100]<0>(v41, "ew_sqr");
  v42[0] = &off_24C003388;
  v43 = v42;
  v22 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v44, &v22, 1);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v32 = &v24;
  v33 = 0;
  v24 = (char *)operator new(0xC0uLL);
  v25 = (uint64_t)v24;
  v26 = v24 + 192;
  v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v26, (uint64_t)v38, (uint64_t)v45, (uint64_t)v24);
  v37 = 0;
  ZinLinearPattern::ZinLinearPattern(v45, &v24, a2, 0, v36, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v45, &v27);
  v5 = v27;
  v4 = v28;
  v47[0] = v27;
  v47[1] = v28;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v32 = (char **)&v29;
  v33 = 0;
  v6 = operator new(0x10uLL);
  v29 = v6;
  v31 = v6 + 2;
  *v6 = v5;
  v6[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v30 = v6 + 2;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v47);
  v9 = v28;
  if (v28)
  {
    v10 = (unint64_t *)&v28->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v45[0] = (void **)&off_24C01BCC8;
  v32 = (char **)&v46;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  ZinPattern::~ZinPattern((ZinPattern *)v45);
  v12 = v37;
  if (v37 == v36)
  {
    v13 = 4;
    v12 = v36;
    goto LABEL_13;
  }
  if (v37)
  {
    v13 = 5;
LABEL_13:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v32 = &v24;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  for (i = 0; i != -24; i -= 12)
  {
    v15 = &v38[i];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v44[i * 8]);
    v16 = *(_QWORD **)&v44[i * 8 - 8];
    if (&v42[i] == v16)
    {
      v16 = v15 + 15;
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_20;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
    if (SHIBYTE(v41[i + 2]) < 0)
      operator delete((void *)v15[12]);
  }
  v34[0] = &off_24C0033E0;
  v34[1] = &v29;
  v35 = v34;
  v18 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v34, 1);
  v19 = v35;
  if (v35 == v34)
  {
    v20 = 4;
    v19 = v34;
LABEL_27:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  else if (v35)
  {
    v20 = 5;
    goto LABEL_27;
  }
  v45[0] = (void **)&v29;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v45);
  return v18;
}

void sub_206EFD320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  char *v54;
  char *v56;
  uint64_t v57;

  v56 = a25;
  if (a25 == v54)
  {
    v57 = 4;
    v56 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_6:
  a54 = (void **)&a16;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a54);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003330;
  return result;
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003330;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BOOL4 v4;

  v2 = *(_QWORD **)(a2 + 8);
  v3 = v2[8];
  v4 = *(_DWORD *)(v3 + 8) == 6
    && v2[12] - v2[11] == 16
    && !*(_DWORD *)(v3 + 12)
    && *(float *)(v3 + 20) == 1.0
    && *(float *)(v3 + 24) == 0.0;
  return v4 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C003388;
  return result;
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C003388;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;

  v2 = *(_QWORD **)(a2 + 8);
  v3 = v2[8];
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 6)
  {
    if (v2[12] - v2[11] != 8 || *(_DWORD *)(v3 + 12) != 2 || *(float *)(v3 + 16) != 1.0)
      goto LABEL_9;
  }
  else if (v4 != 5 || *(_DWORD *)(v3 + 12) != 3)
  {
LABEL_9:
    v5 = 0;
    return v5 | 0x100u;
  }
  v5 = 1;
  return v5 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0033E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0033E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrOpLayer *SingleMatch;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  const void *v14;
  __n128 v15;
  float *v16;
  float v17;
  float v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrOpLayer *ScaledElementWise;
  char v31;
  char v32;
  BOOL v33;
  _OWORD v35[2];
  int v36;
  void *v37;
  void *v38;
  _OWORD *v39;
  _QWORD v40[3];
  char v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)(a1 + 8);
  v5 = *v3;
  v4 = v3[1];
  if (*v3 == v4)
    return 0;
  v6 = *a2;
  v7 = *a3;
  while (1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t **, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v6, v7))
      goto LABEL_38;
    v8 = *v5;
    std::string::basic_string[abi:ne180100]<0>(__p, "ew_add");
    SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
    if (SBYTE7(v43) < 0)
      operator delete(__p[0]);
    v10 = *v5;
    std::string::basic_string[abi:ne180100]<0>(__p, "ew_sqr");
    v11 = ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)__p);
    if (SBYTE7(v43) < 0)
      break;
    if (SingleMatch)
      goto LABEL_10;
LABEL_38:
    v5 += 2;
    if (v5 == v4)
      return 0;
  }
  operator delete(__p[0]);
  if (!SingleMatch)
    goto LABEL_38;
LABEL_10:
  if (!v11)
    goto LABEL_38;
  if (*(char *)(v11 + 47) >= 0)
    v12 = *(unsigned __int8 *)(v11 + 47);
  else
    v12 = *(_QWORD *)(v11 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 7);
  if ((SBYTE7(v43) & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*(char *)(v11 + 47) >= 0)
      v14 = (const void *)(v11 + 24);
    else
      v14 = *(const void **)(v11 + 24);
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "_sumsqr");
  v15 = ZinObjectNameFactory::ZinObjectNameFactory(v40, __p);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  v16 = *(float **)(v11 + 64);
  if (*((_DWORD *)v16 + 2) == 6)
  {
    v18 = v16[5];
    v17 = v16[6];
  }
  else
  {
    v17 = 0.0;
    v18 = 1.0;
  }
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)SingleMatch + 80))(__p, SingleMatch, 0, 0, v15);
  (*(void (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 80))(SingleMatch, 0, 0);
  v19 = operator new(0xF0uLL);
  v39 = v19 + 15;
  v20 = v55[0];
  v19[12] = v54;
  v19[13] = v20;
  *(_OWORD *)((char *)v19 + 220) = *(_OWORD *)((char *)v55 + 12);
  v21 = v51;
  v19[8] = v50;
  v19[9] = v21;
  v22 = v53;
  v19[10] = v52;
  v19[11] = v22;
  v23 = v47;
  v19[4] = v46;
  v19[5] = v23;
  v24 = v49;
  v19[6] = v48;
  v19[7] = v24;
  v25 = v43;
  *v19 = *(_OWORD *)__p;
  v19[1] = v25;
  v26 = v45;
  v19[2] = v44;
  v19[3] = v26;
  v37 = v19;
  v38 = v19 + 15;
  v27 = *((_QWORD *)SingleMatch + 2);
  v28 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
  v29 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
  ScaledElementWise = (ZinIrOpLayer *)ZinBuilder::CreateScaledElementWise(v27, (uint64_t)v40, *(float *)(*((_QWORD *)SingleMatch + 8) + 16), v18, v17, (uint64_t)&v37, (__int128 *)(v28 + 48), *(_DWORD *)(v29 + 88), 2, *(_BYTE *)(*((_QWORD *)SingleMatch + 8) + 28), *(_BYTE *)(*((_QWORD *)SingleMatch + 8) + 29));
  __p[0] = &unk_24C02BB18;
  v43 = 0uLL;
  __p[1] = 0;
  v31 = ZinIrOpLayerGraph::ReplaceNode(v6, SingleMatch, ScaledElementWise, (const Layer2TDMapper::SourceLayer *)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v43 = __p[1];
    operator delete(__p[1]);
  }
  v33 = (v31 & 1) != 0
     && (memset(v35, 0, sizeof(v35)),
         v36 = 1065353216,
         v32 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v6, (uint64_t **)v11, ScaledElementWise, v35),
         std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v35),
         (v32 & 1) != 0)
     && ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v6, (ZinIrOpLayer *)v11, 0);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  v40[0] = off_24C01FBB0;
  if (v41 < 0)
    operator delete((void *)v40[1]);
  if (v33)
    goto LABEL_38;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  return 3;
}

void sub_206EFDAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void (**a21)(ZinObjectNameFactory *__hidden this),void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  a21 = off_24C01FBB0;
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Unable to merge sumsqr\n", v0, 2u);
}

void ZinMirLiveInUnit::ZinMirLiveInUnit(ZinMirLiveInUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  *(_QWORD *)ZinMirUnit::ZinMirUnit((uint64_t)this, 28, (__int128 *)a2) = &off_24C01BD98;
}

uint64_t ZinMirLiveInUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 40)
    return 3;
  result = 0;
  v5 = *v3;
  v6 = v3[1];
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v3 + 4);
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t ZinMirLiveInUnit::CreateLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 104))
    ZinAssertImpl("LiveIn layer should not have MIR info");
  v4 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v4, 28);
  v17 = v4;
  v5 = operator new();
  v6 = v5;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinLiveInLayer::ZinLiveInLayer(v5, &v17, &v15, a1 + 8);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v6;
}

void sub_206EFDD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinMirLiveInUnit::~ZinMirLiveInUnit(ZinMirLiveInUnit *this)
{
  ZinMirUnit::~ZinMirUnit(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinIrStochasticRoundInfo::GetSeeds(ZinIrStochasticRoundInfo *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t ZinStochasticRoundLayer::Lower()
{
  return 0;
}

_QWORD *ZinStochasticRoundLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t *GroupId;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v6 = (_QWORD *)operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C022FA0;
  v9 = *(_OWORD *)(v7 + 12);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(v8 + 12) = v9;
  v10 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v10;
  v21 = v8;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ZinStochasticRoundLayer::ZinStochasticRoundLayer(v6, &v21, &v19, a3);
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  v21 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206EFDF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinStochasticRoundLayer::ComputeOutputDimensions(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  v3 = **a2;
  v4 = (*a2)[1];
  *(_QWORD *)(a3 + 32) = *((_QWORD *)*a2 + 4);
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  return 0;
}

_QWORD *ZinStochasticRoundLayer::Split(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const LayerPartInfo *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  ZinMirKernelSizeSplitterEngine *v14;
  const ZinIrOpLayer *v15;
  __int128 v17;
  void *__p[3];
  _QWORD v19[3];
  char v20;
  std::string v21;
  void *v22;
  char v23;

  v6 = (const LayerPartInfo *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 576))(*a3);
  ZinMirKernelSizeSplitterEngine::GetKernelSplittingNames((uint64_t)v6, a2, a3, &v21);
  v7 = *((_QWORD *)v6 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C022FA0;
  v9 = *(_OWORD *)(v7 + 12);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(v8 + 12) = v9;
  ZinObjectNameFactory::ZinObjectNameFactory(v19, &v22);
  v10 = *(_QWORD *)(a1 + 16);
  ZinOpLayerUtils::GetTensorInfoFromLayers((_QWORD *)(a1 + 88), (uint64_t)__p);
  v11 = *((_DWORD *)a3 + 76);
  v12 = *(_DWORD *)(v8 + 12);
  v17 = *(_OWORD *)(v8 + 16);
  v13 = ZinBuilder::CreateStochasticRoundLayer(v10, (uint64_t)v19, (uint64_t)__p, (__int128 *)(a3 + 9), v11, v12, &v17, *(_QWORD *)(v8 + 32));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v14 = (ZinMirKernelSizeSplitterEngine *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v13 + 32))(v13, 0, 0);
  if (ZinMirKernelSizeSplitterEngine::UpdateTensorSplitInfo(v14, (ZinIrTensor *)a3, v6, v15))
    ZinAssertImpl("Failed to update tensor info in StochasticRound spatial split.");
  v19[0] = off_24C01FBB0;
  if (v20 < 0)
    operator delete((void *)v19[1]);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v23 < 0)
    operator delete(v22);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v13;
}

void sub_206EFE148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  KernelSplittingNames::~KernelSplittingNames(&a22);
  _Unwind_Resume(a1);
}

_QWORD *ZinStochasticRoundLayer::OpCodeKindToString@<X0>(ZinStochasticRoundLayer *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_24C05FF48[*(int *)(*((_QWORD *)this + 8) + 12)]);
}

uint64_t ZinStochasticRoundLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206EFE29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ZinChannelToSpaceCompositeLayer::ZinChannelToSpaceCompositeLayer(ZinChannelToSpaceCompositeLayer *this, ZinConvLayer *a2, ZinGOCLayer *a3, ZinActivationLayer *a4, size_t *a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  size_t v15;
  std::string *v16;
  char *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  ZinIrKernel *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  ZinIrKernel *v30;
  std::string v31;
  void *v32[2];
  int64_t v33;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  v10 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v10, 26);
  v39 = v10;
  v11 = (uint64_t *)(*(uint64_t (**)(size_t *, _QWORD, _QWORD))(*a5 + 40))(a5, 0, 0);
  v12 = v11[1];
  v37 = *v11;
  v38 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (*((char *)a5 + 47) >= 0)
    v15 = *((unsigned __int8 *)a5 + 47);
  else
    v15 = a5[4];
  v16 = &v34;
  std::string::basic_string[abi:ne180100]((uint64_t)&v34, v15 + 1);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*((char *)a5 + 47) >= 0)
      v17 = (char *)(a5 + 3);
    else
      v17 = (char *)a5[3];
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v31, "comp_ctos");
  v18 = std::string::append(&v31, "_xfm", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v33 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v32 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v20 = v32;
  else
    v20 = (void **)v32[0];
  if (v33 >= 0)
    v21 = HIBYTE(v33);
  else
    v21 = (std::string::size_type)v32[1];
  v22 = std::string::append(&v34, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v36 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v30 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)this, &v39, &v37, (__int128 *)__p, &v30);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    ZinIrKernel::~ZinIrKernel(v24);
    MEMORY[0x20BD002F8](v25);
  }
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v26 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  v39 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  *(_QWORD *)this = &off_24C025648;
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 25) = a3;
  *((_QWORD *)this + 26) = a4;
  *((_QWORD *)this + 27) = a5;
}

void sub_206EFE520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v35;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v33 - 88);
  v35 = *(_QWORD *)(v33 - 72);
  *(_QWORD *)(v33 - 72) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

uint64_t ZinChannelToSpaceCompositeLayer::Lower(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  _QWORD *v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrOpLayer *FusedDeconv;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  ZinIrTensor *v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  ZinIrTensor::MirInfo *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;
  char v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  ZinIrOpLayer *v44;
  _BOOL4 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  ZinIrTensor *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  ZinIrTensor::MirInfo *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  ZinIrOpLayer *v63;
  _BOOL4 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  _OWORD v71[2];
  int v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  ZinIrTensor::MirInfo *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78;
  void *__p;
  void *v80;
  uint64_t v81;
  int v82;
  ZinIrTensor::MirInfo *v83;
  std::string v84;
  _QWORD v85[3];
  char v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 192);
  if (!v3)
    ZinAssertImpl("Conv is required in a ChannelToSpaceCompositeLayer");
  v7 = v3[2];
  v8 = ZinObjectNameFactory::ZinObjectNameFactory(v85, *(_QWORD *)(a1 + 216) + 24);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(***(_QWORD ***)(a1 + 88) + 32))(**(_QWORD **)(a1 + 88), 0, 0, v8);
  v10 = *(_QWORD *)(a1 + 216);
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 88) + 32))(**(_QWORD **)(a1 + 88), 0, 0);
  FusedDeconv = (ZinIrOpLayer *)ZinChannelToSpaceUtils::CreateFusedDeconv((uint64_t)v85, v3, v9 + 48, v10, *(unsigned int *)(v11 + 88), **a3);
  if (!FusedDeconv)
    goto LABEL_75;
  v89 = a1;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  v84.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v78, &v84);
  v13 = ZinIrOpLayerGraph::AddNode(a2, FusedDeconv, (ZinIrOpLayer ***)&v78);
  v78 = &unk_24C02BB18;
  if (__p)
  {
    v80 = __p;
    operator delete(__p);
  }
  v14 = v13 & ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, FusedDeconv);
  v15 = *(_QWORD *)(a1 + 200);
  if (!v15)
    goto LABEL_46;
  v16 = *(_DWORD **)(*(_QWORD *)(a1 + 216) + 64);
  v17 = v16[3];
  v18 = v16[4];
  v19 = v16[5];
  if (v17 != 2 || v18 != 2 || v19 != 1)
    ZinAssertImpl("C2S Composite supports only 2x2x1 expansion. Incorrect factors: %d/%d/%d\n", v17, v18, v19);
  v20 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
  v21 = *((_DWORD *)v20 + 22);
  v22 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)FusedDeconv + 32))(FusedDeconv, 0, 0);
  ZinObjectNameFactory::CreateName((uint64_t)v85, 0, &v84);
  ZinIrTensor::CopyTensorMirInfo(v20, &v83);
  v87 = 0;
  v88 = 0;
  LODWORD(v78) = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v82 = 0;
  ZinIrTensor::CreateTensor(v7, v21, (__int128 *)(v22 + 48), (__int128 *)&v84, &v83, &v87, (unsigned int *)&v78, &v89);
  v23 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v83;
  v83 = 0;
  if (v26)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v83, v26);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (!ZinIrKernel::HasPerCoutBias(*(ZinIrKernel **)(*(_QWORD *)(a1 + 200) + 136)))
    goto LABEL_30;
  v27 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 200) + 32))(*(_QWORD *)(a1 + 200), 0, 0)+ 56);
  v84.__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long>::vector(&v78, v27, &v84);
  if (v27 >= 4)
  {
    v28 = 0;
    v29 = 0;
    v30 = (char *)v78;
    if (v27 >> 2 <= 1)
      v31 = 1;
    else
      v31 = v27 >> 2;
    do
    {
      v32 = 0;
      v33 = v29;
      v34 = v28;
      v35 = &v30[8 * v29];
      do
      {
        *(_QWORD *)&v35[8 * v32++] = v34;
        v34 += v27 >> 2;
      }
      while (v32 != 4);
      ++v28;
      v29 = v33 + 4;
    }
    while (v28 != v31);
  }
  v36 = ZinIrOpLayer::ShuffleChannels(*(_QWORD *)(a1 + 200), (uint64_t)&v78);
  if (v78)
  {
    __p = v78;
    operator delete(v78);
  }
  if (v36)
  {
    v37 = 0;
  }
  else
  {
LABEL_30:
    v38 = *(_QWORD *)(a1 + 200);
    v76 = v89;
    v77 = v90;
    if (v90)
    {
      v39 = (unint64_t *)&v90->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v38 + 24))(v38, &v76);
    v41 = v77;
    if (v77)
    {
      v42 = (unint64_t *)&v77->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(ZinIrOpLayer **)(a1 + 200);
    v87 = a1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    v84.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v78, &v84);
    v45 = ZinIrOpLayerGraph::AddNode(a2, v44, (ZinIrOpLayer ***)&v78);
    v78 = &unk_24C02BB18;
    if (__p)
    {
      v80 = __p;
      operator delete(__p);
    }
    v14 &= v45 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)FusedDeconv, *(_QWORD *)(a1 + 200), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    FusedDeconv = *(ZinIrOpLayer **)(a1 + 200);
    v37 = 1;
  }
  v46 = v90;
  if (v90)
  {
    v47 = (unint64_t *)&v90->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if ((v37 & 1) != 0)
        goto LABEL_46;
LABEL_75:
      v69 = 3;
      goto LABEL_76;
    }
  }
  if ((v37 & 1) == 0)
    goto LABEL_75;
LABEL_46:
  v49 = *(_QWORD *)(a1 + 208);
  if (v49)
  {
    v50 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0, 0) + 88);
    v51 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)FusedDeconv + 32))(FusedDeconv, 0, 0);
    ZinObjectNameFactory::CreateName((uint64_t)v85, 0, &v84);
    v52 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 208) + 32))(*(_QWORD *)(a1 + 208), 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v52, &v75);
    v87 = 0;
    v88 = 0;
    LODWORD(v78) = 0;
    v80 = 0;
    v81 = 0;
    __p = 0;
    v82 = 0;
    ZinIrTensor::CreateTensor(v7, v50, (__int128 *)(v51 + 48), (__int128 *)&v84, &v75, &v87, (unsigned int *)&v78, &v89);
    v53 = v88;
    if (v88)
    {
      v54 = (unint64_t *)&v88->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v75;
    v75 = 0;
    if (v56)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v75, v56);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    v57 = *(_QWORD *)(a1 + 208);
    v73 = v89;
    v74 = v90;
    if (v90)
    {
      v58 = (unint64_t *)&v90->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v57 + 24))(v57, &v73);
    v60 = v74;
    if (v74)
    {
      v61 = (unint64_t *)&v74->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *(ZinIrOpLayer **)(a1 + 208);
    v87 = a1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    v84.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v78, &v84);
    v64 = ZinIrOpLayerGraph::AddNode(a2, v63, (ZinIrOpLayer ***)&v78);
    v78 = &unk_24C02BB18;
    if (__p)
    {
      v80 = __p;
      operator delete(__p);
    }
    v14 &= v64 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)FusedDeconv, *(_QWORD *)(a1 + 208), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    FusedDeconv = *(ZinIrOpLayer **)(a1 + 208);
    v65 = v90;
    if (v90)
    {
      v66 = (unint64_t *)&v90->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  memset(v71, 0, sizeof(v71));
  v72 = 1065353216;
  v68 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, FusedDeconv, v71);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v71);
  if ((v14 & v68 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0)) != 0)
    v69 = 0;
  else
    v69 = 3;
LABEL_76:
  v85[0] = off_24C01FBB0;
  if (v86 < 0)
    operator delete((void *)v85[1]);
  return v69;
}

void sub_206EFED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v34 - 112);
  *(_QWORD *)(v34 - 168) = off_24C01FBB0;
  if (*(char *)(v34 - 137) < 0)
    operator delete(*(void **)(v34 - 160));
  _Unwind_Resume(a1);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchConv(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *SingleMatch;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double WeightDimensions;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  _QWORD v17[3];
  uint64_t v18[5];
  void *__p[2];
  __int128 v20;
  uint64_t v21;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8))
    goto LABEL_17;
  v2 = *(_QWORD **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "c2s");
  SingleMatch = (_QWORD *)ZinPattern::State::GetSingleMatch(v2, (unsigned __int8 *)__p);
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  v4 = SingleMatch[8];
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
  v7 = *(_QWORD *)(v5 + 136);
  if (ZinIrKernel::IsMutable((ZinIrKernel *)v7))
    goto LABEL_17;
  v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0) + 88);
  v9 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*SingleMatch + 32))(SingleMatch, 0, 0);
  if (!ZinQuantizationUtils::TensorFormatCompatible(v8, *(_DWORD *)(v9 + 88)))
    goto LABEL_17;
  if (*(_DWORD *)(v7 + 340) != 1)
    goto LABEL_17;
  if (*(_DWORD *)(v7 + 344) != 1)
    goto LABEL_17;
  if (*(_DWORD *)(v7 + 348) != 1)
    goto LABEL_17;
  if (*(_DWORD *)(v7 + 328) != 1)
    goto LABEL_17;
  if (*(_DWORD *)(v7 + 332) != 1)
    goto LABEL_17;
  if (*(_DWORD *)(v7 + 336) != 1)
    goto LABEL_17;
  if (*(_QWORD *)(v7 + 400) >= 2uLL)
    goto LABEL_17;
  if (ZinIrKernel::HasVectorPalettizedWeight(*(ZinIrKernel **)(v5 + 136)))
    goto LABEL_17;
  v21 = 0;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  WeightDimensions = ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v5 + 136), (uint64_t)v18);
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)v5 + 32))(v5, 0, 0, WeightDimensions);
  if ((ZinPixelShuffleUtils::GetShuffledKernelDimensions(v18, (int *)(v4 + 12), v11, *(_DWORD *)(v12 + 88), (uint64_t *)__p) & 1) == 0)goto LABEL_17;
  memset(v17, 0, sizeof(v17));
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v5 + 88) + 32))(**(_QWORD **)(v5 + 88), 0, 0)+ 48;
  ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v5 + 136), (uint64_t)v18);
  if ((ZinPixelShuffleUtils::GetFusedPadding(v13, v6 + 48, (uint64_t)v18, (int *)(v7 + 352), __p, (int *)(v4 + 12), (int *)v17) & 1) != 0)
  {
    LOBYTE(v14) = 1;
    v15 = 1;
  }
  else
  {
LABEL_17:
    v14 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v15 = HIBYTE(v14);
  }
  return v14 | (v15 << 8);
}

void sub_206EFF098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchGOC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 v4;
  unsigned __int8 v5;
  int v6;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  void *__p;
  void *v22;
  char v23;
  void *v24[2];
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;

  v2 = (_QWORD *)a1[1];
  if (*(_DWORD *)(v2[8] + 8) != 2
    || (*(unsigned int (**)(_QWORD *))(*v2 + 120))(v2)
    || (v3 = a1[1], ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v3 + 136))))
  {
    v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v5 = v4;
    v6 = HIBYTE(v4);
  }
  else
  {
    v8 = (_QWORD *)a1[3];
    std::string::basic_string[abi:ne180100]<0>(v24, "goc");
    ZinPattern::State::GetMatch(v8, (unsigned __int8 *)v24, &__p);
    ZinPatternUtils::ToGOC((uint64_t **)&__p, &v26);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (v25 < 0)
      operator delete(v24[0]);
    v9 = v27;
    if ((unint64_t)v27 >= v28)
    {
      v11 = v27 - v26;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v12 = (uint64_t)(v28 - (_QWORD)v26) >> 2;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (v28 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v28, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v11];
      v16 = &v14[8 * v13];
      *v15 = v3;
      v10 = v15 + 1;
      v18 = v26;
      v17 = v27;
      if (v27 != v26)
      {
        do
        {
          v19 = *--v17;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = v26;
      }
      v26 = v15;
      v27 = v10;
      v28 = (unint64_t)v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v27 = v3;
      v10 = v9 + 1;
    }
    v27 = v10;
    ZinObjectNameFactory::ZinObjectNameFactory(&__p, v3 + 24);
    if (ZinMergeGOCSequence(*a1, (uint64_t)&__p, (uint64_t)&v26))
    {
      v5 = 1;
      v6 = 1;
    }
    else
    {
      v20 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      v5 = v20;
      v6 = HIBYTE(v20);
    }
    __p = off_24C01FBB0;
    if (v23 < 0)
      operator delete(v22);
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
  return v5 | (v6 << 8);
}

void sub_206EFF2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 56);
  if (v25)
  {
    *(_QWORD *)(v23 - 48) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchActivation(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 4)
  {
    v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchSingularGOC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 v4;
  int v5;

  v2 = *(_QWORD **)(a1 + 8);
  if (*(_DWORD *)(v2[8] + 8) != 2
    || (*(unsigned int (**)(_QWORD *))(*v2 + 120))(v2)
    || (v3 = *(_QWORD *)(a1 + 8), ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v3 + 136)))
    || ZinIrKernel::HasPerCoutBias(*(ZinIrKernel **)(v3 + 136)))
  {
    v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v5 = HIBYTE(v4);
  }
  else
  {
    LOBYTE(v4) = 1;
    v5 = 1;
  }
  return v4 | (v5 << 8);
}

uint64_t ZinChannelToSpaceCompositeLayer::Clone()
{
  return 0;
}

void ZinChannelToSpaceCompositeLayer::MakeComposite()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Failed in making ChannelToSpaceCompositeLayer.\n", v0, 2u);
}

uint64_t ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates(uint64_t a1, unsigned int a2, uint64_t a3, char **a4, unint64_t a5, unsigned __int8 a6)
{
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  MirInfoChannelAssignment *v10;
  uint64_t OCGSize;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v21;
  uint64_t Hal;
  const ZinIrHalParameters *v23;
  uint64_t v24;
  const ZinNELayer *v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  ZinIrTarget *v29;
  MirInfoChannelAssignment *v30;
  BOOL v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v40;
  unint64_t v41;
  _BOOL4 v42;
  char v43;
  int v44;
  unint64_t WUCost;
  _BOOL4 v46;
  int v47;
  uint64_t v48;
  MirInfoChannelAssignment *v49;
  _DWORD *v50;
  uint64_t v51;
  char CanUseKernelStreamingMode;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t result;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  MirInfoChannelAssignment *v77;
  uint64_t v78;
  MirInfoChannelAssignment *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t WorkUnitHeightLimit;
  int v105;
  unsigned int v106;
  unsigned __int8 FatTileEnable;
  _BOOL4 v108;
  void **v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t Lut;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  char v121;
  _BOOL4 v122;
  unint64_t v123;
  _BYTE __dst[452];
  uint64_t *v125[4];
  int v126;
  int v127;
  uint64_t *v128[4];
  int v129;
  int v130;
  uint64_t *v131[4];
  int v132;
  uint64_t v133;
  int v134;
  _QWORD v135[2];
  unint64_t v136;
  unint64_t v137;
  _BYTE v138[7];
  __int128 v139;
  uint64_t v140;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) == 93)
  {
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    v10 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    OCGSize = MirInfoChannelAssignment::GetOCGSize(v10);
    MirInfoChannelAssignment::MirInfoChannelAssignment((MirInfoChannelAssignment *)__dst, NumNeededNEs, OCGSize, 0, 0);
    *(int64x2_t *)&__dst[40] = vdupq_n_s64(0x10uLL);
    *(_QWORD *)&__dst[56] = 16;
    *(_QWORD *)&__dst[64] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 368))(a1, 3);
    *(_DWORD *)&__dst[72] = 0;
    *(_WORD *)&__dst[76] = 256;
    v12 = (unint64_t)a4[2];
    v13 = a4[1];
    if ((unint64_t)v13 < v12)
    {
LABEL_3:
      *(_OWORD *)v13 = *(_OWORD *)__dst;
      v14 = *(_OWORD *)&__dst[16];
      v15 = *(_OWORD *)&__dst[32];
      v16 = *(_OWORD *)&__dst[64];
      *((_OWORD *)v13 + 3) = *(_OWORD *)&__dst[48];
      *((_OWORD *)v13 + 4) = v16;
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v15;
      v17 = v13 + 80;
LABEL_122:
      result = 0;
      a4[1] = v17;
      return result;
    }
    v69 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a4) >> 4);
    v70 = v69 + 1;
    if (v69 + 1 <= 0x333333333333333)
    {
      v71 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)*a4) >> 4);
      if (2 * v71 > v70)
        v70 = 2 * v71;
      if (v71 >= 0x199999999999999)
        v72 = 0x333333333333333;
      else
        v72 = v70;
      if (v72)
        v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v72);
      else
        v73 = 0;
      v87 = &v73[80 * v69];
      v88 = &v73[80 * v72];
      *(_OWORD *)v87 = *(_OWORD *)__dst;
      v89 = *(_OWORD *)&__dst[16];
      v90 = *(_OWORD *)&__dst[32];
      v91 = *(_OWORD *)&__dst[64];
      *((_OWORD *)v87 + 3) = *(_OWORD *)&__dst[48];
      *((_OWORD *)v87 + 4) = v91;
      *((_OWORD *)v87 + 1) = v89;
      *((_OWORD *)v87 + 2) = v90;
      v17 = v87 + 80;
      v93 = *a4;
      v92 = a4[1];
      if (v92 == *a4)
        goto LABEL_120;
      do
      {
        *((_OWORD *)v87 - 5) = *((_OWORD *)v92 - 5);
        v94 = *((_OWORD *)v92 - 4);
        v95 = *((_OWORD *)v92 - 3);
        v96 = *((_OWORD *)v92 - 2);
        *(_OWORD *)(v87 - 18) = *(_OWORD *)(v92 - 18);
        *((_OWORD *)v87 - 3) = v95;
        *((_OWORD *)v87 - 2) = v96;
        *((_OWORD *)v87 - 4) = v94;
        v87 -= 80;
        v92 -= 80;
      }
      while (v92 != v93);
LABEL_119:
      v92 = *a4;
LABEL_120:
      *a4 = v87;
      a4[1] = v17;
      a4[2] = v88;
      if (v92)
        operator delete(v92);
      goto LABEL_122;
    }
    goto LABEL_123;
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 16) + 160));
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v105 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 144);
  if (v105 == 1 && !NERasterization::CanUseFlexibleWUShapeInSSM((NERasterization *)a1, (const ZinNELayer *)v24, v23))
  {
    v77 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    v78 = MirInfoChannelAssignment::GetNumNeededNEs(v77);
    v79 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    v80 = MirInfoChannelAssignment::GetOCGSize(v79);
    MirInfoChannelAssignment::MirInfoChannelAssignment((MirInfoChannelAssignment *)__dst, v78, v80, 0, 0);
    *(int64x2_t *)&__dst[40] = vdupq_n_s64(0x10uLL);
    *(_QWORD *)&__dst[56] = 16;
    *(_QWORD *)&__dst[64] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 368))(a1, 3);
    *(_DWORD *)&__dst[72] = 1;
    *(_WORD *)&__dst[76] = 256;
    v81 = (unint64_t)a4[2];
    v13 = a4[1];
    if ((unint64_t)v13 < v81)
      goto LABEL_3;
    v82 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a4) >> 4);
    v83 = v82 + 1;
    if (v82 + 1 <= 0x333333333333333)
    {
      v84 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81 - (_QWORD)*a4) >> 4);
      if (2 * v84 > v83)
        v83 = 2 * v84;
      if (v84 >= 0x199999999999999)
        v85 = 0x333333333333333;
      else
        v85 = v83;
      if (v85)
        v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v85);
      else
        v86 = 0;
      v87 = &v86[80 * v82];
      v88 = &v86[80 * v85];
      *(_OWORD *)v87 = *(_OWORD *)__dst;
      v97 = *(_OWORD *)&__dst[16];
      v98 = *(_OWORD *)&__dst[32];
      v99 = *(_OWORD *)&__dst[64];
      *((_OWORD *)v87 + 3) = *(_OWORD *)&__dst[48];
      *((_OWORD *)v87 + 4) = v99;
      *((_OWORD *)v87 + 1) = v97;
      *((_OWORD *)v87 + 2) = v98;
      v17 = v87 + 80;
      v100 = *a4;
      v92 = a4[1];
      if (v92 == *a4)
        goto LABEL_120;
      do
      {
        *((_OWORD *)v87 - 5) = *((_OWORD *)v92 - 5);
        v101 = *((_OWORD *)v92 - 4);
        v102 = *((_OWORD *)v92 - 3);
        v103 = *((_OWORD *)v92 - 2);
        *(_OWORD *)(v87 - 18) = *(_OWORD *)(v92 - 18);
        *((_OWORD *)v87 - 3) = v102;
        *((_OWORD *)v87 - 2) = v103;
        *((_OWORD *)v87 - 4) = v101;
        v87 -= 80;
        v92 -= 80;
      }
      while (v92 != v100);
      goto LABEL_119;
    }
LABEL_123:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  v115 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 368))(a1, 4);
  v116 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 368))(a1, 3);
  WorkUnitHeightLimit = NERasterization::GetWorkUnitHeightLimit((NERasterization *)a1, v25);
  v123 = v26;
  v139 = 0uLL;
  LOBYTE(v140) = 0;
  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a1)
    && NERasterization::CanUseNonPowerOf2WUs((_QWORD *)a1, v24, a2))
  {
    NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(a1, (_QWORD *)v24, a2, a3, (void **)a4, a5, a6);
  }
  v109 = (void **)a4;
  v27 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88);
  if (IsFormatDMAConvertibleToFP16(a2))
    v28 = 3;
  else
    v28 = a2;
  if (IsFormatDMAConvertibleToFP16(v27))
    v27 = 3;
  v29 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  Lut = ZinIrTarget::GetLut(v29);
  v30 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v30);
  v119 = v28;
  v31 = Has16bitTo8bitFormatConversion(v28, v27);
  v32 = (_QWORD *)a1;
  v122 = *(_BYTE *)(v24 + 1134)
      && *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) == 85
      && ZinNEConvLayer::CanUseHalfWorkUnitMode(a1, a2, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(v135, a1);
  v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  v134 = v33;
  if (IsFormatDMAConvertibleToFP16(a2))
    v34 = 3;
  else
    v34 = a2;
  v106 = v34;
  if ((v105 - 3) >= 2)
    v35 = v105;
  else
    v35 = 0;
  if (WorkUnitHeightLimit <= v123)
  {
    v118 = !v31 | FatTileEnable;
    v111 = v21 & 0xFFFFFFFF00000000;
    v112 = v21;
    v36 = v116;
    if (a6)
      v36 = a5;
    v110 = v36;
    v37 = WorkUnitHeightLimit;
    v117 = v32;
    while (1)
    {
      v38 = v37;
      if (v37 >= WorkUnitHeightLimit)
        break;
LABEL_89:
      v37 *= 2;
      if (v37 > v123)
        goto LABEL_90;
    }
    while (v37 > v123)
    {
LABEL_88:
      v38 >>= 1;
      if (v38 < WorkUnitHeightLimit)
        goto LABEL_89;
    }
    v40 = v37 > 0xF && v38 > 0xF;
    v108 = v40;
    v41 = v37;
    while (1)
    {
      v42 = v122;
      if (v41 > *(_QWORD *)(v24 + 664))
        v42 = 0;
      v43 = v42
         && ZinMirConvUtils::IsHalfWUBeneficial(v24, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 24), v135[1], v136, v137, (int *)&v133, v37, v35);
      v44 = v35;
      if ((v35 - 1) > 1)
        goto LABEL_51;
      if (v37 == v38 && v37 == v41)
      {
        WUCost = NERasterization::GetWUCost(v37, v37, v37, v116, v35, v43, v115, v116, Lut, FatTileEnable, v106, v24);
        if (v35 == 2 && WUCost <= 1)
        {
          if (ZinMirConvUtils::IsValidShPrefForTinySourceMode((ZinMirConvUtils *)v24, (const ZinIrHalParameters *)v37, v136))
          {
            v44 = 2;
          }
          else
          {
            v44 = 1;
          }
LABEL_51:
          if ((v118 & 1) != 0
            || (NERasterization::HasWorkUnitWidthOf8(v24, v119, v41, v38, v37, v44, v43, v116, v115, Lut, 0) & 1) == 0)
          {
            if (!*(_BYTE *)(v24 + 1896)
              || v112 != 2
              || v111 != 0x200000000
              || ((v46 = IsFp16(v119), v41 != 16) ? (v47 = 1) : (v47 = v46), (v47 | v108) == 1))
            {
              v48 = ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v32[33]);
              v139 = *(_OWORD *)v48;
              v120 = *(_QWORD *)(v48 + 24);
              v140 = *(_QWORD *)(v48 + 16);
              v121 = *(_BYTE *)(v48 + 32);
              v49 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v32[33]);
              if (!MirInfoChannelAssignment::IsMulticastEnabled(v49) || *(_DWORD *)(v32[8] + 8) != 85)
                goto LABEL_70;
              v50 = (_DWORD *)v32[33];
              memcpy(__dst, v50 + 30, sizeof(__dst));
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v125, (uint64_t)(v50 + 144));
              v127 = v50[154];
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v128, (uint64_t)(v50 + 156));
              v130 = v50[166];
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v131, (uint64_t)(v50 + 168));
              v51 = v117[33];
              if (!*(_BYTE *)(v51 + 150))
              {
                *(_QWORD *)(v51 + 120) = v38;
                *(_QWORD *)(v51 + 128) = v41;
                *(_QWORD *)(v51 + 136) = v37;
              }
              if (!*(_BYTE *)(v51 + 233))
                *(_QWORD *)(v51 + 200) = v110;
              ZinMirL2Config::NE::SetSmallSourceMode(v51 + 120, v44);
              CanUseKernelStreamingMode = ZinNEConvLayer::CanUseKernelStreamingMode(v117, v119);
              memcpy((void *)(v51 + 120), __dst, 0x1C0uLL);
              *(_DWORD *)(v51 + 568) = *(_DWORD *)&__dst[448];
              if ((_BYTE *)(v51 + 120) == __dst)
              {
                *(_DWORD *)(v51 + 616) = v127;
                *(_DWORD *)(v51 + 664) = v130;
              }
              else
              {
                *(_DWORD *)(v51 + 608) = v126;
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v51 + 576), v125[2], 0);
                *(_DWORD *)(v51 + 616) = v127;
                *(_DWORD *)(v51 + 656) = v129;
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v51 + 624), v128[2], 0);
                *(_DWORD *)(v51 + 664) = v130;
                *(_DWORD *)(v51 + 704) = v132;
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v51 + 672), v131[2], 0);
              }
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v131);
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v128);
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v125);
              v32 = v117;
              if ((CanUseKernelStreamingMode & 1) == 0)
              {
LABEL_70:
                v53 = (char *)v109[1];
                v54 = (char *)v109[2];
                if (v53 >= v54)
                {
                  v56 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (_BYTE *)*v109) >> 4);
                  v57 = v56 + 1;
                  if (v56 + 1 > 0x333333333333333)
                    goto LABEL_123;
                  v58 = 0xCCCCCCCCCCCCCCCDLL * ((v54 - (_BYTE *)*v109) >> 4);
                  if (2 * v58 > v57)
                    v57 = 2 * v58;
                  if (v58 >= 0x199999999999999)
                    v59 = 0x333333333333333;
                  else
                    v59 = v57;
                  if (v59)
                    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(v109 + 2), v59);
                  else
                    v60 = 0;
                  v61 = &v60[80 * v56];
                  *(_OWORD *)v61 = v139;
                  *((_QWORD *)v61 + 2) = v140;
                  *((_QWORD *)v61 + 3) = v120;
                  v61[32] = v121;
                  *((_DWORD *)v61 + 9) = *(_DWORD *)&v138[3];
                  *(_DWORD *)(v61 + 33) = *(_DWORD *)v138;
                  *((_QWORD *)v61 + 5) = v37;
                  *((_QWORD *)v61 + 6) = v38;
                  *((_QWORD *)v61 + 7) = v41;
                  *((_QWORD *)v61 + 8) = v110;
                  *((_DWORD *)v61 + 18) = v44;
                  v61[76] = v43;
                  v61[77] = 1;
                  v63 = (char *)*v109;
                  v62 = (char *)v109[1];
                  v64 = v61;
                  if (v62 != *v109)
                  {
                    do
                    {
                      *((_OWORD *)v64 - 5) = *((_OWORD *)v62 - 5);
                      v65 = *((_OWORD *)v62 - 4);
                      v66 = *((_OWORD *)v62 - 3);
                      v67 = *((_OWORD *)v62 - 2);
                      *(_OWORD *)(v64 - 18) = *(_OWORD *)(v62 - 18);
                      *((_OWORD *)v64 - 3) = v66;
                      *((_OWORD *)v64 - 2) = v67;
                      *((_OWORD *)v64 - 4) = v65;
                      v64 -= 80;
                      v62 -= 80;
                    }
                    while (v62 != v63);
                    v62 = (char *)*v109;
                  }
                  v55 = v61 + 80;
                  *v109 = v64;
                  v109[1] = v61 + 80;
                  v109[2] = &v60[80 * v59];
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  *(_OWORD *)v53 = v139;
                  *((_QWORD *)v53 + 2) = v140;
                  *((_QWORD *)v53 + 3) = v120;
                  v53[32] = v121;
                  *(_DWORD *)(v53 + 33) = *(_DWORD *)v138;
                  *((_DWORD *)v53 + 9) = *(_DWORD *)&v138[3];
                  *((_QWORD *)v53 + 5) = v37;
                  *((_QWORD *)v53 + 6) = v38;
                  *((_QWORD *)v53 + 7) = v41;
                  *((_QWORD *)v53 + 8) = v110;
                  *((_DWORD *)v53 + 18) = v44;
                  v53[76] = v43;
                  v55 = v53 + 80;
                  v53[77] = 1;
                }
                v109[1] = v55;
                v32 = v117;
              }
            }
          }
          goto LABEL_87;
        }
        v44 = v105;
        if (WUCost <= 1)
          goto LABEL_51;
      }
LABEL_87:
      v41 *= 2;
      if (v41 > v123)
        goto LABEL_88;
    }
  }
LABEL_90:
  if (*v109 != v109[1])
    return 0;
  v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v74)
    ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates(v74, v75, v76);
  return 3;
}

void sub_206EFFED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)&a35);
  _Unwind_Resume(a1);
}

uint64_t ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _OWORD *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t Hal;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  MirInfoChannelAssignment *v17;
  uint64_t OCGSize;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  ZinKernelSparsityCache *KernelSparsityCache;
  float v26;
  int v27;
  _BYTE *v28;
  ZinANELayer *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  ZinIrHalParameters *v34;
  _QWORD *v35;
  char v41;
  char v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  _BOOL4 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t PreferredShPref;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v61;
  MirInfoChannelAssignment *v62;
  ZinIrTarget *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  char v70;
  unint64_t v71;
  unsigned int *TileSrc;
  unint64_t WUCost;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  ZinANELayer *v78;
  _BYTE *v79;
  BOOL v80;
  char v81;
  _QWORD *v82;
  _BOOL4 v83;
  int v84;
  __int128 v85;
  int v86;
  int v87;
  uint64_t ActiveNEPerCluster;
  char v89;
  unsigned int v90;
  __int16 v91;
  int v92;
  uint64_t v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  ZinANELayer *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _BOOL4 IsMulticastEnabled;
  double v106;
  double v107;
  double v108;
  int v109;
  double v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  MirInfoChannelAssignment *v116;
  uint64_t v117;
  MirInfoChannelAssignment *v118;
  int v119;
  double v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  double v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  double v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  double *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t *v155;
  _OWORD *v156;
  uint64_t Lut;
  unsigned __int8 FatTileEnable;
  int v159;
  char *v160;
  _BYTE *v161;
  ZinIrHalParameters *v162;
  __int128 v163;
  unint64_t v164;
  ZinANELayer *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  uint64_t (**v169)(ZinNECustomPerfInfo *__hidden, const ZinEngineLayerMirInfo *);
  char v170;
  __int128 v171;
  _BYTE v172[23];
  char v173;
  int v174;
  char v175;
  __int16 v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  __int16 v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  uint64_t v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  char v211;
  char v212;
  char v213;
  __int16 v214;
  void *v215;
  void *v216;
  uint64_t v217;
  __int16 v218;
  int v219;
  char v220;
  __int16 v221;
  uint64_t v222;
  char v223;
  __int16 v224;
  char v225;
  char v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  char v234;
  float v235;
  char v236;
  char v237;
  char v238;
  __int16 v239;
  uint64_t v240;
  char v241;
  int v242;
  _OWORD v243[2];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  void *__p;
  void *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  unint64_t v264;
  char v265;
  unint64_t v266;
  __int128 v267[21];
  uint64_t v268;
  char v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  char v275;
  void *v276;
  void *v277;
  _QWORD v278[2];
  char v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  int v286;
  char v287;
  char v288;
  _OWORD v289[2];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  void *v301;
  void *v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  char v314;
  uint64_t v315;
  char v316;
  char v317;
  char v318;
  char v319;
  char v320;
  char v321;
  char v322;
  char v323;
  char v324;
  char v325;
  char v326;
  char v327;
  char v328;
  char v329;
  char v330;
  char v331;
  char v332;
  char v333;
  char v334;
  __int16 v335;
  __int128 v336;
  uint64_t v337;
  __int16 v338;
  char v339;
  char v340;
  __int16 v341;
  char v342;
  char v343;
  __int16 v344;
  char v345;
  char v346;
  char v347;
  char v348;
  char v349;
  char v350;
  char v351;
  char v352;
  char v353;
  char v354;
  char v355;
  char v356;
  char v357;
  char v358;
  __int16 v359;
  char v360;
  char v361;
  int v362;
  _OWORD v363[2];
  _BYTE v364[46];
  __int128 v365[2];
  _BYTE v366[10];
  char v367;
  int v368;
  void *v369;
  _QWORD *v370;
  _OWORD v371[3];
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  uint64_t v381;
  void *v382;
  void *v383;
  _QWORD *v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  unint64_t v390;
  char v391;
  int v392;
  unint64_t v393;
  uint64_t v394;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v156 = v7;
  v160 = v8;
  v159 = v9;
  v11 = v10;
  v12 = (uint64_t *)v0;
  v394 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(v10 + 16);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v13 + 160));
  v162 = (ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v165 = (ZinANELayer *)v11;
  if (*(_DWORD *)(*(_QWORD *)(v11 + 64) + 8) == 93)
  {
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(v11 + 264));
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    v17 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(v11 + 264));
    OCGSize = MirInfoChannelAssignment::GetOCGSize(v17);
    MirInfoChannelAssignment::MirInfoChannelAssignment((MirInfoChannelAssignment *)v363, NumNeededNEs, OCGSize, 0, 0);
    *(int64x2_t *)&v364[8] = vdupq_n_s64(0x10uLL);
    *(_QWORD *)&v364[24] = 16;
    v19 = 0;
    *(_QWORD *)&v364[32] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 368))(v11, 3);
    *(_DWORD *)&v364[40] = 0;
    *(_WORD *)&v364[44] = 256;
    v20 = *(_OWORD *)&v364[16];
    v156[2] = *(_OWORD *)v364;
    v156[3] = v20;
    v21 = v363[1];
    *v156 = v363[0];
    v156[1] = v21;
    *(_OWORD *)((char *)v156 + 62) = *(_OWORD *)&v364[30];
    return v19;
  }
  v22 = *(_QWORD *)(v11 + 136);
  v23 = -1.0;
  v161 = v6;
  v148 = v4;
  v149 = v2;
  v153 = v13;
  if (v22)
  {
    v24 = *(_QWORD *)(v22 + 784);
    if (v24)
    {
      if (**(_BYTE **)(v24 + 40)
        && *(_DWORD *)(v22 + 332)
         * *(_DWORD *)(v22 + 328)
         * *(_DWORD *)(v22 + 336)
         * *(_DWORD *)(v22 + 340)
         * *(_DWORD *)(v22 + 344)
         * *(_DWORD *)(v22 + 348) == 1)
      {
        KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v11 + 16));
        ZinIrKernel::GetSparsityRatio((ZinIrKernel *)v22, 4, KernelSparsityCache);
        if (v26 <= 0.95)
          v23 = v26;
        else
          v23 = -1.0;
      }
    }
  }
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v155 = v12;
  std::vector<ZinMirWorkUnitShapeCandidate>::__init_with_size[abi:ne180100]<ZinMirWorkUnitShapeCandidate*,ZinMirWorkUnitShapeCandidate*>(&v166, (const void *)*v12, v12[1], 0xCCCCCCCCCCCCCCCDLL * ((v12[1] - *v12) >> 4));
  v27 = 0;
  v28 = v366;
  if (v6[2])
  {
    v29 = v165;
    if (v6[3])
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      if (v6[4])
      {
        v30 = *((_QWORD *)v165 + 33);
        ZinMirNERastParamsOpt::FindCandidate((uint64_t *)&v166, *(_QWORD *)(v30 + 120), *(_QWORD *)(v30 + 136), 1u, *(_QWORD *)(v30 + 128), 1u, (char **)&v369);
        v31 = v369;
        if (v369 == v370)
        {
          v27 = 0;
          v19 = 0;
          if (!v369)
            goto LABEL_61;
        }
        else
        {
          *(_WORD *)v366 = 257;
          v366[2] = 1;
          memset(&v366[3], 0, 7);
          v367 = 1;
          v368 = 0x1000000;
          v32 = *((_QWORD *)v165 + 2);
          v33 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v32 + 160));
          v34 = (ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
          ZinIrHalParameters::GetOperationCondition(v34, *(double *)(v32 + 280), *(_DWORD *)(v32 + 288), *(_DWORD *)(v32 + 292), (uint64_t)v365);
          ZinIrPerf::ZinIrPerf((uint64_t)v363, (uint64_t)v34, v365, (uint64_t *)v366);
          v381 = 0;
          v380 = 0u;
          v379 = 0u;
          v378 = 0u;
          v377 = 0u;
          v376 = 0u;
          v375 = 0u;
          v374 = 0u;
          v373 = 0u;
          v372 = 0u;
          memset(v371, 0, sizeof(v371));
          v35 = operator new(8uLL);
          v382 = v35;
          *v35 = 0;
          v384 = v35 + 1;
          v383 = v35 + 1;
          __asm { FMOV            V0.2D, #-1.0 }
          v385 = 0u;
          v386 = _Q0;
          v387 = _Q0;
          v388 = _Q0;
          v163 = _Q0;
          v389 = _Q0;
          v391 = 0;
          v390 = 0;
          v393 = 0;
          BYTE8(v289[0]) = 0;
          LOBYTE(v295) = 0;
          BYTE8(v295) = 0;
          LOBYTE(v304) = 0;
          LOBYTE(v305) = 0;
          v314 = 0;
          LOBYTE(v315) = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
          v319 = 0;
          v320 = 0;
          v321 = 0;
          v322 = 0;
          v323 = 0;
          v324 = 0;
          v325 = 0;
          v326 = 0;
          v327 = 0;
          v328 = 0;
          v329 = 0;
          v330 = 0;
          v331 = 0;
          v332 = 0;
          v333 = 0;
          v334 = 0;
          *(_QWORD *)&v289[0] = &off_24C01F198;
          v335 = 0;
          v339 = 0;
          v340 = 0;
          v341 = 256;
          v336 = 0u;
          v337 = 0;
          v338 = 0;
          v342 = 0;
          v343 = 0;
          v344 = 0;
          v345 = 0;
          v346 = 0;
          v347 = 0;
          v348 = 0;
          v349 = 0;
          v350 = 0;
          v351 = 0;
          v352 = 0;
          v353 = 0;
          v354 = 0;
          v355 = 0;
          v356 = 0;
          v357 = 0;
          v358 = 0;
          v359 = 0;
          v360 = 0;
          v361 = 0;
          v362 = 0;
          if (v161[2])
          {
            v41 = *v161;
            BYTE8(v289[0]) = 0;
            LOBYTE(v291) = 0;
            BYTE8(v291) = 0;
            BYTE12(v291) = 0;
            LOBYTE(v292) = v41;
            BYTE1(v292) = 1;
            BYTE8(v292) = 0;
            LOBYTE(v295) = 1;
            LOBYTE(v293) = 0;
            BYTE8(v293) = 0;
            BYTE8(v294) = 0;
            v42 = v161[1];
            LOBYTE(v305) = 0;
            LOBYTE(v308) = 0;
            BYTE8(v308) = 0;
            BYTE12(v308) = 0;
            LOBYTE(v309) = v42;
            BYTE1(v309) = 1;
            BYTE8(v309) = 0;
            v314 = 1;
            LOBYTE(v310) = 0;
            v311 = 0;
            v313 = 0;
            v315 = *(v370 - 2);
            v316 = 1;
          }
          if (ZinANELayer::CalculatePerf(v165, (ZinIrPerf *)v363, (const ZinCustomPerfInfo *)v289, (ZinPerfDescriptor *)v371))
          {
            v43 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v43)
            {
              ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates(v43, v44, v45);
              v27 = 0;
              v19 = 3;
              v29 = v165;
            }
            else
            {
              v27 = 0;
              v19 = 3;
            }
          }
          else
          {
            v46 = *(double *)&v372 + *((double *)&v372 + 1);
            if (*(double *)&v372 + *((double *)&v372 + 1) < *(double *)&v373)
              v46 = *(double *)&v373;
            if (v46 < *((double *)&v373 + 1))
              v46 = *((double *)&v373 + 1);
            v47 = v46 != *((double *)&v373 + 1) && (v392 == 2 || *((double *)&v371[2] + 1) <= *(double *)&v371[2] * 1.5);
            v19 = 0;
            v27 = 1;
            if (*((_QWORD *)&v375 + 1) <= 0x4000000uLL && *((_QWORD *)&v376 + 1) <= 0x4000000uLL)
            {
              v280 = 0;
              v281 = 0;
              v278[1] = 0;
              v278[0] = 0;
              v279 = 0;
              v288 = 1;
              v48 = *(_QWORD *)(v30 + 128);
              v49 = *(_QWORD *)(v30 + 120);
              v282 = *(_QWORD *)(v30 + 136);
              v283 = v49;
              v50 = *(_QWORD *)(v30 + 200);
              v284 = v48;
              v285 = v50;
              v51 = *(_DWORD *)(v30 + 144);
              v286 = v51;
              v287 = *(_BYTE *)(v30 + 149);
              PreferredShPref = ZinMirNERastParamsOpt::GetPreferredShPref(v165, (uint64_t)v278);
              v53 = PreferredShPref;
              v19 = 0;
              if (PreferredShPref - 1 >= v48)
              {
                v29 = v165;
              }
              else
              {
                v29 = v165;
                if (!v51)
                {
                  if (*(_QWORD *)(v30 + 136) <= PreferredShPref)
                  {
                    v19 = 0;
                  }
                  else
                  {
                    ZinMirNERastParamsOpt::FindCandidate((uint64_t *)&v166, PreferredShPref, PreferredShPref, 1u, 0, 0, (char **)&v276);
                    v54 = v276;
                    if (v276 == v277)
                    {
                      v19 = 0;
                      v29 = v165;
                    }
                    else
                    {
                      ZinMirNERastParamsOpt::PruneAndSortCandidates((uint64_t *)&v276, v53);
                      v56 = *((_QWORD *)v276 + 5);
                      v55 = *((_QWORD *)v276 + 6);
                      v58 = *((_QWORD *)v276 + 7);
                      v57 = *((_QWORD *)v276 + 8);
                      ZinNECustomPerfInfo::ZinNECustomPerfInfo((ZinNECustomPerfInfo *)v267, (const ZinNECustomPerfInfo *)v289);
                      v270 = v56;
                      v271 = 1;
                      v274 = v55;
                      v275 = 1;
                      v272 = v58;
                      v273 = 1;
                      v268 = v57;
                      v269 = 1;
                      v254 = 0;
                      v253 = 0u;
                      v252 = 0u;
                      v251 = 0u;
                      v250 = 0u;
                      v249 = 0u;
                      v248 = 0u;
                      v247 = 0u;
                      v246 = 0u;
                      v245 = 0u;
                      v244 = 0u;
                      memset(v243, 0, sizeof(v243));
                      v59 = operator new(8uLL);
                      __p = v59;
                      *v59 = 0;
                      v257 = v59 + 1;
                      v256 = v59 + 1;
                      v259 = 0;
                      v258 = 0;
                      v260 = v163;
                      v261 = v163;
                      v262 = v163;
                      v263 = v163;
                      v264 = 0;
                      v265 = 0;
                      v266 = 0;
                      ZinIrPerf::ZinIrPerf((uint64_t)&v169, (uint64_t)v34, v365, (uint64_t *)v366);
                      v29 = v165;
                      if (ZinANELayer::CalculatePerf(v165, (ZinIrPerf *)&v169, (const ZinCustomPerfInfo *)v267, (ZinPerfDescriptor *)v243))
                      {
                        v19 = 3;
                      }
                      else
                      {
                        if (v390 < v264 || v393 < v266 || *((double *)&v371[2] + 1) < *((double *)&v244 + 1))
                          v47 = 0;
                        v19 = 0;
                      }
                      ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&v169);
                      if (__p)
                      {
                        v256 = __p;
                        operator delete(__p);
                      }
                      ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)v267);
                      v54 = v276;
                    }
                    if (v54)
                    {
                      v277 = v54;
                      operator delete(v54);
                    }
                  }
                }
              }
              v27 = v47;
            }
          }
          *(_QWORD *)&v289[0] = &off_24C01F198;
          if ((_QWORD)v336)
          {
            *((_QWORD *)&v336 + 1) = v336;
            operator delete((void *)v336);
          }
          ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v289);
          if (v382)
          {
            v383 = v382;
            operator delete(v382);
          }
          ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v363);
          v31 = v369;
          if (!v369)
            goto LABEL_61;
        }
        v370 = v31;
        operator delete(v31);
      }
    }
  }
  else
  {
    v19 = 0;
    v29 = v165;
  }
LABEL_61:
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if ((_DWORD)v19)
    return v19;
  v147 = v27;
  v61 = *(_QWORD *)(v155[1] - 16);
  v62 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v29 + 33));
  FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v62);
  v63 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v165 + 33));
  Lut = ZinIrTarget::GetLut(v63);
  v64 = *v155;
  v65 = v155[1];
  if (*v155 == v65)
  {
    v164 = -1;
  }
  else
  {
    v164 = -1;
    do
    {
      if (*(_QWORD *)(v64 + 64) == v61)
      {
        v66 = *(_QWORD *)(v64 + 40);
        v67 = *(_QWORD *)(v64 + 48);
        v68 = *(_QWORD *)(v64 + 56);
        v69 = *(_DWORD *)(v64 + 72);
        v70 = *(_BYTE *)(v64 + 76);
        v71 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v165 + 368))(v165, 4);
        v28 = (_BYTE *)(*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v165 + 368))(v165, 3);
        TileSrc = (unsigned int *)ZinMirL2Config::GetTileSrc(*((_QWORD *)v165 + 33) + 120, 0);
        WUCost = NERasterization::GetWUCost(v66, v67, v68, v61, v69, v70, v71, (uint64_t)v28, Lut, FatTileEnable, *TileSrc, (uint64_t)v162);
        v74 = v164;
        if (WUCost < v164)
          v74 = WUCost;
        v164 = v74;
      }
      v64 += 80;
    }
    while (v64 != v65);
  }
  LOWORD(v243[0]) = 257;
  BYTE2(v243[0]) = 1;
  *(_DWORD *)((char *)v243 + 6) = 0;
  *(_DWORD *)((char *)v243 + 3) = 0;
  *(_DWORD *)((char *)v243 + 11) = 0;
  *(_DWORD *)((char *)v243 + 10) = *(_DWORD *)(*((_QWORD *)v165 + 8) + 8) != 85;
  ZinIrHalParameters::GetOperationCondition(v162, *(double *)(v153 + 280), *(_DWORD *)(v153 + 288), *(_DWORD *)(v153 + 292), (uint64_t)v267);
  ZinIrPerf::ZinIrPerf((uint64_t)v363, (uint64_t)v162, v267, (uint64_t *)v243);
  v76 = *v155;
  v75 = v155[1];
  if (*v155 == v75)
  {
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v363);
    return 0;
  }
  v151 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v154 = _Q0;
  v78 = v165;
  v79 = v161;
  v152 = v155[1];
  do
  {
    if (*(_BYTE *)(*((_QWORD *)v78 + 2) + 541))
      v80 = *(_QWORD *)(v76 + 40) > 4uLL;
    else
      v80 = 0;
    if (v80)
    {
      v19 = (uint64_t)v28;
      goto LABEL_156;
    }
    v81 = *v160;
    v300 = 0;
    v299 = 0u;
    v298 = 0u;
    v297 = 0u;
    v296 = 0u;
    v295 = 0u;
    v294 = 0u;
    v293 = 0u;
    v292 = 0u;
    v291 = 0u;
    v290 = 0u;
    memset(v289, 0, sizeof(v289));
    v82 = operator new(8uLL);
    v83 = 0;
    v301 = v82;
    *v82 = 0;
    v303 = v82 + 1;
    v302 = v82 + 1;
    v304 = 0;
    v305 = 0;
    v306 = v154;
    v307 = v154;
    v308 = v154;
    v309 = v154;
    v310 = 0;
    v311 = 0;
    v312 = 0;
    v84 = v79[2];
    if (v79[2] && *v79)
      v83 = v79[1] != 0;
    v85 = *(_OWORD *)(v160 + 17);
    v371[0] = *(_OWORD *)(v160 + 1);
    v371[1] = v85;
    *(_QWORD *)((char *)&v371[1] + 15) = *((_QWORD *)v160 + 4);
    v86 = v79[2];
    v87 = *(unsigned __int16 *)v79;
    v170 = 0;
    v181 = 0;
    v182 = 0;
    v183 = 0;
    v184 = 0;
    v193 = 0;
    LOBYTE(v194) = 0;
    v195 = 0;
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v200 = 0;
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v204 = 0;
    v205 = 0;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v169 = &off_24C01F198;
    v214 = 0;
    LOBYTE(v219) = 0;
    v220 = 0;
    v221 = 256;
    v216 = 0;
    v217 = 0;
    v215 = 0;
    v218 = 0;
    LOBYTE(v222) = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v226 = 0;
    LOBYTE(v227) = 0;
    v228 = 0;
    LOBYTE(v229) = 0;
    v230 = 0;
    LOBYTE(v231) = 0;
    v232 = 0;
    LOBYTE(v233) = 0;
    v234 = 0;
    LOBYTE(v235) = 0;
    v236 = 0;
    v237 = 0;
    v238 = 0;
    v239 = 0;
    LOBYTE(v240) = 0;
    v241 = 0;
    v242 = 0;
    LOWORD(v242) = MirInfoChannelAssignment::GetFatTileEnable((MirInfoChannelAssignment *)v76) | 0x100;
    v240 = ZinIrTarget::GetLut((ZinIrTarget *)v76);
    v241 = 1;
    ActiveNEPerCluster = MirInfoChannelAssignment::GetActiveNEPerCluster((MirInfoChannelAssignment *)v76);
    if (!v223)
      v223 = 1;
    v222 = ActiveNEPerCluster;
    v227 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v76);
    v228 = 1;
    v233 = *(_QWORD *)(v76 + 48);
    v234 = 1;
    v229 = *(_QWORD *)(v76 + 40);
    v230 = 1;
    v231 = *(_QWORD *)(v76 + 56);
    v232 = 1;
    v194 = *(_QWORD *)(v76 + 64);
    v195 = 1;
    v219 = *(_DWORD *)(v76 + 72);
    v220 = 1;
    v89 = *(_BYTE *)(v76 + 76);
    if (!HIBYTE(v221))
      HIBYTE(v221) = 1;
    LOBYTE(v221) = v89;
    if (v23 > 0.0)
    {
      v235 = v23;
      v236 = 1;
    }
    v170 = v81;
    v90 = v87 | (v86 << 16);
    v171 = v371[0];
    *(_OWORD *)v172 = v371[1];
    *(_QWORD *)&v172[15] = *(_QWORD *)((char *)&v371[1] + 15);
    v173 = 1;
    v174 = v159;
    v175 = 1;
    v91 = v87 | 0x100;
    if (v90 < 0x10000)
      v91 = 0;
    v176 = v91;
    v177 = 0;
    if (!v181)
      v181 = 1;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    if (v90 >= 0x10000)
    {
      v184 = 0;
      v185 = 0;
      v186 = 0;
      v187 = 0;
      v188 = BYTE1(v87) | 0x100;
      v189 = 0;
      if (!v193)
        v193 = 1;
      v190 = 0;
      v191 = 0;
      v192 = 0;
    }
    v92 = ZinANELayer::CalculatePerf(v78, (ZinIrPerf *)v363, (const ZinCustomPerfInfo *)&v169, (ZinPerfDescriptor *)v289);
    if (v92)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates((uint8_t *)v365, (_BYTE *)v365 + 1, v93);
        v94 = 0;
        v19 = 3;
        v78 = v165;
      }
      else
      {
        v94 = 0;
        v19 = 3;
      }
    }
    else
    {
      v95 = (double)*((unint64_t *)&v296 + 1) / *(double *)&v364[32] * 1000.0;
      v96 = *(double *)&v290;
      v97 = (double)(unint64_t)v293 / *(double *)&v364[24];
      v98 = v97 * 1000.0;
      if (v97 * 1000.0 >= v95)
        v99 = v97 * 1000.0;
      else
        v99 = (double)*((unint64_t *)&v296 + 1) / *(double *)&v364[32] * 1000.0;
      v100 = v298;
      v101 = v78;
      v103 = *(_QWORD *)(v76 + 48);
      v102 = *(_QWORD *)(v76 + 56);
      v104 = *(_QWORD *)(v76 + 64);
      if (!*(_DWORD *)(*((_QWORD *)v101 + 33) + 144) && (unint64_t)v298 / v164 != 1)
        LODWORD(v104) = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(_QWORD *)v165 + 368))(v165, 3);
      v150 = *(unsigned __int8 *)(v76 + 77);
      IsMulticastEnabled = MirInfoChannelAssignment::IsMulticastEnabled((MirInfoChannelAssignment *)v76);
      v106 = (double)(v102 / v103);
      v107 = *((double *)&v292 + 1);
      if (v95 >= v98)
        v108 = v95;
      else
        v108 = v98;
      if (v108 < v96)
        v108 = v96;
      if (!IsMulticastEnabled)
        v107 = 0.0;
      if (v84)
      {
        v109 = -(int)v104;
        v110 = v108 + v107;
        v78 = v165;
        if (v147 && v161[4])
        {
          FifoMode::GetFifoModeUtil(v162, v278);
          v111 = v109;
          if (!(*(unsigned int (**)(_QWORD, ZinANELayer *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v278[0] + 24))(v278[0], v165, v148, v149, *(_QWORD *)(v76 + 48), *(_QWORD *)(v76 + 56), *(_QWORD *)(v76 + 40), *(unsigned int *)(v76 + 72), *(unsigned __int8 *)(v76 + 76)))goto LABEL_130;
          v78 = v165;
          if (!(*(unsigned int (**)(ZinANELayer *))(*(_QWORD *)v165 + 408))(v165))
            goto LABEL_130;
          v112 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)v165 + 2) + 160));
          v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
          v114 = *(_QWORD *)(v76 + 40);
          v115 = *(_QWORD *)(v113 + 592);
          v116 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v165
                                                                                         + 33));
          v117 = MirInfoChannelAssignment::GetNumNeededNEs(v116);
          v118 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v165
                                                                                         + 33));
          v80 = v115 / v114 > MirInfoChannelAssignment::GetOCGSize(v118) * v117;
          v78 = v165;
          if (v80)
          {
            v119 = v111;
            v120 = 1.79769313e308 / (double)*(unint64_t *)(v76 + 40);
          }
          else
          {
LABEL_130:
            v130 = ZinMirNERastParamsOpt::GetPreferredShPref(v78, v76);
            v119 = v111;
            if (v130)
            {
              v131 = *(_QWORD *)(v76 + 40);
              v120 = 1.0;
              v78 = v165;
              if (v131 > v130)
                v120 = (double)(v131 / v130);
            }
            else
            {
              v120 = 1.79769313e308;
              v78 = v165;
            }
          }
          v137 = operator new();
          v94 = (double *)v137;
          v138 = (double)v100;
          v139 = (double)v119;
          v140 = v96 + v99;
          v141 = 1.0;
          if (v150)
            v141 = 0.0;
          *(_QWORD *)v137 = &unk_24C02BD38;
          *(double *)(v137 + 56) = v120;
          *(double *)(v137 + 64) = v110;
          *(double *)(v137 + 72) = v140;
          *(double *)(v137 + 80) = v138;
          *(double *)(v137 + 88) = v141;
          *(double *)(v137 + 96) = v139;
          *(double *)(v137 + 8) = v120;
          *(double *)(v137 + 16) = v110;
          *(double *)(v137 + 24) = v140;
          *(double *)(v137 + 32) = v138;
          *(double *)(v137 + 40) = v141;
          *(double *)(v137 + 48) = v139;
          v142 = v278[0];
          v278[0] = 0;
          if (v142)
            (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
          v19 = 0;
        }
        else if (v83)
        {
          v125 = operator new();
          v94 = (double *)v125;
          v19 = 0;
          v126 = (double)v109;
          v127 = (double)v100;
          v128 = v96 + v99;
          *(_QWORD *)v125 = &unk_24C02BD78;
          v129 = 1.0;
          if (v150)
            v129 = 0.0;
          *(double *)(v125 + 56) = v126;
          *(double *)(v125 + 64) = v110;
          *(double *)(v125 + 72) = v128;
          *(double *)(v125 + 80) = v106;
          *(double *)(v125 + 88) = v127;
          *(double *)(v125 + 96) = v129;
          *(double *)(v125 + 8) = v126;
          *(double *)(v125 + 16) = v110;
          *(double *)(v125 + 24) = v128;
          *(double *)(v125 + 32) = v106;
          *(double *)(v125 + 40) = v127;
          *(double *)(v125 + 48) = v129;
        }
        else
        {
          v132 = operator new();
          v94 = (double *)v132;
          v19 = 0;
          v133 = (double)v100;
          v134 = (double)v109;
          v135 = v96 + v99;
          *(_QWORD *)v132 = &unk_24C02BD18;
          v136 = 1.0;
          if (v150)
            v136 = 0.0;
          *(double *)(v132 + 56) = v110;
          *(double *)(v132 + 64) = v135;
          *(double *)(v132 + 72) = v106;
          *(double *)(v132 + 80) = v133;
          *(double *)(v132 + 88) = v136;
          *(double *)(v132 + 96) = v134;
          *(double *)(v132 + 8) = v110;
          *(double *)(v132 + 16) = v135;
          *(double *)(v132 + 24) = v106;
          *(double *)(v132 + 32) = v133;
          *(double *)(v132 + 40) = v136;
          *(double *)(v132 + 48) = v134;
        }
      }
      else
      {
        v121 = operator new();
        v78 = v165;
        v94 = (double *)v121;
        v19 = 0;
        v122 = (double)v100;
        v123 = v95 + v98;
        *(_QWORD *)(v121 + 48) = 0x7FEFFFFFFFFFFFFFLL;
        v124 = 1.0;
        if (v150)
          v124 = 0.0;
        *(_QWORD *)v121 = &unk_24C02BD58;
        *(double *)(v121 + 56) = v99;
        *(double *)(v121 + 64) = v123;
        *(double *)(v121 + 72) = v106;
        *(double *)(v121 + 80) = v122;
        *(double *)(v121 + 88) = v124;
        *(double *)(v121 + 8) = v99;
        *(double *)(v121 + 16) = v123;
        *(double *)(v121 + 24) = v106;
        *(double *)(v121 + 32) = v122;
        *(double *)(v121 + 40) = v124;
      }
    }
    v169 = &off_24C01F198;
    if (v215)
    {
      v216 = v215;
      operator delete(v215);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v169);
    if (v301)
    {
      v302 = v301;
      operator delete(v301);
    }
    v79 = v161;
    if (v92)
    {
      if (!v94)
        goto LABEL_149;
LABEL_148:
      (*(void (**)(double *))(*(_QWORD *)v94 + 8))(v94);
      goto LABEL_149;
    }
    if (!v151)
      goto LABEL_155;
    v143 = (char)std::__tuple_compare_three_way[abi:ne180100]<double,double,double,double,double,double,double,double,double,double,double,double,0ul,1ul,2ul,3ul,4ul,5ul>(v94 + 1, v151 + 1);
    if (v143 != -127 && v143 < 0)
    {
      (*(void (**)(double *))(*(_QWORD *)v151 + 8))(v151);
LABEL_155:
      *v156 = *(_OWORD *)v76;
      v144 = *(_OWORD *)(v76 + 16);
      v145 = *(_OWORD *)(v76 + 32);
      v146 = *(_OWORD *)(v76 + 48);
      *(_OWORD *)((char *)v156 + 62) = *(_OWORD *)(v76 + 62);
      v156[2] = v145;
      v156[3] = v146;
      v156[1] = v144;
      v19 = (uint64_t)v28;
      v151 = v94;
      v75 = v152;
      goto LABEL_156;
    }
    v19 = (uint64_t)v28;
    if (v94)
      goto LABEL_148;
LABEL_149:
    v75 = v152;
    if (v92)
      goto LABEL_160;
LABEL_156:
    v76 += 80;
    v28 = (_BYTE *)v19;
  }
  while (v76 != v75);
  v19 = 0;
LABEL_160:
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v363);
  if (v151)
    (*(void (**)(double *))(*(_QWORD *)v151 + 8))(v151);
  return v19;
}

void sub_206F011D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a42);
  v43 = (void *)STACK[0x538];
  if (STACK[0x538])
  {
    STACK[0x540] = (unint64_t)v43;
    operator delete(v43);
  }
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x5C0]);
  v44 = (void *)STACK[0x898];
  if (STACK[0x898])
  {
    STACK[0x8A0] = (unint64_t)v44;
    operator delete(v44);
  }
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x900]);
  v45 = (void *)STACK[0x1058];
  if (STACK[0x1058])
  {
    STACK[0x1060] = (unint64_t)v45;
    operator delete(v45);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0xBD8]);
  v46 = (void *)STACK[0xF78];
  if (STACK[0xF78])
  {
    STACK[0xF80] = (unint64_t)v46;
    operator delete(v46);
  }
  if (a39)
    operator delete(a39);
  _Unwind_Resume(a1);
}

BOOL ZinMirNERastParamsOpt::CheckAvailabilityForSmallerTileHeightThanWorkHeight(ZinMirNERastParamsOpt *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  uint64_t v3;
  ZinIrTensor *InputTensor;

  v3 = *((_QWORD *)this + 33);
  if (*(_BYTE *)(v3 + 233) || *(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
    return 0;
  if (*((_BYTE *)a2 + 640))
  {
    InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    if (ZinIrTensor::IsResident(InputTensor))
      return 0;
    v3 = *((_QWORD *)this + 33);
  }
  return *(_DWORD *)(v3 + 144) != 1;
}

void ZinMirNERastParamsOpt::EnumerateTileWorkUnitCandidates(ZinMirNERastParamsOpt *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X8>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t Hal;
  const ZinNELayer *v17;
  const ZinIrHalParameters *v18;
  _BOOL4 v19;
  unint64_t Pow2;
  void *__p;
  char *v22;
  uint64_t v23;

  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v14 = 16;
  if (a5 < 0x10)
    v14 = a5;
  if (a7)
    v15 = v14;
  else
    v15 = a4;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a1 + 2) + 160));
  v17 = (const ZinNELayer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v19 = !ZinMirNERastParamsOpt::CheckAvailabilityForSmallerTileHeightThanWorkHeight(a1, v17, v18);
  if (v15 >= a5)
    LOBYTE(v19) = 1;
  if (!v19)
  {
    do
    {
      __p = 0;
      v22 = 0;
      v23 = 0;
      ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates((uint64_t)a1, a2, a3, (char **)&__p, v15, 1u);
      std::vector<ZinMirWorkUnitShapeCandidate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>>((uint64_t)a8, a8[1], (char *)__p, v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)__p) >> 4));
      if (__p)
      {
        v22 = (char *)__p;
        operator delete(__p);
      }
      if (a5 / a6 < 0x65)
        Pow2 = ZinRoundDownToMultipleOf(v15 + a6, a6);
      else
        Pow2 = ZinRoundUpToNextPow2(v15 + 1);
      v15 = Pow2;
    }
    while (Pow2 < a5);
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates((uint64_t)a1, a2, a3, (char **)&__p, a5, 1u);
  std::vector<ZinMirWorkUnitShapeCandidate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>>((uint64_t)a8, a8[1], (char *)__p, v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)__p) >> 4));
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206F01554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void ZinMirNERastParamsOpt::CostWithoutResidencyMode::~CostWithoutResidencyMode(ZinMirNERastParamsOpt::CostWithoutResidencyMode *this)
{
  JUMPOUT(0x20BD002F8);
}

void ZinMirNERastParamsOpt::CostWidenWorkunitsMode::~CostWidenWorkunitsMode(ZinMirNERastParamsOpt::CostWidenWorkunitsMode *this)
{
  JUMPOUT(0x20BD002F8);
}

void ZinMirNERastParamsOpt::FindCandidate(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, char **a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    v13 = 0;
    v14 = a4;
    v15 = a6;
    v16 = a7 + 2;
    v35 = a7 + 2;
    do
    {
      if (*(_QWORD *)(v7 + 40) != a2)
        goto LABEL_31;
      if (v14)
      {
        v17 = a3 == *(_QWORD *)(v7 + 48);
        if (!v15)
        {
          if (a3 == *(_QWORD *)(v7 + 48))
            goto LABEL_12;
          goto LABEL_31;
        }
      }
      else
      {
        if (!v15)
          goto LABEL_12;
        v17 = 1;
      }
      if (a5 == *(_QWORD *)(v7 + 56) && v17)
      {
LABEL_12:
        if ((unint64_t)v13 >= *v16)
        {
          v21 = *a7;
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a7) >> 4);
          v23 = v22 + 1;
          if (v22 + 1 > 0x333333333333333)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(*v16 - (_QWORD)v21) >> 4) > v23)
            v23 = 0x999999999999999ALL * ((uint64_t)(*v16 - (_QWORD)v21) >> 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v16 - (_QWORD)v21) >> 4) >= 0x199999999999999)
            v24 = 0x333333333333333;
          else
            v24 = v23;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v16, v24);
            v21 = *a7;
            v13 = a7[1];
            v16 = v35;
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[80 * v22];
          *(_OWORD *)v26 = *(_OWORD *)v7;
          v27 = *(_OWORD *)(v7 + 16);
          v28 = *(_OWORD *)(v7 + 32);
          v29 = *(_OWORD *)(v7 + 64);
          *((_OWORD *)v26 + 3) = *(_OWORD *)(v7 + 48);
          *((_OWORD *)v26 + 4) = v29;
          *((_OWORD *)v26 + 1) = v27;
          *((_OWORD *)v26 + 2) = v28;
          if (v13 == v21)
          {
            v34 = &v25[80 * v22];
          }
          else
          {
            v30 = &v25[80 * v22];
            do
            {
              *((_OWORD *)v30 - 5) = *((_OWORD *)v13 - 5);
              v31 = *((_OWORD *)v13 - 4);
              v32 = *((_OWORD *)v13 - 3);
              v33 = *((_OWORD *)v13 - 2);
              v34 = v30 - 80;
              *(_OWORD *)(v30 - 18) = *(_OWORD *)(v13 - 18);
              *((_OWORD *)v30 - 3) = v32;
              *((_OWORD *)v30 - 2) = v33;
              *((_OWORD *)v30 - 4) = v31;
              v13 -= 80;
              v30 -= 80;
            }
            while (v13 != v21);
          }
          v13 = v26 + 80;
          *a7 = v34;
          a7[1] = v26 + 80;
          a7[2] = &v25[80 * v24];
          if (v21)
          {
            operator delete(v21);
            v16 = v35;
          }
        }
        else
        {
          *(_OWORD *)v13 = *(_OWORD *)v7;
          v18 = *(_OWORD *)(v7 + 16);
          v19 = *(_OWORD *)(v7 + 32);
          v20 = *(_OWORD *)(v7 + 64);
          *((_OWORD *)v13 + 3) = *(_OWORD *)(v7 + 48);
          *((_OWORD *)v13 + 4) = v20;
          *((_OWORD *)v13 + 1) = v18;
          *((_OWORD *)v13 + 2) = v19;
          v13 += 80;
        }
        a7[1] = v13;
      }
LABEL_31:
      v7 += 80;
    }
    while (v7 != v8);
  }
}

void sub_206F017D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirNERastParamsOpt::GetPreferredShPref(_QWORD *a1, uint64_t a2)
{
  uint64_t Hal;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1[2] + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = v6 >= *(_QWORD *)(a1[33] + 200) >> 1 || v6 >= 0x10;
  if (v7 && *(_QWORD *)(a2 + 40) < *(_QWORD *)(v5 + 656))
    return 2 * (a1[25] == 0);
  else
    return 0;
}

void ZinMirNERastParamsOpt::PruneAndSortCandidates(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;

  v3 = *a1;
  v4 = (_OWORD *)a1[1];
  v5 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v4 - v3) >> 4));
  v15 = a2;
  if (v4 == (_OWORD *)v3)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*,false>(v3, v4, v6, 1);
  v8 = (char *)*a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    v10 = (char *)a1[1];
  }
  else
  {
    v9 = *(_QWORD *)(v7 - 16);
    v10 = (char *)a1[1];
    do
    {
      if (*((_QWORD *)v8 + 8) == v9)
      {
        v8 += 80;
      }
      else
      {
        v11 = v10 - (v8 + 80);
        if (v10 != v8 + 80)
          memmove(v8, v8 + 80, v11 - 2);
        v10 = &v8[v11];
        a1[1] = (uint64_t)&v8[v11];
      }
    }
    while (v8 != v10);
    v7 = *a1;
  }
  v14 = &v15;
  v16 = &v14;
  v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-v7] >> 4));
  if (v10 == (char *)v7)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,false>(v7, v10, (int ***)&v16, v13, 1);
}

void ZinNECustomPerfInfo::ZinNECustomPerfInfo(ZinNECustomPerfInfo *this, const ZinNECustomPerfInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)this = &unk_24C01CAB0;
  memcpy((char *)this + 8, (char *)a2 + 8, 0x201uLL);
  *(_QWORD *)this = &off_24C01F198;
  *((_WORD *)this + 264) = *((_WORD *)a2 + 264);
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 67) = 0;
  std::vector<WorkUnit>::__init_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>((_QWORD *)this + 67, *((const void **)a2 + 67), *((_QWORD *)a2 + 68), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 68) - *((_QWORD *)a2 + 67)) >> 4));
  v4 = *((_OWORD *)a2 + 35);
  v5 = *((_OWORD *)a2 + 37);
  *((_OWORD *)this + 36) = *((_OWORD *)a2 + 36);
  *((_OWORD *)this + 37) = v5;
  *((_OWORD *)this + 35) = v4;
  v6 = *((_OWORD *)a2 + 38);
  v7 = *((_OWORD *)a2 + 39);
  v8 = *((_OWORD *)a2 + 41);
  *((_OWORD *)this + 40) = *((_OWORD *)a2 + 40);
  *((_OWORD *)this + 41) = v8;
  *((_OWORD *)this + 38) = v6;
  *((_OWORD *)this + 39) = v7;
  v9 = *((_OWORD *)a2 + 42);
  v10 = *((_OWORD *)a2 + 43);
  v11 = *((_OWORD *)a2 + 44);
  *((_DWORD *)this + 180) = *((_DWORD *)a2 + 180);
  *((_OWORD *)this + 43) = v10;
  *((_OWORD *)this + 44) = v11;
  *((_OWORD *)this + 42) = v9;
}

void sub_206F01A44(_Unwind_Exception *a1)
{
  ZinIrHalH13g *v1;

  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD *v72;
  BOOL v74;
  uint64_t v75;
  _QWORD *v76;
  _OWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int64_t v103;
  uint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD *v127;
  unint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 v131;
  __int128 v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _BYTE v182[32];
  _BYTE v183[32];
  _BYTE v184[32];
  _BYTE v185[32];
  _BYTE v186[32];
  _BYTE v187[32];
  _BYTE v188[32];
  _BYTE v189[32];
  __int128 v190;
  __int128 v191;
  _BYTE v192[32];
  __int128 v193;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[32];

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a3 + 64);
  if (v3 >= *((_QWORD *)a1 + 8))
  {
    if (v4 < v3)
    {
      v30 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v34 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v34[16] = *(_OWORD *)(a2 + 64);
      v22 = *(__n128 *)a2;
      v26 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v9 = *(_OWORD *)(a3 + 32);
      v8 = *(_OWORD *)(a3 + 48);
      v10 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v9;
      *(_OWORD *)(a2 + 48) = v8;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v34[14];
      *(_OWORD *)(a3 + 32) = v30;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v34;
      result = v22;
      *(__n128 *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v26;
      if (*(_QWORD *)(a2 + 64) < *((_QWORD *)a1 + 8))
      {
        v31 = a1[2];
        *(_OWORD *)v35 = a1[3];
        *(_OWORD *)&v35[16] = a1[4];
        v23 = *(__n128 *)a1;
        v27 = a1[1];
        *a1 = *(_OWORD *)a2;
        v13 = *(_OWORD *)(a2 + 32);
        v12 = *(_OWORD *)(a2 + 48);
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)a1 + 62) = *(_OWORD *)(a2 + 62);
        a1[2] = v13;
        a1[3] = v12;
        a1[1] = v14;
        *(_OWORD *)(a2 + 62) = *(_OWORD *)&v35[14];
        *(_OWORD *)(a2 + 32) = v31;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v35;
        result = v23;
        *(__n128 *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v27;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v32 = a1[2];
      *(_OWORD *)v36 = a1[3];
      *(_OWORD *)&v36[16] = a1[4];
      v24 = *(__n128 *)a1;
      v28 = a1[1];
      *a1 = *(_OWORD *)a2;
      v16 = *(_OWORD *)(a2 + 32);
      v15 = *(_OWORD *)(a2 + 48);
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)a1 + 62) = *(_OWORD *)(a2 + 62);
      a1[2] = v16;
      a1[3] = v15;
      a1[1] = v17;
      *(_OWORD *)(a2 + 62) = *(_OWORD *)&v36[14];
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v36;
      result = v24;
      *(__n128 *)a2 = v24;
      *(_OWORD *)(a2 + 16) = v28;
      if (*(_QWORD *)(a3 + 64) >= *(_QWORD *)(a2 + 64))
        return result;
      v29 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v33 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v33[16] = *(_OWORD *)(a2 + 64);
      v21 = *(__n128 *)a2;
      v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v19 = *(_OWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a3 + 48);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v19;
      *(_OWORD *)(a2 + 48) = v18;
      *(_OWORD *)(a2 + 16) = v20;
    }
    else
    {
      v29 = a1[2];
      *(_OWORD *)v33 = a1[3];
      *(_OWORD *)&v33[16] = a1[4];
      v21 = *(__n128 *)a1;
      v25 = a1[1];
      *a1 = *(_OWORD *)a3;
      v6 = *(_OWORD *)(a3 + 32);
      v5 = *(_OWORD *)(a3 + 48);
      v7 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)a1 + 62) = *(_OWORD *)(a3 + 62);
      a1[2] = v6;
      a1[3] = v5;
      a1[1] = v7;
    }
    *(_OWORD *)(a3 + 62) = *(_OWORD *)&v33[14];
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v33;
    result = v21;
    *(__n128 *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v25;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[32];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 16) < *(_QWORD *)(a1 + 64))
      {
        v44 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v50 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v50[16] = *(_OWORD *)(a1 + 64);
        v32 = *(_OWORD *)a1;
        v38 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v7 = *(_OWORD *)(a2 - 48);
        v6 = *(_OWORD *)(a2 - 32);
        v8 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 - 18);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 18) = *(_OWORD *)&v50[14];
        *(_OWORD *)(a2 - 48) = v44;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v50;
        *(_OWORD *)(a2 - 80) = v32;
        *(_OWORD *)(a2 - 64) = v38;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), a2 - 80);
      return 1;
    case 5uLL:
      v20 = (__int128 *)(a1 + 80);
      v21 = (__int128 *)(a1 + 160);
      v22 = (__int128 *)(a1 + 240);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), a1 + 240);
      if (*(_QWORD *)(a2 - 16) >= *(_QWORD *)(a1 + 304))
        return 1;
      v46 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)v52 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 304);
      v34 = *v22;
      v40 = *(_OWORD *)(a1 + 256);
      *v22 = *(_OWORD *)(a2 - 80);
      v24 = *(_OWORD *)(a2 - 48);
      v23 = *(_OWORD *)(a2 - 32);
      v25 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 302) = *(_OWORD *)(a2 - 18);
      *(_OWORD *)(a1 + 272) = v24;
      *(_OWORD *)(a1 + 288) = v23;
      *(_OWORD *)(a1 + 256) = v25;
      *(_OWORD *)(a2 - 18) = *(_OWORD *)&v52[14];
      *(_OWORD *)(a2 - 48) = v46;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v52;
      *(_OWORD *)(a2 - 80) = v34;
      *(_OWORD *)(a2 - 64) = v40;
      if (*(_QWORD *)(a1 + 304) >= *(_QWORD *)(a1 + 224))
        return 1;
      v47 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)v53 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)&v53[16] = *(_OWORD *)(a1 + 224);
      v35 = *v21;
      v41 = *(_OWORD *)(a1 + 176);
      v26 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v26;
      *(_OWORD *)(a1 + 222) = *(_OWORD *)(a1 + 302);
      v27 = *(_OWORD *)(a1 + 256);
      *v21 = *v22;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 302) = *(_OWORD *)&v53[14];
      *(_OWORD *)(a1 + 272) = v47;
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v53;
      *v22 = v35;
      *(_OWORD *)(a1 + 256) = v41;
      if (*(_QWORD *)(a1 + 224) >= *(_QWORD *)(a1 + 144))
        return 1;
      v48 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)v54 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)&v54[16] = *(_OWORD *)(a1 + 144);
      v36 = *v20;
      v42 = *(_OWORD *)(a1 + 96);
      v28 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v28;
      *(_OWORD *)(a1 + 142) = *(_OWORD *)(a1 + 222);
      v29 = *(_OWORD *)(a1 + 176);
      *v20 = *v21;
      *(_OWORD *)(a1 + 96) = v29;
      *(_OWORD *)(a1 + 222) = *(_OWORD *)&v54[14];
      *(_OWORD *)(a1 + 192) = v48;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v54;
      *v21 = v36;
      *(_OWORD *)(a1 + 176) = v42;
      if (*(_QWORD *)(a1 + 144) >= *(_QWORD *)(a1 + 64))
        return 1;
      v49 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v55 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v55[16] = *(_OWORD *)(a1 + 64);
      v37 = *(_OWORD *)a1;
      v43 = *(_OWORD *)(a1 + 16);
      v30 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v30;
      *(_OWORD *)(a1 + 62) = *(_OWORD *)(a1 + 142);
      v31 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 16) = v31;
      *(_OWORD *)(a1 + 142) = *(_OWORD *)&v55[14];
      *(_OWORD *)(a1 + 112) = v49;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)v55;
      result = 1;
      *v20 = v37;
      *(_OWORD *)(a1 + 96) = v43;
      return result;
    default:
      v9 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)a1, a1 + 80, a1 + 160);
      v10 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v10 + 64);
    if (v13 < *(_QWORD *)(v9 + 64))
    {
      v33 = *(_OWORD *)v10;
      v39 = *(_OWORD *)(v10 + 16);
      v45 = *(_OWORD *)(v10 + 32);
      v51 = *(_OWORD *)(v10 + 48);
      v14 = *(_QWORD *)(v10 + 72);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        v17 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 272) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 288) = v17;
        *(_OWORD *)(a1 + v15 + 302) = *(_OWORD *)(a1 + v15 + 222);
        v18 = *(_OWORD *)(a1 + v15 + 176);
        *(_OWORD *)(v16 + 240) = *(_OWORD *)(a1 + v15 + 160);
        *(_OWORD *)(v16 + 256) = v18;
        if (v15 == -160)
          break;
        v15 -= 80;
        if (v13 >= *(_QWORD *)(v16 + 144))
        {
          v19 = a1 + v15 + 240;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_OWORD *)v19 = v33;
      *(_OWORD *)(v19 + 16) = v39;
      *(_OWORD *)(v19 + 32) = v45;
      *(_OWORD *)(v19 + 48) = v51;
      *(_QWORD *)(v19 + 64) = v13;
      *(_DWORD *)(v19 + 72) = v14;
      ++v12;
      *(_WORD *)(v19 + 76) = WORD2(v14);
      if (v12 == 8)
        return v10 + 80 == a2;
    }
    v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  __n128 result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  _BYTE v27[32];
  _BYTE v28[32];
  _BYTE v29[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(a1, (uint64_t)a2, (uint64_t)a3).n128_u64[0];
  if (*(_QWORD *)(a4 + 64) < a3[4].n128_u64[0])
  {
    v24 = a3[2];
    *(__n128 *)v27 = a3[3];
    *(__n128 *)&v27[16] = a3[4];
    v18 = *a3;
    v21 = a3[1];
    *a3 = *(__n128 *)a4;
    v10 = *(__n128 *)(a4 + 32);
    v9 = *(__n128 *)(a4 + 48);
    v11 = *(__n128 *)(a4 + 16);
    *(__n128 *)((char *)a3 + 62) = *(__n128 *)(a4 + 62);
    a3[2] = v10;
    a3[3] = v9;
    a3[1] = v11;
    *(_OWORD *)(a4 + 62) = *(_OWORD *)&v27[14];
    *(__n128 *)(a4 + 32) = v24;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v27;
    result = v18;
    *(__n128 *)a4 = v18;
    *(__n128 *)(a4 + 16) = v21;
    if (a3[4].n128_u64[0] < a2[4].n128_u64[0])
    {
      v25 = a2[2];
      *(__n128 *)v28 = a2[3];
      *(__n128 *)&v28[16] = a2[4];
      v19 = *a2;
      v22 = a2[1];
      *a2 = *a3;
      v13 = a3[2];
      v12 = a3[3];
      v14 = a3[1];
      *(__n128 *)((char *)a2 + 62) = *(__n128 *)((char *)a3 + 62);
      a2[2] = v13;
      a2[3] = v12;
      a2[1] = v14;
      *(__n128 *)((char *)a3 + 62) = *(__n128 *)&v28[14];
      a3[2] = v25;
      a3[3] = *(__n128 *)v28;
      result = v19;
      *a3 = v19;
      a3[1] = v22;
      if (a2[4].n128_u64[0] < a1[4].n128_u64[0])
      {
        v26 = a1[2];
        *(__n128 *)v29 = a1[3];
        *(__n128 *)&v29[16] = a1[4];
        v20 = *a1;
        v23 = a1[1];
        *a1 = *a2;
        v16 = a2[2];
        v15 = a2[3];
        v17 = a2[1];
        *(__n128 *)((char *)a1 + 62) = *(__n128 *)((char *)a2 + 62);
        a1[2] = v16;
        a1[3] = v15;
        a1[1] = v17;
        *(__n128 *)((char *)a2 + 62) = *(__n128 *)&v29[14];
        a2[2] = v26;
        a2[3] = *(__n128 *)v29;
        result = v20;
        *a2 = v20;
        a2[1] = v23;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,false>(uint64_t a1, _OWORD *a2, int ***a3, uint64_t a4, char a5)
{
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  int v43;
  int v44;
  unsigned int v45;
  _OWORD *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  BOOL v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  _DWORD *v79;
  _DWORD *i;
  int v81;
  int v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _OWORD *v116;
  BOOL v118;
  uint64_t v119;
  int **v120;
  unint64_t v121;
  _OWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  int64_t v147;
  int64_t v148;
  int64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  _OWORD *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  int64_t v187;
  uint64_t v188;
  unint64_t v189;
  _OWORD *v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  int v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  int v227;
  unsigned int v228;
  int v229;
  unsigned int v230;
  int v231;
  int v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  int **v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  _BYTE v298[32];
  _BYTE v299[32];
  _BYTE v300[32];
  _BYTE v301[32];
  _BYTE v302[32];

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int ***a6)
{
  __n128 result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  _BYTE v66[32];
  _BYTE v67[32];
  _BYTE v68[32];

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a2, a3, a4, a6).n128_u64[0];
  v13 = ***a6;
  v14 = *(_DWORD *)(a5 + 40) - v13;
  if (v14 < 0)
    v14 = v13 - *(_DWORD *)(a5 + 40);
  v15 = *(_DWORD *)(a4 + 40) - v13;
  if (v15 < 0)
    v15 = v13 - *(_DWORD *)(a4 + 40);
  if (v14 < v15)
    goto LABEL_16;
  v16 = *(_DWORD *)(a5 + 48) - v13;
  if (v16 < 0)
    v16 = v13 - *(_DWORD *)(a5 + 48);
  v17 = *(_DWORD *)(a4 + 48) - v13;
  if (v17 < 0)
    v17 = v13 - *(_DWORD *)(a4 + 48);
  if (v16 < v17)
    goto LABEL_16;
  v18 = *(_DWORD *)(a5 + 56) - v13;
  if (v18 < 0)
    v18 = v13 - *(_DWORD *)(a5 + 56);
  v19 = *(_DWORD *)(a4 + 56) - v13;
  if (v19 < 0)
    v19 = -v19;
  if (v18 < v19)
  {
LABEL_16:
    v61 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)v65 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v65[16] = *(_OWORD *)(a4 + 64);
    v53 = *(__n128 *)a4;
    v57 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v21 = *(_OWORD *)(a5 + 32);
    v20 = *(_OWORD *)(a5 + 48);
    v22 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(a4 + 62) = *(_OWORD *)(a5 + 62);
    *(_OWORD *)(a4 + 32) = v21;
    *(_OWORD *)(a4 + 48) = v20;
    *(_OWORD *)(a4 + 16) = v22;
    *(_OWORD *)(a5 + 62) = *(_OWORD *)&v65[14];
    *(_OWORD *)(a5 + 32) = v61;
    *(_OWORD *)(a5 + 48) = *(_OWORD *)v65;
    result = v53;
    *(__n128 *)a5 = v53;
    *(_OWORD *)(a5 + 16) = v57;
    v23 = ***a6;
    v24 = *(_DWORD *)(a4 + 40) - v23;
    if (v24 < 0)
      v24 = v23 - *(_DWORD *)(a4 + 40);
    v25 = *(_DWORD *)(a3 + 40) - v23;
    if (v25 < 0)
      v25 = v23 - *(_DWORD *)(a3 + 40);
    if (v24 < v25)
      goto LABEL_31;
    v26 = *(_DWORD *)(a4 + 48) - v23;
    if (v26 < 0)
      v26 = v23 - *(_DWORD *)(a4 + 48);
    v27 = *(_DWORD *)(a3 + 48) - v23;
    if (v27 < 0)
      v27 = v23 - *(_DWORD *)(a3 + 48);
    if (v26 < v27)
      goto LABEL_31;
    v28 = *(_DWORD *)(a4 + 56) - v23;
    if (v28 < 0)
      v28 = v23 - *(_DWORD *)(a4 + 56);
    v29 = *(_DWORD *)(a3 + 56) - v23;
    if (v29 < 0)
      v29 = -v29;
    if (v28 < v29)
    {
LABEL_31:
      v62 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)v66 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)&v66[16] = *(_OWORD *)(a3 + 64);
      v54 = *(__n128 *)a3;
      v58 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v31 = *(_OWORD *)(a4 + 32);
      v30 = *(_OWORD *)(a4 + 48);
      v32 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a3 + 62) = *(_OWORD *)(a4 + 62);
      *(_OWORD *)(a3 + 32) = v31;
      *(_OWORD *)(a3 + 48) = v30;
      *(_OWORD *)(a3 + 16) = v32;
      *(_OWORD *)(a4 + 62) = *(_OWORD *)&v66[14];
      *(_OWORD *)(a4 + 32) = v62;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v66;
      result = v54;
      *(__n128 *)a4 = v54;
      *(_OWORD *)(a4 + 16) = v58;
      v33 = ***a6;
      v34 = *(_DWORD *)(a3 + 40) - v33;
      if (v34 < 0)
        v34 = v33 - *(_DWORD *)(a3 + 40);
      v35 = *(_DWORD *)(a2 + 40) - v33;
      if (v35 < 0)
        v35 = v33 - *(_DWORD *)(a2 + 40);
      if (v34 < v35)
        goto LABEL_46;
      v36 = *(_DWORD *)(a3 + 48) - v33;
      if (v36 < 0)
        v36 = v33 - *(_DWORD *)(a3 + 48);
      v37 = *(_DWORD *)(a2 + 48) - v33;
      if (v37 < 0)
        v37 = v33 - *(_DWORD *)(a2 + 48);
      if (v36 < v37)
        goto LABEL_46;
      v38 = *(_DWORD *)(a3 + 56) - v33;
      if (v38 < 0)
        v38 = v33 - *(_DWORD *)(a3 + 56);
      v39 = *(_DWORD *)(a2 + 56) - v33;
      if (v39 < 0)
        v39 = -v39;
      if (v38 < v39)
      {
LABEL_46:
        v63 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)v67 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v67[16] = *(_OWORD *)(a2 + 64);
        v55 = *(__n128 *)a2;
        v59 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v41 = *(_OWORD *)(a3 + 32);
        v40 = *(_OWORD *)(a3 + 48);
        v42 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
        *(_OWORD *)(a2 + 32) = v41;
        *(_OWORD *)(a2 + 48) = v40;
        *(_OWORD *)(a2 + 16) = v42;
        *(_OWORD *)(a3 + 62) = *(_OWORD *)&v67[14];
        *(_OWORD *)(a3 + 32) = v63;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v67;
        result = v55;
        *(__n128 *)a3 = v55;
        *(_OWORD *)(a3 + 16) = v59;
        v43 = ***a6;
        v44 = *(_DWORD *)(a2 + 40) - v43;
        if (v44 < 0)
          v44 = v43 - *(_DWORD *)(a2 + 40);
        v45 = *(_DWORD *)(a1 + 40) - v43;
        if (v45 < 0)
          v45 = v43 - *(_DWORD *)(a1 + 40);
        if (v44 < v45)
          goto LABEL_61;
        v46 = *(_DWORD *)(a2 + 48) - v43;
        if (v46 < 0)
          v46 = v43 - *(_DWORD *)(a2 + 48);
        v47 = *(_DWORD *)(a1 + 48) - v43;
        if (v47 < 0)
          v47 = v43 - *(_DWORD *)(a1 + 48);
        if (v46 < v47)
          goto LABEL_61;
        v48 = *(_DWORD *)(a2 + 56) - v43;
        if (v48 < 0)
          v48 = v43 - *(_DWORD *)(a2 + 56);
        v49 = *(_DWORD *)(a1 + 56) - v43;
        if (v49 < 0)
          v49 = -v49;
        if (v48 < v49)
        {
LABEL_61:
          v64 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)v68 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v68[16] = *(_OWORD *)(a1 + 64);
          v56 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v51 = *(_OWORD *)(a2 + 32);
          v50 = *(_OWORD *)(a2 + 48);
          v52 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
          *(_OWORD *)(a1 + 32) = v51;
          *(_OWORD *)(a1 + 48) = v50;
          *(_OWORD *)(a1 + 16) = v52;
          *(_OWORD *)(a2 + 62) = *(_OWORD *)&v68[14];
          *(_OWORD *)(a2 + 32) = v64;
          *(_OWORD *)(a2 + 48) = *(_OWORD *)v68;
          result = v56;
          *(__n128 *)a2 = v56;
          *(_OWORD *)(a2 + 16) = v60;
        }
      }
    }
  }
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2, uint64_t a3, int ***a4)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[32];
  _BYTE v63[32];
  _BYTE v64[32];

  v4 = ***a4;
  v5 = *(_DWORD *)(a2 + 40) - v4;
  if ((v5 & 0x80000000) != 0)
    v5 = v4 - *(_DWORD *)(a2 + 40);
  v6 = *(_DWORD *)(a1 + 40) - v4;
  if (v6 < 0)
    v6 = v4 - *(_DWORD *)(a1 + 40);
  if (v5 < v6)
    goto LABEL_16;
  v7 = *(_DWORD *)(a2 + 48) - v4;
  if (v7 < 0)
    v7 = v4 - *(_DWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a1 + 48) - v4;
  if (v8 < 0)
    v8 = v4 - *(_DWORD *)(a1 + 48);
  if (v7 < v8)
    goto LABEL_16;
  v9 = *(_DWORD *)(a2 + 56) - v4;
  if (v9 < 0)
    v9 = v4 - *(_DWORD *)(a2 + 56);
  v10 = *(_DWORD *)(a1 + 56) - v4;
  if (v10 < 0)
    v10 = v4 - *(_DWORD *)(a1 + 56);
  if (v9 >= v10)
  {
    v20 = *(_DWORD *)(a3 + 40) - v4;
    if (v20 < 0)
      v20 = v4 - *(_DWORD *)(a3 + 40);
    if (v20 < v5)
      goto LABEL_41;
    v21 = *(_DWORD *)(a3 + 48) - v4;
    if (v21 < 0)
      v21 = v4 - *(_DWORD *)(a3 + 48);
    if (v21 < v7)
      goto LABEL_41;
    v22 = *(_DWORD *)(a3 + 56) - v4;
    if (v22 < 0)
      v22 = -v22;
    if (v22 < v9)
    {
LABEL_41:
      v58 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v62 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a2 + 64);
      v50 = *(__n128 *)a2;
      v54 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v24 = *(_OWORD *)(a3 + 32);
      v23 = *(_OWORD *)(a3 + 48);
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v62[14];
      *(_OWORD *)(a3 + 32) = v58;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v62;
      result = v50;
      *(__n128 *)a3 = v50;
      *(_OWORD *)(a3 + 16) = v54;
      v26 = ***a4;
      v27 = *(_DWORD *)(a2 + 40) - v26;
      if (v27 < 0)
        v27 = v26 - *(_DWORD *)(a2 + 40);
      v28 = *(_DWORD *)(a1 + 40) - v26;
      if (v28 < 0)
        v28 = v26 - *(_DWORD *)(a1 + 40);
      if (v27 < v28)
        goto LABEL_56;
      v29 = *(_DWORD *)(a2 + 48) - v26;
      if (v29 < 0)
        v29 = v26 - *(_DWORD *)(a2 + 48);
      v30 = *(_DWORD *)(a1 + 48) - v26;
      if (v30 < 0)
        v30 = v26 - *(_DWORD *)(a1 + 48);
      if (v29 < v30)
        goto LABEL_56;
      v31 = *(_DWORD *)(a2 + 56) - v26;
      if (v31 < 0)
        v31 = v26 - *(_DWORD *)(a2 + 56);
      v32 = *(_DWORD *)(a1 + 56) - v26;
      if (v32 < 0)
        v32 = -v32;
      if (v31 < v32)
      {
LABEL_56:
        v59 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v63 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 64);
        v51 = *(__n128 *)a1;
        v55 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v34 = *(_OWORD *)(a2 + 32);
        v33 = *(_OWORD *)(a2 + 48);
        v35 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
        *(_OWORD *)(a1 + 32) = v34;
        *(_OWORD *)(a1 + 48) = v33;
        *(_OWORD *)(a1 + 16) = v35;
        *(_OWORD *)(a2 + 62) = *(_OWORD *)&v63[14];
        *(_OWORD *)(a2 + 32) = v59;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v63;
        result = v51;
        *(__n128 *)a2 = v51;
        *(_OWORD *)(a2 + 16) = v55;
      }
    }
  }
  else
  {
LABEL_16:
    v11 = *(_DWORD *)(a3 + 40) - v4;
    if (v11 < 0)
      v11 = v4 - *(_DWORD *)(a3 + 40);
    if (v11 < v5)
      goto LABEL_29;
    v12 = *(_DWORD *)(a3 + 48) - v4;
    if (v12 < 0)
      v12 = v4 - *(_DWORD *)(a3 + 48);
    v13 = *(_DWORD *)(a2 + 48) - v4;
    if (v13 < 0)
      v13 = v4 - *(_DWORD *)(a2 + 48);
    if (v12 < v13)
      goto LABEL_29;
    v14 = *(_DWORD *)(a3 + 56) - v4;
    if (v14 < 0)
      v14 = v4 - *(_DWORD *)(a3 + 56);
    v15 = *(_DWORD *)(a2 + 56) - v4;
    if (v15 < 0)
      v15 = -v15;
    if (v14 < v15)
    {
LABEL_29:
      v57 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)v61 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 64);
      v49 = *(__n128 *)a1;
      v53 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v17 = *(_OWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 48);
      v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)(a1 + 48) = v16;
      *(_OWORD *)(a1 + 16) = v18;
LABEL_30:
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v61[14];
      *(_OWORD *)(a3 + 32) = v57;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v61;
      result = v49;
      *(__n128 *)a3 = v49;
      *(_OWORD *)(a3 + 16) = v53;
      return result;
    }
    v60 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v64 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v64[16] = *(_OWORD *)(a1 + 64);
    v52 = *(__n128 *)a1;
    v56 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v37 = *(_OWORD *)(a2 + 32);
    v36 = *(_OWORD *)(a2 + 48);
    v38 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v36;
    *(_OWORD *)(a1 + 16) = v38;
    *(_OWORD *)(a2 + 62) = *(_OWORD *)&v64[14];
    *(_OWORD *)(a2 + 32) = v60;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v64;
    result = v52;
    *(__n128 *)a2 = v52;
    *(_OWORD *)(a2 + 16) = v56;
    v39 = ***a4;
    v40 = *(_DWORD *)(a3 + 40) - v39;
    if (v40 < 0)
      v40 = v39 - *(_DWORD *)(a3 + 40);
    v41 = *(_DWORD *)(a2 + 40) - v39;
    if (v41 < 0)
      v41 = v39 - *(_DWORD *)(a2 + 40);
    if (v40 < v41)
      goto LABEL_72;
    v42 = *(_DWORD *)(a3 + 48) - v39;
    if (v42 < 0)
      v42 = v39 - *(_DWORD *)(a3 + 48);
    v43 = *(_DWORD *)(a2 + 48) - v39;
    if (v43 < 0)
      v43 = v39 - *(_DWORD *)(a2 + 48);
    if (v42 < v43)
      goto LABEL_72;
    v44 = *(_DWORD *)(a3 + 56) - v39;
    if (v44 < 0)
      v44 = v39 - *(_DWORD *)(a3 + 56);
    v45 = *(_DWORD *)(a2 + 56) - v39;
    if (v45 < 0)
      v45 = -v45;
    if (v44 < v45)
    {
LABEL_72:
      v57 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v61 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a2 + 64);
      v49 = *(__n128 *)a2;
      v53 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v47 = *(_OWORD *)(a3 + 32);
      v46 = *(_OWORD *)(a3 + 48);
      v48 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v47;
      *(_OWORD *)(a2 + 48) = v46;
      *(_OWORD *)(a2 + 16) = v48;
      goto LABEL_30;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2, int ***a3)
{
  unint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[32];

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = ***a3;
      v9 = *(_DWORD *)(a2 - 40) - v8;
      if (v9 < 0)
        v9 = v8 - *(_DWORD *)(a2 - 40);
      v10 = *(_DWORD *)(a1 + 40) - v8;
      if (v10 < 0)
        v10 = v8 - *(_DWORD *)(a1 + 40);
      if (v9 < v10)
        goto LABEL_17;
      v11 = *(_DWORD *)(a2 - 32) - v8;
      if (v11 < 0)
        v11 = v8 - *(_DWORD *)(a2 - 32);
      v12 = *(_DWORD *)(a1 + 48) - v8;
      if (v12 < 0)
        v12 = v8 - *(_DWORD *)(a1 + 48);
      if (v11 < v12)
        goto LABEL_17;
      v13 = *(_DWORD *)(a2 - 24) - v8;
      if (v13 < 0)
        v13 = v8 - *(_DWORD *)(a2 - 24);
      v14 = *(_DWORD *)(a1 + 56) - v8;
      if (v14 < 0)
        v14 = -v14;
      if (v13 < v14)
      {
LABEL_17:
        v15 = (_OWORD *)(a2 - 80);
        v54 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v56 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 64);
        v50 = *(_OWORD *)a1;
        v52 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        v17 = *(_OWORD *)(a2 - 48);
        v16 = *(_OWORD *)(a2 - 32);
        v18 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 - 18);
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)(a1 + 48) = v16;
        *(_OWORD *)(a1 + 16) = v18;
        *(_OWORD *)((char *)v15 + 62) = *(_OWORD *)&v56[14];
        v15[2] = v54;
        v15[3] = *(_OWORD *)v56;
        *v15 = v50;
        v15[1] = v52;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a1 + 80, a2 - 80, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a1 + 80, a1 + 160, a2 - 80, a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,0>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80, a3);
      return 1;
    default:
      v19 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a1 + 80, a1 + 160, a3);
      v20 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v20 + 40);
    v24 = ***a3;
    v25 = v23 - v24;
    if ((int)v23 - v24 < 0)
      v25 = v24 - v23;
    v26 = *(_DWORD *)(v19 + 40) - v24;
    if (v26 < 0)
      v26 = v24 - *(_DWORD *)(v19 + 40);
    if (v25 < v26)
      break;
    v27 = *(_QWORD *)(v20 + 48);
    v28 = v27 - v24;
    if ((int)v27 - v24 < 0)
      v28 = v24 - v27;
    v29 = *(_DWORD *)(v19 + 48) - v24;
    if (v29 < 0)
      v29 = v24 - *(_DWORD *)(v19 + 48);
    if (v28 < v29)
      goto LABEL_37;
    v30 = *(_DWORD *)(v20 + 56) - v24;
    if (v30 < 0)
      v30 = v24 - *(_DWORD *)(v20 + 56);
    v31 = *(_DWORD *)(v19 + 56) - v24;
    if (v31 < 0)
      v31 = -v31;
    if (v30 < v31)
      goto LABEL_37;
LABEL_59:
    v19 = v20;
    v21 += 80;
    v20 += 80;
    if (v20 == a2)
      return 1;
  }
  v27 = *(_QWORD *)(v20 + 48);
LABEL_37:
  v55 = *(_QWORD *)(v20 + 32);
  v51 = *(_OWORD *)v20;
  v53 = *(_OWORD *)(v20 + 16);
  v32 = *(_QWORD *)(v20 + 56);
  v49 = *(_OWORD *)(v20 + 64);
  *(_OWORD *)(v20 + 62) = *(_OWORD *)(v19 + 62);
  v33 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v20 + 48) = v33;
  v34 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v19;
  *(_OWORD *)(v20 + 16) = v34;
  v35 = a1;
  if (v19 != a1)
  {
    v36 = v21;
    while (1)
    {
      v37 = a1 + v36;
      v38 = ***a3;
      v39 = v23 - v38;
      if ((int)v23 - v38 < 0)
        v39 = v38 - v23;
      v40 = *(_DWORD *)(v37 + 120) - v38;
      if (v40 < 0)
        v40 = v38 - *(_DWORD *)(v37 + 120);
      if (v39 >= v40)
      {
        v41 = v27 - v38;
        if ((int)v27 - v38 < 0)
          v41 = v38 - v27;
        v42 = *(_DWORD *)(v37 + 128) - v38;
        if (v42 < 0)
          v42 = v38 - *(_DWORD *)(v37 + 128);
        if (v41 >= v42)
        {
          if ((int)v32 - v38 >= 0)
            v43 = v32 - v38;
          else
            v43 = v38 - v32;
          v44 = *(_DWORD *)(a1 + v36 + 136) - v38;
          if (v44 < 0)
            v44 = -v44;
          if (v43 >= v44)
            break;
        }
      }
      v45 = (_OWORD *)(v37 + 160);
      v46 = (_OWORD *)(v37 + 80);
      v47 = v46[3];
      v45[2] = v46[2];
      v45[3] = v47;
      *(_OWORD *)((char *)v45 + 62) = *(_OWORD *)((char *)v46 + 62);
      v48 = v46[1];
      *v45 = *v46;
      v45[1] = v48;
      v36 -= 80;
      if (v36 == -160)
      {
        v35 = a1;
        goto LABEL_58;
      }
    }
    v35 = a1 + v36 + 160;
  }
LABEL_58:
  *(_OWORD *)v35 = v51;
  *(_OWORD *)(v35 + 16) = v53;
  *(_QWORD *)(v35 + 32) = v55;
  *(_QWORD *)(v35 + 40) = v23;
  *(_QWORD *)(v35 + 48) = v27;
  *(_QWORD *)(v35 + 56) = v32;
  *(_QWORD *)(v35 + 64) = v49;
  ++v22;
  *(_QWORD *)(v35 + 70) = *(_QWORD *)((char *)&v49 + 6);
  if (v22 != 8)
    goto LABEL_59;
  return v20 + 80 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int ***a5)
{
  __n128 result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[32];
  _BYTE v51[32];
  _BYTE v52[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a2, a3, a5).n128_u64[0];
  v11 = ***a5;
  v12 = *(_DWORD *)(a4 + 40) - v11;
  if (v12 < 0)
    v12 = v11 - *(_DWORD *)(a4 + 40);
  v13 = *(_DWORD *)(a3 + 40) - v11;
  if (v13 < 0)
    v13 = v11 - *(_DWORD *)(a3 + 40);
  if (v12 < v13)
    goto LABEL_16;
  v14 = *(_DWORD *)(a4 + 48) - v11;
  if (v14 < 0)
    v14 = v11 - *(_DWORD *)(a4 + 48);
  v15 = *(_DWORD *)(a3 + 48) - v11;
  if (v15 < 0)
    v15 = v11 - *(_DWORD *)(a3 + 48);
  if (v14 < v15)
    goto LABEL_16;
  v16 = *(_DWORD *)(a4 + 56) - v11;
  if (v16 < 0)
    v16 = v11 - *(_DWORD *)(a4 + 56);
  v17 = *(_DWORD *)(a3 + 56) - v11;
  if (v17 < 0)
    v17 = -v17;
  if (v16 < v17)
  {
LABEL_16:
    v47 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)v50 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 64);
    v41 = *(__n128 *)a3;
    v44 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v19 = *(_OWORD *)(a4 + 32);
    v18 = *(_OWORD *)(a4 + 48);
    v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a3 + 62) = *(_OWORD *)(a4 + 62);
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v18;
    *(_OWORD *)(a3 + 16) = v20;
    *(_OWORD *)(a4 + 62) = *(_OWORD *)&v50[14];
    *(_OWORD *)(a4 + 32) = v47;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v50;
    result = v41;
    *(__n128 *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v44;
    v21 = ***a5;
    v22 = *(_DWORD *)(a3 + 40) - v21;
    if (v22 < 0)
      v22 = v21 - *(_DWORD *)(a3 + 40);
    v23 = *(_DWORD *)(a2 + 40) - v21;
    if (v23 < 0)
      v23 = v21 - *(_DWORD *)(a2 + 40);
    if (v22 < v23)
      goto LABEL_31;
    v24 = *(_DWORD *)(a3 + 48) - v21;
    if (v24 < 0)
      v24 = v21 - *(_DWORD *)(a3 + 48);
    v25 = *(_DWORD *)(a2 + 48) - v21;
    if (v25 < 0)
      v25 = v21 - *(_DWORD *)(a2 + 48);
    if (v24 < v25)
      goto LABEL_31;
    v26 = *(_DWORD *)(a3 + 56) - v21;
    if (v26 < 0)
      v26 = v21 - *(_DWORD *)(a3 + 56);
    v27 = *(_DWORD *)(a2 + 56) - v21;
    if (v27 < 0)
      v27 = -v27;
    if (v26 < v27)
    {
LABEL_31:
      v48 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v51 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 64);
      v42 = *(__n128 *)a2;
      v45 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v29 = *(_OWORD *)(a3 + 32);
      v28 = *(_OWORD *)(a3 + 48);
      v30 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v29;
      *(_OWORD *)(a2 + 48) = v28;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v51[14];
      *(_OWORD *)(a3 + 32) = v48;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v51;
      result = v42;
      *(__n128 *)a3 = v42;
      *(_OWORD *)(a3 + 16) = v45;
      v31 = ***a5;
      v32 = *(_DWORD *)(a2 + 40) - v31;
      if (v32 < 0)
        v32 = v31 - *(_DWORD *)(a2 + 40);
      v33 = *(_DWORD *)(a1 + 40) - v31;
      if (v33 < 0)
        v33 = v31 - *(_DWORD *)(a1 + 40);
      if (v32 < v33)
        goto LABEL_46;
      v34 = *(_DWORD *)(a2 + 48) - v31;
      if (v34 < 0)
        v34 = v31 - *(_DWORD *)(a2 + 48);
      v35 = *(_DWORD *)(a1 + 48) - v31;
      if (v35 < 0)
        v35 = v31 - *(_DWORD *)(a1 + 48);
      if (v34 < v35)
        goto LABEL_46;
      v36 = *(_DWORD *)(a2 + 56) - v31;
      if (v36 < 0)
        v36 = v31 - *(_DWORD *)(a2 + 56);
      v37 = *(_DWORD *)(a1 + 56) - v31;
      if (v37 < 0)
        v37 = -v37;
      if (v36 < v37)
      {
LABEL_46:
        v49 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)v52 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 64);
        v43 = *(__n128 *)a1;
        v46 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v39 = *(_OWORD *)(a2 + 32);
        v38 = *(_OWORD *)(a2 + 48);
        v40 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
        *(_OWORD *)(a1 + 32) = v39;
        *(_OWORD *)(a1 + 48) = v38;
        *(_OWORD *)(a1 + 16) = v40;
        *(_OWORD *)(a2 + 62) = *(_OWORD *)&v52[14];
        *(_OWORD *)(a2 + 32) = v49;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v52;
        result = v43;
        *(__n128 *)a2 = v43;
        *(_OWORD *)(a2 + 16) = v46;
      }
    }
  }
  return result;
}

_QWORD *std::vector<ZinMirWorkUnitShapeCandidate>::__init_with_size[abi:ne180100]<ZinMirWorkUnitShapeCandidate*,ZinMirWorkUnitShapeCandidate*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<ZinDramDependentInfo>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 2);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_206F04B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<double,double,double,double,double,double,double,double,double,double,double,double,0ul,1ul,2ul,3ul,4ul,5ul>(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (*a1 == *a2)
    LODWORD(v2) = 0;
  else
    LODWORD(v2) = -127;
  if (*a1 > *a2)
    LODWORD(v2) = 1;
  if (*a1 < *a2)
    v2 = 0xFFFFFFFFLL;
  else
    v2 = v2;
  if (!(_DWORD)v2)
  {
    v3 = a1[1];
    v4 = a2[1];
    if (v3 == v4)
      LODWORD(v2) = 0;
    else
      LODWORD(v2) = -127;
    if (v3 > v4)
      LODWORD(v2) = 1;
    if (v3 < v4)
      v2 = 0xFFFFFFFFLL;
    else
      v2 = v2;
    if (!(_DWORD)v2)
    {
      v5 = a1[2];
      v6 = a2[2];
      if (v5 == v6)
        LODWORD(v2) = 0;
      else
        LODWORD(v2) = -127;
      if (v5 > v6)
        LODWORD(v2) = 1;
      if (v5 < v6)
        v2 = 0xFFFFFFFFLL;
      else
        v2 = v2;
      if (!(_DWORD)v2)
      {
        v7 = a1[3];
        v8 = a2[3];
        if (v7 == v8)
          LODWORD(v2) = 0;
        else
          LODWORD(v2) = -127;
        if (v7 > v8)
          LODWORD(v2) = 1;
        if (v7 < v8)
          v2 = 0xFFFFFFFFLL;
        else
          v2 = v2;
        if (!(_DWORD)v2)
        {
          v9 = a1[4];
          v10 = a2[4];
          if (v9 == v10)
            LODWORD(v2) = 0;
          else
            LODWORD(v2) = -127;
          if (v9 > v10)
            LODWORD(v2) = 1;
          if (v9 < v10)
            v2 = 0xFFFFFFFFLL;
          else
            v2 = v2;
          if (!(_DWORD)v2)
          {
            v11 = a1[5];
            v12 = a2[5];
            if (v11 == v12)
              LODWORD(v2) = 0;
            else
              LODWORD(v2) = -127;
            if (v11 > v12)
              LODWORD(v2) = 1;
            if (v11 < v12)
              return 0xFFFFFFFFLL;
            else
              return v2;
          }
        }
      }
    }
  }
  return v2;
}

char *std::vector<ZinMirWorkUnitShapeCandidate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 > 0x333333333333333)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 4);
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x199999999999999)
      v18 = 0x333333333333333;
    else
      v18 = v17;
    v41 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v9, v18);
    else
      v19 = 0;
    v30 = &v19[80 * v15];
    __p = v19;
    v38 = v30;
    v40 = &v19[80 * v18];
    v31 = &v30[80 * a5];
    v32 = 80 * a5;
    do
    {
      *(_OWORD *)v30 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      v34 = *((_OWORD *)v7 + 2);
      v35 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 4) = v35;
      *((_OWORD *)v30 + 1) = v33;
      *((_OWORD *)v30 + 2) = v34;
      v30 += 80;
      v7 += 80;
      v32 -= 80;
    }
    while (v32);
    v39 = v31;
    v5 = (char *)std::vector<ZinMirWorkUnitShapeCandidate>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38)
      v39 = &v38[(v39 - v38 - 80) % 0x50uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    v21 = &__src[80 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[80 * a5];
    v25 = &v23[-80 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        *(_OWORD *)v26 = *(_OWORD *)v25;
        v27 = *((_OWORD *)v25 + 1);
        v28 = *((_OWORD *)v25 + 2);
        v29 = *((_OWORD *)v25 + 4);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 4) = v29;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 80;
        v26 += 80;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(v24, v5, v23 - v24 - 2);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7 - 2);
    return v5;
  }
  v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], v22 - 2);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_206F04E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<ZinMirWorkUnitShapeCandidate>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  void *v17;
  void *v18;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      *(_OWORD *)(v9 - 80) = *((_OWORD *)v8 - 5);
      v10 = *((_OWORD *)v8 - 4);
      v11 = *((_OWORD *)v8 - 3);
      v12 = *((_OWORD *)v8 - 2);
      v7 = (void *)(v9 - 80);
      *(_OWORD *)(v9 - 18) = *(_OWORD *)(v8 - 18);
      *(_OWORD *)(v9 - 48) = v11;
      *(_OWORD *)(v9 - 32) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      v8 -= 80;
      v9 -= 80;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v13 = a1[1];
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v15 - 2);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v14 + v15;
  v16 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v16;
  v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v17;
  v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Cannot find valid work unit shape candidate.\n", v3);
}

void ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates(uint8_t *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[MIR] WorkUnit cost computation failed.\n", a1);
}

void ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  OUTLINED_FUNCTION_0_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[MIR] Memory bound test using perf model failed.\n", v3);
}

BOOL ZinComputeProgramValidateMachOHeader(_DWORD *a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a1 && (a1 & 7) == 0)
    return (ZinIsOutsideBounds((unint64_t)a1, 32, (unint64_t)a1, (unint64_t)a1 + a2) & 1) == 0
        && (*a1 == -17958193 || *a1 == -1091568946)
        && a1[4] != 0;
  return result;
}

uint64_t ZinComputeProgramMake(ident_command *a1, unint64_t a2, _QWORD *a3)
{
  return ZinComputeProgramMakeWithMappedSize(a1, a2, a2, a3);
}

uint64_t ZinComputeProgramMakeWithMappedSize(ident_command *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unint64_t v36;
  size_t Relocations;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const ident_command *v81;
  unsigned int v82;
  unint64_t v83;
  const ident_command *v84;
  uint32_t cmd;
  size_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  size_t v91;
  char *ProcedureNameFromThread;
  char *v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  const char *v103;
  uint32_t v104;
  uint64_t result;
  _BOOL8 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  void **v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  unint64_t v124;
  unint64_t v125;
  void **v126;
  void *v127;
  void *v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _BOOL8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  size_t v147;
  _DWORD *v148;
  uint64_t v149;
  unint64_t *v150;
  size_t v151;
  size_t v152;
  unint64_t *v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  size_t v157;
  void *v158;
  uint64_t v159;
  _BOOL8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BOOL8 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char **v189;
  char *v190;
  uint64_t v191;
  char *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _OWORD *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unsigned int *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *__s2;
  char *__s2a;
  char *__s2b;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  void *v226;
  int v227;
  void *v228;
  uint32_t v229;
  unint64_t v230;
  uint64_t v231;
  size_t v232;
  unsigned int v233;
  _QWORD v234[2];
  _BYTE buf[64];
  void *v236[2];
  void *v237[2];
  void *v238[2];
  __int128 v239;
  void *v240[2];
  void *v241[2];
  __int128 v242;
  void *v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  if (a3 > a2)
  {
    v4 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v4)
      ZinComputeProgramMakeWithMappedSize(v4, v5, v6, v7, v8, v9, v10, v11);
    return 2;
  }
  if (!ZinComputeProgramValidateMachOHeader(a1, a3))
    return 2;
  v16 = (unint64_t)a1 + a3;
  if (a1[2].cmd)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v227 = 0;
    v21 = (unint64_t)a1 + a2;
    v22 = (unint64_t)&a1[4];
    while (1)
    {
      v230 = v19;
      if (ZinIsOutsideBounds(v22, 8, (unint64_t)a1, v16))
      {
        v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v73)
          return 2;
        goto LABEL_164;
      }
      if (ZinIsOutsideBounds(v22, *(unsigned int *)(v22 + 4), (unint64_t)a1, v16))
      {
        v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v73)
          return 2;
        goto LABEL_164;
      }
      v23 = *(_DWORD *)(v22 + 4);
      if ((v23 & 7) != 0)
        return 2;
      v24 = *(_DWORD *)v22;
      if (*(_DWORD *)v22 == 25)
      {
        if (v23 < 0x48)
          return 2;
        if (ZinIsOutsideBounds(v22, 72, (unint64_t)a1, v16))
        {
          v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v73)
            return 2;
          goto LABEL_164;
        }
        if (80 * (unint64_t)*(unsigned int *)(v22 + 64) + 72 > *(unsigned int *)(v22 + 4))
          return 2;
        if (ZinIsOutsideBounds(v22, 72, (unint64_t)a1, v16))
        {
          v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v73)
            return 2;
          goto LABEL_164;
        }
        if (*(_DWORD *)(v22 + 64) > 0x100u)
          return 2;
        __s2 = v20;
        v25 = (unint64_t)a1 + *(_QWORD *)(v22 + 40);
        if (ZinIsOutsideBounds(v25, 1, (unint64_t)a1, v21))
        {
          v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v73)
            return 2;
          goto LABEL_164;
        }
        v224 = v16;
        v217 = *(_QWORD *)(v22 + 48) + v25;
        if (ZinIsOutsideBounds(v217, 0, (unint64_t)a1, v21))
        {
          v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v73)
            return 2;
          goto LABEL_164;
        }
        v26 = *(_DWORD *)(v22 + 64);
        if (v26)
        {
          v211 = a4;
          v27 = v22 + 72;
          v214 = v22 + 72 + 80 * v26;
          while (!ZinIsOutsideBounds(v27, 80, (unint64_t)a1, v224))
          {
            if (*(_QWORD *)(v22 + 48)
              && (*(_BYTE *)(v27 + 64) & 1) == 0
              && (ZinIsOutsideBounds((unint64_t)a1 + *(unsigned int *)(v27 + 48), *(_QWORD *)(v27 + 40), v25, v217) & 1) != 0)
            {
              return 2;
            }
            if (*(unsigned __int8 *)(v27 + 31) | *(unsigned __int8 *)(v27 + 15))
              return 2;
            v28 = *(_DWORD *)(v27 + 64);
            if ((v28 & 1) == 0)
            {
              v29 = *(unsigned int *)(v27 + 48);
              v30 = *(_QWORD *)(v22 + 40);
              if (v30 > v29 || *(_QWORD *)(v27 + 40) + v29 > *(_QWORD *)(v22 + 48) + v30)
                return 2;
            }
            v31 = *(unsigned int *)(v27 + 56);
            if (v31 > a2)
              return 2;
            v32 = v21;
            v33 = *(unsigned int *)(v27 + 60);
            if (a2 >> 3 < v33 || v31 + 8 * v33 > a2)
              return 2;
            if ((_DWORD)v33)
            {
              if ((v28 & 1) != 0)
                return 2;
              v34 = (unsigned int *)((char *)a1 + v31);
              if (__CFADD__(a1, v31))
                return 2;
              if (ZinIsOutsideBounds((unint64_t)a1 + v31, 8 * v33, (unint64_t)a1, v32))
              {
                v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v73)
                  goto LABEL_164;
                return 2;
              }
              v35 = &v34[2 * v33];
              do
              {
                v36 = *v34;
                Relocations = 2;
                if ((v36 & 0x80000000) != 0 || *(_QWORD *)(v27 + 40) <= v36)
                  return Relocations;
                v38 = v34[1];
                v39 = *(_QWORD *)&v38 & 0xFFFFFFLL;
                v40 = v38 & 0xFFFFFF;
                if (v17 > v40)
                  v40 = v17;
                if (v18 <= v39 + 1)
                  v41 = v39 + 1;
                else
                  v41 = v18;
                if ((v38 & 0x8000000) != 0)
                  v18 = v41;
                else
                  v17 = v40;
                v34 += 2;
              }
              while (v34 != v35);
            }
            v27 += 80;
            v21 = v32;
            if (v27 == v214)
            {
              v42 = *(unsigned int *)(v22 + 64);
              a4 = v211;
              goto LABEL_50;
            }
          }
          v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v73)
            return 2;
LABEL_164:
          ZinComputeProgramMakeWithMappedSize(v73, v74, v75, v76, v77, v78, v79, v80);
          return 2;
        }
        v42 = 0;
LABEL_50:
        v230 += v42;
        v24 = *(_DWORD *)v22;
        v16 = v224;
        v20 = __s2;
      }
      if (v24 == 4
        && (*(_DWORD *)(v22 + 4) < 0x10u
         || (ZinIsOutsideBounds(v22, 16, (unint64_t)a1, v16) & 1) != 0
         || ZinComputeProgramValidateLCThread(*(_DWORD *)(v22 + 8), v22 + 16, (unint64_t)a1, v16)
         || ZinComputeProgramValidateProcedureNameFromLCThread(v22, (unsigned int *)(v22 + 16), (unint64_t)a1, v16)|| *(_DWORD *)(v22 + 8) == 6&& ZinComputeProgramValidateSymbolVariableNamesFromSNEThread(v22, (_DWORD *)(v22 + 16), (unint64_t)a1, v16)))
      {
        return 2;
      }
      v44 = *(_DWORD *)v22;
      v43 = *(unsigned int *)(v22 + 4);
      if (*(_DWORD *)v22 == 6)
      {
        if (v43 < 0x14
          || ZinIsStringOutsideBounds((char *)(v22 + *(unsigned int *)(v22 + 8)), (unint64_t)a1, v16))
        {
          return 2;
        }
        v44 = *(_DWORD *)v22;
        v43 = *(unsigned int *)(v22 + 4);
      }
      if (v44 == 64)
      {
        if (v43 < 0x18
          || ZinIsStringOutsideBounds((char *)(v22 + *(unsigned int *)(v22 + 8)), (unint64_t)a1, v16))
        {
          return 2;
        }
        v44 = *(_DWORD *)v22;
        v43 = *(unsigned int *)(v22 + 4);
      }
      if (v44 == 2)
      {
        if (v43 != 24)
          return 2;
        v45 = *(unsigned int *)(v22 + 12);
        if ((_DWORD)v45)
        {
          v215 = v21;
          v46 = *(unsigned int *)(v22 + 8);
          v47 = (unint64_t)a1 + v46;
          if (__CFADD__(a1, v46))
            return 2;
          __s2a = v20;
          v48 = *(unsigned int *)(v22 + 20);
          v49 = v16;
          v50 = (unint64_t)a1 + *(unsigned int *)(v22 + 16);
          v51 = v50 + v48;
          v225 = v49;
          if (ZinIsOutsideBounds(v50, v48, (unint64_t)a1, v49))
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              return 2;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "BOOL ZinComputeProgramValidHeader(const void *const, size_t, size_t)";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = a1;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v225;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v50;
            *(_WORD *)&buf[42] = 2048;
            *(_QWORD *)&buf[44] = v51;
            v102 = MEMORY[0x24BDACB70];
            v103 = "%s:  data: %p, bound: %p, str_tab_base: %p, str_tab_bound: %p";
            v104 = 52;
LABEL_210:
            _os_log_error_impl(&dword_2069AB000, v102, OS_LOG_TYPE_ERROR, v103, buf, v104);
            return 2;
          }
          if (ZinIsOutsideBounds(v47, 16 * *(unsigned int *)(v22 + 12), (unint64_t)a1, v215))
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              return 2;
            v137 = *(_DWORD *)(v22 + 12);
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "BOOL ZinComputeProgramValidHeader(const void *const, size_t, size_t)";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = a1;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v215;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v47;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v137;
            v102 = MEMORY[0x24BDACB70];
            v103 = "%s:  data: %p, bound: %p, symbol_table: %p, nsyms: %d";
            v104 = 48;
            goto LABEL_210;
          }
          v212 = a4;
          v218 = 16 * v45;
          v52 = (unsigned int *)v47;
          v53 = (unsigned int *)(v47 + 16 * v45);
          do
          {
            v54 = *v52;
            if ((_DWORD)v54 && ZinIsStringOutsideBounds((char *)(v50 + v54), v50, v51))
              return 2;
            v55 = v52[1] & 0xE;
            if (v55 == 10)
            {
              v56 = 0;
              v57 = v52[2];
              v58 = v218;
              v59 = (_DWORD *)v47;
              do
              {
                if (*v59 == v57 && (v56 & 1) != 0)
                  return 2;
                v56 |= *v59 == v57;
                v59 += 4;
                v58 -= 16;
              }
              while (v58);
              if ((v56 & 1) == 0)
                return 2;
            }
            else if (v55 == 14 && v17 <= *((unsigned __int8 *)v52 + 5))
            {
              v17 = *((unsigned __int8 *)v52 + 5);
            }
            v52 += 4;
          }
          while (v52 != v53);
          v60 = *(unsigned int *)(v22 + 12);
          v43 = *(unsigned int *)(v22 + 4);
          a4 = v212;
          v21 = v215;
          v16 = v225;
          v20 = __s2a;
        }
        else
        {
          v60 = 0;
          v43 = 24;
        }
        v20 += v60;
      }
      v19 = v230;
      v22 += v43;
      if (++v227 >= a1[2].cmd)
        goto LABEL_92;
    }
  }
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
LABEL_92:
  Relocations = 2;
  if (v19 < v17)
    return Relocations;
  if ((unint64_t)v20 < v18)
    return Relocations;
  v61 = v16;
  *(_OWORD *)v241 = 0u;
  v242 = 0u;
  v239 = 0u;
  *(_OWORD *)v240 = 0u;
  *(_OWORD *)v237 = 0u;
  *(_OWORD *)v238 = 0u;
  *(_OWORD *)v236 = 0u;
  memset(&buf[16], 0, 48);
  *(_QWORD *)buf = a1;
  *(_QWORD *)&buf[8] = v16;
  v62 = v16;
  Relocations = 1;
  v63 = (uint64_t *)malloc_type_calloc(1uLL, 0x70uLL, 0x1020040B1D87715uLL);
  if (!v63)
    return Relocations;
  v64 = v63;
  v243 = v63;
  if ((ZinIsOutsideBounds((unint64_t)a1, 32, (unint64_t)a1, v16) & 1) != 0)
    goto LABEL_174;
  *(_QWORD *)&buf[16] = a1;
  if (ZinIsOutsideBounds((unint64_t)a1, 32, (unint64_t)a1, v16))
  {
    v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v65)
      goto LABEL_174;
LABEL_171:
    ZinComputeProgramMakeWithMappedSize(v65, v66, v67, v68, v69, v70, v71, v72);
    goto LABEL_174;
  }
  if (!a1[2].cmd)
    goto LABEL_287;
  v81 = 0;
  v82 = 0;
  v83 = (unint64_t)&a1[4];
  v84 = a1 + 4;
  do
  {
    if (ZinIsOutsideBounds((unint64_t)v84, 8, (unint64_t)a1, v62))
    {
      v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v65)
        goto LABEL_174;
      goto LABEL_171;
    }
    if (v84->cmd == 8)
    {
      v81 = v84;
      if (ZinIsOutsideBounds((unint64_t)v84, 8, (unint64_t)a1, v62))
      {
        v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v65)
          goto LABEL_174;
        goto LABEL_171;
      }
    }
    v84 = (const ident_command *)((char *)v84 + v84->cmdsize);
    ++v82;
    cmd = a1[2].cmd;
  }
  while (v82 < cmd);
  if (!cmd)
    goto LABEL_287;
  v213 = 0;
  v216 = 0;
  v86 = 0;
  v209 = 0;
  v210 = 0;
  v207 = 0;
  v208 = (unint64_t)&a1[4];
  v87 = 0;
  v88 = 0;
  v89 = *(_QWORD *)&buf[32];
  __s2b = 0;
  v223 = *(_QWORD *)&buf[48];
  v226 = v240[1];
  v228 = v236[1];
  v231 = 0;
  while (2)
  {
    if (ZinIsOutsideBounds(v83, 8, (unint64_t)a1, v61))
    {
      v240[1] = v226;
      *(_QWORD *)&buf[40] = v87;
      *(_QWORD *)&buf[48] = v223;
      v236[1] = v228;
      *(_QWORD *)&buf[32] = v89;
      v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v106)
        goto LABEL_174;
      goto LABEL_173;
    }
    v90 = *(_DWORD *)v83;
    if (*(int *)v83 > 24)
    {
      if (v90 > 48)
      {
        if (v90 != 49)
        {
          if (v90 == 64)
LABEL_121:
            v228 = (void *)++v231;
          goto LABEL_144;
        }
        if (!ZinIsOutsideBounds(v83, 40, (unint64_t)a1, v61))
        {
          if (!strcmp((const char *)(v83 + 8), "src model info"))
            v87 = v83;
          goto LABEL_144;
        }
        v240[1] = v226;
        *(_QWORD *)&buf[40] = v87;
        *(_QWORD *)&buf[48] = v223;
        v236[1] = v228;
        *(_QWORD *)&buf[32] = v89;
        v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v106)
          goto LABEL_174;
      }
      else
      {
        if (v90 == 25)
        {
          *(_QWORD *)&buf[56] = ++v86;
          goto LABEL_144;
        }
        if (v90 != 42)
          goto LABEL_144;
        if (!ZinIsOutsideBounds(v83, 16, (unint64_t)a1, v61))
        {
          v223 = v83;
          goto LABEL_144;
        }
        v240[1] = v226;
        *(_QWORD *)&buf[40] = v87;
        *(_QWORD *)&buf[48] = v223;
        v236[1] = v228;
        *(_QWORD *)&buf[32] = v89;
        v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v106)
          goto LABEL_174;
      }
LABEL_173:
      ZinComputeProgramMakeWithMappedSize(v106, v107, v108, v109, v110, v111, v112, v113);
      goto LABEL_174;
    }
    switch(v90)
    {
      case 2:
        if (!ZinIsOutsideBounds(v83, 24, (unint64_t)a1, v61))
        {
          v226 = (void *)v83;
          v213 = (unsigned int *)v83;
          goto LABEL_144;
        }
        v240[1] = v226;
        *(_QWORD *)&buf[40] = v87;
        *(_QWORD *)&buf[48] = v223;
        v236[1] = v228;
        *(_QWORD *)&buf[32] = v89;
        v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v106)
          goto LABEL_174;
        goto LABEL_173;
      case 4:
        v219 = v87;
        v91 = v86;
        if (ZinIsOutsideBounds(v83, 16, (unint64_t)a1, v61))
        {
          v240[1] = v226;
          v236[1] = v228;
          *(_QWORD *)&buf[32] = v89;
          *(_QWORD *)&buf[40] = v219;
          *(_QWORD *)&buf[48] = v223;
          v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v106)
            goto LABEL_174;
          goto LABEL_173;
        }
        ProcedureNameFromThread = ZinComputeProgramGetProcedureNameFromThread(v81, (_DWORD *)v83, (unint64_t)a1, v61);
        if (!ProcedureNameFromThread)
        {
          v240[1] = v226;
          v236[1] = v228;
          *(_QWORD *)&buf[32] = v89;
          *(_QWORD *)&buf[40] = v219;
          *(_QWORD *)&buf[48] = v223;
          v138 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v138)
            ZinComputeProgramMakeWithMappedSize(v138, v139, v140, v141, v142, v143, v144, v145);
          goto LABEL_255;
        }
        v93 = ProcedureNameFromThread;
        switch(*(_DWORD *)(v83 + 8))
        {
          case 1:
          case 4:
          case 6:
            if (!__s2b || strcmp(ProcedureNameFromThread, __s2b))
            {
              *((_QWORD *)&v239 + 1) = ++v210;
              __s2b = v93;
            }
            v86 = v91;
            v87 = v219;
            v237[1] = (void *)++v216;
            break;
          case 3:
            *(_QWORD *)&v242 = ++v207;
            goto LABEL_137;
          case 5:
            if (!__s2b || strcmp(ProcedureNameFromThread, __s2b))
            {
              *((_QWORD *)&v239 + 1) = ++v210;
              __s2b = v93;
            }
            v238[1] = (void *)++v209;
            goto LABEL_143;
          default:
LABEL_137:
            if (!__s2b)
            {
              v240[1] = v226;
              v236[1] = v228;
              *(_QWORD *)&buf[32] = v89;
              *(_QWORD *)&buf[40] = v219;
              *(_QWORD *)&buf[48] = v223;
LABEL_255:
              v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v160)
                ZinComputeProgramMakeWithMappedSize(v160, v161, v162, v163, v164, v165, v166, v167);
              goto LABEL_174;
            }
LABEL_143:
            v86 = v91;
            v87 = v219;
            break;
        }
LABEL_144:
        v83 += *(unsigned int *)(v83 + 4);
        if (++v88 < a1[2].cmd)
          continue;
        v240[1] = v226;
        *(_QWORD *)&buf[40] = v87;
        *(_QWORD *)&buf[48] = v223;
        v236[1] = v228;
        *(_QWORD *)&buf[32] = v89;
        if (v209 && v216 != v209)
        {
          v94 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v94)
            ZinComputeProgramMakeWithMappedSize(v94, v95, v96, v97, v98, v99, v100, v101);
          goto LABEL_174;
        }
        if (!v86)
          goto LABEL_246;
        v128 = malloc_type_calloc(v86, 0x18uLL, 0xE0040F9C386F3uLL);
        v236[0] = v128;
        if (!v128)
          goto LABEL_254;
        *v64 = (uint64_t)v128;
        v64[1] = v86;
        v232 = v86;
        if (ZinIsOutsideBounds((unint64_t)a1, 32, (unint64_t)a1, v61))
        {
          v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v129)
            goto LABEL_296;
          goto LABEL_174;
        }
        if (ZinIsOutsideBounds(v208, 8, (unint64_t)a1, v61))
        {
          v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v129)
            goto LABEL_296;
          goto LABEL_174;
        }
        v229 = a1[2].cmd;
        if (v229)
        {
          v146 = 0;
          v147 = 0;
          do
          {
            if (v146)
              v148 = (_DWORD *)(*(unsigned int *)(v208 + 4) + v208);
            else
              v148 = (_DWORD *)v208;
            v208 = (unint64_t)v148;
            if (*v148 == 25)
            {
              result = ZinIsOutsideBounds((unint64_t)v148, 72, (unint64_t)a1, v61);
              if ((_DWORD)result)
              {
                v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v129)
                  goto LABEL_174;
                goto LABEL_296;
              }
              if (v147 >= v232)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinComputeProgramMakeWithMappedSize();
LABEL_301:
                Relocations = 4;
                goto LABEL_175;
              }
              if (v64[1] <= v147)
                goto LABEL_302;
              v149 = *v64;
              v150 = (unint64_t *)(*v64 + 24 * v147);
              *v150 = v208;
              v151 = v147 + 1;
              v152 = *(unsigned int *)(v208 + 64);
              if ((_DWORD)v152)
              {
                v153 = (unint64_t *)malloc_type_calloc(v152, 0x28uLL, 0xE0040D54ACD11uLL);
                *(_QWORD *)(v149 + 24 * v147 + 8) = v153;
                if (!v153)
                  goto LABEL_254;
                v154 = *(unsigned int *)(v208 + 64);
                if ((_DWORD)v154)
                {
                  v155 = v153;
                  v156 = v208 + 72;
                  while (1)
                  {
                    *v155 = v156;
                    if (ZinIsOutsideBounds(v156, 80, (unint64_t)a1, v61))
                      break;
                    v155[1] = (unint64_t)v150;
                    if (*(_QWORD *)(v208 + 48) && (*(_BYTE *)(*v155 + 64) & 1) == 0)
                      v155[3] = (unint64_t)a1 + *(unsigned int *)(*v155 + 48);
                    v155 += 5;
                    v156 += 80;
                    if (!--v154)
                      goto LABEL_244;
                  }
                  v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v129)
                    goto LABEL_174;
LABEL_296:
                  ZinComputeProgramMakeWithMappedSize(v129, v130, v131, v132, v133, v134, v135, v136);
LABEL_174:
                  Relocations = 2;
LABEL_175:
                  v114 = v236[0];
                  if (v236[0])
                  {
                    v115 = *(_QWORD *)&buf[56];
                    if (*(_QWORD *)&buf[56])
                    {
                      v116 = 0;
                      do
                      {
                        v117 = (char *)&v114[3 * v116];
                        v120 = (char *)*((_QWORD *)v117 + 1);
                        v119 = (void **)(v117 + 8);
                        v118 = v120;
                        if (v120)
                        {
                          if (*(_DWORD *)(v114[3 * v116] + 64))
                          {
                            v121 = 0;
                            v122 = 16;
                            do
                            {
                              v118 = (char *)v114[3 * v116 + 1];
                              if (*(_QWORD *)&v118[v122])
                              {
                                free(*(void **)&v118[v122]);
                                v118 = (char *)*v119;
                                *(_QWORD *)((char *)*v119 + v122) = 0;
                              }
                              ++v121;
                              v122 += 40;
                            }
                            while (v121 < *(unsigned int *)(v114[3 * v116] + 64));
                          }
                          free(v118);
                          v114 = v236[0];
                          *((_QWORD *)v236[0] + 3 * v116 + 1) = 0;
                          v115 = *(_QWORD *)&buf[56];
                        }
                        ++v116;
                      }
                      while (v116 < v115);
                    }
                    free(v114);
                  }
                  if (v241[0])
                    free(v241[0]);
                  if (v237[0])
                    free(v237[0]);
                  if (v238[0])
                    free(v238[0]);
                  v123 = v240[0];
                  if (v240[0])
                  {
                    v124 = *((_QWORD *)&v239 + 1);
                    if (*((_QWORD *)&v239 + 1))
                    {
                      v125 = 0;
                      v126 = (void **)((char *)v240[0] + 32);
                      do
                      {
                        v127 = *(v126 - 2);
                        if (v127)
                        {
                          free(v127);
                          *(v126 - 2) = 0;
                        }
                        if (*v126)
                        {
                          free(*v126);
                          *v126 = 0;
                        }
                        ++v125;
                        v126 += 10;
                      }
                      while (v125 < v124);
                    }
                    free(v123);
                  }
                  if (v243)
                    free(v243);
                  return Relocations;
                }
              }
LABEL_244:
              v147 = v151;
            }
            ++v146;
          }
          while (v146 != v229);
        }
LABEL_246:
        if (!v213)
          goto LABEL_287;
        v157 = v213[3];
        if (!(_DWORD)v157)
          goto LABEL_287;
        v158 = malloc_type_calloc(v157, 0x20uLL, 0x700406ED721CCuLL);
        v241[0] = v158;
        if (!v158)
        {
LABEL_254:
          Relocations = 1;
          goto LABEL_175;
        }
        v159 = v213[3];
        v64[10] = (uint64_t)v158;
        v64[11] = v159;
        if (!a1)
        {
          v168 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v168)
            ZinComputeProgramMakeWithMappedSize(v168, v169, v170, v171, v172, v173, v174, v175);
          goto LABEL_259;
        }
        if (v64[1] && !*v64)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinComputeProgramMakeWithMappedSize();
LABEL_259:
          Relocations = 3;
          goto LABEL_175;
        }
        v176 = v213[2];
        if (ZinIsOutsideBounds((unint64_t)a1, v176, (unint64_t)a1, v61))
        {
          v177 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v177)
            goto LABEL_174;
          goto LABEL_264;
        }
        v185 = (char *)a1 + v176;
        result = ZinIsOutsideBounds((unint64_t)a1 + v176, 16, (unint64_t)a1, v61);
        if ((result & 1) != 0)
        {
          v177 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v177)
            goto LABEL_174;
LABEL_264:
          ZinComputeProgramMakeWithMappedSize(v177, v178, v179, v180, v181, v182, v183, v184);
          goto LABEL_174;
        }
        if (v64[11])
        {
          v186 = 0;
          if (v159 <= 1)
            v187 = 1;
          else
            v187 = v159;
          while (v186 != v159)
          {
            v188 = v64[10];
            v189 = (char **)(v188 + 32 * v186);
            v190 = &v185[16 * v186];
            *v189 = v190;
            v191 = *(unsigned int *)v190;
            if ((_DWORD)v191)
            {
              v192 = (char *)a1 + v191 + v213[4];
              *(_QWORD *)(v188 + 32 * v186 + 8) = v192;
              result = ZinIsStringOutsideBounds(v192, (unint64_t)a1, v61);
              if ((result & 1) != 0)
                goto LABEL_174;
              v190 = *v189;
            }
            v193 = v190[4] & 0xE;
            if (v193 == 10)
            {
              v195 = 0;
              v196 = *((_DWORD *)v190 + 2);
              while (*(_DWORD *)&v185[16 * v195] != v196)
              {
                if (++v195 == v187)
                {
                  v233 = v213[3];
                  LODWORD(v195) = -1;
                  goto LABEL_299;
                }
              }
              v233 = v213[3];
              if (v233 <= v195)
              {
LABEL_299:
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinComputeProgramMakeWithMappedSize(v195, v233);
                goto LABEL_301;
              }
              if (v64[11] <= (unint64_t)v195)
                break;
              *(_QWORD *)(v188 + 32 * v186 + 24) = v64[10] + 32 * v195;
            }
            else if (v193 == 14)
            {
              v194 = v64[1];
              v234[0] = *v64;
              v234[1] = v194;
              result = ZinComputeProgramFindSectionByIndexSpan(v234, v190[5]);
              *(_QWORD *)(v188 + 32 * v186 + 16) = result;
            }
            if (++v186 >= (unint64_t)v64[11])
              goto LABEL_287;
          }
LABEL_302:
          __break(1u);
          return result;
        }
LABEL_287:
        Relocations = ZinComputeProgramMakeRelocations((unint64_t *)buf);
        if ((_DWORD)Relocations)
          goto LABEL_175;
        Relocations = ZinComputeProgramMakeFvmlibs((uint64_t)buf);
        if ((_DWORD)Relocations)
          goto LABEL_175;
        Relocations = ZinComputeProgramMakeOperations((uint64_t *)buf);
        if ((_DWORD)Relocations)
          goto LABEL_175;
        Relocations = ZinComputeProgramMakeBindings((unint64_t *)buf);
        if ((_DWORD)Relocations)
          goto LABEL_175;
        Relocations = ZinComputeProgramMakeProcedures((uint64_t)buf);
        if ((_DWORD)Relocations)
          goto LABEL_175;
        Relocations = 1;
        v197 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E781D485uLL);
        *a4 = v197;
        if (!v197)
          goto LABEL_175;
        Relocations = 0;
        *(_QWORD *)&buf[24] = 0x80000000;
        v198 = *(_OWORD *)v236;
        v199 = *(_OWORD *)v237;
        v200 = v239;
        v197[6] = *(_OWORD *)v238;
        v197[7] = v200;
        v197[4] = v198;
        v197[5] = v199;
        v201 = *(_OWORD *)v240;
        v202 = *(_OWORD *)v241;
        v203 = v242;
        *((_QWORD *)v197 + 22) = v243;
        v197[9] = v202;
        v197[10] = v203;
        v197[8] = v201;
        v204 = *(_OWORD *)buf;
        v205 = *(_OWORD *)&buf[16];
        v206 = *(_OWORD *)&buf[48];
        v197[2] = *(_OWORD *)&buf[32];
        v197[3] = v206;
        *v197 = v204;
        v197[1] = v205;
        return Relocations;
      case 6:
        goto LABEL_121;
      case 8:
        if (!ZinIsOutsideBounds(v83, 8, (unint64_t)a1, v61))
        {
          v89 = v83;
          goto LABEL_144;
        }
        v240[1] = v226;
        *(_QWORD *)&buf[40] = v87;
        *(_QWORD *)&buf[48] = v223;
        v236[1] = v228;
        *(_QWORD *)&buf[32] = v89;
        v106 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v106)
          goto LABEL_174;
        goto LABEL_173;
      default:
        goto LABEL_144;
    }
  }
}

void ZinComputeProgramDestroy(_QWORD *a1)
{
  void **v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t i;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;

  if (a1)
  {
    v2 = (void **)a1[16];
    if (v2)
    {
      if (a1[15])
      {
        v3 = 0;
        do
        {
          if (v2[10 * v3 + 2])
          {
            free(v2[10 * v3 + 2]);
            v2 = (void **)a1[16];
            v2[10 * v3 + 2] = 0;
          }
          v4 = v2[10 * v3 + 4];
          if (v4)
          {
            if (v2[10 * v3 + 3])
            {
              v5 = 0;
              do
              {
                v6 = *((_QWORD *)v2[10 * v3 + 4] + v5);
                if (*(_QWORD *)(v6 + 2088))
                {
                  free(*(void **)(v6 + 2088));
                  v2 = (void **)a1[16];
                  v7 = v2[10 * v3 + 4];
                  *(_QWORD *)(v7[v5] + 2088) = 0;
                  v6 = v7[v5];
                }
                *(_QWORD *)(v6 + 2072) = 0;
                if (*(_QWORD *)(v6 + 2096))
                {
                  free(*(void **)(v6 + 2096));
                  v2 = (void **)a1[16];
                  v8 = v2[10 * v3 + 4];
                  *(_QWORD *)(v8[v5] + 2096) = 0;
                  v6 = v8[v5];
                }
                *(_QWORD *)(v6 + 2080) = 0;
                ++v5;
              }
              while ((unint64_t)v2[10 * v3 + 3] > v5);
              v4 = v2[10 * v3 + 4];
            }
            free(v4);
            v2 = (void **)a1[16];
            v2[10 * v3 + 4] = 0;
          }
          if (v2[10 * v3 + 9])
          {
            free(v2[10 * v3 + 9]);
            v2 = (void **)a1[16];
            v2[10 * v3 + 9] = 0;
          }
          ++v3;
        }
        while (v3 < a1[15]);
      }
      free(v2);
      a1[16] = 0;
    }
    v9 = (void *)a1[10];
    if (v9)
    {
      free(v9);
      a1[10] = 0;
    }
    v10 = (void *)a1[21];
    if (v10)
    {
      free(v10);
      a1[21] = 0;
    }
    v11 = a1[12];
    if (v11)
    {
      if (*(_QWORD *)(v11 + 2088))
      {
        free(*(void **)(v11 + 2088));
        v11 = a1[12];
        *(_QWORD *)(v11 + 2088) = 0;
      }
      *(_QWORD *)(v11 + 2072) = 0;
      if (*(_QWORD *)(v11 + 2096))
      {
        free(*(void **)(v11 + 2096));
        v11 = a1[12];
        *(_QWORD *)(v11 + 2096) = 0;
      }
      free((void *)v11);
      a1[12] = 0;
    }
    v12 = (void *)a1[18];
    if (v12)
      free(v12);
    v13 = (_QWORD *)a1[8];
    if (v13)
    {
      v14 = a1[7];
      if (v14)
      {
        for (i = 0; i < v14; ++i)
        {
          v16 = (char *)v13[3 * i + 1];
          if (v16)
          {
            if (*(_DWORD *)(v13[3 * i] + 64))
            {
              v17 = 0;
              v18 = 16;
              do
              {
                v16 = (char *)v13[3 * i + 1];
                if (*(_QWORD *)&v16[v18])
                {
                  free(*(void **)&v16[v18]);
                  v13 = (_QWORD *)a1[8];
                  v16 = (char *)v13[3 * i + 1];
                  *(_QWORD *)&v16[v18] = 0;
                }
                ++v17;
                v18 += 40;
              }
              while (v17 < *(unsigned int *)(v13[3 * i] + 64));
            }
            free(v16);
            v14 = a1[7];
            v13 = (_QWORD *)a1[8];
            v13[3 * i + 1] = 0;
          }
        }
      }
      free(v13);
      a1[8] = 0;
    }
    v19 = (void *)a1[22];
    if (v19)
      free(v19);
    free(a1);
  }
}

const char **ZinComputeProgramGetSectionWithName(uint64_t a1, char *__s2, const char *a3)
{
  const char **v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = 0;
  if (__s2 && a1 && a3)
  {
    v5 = *(_QWORD *)(a1 + 176);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v8 = *(_QWORD **)v5;
      v9 = *(_QWORD *)v5 + 24 * v6;
      while (1)
      {
        v10 = *v8;
        if (!strncmp((const char *)(*v8 + 8), __s2, 0x10uLL))
        {
          v11 = *(unsigned int *)(v10 + 64);
          if ((_DWORD)v11)
            break;
        }
LABEL_7:
        v8 += 3;
        if (v8 == (_QWORD *)v9)
          return 0;
      }
      v3 = (const char **)v8[1];
      v12 = 40 * v11;
      while (strncmp(*v3, a3, 0x10uLL))
      {
        v3 += 5;
        v12 -= 40;
        if (!v12)
          goto LABEL_7;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t ZinComputeProgramGetIndexOfCompilationUnitFromDebugInfo(const unsigned __int8 *a1, int a2, const char *__s)
{
  const unsigned __int8 *v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  const unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  size_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2 && __s)
  {
    v4 = a1;
    LOBYTE(v5) = 0;
    v6 = 0;
    v7 = -1;
    v8 = 0xFFFFFFFFLL;
    v9 = &a1[a2];
    while (1)
    {
      v10 = *(_DWORD *)v4;
      v11 = *((unsigned int *)v4 + 1);
      if (*(int *)v4 <= 7)
        break;
      if (v10 == 8)
      {
        LOBYTE(v5) = 1;
      }
      else
      {
        v12 = (const char *)(v4 + 8);
        if (v10 == 2048)
        {
          if ((v6 & 1) == 0)
          {
            v6 = 0;
            goto LABEL_26;
          }
          if (*(_DWORD *)v12 == v7)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
            {
              v24 = 136315138;
              v25 = __s;
              _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Found procedure name = %s", (uint8_t *)&v24, 0xCu);
            }
            return v8;
          }
LABEL_22:
          v6 = 1;
          goto LABEL_26;
        }
        if (v10 == 2051)
        {
          if ((v5 & 1) == 0)
            goto LABEL_24;
          v5 = v11 - 8;
          if ((_DWORD)v11 != 8)
          {
            v13 = &v12[v5];
            v14 = strlen(__s);
            v7 = 0;
            while (strncmp(v12, __s, v14))
            {
              v12 += strlen(v12) + 1;
              ++v7;
              if (v12 >= v13)
              {
                LOBYTE(v5) = 0;
                goto LABEL_15;
              }
            }
LABEL_24:
            LOBYTE(v5) = 0;
            goto LABEL_26;
          }
LABEL_15:
          v7 = -1;
        }
      }
LABEL_26:
      v4 += v11;
      if (v4 >= v9)
      {
        if ((v6 & 1) != 0)
          return v8;
        else
          return 0xFFFFFFFFLL;
      }
    }
    if (!v10)
    {
      v6 = 0;
      v8 = (v8 + 1);
      goto LABEL_26;
    }
    if (v10 != 1)
      goto LABEL_26;
    goto LABEL_22;
  }
  v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v15)
    ZinComputeProgramGetIndexOfCompilationUnitFromDebugInfo(v15, v16, v17, v18, v19, v20, v21, v22);
  return 0xFFFFFFFFLL;
}

uint64_t ZinComputeProgramGetSymbolSection(uint64_t a1, uint64_t a2, char *__s2)
{
  uint64_t v6;
  uint64_t i;

  if ((unint64_t)(a2 - 1) > 0xFFFFFFFD || __s2 == 0)
    return 0;
  v6 = a2;
  for (i = a1 + 16; strcmp(*(const char **)(i - 8), __s2); i += 32)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)i;
}

void ZinComputeProgramMakeWithMappedSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: mapped size > model size", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing ident command", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing macho structure", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'data' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing symbol table", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: load segments buffer overrun", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Jit operation count needs to be 0 or match operation count", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "No procedure name found.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Cannot find procedure name from thread.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing macho header", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeWithMappedSize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_7(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal segment parameters: segments=%p segment_count=%zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_7(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal segment_index=%zu, (segment_count=%zu)", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_10();
}

void ZinComputeProgramMakeWithMappedSize(int a1, int a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = 136315650;
  v3 = "ZinComputeProgramStatus ZinComputeProgramMakeSymbolsHelper(const void *const, const void *const, std::span<ZinCom"
       "puteProgramSegment> &, const struct symtab_command *, std::span<ZinComputeProgramSymbol> &)";
  v4 = 1024;
  v5 = a1;
  v6 = 1024;
  v7 = a2;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s: illegal symbol idx=%u, symtab_cmd->nsyms=%u", (uint8_t *)&v2, 0x18u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeRelocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'data' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'segments' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal segment", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal reloc info", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing relocations", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeRelocations()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'segment_count' parameter =%zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_7(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal symbol parameters: symbols=%p symbol_count=%zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_10();
}

void ZinComputeProgramMakeOperations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal 'operations' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeOperations()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'operation_count' parameter = %zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeOperations(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ZinComputeProgramStatus ZinComputeProgramMakeAneOperations(ZinComputeProcedureOperation *, const struct compute_"
        "thread_command *, uint32_t, std::span<ZinComputeProgramSegment> &, const void *)";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal thread state flavor", a1);
}

{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ZinComputeProgramStatus ZinComputeProgramMakeAneOperations(ZinComputeProcedureOperation *, const struct compute_"
        "thread_command *, uint32_t, std::span<ZinComputeProgramSegment> &, const void *)";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: ane_thread_state_64 out of bounds", a1);
}

{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ZinComputeProgramStatus ZinComputeProgramMakeAneOperations(ZinComputeProcedureOperation *, const struct compute_"
        "thread_command *, uint32_t, std::span<ZinComputeProgramSegment> &, const void *)";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: ane_seg_thread_state_64 out of bounds", a1);
}

void ZinComputeProgramMakeBindings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'data' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'bindings' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing binding thread commands", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeBindings()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'binding_count' parameter = %zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeProcedures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal 'operations' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal 'procedures' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Allocation error: ZinComputeProgramMakeAneProcedures", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Allocation error: compute_thread_command", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal 'proc_operation_count', no proc operations", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal 'proc_fvmlib_count', no fvmlibs", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'proc_operations'", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "   proc_fvmlib_idx=%.4zu    proc_fvmlib_count=%.4zu", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Unable to parse all inputs/outputs for all procedures: ", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakeProcedures()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'operation_count' parameter = %zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'procedure_count' parameter = %zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'binding_count' parameter = %zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "   proc_operation_idx=%.4zu    proc_operation_count=%.4zu", v1, v2, v3, v4, 0);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramGetIndexOfCompilationUnitFromDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Incorrect parameter", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinComputeProgramMakeFvmlibsHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: Buffer overrun while parsing fvmlibs structures", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakePreCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'data' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal (null) 'segments' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s: illegal 'fvmlibs' parameter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinComputeProgramMakePreCheck()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal 'segment_count' parameter =%zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "%s: illegal fvmlib_count parameter = %zu", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinIrLRNUnit::ZinIrLRNUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C016718;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &unk_24C01BA80;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  return a1;
}

void sub_206F07FF8(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLRNUnit::TensorDimensions(ZinIrLRNUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  return 0;
}

void ZinIrLRNUnit::CreateOpcode(ZinIrLRNUnit *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v5;
  __n128 *v6;
  uint64_t v7;

  v5 = (__int128 *)((char *)this + 144);
  v6 = (__n128 *)((char *)this + 168);
  v7 = operator new();
  ZinIrLRNInfo::ZinIrLRNInfo(v7, *((_DWORD *)this + 34), v5, v6, *((float *)this + 48), *((float *)this + 49), *((float *)this + 50));
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v7;
}

void sub_206F080BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40C871E4E7);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLRNUnit::CreateLayer(ZinIrLRNUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  ZinIrLRNUnit::CreateOpcode(a1, (uint64_t)&v17);
  if (v17)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v15 = **a3;
    v16 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinLRNLayer::ZinLRNLayer(v6, &v18, &v15, (char *)a1 + 64);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v5);
  }
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206F081F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C409D855DA1);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrLRNUnit::~ZinIrLRNUnit(void **this)
{
  *this = &off_24C016718;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C016718;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinParseFurthestPointSamplingUnit(CFDictionaryRef *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *v8;
  const void *v9;
  CFTypeID v10;
  const __CFString *v11;
  const __CFString *v12;
  CFTypeID v13;
  uint64_t result;
  int v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int valuePtr;

  Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinParseFurthestPointSamplingUnit(v16, v17, v18, v19, v20, v21, v22, v23);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  v8 = CFDictionaryGetValue(v6, CFSTR("CentroidCount"));
  if (v8)
  {
    v9 = v8;
    v10 = CFGetTypeID(v8);
    if (v10 == CFNumberGetTypeID())
      v8 = v9;
    else
      v8 = 0;
  }
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, &valuePtr);
  *(_DWORD *)(a2 + 80) = valuePtr;
  v11 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("DistanceMetric"));
  if (!v11)
    goto LABEL_16;
  v12 = v11;
  v13 = CFGetTypeID(v11);
  if (v13 != CFStringGetTypeID())
    goto LABEL_16;
  if (!ZinCFStringEquals(v12, CFSTR("L1")))
  {
    if (ZinCFStringEquals(v12, CFSTR("L2")))
    {
LABEL_16:
      result = 0;
      v15 = 2;
      goto LABEL_17;
    }
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidFPSDistanceMetric"));
    v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v24)
      ZinParseFurthestPointSamplingUnit(v24, v25, v26, v27, v28, v29, v30, v31);
    return 3;
  }
  result = 0;
  v15 = 1;
LABEL_17:
  *(_DWORD *)(a2 + 84) = v15;
  return result;
}

void ZinParseFurthestPointSamplingUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing FurthestPointSampling params\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unrecognized Distance Metric requested in Furthest Point Sampling unit. \n", a5, a6, a7, a8, 0);
}

__int128 *ZinIrHalH16s::GetParams(ZinIrHalH16s *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  void *v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  void *v33;
  _BYTE *v34;
  void *v35;
  _BYTE *v36;
  _OWORD v37[3];
  int v38;
  double __dst[50];
  _OWORD v40[3];
  _OWORD v41[2];
  _OWORD v42[12];
  uint64_t v43;
  int v44;
  int64x2_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int64x2_t v49;
  uint64_t v50;
  int v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;
  int64x2_t v57;
  uint64_t v58;
  int v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  int v80;
  int64x2_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int64x2_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int64x2_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int64x2_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int64x2_t v97;
  uint64_t v98;
  int v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  int v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  int v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  int64x2_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[3];
  int v130;
  _QWORD v131[3];
  int v132;
  _QWORD v133[3];
  int v134;
  _QWORD v135[3];
  int v136;
  _QWORD v137[3];
  int v138;
  _QWORD v139[3];
  int v140;
  _QWORD v141[3];
  int v142;
  _QWORD v143[3];
  int v144;
  _QWORD v145[3];
  int v146;
  _QWORD v147[3];
  _OWORD v148[9];
  _OWORD v149[2];
  _OWORD v150[6];
  _OWORD v151[2];
  _OWORD v152[2];
  _OWORD v153[2];
  __int128 v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalH16s::GetParams(void)const::ZinIrHalH16sParameters = xmmword_207A8AA00;
    dword_254526C70 = 8;
    unk_254526C78 = xmmword_207A8AA10;
    unk_254526C88 = xmmword_207A7E070;
    unk_254526C98 = xmmword_207A7E080;
    unk_254526CA8 = xmmword_207A7D4C0;
    unk_254526CB8 = xmmword_207A7E090;
    unk_254526CC8 = xmmword_207A7E080;
    unk_254526CD8 = xmmword_207A7D370;
    unk_254526CE8 = xmmword_207A7E0A0;
    unk_254526CF8 = xmmword_207A7E0B0;
    unk_254526D08 = xmmword_207A7D3A0;
    unk_254526D18 = vdupq_n_s64(4uLL);
    qword_254526D28 = 4;
    xmmword_254526D30 = xmmword_207AA9400;
    unk_254526D40 = unk_207AA9410;
    xmmword_254526D50 = xmmword_207AA9400;
    unk_254526D60 = unk_207AA9410;
    qword_254526D80 = 4;
    xmmword_254526D70 = xmmword_207AA9420;
    xmmword_254526D88 = xmmword_207A7D3B0;
    xmmword_254526D98 = xmmword_207A7D3C0;
    xmmword_254526DA8 = xmmword_207A7D3C0;
    xmmword_254526DB8 = xmmword_207A7D3C0;
    xmmword_254526DC8 = xmmword_207A7D3D0;
    xmmword_254526DD8 = xmmword_207A7D3E0;
    xmmword_254526DE8 = xmmword_207A7D3F0;
    xmmword_254526DF8 = xmmword_207A7D400;
    xmmword_254526E08 = xmmword_207A7D410;
    xmmword_254526E18 = xmmword_207A7D4E0;
    xmmword_254526E28 = xmmword_207A7F3A0;
    xmmword_254526E38 = xmmword_207A7D440;
    xmmword_254526E48 = xmmword_207A7D450;
    xmmword_254526E58 = xmmword_207A7E0D0;
    xmmword_254526E68 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_254526E78 = xmmword_207A80420;
    xmmword_254526E88 = xmmword_207A7D480;
    xmmword_254526E98 = xmmword_207A7D490;
    xmmword_254526EA8 = xmmword_207A7D4A0;
    xmmword_254526EB8 = xmmword_207A7E0E0;
    xmmword_254526EC8 = xmmword_207A8AA20;
    qword_254526ED8 = 0;
    word_254526EE0 = 256;
    xmmword_254526EE8 = xmmword_207A7D4C0;
    xmmword_254526EF8 = xmmword_207A7D4D0;
    xmmword_254526F08 = xmmword_207A7D4E0;
    qword_254526F18 = 0x10000;
    byte_254526F20 = 122;
    xmmword_254526F28 = xmmword_207A7E100;
    dword_254526F38 = 520097776;
    qword_254526F3C = 0xFFFFFFEB0000000BLL;
    xmmword_254526F48 = xmmword_207A7D500;
    xmmword_254526F58 = xmmword_207A7D510;
    xmmword_254526F68 = xmmword_207A7D520;
    v116 = vdupq_n_s64(8uLL);
    v117 = xmmword_207A7E110;
    v118 = xmmword_207A7E120;
    v119 = xmmword_207A7D490;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254526F78, (uint64_t)&v116, 4uLL);
    xmmword_254526F90 = xmmword_207A7E130;
    unk_254526FA0 = xmmword_207A7D540;
    xmmword_254526FB0 = (__int128)vdupq_n_s64(0x20uLL);
    unk_254526FC0 = xmmword_207A7D370;
    unk_254526FD0 = vdupq_n_s64(8uLL);
    unk_254526FE0 = xmmword_207A7D550;
    unk_254526FF0 = xmmword_207A7D560;
    unk_254527000 = vdupq_n_s64(0x100uLL);
    unk_254527010 = vdupq_n_s64(0x80uLL);
    unk_254527020 = xmmword_207A7E140;
    unk_254527030 = xmmword_207A7E150;
    unk_254527040 = xmmword_207A7D590;
    unk_254527050 = xmmword_207A7D5A0;
    unk_254527060 = xmmword_207A7D5B0;
    unk_254527070 = vdupq_n_s64(2uLL);
    unk_254527080 = xmmword_207A7D3C0;
    unk_254527090 = vdupq_n_s64(0x4000uLL);
    unk_2545270A0 = xmmword_207A7D5C0;
    unk_2545270B0 = 257;
    byte_2545270B6 = 0;
    unk_2545270B2 = 0;
    unk_2545270B7 = 1;
    unk_2545270BF = 0x101010101010101;
    unk_2545270B9 = 0x101010101010101;
    unk_2545270C7 = 16843008;
    byte_2545270CF = 0;
    unk_2545270D0 = 16842753;
    word_2545270D4 = 1;
    qword_2545270D6 = 0x101010101010101;
    word_2545270DE = 0;
    unk_2545270E0 = xmmword_207A7D4C0;
    unk_2545270F0 = xmmword_207A7D5E0;
    unk_254527100 = 40;
    unk_254527110 = 0;
    unk_254527108 = 0;
    word_254527118 = 1;
    *(int *)((char *)&dword_25452711A + 3) = 16843009;
    dword_25452711A = 16843009;
    unk_254527128 = 16;
    byte_254527130 = 0;
    unk_254527131 = 16843009;
    unk_254527139 = 0x101010100010000;
    unk_254527141 = 16844808;
    unk_254527145 = 0;
    unk_254527147 = 16843009;
    byte_25452714B = 1;
    unk_25452714C = 0x1010100010000;
    unk_254527154 = 16777473;
    word_254527158 = 2056;
    unk_254527160 = xmmword_207A7E180;
    unk_254527170 = 4;
    word_254527178 = 0;
    unk_25452717C = 1;
    unk_254527180 = 0x10000;
    word_254527184 = 257;
    byte_254527186 = 1;
    unk_254527187 = 0;
    unk_25452718B = 0x606000000010101;
    unk_254527193 = 65792;
    unk_254527197 = 256;
    byte_254527199 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_2545271A0, "Simple");
    qword_2545271B8 = 25165824;
    dword_2545271C0 = 1071225242;
    *(_QWORD *)algn_2545271C4 = 0x230000000ELL;
    *(_OWORD *)&algn_2545271C4[12] = xmmword_207A7D5F0;
    *(int64x2_t *)&algn_2545271C4[28] = vdupq_n_s64(0x40uLL);
    *(_OWORD *)&algn_2545271C4[44] = xmmword_207A7D530;
    qword_254527200 = 8;
    byte_254527208 = 0;
    unk_25452720C = 0xF3E800000;
    byte_254527214 = 1;
    v154 = xmmword_207A7D610;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_254527218, &v154, 4uLL);
    v152[0] = xmmword_207AA9438;
    v152[1] = unk_207AA9448;
    v153[0] = xmmword_207AA9458;
    *(_OWORD *)((char *)v153 + 12) = *(__int128 *)((char *)&xmmword_207AA9458 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254527230, v152, 0xFuLL);
    v150[4] = xmmword_207AA94B4;
    v150[5] = unk_207AA94C4;
    v151[0] = xmmword_207AA94D4;
    *(_OWORD *)((char *)v151 + 12) = *(__int128 *)((char *)&xmmword_207AA94D4 + 12);
    v150[0] = xmmword_207AA9474;
    v150[1] = unk_207AA9484;
    v150[2] = xmmword_207AA9494;
    v150[3] = unk_207AA94A4;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254527248, v150, 0x1FuLL);
    v148[7] = unk_207AA9560;
    v148[8] = xmmword_207AA9570;
    v149[0] = unk_207AA9580;
    *(_OWORD *)((char *)v149 + 12) = unk_207AA958C;
    v148[4] = xmmword_207AA9530;
    v148[5] = unk_207AA9540;
    v148[6] = xmmword_207AA9550;
    v148[0] = xmmword_207AA94F0;
    v148[1] = unk_207AA9500;
    v148[2] = xmmword_207AA9510;
    v148[3] = unk_207AA9520;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_254527260, v148, 0x2BuLL);
    v112 = 2;
    v113 = xmmword_207A7D620;
    v114 = 0x1100000002;
    v115 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v35, &v112, 1uLL);
    v116.i32[0] = 641877825;
    v117 = 0uLL;
    v116.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v116.i64[1], v35, (uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * ((v36 - (_BYTE *)v35) >> 3));
    v108 = 2;
    v109 = xmmword_207A7D620;
    v110 = 0x1100000002;
    v111 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v33, &v108, 1uLL);
    LODWORD(v118) = 759318337;
    v119 = 0uLL;
    *((_QWORD *)&v118 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((_QWORD *)&v118 + 1, v33, (uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * ((v34 - (_BYTE *)v33) >> 3));
    v104 = 2;
    v105 = xmmword_207A7D620;
    v106 = 0x1100000002;
    v107 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v31, &v104, 1uLL);
    v120 = 792872769;
    memset(v121, 0, sizeof(v121));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v121, v31, (uint64_t)v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (_BYTE *)v31) >> 3));
    v100 = 2;
    v101 = xmmword_207A7D620;
    v102 = 0x1100000002;
    v103 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v29, &v100, 1uLL);
    v122 = 2084718401;
    memset(v123, 0, sizeof(v123));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v123, v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)v29) >> 3));
    v96 = 10;
    v97 = vdupq_n_s64(1uLL);
    v98 = 0x800000001;
    v99 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v27, &v96, 1uLL);
    v124 = 642527542;
    memset(v125, 0, sizeof(v125));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v125, v27, (uint64_t)v28, 0xCCCCCCCCCCCCCCCDLL * ((v28 - (_BYTE *)v27) >> 3));
    v92 = 3;
    v93 = vdupq_n_s64(1uLL);
    v94 = 0x700000002;
    v95 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v25, &v92, 1uLL);
    v126 = 642527336;
    memset(v127, 0, sizeof(v127));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v127, v25, (uint64_t)v26, 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)v25) >> 3));
    v88 = 3;
    v89 = vdupq_n_s64(1uLL);
    v90 = 0x700000002;
    v91 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v23, &v88, 1uLL);
    v128 = 759967848;
    memset(v129, 0, sizeof(v129));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v129, v23, (uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)v23) >> 3));
    v84 = 3;
    v85 = vdupq_n_s64(1uLL);
    v86 = 0x700000002;
    v87 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v21, &v84, 1uLL);
    v130 = 793522280;
    memset(v131, 0, sizeof(v131));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v131, v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)v21) >> 3));
    v80 = 3;
    v81 = vdupq_n_s64(1uLL);
    v82 = 0x700000002;
    v83 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v19, &v80, 1uLL);
    v132 = 2085367912;
    memset(v133, 0, sizeof(v133));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v133, v19, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)v19) >> 3));
    v76 = 3;
    v77 = xmmword_207A7D620;
    v78 = 0x1300000002;
    v79 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v17, &v76, 1uLL);
    v134 = 642934849;
    memset(v135, 0, sizeof(v135));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v135, v17, (uint64_t)v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - (_BYTE *)v17) >> 3));
    v72 = 3;
    v73 = xmmword_207A7D620;
    v74 = 0x1300000002;
    v75 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v15, &v72, 1uLL);
    v136 = 760375361;
    memset(v137, 0, sizeof(v137));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v137, v15, (uint64_t)v16, 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)v15) >> 3));
    v68 = 3;
    v69 = xmmword_207A7D620;
    v70 = 0x1300000002;
    v71 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v13, &v68, 1uLL);
    v138 = 793929793;
    memset(v139, 0, sizeof(v139));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v139, v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - (_BYTE *)v13) >> 3));
    v64 = 3;
    v65 = xmmword_207A7D620;
    v66 = 0x1300000002;
    v67 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v11, &v64, 1uLL);
    v140 = 2085775425;
    memset(v141, 0, sizeof(v141));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v141, v11, (uint64_t)v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - (_BYTE *)v11) >> 3));
    v56 = 2;
    v57 = vdupq_n_s64(1uLL);
    v58 = 0x100000001;
    v59 = 0;
    v60 = 2;
    v61 = xmmword_207A7D4F0;
    v62 = 0x900000002;
    v63 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v9, &v56, 2uLL);
    v142 = 641230384;
    memset(v143, 0, sizeof(v143));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v143, v9, (uint64_t)v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)v9) >> 3));
    v48 = 2;
    v49 = vdupq_n_s64(1uLL);
    v50 = 0x100000001;
    v51 = 0;
    v52 = 2;
    v53 = xmmword_207A7D4F0;
    v54 = 0x900000002;
    v55 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v7, &v48, 2uLL);
    v144 = 641234480;
    memset(v145, 0, sizeof(v145));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v145, v7, (uint64_t)v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v7) >> 3));
    v44 = 3;
    v45 = vdupq_n_s64(1uLL);
    v46 = 0x700000002;
    v47 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v44, 1uLL);
    v146 = 707153000;
    memset(v147, 0, sizeof(v147));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v147, __p, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_254527278, (unsigned int *)&v116, 16);
    word_254527290 = 0;
    byte_254527292 = 1;
    *(_DWORD *)algn_254527293 = 0;
    qword_254527298 = 0;
    dword_2545272A0 = 0;
    unk_2545272A8 = 0u;
    unk_2545272B8 = 0u;
    word_2545272C8 = 257;
    qword_2545272F0 = 8;
    xmmword_2545272D0 = xmmword_207AA95A0;
    unk_2545272E0 = unk_207AA95B0;
    unk_2545272F8 = xmmword_207AA11E0;
    v42[10] = xmmword_207AA9668;
    v42[11] = unk_207AA9678;
    v43 = 0x41E19CF8E0000000;
    v42[6] = xmmword_207AA9628;
    v42[7] = unk_207AA9638;
    v42[8] = xmmword_207AA9648;
    v42[9] = unk_207AA9658;
    v42[2] = xmmword_207AA95E8;
    v42[3] = unk_207AA95F8;
    v42[4] = xmmword_207AA9608;
    v42[5] = unk_207AA9618;
    v42[0] = xmmword_207AA95C8;
    v42[1] = unk_207AA95D8;
    std::vector<double>::vector[abi:ne180100](&qword_254527308, v42, 0x19uLL);
    v41[0] = xmmword_207AA9690;
    v41[1] = unk_207AA96A0;
    std::vector<double>::vector[abi:ne180100](&qword_254527320, v41, 4uLL);
    v40[0] = xmmword_207AA96B0;
    v40[1] = unk_207AA96C0;
    v40[2] = xmmword_207AA96D0;
    std::vector<double>::vector[abi:ne180100](&qword_254527338, v40, 6uLL);
    memcpy(__dst, &unk_207AA96E0, sizeof(__dst));
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254527350, __dst, 25);
    xmmword_254527368 = xmmword_207A7D640;
    v37[0] = xmmword_207AA9870;
    v37[1] = unk_207AA9880;
    v37[2] = xmmword_207AA9890;
    v38 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_254527378, v37, 0xDuLL);
    xmmword_254527390 = xmmword_207A7E1A0;
    unk_2545273A0 = xmmword_207A7D650;
    qword_2545273B0 = 64;
    unk_2545273B8 = 0x101010101010101;
    unk_2545273BE = 0x101010101010101;
    unk_254527448 = 0u;
    *(_OWORD *)&algn_254527453[5] = 0u;
    unk_2545273C8 = 0u;
    unk_2545273D8 = 0u;
    unk_2545273E8 = 0u;
    unk_2545273F8 = 0u;
    unk_254527408 = 0u;
    unk_254527418 = 0u;
    unk_254527428 = 0u;
    unk_254527438 = 0u;
    word_254527450 = 257;
    byte_254527452 = 1;
    byte_254527460 = 0;
    dword_254527470 = 0;
    byte_254527474 = 0;
    dword_254527468 = 0;
    byte_254527475 = 1;
    unk_254527478 = xmmword_207A7F3E0;
    byte_254527488 = 1;
    qword_254527490 = 0xFFFFLL;
    byte_254527498 = 0;
    qword_2545274A0 = 0;
    word_2545274A8 = 257;
    v3 = 512;
    byte_2545274AA = 1;
    do
    {
      v4 = *(void **)((char *)&v113 + v3 + 8);
      if (v4)
      {
        *(uint64_t *)((char *)&v114 + v3) = (uint64_t)v4;
        operator delete(v4);
      }
      v3 -= 32;
    }
    while (v3);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH16s::GetParams(void)const::ZinIrHalH16sParameters, &dword_2069AB000);
  }
  return &ZinIrHalH16s::GetParams(void)const::ZinIrHalH16sParameters;
}

void sub_206F095D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v33, *(_QWORD **)(v33 + 8));
  if (qword_254527338)
  {
    qword_254527340 = qword_254527338;
    operator delete((void *)qword_254527338);
  }
  if (qword_254527320)
  {
    qword_254527328 = qword_254527320;
    operator delete((void *)qword_254527320);
  }
  if (qword_254527308)
  {
    qword_254527310 = qword_254527308;
    operator delete((void *)qword_254527308);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v32, *(_QWORD **)(v32 + 8));
  v36 = 512;
  while (1)
  {
    v37 = *(void **)((char *)&STACK[0x780] + v36 - 24);
    if (v37)
    {
      *(unint64_t *)((char *)&STACK[0x780] + v36 - 16) = (unint64_t)v37;
      operator delete(v37);
    }
    v36 -= 32;
    if (!v36)
    {
      if (__p)
        operator delete(__p);
      if (a20)
        operator delete(a20);
      if (a23)
        operator delete(a23);
      if (a26)
        operator delete(a26);
      if (a29)
        operator delete(a29);
      if (a32)
      {
        v34[1] = a32;
        operator delete(a32);
      }
      v38 = (void *)v34[3];
      if (v38)
      {
        v34[4] = v38;
        operator delete(v38);
      }
      v39 = (void *)v34[6];
      if (v39)
      {
        v34[7] = v39;
        operator delete(v39);
      }
      v40 = (void *)v34[9];
      if (v40)
      {
        v34[10] = v40;
        operator delete(v40);
      }
      v41 = (void *)v34[12];
      if (v41)
      {
        v34[13] = v41;
        operator delete(v41);
      }
      v42 = (void *)v34[15];
      if (v42)
      {
        v34[16] = v42;
        operator delete(v42);
      }
      v43 = (void *)v34[18];
      if (v43)
      {
        v34[19] = v43;
        operator delete(v43);
      }
      v44 = (void *)v34[21];
      if (v44)
      {
        v34[22] = v44;
        operator delete(v44);
      }
      v45 = (void *)v34[24];
      if (v45)
      {
        v34[25] = v45;
        operator delete(v45);
      }
      v46 = (void *)v34[27];
      if (v46)
      {
        v34[28] = v46;
        operator delete(v46);
      }
      v47 = (void *)v34[30];
      if (v47)
      {
        v34[31] = v47;
        operator delete(v47);
      }
      if (qword_254527260)
      {
        qword_254527268 = qword_254527260;
        operator delete((void *)qword_254527260);
      }
      if (qword_254527248)
      {
        qword_254527250 = qword_254527248;
        operator delete((void *)qword_254527248);
      }
      if (qword_254527230)
      {
        qword_254527238 = qword_254527230;
        operator delete((void *)qword_254527230);
      }
      if (qword_254527218)
      {
        qword_254527220 = qword_254527218;
        operator delete((void *)qword_254527218);
      }
      if (byte_2545271B7 < 0)
        operator delete((void *)qword_2545271A0);
      if (qword_254526F78)
      {
        qword_254526F80 = qword_254526F78;
        operator delete((void *)qword_254526F78);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_206F098C0()
{
  JUMPOUT(0x206F0974CLL);
}

void sub_206F098D0()
{
  JUMPOUT(0x206F0975CLL);
}

void sub_206F098E0()
{
  JUMPOUT(0x206F0976CLL);
}

void sub_206F098F0()
{
  JUMPOUT(0x206F0977CLL);
}

void sub_206F09900()
{
  JUMPOUT(0x206F0978CLL);
}

void sub_206F09910()
{
  JUMPOUT(0x206F0979CLL);
}

void sub_206F09920()
{
  JUMPOUT(0x206F097ACLL);
}

void sub_206F09930()
{
  JUMPOUT(0x206F097BCLL);
}

void sub_206F09940()
{
  JUMPOUT(0x206F097CCLL);
}

void sub_206F09950()
{
  JUMPOUT(0x206F097DCLL);
}

void sub_206F09968()
{
  JUMPOUT(0x206F0981CLL);
}

void sub_206F09970()
{
  JUMPOUT(0x206F09834);
}

void sub_206F09978()
{
  JUMPOUT(0x206F0984CLL);
}

void sub_206F09980()
{
  JUMPOUT(0x206F09864);
}

void sub_206F09988()
{
  JUMPOUT(0x206F0987CLL);
}

void sub_206F09990()
{
  JUMPOUT(0x206F09894);
}

void sub_206F09998()
{
  JUMPOUT(0x206F098ACLL);
}

uint64_t ZinCreateUnit(__CFDictionary *a1, const ZinIrVersion *a2, ZinIrGOCUnit **a3, CFArrayRef *a4)
{
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  ZinIrGOCUnit *v10;
  uint64_t v11;
  ZinIrGOCUnit *v13;
  ZinIrGOCUnit *v14;
  __int128 v15;
  int v16;
  int v17;
  ZinIrGOCUnit *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  ZinIrGOCUnit *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  int v40;
  char v42;
  ZinIrGOCUnit *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  ZinIrGOCUnit *v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  ZinIrGOCUnit *v66;
  int v67;
  int v68;
  ZinIrGOCUnit *v69;
  int v70;
  int v71;
  ZinIrGOCUnit *v72;
  int v73;
  int v74;
  ZinIrGOCUnit *v75;
  int v76;
  int v77;
  ZinIrGOCUnit *v78;
  __int128 v79;
  int v80;
  int v81;
  ZinIrGOCUnit *v82;
  int v83;
  int v84;
  ZinIrGOCUnit *v85;
  int v86;
  int v87;
  int v88;
  ZinIrGOCUnit *v89;
  ZinIrGOCUnit *v90;
  ZinIrGOCUnit *v91;
  __int128 v92;
  int v93;
  int v94;
  ZinIrGOCUnit *v95;
  ZinIrGOCUnit *v96;
  ZinIrGOCUnit *v97;
  int v98;
  int v99;
  ZinIrGOCUnit *v100;
  ZinIrGOCUnit *v101;
  int v102;
  int v103;
  ZinIrGOCUnit *v104;
  int v105;
  int v106;
  ZinIrGOCUnit *v107;
  int v108;
  ZinIrGOCUnit *v109;
  int v110;
  int v111;
  ZinIrGOCUnit *v112;
  int v113;
  int v114;
  int v116;
  int v117;
  ZinIrGOCUnit *v118;
  int v119;
  ZinIrGOCUnit *v120;
  int v121;
  int v122;
  ZinIrGOCUnit *v123;
  int v124;
  int v125;
  ZinIrGOCUnit *v126;
  int v127;
  int v128;
  ZinIrGOCUnit *v129;
  int v130;
  int v131;
  ZinIrGOCUnit *v132;
  ZinIrGOCUnit *v133;
  ZinIrGOCUnit *v134;
  ZinIrGOCUnit *v135;
  ZinIrGOCUnit *v136;
  ZinIrGOCUnit *v137;
  ZinIrGOCUnit *v138;
  ZinIrGOCUnit *v139;
  ZinIrGOCUnit *v140;
  ZinIrGOCUnit *v141;
  ZinIrGOCUnit *v142;
  ZinIrGOCUnit *v143;
  ZinIrGOCUnit *v144;
  ZinIrGOCUnit *v145;
  ZinIrGOCUnit *v146;
  ZinIrGOCUnit *v147;
  ZinIrGOCUnit *v148;
  ZinIrGOCUnit *v149;
  ZinIrGOCUnit *v150;
  ZinIrGOCUnit *v151;
  ZinIrGOCUnit *v152;
  ZinIrGOCUnit *v153;
  ZinIrGOCUnit *v154;
  ZinIrGOCUnit *v155;
  ZinIrGOCUnit *v156;
  ZinIrGOCUnit *v157;
  ZinIrGOCUnit *v158;
  ZinIrGOCUnit *v159;
  ZinIrGOCUnit *v160;
  ZinIrGOCUnit *v161;
  ZinIrGOCUnit *v162;
  ZinIrGOCUnit *v163;
  ZinIrGOCUnit *v164;
  ZinIrGOCUnit *v165;
  void (**v166)(ZinIrNormUnitInfoBase *__hidden);
  ZinIrGOCUnit *v167;
  ZinIrGOCUnit *v168;
  ZinIrGOCUnit *v169;
  ZinIrGOCUnit *v170;
  ZinIrGOCUnit *v171;
  ZinIrGOCUnit *v172;
  ZinIrGOCUnit *v173;
  ZinIrGOCUnit *v174;
  ZinIrGOCUnit *v175;
  ZinIrGOCUnit *v176;
  ZinIrGOCUnit *v177;
  ZinIrGOCUnit *v178;
  ZinIrGOCUnit *v179;
  ZinIrGOCUnit *v180;
  ZinIrGOCUnit *v181;
  ZinIrGOCUnit *v182;
  ZinIrGOCUnit *v183;
  ZinIrGOCUnit *v184;
  ZinIrGOCUnit *v185;
  ZinIrGOCUnit *v186;
  ZinIrGOCUnit *v187;
  ZinIrGOCUnit *v188;
  ZinIrGOCUnit *v189;
  ZinIrGOCUnit *v190;
  ZinIrGOCUnit *v191;
  ZinIrGOCUnit *v192;
  ZinIrGOCUnit *v193;
  ZinIrGOCUnit *v194;
  ZinIrGOCUnit *v195;
  ZinIrGOCUnit *v196;
  ZinIrGOCUnit *v197;
  ZinIrGOCUnit *v198;
  ZinIrGOCUnit *v199;
  ZinIrGOCUnit *v200;
  ZinIrGOCUnit *v201;
  ZinIrGOCUnit *v202;
  ZinIrGOCUnit *v203;
  ZinIrGOCUnit *v204;
  void (**v205)(ZinIrDynamicSliceUnitInfo *__hidden);
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _BYTE v210[136];
  __int128 v211;
  uint64_t v212;
  int v213;
  int v214;
  char v215;
  int64x2_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  char v225;
  char v226;
  char v227;
  void (**v228)(ZinIrConvUnitInfo *__hidden);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int64x2_t v238;
  uint64_t v239;
  _DWORD v240[8];
  __int128 v241;
  uint64_t v242;
  int v243;
  char v244;
  __int16 v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  char v253;
  uint64_t v254;
  int64x2_t v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  char v263;
  char v264;
  char v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  int v274;
  __int16 v275;
  int64x2_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  _BYTE v280[36];
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  int v284;
  __int16 v285;
  char v286;
  char v287;
  ZinIrPEPoolUnit *v288;
  int v289;
  __CFDictionary *v290;

  v290 = a1;
  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("Type"));
  if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFStringGetTypeID()))
  {
    v289 = 0;
    CFStringToZinUnitType(v8, &v289);
    switch(v289)
    {
      case 0:
      case 10:
      case 56:
        v10 = *a3;
        *a3 = 0;
        if (v10)
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v10 + 8))(v10);
        return 3;
      case 1:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_OWORD *)v210 = 0xFFFFFFFFFFFFFFFFLL;
        *(_DWORD *)&v210[16] = -1;
        *(_QWORD *)&v210[24] = -1;
        *(_DWORD *)&v210[32] = -1;
        *(_QWORD *)&v210[40] = -1;
        memset(&v210[48], 0, 56);
        *(_DWORD *)&v210[104] = 1;
        v210[108] = 0;
        *(_WORD *)&v210[112] = 0;
        *(_DWORD *)&v210[120] = -1;
        *(_QWORD *)&v210[128] = -1;
        LODWORD(v211) = -1;
        *((_QWORD *)&v211 + 1) = -1;
        v212 = 0x3F80000000000006;
        v205 = off_24C01CAD8;
        v206 = 0uLL;
        v213 = 0;
        v214 = 0;
        v215 = 0;
        v216 = vdupq_n_s64(1uLL);
        v217 = 1;
        v218 = 1;
        *(_QWORD *)&v15 = 0x100000001;
        *((_QWORD *)&v15 + 1) = 0x100000001;
        v219 = v15;
        v220 = 0x100000001;
        v222 = 0;
        v223 = 0;
        v221 = 0;
        v224 = 1;
        v16 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v17 = ZinParseConvUnit(v290, (ZinIrConvUnitInfo *)&v205, a4) | v16;
        if (v17)
        {
          v18 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrConvUnit,ZinIrConvUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v18 = v288;
        }
        v288 = 0;
        v138 = *a3;
        *a3 = v18;
        if (v138)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v138 + 8))(v138);
          v139 = v288;
          v288 = 0;
          if (v139)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v139 + 8))(v139);
        }
        ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&v205);
        if (v17)
          return 3;
        goto LABEL_326;
      case 2:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01CC78;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 1;
        *(int64x2_t *)&v210[16] = vdupq_n_s64(1uLL);
        *(_QWORD *)&v210[32] = 1;
        *(_QWORD *)&v210[40] = 0x100000001;
        *(_DWORD *)&v210[48] = 1;
        memset(&v210[52], 0, 25);
        *(_QWORD *)&v210[80] = 0x3F80000000000001;
        *(_DWORD *)&v210[88] = 0;
        DWORD2(v207) = 2;
        v19 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParsePoolUnit(v290, (ZinIrPoolUnitInfo *)&v205, a4) | v19;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrPoolUnit,ZinIrPoolUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 3:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01EAB0;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 2;
        v210[12] = 0;
        DWORD2(v207) = 3;
        v21 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseConcatUnit(v290, (ZinIrConcatUnitInfo *)&v205, a4) | v21;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrConcatUnit,ZinIrConcatUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 4:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01A728;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        v22 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseEWUnit(v290, (ZinIrEWUnitInfo *)&v205, a4) | v22;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrEWUnit,ZinIrEWUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 5:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        *(_QWORD *)v210 = -1;
        v209 = 0u;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C020AA8;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)&v210[12] = _D0;
        *(_DWORD *)&v210[20] = 0;
        *(_WORD *)&v210[24] = 0;
        DWORD2(v207) = 5;
        v27 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseScaledEWUnit(v290, (uint64_t)&v205, a4) | v27;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrScaledEWUnit,ZinIrScaledEWUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 6:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        *(_QWORD *)v210 = -1;
        v209 = 0u;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01EFE0;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        *(_OWORD *)&v210[12] = xmmword_207A8A4B0;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)&v210[28] = _D0;
        *(_DWORD *)&v210[36] = 0;
        v29 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseNeuronUnit(v290, (uint64_t)&v205, a4) | v29;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrNeuronUnit,ZinIrNeuronUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 7:
        ZinIrCustomNeuronUnitInfo::ZinIrCustomNeuronUnitInfo((ZinIrCustomNeuronUnitInfo *)&v205);
        v30 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseCustomNeuronUnit(v290, (ZinIrCustomNeuronUnitInfo *)&v205, a4) | v30;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrCustomNeuronUnit,ZinIrCustomNeuronUnitInfo &>((const ZinIrCustomNeuronUnitInfo *)&v205, &v288);
        goto LABEL_314;
      case 8:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01BA60;
        v206 = 0uLL;
        *(_WORD *)&v210[8] = 0;
        *(_QWORD *)&v210[12] = 1065353216;
        *(_WORD *)&v210[20] = 0;
        *(_QWORD *)&v210[24] = 0;
        v210[32] = 0;
        *(_QWORD *)&v210[36] = -1;
        *(_QWORD *)&v210[48] = -1;
        v210[56] = 0;
        *(_QWORD *)&v210[60] = -1;
        *(_QWORD *)&v210[72] = -1;
        v31 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseGOCUnit(v290, (ZinIrGOCUnitInfo *)&v205, a4) | v31;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrGOCUnit,ZinIrGOCUnitInfo &,ZinIrVersion const&>((const ZinIrGOCUnitInfo *)&v205, a2, &v288);
        goto LABEL_314;
      case 9:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C0221D8;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 1065353216;
        *(_WORD *)&v210[12] = 0;
        memset(&v210[56], 0, 32);
        *(_QWORD *)&v210[88] = -1;
        *(_QWORD *)&v210[16] = off_24C021950;
        memset(&v210[24], 0, 28);
        memset(&v210[96], 0, 32);
        *(_DWORD *)&v210[128] = 1065353216;
        LOWORD(v211) = 0;
        BYTE2(v211) = 0;
        v32 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v33 = ZinParseDynamicGOCUnit(v290, (uint64_t)&v205, a4) | v32;
        if (v33)
        {
          v34 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrDynamicGOCUnit,ZinIrDynamicGOCUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v34 = v288;
        }
        v288 = 0;
        v140 = *a3;
        *a3 = v34;
        if (v140)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v140 + 8))(v140);
          v141 = v288;
          v288 = 0;
          if (v141)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v141 + 8))(v141);
        }
        ZinIrDynamicGOCUnitInfo::~ZinIrDynamicGOCUnitInfo((ZinIrDynamicGOCUnitInfo *)&v205);
        if (v33)
          return 3;
        goto LABEL_326;
      case 11:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01FA98;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        v35 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseFlattenUnit(v290, (ZinIrFlattenUnitInfo *)&v205, a4) | v35;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrFlattenUnit,ZinIrFlattenUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 12:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        v205 = off_24C021AB8;
        v206 = 0uLL;
        *(_QWORD *)&v210[16] = 0;
        *(_OWORD *)v210 = 0xFFFFFFFFFFFFFFFFLL;
        v36 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseUnflattenUnit(v290, (ZinIrUnflattenUnitInfo *)&v205, a4) | v36;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrUnflattenUnit,ZinIrUnflattenUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 13:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C024F18;
        v206 = 0uLL;
        *(_OWORD *)v210 = xmmword_207A8A4A0;
        memset(&v210[16], 0, 32);
        v37 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseCrossCorrelationUnit(v290, (uint64_t *)&v205, a4) | v37;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrCrossCorrelationUnit,ZinIrCrossCorrelationUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 14:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C024F38;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        *(_QWORD *)&v210[16] = 1;
        v38 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseKernelRasterizerUnit(v290, (uint64_t)&v205, a4) | v38;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrKernelRasterizerUnit,ZinIrKernelRasterizerUnitInfo &>((const ZinIrKernelRasterizerUnitInfo *)&v205, &v288);
        goto LABEL_314;
      case 15:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C021930;
        v206 = 0uLL;
        *(_QWORD *)&v39 = 0x100000001;
        *((_QWORD *)&v39 + 1) = 0x100000001;
        *(_OWORD *)&v210[8] = v39;
        memset(&v210[24], 0, 28);
        v40 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        if (ZinParseArgMinMaxUnit(v290, (ZinIrArgMinMaxUnitInfo *)&v205, a4) | v40)
          _ZF = 1;
        else
          _ZF = *(_DWORD *)&v210[48] == 0;
        v42 = !_ZF;
        if (_ZF)
        {
          v43 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrArgMinMaxUnit,ZinIrArgMinMaxUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v43 = v288;
        }
        v288 = 0;
        v134 = *a3;
        *a3 = v43;
        if (v134)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v134 + 8))(v134);
          v135 = v288;
          v288 = 0;
          if (v135)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v135 + 8))(v135);
        }
        goto LABEL_198;
      case 16:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C024718;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x400000006;
        v44 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseGlobalArgMinMaxUnit(&v290, (ZinIrGlobalArgMinMaxUnitInfo *)&v205, a4) | v44;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrGlobalArgMinMaxUnit,ZinIrGlobalArgMinMaxUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 17:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C021970;
        v206 = 0uLL;
        *(_OWORD *)&v210[8] = xmmword_207A8A490;
        v45 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseInputViewUnit(v290, (ZinIrInputViewUnitInfo *)&v205, a4) | v45;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrInputViewUnit,ZinIrInputViewUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 18:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C0221F8;
        v206 = 0uLL;
        v210[8] = 0;
        v46 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseMatrixMultUnit(v290, (ZinIrMatrixMultUnitInfo *)&v205, (ZinIrUnitStatus *)a4) | v46;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrMatrixMultUnit,ZinIrMatrixMultUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 19:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C021950;
        v206 = 0uLL;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        v47 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        if (ZinParseBroadcastUnit(v290, (ZinIrBroadcastUnitInfo *)&v205, a4) | v47)
          v48 = 1;
        else
          v48 = *(_QWORD *)&v210[32] == 0;
        v42 = !v48;
        if (v48)
        {
          v49 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrBroadcastUnit,ZinIrBroadcastUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v49 = v288;
        }
        v288 = 0;
        v136 = *a3;
        *a3 = v49;
        if (v136)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v136 + 8))(v136);
          v137 = v288;
          v288 = 0;
          if (v137)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v137 + 8))(v137);
        }
        v205 = off_24C021950;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v210[8]);
LABEL_198:
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v205);
        if ((v42 & 1) != 0)
          goto LABEL_326;
        return 3;
      case 20:
        ZinIrReductionUnitInfo::ZinIrReductionUnitInfo((ZinIrReductionUnitInfo *)&v205);
        v50 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseReductionUnit(v290, (ZinIrReductionUnitInfo *)&v205, a4) | v50;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrReductionUnit,ZinIrReductionUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 21:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        v205 = off_24C021A98;
        v206 = 0uLL;
        *(_OWORD *)v210 = 0xFFFFFFFFFFFFFFFFLL;
        *(_OWORD *)&v210[16] = 0uLL;
        v102 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v103 = ZinParseTransposeUnit(&v290, (ZinIrTransposeUnitInfo *)&v205, a4) | v102;
        if (v103)
        {
          v104 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrTransposeUnit,ZinIrTransposeUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v104 = v288;
        }
        v288 = 0;
        v160 = *a3;
        *a3 = v104;
        if (v160)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v160 + 8))(v160);
          v161 = v288;
          v288 = 0;
          if (v161)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v161 + 8))(v161);
        }
        ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&v205);
        if (v103)
          return 3;
        goto LABEL_326;
      case 22:
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v205);
        v105 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v106 = ZinParseReshapeUnit(&v290, (ZinIrReshapeUnitInfo *)&v205, a4) | v105;
        if (v106)
        {
          v107 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrReshapeUnit,ZinIrReshapeUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v107 = v288;
        }
        v288 = 0;
        v162 = *a3;
        *a3 = v107;
        if (v162)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v162 + 8))(v162);
          v163 = v288;
          v288 = 0;
          if (v163)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v163 + 8))(v163);
        }
        ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v205);
        if (v106)
          return 3;
        goto LABEL_326;
      case 23:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01E1D0;
        v206 = 0uLL;
        DWORD2(v207) = 23;
        v20 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrShapeUnit,ZinIrShapeUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 24:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01FAD8;
        v206 = 0uLL;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        v210[48] = 0;
        v52 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseSoftmaxUnit(v290, (ZinIrSoftmaxUnitInfo *)&v205, a4) | v52;
        if (v20)
          goto LABEL_160;
        std::make_unique[abi:ne180100]<ZinIrSoftmaxUnit,ZinIrSoftmaxUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_279;
      case 25:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        *(_DWORD *)&v210[48] = 730643660;
        v205 = off_24C023548;
        v206 = 0uLL;
        v53 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseNormUnit(v290, (ZinIrNormUnitInfoBase *)&v205, a4) | v53;
        if (v20)
          goto LABEL_162;
        std::make_unique[abi:ne180100]<ZinIrInstanceNormUnit,ZinIrInstanceNormUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_319;
      case 26:
        v209 = 0u;
        v208 = 0u;
        v207 = 0u;
        v206 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 32);
        *(_QWORD *)&v210[40] = 1065353216;
        *(_DWORD *)&v210[48] = 730643660;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01EDA8;
        v54 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseNormUnit(v290, (ZinIrNormUnitInfoBase *)&v205, a4) | v54;
        if (v20)
          goto LABEL_162;
        std::make_unique[abi:ne180100]<ZinIrL2NormUnit,ZinIrL2NormUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_319;
      case 27:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C022218;
        v206 = 0uLL;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        v108 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseMinMaxNormUnit(v290, (ZinIrMinMaxNormUnitInfo *)&v205, a4) | v108;
        if (v20)
        {
LABEL_160:
          v109 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrMinMaxNormUnit,ZinIrMinMaxNormUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
LABEL_279:
          v109 = v288;
        }
        v288 = 0;
        v164 = *a3;
        *a3 = v109;
        if (v164)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v164 + 8))(v164);
          v165 = v288;
          v288 = 0;
          if (v165)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v165 + 8))(v165);
        }
        v166 = (void (**)(ZinIrNormUnitInfoBase *__hidden))(v51 + 16);
        goto LABEL_324;
      case 28:
        v209 = 0u;
        v208 = 0u;
        v207 = 0u;
        v206 = 0u;
        *(_QWORD *)v210 = -1;
        *(_QWORD *)&v210[40] = 1065353216;
        *(_DWORD *)&v210[48] = 730643660;
        memset(&v210[8], 0, 32);
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C021990;
        *(_QWORD *)&v210[56] = 1;
        v110 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v111 = ZinParseUnitNumGroups(v290, (uint64_t *)&v210[56], a4);
        v20 = v111 | v110 | ZinParseNormUnit(v290, (ZinIrNormUnitInfoBase *)&v205, a4);
        if (v20)
        {
LABEL_162:
          v112 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrLayerNormUnit,ZinIrLayerNormUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
LABEL_319:
          v112 = v288;
        }
        v288 = 0;
        v179 = *a3;
        *a3 = v112;
        if (v179)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v179 + 8))(v179);
          v180 = v288;
          v288 = 0;
          if (v180)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v180 + 8))(v180);
        }
        v166 = off_24C020880;
LABEL_324:
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))v166;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v210[8]);
        goto LABEL_325;
      case 29:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01BA80;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        *(int64x2_t *)&v210[16] = vdupq_n_s64(1uLL);
        *(_OWORD *)&v210[32] = 1uLL;
        *(_OWORD *)&v210[48] = 0uLL;
        *(_QWORD *)&v210[64] = 0x3F0000003F800000;
        *(_DWORD *)&v210[72] = 1065353216;
        v55 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseLRNUnit(v290, (uint64_t)&v205, a4) | v55;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrLRNUnit,ZinIrLRNUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 30:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C022190;
        v206 = 0uLL;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)&v210[16] = _D0;
        v57 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseCostVolumeUnit(v290, (float *)&v205, a4) | v57;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrCostVolumeUnit,ZinIrCostVolumeUnitInfo &>((const ZinIrCostVolumeUnitInfo *)&v205, &v288);
        goto LABEL_314;
      case 31:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C023650;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x100000001;
        *(_DWORD *)&v210[16] = 1;
        DWORD2(v207) = 31;
        v58 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParsePixelShuffleUnit(&v290, (ZinIrPixelShuffleUnitInfo *)&v205, a4) | v58;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrPixelShuffleUnit,ZinIrPixelShuffleUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 32:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C024450;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x100000001;
        *(_DWORD *)&v210[16] = 1;
        v59 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParsePixelUnshuffleUnit(&v290, (ZinIrPixelUnshuffleUnitInfo *)&v205, a4) | v59;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrPixelUnshuffleUnit,ZinIrPixelUnshuffleUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 33:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_OWORD *)v210 = 0xFFFFFFFFFFFFFFFFLL;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C025D18;
        v206 = 0uLL;
        v60 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseFurthestPointSamplingUnit(&v290, (uint64_t)&v205, a4) | v60;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrFurthestPointSamplingUnit,ZinIrFurthestPointSamplingUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 34:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C023830;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x100000001;
        *(_DWORD *)&v210[16] = 1;
        v61 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseSpaceToBatchUnit(v290, (ZinIrSpaceToBatchUnitInfo *)&v205, a4) | v61;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrSpaceToBatchUnit,ZinIrSpaceToBatchUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 35:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C0233F0;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x100000001;
        *(_DWORD *)&v210[16] = 1;
        v62 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseBatchToSpaceUnit(v290, (ZinIrBatchToSpaceUnitInfo *)&v205, a4) | v62;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrBatchToSpaceUnit,ZinIrBatchToSpaceUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 36:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C024470;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x100000001;
        *(_DWORD *)&v210[16] = 1;
        v63 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseSpaceToChannelUnit(v290, (ZinIrSpaceToChannelUnitInfo *)&v205, a4) | v63;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrSpaceToChannelUnit,ZinIrSpaceToChannelUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 37:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C024430;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x100000001;
        *(_DWORD *)&v210[16] = 1;
        v113 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseChannelToSpaceUnit(v290, (ZinIrChannelToSpaceUnitInfo *)&v205, a4) | v113;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrChannelToSpaceUnit,ZinIrChannelToSpaceUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 38:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C023670;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        v114 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseRadiusSearchUnit(&v290, (uint64_t)&v205, a4) | v114;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrRadiusSearchUnit,ZinIrRadiusSearchUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 39:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = &off_24C01ED60;
        v206 = 0uLL;
        memset(&v210[88], 0, 24);
        v64 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v65 = ZinParseGatherUnit(v290, (ZinIrGatherUnitInfo *)&v205, a4) | v64;
        if (v65)
        {
          v66 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrGatherUnit,ZinIrGatherUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v66 = v288;
        }
        v288 = 0;
        v142 = *a3;
        *a3 = v66;
        if (v142)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v142 + 8))(v142);
          v143 = v288;
          v288 = 0;
          if (v143)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v143 + 8))(v143);
        }
        ZinIrGatherUnitInfo::~ZinIrGatherUnitInfo((ZinIrGatherUnitInfo *)&v205);
        if (v65)
          return 3;
        goto LABEL_326;
      case 40:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C0246F0;
        v206 = 0uLL;
        memset(&v210[88], 0, 48);
        v211 = 0u;
        v67 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v68 = ZinParseAffineTransformUnit(v290, (char **)&v205, a4) | v67;
        if (v68)
        {
          v69 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrAffineTransformUnit,ZinIrAffineTransformUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v69 = v288;
        }
        v288 = 0;
        v144 = *a3;
        *a3 = v69;
        if (v144)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v144 + 8))(v144);
          v145 = v288;
          v288 = 0;
          if (v145)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v145 + 8))(v145);
        }
        ZinIrAffineTransformUnitInfo::~ZinIrAffineTransformUnitInfo((ZinIrAffineTransformUnitInfo *)&v205);
        if (v68)
          return 3;
        goto LABEL_326;
      case 41:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = &off_24C01F040;
        v206 = 0uLL;
        *(_QWORD *)&v210[84] = 0x100000001;
        __asm { FMOV            V0.2S, #-1.0 }
        *(_QWORD *)&v210[92] = _D0;
        memset(&v210[104], 0, 25);
        DWORD2(v207) = 41;
        v116 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v117 = ZinParseResizeUnit(v290, (ZinIrResizeUnitInfo *)&v205, a4) | v116;
        if (v117)
        {
          v118 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrResizeUnit,ZinIrResizeUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v118 = v288;
        }
        v288 = 0;
        v167 = *a3;
        *a3 = v118;
        if (v167)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v167 + 8))(v167);
          v168 = v288;
          v288 = 0;
          if (v168)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v168 + 8))(v168);
        }
        ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)&v205);
        if (v117)
          return 3;
        goto LABEL_326;
      case 42:
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C020A80;
        v206 = 0uLL;
        memset(&v210[88], 0, 24);
        DWORD2(v207) = 42;
        v70 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v71 = ZinParseResizeAsUnit(v290, (char **)&v205, a4) | v70;
        if (v71)
        {
          v72 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrResizeAsUnit,ZinIrResizeAsUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v72 = v288;
        }
        v288 = 0;
        v146 = *a3;
        *a3 = v72;
        if (v146)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v146 + 8))(v146);
          v147 = v288;
          v288 = 0;
          if (v147)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v147 + 8))(v147);
        }
        ZinIrResizeAsUnitInfo::~ZinIrResizeAsUnitInfo((ZinIrResizeAsUnitInfo *)&v205);
        if (v71)
          return 3;
        goto LABEL_326;
      case 43:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C020A58;
        v206 = 0uLL;
        memset(&v210[88], 0, 28);
        v73 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v74 = ZinParseResampleUnit(v290, (void ***)&v205, a4) | v73;
        if (v74)
        {
          v75 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrResampleUnit,ZinIrResampleUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v75 = v288;
        }
        v288 = 0;
        v148 = *a3;
        *a3 = v75;
        if (v148)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v148 + 8))(v148);
          v149 = v288;
          v288 = 0;
          if (v149)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v149 + 8))(v149);
        }
        ZinIrResampleUnitInfo::~ZinIrResampleUnitInfo((ZinIrResampleUnitInfo *)&v205);
        if (v74)
          return 3;
        goto LABEL_326;
      case 44:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = &off_24C01BAC0;
        v206 = 0uLL;
        memset(&v210[84], 0, 40);
        *(_QWORD *)&v210[128] = 0;
        v211 = 0uLL;
        LOWORD(v212) = 0;
        v76 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v77 = ZinParsePadUnit(v290, (ZinIrPadUnitInfo *)&v205, a4) | v76;
        if (v77)
        {
          v78 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrPadUnit,ZinIrPadUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v78 = v288;
        }
        v288 = 0;
        v150 = *a3;
        *a3 = v78;
        if (v150)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v150 + 8))(v150);
          v151 = v288;
          v288 = 0;
          if (v151)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v151 + 8))(v151);
        }
        ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v205);
        if (v77)
          return 3;
        goto LABEL_326;
      case 45:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01CF68;
        v206 = 0uLL;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        v119 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseTileUnit(v290, (ZinIrTileUnitInfo *)&v205, a4) | v119;
        if (v20)
        {
          v120 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrTileUnit,ZinIrTileUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v120 = v288;
        }
        v288 = 0;
        v169 = *a3;
        *a3 = v120;
        if (v169)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v169 + 8))(v169);
          v170 = v288;
          v288 = 0;
          if (v170)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v170 + 8))(v170);
        }
        v205 = off_24C01CF68;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v210[8]);
        goto LABEL_325;
      case 46:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = &off_24C0221B0;
        v206 = 0uLL;
        *(_DWORD *)&v210[84] = 5;
        memset(&v210[88], 0, 24);
        *(_QWORD *)&v79 = 0x100000001;
        *((_QWORD *)&v79 + 1) = 0x100000001;
        *(_OWORD *)&v210[112] = v79;
        v80 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v81 = ZinParseCropResizeUnit(v290, (ZinIrCropResizeUnitInfo *)&v205, a4) | v80;
        if (v81)
        {
          v82 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrCropResizeUnit,ZinIrCropResizeUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v82 = v288;
        }
        v288 = 0;
        v152 = *a3;
        *a3 = v82;
        if (v152)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v152 + 8))(v152);
          v153 = v288;
          v288 = 0;
          if (v153)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v153 + 8))(v153);
        }
        ZinIrCropResizeUnitInfo::~ZinIrCropResizeUnitInfo((ZinIrCropResizeUnitInfo *)&v205);
        if (v81)
          return 3;
        goto LABEL_326;
      case 47:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 74);
        v205 = &off_24C023500;
        v206 = 0uLL;
        memset(&v210[88], 0, 48);
        v83 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v84 = ZinParseDynamicSliceUnit(v290, (ZinIrDynamicSliceUnitInfo *)&v205, a4) | v83;
        if (v84)
        {
          v85 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrDynamicSliceUnit,ZinIrDynamicSliceUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v85 = v288;
        }
        v288 = 0;
        v154 = *a3;
        *a3 = v85;
        if (v154)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v154 + 8))(v154);
          v155 = v288;
          v288 = 0;
          if (v155)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v155 + 8))(v155);
        }
        ZinIrDynamicSliceUnitInfo::~ZinIrDynamicSliceUnitInfo((ZinIrDynamicSliceUnitInfo *)&v205);
        if (v84)
          return 3;
        goto LABEL_326;
      case 48:
      case 49:
        v13 = *a3;
        *a3 = 0;
        if (v13)
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v13 + 8))(v13);
        goto LABEL_326;
      case 50:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01CF08;
        v206 = 0uLL;
        *(_QWORD *)&v210[8] = 0x200000000;
        *(_DWORD *)&v210[16] = 4;
        memset(&v210[32], 0, 17);
        *(_QWORD *)&v210[24] = &v210[32];
        v121 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v122 = ZinParseSortUnit(&v290, (ZinIrSortUnitInfo *)&v205, a4) | v121;
        if (v122)
        {
          v123 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrSortUnit,ZinIrSortUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v123 = v288;
        }
        v288 = 0;
        v171 = *a3;
        *a3 = v123;
        if (v171)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v171 + 8))(v171);
          v172 = v288;
          v288 = 0;
          if (v172)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v172 + 8))(v172);
        }
        ZinIrSortUnitInfo::~ZinIrSortUnitInfo((ZinIrSortUnitInfo *)&v205);
        if (v122)
          return 3;
        goto LABEL_326;
      case 51:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01CF88;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        *(_QWORD *)&v210[16] = 1;
        *(_QWORD *)&v210[24] = 0x400000002;
        *(_QWORD *)&v210[48] = 0;
        *(_OWORD *)&v210[32] = (unint64_t)&v210[40];
        v210[56] = 0;
        v124 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v125 = ZinParseTopKUnit(&v290, (ZinIrTopKUnitInfo *)&v205, a4) | v124;
        if (v125)
        {
          v126 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrTopKUnit,ZinIrTopKUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v126 = v288;
        }
        v288 = 0;
        v173 = *a3;
        *a3 = v126;
        if (v173)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v173 + 8))(v173);
          v174 = v288;
          v288 = 0;
          if (v174)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v174 + 8))(v174);
        }
        ZinIrTopKUnitInfo::~ZinIrTopKUnitInfo((ZinIrTopKUnitInfo *)&v205);
        if (v125)
          return 3;
        goto LABEL_326;
      case 52:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01BAA0;
        v206 = 0uLL;
        *(_DWORD *)&v210[24] = 0;
        *(_OWORD *)v210 = 0xFFFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v210[14] = 0;
        v86 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseNMSUnit(&v290, (uint64_t)&v205, a4) | v86;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrNMSUnit,ZinIrNMSUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 53:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C025B50;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        memset(&v210[16], 0, 72);
        *(_DWORD *)&v210[88] = 897988541;
        v127 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v128 = ZinParseMatrixDecompositionUnit(v290, (ZinIrMatrixDecompositionUnitInfo *)&v205, a4) | v127;
        if (v128)
        {
          v129 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrMatrixDecompositionUnit,ZinIrMatrixDecompositionUnitInfo &>((const ZinIrMatrixDecompositionUnitInfo *)&v205, &v288);
          v129 = v288;
        }
        v288 = 0;
        v175 = *a3;
        *a3 = v129;
        if (v175)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v175 + 8))(v175);
          v176 = v288;
          v288 = 0;
          if (v176)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v176 + 8))(v176);
        }
        ZinIrMatrixDecompositionUnitInfo::~ZinIrMatrixDecompositionUnitInfo((ZinIrMatrixDecompositionUnitInfo *)&v205);
        if (v128)
          return 3;
        goto LABEL_326;
      case 54:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01FA58;
        v206 = 0uLL;
        *(_DWORD *)&v210[8] = 0;
        *(_QWORD *)&v210[16] = 0;
        v210[24] = 1;
        v130 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseDropoutUnit(&v290, (uint64_t)&v205, a4) | v130;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrDropoutUnit,ZinIrDropoutUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 55:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01F020;
        v206 = 0uLL;
        memset(&v210[8], 0, 44);
        *(_DWORD *)&v210[52] = 1065353216;
        *(_QWORD *)&v210[56] = 0;
        v87 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseRandomUnit(&v290, (uint64_t)&v205, a4) | v87;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrRandomUnit,ZinIrRandomUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 57:
        v205 = off_24C017CA0;
        v206 = 0uLL;
        *(_QWORD *)&v207 = 0;
        DWORD2(v207) = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v20 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrCrossProductUnit,ZinIrUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 58:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01E0C0;
        v206 = 0uLL;
        v210[8] = 0;
        *(_QWORD *)&v210[12] = -1;
        *(_QWORD *)&v210[24] = -1;
        v210[32] = 0;
        *(_QWORD *)&v210[36] = -1;
        *(_QWORD *)&v210[48] = -1;
        *(_QWORD *)&v210[60] = 0x600000000;
        *(_DWORD *)&v210[56] = 1065353216;
        *(_DWORD *)&v210[68] = 0;
        v88 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseQuantUnit(v290, (ZinIrQuantUnitInfo *)&v205, a4) | v88;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrQuantUnit,ZinIrQuantUnitInfo &>((const ZinIrQuantUnitInfo *)&v205, &v288);
        goto LABEL_314;
      case 59:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v205 = off_24C01FA38;
        v206 = 0uLL;
        v210[8] = 0;
        *(_QWORD *)&v210[12] = -1;
        *(_QWORD *)&v210[24] = -1;
        v210[32] = 0;
        *(_QWORD *)&v210[36] = -1;
        *(_QWORD *)&v210[48] = -1;
        *(_QWORD *)&v210[60] = 0x600000000;
        *(_DWORD *)&v210[56] = 1065353216;
        *(_DWORD *)&v210[68] = 0;
        v131 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v20 = ZinParseDeQuantUnit(v290, (ZinIrDeQuantUnitInfo *)&v205, a4) | v131;
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrDeQuantUnit,ZinIrDeQuantUnitInfo &>((const ZinIrDeQuantUnitInfo *)&v205, &v288);
        goto LABEL_314;
      case 60:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_OWORD *)v210 = 0xFFFFFFFFFFFFFFFFLL;
        *(_DWORD *)&v210[16] = -1;
        *(_QWORD *)&v210[24] = -1;
        *(_DWORD *)&v210[32] = -1;
        *(_QWORD *)&v210[40] = -1;
        memset(&v210[48], 0, 56);
        *(_DWORD *)&v210[104] = 1;
        v210[108] = 0;
        *(_WORD *)&v210[112] = 0;
        *(_DWORD *)&v210[120] = -1;
        *(_QWORD *)&v210[128] = -1;
        LODWORD(v211) = -1;
        *((_QWORD *)&v211 + 1) = -1;
        v212 = 0x3F80000000000006;
        v205 = off_24C01EDE0;
        v206 = 0uLL;
        v213 = 0;
        v214 = 5;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParseLinearUnit(v290, (ZinIrLinearUnitInfo *)&v205, a4))
        {
          v89 = *a3;
          *a3 = 0;
          if (v89)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v89 + 8))(v89);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrLinearUnit,ZinIrLinearUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v184 = v288;
          v288 = 0;
          v185 = *a3;
          *a3 = v184;
          if (v185)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v185 + 8))(v185);
            v186 = v288;
            v288 = 0;
            if (v186)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v186 + 8))(v186);
          }
          v11 = 0;
        }
        ZinIrLinearUnitInfo::~ZinIrLinearUnitInfo((ZinIrLinearUnitInfo *)&v205);
        return v11;
      case 61:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        *(_QWORD *)v210 = -1;
        v209 = 0u;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C022308;
        v206 = 0uLL;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        memset(&v210[48], 0, 32);
        *(_DWORD *)&v210[80] = 1065353216;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParseRingBufferWriterUnit(v290, (ZinIrRingBufferUnitInfo *)&v205, a4))
        {
          v90 = *a3;
          *a3 = 0;
          if (v90)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v90 + 8))(v90);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrRingBufferWriterUnit,ZinIrRingBufferUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v187 = v288;
          v288 = 0;
          v188 = *a3;
          *a3 = v187;
          if (v188)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v188 + 8))(v188);
            v189 = v288;
            v288 = 0;
            if (v189)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v189 + 8))(v189);
          }
          v11 = 0;
        }
        ZinIrRingBufferUnitInfo::~ZinIrRingBufferUnitInfo((void **)&v205);
        return v11;
      case 62:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        memset(&v210[8], 0, 32);
        *(_DWORD *)&v210[40] = 1065353216;
        memset(&v210[48], 0, 32);
        *(_DWORD *)&v210[80] = 1065353216;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C024F58;
        v206 = 0uLL;
        memset(&v210[88], 0, 32);
        *(_DWORD *)&v210[120] = 1065353216;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParseRingBufferReaderUnit(v290, (ZinIrRingBufferReaderUnitInfo *)&v205, a4))
        {
          v91 = *a3;
          *a3 = 0;
          if (v91)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v91 + 8))(v91);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrRingBufferReaderUnit,ZinIrRingBufferReaderUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v190 = v288;
          v288 = 0;
          v191 = *a3;
          *a3 = v190;
          if (v191)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v191 + 8))(v191);
            v192 = v288;
            v288 = 0;
            if (v192)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v192 + 8))(v192);
          }
          v11 = 0;
        }
        ZinIrRingBufferReaderUnitInfo::~ZinIrRingBufferReaderUnitInfo((void **)&v205);
        return v11;
      case 63:
        v205 = off_24C017CA0;
        v206 = 0uLL;
        *(_QWORD *)&v207 = 0;
        DWORD2(v207) = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v20 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        if (v20)
          goto LABEL_182;
        std::make_unique[abi:ne180100]<ZinIrPhiUnit,ZinIrUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
        goto LABEL_314;
      case 64:
        v205 = off_24C017CA0;
        v206 = 0uLL;
        *(_QWORD *)&v207 = 0;
        DWORD2(v207) = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v20 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        if (v20)
        {
LABEL_182:
          v132 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrConditionUnit,ZinIrUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
LABEL_314:
          v132 = v288;
        }
        v288 = 0;
        v177 = *a3;
        *a3 = v132;
        if (v177)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v177 + 8))(v177);
          v178 = v288;
          v288 = 0;
          if (v178)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v178 + 8))(v178);
        }
LABEL_325:
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v205);
        if (v20)
          return 3;
LABEL_326:
        v11 = 0;
        break;
      case 65:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        LOBYTE(v213) = 0;
        LOBYTE(v214) = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01EFA0;
        v206 = 0uLL;
        v230 = 0;
        v231 = 0;
        v232 = 0;
        v234 = 0u;
        v233 = 0u;
        v235 = -1;
        v236 = 0;
        LODWORD(v237) = -1;
        v238.i64[0] = -1;
        v238.i32[2] = -1;
        memset(v240, 0, sizeof(v240));
        v241 = 0u;
        v239 = -1;
        v242 = 0;
        v243 = 1;
        v244 = 0;
        v245 = 0;
        v246 = -1;
        v247 = -1;
        v248 = -1;
        v249 = -1;
        v250 = 0x3F80000000000006;
        v251 = 0;
        v228 = off_24C01CAD8;
        v229 = 0;
        v252 = 0;
        v253 = 0;
        v254 = 1;
        v255 = vdupq_n_s64(1uLL);
        v256 = 1;
        *(_QWORD *)&v92 = 0x100000001;
        *((_QWORD *)&v92 + 1) = 0x100000001;
        v257 = v92;
        v258 = 0x100000001;
        v261 = 0;
        v259 = 0;
        v260 = 0;
        v262 = 1;
        v93 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v94 = ZinParseNEConvUnit(v290, (ZinIrNEConvUnitInfo *)&v205, a4) | v93;
        if (v94)
        {
          v95 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrNEConvUnit,ZinIrNEConvUnitInfo &>((const ZinIrNEConvUnitInfo *)&v205, &v288);
          v95 = v288;
        }
        v288 = 0;
        v156 = *a3;
        *a3 = v95;
        if (v156)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v156 + 8))(v156);
          v157 = v288;
          v288 = 0;
          if (v157)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v157 + 8))(v157);
        }
        ZinIrNEConvUnitInfo::~ZinIrNEConvUnitInfo((ZinIrNEConvUnitInfo *)&v205);
        if (v94)
          return 3;
        goto LABEL_326;
      case 66:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        LOBYTE(v213) = 0;
        LOBYTE(v214) = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C020860;
        v206 = 0uLL;
        v230 = 0;
        v231 = 0;
        v232 = 0;
        v234 = 0u;
        v233 = 0u;
        v235 = -1;
        v228 = off_24C0221F8;
        v229 = 0;
        LOBYTE(v236) = 0;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParseNEMatMulUnit(v290, (ZinIrNEMatMulUnitInfo *)&v205, a4))
        {
          v96 = *a3;
          *a3 = 0;
          if (v96)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v96 + 8))(v96);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrNEMatMulUnit,ZinIrNEMatMulUnitInfo &>((const ZinIrNEMatMulUnitInfo *)&v205, &v288);
          v193 = v288;
          v288 = 0;
          v194 = *a3;
          *a3 = v193;
          if (v194)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v194 + 8))(v194);
            v195 = v288;
            v288 = 0;
            if (v195)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v195 + 8))(v195);
          }
          v11 = 0;
        }
        ZinIrNEMatMulUnitInfo::~ZinIrNEMatMulUnitInfo((void **)&v205);
        return v11;
      case 67:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        LOBYTE(v213) = 0;
        LOBYTE(v214) = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01EFC0;
        v206 = 0uLL;
        v230 = 0;
        v231 = 0;
        v234 = 0u;
        v233 = 0u;
        v235 = -1;
        v228 = (void (**)(ZinIrConvUnitInfo *__hidden))&unk_24C01CC78;
        v229 = 0;
        LODWORD(v236) = 1;
        v237 = 1;
        v238 = vdupq_n_s64(1uLL);
        v239 = 0x100000001;
        v240[0] = 1;
        memset(&v240[1], 0, 25);
        *(_QWORD *)&v241 = 0x3F80000000000001;
        DWORD2(v241) = 0;
        v232 = 2;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParseNEPoolUnit(v290, (ZinIrNEPoolUnitInfo *)&v205, a4))
        {
          v97 = *a3;
          *a3 = 0;
          if (v97)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v97 + 8))(v97);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrNEPoolUnit,ZinIrNEPoolUnitInfo &>((const ZinIrNEPoolUnitInfo *)&v205, &v288);
          v196 = v288;
          v288 = 0;
          v197 = *a3;
          *a3 = v196;
          if (v197)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v197 + 8))(v197);
            v198 = v288;
            v288 = 0;
            if (v198)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v198 + 8))(v198);
          }
          v11 = 0;
        }
        ZinIrNEPoolUnitInfo::~ZinIrNEPoolUnitInfo((void **)&v205);
        return v11;
      case 68:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        LOBYTE(v213) = 0;
        LOBYTE(v214) = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C020840;
        v206 = 0uLL;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParseNEBypassUnit(v290, &v205, a4))
        {
          v133 = *a3;
          *a3 = 0;
          if (v133)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v133 + 8))(v133);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrNEBypassUnit,ZinIrNEBypassUnitInfo &>((uint64_t)&v205, (uint64_t *)&v288);
          v202 = v288;
          v288 = 0;
          v203 = *a3;
          *a3 = v202;
          if (v203)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v203 + 8))(v203);
            v204 = v288;
            v288 = 0;
            if (v204)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v204 + 8))(v204);
          }
          v11 = 0;
        }
        ZinIrNEUnitInfo::~ZinIrNEUnitInfo((void **)&v205);
        return v11;
      case 69:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        v210[120] = 0;
        v210[128] = 0;
        LOBYTE(v222) = 0;
        LOBYTE(v223) = 0;
        LOBYTE(v233) = 0;
        BYTE8(v233) = 0;
        BYTE8(v241) = 0;
        LOBYTE(v242) = 0;
        LOBYTE(v261) = 0;
        LOBYTE(v262) = 0;
        v263 = 0;
        v264 = 0;
        v265 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01F000;
        v206 = 0uLL;
        v269 = 0;
        v267 = 0;
        v268 = 0;
        v271 = 0u;
        v272 = 0u;
        v273 = -1;
        v266 = &unk_24C01CC78;
        v274 = 1;
        v276 = vdupq_n_s64(1uLL);
        v277 = 1;
        v278 = 0x100000001;
        v279 = 1;
        memset(v280, 0, 25);
        *(_QWORD *)&v280[28] = 0x3F80000000000001;
        LODWORD(v281) = 0;
        v270 = 2;
        v98 = ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4);
        v99 = ZinParsePEPoolUnit(v290, (ZinIrPEPoolUnitInfo *)&v205, a4) | v98;
        if (v99)
        {
          v100 = 0;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrPEPoolUnit,ZinIrPEPoolUnitInfo &>((const ZinIrPEPoolUnitInfo *)&v205, &v288);
          v100 = v288;
        }
        v288 = 0;
        v158 = *a3;
        *a3 = v100;
        if (v158)
        {
          (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v158 + 8))(v158);
          v159 = v288;
          v288 = 0;
          if (v159)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v159 + 8))(v159);
        }
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01F000;
        ZinIrUnitInfo::~ZinIrUnitInfo(&v266);
        ZinIrPEUnitInfo::~ZinIrPEUnitInfo((void **)&v205);
        if (v99)
          return 3;
        goto LABEL_326;
      case 70:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        v210[120] = 0;
        v210[128] = 0;
        LOBYTE(v222) = 0;
        LOBYTE(v223) = 0;
        LOBYTE(v233) = 0;
        BYTE8(v233) = 0;
        BYTE8(v241) = 0;
        LOBYTE(v242) = 0;
        LOBYTE(v261) = 0;
        LOBYTE(v262) = 0;
        v263 = 0;
        v264 = 0;
        v265 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C023BB8;
        v206 = 0uLL;
        LOBYTE(v266) = 0;
        LOBYTE(v277) = 0;
        LOBYTE(v278) = 0;
        v287 = 0;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParsePEElementWiseUnit(v290, (ZinIrPEElementWiseUnitInfo *)&v205, a4))
        {
          v14 = *a3;
          *a3 = 0;
          if (v14)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v14 + 8))(v14);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrPEElementWiseUnit,ZinIrPEElementWiseUnitInfo &>((const ZinIrPEElementWiseUnitInfo *)&v205, &v288);
          v181 = v288;
          v288 = 0;
          v182 = *a3;
          *a3 = v181;
          if (v182)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v182 + 8))(v182);
            v183 = v288;
            v288 = 0;
            if (v183)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v183 + 8))(v183);
          }
          v11 = 0;
        }
        ZinIrPEElementWiseUnitInfo::~ZinIrPEElementWiseUnitInfo((void **)&v205);
        return v11;
      case 71:
        DWORD2(v207) = 0;
        *(_QWORD *)&v207 = 0;
        v208 = 0u;
        v209 = 0u;
        *(_QWORD *)v210 = -1;
        v210[8] = 0;
        v210[120] = 0;
        v210[128] = 0;
        LOBYTE(v222) = 0;
        LOBYTE(v223) = 0;
        LOBYTE(v233) = 0;
        BYTE8(v233) = 0;
        BYTE8(v241) = 0;
        LOBYTE(v242) = 0;
        LOBYTE(v261) = 0;
        LOBYTE(v262) = 0;
        v263 = 0;
        v264 = 0;
        v265 = 0;
        v205 = (void (**)(ZinIrDynamicSliceUnitInfo *__hidden))&unk_24C01E0A0;
        v206 = 0uLL;
        v269 = 0;
        v270 = 0;
        v267 = 0;
        v268 = 0;
        v271 = 0u;
        v272 = 0u;
        v273 = -1;
        v266 = &unk_24C0221D8;
        v274 = 1065353216;
        v275 = 0;
        v278 = 0;
        v279 = 0;
        v276.i64[1] = 0;
        v277 = 0;
        memset(&v280[4], 0, 32);
        v281 = -1;
        v276.i64[0] = (uint64_t)off_24C021950;
        v283 = 0u;
        v282 = 0u;
        v284 = 1065353216;
        v285 = 0;
        v286 = 0;
        if (ZinParseUnit(v290, (ZinIrUnitInfo *)&v205, a4)
          || ZinParsePEGOCUnit(v290, (ZinIrPEGOCUnitInfo *)&v205, a4))
        {
          v101 = *a3;
          *a3 = 0;
          if (v101)
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v101 + 8))(v101);
          v11 = 3;
        }
        else
        {
          std::make_unique[abi:ne180100]<ZinIrPEGOCUnit,ZinIrPEGOCUnitInfo &>((const ZinIrPEGOCUnitInfo *)&v205, &v288);
          v199 = v288;
          v288 = 0;
          v200 = *a3;
          *a3 = v199;
          if (v200)
          {
            (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v200 + 8))(v200);
            v201 = v288;
            v288 = 0;
            if (v201)
              (*(void (**)(ZinIrGOCUnit *))(*(_QWORD *)v201 + 8))(v201);
          }
          v11 = 0;
        }
        ZinIrPEGOCUnitInfo::~ZinIrPEGOCUnitInfo((ZinIrPEGOCUnitInfo *)&v205);
        return v11;
      default:
        return 3;
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidUnitTypeSyntax"));
    return 3;
  }
  return v11;
}

void sub_206F0C868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  ZinIrNEUnitInfo::~ZinIrNEUnitInfo((void **)&a9);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrConvUnit,ZinIrConvUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrConvUnit::ZinIrConvUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0CC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C408C2DD427);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPoolUnit,ZinIrPoolUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  float v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrPoolUnit::ZinIrPoolUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0CD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C402A538098);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrConcatUnit,ZinIrConcatUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrConcatUnit::ZinIrConcatUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0CDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40EABE0AFALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrEWUnit,ZinIrEWUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrEWUnit::ZinIrEWUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0CE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40916FB9FCLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrScaledEWUnit,ZinIrScaledEWUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrScaledEWUnit::ZinIrScaledEWUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0CF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40268D61AFLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrNeuronUnit,ZinIrNeuronUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  float v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrNeuronUnit::ZinIrNeuronUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0CFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C403096705CLL);
  _Unwind_Resume(a1);
}

ZinIrCustomNeuronUnit *std::make_unique[abi:ne180100]<ZinIrCustomNeuronUnit,ZinIrCustomNeuronUnitInfo &>@<X0>(const ZinIrCustomNeuronUnitInfo *a1@<X0>, ZinIrCustomNeuronUnit **a2@<X8>)
{
  ZinIrCustomNeuronUnit *v4;
  ZinIrCustomNeuronUnit *result;

  v4 = (ZinIrCustomNeuronUnit *)operator new();
  result = ZinIrCustomNeuronUnit::ZinIrCustomNeuronUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0D058(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40969395FFLL);
  _Unwind_Resume(a1);
}

ZinIrGOCUnit *std::make_unique[abi:ne180100]<ZinIrGOCUnit,ZinIrGOCUnitInfo &,ZinIrVersion const&>@<X0>(const ZinIrGOCUnitInfo *a1@<X0>, const ZinIrVersion *a2@<X1>, ZinIrGOCUnit **a3@<X8>)
{
  ZinIrGOCUnit *v6;
  ZinIrGOCUnit *result;

  v6 = (ZinIrGOCUnit *)operator new();
  result = ZinIrGOCUnit::ZinIrGOCUnit(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_206F0D0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40D25B138BLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrDynamicGOCUnit,ZinIrDynamicGOCUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrDynamicGOCUnit::ZinIrDynamicGOCUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40700454B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrFlattenUnit,ZinIrFlattenUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrFlattenUnit::ZinIrFlattenUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40916FB9FCLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrUnflattenUnit,ZinIrUnflattenUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrUnflattenUnit::ZinIrUnflattenUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40D483CAEALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCrossCorrelationUnit,ZinIrCrossCorrelationUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrCrossCorrelationUnit::ZinIrCrossCorrelationUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0D364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40AA29E5E7);
  _Unwind_Resume(a1);
}

ZinIrKernelRasterizerUnit *std::make_unique[abi:ne180100]<ZinIrKernelRasterizerUnit,ZinIrKernelRasterizerUnitInfo &>@<X0>(const ZinIrKernelRasterizerUnitInfo *a1@<X0>, ZinIrKernelRasterizerUnit **a2@<X8>)
{
  ZinIrKernelRasterizerUnit *v4;
  ZinIrKernelRasterizerUnit *result;

  v4 = (ZinIrKernelRasterizerUnit *)operator new();
  result = ZinIrKernelRasterizerUnit::ZinIrKernelRasterizerUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0D3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C407B636525);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrArgMinMaxUnit,ZinIrArgMinMaxUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrArgMinMaxUnit::ZinIrArgMinMaxUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0D480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40CCA78E7CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrBroadcastUnit,ZinIrBroadcastUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrBroadcastUnit::ZinIrBroadcastUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40643987F4);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrInputViewUnit,ZinIrInputViewUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrInputViewUnit::ZinIrInputViewUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40D483CAEALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrMatrixMultUnit,ZinIrMatrixMultUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrMatrixMultUnit::ZinIrMatrixMultUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C401CE9E38ELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrReductionUnit,ZinIrReductionUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrReductionUnit::ZinIrReductionUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40CF299463);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrTransposeUnit,ZinIrTransposeUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrTransposeUnit::ZinIrTransposeUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C400D43BBFELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrReshapeUnit,ZinIrReshapeUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrReshapeUnit::ZinIrReshapeUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0D870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40F343EBDBLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrShapeUnit,ZinIrShapeUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrShapeUnit::ZinIrShapeUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSoftmaxUnit,ZinIrSoftmaxUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrSoftmaxUnit::ZinIrSoftmaxUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0D9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C402C4C3889);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrInstanceNormUnit,ZinIrInstanceNormUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrInstanceNormUnit::ZinIrInstanceNormUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0DA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40560BEDC2);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrL2NormUnit,ZinIrL2NormUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrL2NormUnit::ZinIrL2NormUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0DB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40560BEDC2);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrMinMaxNormUnit,ZinIrMinMaxNormUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrMinMaxNormUnit::ZinIrMinMaxNormUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0DBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40560BEDC2);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrLayerNormUnit,ZinIrLayerNormUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrLayerNormUnit::ZinIrLayerNormUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0DC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40CA54C831);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrLRNUnit,ZinIrLRNUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrLRNUnit::ZinIrLRNUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40D610EE6ELL);
  _Unwind_Resume(a1);
}

ZinIrCostVolumeUnit *std::make_unique[abi:ne180100]<ZinIrCostVolumeUnit,ZinIrCostVolumeUnitInfo &>@<X0>(const ZinIrCostVolumeUnitInfo *a1@<X0>, ZinIrCostVolumeUnit **a2@<X8>)
{
  ZinIrCostVolumeUnit *v4;
  ZinIrCostVolumeUnit *result;

  v4 = (ZinIrCostVolumeUnit *)operator new();
  result = ZinIrCostVolumeUnit::ZinIrCostVolumeUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0DD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40D483CAEALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPixelShuffleUnit,ZinIrPixelShuffleUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrPixelShuffleUnit::ZinIrPixelShuffleUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0DE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPixelUnshuffleUnit,ZinIrPixelUnshuffleUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrPixelUnshuffleUnit::ZinIrPixelUnshuffleUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0DECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrFurthestPointSamplingUnit,ZinIrFurthestPointSamplingUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrFurthestPointSamplingUnit::ZinIrFurthestPointSamplingUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0DF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40E3A28A69);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSpaceToBatchUnit,ZinIrSpaceToBatchUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrSpaceToBatchUnit::ZinIrSpaceToBatchUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrBatchToSpaceUnit,ZinIrBatchToSpaceUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrBatchToSpaceUnit::ZinIrBatchToSpaceUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrChannelToSpaceUnit,ZinIrChannelToSpaceUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrChannelToSpaceUnit::ZinIrChannelToSpaceUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSpaceToChannelUnit,ZinIrSpaceToChannelUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrSpaceToChannelUnit::ZinIrSpaceToChannelUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRadiusSearchUnit,ZinIrRadiusSearchUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrRadiusSearchUnit::ZinIrRadiusSearchUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40916FB9FCLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrGatherUnit,ZinIrGatherUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrGatherUnit::ZinIrGatherUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4075C22333);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrAffineTransformUnit,ZinIrAffineTransformUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  float v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrAffineTransformUnit::ZinIrAffineTransformUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4008FE49C6);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrResizeUnit,ZinIrResizeUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrResizeUnit::ZinIrResizeUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4048329A03);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrResizeAsUnit,ZinIrResizeAsUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrResizeAsUnit::ZinIrResizeAsUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C401A02D76FLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrResampleUnit,ZinIrResampleUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrResampleUnit::ZinIrResampleUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40A3B92BB8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPadUnit,ZinIrPadUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  float v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrPadUnit::ZinIrPadUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4015392E2ELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrTileUnit,ZinIrTileUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrTileUnit::ZinIrTileUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40643987F4);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCropResizeUnit,ZinIrCropResizeUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  float v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = operator new();
  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrCropResizeUnit::ZinIrCropResizeUnit(v4, a1, &__p, v5);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_206F0E7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4077A31195);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrDynamicSliceUnit,ZinIrDynamicSliceUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrDynamicSliceUnit::ZinIrDynamicSliceUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C402DFD0A37);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrGlobalArgMinMaxUnit,ZinIrGlobalArgMinMaxUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  ZinIrGlobalArgMinMaxUnit::ZinIrGlobalArgMinMaxUnit(v4, a1);
  *a2 = v4;
}

void sub_206F0E94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40E3A28A69);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSortUnit,ZinIrSortUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrSortUnit::ZinIrSortUnit(v4, a1, (uint64_t)&__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0E9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C405B421C95);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrTopKUnit,ZinIrTopKUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrTopKUnit::ZinIrTopKUnit(v4, a1, (uint64_t)&__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0EA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40ABF93603);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrNMSUnit,ZinIrNMSUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrNMSUnit::ZinIrNMSUnit(v4, a1, (uint64_t)&__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0EB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C408D2572CELL);
  _Unwind_Resume(a1);
}

ZinIrMatrixDecompositionUnit *std::make_unique[abi:ne180100]<ZinIrMatrixDecompositionUnit,ZinIrMatrixDecompositionUnitInfo &>@<X0>(const ZinIrMatrixDecompositionUnitInfo *a1@<X0>, ZinIrMatrixDecompositionUnit **a2@<X8>)
{
  ZinIrMatrixDecompositionUnit *v4;
  ZinIrMatrixDecompositionUnit *result;

  v4 = (ZinIrMatrixDecompositionUnit *)operator new();
  result = ZinIrMatrixDecompositionUnit::ZinIrMatrixDecompositionUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0EBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40A38921DDLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrDropoutUnit,ZinIrDropoutUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrDropoutUnit::ZinIrDropoutUnit(v4, a1, (uint64_t)&__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0EC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C4078F2ED1BLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRandomUnit,ZinIrRandomUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrRandomUnit::ZinIrRandomUnit(v4, a1, (uint64_t)&__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0ED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C405FF2D9E1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCrossProductUnit,ZinIrUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrCrossProductUnit::ZinIrCrossProductUnit(v4, a1, (uint64_t)&__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0EDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

ZinIrQuantUnit *std::make_unique[abi:ne180100]<ZinIrQuantUnit,ZinIrQuantUnitInfo &>@<X0>(const ZinIrQuantUnitInfo *a1@<X0>, ZinIrQuantUnit **a2@<X8>)
{
  ZinIrQuantUnit *v4;
  ZinIrQuantUnit *result;

  v4 = (ZinIrQuantUnit *)operator new();
  result = ZinIrQuantUnit::ZinIrQuantUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0EE34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40A9DA204DLL);
  _Unwind_Resume(a1);
}

ZinIrDeQuantUnit *std::make_unique[abi:ne180100]<ZinIrDeQuantUnit,ZinIrDeQuantUnitInfo &>@<X0>(const ZinIrDeQuantUnitInfo *a1@<X0>, ZinIrDeQuantUnit **a2@<X8>)
{
  ZinIrDeQuantUnit *v4;
  ZinIrDeQuantUnit *result;

  v4 = (ZinIrDeQuantUnit *)operator new();
  result = ZinIrDeQuantUnit::ZinIrDeQuantUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0EEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40A9DA204DLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPhiUnit,ZinIrUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrPhiUnit::ZinIrPhiUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0EF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrConditionUnit,ZinIrUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrConditionUnit::ZinIrConditionUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0EFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

ZinIrNEConvUnit *std::make_unique[abi:ne180100]<ZinIrNEConvUnit,ZinIrNEConvUnitInfo &>@<X0>(const ZinIrNEConvUnitInfo *a1@<X0>, ZinIrNEConvUnit **a2@<X8>)
{
  ZinIrNEConvUnit *v4;
  ZinIrNEConvUnit *result;

  v4 = (ZinIrNEConvUnit *)operator new();
  result = ZinIrNEConvUnit::ZinIrNEConvUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C4046841447);
  _Unwind_Resume(a1);
}

void ZinIrNEConvUnitInfo::~ZinIrNEConvUnitInfo(ZinIrNEConvUnitInfo *this)
{
  void **v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_24C01EFA0;
  v2 = (void **)((char *)this + 368);
  *((_QWORD *)this + 46) = off_24C01ED88;
  v3 = (void *)*((_QWORD *)this + 65);
  if (v3)
  {
    *((_QWORD *)this + 66) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 62);
  if (v4)
  {
    *((_QWORD *)this + 63) = v4;
    operator delete(v4);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  *(_QWORD *)this = &unk_24C01AB80;
  if (*((_BYTE *)this + 352))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 30);
  if (*((_BYTE *)this + 232))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 10);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
}

{
  void **v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_24C01EFA0;
  v2 = (void **)((char *)this + 368);
  *((_QWORD *)this + 46) = off_24C01ED88;
  v3 = (void *)*((_QWORD *)this + 65);
  if (v3)
  {
    *((_QWORD *)this + 66) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 62);
  if (v4)
  {
    *((_QWORD *)this + 63) = v4;
    operator delete(v4);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  *(_QWORD *)this = &unk_24C01AB80;
  if (*((_BYTE *)this + 352))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 30);
  if (*((_BYTE *)this + 232))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 10);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
  JUMPOUT(0x20BD002F8);
}

ZinIrNEMatMulUnit *std::make_unique[abi:ne180100]<ZinIrNEMatMulUnit,ZinIrNEMatMulUnitInfo &>@<X0>(const ZinIrNEMatMulUnitInfo *a1@<X0>, ZinIrNEMatMulUnit **a2@<X8>)
{
  ZinIrNEMatMulUnit *v4;
  ZinIrNEMatMulUnit *result;

  v4 = (ZinIrNEMatMulUnit *)operator new();
  result = ZinIrNEMatMulUnit::ZinIrNEMatMulUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C406C17794ALL);
  _Unwind_Resume(a1);
}

void ZinIrNEMatMulUnitInfo::~ZinIrNEMatMulUnitInfo(void **this)
{
  *this = &unk_24C020860;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 46);
  *this = &unk_24C01AB80;
  if (*((_BYTE *)this + 352))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 30);
  if (*((_BYTE *)this + 232))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 10);
  ZinIrUnitInfo::~ZinIrUnitInfo(this);
}

{
  *this = &unk_24C020860;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 46);
  *this = &unk_24C01AB80;
  if (*((_BYTE *)this + 352))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 30);
  if (*((_BYTE *)this + 232))
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 10);
  ZinIrUnitInfo::~ZinIrUnitInfo(this);
  JUMPOUT(0x20BD002F8);
}

ZinIrNEPoolUnit *std::make_unique[abi:ne180100]<ZinIrNEPoolUnit,ZinIrNEPoolUnitInfo &>@<X0>(const ZinIrNEPoolUnitInfo *a1@<X0>, ZinIrNEPoolUnit **a2@<X8>)
{
  ZinIrNEPoolUnit *v4;
  ZinIrNEPoolUnit *result;

  v4 = (ZinIrNEPoolUnit *)operator new();
  result = ZinIrNEPoolUnit::ZinIrNEPoolUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F258(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40E4462E51);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<ZinIrNEBypassUnit,ZinIrNEBypassUnitInfo &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = ZinIrNEBypassUnit::ZinIrNEBypassUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40FB8E29FCLL);
  _Unwind_Resume(a1);
}

ZinIrPEPoolUnit *std::make_unique[abi:ne180100]<ZinIrPEPoolUnit,ZinIrPEPoolUnitInfo &>@<X0>(const ZinIrPEPoolUnitInfo *a1@<X0>, ZinIrPEPoolUnit **a2@<X8>)
{
  ZinIrPEPoolUnit *v4;
  ZinIrPEPoolUnit *result;

  v4 = (ZinIrPEPoolUnit *)operator new();
  result = ZinIrPEPoolUnit::ZinIrPEPoolUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F340(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40DFE0914FLL);
  _Unwind_Resume(a1);
}

ZinIrPEElementWiseUnit *std::make_unique[abi:ne180100]<ZinIrPEElementWiseUnit,ZinIrPEElementWiseUnitInfo &>@<X0>(const ZinIrPEElementWiseUnitInfo *a1@<X0>, ZinIrPEElementWiseUnit **a2@<X8>)
{
  ZinIrPEElementWiseUnit *v4;
  ZinIrPEElementWiseUnit *result;

  v4 = (ZinIrPEElementWiseUnit *)operator new();
  result = ZinIrPEElementWiseUnit::ZinIrPEElementWiseUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40227051EDLL);
  _Unwind_Resume(a1);
}

ZinIrPEGOCUnit *std::make_unique[abi:ne180100]<ZinIrPEGOCUnit,ZinIrPEGOCUnitInfo &>@<X0>(const ZinIrPEGOCUnitInfo *a1@<X0>, ZinIrPEGOCUnit **a2@<X8>)
{
  ZinIrPEGOCUnit *v4;
  ZinIrPEGOCUnit *result;

  v4 = (ZinIrPEGOCUnit *)operator new();
  result = ZinIrPEGOCUnit::ZinIrPEGOCUnit(v4, a1);
  *a2 = v4;
  return result;
}

void sub_206F0F428(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40D7AE3209);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrLinearUnit,ZinIrLinearUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrLinearUnit::ZinIrLinearUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0F4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40105C88E8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRingBufferWriterUnit,ZinIrRingBufferUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrRingBufferWriterUnit::ZinIrRingBufferWriterUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0F568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C40646894DELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRingBufferReaderUnit,ZinIrRingBufferReaderUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p;
  void *v6;
  uint64_t v7;

  v4 = operator new();
  __p = 0;
  v6 = 0;
  v7 = 0;
  ZinIrRingBufferReaderUnit::ZinIrRingBufferReaderUnit(v4, a1, &__p);
  *a2 = v4;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_206F0F610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v11, 0x10B3C407B952C5CLL);
  _Unwind_Resume(a1);
}

uint64_t ZinCreateUnit(CFDictionaryRef theDict, const __CFString *key, const ZinIrVersion *a3, ZinIrGOCUnit **a4, CFArrayRef *a5)
{
  uint64_t result;
  __CFDictionary *Value;
  __CFDictionary *v12;
  CFTypeID v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;

  result = 3;
  if (theDict && key)
  {
    Value = (__CFDictionary *)CFDictionaryGetValue(theDict, key);
    if (Value && (v12 = Value, v13 = CFGetTypeID(Value), v13 == CFDictionaryGetTypeID()))
    {
      result = ZinCreateUnit(v12, a3, a4, a5);
      if (!(_DWORD)result)
      {
        if (!*a4)
          return 0;
        v14 = (*(uint64_t (**)(ZinIrGOCUnit *))(*(_QWORD *)*a4 + 112))(*a4);
        if (*(_QWORD *)(v14 + 40) == *(_QWORD *)(v14 + 48))
          return 0;
        result = ZinValidateUnitBottoms(theDict, v12, (ZinIrUnitStatus *)a5);
        if (!(_DWORD)result)
          return 0;
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v16 = 0;
      ZinGetCFObject((uint64_t)__p, key);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinCreateUnit((uint64_t *)__p);
      ZinIrUnitStatus::SetError(a5, CFSTR("InvalidUnitSyntax"));
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      return 3;
    }
  }
  return result;
}

void sub_206F0F770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinCreateConstInput(const __CFDictionary *a1, const __CFString *a2, ZinIrConstInput **a3, CFArrayRef *a4)
{
  __int128 v5;
  uint64_t v6;
  ZinIrConstInput *v7;
  ZinIrConstInput *v8;
  void *v10[2];
  void *v11[2];
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  char v22;
  void *__p[3];
  int v24;
  int v25;
  uint64_t v26;

  v13 = 0;
  *(_OWORD *)v11 = 0u;
  v12 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v14 = v5;
  v15 = v5;
  v16 = -1;
  v17 = 0;
  v18 = 0;
  v21 = -1;
  v19 = v5;
  v20[0] = v5;
  *(_OWORD *)((char *)v20 + 12) = v5;
  v22 = 0;
  memset(__p, 0, sizeof(__p));
  v24 = 0;
  v25 = 5;
  v26 = -1;
  v6 = ZinParseConstInput(a1, a2, (ZinIrIOInfo *)v10, a4);
  if (!(_DWORD)v6)
  {
    v7 = (ZinIrConstInput *)operator new();
    ZinIrConstInput::ZinIrConstInput(v7, (const ZinIrIOInfo *)v10);
    v8 = *a3;
    *a3 = v7;
    if (v8)
      (*(void (**)(ZinIrConstInput *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*(void **)((char *)__p + 4))
  {
    *(void **)((char *)&__p[1] + 4) = *(void **)((char *)__p + 4);
    operator delete(*(void **)((char *)__p + 4));
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[1]);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(v10[0]);
  return v6;
}

void sub_206F0F890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x20BD002F8](v9, 0x10B3C4024D165B5);
  ZinIrIOInfo::~ZinIrIOInfo((ZinIrIOInfo *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinRetrieveNetworkName(const __CFDictionary *a1, const __CFString **a2)
{
  uint64_t result;
  const __CFArray *v4;
  CFTypeID v5;
  const __CFString *v6;
  CFTypeID v7;

  result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("Networks"));
  if (result)
  {
    v4 = (const __CFArray *)result;
    v5 = CFGetTypeID((CFTypeRef)result);
    if (v5 == CFArrayGetTypeID() && CFArrayGetCount(v4) == 1)
    {
      result = (uint64_t)CFArrayGetValueAtIndex(v4, 0);
      if (!result)
        return result;
      v6 = (const __CFString *)result;
      v7 = CFGetTypeID((CFTypeRef)result);
      if (v7 == CFStringGetTypeID() && CFStringGetLength(v6) <= 511)
      {
        *a2 = v6;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void ZinCreateUnit(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Specified unit \"%s\" in unit list is not found.\n", (uint8_t *)&v2, 0xCu);
}

uint64_t ZinMirInsertCopyForInputView::ZinMirInsertCopyForInputView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  v5 = (std::string *)(a1 + 24);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 40);
  return a1;
}

uint64_t ZinMirInsertCopyForInputView::GetOffsetXInBytesWrtRootBase(ZinIrTensor *a1, uint64_t a2, unsigned __int8 a3)
{
  ZinIrTensor *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Hal;
  BOOL v10;
  uint64_t v11;
  uint64_t Interleave;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  ZinIrTensor *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE v29[72];
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;

  v5 = a1;
  ZinIrTensor::GetMemorySharingInfo(a1, (uint64_t)v29);
  if (v31)
  {
    v6 = 0;
    v7 = a3;
    while (1)
    {
      ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)&v23);
      v8 = v26;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v33);
      if (v8 == 7)
        break;
      ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)v29);
      if (v30 != 1)
        ZinAssertImpl("Step in width is not supported.");
      if (v31 - 1 > 1)
      {
        if (v31 <= 8 && ((1 << v31) & 0x128) != 0)
          goto LABEL_27;
      }
      else
      {
        Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(*((_QWORD *)v5 + 12) + 16) + 160));
        if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1331))
          v10 = 0;
        else
          v10 = v31 == 2;
        if (v10)
        {
LABEL_27:
          v20 = v33;
          goto LABEL_28;
        }
        v22 = 0;
        if (ZinTensorFormatGetSize(*((_DWORD *)v5 + 22), &v22))
          ZinAssertImpl("Invalid tensor format.");
        v11 = a2;
        if (!v7)
        {
          Interleave = ZinIrTensor::GetInterleave(v5);
          if (v13)
            v11 = Interleave;
          else
            v11 = 1;
        }
        v14 = v22;
        ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)&v23);
        v15 = v14 * v11;
        v16 = v25;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
        v6 += v15 * v16;
      }
      ZinIrTensor::GetParentTensor(v5, &v23);
      v5 = v23;
      v17 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v33);
      ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)v29);
      if (!v31)
        goto LABEL_26;
    }
  }
  else
  {
    v6 = 0;
LABEL_26:
    v20 = v33;
LABEL_28:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v32, v20);
  }
  return v6;
}

void sub_206F0FDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD *a38)
{
  uint64_t v38;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v38, a38);
  _Unwind_Resume(a1);
}

void ZinMirInsertCopyForInputView::Run(ZinMirInsertCopyForInputView *this)
{
  char *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void ****v18;
  uint64_t v19;
  uint64_t j;
  void **v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void ****v29;
  uint64_t v30;
  uint64_t k;
  void ****v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void ****v38;
  uint64_t v39;
  void ****v40;
  uint64_t v41;
  _QWORD *v42;
  ZinMirInsertCopyForInputView *v43;
  uint64_t v44;
  void ****v45;
  uint64_t v46;
  void ****v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void ****v60;
  void ***v61;
  uint64_t v62;
  void ***v63;
  void **v64;
  void **v65;
  void **v66;
  void **v67;
  void **v68;
  void ***v69;
  _BYTE v70[24];
  _BYTE *v71;
  _QWORD v72[3];
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  void ***v76;
  void ***v77;
  uint64_t v78;
  void ***v79;
  uint64_t *v80;
  _QWORD v81[4];
  int v82;
  void *v83;
  uint64_t v84;
  _QWORD **v85;
  void ***v86;
  _QWORD v87[2];
  void ****v88;
  __int128 v89;
  __int128 v90;
  int v91;
  _BYTE v92[88];
  uint64_t v93;
  uint64_t (**v94)(ZinLinearPattern *__hidden);
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[3];
  _QWORD *v98;
  void *__p;
  char v100;
  char v101;
  void *v102;
  uint64_t (*v103)(uint64_t);
  void **v104;
  __int128 v105;
  __int128 v106;
  int v107;
  _BYTE v108[88];
  uint64_t v109;
  uint64_t (**v110)(ZinLinearPattern *__hidden);
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[3];
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  void ***v117;
  void ***v118;
  uint64_t v119;
  void ***v120;
  uint64_t *v121;
  __int128 v122;
  __int128 v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  void *v131;
  char v132;
  char v133;
  void *v134;
  uint64_t (*v135)(uint64_t);
  void **v136;
  __int128 v137;
  __int128 v138;
  int v139;
  _BYTE v140[88];
  uint64_t v141;
  uint64_t (**v142)(ZinLinearPattern *__hidden);
  uint64_t v143;
  uint64_t (**v144)(ZinLinearPattern *__hidden);
  uint64_t v145;
  _BYTE v146[24];
  _BYTE *v147;
  _QWORD v148[3];
  _QWORD *v149;
  void *v150[2];
  char v151;
  _QWORD v152[3];
  _QWORD *v153;
  _BYTE v154[32];
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (**v158)(ZinLinearPattern *__hidden);
  uint64_t v159;
  uint64_t (**v160)(ZinLinearPattern *__hidden);
  uint64_t v161;
  _BYTE v162[24];
  _BYTE *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _QWORD v166[23];
  uint64_t v167;
  uint64_t (**v168)(ZinLinearPattern *__hidden);
  uint64_t v169;
  uint64_t (**v170)(ZinLinearPattern *__hidden);
  uint64_t v171;
  _BYTE v172[24];
  _BYTE *v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)this + 8;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 1327))
  {
    std::string::basic_string[abi:ne180100]<0>(v150, "view0");
    v152[0] = &unk_24C0537D8;
    v152[1] = MatchUnalignedInputViewInW;
    v153 = v152;
    memset(v154, 0, sizeof(v154));
    v155 = 1065353216;
    v117 = 0;
    v115 = 0;
    v116 = 0;
    v131 = &v115;
    v132 = 0;
    v115 = operator new(0x60uLL);
    v116 = (uint64_t)v115;
    v117 = (void ***)((char *)v115 + 96);
    v116 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v117, (uint64_t)v150, (uint64_t)&v156, (uint64_t)v115);
    std::string::basic_string[abi:ne180100]<0>(&v131, "view1");
    v134 = &unk_24C0537D8;
    v135 = MatchUnalignedInputViewInW;
    v136 = &v134;
    v137 = 0u;
    v138 = 0u;
    v139 = 1065353216;
    v119 = 0;
    v120 = 0;
    v118 = 0;
    v118 = (void ***)operator new(0x60uLL);
    v119 = (uint64_t)v118;
    v120 = v118 + 12;
    v119 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v120, (uint64_t)&v131, (uint64_t)v140, (uint64_t)v118);
    v75 = 0;
    v76 = 0;
    v74 = 0;
    __p = &v74;
    v100 = 0;
    v74 = operator new(0x30uLL);
    v75 = (uint64_t)v74;
    v76 = (void ***)((char *)v74 + 48);
    v75 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc const>>,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const>*>((uint64_t)&v76, (uint64_t *)&v115, (uint64_t *)&v121, v74);
    v83 = &v74;
    v84 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pe_ew");
    v102 = &unk_24C0537D8;
    v103 = MatchPEEW;
    v104 = &v102;
    v105 = 0u;
    v106 = 0u;
    v107 = 1065353216;
    v127 = 0;
    v125 = 0;
    v126 = 0;
    v125 = operator new(0x60uLL);
    v126 = v125;
    v127 = v125 + 12;
    v126 = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v127, (uint64_t)&__p, (uint64_t)v108, (uint64_t)v125);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v85 = &v125;
    v86 = &v66;
    v3 = v87;
    *(_QWORD *)&v89 = 0;
    v164[0] = &off_24C059190;
    v165 = v164;
    ZinManyToOnePattern::ZinManyToOnePattern(v166, &v83, v1, 0, v164, 0);
    v4 = v165;
    if (v165 == v164)
    {
      v5 = 4;
      v4 = v164;
    }
    else
    {
      if (!v165)
        goto LABEL_7;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
    if ((_QWORD *)v89 == v87)
    {
      v6 = 4;
    }
    else
    {
      if (!(_QWORD)v89)
        goto LABEL_12;
      v6 = 5;
      v3 = (_QWORD *)v89;
    }
    (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_12:
    v63 = &v66;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    v66 = (void **)&v125;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v66);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v105);
    v7 = v104;
    if (v104 == &v102)
    {
      v8 = 4;
      v7 = &v102;
    }
    else
    {
      if (!v104)
        goto LABEL_17;
      v8 = 5;
    }
    (*((void (**)(void))*v7 + v8))();
LABEL_17:
    if (v101 < 0)
      operator delete(__p);
    __p = &v74;
    std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    for (i = 24; i != -24; i -= 24)
    {
      __p = (char *)&v115 + i;
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v137);
    v10 = v136;
    if (v136 == &v134)
    {
      v11 = 4;
      v10 = &v134;
    }
    else
    {
      if (!v136)
        goto LABEL_26;
      v11 = 5;
    }
    (*((void (**)(void))*v10 + v11))();
LABEL_26:
    if (v133 < 0)
      operator delete(v131);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v154);
    v12 = v153;
    if (v153 == v152)
    {
      v13 = 4;
      v12 = v152;
    }
    else
    {
      if (!v153)
        goto LABEL_33;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_33:
    if (v151 < 0)
      operator delete(v150[0]);
    std::string::basic_string[abi:ne180100]<0>(&v131, "view0");
    v134 = &unk_24C0537D8;
    v135 = MatchUnalignedInputViewInW;
    v136 = &v134;
    v137 = 0u;
    v138 = 0u;
    v139 = 1065353216;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    __p = &v74;
    v100 = 0;
    v74 = operator new(0x60uLL);
    v75 = (uint64_t)v74;
    v76 = (void ***)((char *)v74 + 96);
    v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v76, (uint64_t)&v131, (uint64_t)v140, (uint64_t)v74);
    std::string::basic_string[abi:ne180100]<0>(&__p, "view1");
    v102 = &unk_24C0537D8;
    v103 = MatchUnalignedInputViewInW;
    v104 = &v102;
    v105 = 0u;
    v106 = 0u;
    v107 = 1065353216;
    v78 = 0;
    v79 = 0;
    v77 = 0;
    v83 = &v77;
    LOBYTE(v84) = 0;
    v77 = (void ***)operator new(0x60uLL);
    v78 = (uint64_t)v77;
    v79 = v77 + 12;
    v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v79, (uint64_t)&__p, (uint64_t)v108, (uint64_t)v77);
    v127 = 0;
    v125 = 0;
    v126 = 0;
    v83 = &v125;
    LOBYTE(v84) = 0;
    v125 = operator new(0x30uLL);
    v126 = v125;
    v127 = v125 + 6;
    v126 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc const>>,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const>*>((uint64_t)&v127, (uint64_t *)&v74, (uint64_t *)&v80, v125);
    v115 = &v125;
    v116 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v83, "pe_pool");
    v86 = (void ***)&unk_24C0537D8;
    v87[0] = MatchPEPool;
    v88 = &v86;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v63 = &v66;
    LOBYTE(v64) = 0;
    v66 = (void **)operator new(0x60uLL);
    v67 = v66;
    v68 = v66 + 12;
    v67 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v68, (uint64_t)&v83, (uint64_t)v92, (uint64_t)v66);
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v117 = &v66;
    v118 = (void ***)&v63;
    v14 = &v119;
    *(_QWORD *)&v122 = 0;
    v148[0] = &off_24C059190;
    v149 = v148;
    ZinManyToOnePattern::ZinManyToOnePattern(v150, &v115, v1, 0, v148, 0);
    v15 = v149;
    if (v149 == v148)
    {
      v16 = 4;
      v15 = v148;
    }
    else
    {
      if (!v149)
        goto LABEL_40;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_40:
    if ((uint64_t *)v122 == &v119)
    {
      v17 = 4;
    }
    else
    {
      if (!(_QWORD)v122)
        goto LABEL_45;
      v17 = 5;
      v14 = (uint64_t *)v122;
    }
    (*(void (**)(uint64_t *))(*v14 + 8 * v17))(v14);
LABEL_45:
    v60 = &v63;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    v63 = &v66;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v89);
    v18 = v88;
    if (v88 == &v86)
    {
      v19 = 4;
      v18 = &v86;
    }
    else
    {
      if (!v88)
        goto LABEL_50;
      v19 = 5;
    }
    ((void (*)(void))(*v18)[v19])();
LABEL_50:
    if (SHIBYTE(v85) < 0)
      operator delete(v83);
    v83 = &v125;
    std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    for (j = 24; j != -24; j -= 24)
    {
      v83 = (char *)&v74 + j;
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v105);
    v21 = v104;
    if (v104 == &v102)
    {
      v22 = 4;
      v21 = &v102;
    }
    else
    {
      if (!v104)
        goto LABEL_59;
      v22 = 5;
    }
    (*((void (**)(void))*v21 + v22))();
LABEL_59:
    if (v101 < 0)
      operator delete(__p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v137);
    v23 = v136;
    if (v136 == &v134)
    {
      v24 = 4;
      v23 = &v134;
    }
    else
    {
      if (!v136)
        goto LABEL_66;
      v24 = 5;
    }
    (*((void (**)(void))*v23 + v24))();
LABEL_66:
    if (v133 < 0)
      operator delete(v131);
    std::string::basic_string[abi:ne180100]<0>(&__p, "view0");
    v102 = &unk_24C0537D8;
    v103 = MatchUnalignedInputViewInW;
    v104 = &v102;
    v105 = 0u;
    v106 = 0u;
    v107 = 1065353216;
    v127 = 0;
    v125 = 0;
    v126 = 0;
    v83 = &v125;
    LOBYTE(v84) = 0;
    v125 = operator new(0x60uLL);
    v126 = v125;
    v127 = v125 + 12;
    v126 = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v127, (uint64_t)&__p, (uint64_t)v108, (uint64_t)v125);
    std::string::basic_string[abi:ne180100]<0>(&v83, "view1");
    v86 = (void ***)&unk_24C0537D8;
    v87[0] = MatchUnalignedInputViewInW;
    v88 = &v86;
    v89 = 0u;
    v90 = 0u;
    v91 = 1065353216;
    v129 = 0;
    v130 = 0;
    v128 = 0;
    v115 = &v128;
    LOBYTE(v116) = 0;
    v128 = (char *)operator new(0x60uLL);
    v129 = (uint64_t)v128;
    v130 = v128 + 96;
    v129 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v130, (uint64_t)&v83, (uint64_t)v92, (uint64_t)v128);
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v115 = &v66;
    LOBYTE(v116) = 0;
    v66 = (void **)operator new(0x30uLL);
    v67 = v66;
    v68 = v66 + 6;
    v67 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc const>>,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const> const*,std::vector<ZinLinearPattern::AtomItemDesc const>*>((uint64_t)&v68, (uint64_t *)&v125, (uint64_t *)&v131, v66);
    v74 = &v66;
    v75 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v115, "pe_goc");
    v118 = (void ***)&unk_24C0537D8;
    v119 = (uint64_t)MatchPEGOC;
    v121 = (uint64_t *)&v118;
    v122 = 0u;
    v123 = 0u;
    v124 = 1065353216;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    v60 = &v63;
    LOBYTE(v61) = 0;
    v63 = (void ***)operator new(0x60uLL);
    v64 = (void **)v63;
    v65 = (void **)(v63 + 12);
    v64 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v65, (uint64_t)&v115, (uint64_t)&v125, (uint64_t)v63);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v76 = (void ***)&v63;
    v77 = (void ***)&v60;
    v25 = &v78;
    v81[0] = 0;
    v113[0] = &off_24C059190;
    v114 = v113;
    ZinManyToOnePattern::ZinManyToOnePattern(&v131, &v74, v1, 0, v113, 0);
    v26 = v114;
    if (v114 == v113)
    {
      v27 = 4;
      v26 = v113;
    }
    else
    {
      if (!v114)
        goto LABEL_73;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_73:
    if ((uint64_t *)v81[0] == &v78)
    {
      v28 = 4;
    }
    else
    {
      if (!v81[0])
        goto LABEL_78;
      v28 = 5;
      v25 = (uint64_t *)v81[0];
    }
    (*(void (**)(uint64_t *))(*v25 + 8 * v28))(v25);
LABEL_78:
    v69 = (void ***)&v60;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v60 = &v63;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v122);
    v29 = (void ****)v121;
    if (v121 == (uint64_t *)&v118)
    {
      v30 = 4;
      v29 = &v118;
    }
    else
    {
      if (!v121)
        goto LABEL_83;
      v30 = 5;
    }
    ((void (*)(void))(*v29)[v30])();
LABEL_83:
    if (SHIBYTE(v117) < 0)
      operator delete(v115);
    v115 = &v66;
    std::vector<std::vector<ZinLinearPattern::AtomItemDesc const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    for (k = 3; k != -3; k -= 3)
    {
      v115 = &(&v125)[k];
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v89);
    v32 = v88;
    if (v88 == &v86)
    {
      v33 = 4;
      v32 = &v86;
    }
    else
    {
      if (!v88)
        goto LABEL_92;
      v33 = 5;
    }
    ((void (*)(void))(*v32)[v33])();
LABEL_92:
    if (SHIBYTE(v85) < 0)
      operator delete(v83);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v105);
    v34 = v104;
    if (v104 == &v102)
    {
      v35 = 4;
      v34 = &v102;
    }
    else
    {
      if (!v104)
        goto LABEL_99;
      v35 = 5;
    }
    (*((void (**)(void))*v34 + v35))();
LABEL_99:
    if (v101 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&v83, "view");
    v86 = (void ***)&unk_24C0537D8;
    v87[0] = MatchUnalignedInputViewInWBasedOnResidency;
    v88 = &v86;
    LODWORD(v60) = 1;
    std::unordered_set<Attribute>::unordered_set((uint64_t)&v89, (int *)&v60, 1);
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v115 = &v74;
    LOBYTE(v116) = 0;
    v74 = operator new(0x60uLL);
    v75 = (uint64_t)v74;
    v76 = (void ***)((char *)v74 + 96);
    v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v76, (uint64_t)&v83, (uint64_t)v92, (uint64_t)v74);
    v63 = (void ***)&v74;
    std::string::basic_string[abi:ne180100]<0>(&v115, "alias");
    v118 = (void ***)&unk_24C0537D8;
    v119 = (uint64_t)MatchAlias;
    v121 = (uint64_t *)&v118;
    v122 = 0u;
    v123 = 0u;
    v124 = 1065353216;
    v127 = 0;
    v125 = 0;
    v126 = 0;
    v66 = (void **)&v125;
    LOBYTE(v67) = 0;
    v125 = operator new(0x60uLL);
    v126 = v125;
    v127 = v125 + 12;
    v126 = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v127, (uint64_t)&v115, (uint64_t)&v125, (uint64_t)v125);
    v64 = (void **)&v125;
    v97[0] = &off_24C0590E0;
    v98 = v97;
    ZinOneToVariablePattern::ZinOneToVariablePattern(&__p, &v63, v1, 0, v97, 0);
    v36 = v98;
    if (v98 == v97)
    {
      v37 = 4;
      v36 = v97;
    }
    else
    {
      if (!v98)
        goto LABEL_106;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_106:
    v66 = (void **)&v125;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v66);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v122);
    v38 = (void ****)v121;
    if (v121 == (uint64_t *)&v118)
    {
      v39 = 4;
      v38 = &v118;
    }
    else
    {
      if (!v121)
        goto LABEL_111;
      v39 = 5;
    }
    ((void (*)(void))(*v38)[v39])();
LABEL_111:
    if (SHIBYTE(v117) < 0)
      operator delete(v115);
    v115 = &v74;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v89);
    v40 = v88;
    if (v88 == &v86)
    {
      v41 = 4;
      v40 = &v86;
    }
    else
    {
      if (!v88)
        goto LABEL_118;
      v41 = 5;
    }
    ((void (*)(void))(*v40)[v41])();
LABEL_118:
    if (SHIBYTE(v85) < 0)
      operator delete(v83);
    std::string::basic_string[abi:ne180100]<0>(&v115, "view");
    v118 = (void ***)&unk_24C0537D8;
    v119 = (uint64_t)MatchUnalignedInputViewInWBasedOnResidency;
    v121 = (uint64_t *)&v118;
    LODWORD(v69) = 1;
    std::unordered_set<Attribute>::unordered_set((uint64_t)&v122, (int *)&v69, 1);
    v126 = 0;
    v125 = 0;
    v127 = 0;
    v74 = &v125;
    LOBYTE(v75) = 0;
    v125 = operator new(0x60uLL);
    v126 = v125;
    v127 = v125 + 12;
    v126 = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v127, (uint64_t)&v115, (uint64_t)&v125, (uint64_t)v125);
    v60 = (void ****)&v125;
    std::string::basic_string[abi:ne180100]<0>(&v74, "tensor_kernel_consumer");
    v77 = (void ***)&unk_24C0537D8;
    v78 = (uint64_t)MatchTensorKernelConsumer;
    v80 = (uint64_t *)&v77;
    memset(v81, 0, sizeof(v81));
    v82 = 1065353216;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v63 = &v66;
    LOBYTE(v64) = 0;
    v66 = (void **)operator new(0x60uLL);
    v67 = v66;
    v68 = v66 + 12;
    v67 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v68, (uint64_t)&v74, (uint64_t)&v83, (uint64_t)v66);
    v61 = &v66;
    v72[0] = &off_24C059138;
    v73 = v72;
    ZinOneToVariablePattern::ZinOneToVariablePattern(&v83, &v60, v1, 0, v72, 0);
    v42 = v73;
    if (v73 == v72)
    {
      v44 = 4;
      v42 = v72;
      v43 = this;
    }
    else
    {
      v43 = this;
      if (!v73)
        goto LABEL_125;
      v44 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v44))();
LABEL_125:
    v63 = &v66;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v81);
    v45 = (void ****)v80;
    if (v80 == (uint64_t *)&v77)
    {
      v46 = 4;
      v45 = &v77;
    }
    else
    {
      if (!v80)
        goto LABEL_130;
      v46 = 5;
    }
    ((void (*)(void))(*v45)[v46])();
LABEL_130:
    if (SHIBYTE(v76) < 0)
      operator delete(v74);
    v74 = &v125;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v122);
    v47 = (void ****)v121;
    if (v121 == (uint64_t *)&v118)
    {
      v48 = 4;
      v47 = &v118;
    }
    else
    {
      if (!v121)
        goto LABEL_137;
      v48 = 5;
    }
    ((void (*)(void))(*v47)[v48])();
LABEL_137:
    if (SHIBYTE(v117) < 0)
      operator delete(v115);
    v49 = *(_QWORD **)v43;
    v71 = 0;
    v50 = operator new(0x38uLL);
    *v50 = &off_24C0591E8;
    v50[1] = &__p;
    v50[2] = &v83;
    v50[3] = v166;
    v50[4] = v150;
    v50[5] = &v131;
    v50[6] = v43;
    v71 = v50;
    v51 = ZinIrControlFlowGraph::TraverseForward(v49, (uint64_t)v70, 1);
    v52 = v71;
    if (v71 == v70)
    {
      v53 = 4;
      v52 = v70;
    }
    else
    {
      if (!v71)
        goto LABEL_144;
      v53 = 5;
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_144:
    if (v51)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirInsertCopyForInputView::Run();
    }
    v83 = &off_24C022540;
    v115 = &v96;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    v94 = &off_24C01BCC8;
    v115 = &v95;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    ZinPattern::~ZinPattern((ZinPattern *)&v94);
    v115 = &v93;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    ZinPattern::~ZinPattern((ZinPattern *)&v83);
    __p = &off_24C022540;
    v83 = &v112;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    v110 = &off_24C01BCC8;
    v83 = &v111;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    ZinPattern::~ZinPattern((ZinPattern *)&v110);
    v83 = &v109;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    ZinPattern::~ZinPattern((ZinPattern *)&__p);
    v131 = &off_24C01F100;
    v54 = v147;
    if (v147 == v146)
    {
      v55 = 4;
      v54 = v146;
    }
    else
    {
      if (!v147)
        goto LABEL_152;
      v55 = 5;
    }
    (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_152:
    v144 = &off_24C01BCC8;
    __p = &v145;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinPattern::~ZinPattern((ZinPattern *)&v144);
    v142 = &off_24C01BCC8;
    __p = &v143;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinPattern::~ZinPattern((ZinPattern *)&v142);
    __p = &v141;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinPattern::~ZinPattern((ZinPattern *)&v131);
    v150[0] = &off_24C01F100;
    v56 = v163;
    if (v163 == v162)
    {
      v57 = 4;
      v56 = v162;
    }
    else
    {
      if (!v163)
        goto LABEL_157;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_157:
    v160 = &off_24C01BCC8;
    v131 = &v161;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
    ZinPattern::~ZinPattern((ZinPattern *)&v160);
    v158 = &off_24C01BCC8;
    v131 = &v159;
    std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
    ZinPattern::~ZinPattern((ZinPattern *)&v158);
    v131 = &v157;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
    ZinPattern::~ZinPattern((ZinPattern *)v150);
    v166[0] = &off_24C01F100;
    v58 = v173;
    if (v173 == v172)
    {
      v59 = 4;
      v58 = v172;
    }
    else
    {
      if (!v173)
      {
LABEL_162:
        v170 = &off_24C01BCC8;
        v150[0] = &v171;
        std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
        ZinPattern::~ZinPattern((ZinPattern *)&v170);
        v168 = &off_24C01BCC8;
        v150[0] = &v169;
        std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
        ZinPattern::~ZinPattern((ZinPattern *)&v168);
        v150[0] = &v167;
        std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
        ZinPattern::~ZinPattern((ZinPattern *)v166);
        return;
      }
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
    goto LABEL_162;
  }
}

void sub_206F11214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MatchUnalignedInputViewInW(uint64_t a1)
{
  __int16 v1;
  int v2;

  if (IsUnalignedInWidth(*(const ZinIrOpLayer **)(a1 + 8), *(_QWORD *)(**(_QWORD **)(a1 + 16) + 416)))
  {
    LOBYTE(v1) = 1;
    v2 = 1;
  }
  else
  {
    v1 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = HIBYTE(v1);
  }
  return v1 | (v2 << 8);
}

uint64_t MatchPEEW(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 81)
  {
    v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

{
  _QWORD *v1;
  __int16 v2;
  int v3;
  uint64_t v6;

  v1 = *(_QWORD **)(a1 + 8);
  if (*(_DWORD *)(v1[8] + 8) != 81 || v1[12] - v1[11] != 8 || !v1[63])
  {
LABEL_6:
    v2 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v3 = HIBYTE(v2);
    return v2 | (v3 << 8);
  }
  if (*(_QWORD *)(v1[33] + 216))
  {
    if (!ZinANELayer::IsChainedProducer(*(ZinANELayer **)(a1 + 8)))
      ZinAssertImpl("Overlap should be zero on all layers but chained producer");
    goto LABEL_6;
  }
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(*v1 + 360))(*(_QWORD *)(a1 + 8), 0);
  LOBYTE(v2) = 0;
  if (v6 == 1)
    LOBYTE(v2) = (unint64_t)(*(uint64_t (**)(_QWORD *, uint64_t))(*v1 + 360))(v1, 2) <= *(_QWORD *)(**(_QWORD **)(a1 + 16) + 960);
  v3 = 1;
  return v2 | (v3 << 8);
}

uint64_t MatchPEPool(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 83)
  {
    v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t MatchPEGOC(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 84)
  {
    v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t MatchUnalignedInputViewInWBasedOnResidency(uint64_t a1)
{
  uint64_t v2;
  __int16 matched;
  int v4;

  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0, 0)+ 104);
  if (v2 && *(_DWORD *)(v2 + 96) == 1)
  {
    matched = MatchUnalignedInputViewInW(a1);
LABEL_7:
    v4 = HIBYTE(matched);
    return matched | (v4 << 8);
  }
  if (!IsUnalignedInWidth(*(const ZinIrOpLayer **)(a1 + 8), *(_QWORD *)(**(_QWORD **)(a1 + 16) + 528)))
  {
    matched = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    goto LABEL_7;
  }
  LOBYTE(matched) = 1;
  v4 = 1;
  return matched | (v4 << 8);
}

uint64_t MatchAlias(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 33)
  {
    v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t MatchTensorKernelConsumer(uint64_t a1)
{
  ZinMirCacheTensors *v1;
  _QWORD *v2;
  uint64_t SingleMatch;
  ZinMirCacheTensors **v4;
  const ZinIrTensor *v5;
  char IsUsedAsKernelTensor;
  __int16 v7;
  int v8;
  void *__p[2];
  char v11;

  v1 = *(ZinMirCacheTensors **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "view");
  SingleMatch = ZinPattern::State::GetSingleMatch(v2, (unsigned __int8 *)__p);
  v4 = (ZinMirCacheTensors **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0);
  IsUsedAsKernelTensor = ZinMirCacheTensors::IsUsedAsKernelTensor(v1, v4, v5);
  if (v11 < 0)
    operator delete(__p[0]);
  LOBYTE(v7) = 1;
  if ((IsUsedAsKernelTensor & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v7 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v8 = HIBYTE(v7);
  }
  return v7 | (v8 << 8);
}

void sub_206F11A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL IsUnalignedInWidth(const ZinIrOpLayer *a1, unint64_t a2)
{
  char IsNoOp;
  ZinIrTensor *v5;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  IsNoOp = ZinIrOpLayer::IsNoOp(a1, (uint64_t *)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if ((IsNoOp & 1) == 0)
    return 0;
  v5 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  return ZinMirInsertCopyForInputView::GetOffsetXInBytesWrtRootBase(v5, 0, 0) % a2 != 0;
}

void sub_206F11B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059190;
  return result;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059190;
}

BOOL std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, const ZinIrHalParameters **a3, uint64_t *a4)
{
  uint64_t v5;
  char v6;
  _BOOL8 v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t SingleMatch;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const ZinPELayer *v15;
  const ZinIrOpLayer *v16;
  const ZinIrOpLayer *v17;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  void *v23;
  void *v24;
  char v25;

  v5 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v23, "view0");
  if ((ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "view1");
    v6 = ZinPattern::HasMatched(v5, (unsigned __int8 *)__p) ^ 1;
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v23);
    if ((v6 & 1) != 0)
      return 0;
  }
  else if ((v6 & 1) != 0)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "pe_ew");
  v8 = ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23);
  v9 = v8;
  if (v25 < 0)
  {
    operator delete(v23);
    if (v9)
      goto LABEL_11;
  }
  else if (v8)
  {
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v23, "pe_ew");
    SingleMatch = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)&v23);
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "pe_pool");
  v11 = ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23);
  v12 = v11;
  if (v25 < 0)
  {
    operator delete(v23);
    if (v12)
      goto LABEL_15;
  }
  else if (v11)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&v23, "pe_pool");
    SingleMatch = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)&v23);
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "pe_goc");
  v13 = ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23);
  v14 = v13;
  if (v25 < 0)
  {
    operator delete(v23);
    if (v14)
      goto LABEL_19;
  }
  else if (v13)
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&v23, "pe_goc");
    SingleMatch = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)&v23);
LABEL_20:
    v15 = (const ZinPELayer *)SingleMatch;
    if (v25 < 0)
      operator delete(v23);
    goto LABEL_24;
  }
  v15 = 0;
LABEL_24:
  std::string::basic_string[abi:ne180100]<0>(__p, "view0");
  v16 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(v19, "view1");
  v17 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)v19);
  GetCopyIndices(v15, v16, v17, *a3, (unint64_t *)&v23);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(__p[0]);
  v7 = v23 != v24;
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return v7;
}

void sub_206F11E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void GetCopyIndices(const ZinPELayer *a1@<X0>, const ZinIrOpLayer *a2@<X1>, const ZinIrOpLayer *a3@<X2>, const ZinIrHalParameters *a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  _BYTE *v20;
  char v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  char v48;
  _BYTE *v49;
  char v50;
  _BYTE *v51;
  char v52;
  char v53;
  char v54;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a1)
  {
    if (a2)
    {
      if ((*(unsigned int (**)(const ZinPELayer *))(*(_QWORD *)a1 + 640))(a1))
      {
        v10 = (_BYTE *)a5[1];
        v9 = a5[2];
        if ((unint64_t)v10 >= v9)
        {
          v13 = *a5;
          v14 = &v10[-*a5];
          v15 = (unint64_t)(v14 + 1);
          if ((uint64_t)(v14 + 1) < 0)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v16 = v9 - v13;
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
            v18 = (unint64_t)operator new(v17);
          else
            v18 = 0;
          v19 = (char *)(v18 + v17);
          v14[v18] = 0;
          v11 = (uint64_t)&v14[v18 + 1];
          if (v10 == (_BYTE *)v13)
          {
            v18 += (unint64_t)v14;
          }
          else
          {
            v20 = &v10[~v13];
            do
            {
              v21 = *--v10;
              (v20--)[v18] = v21;
            }
            while (v10 != (_BYTE *)v13);
            v10 = (_BYTE *)*a5;
          }
          *a5 = v18;
          a5[1] = v11;
          a5[2] = (unint64_t)v19;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v10 = 0;
          v11 = (uint64_t)(v10 + 1);
        }
        a5[1] = v11;
      }
      else if (*((_BYTE *)a4 + 1337))
      {
        if ((*(unsigned int (**)(const ZinPELayer *))(*(_QWORD *)a1 + 656))(a1))
        {
          v12 = *(_QWORD *)((*(uint64_t (**)(const ZinPELayer *))(*(_QWORD *)a1 + 696))(a1) + 64);
          if (ZinIrBroadcastInfo::HasDimension(v12, 4)
            && !ZinIrBroadcastInfo::HasDimension(v12, 3)
            && (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(_QWORD *)a1 + 360))(a1, 4) > (unint64_t)(*((_QWORD *)a4 + 40) - 8))
          {
            v54 = 0;
            std::vector<unsigned char>::push_back[abi:ne180100](a5, &v54);
          }
        }
      }
    }
    if (a3)
    {
      if ((*(unsigned int (**)(const ZinPELayer *))(*(_QWORD *)a1 + 648))(a1))
      {
        v23 = (_BYTE *)a5[1];
        v22 = a5[2];
        if ((unint64_t)v23 < v22)
        {
LABEL_32:
          *v23 = 1;
          v24 = (uint64_t)(v23 + 1);
LABEL_86:
          a5[1] = v24;
          return;
        }
        v34 = *a5;
        v35 = &v23[-*a5];
        v36 = (unint64_t)(v35 + 1);
        if ((uint64_t)(v35 + 1) < 0)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v37 = v22 - v34;
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
          v38 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
          v33 = (unint64_t)operator new(v38);
        else
          v33 = 0;
        v45 = &v35[v33];
        v46 = (char *)(v33 + v38);
        v35[v33] = 1;
        v24 = (uint64_t)&v35[v33 + 1];
        if (v23 != (_BYTE *)v34)
        {
          v47 = &v23[~v34];
          do
          {
            v48 = *--v23;
            (v47--)[v33] = v48;
          }
          while (v23 != (_BYTE *)v34);
LABEL_72:
          v23 = (_BYTE *)*a5;
          goto LABEL_84;
        }
        goto LABEL_83;
      }
      if (*((_BYTE *)a4 + 1337) && (*(unsigned int (**)(const ZinPELayer *))(*(_QWORD *)a1 + 664))(a1))
      {
        v25 = *(_QWORD *)((*(uint64_t (**)(const ZinPELayer *))(*(_QWORD *)a1 + 704))(a1) + 64);
        if (ZinIrBroadcastInfo::HasDimension(v25, 4)
          && !ZinIrBroadcastInfo::HasDimension(v25, 3)
          && (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(_QWORD *)a1 + 360))(a1, 4) > (unint64_t)(*((_QWORD *)a4 + 40) - 8))
        {
          v53 = 1;
          std::vector<unsigned char>::push_back[abi:ne180100](a5, &v53);
        }
      }
      else
      {
        v26 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 8);
        if (v26 == 84)
        {
          v23 = (_BYTE *)a5[1];
          v39 = a5[2];
          if ((unint64_t)v23 < v39)
            goto LABEL_32;
          v40 = *a5;
          v41 = &v23[-*a5];
          v42 = (unint64_t)(v41 + 1);
          if ((uint64_t)(v41 + 1) < 0)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v43 = v39 - v40;
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
            v44 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
            v33 = (unint64_t)operator new(v44);
          else
            v33 = 0;
          v45 = &v41[v33];
          v46 = (char *)(v33 + v44);
          v41[v33] = 1;
          v24 = (uint64_t)&v41[v33 + 1];
          if (v23 != (_BYTE *)v40)
          {
            v49 = &v23[~v40];
            do
            {
              v50 = *--v23;
              (v49--)[v33] = v50;
            }
            while (v23 != (_BYTE *)v40);
            goto LABEL_72;
          }
          goto LABEL_83;
        }
        if (v26 == 83 && (*(unsigned int (**)(const ZinPELayer *))(*(_QWORD *)a1 + 568))(a1))
        {
          v23 = (_BYTE *)a5[1];
          v27 = a5[2];
          if ((unint64_t)v23 < v27)
            goto LABEL_32;
          v28 = *a5;
          v29 = &v23[-*a5];
          v30 = (unint64_t)(v29 + 1);
          if ((uint64_t)(v29 + 1) < 0)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v31 = v27 - v28;
          if (2 * v31 > v30)
            v30 = 2 * v31;
          if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
            v32 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
            v33 = (unint64_t)operator new(v32);
          else
            v33 = 0;
          v45 = &v29[v33];
          v46 = (char *)(v33 + v32);
          v29[v33] = 1;
          v24 = (uint64_t)&v29[v33 + 1];
          if (v23 != (_BYTE *)v28)
          {
            v51 = &v23[~v28];
            do
            {
              v52 = *--v23;
              (v51--)[v33] = v52;
            }
            while (v23 != (_BYTE *)v28);
            goto LABEL_72;
          }
LABEL_83:
          v33 = (unint64_t)v45;
LABEL_84:
          *a5 = v33;
          a5[1] = v24;
          a5[2] = (unint64_t)v46;
          if (v23)
            operator delete(v23);
          goto LABEL_86;
        }
      }
    }
  }
}

void sub_206F1234C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::push_back[abi:ne180100](unint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0590E0;
  return result;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0590E0;
}

BOOL std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  void *__p[2];
  char v11;
  char *v12;
  char *v13;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "alias");
  ZinPattern::GetMatch(v4, (unsigned __int8 *)__p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v12 == v13)
  {
    v7 = 0;
    if (!v12)
      return v7;
    goto LABEL_11;
  }
  v5 = v12 + 8;
  do
  {
    v6 = *((_QWORD *)v5 - 1);
    v7 = v6 != 0;
    if (v6)
      v8 = 1;
    else
      v8 = v5 == v13;
    v5 += 8;
  }
  while (!v8);
  if (v12)
  {
LABEL_11:
    v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_206F1256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059138;
  return result;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059138;
}

BOOL std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  void *__p[2];
  char v11;
  char *v12;
  char *v13;

  v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_kernel_consumer");
  ZinPattern::GetMatch(v4, (unsigned __int8 *)__p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v12 == v13)
  {
    v7 = 0;
    if (!v12)
      return v7;
    goto LABEL_11;
  }
  v5 = v12 + 8;
  do
  {
    v6 = *((_QWORD *)v5 - 1);
    v7 = v6 != 0;
    if (v6)
      v8 = 1;
    else
      v8 = v5 == v13;
    v5 += 8;
  }
  while (!v8);
  if (v12)
  {
LABEL_11:
    v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_206F126BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24C0591E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C0591E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  const ZinIrOpLayerGraph *v4;
  ZinIrOpLayer *v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  uint64_t v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  const ZinIrTensor *v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrOpLayerGraphUtil *v16;
  unint64_t *v17;
  char IncomingIndex;
  uint64_t v19;
  ZinIrTensor *v20;
  ZinIrOpLayer **v21;
  uint64_t v22;
  const ZinPELayer *SingleMatch;
  uint64_t v24;
  const ZinIrOpLayer *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const ZinIrOpLayer *v34;
  ZinIrOpLayer **v35;
  unint64_t v37;
  void *__p[2];
  char v39;
  void *v40;
  ZinIrOpLayer **v41;
  char v42;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 48);
  if (ZinOneToVariablePattern::Match(*(ZinOneToVariablePattern **)(a1 + 8), *a2, *a3))
  {
    v7 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "alias");
    ZinPattern::GetMatch(v7, (unsigned __int8 *)__p, &v40);
    if (v39 < 0)
      operator delete(__p[0]);
    v8 = (ZinIrOpLayer **)v40;
    v9 = v41;
    if (v40 == v41)
    {
LABEL_47:
      if (v8)
      {
        v41 = v8;
        v21 = v8;
        goto LABEL_49;
      }
      return 0;
    }
    do
    {
      if (*v8)
        InsertCopyBeforeLayer((uint64_t **)v4, *v8, 0);
      ++v8;
    }
    while (v8 != v9);
LABEL_46:
    v8 = (ZinIrOpLayer **)v40;
    goto LABEL_47;
  }
  if (!ZinOneToVariablePattern::Match(*(ZinOneToVariablePattern **)(a1 + 16), v4, v5))
  {
    if (ZinManyToOnePattern::Match(*(ZinManyToOnePattern **)(a1 + 24), v4, v5))
    {
      v22 = *(_QWORD *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v40, "pe_ew");
      SingleMatch = (const ZinPELayer *)ZinPattern::GetSingleMatch(v22, (unsigned __int8 *)&v40);
      if (v42 < 0)
        operator delete(v40);
      v24 = *(_QWORD *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v40, "view0");
      v25 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v24, (unsigned __int8 *)&v40);
      if (v42 < 0)
        operator delete(v40);
      v26 = *(_QWORD *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v40, "view1");
      v27 = ZinPattern::GetSingleMatch(v26, (unsigned __int8 *)&v40);
    }
    else if (ZinManyToOnePattern::Match(*(ZinManyToOnePattern **)(a1 + 32), v4, v5))
    {
      v28 = *(_QWORD *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v40, "pe_pool");
      SingleMatch = (const ZinPELayer *)ZinPattern::GetSingleMatch(v28, (unsigned __int8 *)&v40);
      if (v42 < 0)
        operator delete(v40);
      v29 = *(_QWORD *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v40, "view0");
      v25 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v29, (unsigned __int8 *)&v40);
      if (v42 < 0)
        operator delete(v40);
      v30 = *(_QWORD *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v40, "view1");
      v27 = ZinPattern::GetSingleMatch(v30, (unsigned __int8 *)&v40);
    }
    else
    {
      if (!ZinManyToOnePattern::Match(*(ZinManyToOnePattern **)(a1 + 40), v4, v5))
        return 0;
      v31 = *(_QWORD *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v40, "pe_goc");
      SingleMatch = (const ZinPELayer *)ZinPattern::GetSingleMatch(v31, (unsigned __int8 *)&v40);
      if (v42 < 0)
        operator delete(v40);
      v32 = *(_QWORD *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v40, "view0");
      v25 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v32, (unsigned __int8 *)&v40);
      if (v42 < 0)
        operator delete(v40);
      v33 = *(_QWORD *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v40, "view1");
      v27 = ZinPattern::GetSingleMatch(v33, (unsigned __int8 *)&v40);
    }
    v34 = (const ZinIrOpLayer *)v27;
    if (v42 < 0)
    {
      operator delete(v40);
      if (!SingleMatch)
        return 0;
    }
    else if (!SingleMatch)
    {
      return 0;
    }
    GetCopyIndices(SingleMatch, v25, v34, *(const ZinIrHalParameters **)(v6 + 8), (unint64_t *)&v40);
    v8 = (ZinIrOpLayer **)v40;
    v35 = v41;
    if (v40 == v41)
      goto LABEL_47;
    do
    {
      InsertCopyBeforeLayer((uint64_t **)v4, SingleMatch, *(unsigned __int8 *)v8);
      v8 = (ZinIrOpLayer **)((char *)v8 + 1);
    }
    while (v8 != v35);
    goto LABEL_46;
  }
  v10 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_kernel_consumer");
  ZinPattern::GetMatch(v10, (unsigned __int8 *)__p, &v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v11 = (ZinIrOpLayer **)v40;
  v12 = v41;
  if (v40 != v41)
  {
    do
    {
      v13 = *v11;
      if (*v11)
      {
        v37 = 0;
        v14 = *(_QWORD *)(a1 + 16);
        std::string::basic_string[abi:ne180100]<0>(__p, "view");
        v15 = ZinPattern::GetSingleMatch(v14, (unsigned __int8 *)__p);
        v16 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
        IncomingIndex = ZinIrOpLayerGraphUtil::GetIncomingIndex(v16, v13, (const ZinIrOpLayer *)&v37, v17);
        if (v39 < 0)
          operator delete(__p[0]);
        if ((IncomingIndex & 1) == 0)
          ZinAssertImpl("GetIncomingIndex API call failed.");
        InsertCopyBeforeLayer((uint64_t **)v4, v13, v37);
        v19 = *(_QWORD *)(*((_QWORD *)v13 + 11) + 8 * v37);
        v20 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 32))(v19, 0, 0);
        if (ZinIrTensor::SetAllocationHint(v20, 2, 1))
          ZinAssertImpl("SetAllocationHint failed on copy tensor.");
      }
      ++v11;
    }
    while (v11 != v12);
    v11 = (ZinIrOpLayer **)v40;
  }
  if (v11)
  {
    v41 = v11;
    v21 = v11;
LABEL_49:
    operator delete(v21);
  }
  return 0;
}

void sub_206F12C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_206F12C84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x206F12C6CLL);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void InsertCopyBeforeLayer(uint64_t **a1, ZinIrOpLayer *a2, unint64_t a3)
{
  ZinIrOpLayer *v6;
  size_t v7;
  std::string *v8;
  char *v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  __n128 v22;
  uint64_t v23;
  int v24;
  ZinIrOpLayer *v25;
  _QWORD *v26;
  void *__p[2];
  void *v28;
  _BYTE v29[172];
  _QWORD *v30;
  std::string v31;
  void *v32[2];
  int64_t v33;
  std::string v34;
  std::string v35;
  std::string v36;
  _QWORD v37[3];
  char v38;
  std::string v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *(ZinIrOpLayer **)(*((_QWORD *)a2 + 11) + 8 * a3);
  if (*((char *)a2 + 47) >= 0)
    v7 = *((unsigned __int8 *)a2 + 47);
  else
    v7 = *((_QWORD *)a2 + 4);
  v8 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v7 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a2 + 47) >= 0)
      v9 = (char *)a2 + 24;
    else
      v9 = (char *)*((_QWORD *)a2 + 3);
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
  std::to_string(&v34, a3);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v34;
  else
    v10 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v35, (const std::string::value_type *)v10, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v39, "_", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v31, "ualign_view");
  v16 = std::string::append(&v31, "_xfm", 4uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v32 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v18 = v32;
  else
    v18 = (void **)v32[0];
  if (v33 >= 0)
    v19 = HIBYTE(v33);
  else
    v19 = (std::string::size_type)v32[1];
  v20 = std::string::append(&v36, (const std::string::value_type *)v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v28 = (void *)v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = ZinObjectNameFactory::ZinObjectNameFactory(v37, __p);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v23 = *((_QWORD *)v6 + 2);
  v24 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)v6 + 32))(v6, 0, 0, v22)+ 88);
  v30 = 0;
  v29[0] = 0;
  v29[168] = 0;
  v25 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v23, (uint64_t)v37, (uint64_t)v6, v24, &v30, 0, (uint64_t)v29, 1.0);
  v26 = v30;
  v30 = 0;
  if (v26)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v30, v26);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  v36.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v36);
  ZinIrOpLayerGraph::InsertNodeBetween(a1, v25, v6, a2, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v28 = __p[1];
    operator delete(__p[1]);
  }
  *((_BYTE *)v25 + 440) = 1;
  v37[0] = off_24C01FBB0;
  if (v38 < 0)
    operator delete((void *)v37[1]);
}

void sub_206F13008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v47 - 136) = off_24C01FBB0;
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  _Unwind_Resume(exception_object);
}

void sub_206F13120()
{
  JUMPOUT(0x206F13118);
}

void ZinMirInsertCopyForInputView::Run()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "TraverseForward failed during copy insertion for unaligned input views.\n", v0, 2u);
}

uint64_t GetSlices(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v16;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;

  if (a1 == a4)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      GetSlices(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  else
  {
    v16 = a2;
    v18 = a1 - a4;
    v19 = -(int)a3;
    a6[1] = *a6;
    v20 = a5 + a2;
    v21 = ZinDivRoundUp(a5 + a2 + a3, a1);
    std::vector<ZinIrOpLayer *>::reserve((void **)a6, v21);
    v22 = a6 + 2;
    v23 = a6[1];
    do
    {
      v24 = (v19 & (v19 >> 31)) + a1;
      v25 = v19 & ~(v19 >> 31);
      if (v16 - (int)v25 >= (int)v24)
        v26 = v24;
      else
        v26 = (v16 - v25);
      if ((unint64_t)v23 >= *v22)
      {
        v27 = (v23 - *a6) >> 3;
        if ((unint64_t)(v27 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v28 = *v22 - (_QWORD)*a6;
        v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v30);
        else
          v31 = 0;
        v32 = &v31[8 * v27];
        *(_QWORD *)v32 = v26 | (v25 << 32);
        v23 = v32 + 8;
        v34 = *a6;
        v33 = a6[1];
        if (v33 != *a6)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
          v33 = *a6;
        }
        *a6 = v32;
        a6[1] = v23;
        a6[2] = &v31[8 * v30];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v23 = v26 | (v25 << 32);
        v23 += 8;
      }
      v36 = a1 + v19;
      a6[1] = v23;
      v19 += v18;
    }
    while (v36 < v20);
    return 0;
  }
}

double ComputeSpatialUtilization(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v1 = (_QWORD *)*a1;
  v2 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 == v2)
    return -1.0;
  v3 = 0;
  v4 = 0;
  do
  {
    v3 += v1[3] * v1[2];
    v4 += v1[9] * v1[8];
    v1 += 10;
  }
  while (v1 != v2);
  return fmin((double)v4 / (double)v3, 1.0);
}

uint64_t PERasterization::ComputeWUShape(ZinOpLayerUtils *a1, const ZinIrOpLayer *a2, _QWORD *a3, int *a4, uint64_t a5, int *a6, int a7, int a8)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const ZinIrOpLayer *v19;
  const ZinIrOpLayer *v20;
  int v21;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (ZinOpLayerUtils::IsPEPool(a1, a2))
  {
    v15 = *(_QWORD *)(*((_QWORD *)a1 + 54) + 64);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(int *)(v15 + 40);
    v24 = *(int *)(v15 + 44);
    v25 = *(_QWORD *)(v15 + 24);
    v18 = *(int *)(v15 + 64);
  }
  else
  {
    v16 = 1;
    v25 = 1;
    v17 = 1;
    v24 = 1;
    v18 = 1;
  }
  v27 = 0;
  v28 = 0;
  ZinTensorFormatGetSize(*a4, &v28);
  ZinTensorFormatGetSize(*a6, &v27);
  if ((a8 & 1) == 0)
  {
    if (IsFp16(*a4)
      || !ZinOpLayerUtils::HasReductionLayer(a1, v19) && IsFp16(*a6)
      || (v21 = *(unsigned __int8 *)(a5 + 4), !ZinOpLayerUtils::IsPEDynamicGOC(a1, v20)) && v21 && IsFp16(*(_DWORD *)a5))
    {
      if (v27 == 1)
        return 64;
    }
  }
  if (a7 && v16 >= 5 && v17 == 2 && v18 == 2 && v28 == 2)
    return 64;
  if (a7)
  {
    if (v25 <= 3 && v24 == 1)
      v23 = a3 + 117;
    else
      v23 = a3 + 118;
  }
  else
  {
    v23 = a3 + 115;
    if (a8)
      v23 = a3 + 116;
  }
  if (*v23 >= (unint64_t)a2)
    return 16;
  else
    return 64;
}

uint64_t PERasterization::IsHalfWU(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _BOOL4 v10;
  int64_t v11;
  int v12;
  _BOOL4 v14;
  int v15;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v23;
  _BOOL4 HasDimension;
  int v25;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = 1;
  if (ZinTensorFormatGetSize(a2, &v32))
    return 0;
  v31 = 1;
  if (ZinTensorFormatGetSize(a4, &v31))
    return 0;
  v30 = 1;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (ZinTensorFormatGetSize(a3, &v30))
      return 0;
  }
  v10 = *(_DWORD *)(a1[8] + 8) == 81 && a1[63] != 0;
  (*(void (**)(_BYTE **__return_ptr, _QWORD *))(*a1 + 512))(&v28, a1);
  v11 = v29 - v28;
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v12 = *(_DWORD *)(a1[8] + 8);
  v14 = v12 != 83 || v11 == 8;
  v15 = v12 == 84 && a1[55] != 0;
  if (!*(_BYTE *)(a5 + 1137))
  {
    (*(void (**)(_BYTE **__return_ptr, _QWORD *))(*a1 + 512))(&v28, a1);
    v21 = v29 - v28 == 16;
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if (v32 != 2 && (v31 != 2 || v10))
    {
      if (v30 == 2)
        return v21 & ~v15 & v14;
      else
        return 0;
    }
    return 1;
  }
  v17 = v12 == 83 && v11 == 8;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 656))(a1))
  {
    v18 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 696))(a1) + 64);
    v19 = !ZinIrBroadcastInfo::HasDimension(v18, 4);
    v20 = !ZinIrBroadcastInfo::HasDimension(v18, 3);
  }
  else
  {
    v19 = 1;
    v20 = 1;
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 664))(a1))
  {
    v23 = (*(uint64_t (**)(_QWORD *))(*a1 + 832))(a1);
    HasDimension = ZinIrBroadcastInfo::HasDimension(v23, 4);
    v25 = HasDimension & ZinIrBroadcastInfo::HasDimension(v23, 3) ^ 1;
  }
  else
  {
    v25 = 1;
  }
  if (v32 == 2 && (v17 || v19 || !v14 || v20))
    return 1;
  if (v31 == 2 && !v10)
    return 1;
  v27 = (v30 == 2) & ~(_BYTE)v15 & v14;
  if (v11 == 8)
    v27 = 0;
  return v27 & v25;
}

uint64_t PERasterization::GetWorkunitSize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[33] + 120;
  v5 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v4, 0);
  v6 = *(unsigned int *)ZinMirL2Config::GetTileSrc(v4, 1);
  v7 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  return *(_QWORD *)(a2 + 600) >> PERasterization::IsHalfWU(a1, v5, v6 | 0x100000000, *(_DWORD *)(v7 + 88), a2);
}

int64x2_t PERasterization::ComputeL2FetchRequest@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int64x2_t *a5@<X8>)
{
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  int64x2_t result;

  v5 = a1[1];
  v7 = a4 == 1 && a3 == 0 && a2 == 1;
  v8 = 1;
  if (!v7)
    v8 = 2;
  if (*a1 == 16 && v5 == 4)
    v10 = v8;
  else
    v10 = 4;
  a5->i64[0] = v10;
  a5->i64[1] = v5;
  result = vdupq_n_s64(1uLL);
  a5[1] = result;
  return result;
}

int64x2_t PERasterization::ComputeL2WBRequest@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X6>, int64x2_t *a3@<X8>)
{
  uint64_t v3;
  int64x2_t result;

  v3 = a1[1];
  a3->i64[0] = *a1 / *(_QWORD *)(a2 + 416);
  a3->i64[1] = v3;
  result = vdupq_n_s64(1uLL);
  a3[1] = result;
  return result;
}

uint64_t *PERasterization::GetWUFrequency@<X0>(PERasterization *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  const ZinIrOpLayer *v16;
  int v17;
  _BOOL4 IsPEPool;
  const ZinIrOpLayer *v19;
  uint64_t *result;
  int v21;
  const ZinIrOpLayer *v22;
  char v23;
  uint64_t Hal;
  _QWORD *v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  int v44;
  unint64_t *v45;
  uint64_t *v46;
  unint64_t v47;

  *(_QWORD *)(a2 + 8) = 0;
  v5 = (uint64_t *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v6 = *((_QWORD *)this + 33);
  v7 = *(_DWORD *)(v6 + 240);
  LODWORD(v8) = *(_DWORD *)(v6 + 248);
  v9 = (*(uint64_t (**)(PERasterization *, uint64_t))(*(_QWORD *)this + 368))(this, 4);
  v10 = (*(uint64_t (**)(PERasterization *, uint64_t))(*(_QWORD *)this + 368))(this, 3);
  (*(void (**)(unint64_t **__return_ptr, PERasterization *))(*(_QWORD *)this + 512))(&v45, this);
  v12 = (uint64_t *)v45;
  v11 = v46;
  if (v45)
  {
    v46 = (uint64_t *)v45;
    operator delete(v45);
  }
  v13 = *((_QWORD *)this + 33) + 120;
  v44 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v13, 0);
  if ((unint64_t)((char *)v11 - (char *)v12) < 9)
  {
    v14 = 0;
    LOBYTE(v42) = 0;
  }
  else
  {
    v42 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v13, 1);
    v14 = 1;
  }
  v43 = v14;
  v15 = *(_DWORD *)((*(uint64_t (**)(PERasterization *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 88);
  if (IsFormatDMAConvertibleToFP16(v15))
    v17 = 3;
  else
    v17 = v15;
  v41 = v17;
  IsPEPool = ZinOpLayerUtils::IsPEPool(this, v16);
  result = (uint64_t *)ZinOpLayerUtils::HasReductionLayer(this, v19);
  v21 = (int)result;
  v22 = (const ZinIrOpLayer *)(1 << v7);
  if (v9 >= (unint64_t)v22)
  {
    v40 = v10;
    v23 = v8;
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
    v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    v8 = PERasterization::ComputeWUShape(this, v22, v25, &v44, (uint64_t)&v42, &v41, IsPEPool, v21);
    v47 = (unint64_t)v26 << 16;
    v45 = &v47;
    result = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a2, &v47, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
    result[5] += ((unint64_t)v22 + v8 - 1) / v8 * (v9 / (unint64_t)v22);
    LOBYTE(v8) = v23;
    v10 = v40;
  }
  v27 = v9 % (unint64_t)v22;
  if (v27)
  {
    v28 = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
    v29 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    v30 = PERasterization::ComputeWUShape(this, (const ZinIrOpLayer *)v27, v29, &v44, (uint64_t)&v42, &v41, IsPEPool, v21);
    v47 = (unint64_t)v31 << 16;
    v45 = &v47;
    result = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a2, &v47, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
    result[5] += (v27 + v30 - 1) / v30;
  }
  v32 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 != v5)
  {
    v33 = 1 << v8;
    v34 = v33 - 1;
    v35 = (v33 - 1 + v10) / v33;
    do
    {
      v36 = v32[4];
      v45 = (unint64_t *)(v32 + 4);
      result = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)v32 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
      result[5] *= v35 * ((v34 + BYTE2(v36)) / BYTE2(v36));
      v37 = (uint64_t *)v32[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (uint64_t *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (uint64_t *)v32[2];
          v39 = *v38 == (_QWORD)v32;
          v32 = v38;
        }
        while (!v39);
      }
      v32 = v38;
    }
    while (v38 != v5);
  }
  return result;
}

void sub_206F13BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

unint64_t PERasterization::RasterizePEPatches@<X0>(unint64_t this@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unint64_t **v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;

  v41 = this;
  v8 = (unint64_t **)a8;
  v9 = 0;
  v10 = 0;
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v11 = a8 + 2;
  v12 = 1 << a3;
  v13 = 1 << a4;
  v42 = a8 + 2;
  v37 = a2;
  do
  {
    v14 = a6;
    if (v10)
      v14 = 0;
    v15 = a5 - v14;
    if (a2 - v10 >= v15)
      v16 = v15;
    else
      v16 = a2 - v10;
    if (this)
    {
      v17 = 0;
      v43 = v16;
      do
      {
        v18 = this - v17;
        if (this - v17 >= v12)
          v18 = v12;
        v44 = v18;
        if (v16)
        {
          for (i = 0; i < v16; i += v20)
          {
            if (v16 - i >= v13)
              v20 = v13;
            else
              v20 = v16 - i;
            v21 = i + v10;
            if ((unint64_t)v9 >= *v11)
            {
              v22 = v10;
              v23 = v12;
              v24 = v8;
              v25 = *v8;
              v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)*v8) >> 4);
              v27 = v26 + 1;
              if (v26 + 1 > 0x333333333333333)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(*v11 - (_QWORD)v25) >> 4) > v27)
                v27 = 0x999999999999999ALL * ((uint64_t)(*v11 - (_QWORD)v25) >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v11 - (_QWORD)v25) >> 4) >= 0x199999999999999)
                v28 = 0x333333333333333;
              else
                v28 = v27;
              if (v28)
              {
                v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v11, v28);
                v25 = *v24;
                v9 = v24[1];
              }
              else
              {
                v29 = 0;
              }
              v30 = &v29[80 * v26];
              *(_QWORD *)v30 = v17;
              *((_QWORD *)v30 + 1) = v21;
              *((_QWORD *)v30 + 2) = v13;
              *((_QWORD *)v30 + 3) = v23;
              v12 = v23;
              v10 = v22;
              *((_QWORD *)v30 + 4) = v22;
              *((_QWORD *)v30 + 5) = v43;
              *((_QWORD *)v30 + 6) = 0;
              *((_DWORD *)v30 + 14) = 0;
              *((_QWORD *)v30 + 8) = v44;
              *((_QWORD *)v30 + 9) = v20;
              if (v9 == v25)
              {
                v35 = v30;
              }
              else
              {
                v31 = v30;
                do
                {
                  *((_OWORD *)v31 - 5) = *((_OWORD *)v9 - 5);
                  v32 = *((_OWORD *)v9 - 4);
                  v33 = *((_OWORD *)v9 - 3);
                  v34 = *((_OWORD *)v9 - 1);
                  v35 = v31 - 80;
                  *((_OWORD *)v31 - 2) = *((_OWORD *)v9 - 2);
                  *((_OWORD *)v31 - 1) = v34;
                  *((_OWORD *)v31 - 4) = v32;
                  *((_OWORD *)v31 - 3) = v33;
                  v9 -= 10;
                  v31 -= 80;
                }
                while (v9 != v25);
              }
              v9 = (unint64_t *)(v30 + 80);
              *v24 = (unint64_t *)v35;
              v24[1] = (unint64_t *)(v30 + 80);
              v24[2] = (unint64_t *)&v29[80 * v28];
              if (v25)
                operator delete(v25);
              v11 = v42;
              v16 = v43;
              v8 = v24;
            }
            else
            {
              *v9 = v17;
              v9[1] = v21;
              v9[2] = v13;
              v9[3] = v12;
              v9[4] = v10;
              v9[5] = v16;
              v9[6] = 0;
              *((_DWORD *)v9 + 14) = 0;
              v9[8] = v44;
              v9[9] = v20;
              v9 += 10;
            }
            v8[1] = v9;
          }
        }
        v17 += v44;
        this = v41;
      }
      while (v17 < v41);
    }
    v36 = v16 + v10;
    a2 = v37;
    v10 = v16 + v10 - a7;
  }
  while (v36 != v37);
  return this;
}

void sub_206F13E54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NERasterization::ComputeL2FetchRequest@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X5>, unint64_t *a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = *(_QWORD *)(result + 8);
  v7 = a5[74] / v6;
  v8 = a5[54];
  if (v8 >= v7)
    v8 = a5[74] / v6;
  v9 = a5[52];
  v10 = v8 / v9;
  v11 = v6 >> 1;
  if (v6 == 1)
    v11 = 1;
  if (a4)
    v12 = v10 + 1;
  else
    v12 = v10;
  *a6 = v12;
  a6[1] = v11;
  a6[2] = v7 / (v10 * v9) * a2 * (v6 / v11);
  a6[3] = a3;
  return result;
}

uint64_t NERasterization::ComputeL2WBRequest@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = *(_QWORD *)(result + 8);
  v9 = a5 * a2 * (a4 / a6 / v8);
  v10 = *(_QWORD *)(a7 + 416);
  v11 = *(_QWORD *)(a7 + 440);
  if (v9 <= v10)
  {
    v13 = 1;
  }
  else
  {
    if (v11 >= v9)
      v12 = a5 * a2 * (a4 / a6 / v8);
    else
      v12 = *(_QWORD *)(a7 + 440);
    v13 = v12 / v10;
  }
  v14 = v8 * a3;
  v15 = v11 / (v13 * v10);
  if (v14 < v15)
    v15 = v14;
  v16 = v9 / v13 * v10;
  if (v16 <= 1)
    v16 = 1;
  *a8 = v13;
  a8[1] = v15;
  a8[2] = v16 * (v14 / v15);
  a8[3] = 1;
  return result;
}

uint64_t NERasterization::RasterizeWorkUnit(uint64_t a1, void **a2, _QWORD *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, int a8, unint64_t a9, uint64_t a10, unsigned int a11, int a12, char a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,char a21)
{
  char v26;
  _BOOL4 v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unsigned __int8 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _BOOL8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v127;
  unint64_t v128;
  int *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  void **v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  BOOL v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  unint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  int *v164;
  char v165;
  uint64_t v166;
  unint64_t v169;
  unint64_t v170;
  int v171;
  unint64_t v172;
  int v173;
  uint64_t v175;
  unint64_t v176;
  int *v177;
  _QWORD *v178;
  unint64_t v179;
  BOOL v180;
  BOOL v181;
  _BOOL4 v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unint64_t *v191;

  v26 = IsFormatDMAConvertibleToFP16(a11);
  if (a11 == 3 || (v26 & 1) == 0)
  {
    if (!a7)
    {
      v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v36)
        NERasterization::RasterizeWorkUnit(v36, v37, v38, v39, v40, v41, v42, v43);
      return 3;
    }
    if (a8)
    {
      if (a4 != a5 || a4 != a6)
      {
        v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v53)
          NERasterization::RasterizeWorkUnit(v53, v54, v55, v56, v57, v58, v59, v60);
        return 3;
      }
      v27 = a8 == 3;
      if (a4 != 6 && a8 == 3)
      {
        v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v28)
          NERasterization::RasterizeWorkUnit(v28, v29, v30, v31, v32, v33, v34, v35);
        return 3;
      }
      v44 = a8 == 4;
      if (a4 != 10 && a8 == 4)
      {
        v70 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v70)
          NERasterization::RasterizeWorkUnit(v70, v71, v72, v73, v74, v75, v76, v77);
        return 3;
      }
    }
    else
    {
      v44 = 0;
      v27 = 0;
    }
    v175 = 1 << a14;
    if (*(_BYTE *)(a16 + 1585))
    {
      if (1 << a14 > (1 << *(_DWORD *)(a16 + 2112)))
      {
        v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v45)
          NERasterization::RasterizeWorkUnit(v45, v46, v47, v48, v49, v50, v51, v52);
        return 3;
      }
    }
    else if (a14 + a15)
    {
      v78 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v78)
        NERasterization::RasterizeWorkUnit(v78, v79, v80, v81, v82, v83, v84, v85);
      return 3;
    }
    if (a13)
    {
      if (a8 && a8 != 3)
      {
        v94 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v94)
          NERasterization::RasterizeWorkUnit(v94, v95, v96, v97, v98, v99, v100, v101);
        return 3;
      }
      v61 = *(_QWORD *)(a16 + 664);
      if (v61 < a6 || v61 < a4)
      {
        v86 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v86)
          NERasterization::RasterizeWorkUnit(v86, v87, v88, v89, v90, v91, v92, v93);
        return 3;
      }
      if (a11 == 3)
      {
        v62 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v62)
          NERasterization::RasterizeWorkUnit(v62, v63, v64, v65, v66, v67, v68, v69);
        return 3;
      }
      if (a14 || a15)
      {
        v118 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v118)
          NERasterization::RasterizeWorkUnit(v118, v119, v120, v121, v122, v123, v124, v125);
        return 3;
      }
    }
    v182 = v44;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    a2[1] = *a2;
    *a3 = 0;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v102 = 1 << a14;
    if (GetSlices(a7, a10, a17, a18, a19, &v188))
    {
      v103 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v103)
        NERasterization::RasterizeWorkUnit(v103, v104, v105, v106, v107, v108, v109, v110);
      v111 = 3;
      goto LABEL_120;
    }
    v112 = IsFp16(a11);
    v113 = v112;
    if ((a8 - 1) <= 1)
    {
      v114 = a15;
      if (a4 == 16)
      {
        v186 = 8;
        v115 = 8;
      }
      else
      {
        v115 = a4;
        v186 = *(_QWORD *)(a16 + 784) / a4;
      }
      goto LABEL_60;
    }
    if (v182)
    {
      v116 = *(_QWORD *)(a16 + 1168);
      v186 = v116 >> v112;
      v117 = *(_QWORD *)(a16 + 824);
    }
    else
    {
      if (!v27)
      {
        v186 = (*(_QWORD *)(a16 + 592) / a4) >> v112 >> a13;
        v115 = a4;
        goto LABEL_59;
      }
      v116 = *(_QWORD *)(a16 + 1184);
      v186 = v116 >> v112 >> a13;
      v117 = *(_QWORD *)(a16 + 824);
    }
    v115 = v117 / v116;
LABEL_59:
    v114 = a15;
LABEL_60:
    if (a20)
    {
      v127 = ZinDivRoundUp(a9 << v112, v186);
      v128 = ZinDivRoundUp(a10, v115);
      std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(a2, v128 * v127);
    }
    v129 = (int *)v188;
    v164 = (int *)v189;
    if (v188 == v189)
    {
      v111 = 0;
      if (!v188)
        return v111;
      goto LABEL_121;
    }
    v130 = v115;
    v163 = a4;
    v171 = a8;
    if (v113)
      v131 = 8;
    else
      v131 = 16;
    v132 = a2 + 2;
    v165 = v113;
    v178 = a2 + 2;
    v169 = v131;
    v170 = a6;
    do
    {
      v133 = *v129;
      if (!a8)
      {
        v134 = v163;
        do
        {
          v130 = v134;
          if (v134 <= a5)
            break;
          v134 >>= 1;
        }
        while (v130 * v102 > v133);
      }
      if (a9)
      {
        v185 = 0;
        v172 = v133 - 1;
        v166 = (v133 & 0xFFFFFF) << 24;
        v135 = a20;
        if (!(_DWORD)v133)
          v135 = 0;
        v173 = v135;
        v177 = v129;
        v179 = *v129;
        do
        {
          if (a8)
          {
            if (a9 - v185 >= v186)
              v136 = v186;
            else
              v136 = a9 - v185;
          }
          else
          {
            v186 = (*(_QWORD *)(a16 + 592) / v130) >> v165 >> a13;
            v137 = v186 << v114;
            v138 = a9 - v185;
            if (a9 - v185 >= v186 << v114)
              v136 = v186 << v114;
            else
              v136 = a9 - v185;
            for (; v137 > v138; v136 = v138 >= v186 << v114 ? v186 << v114 : a9 - v185)
            {
              if (v137 - v136 < v131 || v130 >= a6 || *(_QWORD *)(a16 + 1152) * v102 * v130 > v133)
                break;
              v130 *= 2;
              v186 >>= 1;
              v137 = v186 << v114;
            }
          }
          v176 = v186 << v114;
          v184 = v130;
          if (v173)
          {
            v139 = 0;
            v140 = a9 - v185;
            if (a9 - v185 >= v186)
              v140 = v186;
            v183 = v140;
            v181 = v185 == 0;
            v141 = v130 * v175;
            v180 = v176 + v185 >= a9;
            v142 = (char *)a2[1];
            do
            {
              v143 = a2;
              if (v133 - v139 >= v130)
                v144 = v130;
              else
                v144 = v133 - v139;
              v145 = v129[1];
              v146 = v139 + v145;
              v147 = v139 == 0;
              v148 = v139 + v145 + v141 >= v145 + v133;
              if ((unint64_t)v142 >= *v132)
              {
                v149 = 0xCCCCCCCCCCCCCCCDLL * ((v142 - (_BYTE *)*v143) >> 4);
                v150 = v149 + 1;
                if (v149 + 1 > 0x333333333333333)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v151 = v136;
                if (0x999999999999999ALL * ((uint64_t)(*v132 - (_QWORD)*v143) >> 4) > v150)
                  v150 = 0x999999999999999ALL * ((uint64_t)(*v132 - (_QWORD)*v143) >> 4);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v132 - (_QWORD)*v143) >> 4) >= 0x199999999999999)
                  v152 = 0x333333333333333;
                else
                  v152 = v150;
                if (v152)
                {
                  v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v132, v152);
                  v132 = v178;
                }
                else
                {
                  v153 = 0;
                }
                v154 = &v153[80 * v149];
                *(_QWORD *)v154 = v185;
                *((_QWORD *)v154 + 1) = v146;
                *((_QWORD *)v154 + 2) = v184;
                *((_QWORD *)v154 + 3) = v186;
                *((_QWORD *)v154 + 4) = v145;
                *((_QWORD *)v154 + 5) = v179;
                *((_QWORD *)v154 + 6) = v151;
                v154[56] = v147;
                v154[57] = v181;
                v154[58] = v148;
                v154[59] = v180;
                *((_DWORD *)v154 + 15) = 0;
                *((_QWORD *)v154 + 8) = v183;
                *((_QWORD *)v154 + 9) = v144;
                a2 = v143;
                v156 = (char *)*v143;
                v155 = (char *)v143[1];
                v157 = v154;
                if (v155 != *v143)
                {
                  do
                  {
                    *((_OWORD *)v157 - 5) = *((_OWORD *)v155 - 5);
                    v158 = *((_OWORD *)v155 - 4);
                    v159 = *((_OWORD *)v155 - 3);
                    v160 = *((_OWORD *)v155 - 1);
                    *((_OWORD *)v157 - 2) = *((_OWORD *)v155 - 2);
                    *((_OWORD *)v157 - 1) = v160;
                    *((_OWORD *)v157 - 4) = v158;
                    *((_OWORD *)v157 - 3) = v159;
                    v157 -= 80;
                    v155 -= 80;
                  }
                  while (v155 != v156);
                  v155 = (char *)*v143;
                }
                v142 = v154 + 80;
                *v143 = v157;
                v143[1] = v154 + 80;
                v143[2] = &v153[80 * v152];
                if (v155)
                {
                  operator delete(v155);
                  v132 = v178;
                }
                v130 = v184;
                v129 = v177;
                v136 = v151;
                v133 = v179;
              }
              else
              {
                *(_QWORD *)v142 = v185;
                *((_QWORD *)v142 + 1) = v146;
                *((_QWORD *)v142 + 2) = v130;
                *((_QWORD *)v142 + 3) = v186;
                *((_QWORD *)v142 + 4) = v145;
                *((_QWORD *)v142 + 5) = v133;
                *((_QWORD *)v142 + 6) = v136;
                v142[56] = v147;
                v142[57] = v181;
                v142[58] = v148;
                v142[59] = v180;
                *((_DWORD *)v142 + 15) = 0;
                *((_QWORD *)v142 + 8) = v183;
                *((_QWORD *)v142 + 9) = v144;
                v142 += 80;
                a2 = v143;
              }
              a2[1] = v142;
              v139 += v141;
            }
            while (v139 < v133);
          }
          v102 = 1 << a14;
          v161 = (v172 + v130 * v175) / (v130 * v175);
          a8 = v171;
          if (a21)
          {
            v187 = v166 | ((unint64_t)v130 << 16) | (v136 << 48) | (unsigned __int16)v186;
            v191 = &v187;
            v162 = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a1, &v187, (uint64_t)&std::piecewise_construct, (uint64_t **)&v191);
            v162[5] += v161;
            v130 = v184;
            v129 = v177;
            v132 = v178;
          }
          *a3 += v161;
          v185 += v176;
          v131 = v169;
          a6 = v170;
          v114 = a15;
        }
        while (v185 < a9);
      }
      v129 += 2;
    }
    while (v129 != v164);
    v111 = 0;
LABEL_120:
    v129 = (int *)v188;
    if (!v188)
      return v111;
LABEL_121:
    v189 = (char *)v129;
    operator delete(v129);
    return v111;
  }
  return 3;
}

void sub_206F147D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void NERasterization::GetWUFrequency(NERasterization *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t Hal;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  ZinIrTarget *ChannelAssignment;
  uint64_t Lut;
  MirInfoChannelAssignment *v16;
  unsigned __int8 FatTileEnable;
  int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v21 = (*(uint64_t (**)(NERasterization *, uint64_t))(*(_QWORD *)this + 368))(this, 3);
  v20 = (*(uint64_t (**)(NERasterization *, uint64_t))(*(_QWORD *)this + 368))(this, 4);
  v5 = *((_QWORD *)this + 33);
  v19 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v5 + 120, 0);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v9 = *(_QWORD *)(v5 + 128);
  v8 = *(_QWORD *)(v5 + 136);
  v10 = *(_QWORD *)(v5 + 120);
  v11 = *(_QWORD *)(v5 + 200);
  v12 = *(_DWORD *)(v5 + 144);
  v13 = *(_BYTE *)(v5 + 149);
  ChannelAssignment = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v5);
  Lut = ZinIrTarget::GetLut(ChannelAssignment);
  v16 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v5);
  FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v16);
  v22 = 0;
  NERasterization::RasterizeWorkUnit((uint64_t)a2, &v23, &v22, v8, v10, v9, v11, v12, v20, v21, v19, v18, v13, Lut, FatTileEnable, v7, *(_QWORD *)(v5 + 216), *(_QWORD *)(v5 + 208), *(_QWORD *)(v5 + 224),
    0,
    1);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_206F14960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 104);
  if (v4)
  {
    *(_QWORD *)(v2 - 96) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t NERasterization::GetWUCost(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned int a11, uint64_t a12)
{
  uint64_t v12;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[2];

  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  NERasterization::RasterizeWorkUnit((uint64_t)&v19, &v16, &v15, a1, a2, a3, a4, a5, a7, a8, a11, v14, a6, a9, a10, a12, 0, 0, 0,
    0,
    0);
  v12 = v15;
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v19, v20[0]);
  return v12;
}

void sub_206F14A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(_QWORD *)(v1 - 56) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 40, *(_QWORD **)(v1 - 32));
  _Unwind_Resume(a1);
}

BOOL NERasterization::CanUseFlexibleWUShapeInSSM(NERasterization *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  int v4;
  int v5;
  _BOOL4 v7;
  _BOOL8 v10;
  uint64_t v13[10];
  int v14;
  char v15;
  _QWORD v16[3];

  v4 = *((unsigned __int8 *)a2 + 1145);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 328))(v16);
  v7 = (*(uint64_t (**)(NERasterization *))(*(_QWORD *)this + 344))(this) == 0x100000001 && v5 == 1;
  v10 = v16[0] == 1 && v16[1] == 1 && v4 != 0 && v7;
  (*(void (**)(uint64_t *__return_ptr, NERasterization *))(*(_QWORD *)this + 136))(v13, this);
  if (v15)
    return v14 != 3 && v14 != 6 && v10;
  return v10;
}

uint64_t NERasterization::CanUseNonPowerOf2WUs(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  int v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  int v10;
  ZinEngineLayerMirInfo *v11;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v13;
  _QWORD v14[10];
  int v15;
  char v16;

  if (!*(_BYTE *)(a2 + 1146))
    return 0;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 344))(a1) == 0x100000001 && v5 == 1;
  if (!v6 || ((*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1) & 1) != 0)
    return 0;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*a1 + 136))(v14, a1);
  if (!v16 || (result = 0, v15 != 3) && v15 != 6)
  {
    v8 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0) + 88);
    if (IsFormatDMAConvertibleToFP16(a3))
      a3 = 3;
    v9 = IsFormatDMAConvertibleToFP16(v8);
    if (v8 == 3)
      v10 = 1;
    else
      v10 = v9;
    if (v10 != (a3 != 3))
    {
      v11 = (ZinEngineLayerMirInfo *)a1[33];
      if (!v11)
        return 1;
      ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v11);
      if ((MirInfoChannelAssignment::GetFatTileEnable(ChannelAssignment) & 1) == 0)
      {
        v13 = a1[33];
        if (!v13 || !*(_BYTE *)(v13 + 148) || a3 - 1 <= 1)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

void NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, void **a5, unint64_t a6, unsigned __int8 a7)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  int64_t v15;
  uint64_t v16;
  MirInfoChannelAssignment *ChannelAssignment;
  _BOOL4 IsMulticastEnabled;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  ZinEngineLayerMirInfo *v55;
  char v56;
  MirInfoChannelAssignment *v57;
  char FatTileEnable;
  ZinIrTarget *v59;
  uint64_t Lut;
  unint64_t v61;
  unint64_t v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v82;
  char v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  _QWORD v88[3];
  unint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 668))
    return;
  v84 = a7;
  v90 = 0;
  ZinTensorFormatGetSize(a3, &v90);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 328))(v88, a1);
  v12 = v88[0];
  v13 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(v88, a1);
  v85 = v88[2];
  v79 = v89;
  v80 = v88[1];
  v14 = (double)((v12 - 1) / v13);
  v15 = v90 * v89;
  v16 = (v89 + (uint64_t)v14) * v90;
  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  IsMulticastEnabled = MirInfoChannelAssignment::IsMulticastEnabled(ChannelAssignment);
  v19 = ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  v20 = 0;
  v91 = *(_OWORD *)v19;
  v82 = *(_QWORD *)(v19 + 24);
  v92 = *(_QWORD *)(v19 + 16);
  v83 = *(_BYTE *)(v19 + 32);
  if ((unint64_t)v15 <= a2[145])
  {
    v21 = 0;
LABEL_13:
    if (IsMulticastEnabled)
      goto LABEL_30;
    goto LABEL_32;
  }
  v21 = 0;
  if ((unint64_t)v16 > a2[146])
    goto LABEL_13;
  if (v84)
    v20 = a6;
  else
    v20 = v85;
  if (IsMulticastEnabled && *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) == 85)
  {
    v21 = 10;
    if ((NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(ZinNELayer const*,ZinIrHalParameters const&,ZinTensorFormat,ZinTensorDimensions const&,std::vector<ZinMirWorkUnitShapeCandidate> &,std::optional<unsigned long>)::$_0::operator()((_QWORD *)a1, 10, 10, 10, v20, 4, a3) & 1) != 0)goto LABEL_30;
  }
  v22 = (char *)a5[2];
  v23 = (char *)a5[1];
  if (v23 >= v22)
  {
    v25 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (_BYTE *)*a5) >> 4);
    v26 = v25 + 1;
    if (v25 + 1 > 0x333333333333333)
      goto LABEL_79;
    v27 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)*a5) >> 4);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x199999999999999)
      v28 = 0x333333333333333;
    else
      v28 = v26;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a5 + 2), v28);
    else
      v29 = 0;
    v30 = &v29[80 * v25];
    v31 = &v29[80 * v28];
    v32 = v92;
    *(_OWORD *)v30 = v91;
    *((_QWORD *)v30 + 2) = v32;
    *((_QWORD *)v30 + 3) = v82;
    v30[32] = v83;
    *(int64x2_t *)(v30 + 40) = vdupq_n_s64(0xAuLL);
    *((_QWORD *)v30 + 7) = 10;
    *((_QWORD *)v30 + 8) = v20;
    *((_DWORD *)v30 + 18) = 4;
    *((_WORD *)v30 + 38) = 256;
    v24 = v30 + 80;
    v34 = (char *)*a5;
    v33 = (char *)a5[1];
    if (v33 != *a5)
    {
      do
      {
        *((_OWORD *)v30 - 5) = *((_OWORD *)v33 - 5);
        v35 = *((_OWORD *)v33 - 4);
        v36 = *((_OWORD *)v33 - 3);
        v37 = *((_OWORD *)v33 - 2);
        *(_OWORD *)(v30 - 18) = *(_OWORD *)(v33 - 18);
        *((_OWORD *)v30 - 3) = v36;
        *((_OWORD *)v30 - 2) = v37;
        *((_OWORD *)v30 - 4) = v35;
        v30 -= 80;
        v33 -= 80;
      }
      while (v33 != v34);
      v33 = (char *)*a5;
    }
    *a5 = v30;
    a5[1] = v24;
    a5[2] = v31;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *(_OWORD *)v23 = v91;
    *((_QWORD *)v23 + 2) = v92;
    *((_QWORD *)v23 + 3) = v82;
    v23[32] = v83;
    *(int64x2_t *)(v23 + 40) = vdupq_n_s64(0xAuLL);
    *((_QWORD *)v23 + 7) = 10;
    *((_QWORD *)v23 + 8) = v20;
    *((_DWORD *)v23 + 18) = 4;
    *((_WORD *)v23 + 38) = 256;
    v24 = v23 + 80;
  }
  a5[1] = v24;
  v21 = 10;
  if (IsMulticastEnabled)
  {
LABEL_30:
    if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) == 85
      && (NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(ZinNELayer const*,ZinIrHalParameters const&,ZinTensorFormat,ZinTensorDimensions const&,std::vector<ZinMirWorkUnitShapeCandidate> &,std::optional<unsigned long>)::$_0::operator()((_QWORD *)a1, 6, 6, 6, v20, 3, a3) & 1) != 0)
    {
      return;
    }
  }
LABEL_32:
  if (v15 > a2[147] && v16 <= a2[148])
  {
    if (v84)
      v38 = a6;
    else
      v38 = v85;
    v39 = (char *)a5[2];
    v40 = (char *)a5[1];
    if (v40 >= v39)
    {
      v42 = 0xCCCCCCCCCCCCCCCDLL * ((v40 - (_BYTE *)*a5) >> 4);
      v43 = v42 + 1;
      if (v42 + 1 > 0x333333333333333)
        goto LABEL_79;
      v44 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (_BYTE *)*a5) >> 4);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x199999999999999)
        v45 = 0x333333333333333;
      else
        v45 = v43;
      if (v45)
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a5 + 2), v45);
      else
        v46 = 0;
      v47 = &v46[80 * v42];
      v48 = &v46[80 * v45];
      v49 = v92;
      *(_OWORD *)v47 = v91;
      *((_QWORD *)v47 + 2) = v49;
      *((_QWORD *)v47 + 3) = v82;
      v47[32] = v83;
      *(int64x2_t *)(v47 + 40) = vdupq_n_s64(6uLL);
      *((_QWORD *)v47 + 7) = 6;
      *((_QWORD *)v47 + 8) = v38;
      *((_DWORD *)v47 + 18) = 3;
      *((_WORD *)v47 + 38) = 256;
      v41 = v47 + 80;
      v51 = (char *)*a5;
      v50 = (char *)a5[1];
      if (v50 != *a5)
      {
        do
        {
          *((_OWORD *)v47 - 5) = *((_OWORD *)v50 - 5);
          v52 = *((_OWORD *)v50 - 4);
          v53 = *((_OWORD *)v50 - 3);
          v54 = *((_OWORD *)v50 - 2);
          *(_OWORD *)(v47 - 18) = *(_OWORD *)(v50 - 18);
          *((_OWORD *)v47 - 3) = v53;
          *((_OWORD *)v47 - 2) = v54;
          *((_OWORD *)v47 - 4) = v52;
          v47 -= 80;
          v50 -= 80;
        }
        while (v50 != v51);
        v50 = (char *)*a5;
      }
      *a5 = v47;
      a5[1] = v41;
      a5[2] = v48;
      if (v50)
        operator delete(v50);
    }
    else
    {
      *(_OWORD *)v40 = v91;
      *((_QWORD *)v40 + 2) = v92;
      *((_QWORD *)v40 + 3) = v82;
      v40[32] = v83;
      *(int64x2_t *)(v40 + 40) = vdupq_n_s64(6uLL);
      *((_QWORD *)v40 + 7) = 6;
      *((_QWORD *)v40 + 8) = v38;
      *((_DWORD *)v40 + 18) = 3;
      *((_WORD *)v40 + 38) = 256;
      v41 = v40 + 80;
    }
    a5[1] = v41;
    v21 = 6;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) == 85)
  {
    v55 = *(ZinEngineLayerMirInfo **)(a1 + 264);
    v56 = *((_BYTE *)v55 + 148);
    v57 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v55);
    FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v57);
    v59 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    Lut = ZinIrTarget::GetLut(v59);
    if (ZinMirConvUtils::CanUseHalfWorkUnitMode((uint64_t)a2, a3, 3, v56, FatTileEnable, Lut, 6uLL, 1)
      && v15 > a2[149]
      && v16 <= a2[150])
    {
      v61 = *(_QWORD *)(a4 + 8);
      v62 = *(_QWORD *)(a4 + 24);
      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
      v87 = v63;
      if (ZinMirConvUtils::IsHalfWUBeneficial((uint64_t)a2, v61, v62, v80, v85, v79, (int *)&v86, v21, 3))
      {
        if (!v84)
          a6 = v85;
        v64 = (char *)a5[2];
        v65 = (char *)a5[1];
        if (v65 < v64)
        {
          *(_OWORD *)v65 = v91;
          *((_QWORD *)v65 + 2) = v92;
          *((_QWORD *)v65 + 3) = v82;
          v65[32] = v83;
          *(_DWORD *)(v65 + 33) = v86;
          *((_DWORD *)v65 + 9) = *(_DWORD *)((char *)&v86 + 3);
          *(int64x2_t *)(v65 + 40) = vdupq_n_s64(6uLL);
          *((_QWORD *)v65 + 7) = 6;
          *((_QWORD *)v65 + 8) = a6;
          *((_DWORD *)v65 + 18) = 3;
          *((_WORD *)v65 + 38) = 257;
          v66 = v65 + 80;
LABEL_77:
          a5[1] = v66;
          return;
        }
        v67 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)*a5) >> 4);
        v68 = v67 + 1;
        if (v67 + 1 <= 0x333333333333333)
        {
          v69 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - (_BYTE *)*a5) >> 4);
          if (2 * v69 > v68)
            v68 = 2 * v69;
          if (v69 >= 0x199999999999999)
            v70 = 0x333333333333333;
          else
            v70 = v68;
          if (v70)
            v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a5 + 2), v70);
          else
            v71 = 0;
          v72 = &v71[80 * v67];
          v73 = &v71[80 * v70];
          *(_OWORD *)v72 = v91;
          *((_QWORD *)v72 + 2) = v92;
          *((_QWORD *)v72 + 3) = v82;
          v72[32] = v83;
          *((_DWORD *)v72 + 9) = *(_DWORD *)((char *)&v86 + 3);
          *(_DWORD *)(v72 + 33) = v86;
          *(int64x2_t *)(v72 + 40) = vdupq_n_s64(6uLL);
          *((_QWORD *)v72 + 7) = 6;
          *((_QWORD *)v72 + 8) = a6;
          *((_DWORD *)v72 + 18) = 3;
          *((_WORD *)v72 + 38) = 257;
          v66 = v72 + 80;
          v75 = (char *)*a5;
          v74 = (char *)a5[1];
          if (v74 != *a5)
          {
            do
            {
              *((_OWORD *)v72 - 5) = *((_OWORD *)v74 - 5);
              v76 = *((_OWORD *)v74 - 4);
              v77 = *((_OWORD *)v74 - 3);
              v78 = *((_OWORD *)v74 - 2);
              *(_OWORD *)(v72 - 18) = *(_OWORD *)(v74 - 18);
              *((_OWORD *)v72 - 3) = v77;
              *((_OWORD *)v72 - 2) = v78;
              *((_OWORD *)v72 - 4) = v76;
              v72 -= 80;
              v74 -= 80;
            }
            while (v74 != v75);
            v74 = (char *)*a5;
          }
          *a5 = v72;
          a5[1] = v66;
          a5[2] = v73;
          if (v74)
            operator delete(v74);
          goto LABEL_77;
        }
LABEL_79:
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

uint64_t NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(ZinNELayer const*,ZinIrHalParameters const&,ZinTensorFormat,ZinTensorDimensions const&,std::vector<ZinMirWorkUnitShapeCandidate> &,std::optional<unsigned long>)::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  _DWORD *v13;
  uint64_t v14;
  uint64_t CanUseKernelStreamingMode;
  _DWORD __dst[113];
  uint64_t *v19[4];
  int v20;
  int v21;
  uint64_t *v22[4];
  int v23;
  int v24;
  uint64_t *v25[4];
  int v26;

  v13 = (_DWORD *)a1[33];
  memcpy(__dst, v13 + 30, sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v19, (uint64_t)(v13 + 144));
  v21 = v13[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v22, (uint64_t)(v13 + 156));
  v24 = v13[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v25, (uint64_t)(v13 + 168));
  v14 = a1[33];
  if (!*(_BYTE *)(v14 + 150))
  {
    *(_QWORD *)(v14 + 120) = a2;
    *(_QWORD *)(v14 + 128) = a3;
    *(_QWORD *)(v14 + 136) = a4;
  }
  if (!*(_BYTE *)(v14 + 233))
    *(_QWORD *)(v14 + 200) = a5;
  ZinMirL2Config::NE::SetSmallSourceMode(v14 + 120, a6);
  CanUseKernelStreamingMode = ZinNEConvLayer::CanUseKernelStreamingMode(a1, a7);
  memcpy((void *)(v14 + 120), __dst, 0x1C0uLL);
  *(_DWORD *)(v14 + 568) = __dst[112];
  if ((_DWORD *)(v14 + 120) == __dst)
  {
    *(_DWORD *)(v14 + 616) = v21;
    *(_DWORD *)(v14 + 664) = v24;
  }
  else
  {
    *(_DWORD *)(v14 + 608) = v20;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v14 + 576), v19[2], 0);
    *(_DWORD *)(v14 + 616) = v21;
    *(_DWORD *)(v14 + 656) = v23;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v14 + 624), v22[2], 0);
    *(_DWORD *)(v14 + 664) = v24;
    *(_DWORD *)(v14 + 704) = v26;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v14 + 672), v25[2], 0);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v19);
  return CanUseKernelStreamingMode;
}

void sub_206F154FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  _Unwind_Resume(a1);
}

uint64_t NERasterization::HasWorkUnitWidthOf8(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, char a7, unint64_t a8, unint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  char *v11;
  BOOL v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD *v21[2];

  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  v20 = v21;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  NERasterization::RasterizeWorkUnit((uint64_t)&v20, (void **)&v17, &v16, a5, a4, a3, a8, a6, a9, a8, a2, v15, a7, a10, a11, a1, 0, 0, 0,
    1u,
    0);
  if (v17 == v18)
  {
    v13 = 0;
    if (!v17)
      goto LABEL_15;
    goto LABEL_14;
  }
  v11 = v17 + 80;
  do
  {
    v12 = *((_QWORD *)v11 - 2) != 8 || a9 - *((_QWORD *)v11 - 10) == 8;
    v13 = !v12;
    if (!v12)
      break;
    v12 = v11 == v18;
    v11 += 80;
  }
  while (!v12);
  if (v17)
  {
LABEL_14:
    v18 = v17;
    operator delete(v17);
  }
LABEL_15:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
  return v13;
}

void sub_206F1562C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(_QWORD *)(v1 - 56) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 40, *(_QWORD **)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t NERasterization::GetWorkUnitHeightLimit(NERasterization *this, const ZinNELayer *a2)
{
  unint64_t v3;
  uint64_t Hal;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v3 = (*(uint64_t (**)(NERasterization *, uint64_t))(*(_QWORD *)this + 368))(this, 4);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v6 = *(_QWORD *)(v5 + 592) / *(_QWORD *)(v5 + 680);
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 90
    && (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 57) + 64) + 12) & 0xFFFFFFFE) == 2)
  {
    v7 = (_QWORD *)v5;
    if (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0)+ 88) == 3)
    {
      v8 = v3 % v7[232];
      v9 = v6 == 1;
      v10 = v7[234];
    }
    else
    {
      v8 = v3 % v7[233];
      v9 = v6 == 1;
      v10 = v7[232];
    }
    if (v9 && v8 <= v10)
      v6 = 2;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 93)
    return 16;
  else
    return v6;
}

BOOL WorkunitFrequencyInfo::operator<(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void GetSlices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Tile height must be larger or equal than overlap + 1", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void NERasterization::RasterizeWorkUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "tile_height must be set.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Slice rasterization failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Small source mode SSM/NP2_10 is not supported for HalfWU", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "sh_max has to be less than 9 for HalfWU", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "FP16 input is not supported for HalfWU", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Multicast is not supported for HalfWU", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Multicast is not supported\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "WUStack have to be less than or equal to 3", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "sh_pref has to be 6, if ZinSmallSourceMode is NP2_6\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "sh_pref has to be 10, if ZinSmallSourceMode is NP2_10\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "sh_pref sh_min, and sh_max have to be the same, when any type of small source mode is used\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinNMSLayer::Lower(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  ZinIrOpLayer **v6;
  ZinIrOpLayer *v7;
  ZinIrOpLayer *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t NMSUnit;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer *Reduction;

  v6 = *(ZinIrOpLayer ***)(a1 + 88);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_DWORD *)(v9 + 32);
  *(_QWORD *)(a1 + 248) = 0;
  v11 = (uint64_t *)(a1 + 248);
  *(_BYTE *)(a1 + 232) = 1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  if (v10 == 2)
  {
    NMSUnit = ZinNMSLayer::FindNMSUnit(a1, (uint64_t)v7, (uint64_t)v8, v9, 0);
    *(_QWORD *)(a1 + 240) = NMSUnit;
    *(_QWORD *)(a1 + 256) = a1;
    v13 = 1;
  }
  else
  {
    v11 = (uint64_t *)(a1 + 256);
    if (v10 == 1)
    {
      NMSUnit = ZinNMSLayer::FindNMSUnit(a1, (uint64_t)v7, (uint64_t)v8, v9, 0);
      *(_QWORD *)(a1 + 240) = NMSUnit;
      *(_QWORD *)(a1 + 248) = a1;
    }
    else
    {
      if (v10)
        ZinAssertImpl("Invalid NMS Type.");
      *(_QWORD *)(a1 + 240) = a1;
      NMSUnit = ZinNMSLayer::FindNMSUnit(a1, (uint64_t)v7, (uint64_t)v8, v9, 1);
      *(_QWORD *)(a1 + 248) = NMSUnit;
    }
    v13 = 2;
  }
  *v11 = ZinNMSLayer::FindNMSUnit(NMSUnit, (uint64_t)v7, (uint64_t)v8, v9, v13);
  v14 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0) + 56);
  if (*(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0) + 88) != 3)
    ZinAssertImpl("NMS: only fp16 is supported for scores.");
  if (v14 == 1)
  {
    v15 = a1;
    v16 = a2;
    v17 = a3;
    v18 = v7;
    v19 = v8;
  }
  else
  {
    if (*(_BYTE *)(v9 + 28))
      return ZinNMSLayer::LowerMultiClasses(a1, a2, a3, v7, v8);
    Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 2u, v8);
    if (!*(_BYTE *)(a1 + 232))
      ZinAssertImpl("NMS: failed to add reduced scores.");
    v19 = Reduction;
    v15 = a1;
    v16 = a2;
    v17 = a3;
    v18 = v7;
  }
  ZinNMSLayer::LowerSingleClass(v15, v16, v17, v18, v19);
  return 0;
}

uint64_t ZinNMSLayer::FindNMSUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *i;
  uint64_t result;
  uint64_t v7;

  for (i = *(uint64_t **)(a2 + 112); i != *(uint64_t **)(a2 + 120); ++i)
  {
    result = *i;
    v7 = *(_QWORD *)(*i + 64);
    if (*(_DWORD *)(v7 + 8) == 69
      && *(_DWORD *)(v7 + 32) == a5
      && *(_QWORD *)(*(_QWORD *)(result + 88) + 8) == a3
      && *(_QWORD *)(v7 + 16) == *(_QWORD *)(a4 + 16)
      && *(float *)(v7 + 24) == *(float *)(a4 + 24)
      && (*(_BYTE *)(v7 + 28) != 0) == (*(_BYTE *)(a4 + 28) != 0)
      && (*(_BYTE *)(v7 + 29) != 0) == (*(_BYTE *)(a4 + 29) != 0))
    {
      return result;
    }
  }
  return 0;
}

uint64_t ZinNMSLayer::LowerSingleClass(uint64_t a1, uint64_t **a2, uint64_t a3, ZinIrOpLayer *a4, ZinIrOpLayer *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  ZinIrOpLayer *ReinterpretCastLayer;
  BOOL v17;
  BOOL v18;
  char v19;
  char v20;
  uint64_t **v21;
  char v22;
  char v23;
  BOOL v24;
  BOOL v25;
  uint64_t **v26;
  char v27;
  BOOL v28;
  BOOL v29;
  uint64_t **v30;
  char v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _QWORD v35[4];
  int v36;
  _QWORD v37[4];
  int v38;
  _QWORD v39[4];
  int v40;
  void *__p;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  ZinIrOpLayer *v45;
  ZinIrOpLayer *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  ZinNMSLayer::LoweringHelper(a1, a2, a3, a4, a5, (const void **)(a1 + 24), (uint64_t)&v44);
  v7 = *(_QWORD *)(a1 + 240);
  if (v7)
  {
    v8 = v44;
    if (!v44)
      ZinAssertImpl("NMS: Single Class Lowering failed.");
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0) + 88) == 10)
    {
      v9 = *(_QWORD *)(a1 + 16);
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 80))(&v50, v8, 0, 0);
      v10 = operator new(0x78uLL);
      v42 = (uint64_t)(v10 + 30);
      v43 = (char *)(v10 + 30);
      v10[28] = v57;
      v11 = v56;
      v12 = v54;
      *((_OWORD *)v10 + 5) = v55;
      *((_OWORD *)v10 + 6) = v11;
      v13 = v51;
      *(_OWORD *)v10 = v50;
      *((_OWORD *)v10 + 1) = v13;
      v14 = v53;
      *((_OWORD *)v10 + 2) = v52;
      *((_OWORD *)v10 + 3) = v14;
      *((_OWORD *)v10 + 4) = v12;
      __p = v10;
      v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 240) + 32))(*(_QWORD *)(a1 + 240), 0, 0);
      ReinterpretCastLayer = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v9, a1 + 192, (uint64_t)&__p, (__int128 *)(v15 + 48), 10);
      if (__p)
      {
        v42 = (uint64_t)__p;
        operator delete(__p);
      }
      v49 = *(_QWORD *)(a1 + 240);
      __p = &v49;
      v42 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v50, &__p);
      v17 = ZinIrOpLayerGraph::AddNode(a2, ReinterpretCastLayer, (ZinIrOpLayer ***)&v50);
      if (*(_BYTE *)(a1 + 232))
        v18 = v17;
      else
        v18 = 0;
      *(_BYTE *)(a1 + 232) = v18;
      *(_QWORD *)&v50 = &unk_24C02BB18;
      if (*((_QWORD *)&v50 + 1))
      {
        *(_QWORD *)&v51 = *((_QWORD *)&v50 + 1);
        operator delete(*((void **)&v50 + 1));
      }
      v19 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v8, (uint64_t)ReinterpretCastLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (*(_BYTE *)(a1 + 232))
        v20 = v19;
      else
        v20 = 0;
      *(_BYTE *)(a1 + 232) = v20;
    }
    else
    {
      ReinterpretCastLayer = (ZinIrOpLayer *)v8;
    }
    v21 = *(uint64_t ***)(a1 + 240);
    memset(v39, 0, sizeof(v39));
    v40 = 1065353216;
    v22 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v21, ReinterpretCastLayer, v39);
    if (*(_BYTE *)(a1 + 232))
      v23 = v22;
    else
      v23 = 0;
    *(_BYTE *)(a1 + 232) = v23;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v39);
    v24 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 240), 0);
    if (*(_BYTE *)(a1 + 232))
      v25 = v24;
    else
      v25 = 0;
    *(_BYTE *)(a1 + 232) = v25;
  }
  v26 = *(uint64_t ***)(a1 + 248);
  if (v26)
  {
    if (!v45)
      ZinAssertImpl("NMS: Single Class Lowering failed.");
    memset(v37, 0, sizeof(v37));
    v38 = 1065353216;
    v27 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v26, v45, v37);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
    if ((v27 & 1) == 0)
      ZinAssertImpl("NMS: moving edge failed for single class.");
    v28 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 248), 0);
    if (*(_BYTE *)(a1 + 232))
      v29 = v28;
    else
      v29 = 0;
    *(_BYTE *)(a1 + 232) = v29;
  }
  v30 = *(uint64_t ***)(a1 + 256);
  if (!v30)
  {
    if (*(_BYTE *)(a1 + 232))
      goto LABEL_37;
LABEL_41:
    ZinAssertImpl("NMS: there is an error in graph manipulation.");
  }
  if (!v46)
    ZinAssertImpl("NMS: Single Class Lowering failed.");
  memset(v35, 0, sizeof(v35));
  v36 = 1065353216;
  v31 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v30, v46, v35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v35);
  if ((v31 & 1) == 0)
    ZinAssertImpl("NMS: moving edge failed for single class.");
  v32 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 256), 0);
  if (*(_BYTE *)(a1 + 232))
    v33 = v32;
  else
    v33 = 0;
  *(_BYTE *)(a1 + 232) = v33;
  if (!v33)
    goto LABEL_41;
LABEL_37:
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  return 0;
}

void sub_206F1600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateReduction(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  ZinIrOpLayer *Reduction;
  BOOL v18;
  BOOL v19;
  char v20;
  char v21;
  void *__p;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = a4[2];
  v9 = (uint64_t **)a4[19];
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 32))(a4, 0, 0);
  if (a3 >= 5)
    std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
  v11 = v10;
  (*(void (**)(void **__return_ptr, _QWORD *, _QWORD, _QWORD))(*a4 + 80))(v27, a4, 0, 0);
  v12 = (char *)operator new(0x78uLL);
  __p = v12;
  v25 = v12 + 120;
  *((_DWORD *)v12 + 28) = v34;
  v13 = v33;
  v14 = v31;
  *((_OWORD *)v12 + 5) = v32;
  *((_OWORD *)v12 + 6) = v13;
  v15 = v28;
  *(_OWORD *)v12 = *(_OWORD *)v27;
  *((_OWORD *)v12 + 1) = v15;
  v16 = v30;
  *((_OWORD *)v12 + 2) = v29;
  *((_OWORD *)v12 + 3) = v16;
  *((_OWORD *)v12 + 4) = v14;
  v24 = (uint64_t)(v12 + 120);
  Reduction = (ZinIrOpLayer *)ZinBuilder::CreateReduction(v8, a1 + 192, (uint64_t *)&__p, *(_DWORD *)(v11 + 88), a2, 1 << a3, 0, 0, 1.0, 0.0, 0, 0);
  if (__p)
  {
    v24 = (uint64_t)__p;
    operator delete(__p);
  }
  v26 = a1;
  __p = &v26;
  v24 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v27, &__p);
  v18 = ZinIrOpLayerGraph::AddNode(v9, Reduction, (ZinIrOpLayer ***)v27);
  if (*(_BYTE *)(a1 + 232))
    v19 = v18;
  else
    v19 = 0;
  *(_BYTE *)(a1 + 232) = v19;
  v27[0] = &unk_24C02BB18;
  if (v27[1])
  {
    *(void **)&v28 = v27[1];
    operator delete(v27[1]);
  }
  v20 = ZinIrOpLayerGraph::AddEdge((uint64_t)v9, (uint64_t)a4, (uint64_t)Reduction, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 232))
    v21 = v20;
  else
    v21 = 0;
  *(_BYTE *)(a1 + 232) = v21;
  return Reduction;
}

void sub_206F1629C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinNMSLayer::LowerMultiClasses(uint64_t a1, uint64_t **a2, uint64_t a3, ZinIrOpLayer *a4, _QWORD *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  ZinIrOpLayer *Reduction;
  ZinIrOpLayer *EW2;
  ZinIrOpLayer *v19;
  ZinIrOpLayer *TransposeCW;
  ZinIrOpLayer *v21;
  ZinIrOpLayer *v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *v24;
  ZinIrOpLayer *v25;
  size_t v26;
  __int128 *p_p;
  const void *v28;
  uint64_t **v29;
  char v30;
  BOOL v31;
  BOOL v32;
  uint64_t **v33;
  char v34;
  BOOL v35;
  BOOL v36;
  uint64_t **v37;
  char v38;
  _BOOL4 v39;
  int v40;
  ZinIrOpLayer *ReshapeCtoW;
  ZinIrOpLayer *v42;
  ZinIrOpLayer *ReshapeHtoW;
  uint64_t v44;
  ZinIrOpLayer *Concat;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  __int128 *v50;
  const void *v51;
  std::string *v52;
  std::string::size_type size;
  std::string *v54;
  ZinIrOpLayer *v55;
  ZinIrOpLayer *MaxScoreMask;
  ZinIrOpLayer *MaskedValueOverWidthDim;
  ZinIrOpLayer *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  ZinIrOpLayer **v65;
  char *v66;
  char *v67;
  ZinIrOpLayer *v68;
  ZinIrOpLayer *v69;
  ZinIrOpLayer *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  ZinIrOpLayer **v77;
  char *v78;
  char *v79;
  ZinIrOpLayer *v80;
  ZinIrOpLayer *v81;
  ZinIrOpLayer *Broadcast;
  ZinIrOpLayer *v83;
  ZinIrOpLayer *v84;
  ZinIrOpLayer *v85;
  ZinIrOpLayer *v86;
  ZinIrOpLayer *v87;
  ZinIrOpLayer *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  ZinIrOpLayer **v95;
  char *v96;
  char *v97;
  ZinIrOpLayer *v98;
  _DWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  ZinIrOpLayer *ElementWiseLayer;
  BOOL v106;
  BOOL v107;
  char v108;
  char v109;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  ZinIrOpLayer *ReinterpretCastLayer;
  BOOL v120;
  BOOL v121;
  char v122;
  char v123;
  uint64_t **v124;
  char v125;
  char v126;
  BOOL v127;
  BOOL v128;
  ZinIrOpLayer *v129;
  uint64_t **v130;
  char v131;
  BOOL v132;
  BOOL v133;
  ZinIrOpLayer *v134;
  uint64_t **v135;
  char v136;
  BOOL v137;
  BOOL v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  ZinIrOpLayer *ReshapeHtoC;
  ZinIrOpLayer *v144;
  ZinIrOpLayer *v145;
  uint64_t v146;
  std::string::size_type v147;
  uint64_t v148;
  _OWORD v149[2];
  int v150;
  _OWORD v151[2];
  int v152;
  _OWORD v153[2];
  int v154;
  std::string v155;
  void *v156;
  char *v157;
  char *v158;
  void *v159;
  char *v160;
  char *v161;
  void *v162;
  char *v163;
  char *v164;
  _OWORD v165[2];
  int v166;
  _OWORD v167[2];
  int v168;
  _OWORD v169[2];
  int v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  __int128 __p;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  int v181;
  std::string v182;
  ZinIrOpLayer *v183;
  ZinIrOpLayer *v184;
  ZinIrOpLayer *v185;
  void *v186[6];

  v186[3] = *(void **)MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a3 + 8);
  v11 = *(std::__shared_weak_count **)(a3 + 16);
  v171 = v12;
  v172 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a5 + 32))(a5, 0, 0);
  v147 = *(_QWORD *)(v15 + 72);
  v148 = v15;
  v16 = *(_QWORD *)(v15 + 56);
  Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 2u, a5);
  EW2 = ZinNMSLayer::GenerateEW2(a1, 16, a5, (uint64_t)Reduction);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nms_disambiguation_vector");
  v19 = ZinConstantTensorManager::CreateDisambiguationVector(v12, v16, &__p, a2, v10, a1);
  if (SBYTE7(v175) < 0)
    operator delete((void *)__p);
  TransposeCW = ZinNMSLayer::GenerateTransposeCW((ZinNMSLayer *)a1, v19);
  v21 = *(ZinIrOpLayer **)(v148 + 48);
  if ((uint64_t)v21 >= 2)
  {
    LODWORD(v183) = 0;
    v184 = v21;
    LODWORD(v185) = 4;
    v186[0] = *(void **)(v148 + 72);
    std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&__p, (int *)&v183, 2);
    TransposeCW = ZinNMSLayer::GenerateBroadcast(a1, TransposeCW, (uint64_t)&__p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p);
  }
  v22 = ZinNMSLayer::GenerateEW2(a1, 2, EW2, (uint64_t)TransposeCW);
  v23 = ZinNMSLayer::GenerateReduction(a1, 2, 2u, v22);
  v24 = ZinNMSLayer::GenerateEW2(a1, 16, v22, (uint64_t)v23);
  v25 = ZinNMSLayer::GenerateEW2(a1, 2, a5, (uint64_t)v24);
  v146 = v10;
  if (*(char *)(a1 + 47) >= 0)
    v26 = *(unsigned __int8 *)(a1 + 47);
  else
    v26 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 6);
  if ((SBYTE7(v175) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v26)
  {
    if (*(char *)(a1 + 47) >= 0)
      v28 = (const void *)(a1 + 24);
    else
      v28 = *(const void **)(a1 + 24);
    memmove(p_p, v28, v26);
  }
  strcpy((char *)p_p + v26, "_lower");
  ZinNMSLayer::LoweringHelper(a1, a2, a3, a4, v25, (const void **)&__p, (uint64_t)&v183);
  if (SBYTE7(v175) < 0)
    operator delete((void *)__p);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 64) + 29))
  {
    ReshapeCtoW = ZinNMSLayer::GenerateReshapeCtoW((ZinNMSLayer *)a1, v185);
    if (ReshapeCtoW)
    {
      if (*(_QWORD *)(a1 + 240))
      {
        v42 = ZinNMSLayer::GenerateReshapeCtoW((ZinNMSLayer *)a1, v183);
        if (!v42)
          goto LABEL_53;
      }
      else
      {
        v42 = 0;
      }
      if (*(_QWORD *)(a1 + 248))
      {
        ReshapeHtoW = ZinNMSLayer::GenerateReshapeHtoW((ZinNMSLayer *)a1, v184);
        if (!ReshapeHtoW)
          goto LABEL_53;
      }
      else
      {
        ReshapeHtoW = 0;
      }
      v144 = ReshapeHtoW;
      v145 = v42;
      if (*(_QWORD *)(a1 + 256))
      {
        Concat = (ZinIrOpLayer *)ZinNMSLayer::GenerateConcat(a1, (uint64_t *)v186, 3);
        ReshapeHtoC = ZinNMSLayer::GenerateReshapeHtoC((ZinNMSLayer *)a1, Concat);
      }
      else
      {
        ReshapeHtoC = 0;
      }
      v162 = 0;
      v163 = 0;
      v164 = 0;
      v159 = 0;
      v160 = 0;
      v161 = 0;
      v157 = 0;
      v158 = 0;
      v156 = 0;
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
      v47 = v46 - 1;
      if (v46 >= 1)
      {
        v48 = 0;
        do
        {
          if (*(char *)(a1 + 47) >= 0)
            v49 = *(unsigned __int8 *)(a1 + 47);
          else
            v49 = *(_QWORD *)(a1 + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 10);
          if ((SBYTE7(v175) & 0x80u) == 0)
            v50 = &__p;
          else
            v50 = (__int128 *)__p;
          if (v49)
          {
            if (*(char *)(a1 + 47) >= 0)
              v51 = (const void *)(a1 + 24);
            else
              v51 = *(const void **)(a1 + 24);
            memmove(v50, v51, v49);
          }
          strcpy((char *)v50 + v49, "_topscores");
          std::to_string(&v182, v48);
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v182;
          else
            v52 = (std::string *)v182.__r_.__value_.__r.__words[0];
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v182.__r_.__value_.__r.__words[2]);
          else
            size = v182.__r_.__value_.__l.__size_;
          v54 = std::string::append((std::string *)&__p, (const std::string::value_type *)v52, size);
          v155 = *v54;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v182.__r_.__value_.__l.__data_);
          if (SBYTE7(v175) < 0)
            operator delete((void *)__p);
          v55 = ZinNMSLayer::GenerateReduction(a1, 2, 4u, ReshapeCtoW);
          MaxScoreMask = ZinNMSLayer::GenerateMaxScoreMask(a1, a2, a3, (uint64_t)v55, ReshapeCtoW, (const void **)&v155.__r_.__value_.__l.__data_);
          if (*(_QWORD *)(a1 + 240))
          {
            MaskedValueOverWidthDim = ZinNMSLayer::GenerateMaskedValueOverWidthDim((ZinNMSLayer *)a1, v145, MaxScoreMask);
            v58 = MaskedValueOverWidthDim;
            v59 = v163;
            if (v163 >= v164)
            {
              v61 = (v163 - (_BYTE *)v162) >> 3;
              if ((unint64_t)(v61 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v62 = (v164 - (_BYTE *)v162) >> 2;
              if (v62 <= v61 + 1)
                v62 = v61 + 1;
              if ((unint64_t)(v164 - (_BYTE *)v162) >= 0x7FFFFFFFFFFFFFF8)
                v63 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v63 = v62;
              if (v63)
                v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v164, v63);
              else
                v64 = 0;
              v65 = (ZinIrOpLayer **)&v64[8 * v61];
              *v65 = v58;
              v60 = (char *)(v65 + 1);
              v67 = (char *)v162;
              v66 = v163;
              if (v163 != v162)
              {
                do
                {
                  v68 = (ZinIrOpLayer *)*((_QWORD *)v66 - 1);
                  v66 -= 8;
                  *--v65 = v68;
                }
                while (v66 != v67);
                v66 = (char *)v162;
              }
              v162 = v65;
              v163 = v60;
              v164 = &v64[8 * v63];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v163 = MaskedValueOverWidthDim;
              v60 = v59 + 8;
            }
            v163 = v60;
          }
          if (*(_QWORD *)(a1 + 248))
          {
            v69 = ZinNMSLayer::GenerateMaskedValueOverWidthDim((ZinNMSLayer *)a1, v144, MaxScoreMask);
            v70 = v69;
            v71 = v160;
            if (v160 >= v161)
            {
              v73 = (v160 - (_BYTE *)v159) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v74 = (v161 - (_BYTE *)v159) >> 2;
              if (v74 <= v73 + 1)
                v74 = v73 + 1;
              if ((unint64_t)(v161 - (_BYTE *)v159) >= 0x7FFFFFFFFFFFFFF8)
                v75 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v75 = v74;
              if (v75)
                v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v161, v75);
              else
                v76 = 0;
              v77 = (ZinIrOpLayer **)&v76[8 * v73];
              *v77 = v70;
              v72 = (char *)(v77 + 1);
              v79 = (char *)v159;
              v78 = v160;
              if (v160 != v159)
              {
                do
                {
                  v80 = (ZinIrOpLayer *)*((_QWORD *)v78 - 1);
                  v78 -= 8;
                  *--v77 = v80;
                }
                while (v78 != v79);
                v78 = (char *)v159;
              }
              v159 = v77;
              v160 = v72;
              v161 = &v76[8 * v75];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_QWORD *)v160 = v69;
              v72 = v71 + 8;
            }
            v160 = v72;
          }
          if (*(_QWORD *)(a1 + 256))
          {
            v81 = ZinNMSLayer::GenerateTransposeCW((ZinNMSLayer *)a1, MaxScoreMask);
            LODWORD(v182.__r_.__value_.__l.__data_) = 4;
            v182.__r_.__value_.__l.__size_ = v147;
            std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&__p, (int *)&v182, 1);
            Broadcast = ZinNMSLayer::GenerateBroadcast(a1, v81, (uint64_t)&__p);
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p);
            v83 = ZinNMSLayer::GenerateEW2(a1, 2, ReshapeHtoC, (uint64_t)Broadcast);
            v84 = ZinNMSLayer::GenerateReduction(a1, 2, 2u, v83);
            LODWORD(v182.__r_.__value_.__l.__data_) = 2;
            v182.__r_.__value_.__l.__size_ = *(_QWORD *)(v148 + 56);
            std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&__p, (int *)&v182, 1);
            v85 = ZinNMSLayer::GenerateBroadcast(a1, v84, (uint64_t)&__p);
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p);
            v86 = ZinNMSLayer::GenerateEW2(a1, 2, a5, (uint64_t)v85);
            v87 = ZinNMSLayer::GenerateReduction(a1, 2, 4u, v86);
            v88 = v87;
            v89 = v157;
            if (v157 >= v158)
            {
              v91 = (v157 - (_BYTE *)v156) >> 3;
              if ((unint64_t)(v91 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v92 = (v158 - (_BYTE *)v156) >> 2;
              if (v92 <= v91 + 1)
                v92 = v91 + 1;
              if ((unint64_t)(v158 - (_BYTE *)v156) >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v92;
              if (v93)
                v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v158, v93);
              else
                v94 = 0;
              v95 = (ZinIrOpLayer **)&v94[8 * v91];
              *v95 = v88;
              v90 = (char *)(v95 + 1);
              v97 = (char *)v156;
              v96 = v157;
              if (v157 != v156)
              {
                do
                {
                  v98 = (ZinIrOpLayer *)*((_QWORD *)v96 - 1);
                  v96 -= 8;
                  *--v95 = v98;
                }
                while (v96 != v97);
                v96 = (char *)v156;
              }
              v156 = v95;
              v157 = v90;
              v158 = &v94[8 * v93];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_QWORD *)v157 = v87;
              v90 = v89 + 8;
            }
            v157 = v90;
          }
          if (v48 != v47)
          {
            (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)MaxScoreMask
                                                                                           + 80))(&__p, MaxScoreMask, 0, 0);
            v99 = operator new(0x78uLL);
            v182.__r_.__value_.__l.__size_ = (std::string::size_type)(v99 + 30);
            v182.__r_.__value_.__r.__words[2] = (std::string::size_type)(v99 + 30);
            v99[28] = v181;
            v100 = v180;
            v101 = v178;
            *((_OWORD *)v99 + 5) = v179;
            *((_OWORD *)v99 + 6) = v100;
            v102 = v175;
            *(_OWORD *)v99 = __p;
            *((_OWORD *)v99 + 1) = v102;
            v103 = v177;
            *((_OWORD *)v99 + 2) = v176;
            *((_OWORD *)v99 + 3) = v103;
            *((_OWORD *)v99 + 4) = v101;
            v182.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
            v104 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)MaxScoreMask + 32))(MaxScoreMask, 0, 0);
            ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v146, a1 + 192, 10, (uint64_t)&v182, (__int128 *)(v104 + 48), 3);
            if (v182.__r_.__value_.__r.__words[0])
            {
              v182.__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
              operator delete(v182.__r_.__value_.__l.__data_);
            }
            v173 = a1;
            v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
            v182.__r_.__value_.__l.__size_ = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v182);
            v106 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)&__p);
            if (*(_BYTE *)(a1 + 232))
              v107 = v106;
            else
              v107 = 0;
            *(_BYTE *)(a1 + 232) = v107;
            *(_QWORD *)&__p = &unk_24C02BB18;
            if (*((_QWORD *)&__p + 1))
            {
              *(_QWORD *)&v175 = *((_QWORD *)&__p + 1);
              operator delete(*((void **)&__p + 1));
            }
            v108 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)MaxScoreMask, (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
            if (*(_BYTE *)(a1 + 232))
              v109 = v108;
            else
              v109 = 0;
            *(_BYTE *)(a1 + 232) = v109;
            ReshapeCtoW = ZinNMSLayer::GenerateEW2(a1, 2, ReshapeCtoW, (uint64_t)ElementWiseLayer);
          }
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v155.__r_.__value_.__l.__data_);
        }
        while (v48++ != v47);
      }
      if (*(_QWORD *)(a1 + 240))
      {
        v111 = ZinNMSLayer::GenerateConcat(a1, (uint64_t *)&v162, 4);
        if (*(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 240) + 32))(*(_QWORD *)(a1 + 240), 0, 0)+ 88) == 10)
        {
          v112 = *(_QWORD *)(a1 + 16);
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v111 + 80))(&__p, v111, 0, 0);
          v113 = operator new(0x78uLL);
          v155.__r_.__value_.__l.__size_ = (std::string::size_type)(v113 + 30);
          v155.__r_.__value_.__r.__words[2] = (std::string::size_type)(v113 + 30);
          v113[28] = v181;
          v114 = v180;
          v115 = v178;
          *((_OWORD *)v113 + 5) = v179;
          *((_OWORD *)v113 + 6) = v114;
          v116 = v175;
          *(_OWORD *)v113 = __p;
          *((_OWORD *)v113 + 1) = v116;
          v117 = v177;
          *((_OWORD *)v113 + 2) = v176;
          *((_OWORD *)v113 + 3) = v117;
          *((_OWORD *)v113 + 4) = v115;
          v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
          v118 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 240) + 32))(*(_QWORD *)(a1 + 240), 0, 0);
          ReinterpretCastLayer = (ZinIrOpLayer *)ZinBuilder::CreateReinterpretCastLayer(v112, a1 + 192, (uint64_t)&v155, (__int128 *)(v118 + 48), 10);
          if (v155.__r_.__value_.__r.__words[0])
          {
            v155.__r_.__value_.__l.__size_ = v155.__r_.__value_.__r.__words[0];
            operator delete(v155.__r_.__value_.__l.__data_);
          }
          v182.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 240);
          v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
          v155.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v155);
          v120 = ZinIrOpLayerGraph::AddNode(a2, ReinterpretCastLayer, (ZinIrOpLayer ***)&__p);
          if (*(_BYTE *)(a1 + 232))
            v121 = v120;
          else
            v121 = 0;
          *(_BYTE *)(a1 + 232) = v121;
          *(_QWORD *)&__p = &unk_24C02BB18;
          if (*((_QWORD *)&__p + 1))
          {
            *(_QWORD *)&v175 = *((_QWORD *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          v122 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v111, (uint64_t)ReinterpretCastLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          if (*(_BYTE *)(a1 + 232))
            v123 = v122;
          else
            v123 = 0;
          *(_BYTE *)(a1 + 232) = v123;
        }
        else
        {
          ReinterpretCastLayer = (ZinIrOpLayer *)v111;
        }
        v124 = *(uint64_t ***)(a1 + 240);
        memset(v153, 0, sizeof(v153));
        v154 = 1065353216;
        v125 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v124, ReinterpretCastLayer, v153);
        if (*(_BYTE *)(a1 + 232))
          v126 = v125;
        else
          v126 = 0;
        *(_BYTE *)(a1 + 232) = v126;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v153);
        v127 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 240), 0);
        if (*(_BYTE *)(a1 + 232))
          v128 = v127;
        else
          v128 = 0;
        *(_BYTE *)(a1 + 232) = v128;
      }
      if (*(_QWORD *)(a1 + 248))
      {
        v129 = (ZinIrOpLayer *)ZinNMSLayer::GenerateConcat(a1, (uint64_t *)&v159, 4);
        v130 = *(uint64_t ***)(a1 + 248);
        memset(v151, 0, sizeof(v151));
        v152 = 1065353216;
        v131 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v130, v129, v151);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v151);
        if ((v131 & 1) == 0)
          ZinAssertImpl("NMS: moving edges failed for multi-class.");
        v132 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 248), 0);
        if (*(_BYTE *)(a1 + 232))
          v133 = v132;
        else
          v133 = 0;
        *(_BYTE *)(a1 + 232) = v133;
      }
      if (*(_QWORD *)(a1 + 256))
      {
        v134 = (ZinIrOpLayer *)ZinNMSLayer::GenerateConcat(a1, (uint64_t *)&v156, 4);
        v135 = *(uint64_t ***)(a1 + 256);
        memset(v149, 0, sizeof(v149));
        v150 = 1065353216;
        v136 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v135, v134, v149);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v149);
        if ((v136 & 1) == 0)
          ZinAssertImpl("NMS: moving edges failed for multi-class.");
        v137 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 256), 0);
        if (*(_BYTE *)(a1 + 232))
          v138 = v137;
        else
          v138 = 0;
        *(_BYTE *)(a1 + 232) = v138;
      }
      if (v156)
      {
        v157 = (char *)v156;
        operator delete(v156);
      }
      if (v159)
      {
        v160 = (char *)v159;
        operator delete(v159);
      }
      if (v162)
      {
        v163 = (char *)v162;
        operator delete(v162);
      }
      if (!*(_BYTE *)(a1 + 232))
        ZinAssertImpl("NMS: there is an error in graph manipulation.");
      goto LABEL_191;
    }
LABEL_53:
    v44 = 3;
    goto LABEL_192;
  }
  v29 = *(uint64_t ***)(a1 + 240);
  if (v29)
  {
    if (!v183)
      goto LABEL_53;
    memset(v169, 0, sizeof(v169));
    v170 = 1065353216;
    v30 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v29, v183, v169);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v169);
    if ((v30 & 1) == 0)
      ZinAssertImpl("NMS: moving edges failed for multi-class.");
    v31 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 240), 0);
    if (*(_BYTE *)(a1 + 232))
      v32 = v31;
    else
      v32 = 0;
    *(_BYTE *)(a1 + 232) = v32;
  }
  v33 = *(uint64_t ***)(a1 + 248);
  if (v33)
  {
    if (!v184)
      ZinAssertImpl("NMS boxes is null.");
    memset(v167, 0, sizeof(v167));
    v168 = 1065353216;
    v34 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v33, v184, v167);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v167);
    if ((v34 & 1) == 0)
      ZinAssertImpl("NMS: moving edges failed for multi-class.");
    v35 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 248), 0);
    if (*(_BYTE *)(a1 + 232))
      v36 = v35;
    else
      v36 = 0;
    *(_BYTE *)(a1 + 232) = v36;
  }
  v37 = *(uint64_t ***)(a1 + 256);
  if (v37)
  {
    if (v185)
    {
      memset(v165, 0, sizeof(v165));
      v166 = 1065353216;
      v38 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v37, v185, v165);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v165);
      if ((v38 & 1) == 0)
        ZinAssertImpl("NMS: moving edges failed for multi-class.");
      v39 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *(ZinIrOpLayer **)(a1 + 256), 0);
      if (*(_BYTE *)(a1 + 232))
        v40 = v39;
      else
        v40 = 0;
      *(_BYTE *)(a1 + 232) = v40;
      goto LABEL_48;
    }
    goto LABEL_53;
  }
  v40 = *(unsigned __int8 *)(a1 + 232);
LABEL_48:
  if (!v40)
    ZinAssertImpl("NMS: there is an error in graph manipulation.");
LABEL_191:
  v44 = 0;
LABEL_192:
  if (v186[0])
  {
    v186[1] = v186[0];
    operator delete(v186[0]);
  }
  v139 = v172;
  if (v172)
  {
    v140 = (unint64_t *)&v172->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  return v44;
}

void sub_206F17124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;
  void *v71;

  if (__p)
    operator delete(__p);
  if (a45)
    operator delete(a45);
  if (a48)
    operator delete(a48);
  v71 = *(void **)(v69 - 128);
  if (v71)
  {
    *(_QWORD *)(v69 - 120) = v71;
    operator delete(v71);
  }
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_206F17368()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 176);
  if (v1)
  {
    *(_QWORD *)(v0 - 168) = v1;
    JUMPOUT(0x206F17378);
  }
  JUMPOUT(0x206F17308);
}

void ZinNMSLayer::LoweringHelper(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, ZinIrOpLayer *a4@<X3>, ZinIrOpLayer *a5@<X4>, const void **a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  ZinIrOpLayer *Reduction;
  uint64_t v25;
  char *v26;
  void *v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  ZinIrOpLayer *MaxScoreMask;
  ZinIrOpLayer *v37;
  char *v38;
  void *v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  ZinIrOpLayer **v44;
  char *v45;
  char *v46;
  ZinIrOpLayer *v47;
  ZinIrOpLayer *IndexFromMask;
  ZinIrOpLayer *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  ZinIrOpLayer **v56;
  char *v57;
  char *v58;
  ZinIrOpLayer *v59;
  ZinIrOpLayer *MaskedValueOverWidthDim;
  ZinIrOpLayer *v61;
  char *v62;
  void *v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  ZinIrOpLayer **v68;
  char *v69;
  char *v70;
  ZinIrOpLayer *v71;
  size_t v72;
  std::string *v73;
  const void *v74;
  int64_t v75;
  int v76;
  std::string::size_type v77;
  std::string *v78;
  std::string *v79;
  ZinIrOpLayer *v80;
  std::string::size_type v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  ZinIrOpLayer *EW2;
  ZinIrOpLayer *v86;
  ZinIrOpLayer *v87;
  ZinIrOpLayer *Activation;
  BOOL v89;
  BOOL v90;
  char v91;
  char v92;
  int v93;
  std::string::size_type v94;
  std::string *v95;
  std::string *v96;
  uint64_t v97;
  ZinIrOpLayer *View;
  BOOL v99;
  BOOL v100;
  char v101;
  char v102;
  std::string *v103;
  std::string *v104;
  uint64_t v105;
  ZinIrOpLayer *v106;
  BOOL v107;
  BOOL v108;
  char v109;
  char v110;
  ZinIrOpLayer *v111;
  int64_t v112;
  ZinIrOpLayer *TransposeHC;
  ZinIrOpLayer *v114;
  ZinIrOpLayer *v115;
  float v116;
  ZinIrTensor *v117;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  BOOL v119;
  BOOL v120;
  char v121;
  char v122;
  ZinIrOpLayer *v123;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  const void **v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL4 v136;
  ZinIrOpLayer *Broadcast;
  unint64_t v140;
  uint64_t v141;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64x2_t v147;
  int64x2_t v148;
  uint64_t v149;
  _OWORD v150[2];
  uint64_t v151;
  int64x2_t v152;
  int64x2_t v153;
  uint64_t v154;
  std::string v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  std::string v162;
  std::string v163;
  void *__src;
  void *v165;
  unint64_t v166;
  void *v167;
  void *__p;
  unint64_t v169;
  void *v170;
  void *v171;
  unint64_t v172;
  char *v173;
  char *v174;
  _QWORD v175[2];
  std::__shared_weak_count *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  std::string v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;

  v183 = *MEMORY[0x24BDAC8D0];
  v141 = *(_QWORD *)(a1 + 16);
  v10 = *(std::__shared_weak_count **)(a3 + 16);
  v175[1] = *(_QWORD *)(a3 + 8);
  v176 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v135 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  v130 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(v130 + 16);
  v133 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a5 + 32))(a5, 0, 0);
  v173 = 0;
  v174 = 0;
  v175[0] = 0;
  v171 = 0;
  v170 = 0;
  v172 = 0;
  __p = 0;
  v167 = 0;
  v169 = 0;
  v165 = 0;
  __src = 0;
  v166 = 0;
  std::vector<ZinIrOpLayer *>::reserve(&v167, v13);
  std::vector<ZinIrOpLayer *>::reserve((void **)&v173, v13);
  std::vector<ZinIrOpLayer *>::reserve(&v170, v13);
  std::vector<ZinIrOpLayer *>::reserve(&__src, v13);
  if (*(_QWORD *)(a1 + 240) || *(_QWORD *)(a1 + 248))
  {
    v14 = 1;
  }
  else
  {
    if (*(uint64_t *)(v133 + 56) < 2)
    {
      v136 = 0;
      if (!v13)
        goto LABEL_200;
      goto LABEL_8;
    }
    v14 = *(_BYTE *)(*(_QWORD *)(a1 + 64) + 29) == 0;
  }
  v136 = v14;
  if (!v13)
    goto LABEL_200;
LABEL_8:
  v15 = 0;
  v131 = 0;
  v132 = 0;
  Broadcast = 0;
  v140 = v13 - 1;
  v134 = a1 + 192;
  v129 = a6;
  do
  {
    if (*((char *)a6 + 23) >= 0)
      v16 = *((unsigned __int8 *)a6 + 23);
    else
      v16 = (size_t)a6[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v180, v16 + 1);
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v180;
    else
      v17 = (std::string *)v180.__r_.__value_.__r.__words[0];
    if (v16)
    {
      if (*((char *)a6 + 23) >= 0)
        v18 = a6;
      else
        v18 = *a6;
      memmove(v17, v18, v16);
    }
    *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
    std::to_string(&v162, v15);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v162;
    else
      v19 = (std::string *)v162.__r_.__value_.__r.__words[0];
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      size = v162.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v180, (const std::string::value_type *)v19, size);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v155, "_", 1uLL);
    v163 = *v23;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v180.__r_.__value_.__l.__data_);
    Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 4u, a5);
    v25 = (uint64_t)Reduction;
    v26 = (char *)__p;
    if ((unint64_t)__p >= v169)
    {
      v28 = ((_BYTE *)__p - (_BYTE *)v167) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(v169 - (_QWORD)v167) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (v169 - (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v169, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      *v32 = v25;
      v27 = v32 + 1;
      v33 = (char *)__p;
      v34 = (char *)v167;
      if (__p != v167)
      {
        do
        {
          v35 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v32 = v35;
        }
        while (v33 != v34);
        v33 = (char *)v167;
      }
      v167 = v32;
      __p = v27;
      v169 = (unint64_t)&v31[8 * v30];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *(_QWORD *)__p = Reduction;
      v27 = v26 + 8;
    }
    __p = v27;
    if (v136)
    {
      MaxScoreMask = ZinNMSLayer::GenerateMaxScoreMask(a1, a2, a3, v25, a5, (const void **)&v163.__r_.__value_.__l.__data_);
      v37 = MaxScoreMask;
      v38 = (char *)v165;
      if ((unint64_t)v165 >= v166)
      {
        v40 = ((_BYTE *)v165 - (_BYTE *)__src) >> 3;
        if ((unint64_t)(v40 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v41 = (uint64_t)(v166 - (_QWORD)__src) >> 2;
        if (v41 <= v40 + 1)
          v41 = v40 + 1;
        if (v166 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v166, v42);
        else
          v43 = 0;
        v44 = (ZinIrOpLayer **)&v43[8 * v40];
        *v44 = v37;
        v39 = v44 + 1;
        v45 = (char *)v165;
        v46 = (char *)__src;
        if (v165 != __src)
        {
          do
          {
            v47 = (ZinIrOpLayer *)*((_QWORD *)v45 - 1);
            v45 -= 8;
            *--v44 = v47;
          }
          while (v45 != v46);
          v45 = (char *)__src;
        }
        __src = v44;
        v165 = v39;
        v166 = (unint64_t)&v43[8 * v42];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_QWORD *)v165 = MaxScoreMask;
        v39 = v38 + 8;
      }
      v165 = v39;
    }
    else
    {
      v37 = 0;
    }
    if (*(_QWORD *)(a1 + 240))
    {
      IndexFromMask = ZinNMSLayer::GenerateIndexFromMask(a1, a2, a3, v37);
      v49 = IndexFromMask;
      v50 = v174;
      if ((unint64_t)v174 >= v175[0])
      {
        v52 = (v174 - v173) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v53 = (uint64_t)(v175[0] - (_QWORD)v173) >> 2;
        if (v53 <= v52 + 1)
          v53 = v52 + 1;
        if (v175[0] - (_QWORD)v173 >= 0x7FFFFFFFFFFFFFF8uLL)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54)
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v175, v54);
        else
          v55 = 0;
        v56 = (ZinIrOpLayer **)&v55[8 * v52];
        *v56 = v49;
        v51 = (char *)(v56 + 1);
        v58 = v173;
        v57 = v174;
        if (v174 != v173)
        {
          do
          {
            v59 = (ZinIrOpLayer *)*((_QWORD *)v57 - 1);
            v57 -= 8;
            *--v56 = v59;
          }
          while (v57 != v58);
          v57 = v173;
        }
        v173 = (char *)v56;
        v174 = v51;
        v175[0] = &v55[8 * v54];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *(_QWORD *)v174 = IndexFromMask;
        v51 = v50 + 8;
      }
      v174 = v51;
    }
    if (*(_QWORD *)(a1 + 248))
    {
      MaskedValueOverWidthDim = ZinNMSLayer::GenerateMaskedValueOverWidthDim((ZinNMSLayer *)a1, a4, v37);
      v61 = MaskedValueOverWidthDim;
      v62 = (char *)v171;
      if ((unint64_t)v171 >= v172)
      {
        v64 = ((_BYTE *)v171 - (_BYTE *)v170) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v65 = (uint64_t)(v172 - (_QWORD)v170) >> 2;
        if (v65 <= v64 + 1)
          v65 = v64 + 1;
        if (v172 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v172, v66);
        else
          v67 = 0;
        v68 = (ZinIrOpLayer **)&v67[8 * v64];
        *v68 = v61;
        v63 = v68 + 1;
        v69 = (char *)v171;
        v70 = (char *)v170;
        if (v171 != v170)
        {
          do
          {
            v71 = (ZinIrOpLayer *)*((_QWORD *)v69 - 1);
            v69 -= 8;
            *--v68 = v71;
          }
          while (v69 != v70);
          v69 = (char *)v170;
        }
        v170 = v68;
        v171 = v63;
        v172 = (unint64_t)&v67[8 * v66];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *(_QWORD *)v171 = MaskedValueOverWidthDim;
        v63 = v62 + 8;
      }
      v171 = v63;
    }
    else
    {
      v61 = 0;
    }
    if (v15 != v140)
    {
      if (!v37)
        v37 = ZinNMSLayer::GenerateMaxScoreMask(a1, a2, a3, v25, a5, (const void **)&v163.__r_.__value_.__l.__data_);
      if (!Broadcast)
      {
        if (*((char *)a6 + 23) >= 0)
          v72 = *((unsigned __int8 *)a6 + 23);
        else
          v72 = (size_t)a6[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v180, v72 + 6);
        if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = &v180;
        else
          v73 = (std::string *)v180.__r_.__value_.__r.__words[0];
        if (v72)
        {
          if (*((char *)a6 + 23) >= 0)
            v74 = a6;
          else
            v74 = *a6;
          memmove(v73, v74, v72);
        }
        strcpy((char *)v73 + v72, "_boxes");
        ZinNMSLayer::GenerateArea(a1, a2, a4, (const void **)&v180.__r_.__value_.__l.__data_, (ZinIrOpLayer **)&v155);
        Broadcast = (ZinIrOpLayer *)v155.__r_.__value_.__r.__words[0];
        v131 = (_QWORD *)v155.__r_.__value_.__r.__words[2];
        v132 = (_QWORD *)v155.__r_.__value_.__l.__size_;
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v180.__r_.__value_.__l.__data_);
        v75 = *(_QWORD *)(v133 + 56);
        if (v75 >= 2)
        {
          LODWORD(v180.__r_.__value_.__l.__data_) = 3;
          v180.__r_.__value_.__l.__size_ = v75;
          std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&v155, (int *)&v180, 1);
          Broadcast = ZinNMSLayer::GenerateBroadcast(a1, Broadcast, (uint64_t)&v155);
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v155);
        }
      }
      if (!v61)
        v61 = ZinNMSLayer::GenerateMaskedValueOverWidthDim((ZinNMSLayer *)a1, a4, v37);
      v76 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
      else
        v77 = v163.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v155, v77 + 7);
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v155;
      else
        v78 = (std::string *)v155.__r_.__value_.__r.__words[0];
      if (v77)
      {
        if (v76 >= 0)
          v79 = &v163;
        else
          v79 = (std::string *)v163.__r_.__value_.__r.__words[0];
        memmove(v78, v79, v77);
      }
      strcpy((char *)v78 + v77, "max_box");
      ZinNMSLayer::GenerateArea(a1, a2, v61, (const void **)&v155.__r_.__value_.__l.__data_, (ZinIrOpLayer **)&v162);
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      v81 = v162.__r_.__value_.__l.__size_;
      v80 = (ZinIrOpLayer *)v162.__r_.__value_.__r.__words[0];
      v82 = (*(uint64_t (**)(std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v162.__r_.__value_.__l.__size_
                                                                              + 32))(v162.__r_.__value_.__l.__size_, 0, 0);
      v181 = *(_OWORD *)(v82 + 48);
      v182 = *(_QWORD *)(v82 + 64);
      v83 = *(_QWORD *)(v82 + 80);
      v84 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v132 + 32))(v132, 0, 0) + 72);
      EW2 = ZinNMSLayer::GenerateEW2(a1, 7, v132, v81);
      v86 = ZinNMSLayer::GenerateEW2(a1, 8, v131, v162.__r_.__value_.__r.__words[2]);
      v87 = ZinNMSLayer::GenerateEW2(a1, 4, v86, (uint64_t)EW2);
      v158 = v181;
      v159 = v182;
      v160 = v84;
      v161 = v83;
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)&v155, 1);
      Activation = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v141, v134, (uint64_t)&v158, 3, (uint64_t)&v155);
      v178 = (_QWORD *)a1;
      v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
      v180.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v155, &v180);
      v89 = ZinIrOpLayerGraph::AddNode(a2, Activation, (ZinIrOpLayer ***)&v155);
      if (*(_BYTE *)(a1 + 232))
        v90 = v89;
      else
        v90 = 0;
      *(_BYTE *)(a1 + 232) = v90;
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v155.__r_.__value_.__l.__size_)
      {
        v155.__r_.__value_.__r.__words[2] = v155.__r_.__value_.__l.__size_;
        operator delete((void *)v155.__r_.__value_.__l.__size_);
      }
      v91 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v87, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (*(_BYTE *)(a1 + 232))
        v92 = v91;
      else
        v92 = 0;
      *(_BYTE *)(a1 + 232) = v92;
      v155.__r_.__value_.__r.__words[0] = *(_QWORD *)(v135 + 48);
      v155.__r_.__value_.__l.__size_ = 1;
      v155.__r_.__value_.__r.__words[2] = *(_QWORD *)(v133 + 56);
      v156 = v84;
      v157 = 1;
      v93 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
      else
        v94 = v163.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v180, v94 + 11);
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &v180;
      else
        v95 = (std::string *)v180.__r_.__value_.__r.__words[0];
      if (v94)
      {
        if (v93 >= 0)
          v96 = &v163;
        else
          v96 = (std::string *)v163.__r_.__value_.__r.__words[0];
        memmove(v95, v96, v94);
      }
      strcpy((char *)v95 + v94, "int_delta_c");
      v97 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0, 0);
      v151 = 0;
      memset(v150, 0, sizeof(v150));
      v152 = vdupq_n_s64(1uLL);
      v153 = v152;
      v154 = 1;
      View = (ZinIrOpLayer *)ZinBuilder::CreateView(v141, (uint64_t)&v180, v97, (__int128 *)&v155, (uint64_t)v150);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v180.__r_.__value_.__l.__data_);
      v177 = a1;
      v178 = &v177;
      v179 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v180, &v178);
      v99 = ZinIrOpLayerGraph::AddNode(a2, View, (ZinIrOpLayer ***)&v180);
      if (*(_BYTE *)(a1 + 232))
        v100 = v99;
      else
        v100 = 0;
      *(_BYTE *)(a1 + 232) = v100;
      v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v180.__r_.__value_.__l.__size_)
      {
        v180.__r_.__value_.__r.__words[2] = v180.__r_.__value_.__l.__size_;
        operator delete((void *)v180.__r_.__value_.__l.__size_);
      }
      v101 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Activation, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (*(_BYTE *)(a1 + 232))
        v102 = v101;
      else
        v102 = 0;
      *(_BYTE *)(a1 + 232) = v102;
      std::string::basic_string[abi:ne180100]((uint64_t)&v180, v94 + 13);
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = &v180;
      else
        v103 = (std::string *)v180.__r_.__value_.__r.__words[0];
      if (v94)
      {
        if (v93 >= 0)
          v104 = &v163;
        else
          v104 = (std::string *)v163.__r_.__value_.__r.__words[0];
        memmove(v103, v104, v94);
      }
      strcpy((char *)v103 + v94, "int_delta_h_c");
      v105 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v87 + 32))(v87, 0, 0);
      v144 = 0;
      v145 = 0;
      v146 = 0;
      v143 = xmmword_207A80930;
      v147 = vdupq_n_s64(1uLL);
      v148 = v147;
      v149 = 1;
      a6 = v129;
      v106 = (ZinIrOpLayer *)ZinBuilder::CreateView(v141, (uint64_t)&v180, v105, (__int128 *)&v155, (uint64_t)&v143);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v180.__r_.__value_.__l.__data_);
      v177 = a1;
      v178 = &v177;
      v179 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v180, &v178);
      v107 = ZinIrOpLayerGraph::AddNode(a2, v106, (ZinIrOpLayer ***)&v180);
      if (*(_BYTE *)(a1 + 232))
        v108 = v107;
      else
        v108 = 0;
      *(_BYTE *)(a1 + 232) = v108;
      v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v180.__r_.__value_.__l.__size_)
      {
        v180.__r_.__value_.__r.__words[2] = v180.__r_.__value_.__l.__size_;
        operator delete((void *)v180.__r_.__value_.__l.__size_);
      }
      v109 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Activation, (uint64_t)v106, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (*(_BYTE *)(a1 + 232))
        v110 = v109;
      else
        v110 = 0;
      *(_BYTE *)(a1 + 232) = v110;
      v111 = ZinNMSLayer::GenerateEW2(a1, 2, View, (uint64_t)v106);
      v112 = *(_QWORD *)(v135 + 72);
      if (v112 >= 2)
      {
        LODWORD(v180.__r_.__value_.__l.__data_) = 4;
        v180.__r_.__value_.__l.__size_ = v112;
        std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)&v155, (int *)&v180, 1);
        v80 = ZinNMSLayer::GenerateBroadcast(a1, v80, (uint64_t)&v155);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v155);
      }
      TransposeHC = ZinNMSLayer::GenerateTransposeHC((ZinNMSLayer *)a1, v111);
      v114 = ZinNMSLayer::GenerateEW2(a1, 1, Broadcast, (uint64_t)v80);
      v115 = ZinNMSLayer::GenerateTransposeHC((ZinNMSLayer *)a1, v114);
      v116 = *(float *)(v130 + 24);
      v117 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v115 + 32))(v115, 0, 0);
      ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v141, v134, v117, 3, 0, 0, 1, v116 / (float)(v116 + 1.0), 0.0);
      *(_QWORD *)&v181 = a1;
      v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
      v180.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v155, &v180);
      v119 = ZinIrOpLayerGraph::AddNode(a2, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)&v155);
      if (*(_BYTE *)(a1 + 232))
        v120 = v119;
      else
        v120 = 0;
      *(_BYTE *)(a1 + 232) = v120;
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v155.__r_.__value_.__l.__size_)
      {
        v155.__r_.__value_.__r.__words[2] = v155.__r_.__value_.__l.__size_;
        operator delete((void *)v155.__r_.__value_.__l.__size_);
      }
      v121 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v115, (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (*(_BYTE *)(a1 + 232))
        v122 = v121;
      else
        v122 = 0;
      *(_BYTE *)(a1 + 232) = v122;
      v123 = ZinNMSLayer::GenerateEW2(a1, 18, TransposeHC, (uint64_t)ConstScaleAndBiasGOC);
      a5 = ZinNMSLayer::GenerateEW2(a1, 2, a5, (uint64_t)v123);
    }
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
  }
  while (v15++ != v140);
LABEL_200:
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  if ((void **)(a7 + 24) != &__src)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a7 + 24), (char *)__src, (uint64_t)v165, ((_BYTE *)v165 - (_BYTE *)__src) >> 3);
  if (*(_QWORD *)(a1 + 256) || *(uint64_t *)(v133 + 56) >= 2 && !*(_BYTE *)(*(_QWORD *)(a1 + 64) + 29))
    *(_QWORD *)(a7 + 16) = ZinNMSLayer::GenerateConcat(a1, (uint64_t *)&v167, 4);
  if (*(_QWORD *)(a1 + 240))
    *(_QWORD *)a7 = ZinNMSLayer::GenerateConcat(a1, (uint64_t *)&v173, 4);
  if (*(_QWORD *)(a1 + 248))
    *(_QWORD *)(a7 + 8) = ZinNMSLayer::GenerateConcat(a1, (uint64_t *)&v170, 4);
  if (__src)
  {
    v165 = __src;
    operator delete(__src);
  }
  if (v167)
  {
    __p = v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  v125 = v176;
  if (v176)
  {
    v126 = (unint64_t *)&v176->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
}

void sub_206F1832C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v1 - 216);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinNMSLayer::GenerateMaxScoreMask(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, const void **a6)
{
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  void **v16;
  const void *v17;
  ZinIrOpLayer *DisambiguationVector;
  uint64_t v19;
  uint64_t v20;
  ZinIrOpLayer *EW2;
  ZinIrOpLayer *v23;
  ZinIrOpLayer *Reduction;
  int v27;
  void *__p[2];
  __int128 v29;
  int v30;
  int *v31;

  v11 = *(_QWORD *)(a1 + 16);
  v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a5 + 32))(a5, 0, 0);
  v13 = v12[9];
  v14 = *(_QWORD *)(a3 + 8);
  if (*((char *)a6 + 23) >= 0)
    v15 = *((unsigned __int8 *)a6 + 23);
  else
    v15 = (size_t)a6[1];
  v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 25);
  if (SBYTE7(v29) < 0)
    v16 = (void **)__p[0];
  if (v15)
  {
    if (*((char *)a6 + 23) >= 0)
      v17 = a6;
    else
      v17 = *a6;
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "nms_disambiguation_vector");
  DisambiguationVector = ZinConstantTensorManager::CreateDisambiguationVector(v14, v13, (__int128 *)__p, a2, v11, a1);
  if (SBYTE7(v29) < 0)
    operator delete(__p[0]);
  v20 = v12[6];
  v19 = v12[7];
  if (v20 > 1 || v19 >= 2)
  {
    *(_OWORD *)__p = 0u;
    v29 = 0u;
    v30 = 1065353216;
    if (v20 >= 2)
    {
      v27 = 0;
      v31 = &v27;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)__p, &v27, (uint64_t)&std::piecewise_construct, &v31)[3] = v20;
      v19 = v12[7];
    }
    if (v19 >= 2)
    {
      v27 = 2;
      v31 = &v27;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)__p, &v27, (uint64_t)&std::piecewise_construct, &v31)[3] = v19;
    }
    DisambiguationVector = ZinNMSLayer::GenerateBroadcast(a1, DisambiguationVector, (uint64_t)__p);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)__p);
  }
  EW2 = ZinNMSLayer::GenerateEW2(a1, 16, a5, a4);
  v23 = ZinNMSLayer::GenerateEW2(a1, 2, EW2, (uint64_t)DisambiguationVector);
  Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 4u, v23);
  return ZinNMSLayer::GenerateEW2(a1, 16, v23, (uint64_t)Reduction);
}

void sub_206F18740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinNMSLayer::GenerateIndexFromMask(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  ZinIrOpLayer *ConstIndexVector;
  uint64_t v15;
  uint64_t v16;
  ZinIrOpLayer *EW2;
  ZinIrOpLayer *Reduction;
  int v21;
  _BYTE v22[32];
  int v23;
  void *__p[2];
  std::string::size_type v25;
  int *v26;

  if (!a4)
    ZinAssertImpl("NMS: mask==nullptr for GenerateIndexFromMask.");
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 32))(a4, 0, 0);
  std::to_string((std::string *)v22, v9[9]);
  v10 = std::string::insert((std::string *)v22, 0, "const_index_", 0xCuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v25 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v22[23] & 0x80000000) != 0)
    operator delete(*(void **)v22);
  v12 = *(_QWORD *)(a1 + 240);
  if (v12)
    v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0) + 88);
  else
    v13 = 3;
  ConstIndexVector = ZinConstantTensorManager::CreateConstIndexVector(*(_QWORD *)(a3 + 8), v9[9], (__int128 *)__p, a2, v8, a1, v13, 3);
  v16 = v9[6];
  v15 = v9[7];
  if (v16 > 1 || v15 >= 2)
  {
    memset(v22, 0, sizeof(v22));
    v23 = 1065353216;
    if (v16 >= 2)
    {
      v21 = 0;
      v26 = &v21;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v22, &v21, (uint64_t)&std::piecewise_construct, &v26)[3] = v16;
      v15 = v9[7];
    }
    if (v15 >= 2)
    {
      v21 = 2;
      v26 = &v21;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v22, &v21, (uint64_t)&std::piecewise_construct, &v26)[3] = v15;
    }
    ConstIndexVector = ZinNMSLayer::GenerateBroadcast(a1, ConstIndexVector, (uint64_t)v22);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
  }
  EW2 = ZinNMSLayer::GenerateEW2(a1, 2, a4, (uint64_t)ConstIndexVector);
  Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 4u, EW2);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  return Reduction;
}

void sub_206F18968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_206F189A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    JUMPOUT(0x206F1899CLL);
  JUMPOUT(0x206F189A0);
}

ZinIrOpLayer *ZinNMSLayer::GenerateMaskedValueOverWidthDim(ZinNMSLayer *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3)
{
  uint64_t v6;
  ZinIrOpLayer *TransposeHC;
  uint64_t v8;
  uint64_t v9;
  ZinIrOpLayer *EW2;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[40];
  int v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (!a3)
      ZinAssertImpl("NMS: mask==nullptr for GenerateMaskedValueOverWidthDim.");
    v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    TransposeHC = ZinNMSLayer::GenerateTransposeHC(this, a3);
    v8 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)TransposeHC + 32))(TransposeHC, 0, 0);
    v9 = *(_QWORD *)(v6 + 56);
    if (v9 > *(_QWORD *)(v8 + 56))
    {
      v21 = 2;
      v22 = v9;
      std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)v20, &v21, 1);
      TransposeHC = ZinNMSLayer::GenerateBroadcast((uint64_t)this, TransposeHC, (uint64_t)v20);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v20);
    }
    EW2 = ZinNMSLayer::GenerateEW2((uint64_t)this, 2, a2, (uint64_t)TransposeHC);
    return ZinNMSLayer::GenerateReduction((uint64_t)this, 2, 4u, EW2);
  }
  else
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinNMSLayer::GenerateMaskedValueOverWidthDim(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
}

void sub_206F18B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ZinIrOpLayer *ZinNMSLayer::GenerateArea@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, const void **a4@<X3>, ZinIrOpLayer **a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  __int128 *p_p;
  const void *v13;
  uint64_t v14;
  ZinIrOpLayer *View;
  BOOL v16;
  BOOL v17;
  char v18;
  char v19;
  size_t v20;
  __int128 *v21;
  const void *v22;
  uint64_t v23;
  ZinIrOpLayer *v24;
  BOOL v25;
  BOOL v26;
  char v27;
  char v28;
  ZinIrOpLayer *EW2;
  size_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  ZinIrOpLayer *v34;
  BOOL v35;
  BOOL v36;
  char v37;
  char v38;
  size_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  ZinIrOpLayer *v43;
  BOOL v44;
  BOOL v45;
  char v46;
  char v47;
  ZinIrOpLayer *result;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  int64x2_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  _OWORD v60[2];
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  uint64_t v64;
  __int128 __p;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  int64x2_t v77;
  int64x2_t v78;
  uint64_t v79;
  __int128 v80[2];
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v9 = a3[2];
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 32))(a3, 0, 0);
  *(_QWORD *)&v80[0] = *(_QWORD *)(v10 + 48);
  *((_QWORD *)&v80[0] + 1) = 2;
  v80[1] = *(_OWORD *)(v10 + 64);
  v81 = 1;
  if (*((char *)a4 + 23) >= 0)
    v11 = *((unsigned __int8 *)a4 + 23);
  else
    v11 = (size_t)a4[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 5);
  if ((SBYTE7(v66) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v11)
  {
    if (*((char *)a4 + 23) >= 0)
      v13 = a4;
    else
      v13 = *a4;
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, "_x1y1");
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 32))(a3, 0, 0);
  memset(v75, 0, sizeof(v75));
  v77 = vdupq_n_s64(1uLL);
  v78 = v77;
  v76 = 0;
  v79 = 1;
  View = (ZinIrOpLayer *)ZinBuilder::CreateView(v9, (uint64_t)&__p, v14, v80, (uint64_t)v75);
  if (SBYTE7(v66) < 0)
    operator delete((void *)__p);
  v83 = (_QWORD *)a1;
  v57 = &v83;
  v58 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v57);
  v16 = ZinIrOpLayerGraph::AddNode(a2, View, (ZinIrOpLayer ***)&__p);
  if (*(_BYTE *)(a1 + 232))
    v17 = v16;
  else
    v17 = 0;
  *(_BYTE *)(a1 + 232) = v17;
  *(_QWORD *)&__p = &unk_24C02BB18;
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v66 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  v18 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)a3, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 232))
    v19 = v18;
  else
    v19 = 0;
  *(_BYTE *)(a1 + 232) = v19;
  if (*((char *)a4 + 23) >= 0)
    v20 = *((unsigned __int8 *)a4 + 23);
  else
    v20 = (size_t)a4[1];
  v21 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v20 + 5);
  if (SBYTE7(v66) < 0)
    v21 = (__int128 *)__p;
  if (v20)
  {
    if (*((char *)a4 + 23) >= 0)
      v22 = a4;
    else
      v22 = *a4;
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "_x2y2");
  v23 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 32))(a3, 0, 0);
  v69 = 0;
  v70 = 0;
  v68 = xmmword_207A80470;
  v72 = vdupq_n_s64(1uLL);
  v73 = v72;
  v71 = 0;
  v74 = 1;
  v24 = (ZinIrOpLayer *)ZinBuilder::CreateView(v9, (uint64_t)&__p, v23, v80, (uint64_t)&v68);
  if (SBYTE7(v66) < 0)
    operator delete((void *)__p);
  v83 = (_QWORD *)a1;
  v57 = &v83;
  v58 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v57);
  v25 = ZinIrOpLayerGraph::AddNode(a2, v24, (ZinIrOpLayer ***)&__p);
  if (*(_BYTE *)(a1 + 232))
    v26 = v25;
  else
    v26 = 0;
  *(_BYTE *)(a1 + 232) = v26;
  *(_QWORD *)&__p = &unk_24C02BB18;
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v66 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  v27 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)a3, (uint64_t)v24, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 232))
    v28 = v27;
  else
    v28 = 0;
  *(_BYTE *)(a1 + 232) = v28;
  EW2 = ZinNMSLayer::GenerateEW2(a1, 4, v24, (uint64_t)View);
  *(_QWORD *)&__p = *(_QWORD *)(v10 + 48);
  *((_QWORD *)&__p + 1) = 1;
  v66 = *(_OWORD *)(v10 + 64);
  v67 = 1;
  if (*((char *)a4 + 23) >= 0)
    v30 = *((unsigned __int8 *)a4 + 23);
  else
    v30 = (size_t)a4[1];
  v31 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, v30 + 2);
  if (SHIBYTE(v59) < 0)
    v31 = v57;
  if (v30)
  {
    if (*((char *)a4 + 23) >= 0)
      v32 = a4;
    else
      v32 = *a4;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, "_w");
  v33 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)EW2 + 32))(EW2, 0, 0);
  memset(v60, 0, sizeof(v60));
  v62 = vdupq_n_s64(1uLL);
  v63 = v62;
  v61 = 0;
  v64 = 1;
  v34 = (ZinIrOpLayer *)ZinBuilder::CreateView(v9, (uint64_t)&v57, v33, &__p, (uint64_t)v60);
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
  v82 = a1;
  v83 = &v82;
  v84 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v57, &v83);
  v35 = ZinIrOpLayerGraph::AddNode(a2, v34, (ZinIrOpLayer ***)&v57);
  if (*(_BYTE *)(a1 + 232))
    v36 = v35;
  else
    v36 = 0;
  *(_BYTE *)(a1 + 232) = v36;
  v57 = &unk_24C02BB18;
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  v37 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)EW2, (uint64_t)v34, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 232))
    v38 = v37;
  else
    v38 = 0;
  *(_BYTE *)(a1 + 232) = v38;
  if (*((char *)a4 + 23) >= 0)
    v39 = *((unsigned __int8 *)a4 + 23);
  else
    v39 = (size_t)a4[1];
  v40 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, v39 + 2);
  if (SHIBYTE(v59) < 0)
    v40 = v57;
  if (v39)
  {
    if (*((char *)a4 + 23) >= 0)
      v41 = a4;
    else
      v41 = *a4;
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, "_h");
  v42 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)EW2 + 32))(EW2, 0, 0);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v50 = xmmword_207A80930;
  v54 = vdupq_n_s64(1uLL);
  v55 = v54;
  v56 = 1;
  v43 = (ZinIrOpLayer *)ZinBuilder::CreateView(v9, (uint64_t)&v57, v42, &__p, (uint64_t)&v50);
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
  v82 = a1;
  v83 = &v82;
  v84 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v57, &v83);
  v44 = ZinIrOpLayerGraph::AddNode(a2, v43, (ZinIrOpLayer ***)&v57);
  if (*(_BYTE *)(a1 + 232))
    v45 = v44;
  else
    v45 = 0;
  *(_BYTE *)(a1 + 232) = v45;
  v57 = &unk_24C02BB18;
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  v46 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)EW2, (uint64_t)v43, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 232))
    v47 = v46;
  else
    v47 = 0;
  *(_BYTE *)(a1 + 232) = v47;
  result = ZinNMSLayer::GenerateEW2(a1, 2, v34, (uint64_t)v43);
  *a5 = result;
  a5[1] = View;
  a5[2] = v24;
  return result;
}

void sub_206F191A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateBroadcast(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  ZinIrOpLayer *Broadcast;
  BOOL v15;
  BOOL v16;
  char v17;
  char v18;
  void *__p;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = a2[2];
  v7 = (uint64_t **)a2[19];
  v8 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  (*(void (**)(void **__return_ptr, _QWORD *, _QWORD, _QWORD))(*a2 + 80))(v24, a2, 0, 0);
  v9 = (char *)operator new(0x78uLL);
  __p = v9;
  v22 = v9 + 120;
  *((_DWORD *)v9 + 28) = v31;
  v10 = v30;
  v11 = v28;
  *((_OWORD *)v9 + 5) = v29;
  *((_OWORD *)v9 + 6) = v10;
  v12 = v25;
  *(_OWORD *)v9 = *(_OWORD *)v24;
  *((_OWORD *)v9 + 1) = v12;
  v13 = v27;
  *((_OWORD *)v9 + 2) = v26;
  *((_OWORD *)v9 + 3) = v13;
  *((_OWORD *)v9 + 4) = v11;
  v21 = (uint64_t)(v9 + 120);
  Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v6, a1 + 192, (uint64_t *)&__p, a3, *(_DWORD *)(v8 + 88));
  if (__p)
  {
    v21 = (uint64_t)__p;
    operator delete(__p);
  }
  v23 = a1;
  __p = &v23;
  v21 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v24, &__p);
  v15 = ZinIrOpLayerGraph::AddNode(v7, Broadcast, (ZinIrOpLayer ***)v24);
  if (*(_BYTE *)(a1 + 232))
    v16 = v15;
  else
    v16 = 0;
  *(_BYTE *)(a1 + 232) = v16;
  v24[0] = &unk_24C02BB18;
  if (v24[1])
  {
    *(void **)&v25 = v24[1];
    operator delete(v24[1]);
  }
  v17 = ZinIrOpLayerGraph::AddEdge((uint64_t)v7, (uint64_t)a2, (uint64_t)Broadcast, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 232))
    v18 = v17;
  else
    v18 = 0;
  *(_BYTE *)(a1 + 232) = v18;
  return Broadcast;
}

void sub_206F193E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateEW2(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  int64x2_t *v10;
  int64x2_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ZinIrOpLayer *ElementWiseLayer;
  int8x16_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  BOOL v33;
  _QWORD *v34;
  char v35;
  char v36;
  void *__p;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40[2];
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[6];
  _OWORD v51[2];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v8 = a3[2];
  v9 = (uint64_t **)a3[19];
  v10 = (int64x2_t *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 32))(a3, 0, 0);
  v11 = (int64x2_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  if ((a2 - 9) < 7 || a2 == 3 || !a2)
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinNMSLayer::GenerateEW2(v12, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  else
  {
    v22 = vbslq_s8((int8x16_t)vcgtq_s64(v10[4], v11[4]), (int8x16_t)v10[4], (int8x16_t)v11[4]);
    v40[0] = (__int128)vbslq_s8((int8x16_t)vcgtq_s64(v10[3], v11[3]), (int8x16_t)v10[3], (int8x16_t)v11[3]);
    v40[1] = (__int128)v22;
    v23 = v10[5].i64[0];
    if (v23 <= v11[5].i64[0])
      v23 = v11[5].i64[0];
    v41 = v23;
    (*(void (**)(void **__return_ptr, _QWORD *, _QWORD, _QWORD))(*a3 + 80))(v43, a3, 0, 0);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 80))((_QWORD *)v50 + 1, a4, 0, 0);
    v24 = operator new(0xF0uLL);
    __p = v24;
    v39 = v24 + 15;
    v25 = v51[0];
    v24[12] = v50[5];
    v24[13] = v25;
    *(_OWORD *)((char *)v24 + 220) = *(_OWORD *)((char *)v51 + 12);
    v26 = v50[2];
    v24[8] = v50[1];
    v24[9] = v26;
    v27 = v50[4];
    v24[10] = v50[3];
    v24[11] = v27;
    v28 = v48;
    v24[4] = v47;
    v24[5] = v28;
    v29 = v50[0];
    v24[6] = v49;
    v24[7] = v29;
    v30 = v44;
    *v24 = *(_OWORD *)v43;
    v24[1] = v30;
    v31 = v46;
    v24[2] = v45;
    v24[3] = v31;
    v38 = (uint64_t)(v24 + 15);
    ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v8, a1 + 192, a2, (uint64_t)&__p, v40, v10[5].i32[2]);
    if (__p)
    {
      v38 = (uint64_t)__p;
      operator delete(__p);
    }
    v42 = a1;
    __p = &v42;
    v38 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(v43, &__p);
    v32 = ZinIrOpLayerGraph::AddNode(v9, ElementWiseLayer, (ZinIrOpLayer ***)v43);
    if (*(_BYTE *)(a1 + 232))
      v33 = v32;
    else
      v33 = 0;
    *(_BYTE *)(a1 + 232) = v33;
    v43[0] = &unk_24C02BB18;
    if (v43[1])
    {
      *(void **)&v44 = v43[1];
      operator delete(v43[1]);
    }
    v34 = operator new(0x10uLL);
    v43[0] = v34;
    *(_QWORD *)&v44 = v34 + 2;
    *v34 = a3;
    v34[1] = a4;
    v43[1] = v34 + 2;
    v35 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)v9, (uint64_t *)v43, (uint64_t)ElementWiseLayer);
    if (*(_BYTE *)(a1 + 232))
      v36 = v35;
    else
      v36 = 0;
    *(_BYTE *)(a1 + 232) = v36;
    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }
  }
  return ElementWiseLayer;
}

void sub_206F196F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateTransposeHC(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  _OWORD *v7;
  ZinIrOpLayer *Transpose;
  BOOL v9;
  BOOL v10;
  char v11;
  char v12;
  _QWORD v14[2];
  ZinIrOpLayer **v15;
  void *__p;
  void *v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = (uint64_t **)*((_QWORD *)a2 + 19);
  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = operator new(0x10uLL);
  v18 = v7;
  *v7 = xmmword_207A7E790;
  v19 = v7 + 1;
  v20 = v7 + 1;
  Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v4, (uint64_t)this + 192, v6 + 48, *(_DWORD *)(v6 + 88), (uint64_t)&v18);
  v21[0] = this;
  v14[0] = v21;
  v14[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v15, v14);
  v9 = ZinIrOpLayerGraph::AddNode(v5, Transpose, &v15);
  if (*((_BYTE *)this + 232))
    v10 = v9;
  else
    v10 = 0;
  *((_BYTE *)this + 232) = v10;
  v15 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v11 = ZinIrOpLayerGraph::AddEdge((uint64_t)v5, (uint64_t)a2, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*((_BYTE *)this + 232))
    v12 = v11;
  else
    v12 = 0;
  *((_BYTE *)this + 232) = v12;
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  return Transpose;
}

void sub_206F198A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t ZinNMSLayer::GenerateConcat(uint64_t a1, uint64_t *a2, int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int64x2_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t **v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unsigned int v43;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  ZinIrOpLayer **v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *__p;
  uint64_t *v59;
  char *v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  _QWORD v64[3];

  v64[1] = *MEMORY[0x24BDAC8D0];
  v3 = (char *)*a2;
  v4 = a2[1] - *a2;
  v5 = v4 >> 3;
  if (!(v4 >> 3))
    return 0;
  if (v5 == 1)
    return *(_QWORD *)v3;
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v3 + 32))(*(_QWORD *)v3, 0, 0);
  if (v4 >= 9)
  {
    v10 = 2;
    if (v5 > 2)
      v10 = v4 >> 3;
    v11 = 8 * v10;
    v12 = 8;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*a2 + v12) + 32))(*(_QWORD *)(*a2 + v12), 0, 0);
      if (!ZinTensorDimensionsEqual(v9 + 6, (_QWORD *)(v13 + 48)))
        ZinAssertImpl("NMS: concat input shapes are different.");
      v12 += 8;
    }
    while (v11 != v12);
  }
  v61 = vdupq_n_s64(1uLL);
  v62 = v61;
  v63 = 1;
  switch(a3)
  {
    case 0:
      v49 = 0;
      v50 = 0;
      v47 = 0;
      v48 = 0;
      v14 = v9[7];
      v15 = v9[8];
      v16 = v9[9];
      v17 = v9[10];
      v61.i64[0] = v9[6] * v5;
      v18 = 5;
      v46 = 1;
      goto LABEL_17;
    case 1:
      v49 = 0;
      v50 = 0;
      v46 = 0;
      v14 = v9[7];
      v15 = v9[8];
      v16 = v9[9];
      v17 = v9[10] * v5;
      v61.i64[0] = v9[6];
      v18 = 4;
      v47 = 1;
      v48 = 0;
      goto LABEL_17;
    case 2:
      v49 = 0;
      v50 = 0;
      v46 = 0;
      v47 = 0;
      v18 = 0;
      v14 = v9[7] * v5;
      v15 = v9[8];
      v16 = v9[9];
      v17 = v9[10];
      v61.i64[0] = v9[6];
      v48 = 1;
      goto LABEL_17;
    case 3:
      v47 = 0;
      v48 = 0;
      v46 = 0;
      v14 = v9[7];
      v16 = v9[9];
      v15 = v9[8] * v5;
      v17 = v9[10];
      v61.i64[0] = v9[6];
      v18 = 2;
      v49 = 1;
      v50 = 0;
      goto LABEL_17;
    case 4:
      v48 = 0;
      v49 = 0;
      v46 = 0;
      v47 = 0;
      v14 = v9[7];
      v15 = v9[8];
      v16 = v9[9] * v5;
      v17 = v9[10];
      v61.i64[0] = v9[6];
      v18 = 3;
      v50 = 1;
LABEL_17:
      v61.i64[1] = v14;
      v62.i64[0] = v15;
      v62.i64[1] = v16;
      v63 = v17;
      break;
    case 5:
      ZinAssertImpl("Invalid axis to concat.");
    default:
      v49 = 0;
      v50 = 0;
      v47 = 0;
      v48 = 0;
      v46 = 0;
      v18 = 0;
      break;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(&__p, v4 >> 3);
  v43 = v18;
  if (v4 >= 1)
  {
    v19 = 0;
    if (v5 <= 1)
      v5 = 1;
    v20 = v59;
    v45 = vdupq_n_s64(1uLL);
    do
    {
      v21 = v19 * v46;
      v22 = v19 * v48;
      v23 = v19 * v49;
      v24 = v19 * v50;
      v25 = v19 * v47;
      if (v20 >= (uint64_t *)v60)
      {
        v26 = (uint64_t *)__p;
        v27 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (_BYTE *)__p) >> 4);
        v28 = v27 + 1;
        if (v27 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v60 - (_BYTE *)__p) >> 4) > v28)
          v28 = 0x999999999999999ALL * ((v60 - (_BYTE *)__p) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v60 - (_BYTE *)__p) >> 4) >= 0x199999999999999)
          v29 = 0x333333333333333;
        else
          v29 = v28;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v60, v29);
          v26 = (uint64_t *)__p;
          v20 = v59;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[80 * v27];
        *(_QWORD *)v31 = v21;
        *((_QWORD *)v31 + 1) = v22;
        *((_QWORD *)v31 + 2) = v23;
        *((_QWORD *)v31 + 3) = v24;
        *((_QWORD *)v31 + 4) = v25;
        v32 = vdupq_n_s64(1uLL);
        *(int64x2_t *)(v31 + 40) = v32;
        *(int64x2_t *)(v31 + 56) = v32;
        *((_QWORD *)v31 + 9) = 1;
        if (v20 == v26)
        {
          v37 = &v30[80 * v27];
        }
        else
        {
          v33 = &v30[80 * v27];
          do
          {
            *((_OWORD *)v33 - 5) = *((_OWORD *)v20 - 5);
            v34 = *((_OWORD *)v20 - 4);
            v35 = *((_OWORD *)v20 - 3);
            v36 = *((_OWORD *)v20 - 1);
            v37 = v33 - 80;
            *((_OWORD *)v33 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v33 - 1) = v36;
            *((_OWORD *)v33 - 4) = v34;
            *((_OWORD *)v33 - 3) = v35;
            v20 -= 10;
            v33 -= 80;
          }
          while (v20 != v26);
        }
        v20 = (uint64_t *)(v31 + 80);
        __p = v37;
        v59 = (uint64_t *)(v31 + 80);
        v60 = &v30[80 * v29];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v20 = v21;
        v20[1] = v22;
        v20[2] = v23;
        v20[3] = v24;
        v20[4] = v25;
        *(int64x2_t *)(v20 + 5) = v45;
        *(int64x2_t *)(v20 + 7) = v45;
        v20[9] = 1;
        v20 += 10;
      }
      v59 = v20;
      ++v19;
    }
    while (v19 != v5);
  }
  v38 = *(uint64_t ***)(*(_QWORD *)*a2 + 152);
  v39 = *(_QWORD *)(a1 + 16);
  v55 = 0;
  ZinBuilder::CreateConcat(v39, a1 + 192, (__int128 *)v61.i8, (_QWORD **)a2, (uint64_t)&__p, v43, 1, &v55, (void **)&v56, 0);
  v40 = v55;
  v55 = 0;
  if (v40)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v55, v40);
  v64[0] = a1;
  v51[0] = v64;
  v51[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v52, v51);
  v41 = ZinBuilder::AddConcatToGraph(v38, a2, &v56, &v52);
  v52 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if ((v41 & 1) == 0)
    ZinAssertImpl("NMS: concat failed");
  v6 = *(v57 - 1);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (__p)
  {
    v59 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v6;
}

void sub_206F19DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateTransposeCW(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  ZinIrOpLayer *Transpose;
  BOOL v27;
  BOOL v28;
  char v29;
  char v30;
  _QWORD v32[2];
  ZinIrOpLayer **v33;
  void *v34;
  void *v35;
  void *__p;
  char *v37;
  char *v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = (uint64_t **)*((_QWORD *)a2 + 19);
  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  __p = 0;
  v37 = 0;
  v38 = 0;
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v38, 1uLL);
  v9 = &v8[8 * v7];
  *(_QWORD *)v8 = 0x400000002;
  v10 = v8 + 8;
  v12 = (char *)__p;
  v11 = v37;
  v13 = v8;
  if (v37 != __p)
  {
    do
    {
      v14 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *((_QWORD *)v13 - 1) = v14;
      v13 -= 8;
    }
    while (v11 != v12);
    v11 = (char *)__p;
  }
  __p = v13;
  v37 = v8 + 8;
  v38 = &v8[8 * v7];
  if (v11)
  {
    operator delete(v11);
    v9 = v38;
  }
  v37 = v8 + 8;
  if (v10 >= v9)
  {
    v16 = (v10 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v17 = v9 - (_BYTE *)__p;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v38, v19);
    else
      v20 = 0;
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    *(_QWORD *)v21 = 0x200000004;
    v15 = v21 + 8;
    v24 = (char *)__p;
    v23 = v37;
    if (v37 != __p)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)__p;
    }
    __p = v21;
    v37 = v15;
    v38 = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *((_QWORD *)v8 + 1) = 0x200000004;
    v15 = v8 + 16;
  }
  v37 = v15;
  Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v4, (uint64_t)this + 192, v6 + 48, *(_DWORD *)(v6 + 88), (uint64_t)&__p);
  v39[0] = this;
  v32[0] = v39;
  v32[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v33, v32);
  v27 = ZinIrOpLayerGraph::AddNode(v5, Transpose, &v33);
  if (*((_BYTE *)this + 232))
    v28 = v27;
  else
    v28 = 0;
  *((_BYTE *)this + 232) = v28;
  v33 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v29 = ZinIrOpLayerGraph::AddEdge((uint64_t)v5, (uint64_t)a2, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*((_BYTE *)this + 232))
    v30 = v29;
  else
    v30 = 0;
  *((_BYTE *)this + 232) = v30;
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
  return Transpose;
}

void sub_206F1A0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateReshapeCtoW(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  ZinIrOpLayer *v12;
  BOOL v13;
  BOOL v14;
  char v15;
  char v16;
  void *v18;
  uint64_t v19;
  char *v20;
  void *__p;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = (uint64_t **)*((_QWORD *)a2 + 19);
  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = *(_OWORD *)(v6 + 64);
  v24 = *(_OWORD *)(v6 + 48);
  v25 = v7;
  v8 = *(_QWORD *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 72) * *(_QWORD *)(v6 + 56);
  *((_QWORD *)&v24 + 1) = 1;
  *((_QWORD *)&v25 + 1) = v9;
  v26 = v8;
  v10 = *(_DWORD *)(v6 + 88);
  v11 = operator new(0x14uLL);
  v19 = (uint64_t)(v11 + 5);
  v20 = (char *)(v11 + 5);
  v11[4] = 4;
  *(_OWORD *)v11 = xmmword_207AA9DC8;
  v18 = v11;
  DimensionOrderHint::DimensionOrderHint(&__p, &v18);
  v12 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v4, (uint64_t)this + 192, v6 + 48, v10, &v24, (const DimensionOrderHint *)&__p);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = (uint64_t)v18;
    operator delete(v18);
  }
  v27[0] = this;
  v18 = v27;
  v19 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v18);
  v13 = ZinIrOpLayerGraph::AddNode(v5, v12, (ZinIrOpLayer ***)&__p);
  if (*((_BYTE *)this + 232))
    v14 = v13;
  else
    v14 = 0;
  *((_BYTE *)this + 232) = v14;
  __p = &unk_24C02BB18;
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  v15 = ZinIrOpLayerGraph::AddEdge((uint64_t)v5, (uint64_t)a2, (uint64_t)v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*((_BYTE *)this + 232))
    v16 = v15;
  else
    v16 = 0;
  *((_BYTE *)this + 232) = v16;
  return v12;
}

void sub_206F1A2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateReshapeHtoW(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  ZinIrOpLayer *v12;
  BOOL v13;
  BOOL v14;
  char v15;
  char v16;
  void *v18;
  uint64_t v19;
  char *v20;
  void *__p;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = (uint64_t **)*((_QWORD *)a2 + 19);
  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = *(_OWORD *)(v6 + 64);
  v24 = *(_OWORD *)(v6 + 48);
  v25 = v7;
  v8 = *(_QWORD *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 72) * *(_QWORD *)(v6 + 64);
  *(_QWORD *)&v25 = 1;
  *((_QWORD *)&v25 + 1) = v9;
  v26 = v8;
  v10 = *(_DWORD *)(v6 + 88);
  v11 = operator new(0x14uLL);
  v19 = (uint64_t)(v11 + 5);
  v20 = (char *)(v11 + 5);
  v11[4] = 4;
  *(_OWORD *)v11 = xmmword_207AA9DC8;
  v18 = v11;
  DimensionOrderHint::DimensionOrderHint(&__p, &v18);
  v12 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v4, (uint64_t)this + 192, v6 + 48, v10, &v24, (const DimensionOrderHint *)&__p);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = (uint64_t)v18;
    operator delete(v18);
  }
  v27[0] = this;
  v18 = v27;
  v19 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v18);
  v13 = ZinIrOpLayerGraph::AddNode(v5, v12, (ZinIrOpLayer ***)&__p);
  if (*((_BYTE *)this + 232))
    v14 = v13;
  else
    v14 = 0;
  *((_BYTE *)this + 232) = v14;
  __p = &unk_24C02BB18;
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  v15 = ZinIrOpLayerGraph::AddEdge((uint64_t)v5, (uint64_t)a2, (uint64_t)v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*((_BYTE *)this + 232))
    v16 = v15;
  else
    v16 = 0;
  *((_BYTE *)this + 232) = v16;
  return v12;
}

void sub_206F1A508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateReshapeHtoC(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  _DWORD *v9;
  ZinIrOpLayer *v10;
  BOOL v11;
  BOOL v12;
  char v13;
  char v14;
  void *v16;
  uint64_t v17;
  char *v18;
  void *__p;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = (uint64_t **)*((_QWORD *)a2 + 19);
  v6 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v7 = *(_OWORD *)(v6 + 64);
  v22 = *(_OWORD *)(v6 + 48);
  v23 = v7;
  v24 = *(_QWORD *)(v6 + 80);
  *((_QWORD *)&v22 + 1) = *(_QWORD *)(v6 + 64) * *(_QWORD *)(v6 + 56);
  *(_QWORD *)&v23 = 1;
  v8 = *(_DWORD *)(v6 + 88);
  v9 = operator new(0x14uLL);
  v17 = (uint64_t)(v9 + 5);
  v18 = (char *)(v9 + 5);
  v9[4] = 4;
  *(_OWORD *)v9 = xmmword_207AA9DC8;
  v16 = v9;
  DimensionOrderHint::DimensionOrderHint(&__p, &v16);
  v10 = (ZinIrOpLayer *)ZinBuilder::CreateReshape(v4, (uint64_t)this + 192, v6 + 48, v8, &v22, (const DimensionOrderHint *)&__p);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = (uint64_t)v16;
    operator delete(v16);
  }
  v25[0] = this;
  v16 = v25;
  v17 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v16);
  v11 = ZinIrOpLayerGraph::AddNode(v5, v10, (ZinIrOpLayer ***)&__p);
  if (*((_BYTE *)this + 232))
    v12 = v11;
  else
    v12 = 0;
  *((_BYTE *)this + 232) = v12;
  __p = &unk_24C02BB18;
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v13 = ZinIrOpLayerGraph::AddEdge((uint64_t)v5, (uint64_t)a2, (uint64_t)v10, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*((_BYTE *)this + 232))
    v14 = v13;
  else
    v14 = 0;
  *((_BYTE *)this + 232) = v14;
  return v10;
}

void sub_206F1A718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinNMSLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t *GroupId;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v6 = operator new();
  v7 = *((_QWORD *)a1 + 8);
  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)v8, (const ZinIrOpLayerOpCode *)v7);
  *(_QWORD *)v8 = &unk_24C0167C8;
  v9 = *(_OWORD *)(v7 + 16);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(v7 + 32);
  *(_OWORD *)(v8 + 16) = v9;
  v10 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v10;
  v21 = v8;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ZinNMSLayer::ZinNMSLayer(v6, &v21, &v19, a3);
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  v21 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId(v6, *GroupId);
  return v6;
}

void sub_206F1A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C406F529117);
  _Unwind_Resume(a1);
}

uint64_t ZinNMSLayer::ComputeOutputDimensionsUtil(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  if (a6 == 2)
  {
    if (a4)
    {
LABEL_8:
      v7 = a1[1];
LABEL_10:
      v6 = 1;
      goto LABEL_11;
    }
LABEL_6:
    v6 = 1;
    v7 = 1;
    goto LABEL_11;
  }
  if (a6 != 1)
  {
    if (a5)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (!a5)
  {
    v7 = 4;
    goto LABEL_10;
  }
  v6 = a1[1];
  v7 = 4;
LABEL_11:
  *a2 = *a1;
  a2[1] = v7;
  a2[2] = v6;
  a2[3] = a3;
  a2[4] = 1;
  return 0;
}

uint64_t ZinNMSLayer::ComputeOutputDimensions(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_DWORD *)(v4 + 32);
  if (v6 == 2)
  {
    if (*(_BYTE *)(v4 + 28))
    {
LABEL_8:
      v9 = *(_QWORD *)(v3 + 48);
LABEL_10:
      v8 = 1;
      goto LABEL_11;
    }
LABEL_6:
    v8 = 1;
    v9 = 1;
    goto LABEL_11;
  }
  v7 = *(unsigned __int8 *)(v4 + 29);
  if (v6 != 1)
  {
    if (v7)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (!v7)
  {
    v9 = 4;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v3 + 48);
  v9 = 4;
LABEL_11:
  *a3 = *(_QWORD *)(v3 + 40);
  a3[1] = v9;
  a3[2] = v8;
  a3[3] = v5;
  a3[4] = 1;
  return 0;
}

_QWORD *ZinNMSLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "NMS");
}

uint64_t ZinNMSLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F1AAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinNMSLayer::NeedsTypeCastToWrite(uint64_t a1, int a2)
{
  return a2 != 10 && !IsPrimaryFormat(a2);
}

void ZinNMSLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v9;
  int v10;
  int v11;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4 != 240)
    ZinAssertImpl("NMS layer must have 2 inputs. Input Count: %zd", 0xEEEEEEEEEEEEEEEFLL * (v4 >> 3));
  if (*(_DWORD *)v3 != 3 || *(_DWORD *)(v3 + 120) != 3)
    ZinAssertImpl("Input tensors must have type of Float 16.");
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(_DWORD *)(v9 + 32);
  v11 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88);
  if (v11 != 3 && v11 != 10)
    ZinAssertImpl("NMS output format must be either Float 16 or UInt 16.");
  if (v11 == 10 && v10 != 0)
    ZinAssertImpl("Output type can be UInt16 only when NMS type is Indices.");
  v14 = *(float *)(v9 + 24);
  if (v14 < 0.0 || v14 > 1.0)
    ZinAssertImpl("NMS IoU threshold must be between 0 and 1. IoU threshold: %.2f", v14);
  if (*(uint64_t *)(v9 + 16) <= 0)
    ZinAssertImpl("NMS num rounds must be >= 1. Num rounds: %zd", *(_QWORD *)(v9 + 16));
  if (*(_BYTE *)(v9 + 29) && !*(_BYTE *)(v9 + 28))
    ZinAssertImpl("Invalid NMS return mode: returnPerClassResults is true but perClassSuppression is false.");
  v16 = *(_QWORD *)(v3 + 16);
  if (v16 != 4)
    ZinAssertImpl("NMS Boxes channels must be %zd. Boxes Channels: %zd", 4uLL, v16);
  v17 = *(_QWORD *)(v3 + 128);
  if (*(_QWORD *)(v3 + 8) != v17)
    ZinAssertImpl("NMS Boxes batch must equal Scores batch. Boxes Batch: %zd, Scores Batch: %zd", *(_QWORD *)(v3 + 8), v17);
  v18 = *(_QWORD *)(v3 + 152);
  if (*(_QWORD *)(v3 + 32) != v18)
    ZinAssertImpl("NMS Boxes width must equal Scores width. Boxes Width: %zd, Scores Width: %zd", *(_QWORD *)(v3 + 32), v18);
  v19 = *(_QWORD *)(v3 + 144);
  if (*(_QWORD *)(v3 + 24) != 1 || v19 != 1)
    ZinAssertImpl("NMS Boxes height and Scores height must equal 1. Boxes Height: %zd, Scores Height: %zd", *(_QWORD *)(v3 + 24), v19);
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
}

void ZinNMSLayer::~ZinNMSLayer(ZinNMSLayer *this)
{
  *(_QWORD *)this = off_24C015F68;
  *((_QWORD *)this + 24) = off_24C01FBB0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  ZinIrOpLayer::~ZinIrOpLayer(this);
}

{
  *(_QWORD *)this = off_24C015F68;
  *((_QWORD *)this + 24) = off_24C01FBB0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  ZinIrOpLayer::~ZinIrOpLayer(this);
  JUMPOUT(0x20BD002F8);
}

void ZinNMSLayer::GenerateMaskedValueOverWidthDim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "NMS: input==nullptr for GenerateMaskedValueOverWidthDim.", a5, a6, a7, a8, 0);
}

void ZinNMSLayer::GenerateEW2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid EW type", a5, a6, a7, a8, 0);
}

uint64_t ZinIrCircularBufferUtil::GetWrapAxis(unsigned int a1)
{
  if (a1 > 5)
    return 5;
  else
    return dword_207AA9E38[a1];
}

BOOL ZinIrCircularBufferUtil::ZinLayerScheduleComp::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a2 + 48) < *(_QWORD *)(a3 + 48);
}

uint64_t ZinIrCircularBufferUtil::CheckConcatProducer(_QWORD *a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(int *)(a1[8] + 12);
  if (v2 > 5)
    v3 = 5;
  else
    v3 = dword_207AA9E38[v2];
  if (v3 == a2)
    return 0;
  v5 = a1[11];
  v6 = a1[12];
  while (v5 != v6)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 64) + 8) == 7)
    {
      result = ZinIrCircularBufferUtil::CheckConcatProducer();
      if (!(_DWORD)result)
        return result;
    }
    v5 += 8;
  }
  return 1;
}

uint64_t ZinIrCircularBufferUtil::ValidateConcatTreeStructure(uint64_t a1, int a2)
{
  _QWORD **v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *(_QWORD ***)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) - (_QWORD)v2 != 16)
    return 0;
  v4 = v2[1];
  v5 = v4[8];
  if (*(_DWORD *)(v5 + 8) == 7)
  {
    v6 = *(int *)(v5 + 12);
    if (v6 > 5)
      v7 = 5;
    else
      v7 = dword_207AA9E38[v6];
    if (v7 == a2)
      return 0;
    result = ZinIrCircularBufferUtil::CheckConcatProducer(v4, a2);
    if (!(_DWORD)result)
      return result;
  }
  v9 = (*v2)[8];
  if (*(_DWORD *)(v9 + 8) == 7)
  {
    v10 = *(int *)(v9 + 12);
    if (v10 > 5)
      v11 = 5;
    else
      v11 = dword_207AA9E38[v10];
    if (v11 == a2)
    {
      if ((ZinIrCircularBufferUtil::ValidateConcatTreeStructure() & 1) == 0)
        return 0;
    }
    else
    {
      result = ZinIrCircularBufferUtil::CheckConcatProducer(*v2, a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t **ZinIrCircularBufferUtil::AddToProducerMap(uint64_t **a1, _QWORD *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t ValueAt;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;

  v20 = a2;
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v10 + 48), a4);
  v12 = ValueAt;
  v13 = ValueAt + a3;
  v14 = *a5;
  if (ValueAt + a3 < (unint64_t)*a5)
    v14 = ValueAt + a3;
  *a5 = v14;
  if (*(_DWORD *)(a2[8] + 8) == 85)
  {
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 344))(a2);
    v17 = 1;
    if (a4 == 4)
      v17 = (int)v15;
    if (a4 == 3)
      v17 = v15 >> 32;
    if (a4 == 1)
      v17 = v16;
    v12 += v12 & (v17 > 1);
    v13 = v12 + a3;
  }
  v19[0] = a3;
  v19[1] = v13;
  v19[2] = v12;
  return std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a1, (uint64_t)&v20, &v20, (uint64_t)v19);
}

uint64_t **ZinIrCircularBufferUtil::AddToConsumerMap(uint64_t **a1, uint64_t **a2, uint64_t a3, _QWORD *a4, uint64_t a5, int a6)
{
  _QWORD *v8;
  uint64_t v11;
  __int128 v12;
  uint64_t ValueAt;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _QWORD *v26;

  v8 = a4;
  v26 = a4;
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  v12 = *(_OWORD *)(v11 + 64);
  v24[0] = *(_OWORD *)(v11 + 48);
  v24[1] = v12;
  v25 = *(_QWORD *)(v11 + 80);
  ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v24, a6);
  v14 = v8[8];
  if (*(_DWORD *)(v14 + 8) == 36)
  {
    do
    {
      v15 = *(_OWORD *)(v14 + 32);
      v21 = *(_OWORD *)(v14 + 16);
      v22 = v15;
      v23 = *(_QWORD *)(v14 + 48);
      a5 += GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v21, a6);
      v16 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
      v17 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v16 + 48), a6);
      v18 = v17 + a5;
      v20[0] = a5;
      v20[1] = v17 + a5;
      v20[2] = v17;
      std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a2, (uint64_t)&v26, &v26, (uint64_t)v20);
      v8 = *(_QWORD **)v26[14];
      v26 = v8;
      v14 = v8[8];
    }
    while (*(_DWORD *)(v14 + 8) == 36);
  }
  else
  {
    v18 = ValueAt + a5;
  }
  *(_QWORD *)&v21 = a5;
  *((_QWORD *)&v21 + 1) = v18;
  *(_QWORD *)&v22 = v18 - a5;
  return std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a1, (uint64_t)&v26, &v26, (uint64_t)&v21);
}

uint64_t **ZinIrCircularBufferUtil::DetermineProducersAndConsumers(uint64_t **result, uint64_t **a2, uint64_t **a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ValueAt;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t **v26;
  _QWORD v27[3];
  _OWORD v28[2];
  uint64_t v29;
  _QWORD *v30;

  v10 = a4;
  v30 = a4;
  if (*(_DWORD *)(a4[8] + 8) == 7)
  {
    v13 = a4[11];
    if (a4[12] != v13)
    {
      v26 = result;
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = v10[8];
        v17 = *(_QWORD *)(v16 + 16);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v16 + 24) - v17) >> 4) <= v15)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v18 = *(_QWORD *)(v13 + 8 * v15);
        v19 = *(_OWORD *)(v17 + v14);
        v20 = *(_OWORD *)(v17 + v14 + 16);
        v29 = *(_QWORD *)(v17 + v14 + 32);
        v28[0] = v19;
        v28[1] = v20;
        v21 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)v28, a6) + a5;
        v22 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v30 + 32))(v30, 0, 0);
        ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v22 + 48), a6);
        v27[0] = v21;
        v27[1] = ValueAt + v21;
        v27[2] = ValueAt;
        std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a3, (uint64_t)&v30, &v30, (uint64_t)v27);
        result = (uint64_t **)ZinIrCircularBufferUtil::DetermineProducersAndConsumers(v26, a2, a3, v18, v21, a6, a7);
        ++v15;
        v13 = v30[11];
        v14 += 80;
      }
      while (v15 < (v30[12] - v13) >> 3);
      v10 = v30;
    }
  }
  else
  {
    result = ZinIrCircularBufferUtil::AddToProducerMap(result, a4, a5, a6, a7);
  }
  v25 = (_QWORD **)v10[14];
  v24 = (_QWORD **)v10[15];
  while (v25 != v24)
  {
    if (*(_DWORD *)((*v25)[8] + 8) != 7)
      result = ZinIrCircularBufferUtil::AddToConsumerMap(a2, a3, (uint64_t)v30, *v25, a5, a6);
    ++v25;
  }
  return result;
}

uint64_t **ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(uint64_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t ValueAt;
  uint64_t **result;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t **v23;
  _QWORD **v24;
  _QWORD **i;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;

  v28 = a4;
  v11 = *a6;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 32))(a4, 0, 0);
  ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v12 + 48), a5);
  v27[0] = v11;
  v27[1] = ValueAt + v11;
  v27[2] = ValueAt;
  result = std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_impl<ZinConcatLayer const*&,ZinSpaceRange>(a3, &v28, (uint64_t)v27);
  v26 = *a6;
  v15 = v28;
  v16 = *(_QWORD **)(v28 + 88);
  v17 = *(_QWORD **)(v28 + 96);
  if (v16 != v17)
  {
    do
    {
      v18 = (_QWORD *)*v16;
      v19 = *(_QWORD *)(*v16 + 64);
      if (*(_DWORD *)(v19 + 8) == 7
        && ((v20 = *(int *)(v19 + 12), v20 > 5) ? (v21 = 5) : (v21 = dword_207AA9E38[v20]),
            v21 == (_DWORD)a5))
      {
        result = (uint64_t **)ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(a1, a2, a3, *v16, a5, a6);
      }
      else
      {
        v22 = (uint64_t **)std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::emplace_back<>(a1);
        v23 = (uint64_t **)std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::emplace_back<>(a2);
        v27[0] = -1;
        result = ZinIrCircularBufferUtil::DetermineProducersAndConsumers(v22, v23, a3, v18, *a6, a5, v27);
        if (v22[2])
        {
          if (v27[0] == -1)
            ZinAssertImpl("This value should have been updated");
          *a6 = v27[0];
        }
        else if (v27[0] != -1)
        {
          ZinAssertImpl("This value should not have been updated");
        }
      }
      ++v16;
    }
    while (v16 != v17);
    v15 = v28;
  }
  v24 = *(_QWORD ***)(v15 + 112);
  for (i = *(_QWORD ***)(v15 + 120); v24 != i; ++v24)
  {
    if (*(_DWORD *)((*v24)[8] + 8) != 7)
      result = ZinIrCircularBufferUtil::AddToConsumerMap((uint64_t **)(a2[1] - 24), a3, v28, *v24, v26, a5);
  }
  return result;
}

_QWORD *std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::emplace_back<>(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v14[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = (_QWORD *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[24 * v10];
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 1) = 0;
    *(_QWORD *)v12 = v12 + 8;
    v14[2] = v12 + 24;
    std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::__swap_out_circular_buffer(a1, v14);
    v6 = (_QWORD *)a1[1];
    std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(v14);
  }
  else
  {
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_206F1B64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

BOOL ZinIrCircularBufferUtil::ValidateLayerToSpaceRangeMapVecs(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 - 1;
  if (v3 == 1)
  {
    v7 = 0;
LABEL_19:
    v17 = 0;
    do
    {
      v18 = v17;
      if (v17 == v4)
        break;
      if (v17 == v3 || v17 == v7)
        goto LABEL_29;
      v19 = v2 + 24 * v17;
      v22 = *(_QWORD **)(v19 + 8);
      v20 = (_QWORD *)(v19 + 8);
      v21 = v22;
      if (v22)
      {
        do
        {
          v23 = v21;
          v21 = (_QWORD *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v20[2];
          v15 = *v23 == (_QWORD)v20;
          v20 = v23;
        }
        while (v15);
      }
      v17 = v18 + 1;
    }
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24 * (v18 + 1)) + 32) + 48) >= *(_QWORD *)(v23[4] + 48));
    return v18 >= v4;
  }
  else
  {
    v5 = 0;
    if (v3 <= 1)
      v6 = 1;
    else
      v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
    v7 = v6 - 1;
    while (1)
    {
      if (v5 == v7)
LABEL_29:
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      if (v5 == (a2[1] - *a2) / 24)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v8 = v5 + 1;
      v9 = (_QWORD *)(v2 + 24 * (v5 + 1));
      if (!v9[2])
        return 0;
      v10 = *a2 + 24 * v5;
      if (*(_QWORD *)(v10 + 16))
      {
        v13 = *(_QWORD **)(v10 + 8);
        v12 = (_QWORD *)(v10 + 8);
        v11 = v13;
        if (v13)
        {
          do
          {
            v14 = v11;
            v11 = (_QWORD *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v12[2];
            v15 = *v14 == (_QWORD)v12;
            v12 = v14;
          }
          while (v15);
        }
        if (*(_QWORD *)(v14[4] + 48) > *(_QWORD *)(*(_QWORD *)(*v9 + 32) + 48))
          return 0;
      }
      v5 = v8;
      if (v8 == v4)
        goto LABEL_19;
    }
  }
}

uint64_t ZinIrCircularBufferUtil::DetermineMaxCircularBufferSize(uint64_t *a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  BOOL v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  __int128 v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  _BYTE v36[32];
  __int128 v37;
  unint64_t v38;

  *a3 = 0;
  v3 = *a1;
  if (a1[1] == *a1)
    return 1;
  v6 = 0;
  while (1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v6)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    v7 = (_QWORD *)(v3 + 24 * v6);
    v10 = (_QWORD *)*v7;
    v9 = v7 + 1;
    v8 = v10;
    v11 = v10[6];
    v12 = v10;
    if (v10 != v9)
    {
      do
      {
        if (v11 <= v12[6])
          v11 = v12[6];
        v13 = (_QWORD *)v12[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v12[2];
            v15 = *v14 == (_QWORD)v12;
            v12 = v14;
          }
          while (!v15);
        }
        v12 = v14;
      }
      while (v14 != v9);
    }
    v16 = (_QWORD *)(*a2 + 24 * v6);
    v17 = v8[5];
    v18 = v8[7];
    *(_QWORD *)&v37 = v17;
    *((_QWORD *)&v37 + 1) = v11;
    v38 = v18;
    v19 = v16[2] == 0;
    v20 = (_QWORD *)*v16;
    v21 = v16 + 1;
    if ((_QWORD *)*v16 != v16 + 1)
    {
      do
      {
        v22 = *((_OWORD *)v20 + 3);
        *(_OWORD *)v36 = *((_OWORD *)v20 + 2);
        *(_OWORD *)&v36[16] = v22;
        v34 = *(_OWORD *)&v36[8];
        v35 = *((_QWORD *)&v22 + 1);
        v25 = v17 <= v11 && (unint64_t)v34 < v11 && v17 < *((_QWORD *)&v34 + 1);
        v26 = (unint64_t)v34 <= *((_QWORD *)&v34 + 1) && v25;
        ZinSpaceRange::Union((unint64_t *)&v37, (unint64_t *)&v34, (unint64_t *)&v32);
        v37 = v32;
        v38 = v33;
        v27 = (_QWORD *)v20[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v20[2];
            v15 = *v28 == (_QWORD)v20;
            v20 = v28;
          }
          while (!v15);
        }
        v19 |= v26;
        v20 = v28;
      }
      while (v28 != v21);
    }
    if ((v19 & 1) == 0)
      break;
    v29 = v38;
    if (*a3 > v38)
      v29 = *a3;
    *a3 = v29;
    ++v6;
    v3 = *a1;
    if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
      return 1;
  }
  return 0;
}

unint64_t *ZinSpaceRange::Union@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *result;
  v3 = result[1];
  if (*result > v3 || (v5 = a2[1], *a2 > v5))
    ZinAssertImpl("Live ranges must be in range");
  if (result[2])
  {
    if (a2[2])
    {
      if (*a2 < v4)
        v4 = *a2;
      if (v3 <= v5)
        v3 = a2[1];
      *a3 = v4;
      a3[1] = v3;
      v6 = v3 - v4;
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)result;
      v6 = result[2];
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    v6 = a2[2];
  }
  a3[2] = v6;
  return result;
}

uint64_t ZinIrCircularBufferUtil::QualifyForCircularBuffer(ZinIrCircularBufferUtil *this, const ZinIrTensor *a2, const ZinIrHalParameters *a3, StaticWrapInfo *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  void ***v14;
  _QWORD *v15[2];
  void **v16[3];
  uint64_t v17[3];

  if (!(*((unsigned __int8 *)a2 + 1215) | *((unsigned __int8 *)a2 + 1239)))
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 64) + 8) != 7)
    return 0;
  if (ZinIrTensor::GetRootTensor(this) != this)
    return 0;
  v6 = *((_QWORD *)this + 12);
  v7 = *(int *)(*(_QWORD *)(v6 + 64) + 12);
  if (v7 > 5)
    return 0;
  if (((0x35u >> v7) & 1) == 0)
    return 0;
  v8 = dword_207AA9E50[v7];
  if (!ZinIrCircularBufferUtil::ValidateConcatTreeStructure(*((_QWORD *)this + 12), dword_207AA9E50[v7]))
    return 0;
  *(_DWORD *)a3 = v8;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v15[0] = 0;
  v15[1] = 0;
  v13 = 0;
  v14 = (void ***)v15;
  ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(v17, (uint64_t *)v16, (uint64_t **)&v14, v6, v8, &v13);
  if (ZinIrCircularBufferUtil::ValidateLayerToSpaceRangeMapVecs(v17, v16)
    && (v12 = 0, (ZinIrCircularBufferUtil::DetermineMaxCircularBufferSize(v17, v16, &v12) & 1) != 0)
    && (v9 = v12, v9 < GetValueAtDimension<ZinTensorDimensions>((uint64_t *)this + 6, v8)))
  {
    *((_QWORD *)a3 + 1) = v9;
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  v14 = v16;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v16[0] = (void **)v17;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v16);
  return v10;
}

{
  _BYTE v5[24];

  return ZinIrCircularBufferUtil::QualifyForCircularBuffer(this, a2, (const ZinIrHalParameters *)v5, a4);
}

void sub_206F1BBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, _QWORD *a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  a12 = &a15;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a15 = (void **)(v15 - 56);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCircularBufferUtil::IsCircularBufferProducerCandidate(uint64_t a1, uint64_t a2, ZinIrOpLayer *this)
{
  int v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  ZinIrOpLayer *v11;
  int v12;
  void **v13;
  void **v14;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;

  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v23 = 0;
  if (ZinIrOpLayer::IsNoOp(this, (uint64_t *)__p))
  {
    v6 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v6 != 7)
      return 0;
  }
  else if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = (void **)*((_QWORD *)this + 14);
  v8 = (void **)*((_QWORD *)this + 15);
  if (v9 == v8)
    goto LABEL_25;
  do
  {
    v18 = *v9;
    std::deque<ZinIrOpLayer *>::push_back(__p, &v18);
    ++v9;
  }
  while (v9 != v8);
  v10 = *((_QWORD *)&v24 + 1);
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_25:
    v7 = 0;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = 0;
    v11 = *(ZinIrOpLayer **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v24 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v24 & 0x1FF));
    v21 = v11;
    *(_QWORD *)&v24 = v24 + 1;
    *((_QWORD *)&v24 + 1) = v10 - 1;
    if ((unint64_t)v24 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(_QWORD *)&v24 = v24 - 512;
      v11 = v21;
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
    if (!ZinIrOpLayer::IsNoOp(v11, (uint64_t *)&v18))
      break;
    v12 = *(_DWORD *)(*((_QWORD *)v21 + 8) + 8);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
    if (v12 == 7)
      goto LABEL_22;
    v13 = (void **)*((_QWORD *)v21 + 14);
    v14 = (void **)*((_QWORD *)v21 + 15);
    while (v13 != v14)
    {
      v18 = 0;
      v18 = *v13;
      std::deque<ZinIrOpLayer *>::push_back(__p, &v18);
      ++v13;
    }
LABEL_24:
    v10 = *((_QWORD *)&v24 + 1);
    if (!*((_QWORD *)&v24 + 1))
      goto LABEL_25;
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
LABEL_22:
  if (a1 + 80 == std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a1 + 72, &v21))goto LABEL_24;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  if (!ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(a1, a2, v21, (const ZinIrOpLayer *)&v18, &v17, &v16))
    goto LABEL_24;
  v7 = 1;
LABEL_26:
  std::deque<unsigned long>::~deque[abi:ne180100](__p);
  return v7;
}

void sub_206F1BE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(uint64_t a1, uint64_t a2, ZinMirSpatialSplitUtils *a3, const ZinIrOpLayer *a4, unint64_t *a5, unint64_t *a6)
{
  ZinIrTensor *v12;
  unint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  ZinIrOpLayer *v17;
  int v18;
  int v19;
  void *__p;
  char *v22;

  v12 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a3 + 11) + 32))(**((_QWORD **)a3 + 11), 0, 0);
  ZinIrTensor::GetTensorFamily(v12, (uint64_t)&__p);
  v14 = (char *)__p;
  v15 = v22;
  if (__p == v22)
  {
    v19 = 1;
    if (__p)
    {
LABEL_9:
      v22 = v14;
      operator delete(v14);
    }
  }
  else
  {
    while (1)
    {
      v16 = *(_QWORD *)v14;
      v17 = *(ZinIrOpLayer **)(*(_QWORD *)v14 + 96);
      v18 = *(_DWORD *)(*((_QWORD *)v17 + 8) + 8);
      if ((ZinIrOpLayer::IsIntermediate(v17) & 1) == 0
        || v18 == 7
        && !ZinMirSpatialSplitUtils::CanConcatBeCircularBufferProducer(a1, a2, *(ZinIrOpLayer **)(v16 + 96)))
      {
        break;
      }
      v14 += 8;
      if (v14 == v15)
      {
        v19 = 1;
        goto LABEL_8;
      }
    }
    v19 = 0;
LABEL_8:
    v14 = (char *)__p;
    if (__p)
      goto LABEL_9;
  }
  if (!v19)
    return 0;
  *a5 = 0;
  *a6 = 0;
  return ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(a3, a4, a5, a6, v13);
}

void sub_206F1BF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(uint64_t a1, uint64_t a2, ZinMirSpatialSplitUtils *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v6 = 0;
  v4 = 0;
  v5 = 0;
  return ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(a1, a2, a3, (const ZinIrOpLayer *)&v6, &v5, &v4);
}

uint64_t ZinIrCircularBufferUtil::ExtractNonOverlappingBufferDescriptors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  __int128 *v32;
  __int128 *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  char *__format;
  __int128 v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57[2];
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v59 = 0;
  v60 = 0;
  v61 = 0;
  memset(v58, 0, sizeof(v58));
  v57[0] = 0;
  v57[1] = 0;
  v55 = 0;
  v56 = (uint64_t *)v57;
  ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(&v59, v58, &v56, *(_QWORD *)(a1 + 96), a2, &v55);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v5 = v59;
  if (v60 != v59)
  {
    v6 = 0;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
    __format = "Only one producer is supported per branch\n";
    while (1)
    {
      v8 = (_QWORD *)(v5 + 24 * v6);
      if (v8[2] != 1)
        goto LABEL_59;
      v9 = (_QWORD *)(v58[0] + 24 * v6);
      if (v9[2] != 1)
        break;
      v10 = *v8;
      v62 = *(_OWORD *)(*v8 + 40);
      v63 = *(_QWORD *)(v10 + 56);
      v50 = 0uLL;
      v51 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      if (v7 - 1 > v6)
      {
        v11 = v62;
        if ((unint64_t)v62 > *((_QWORD *)&v62 + 1)
          || ((v12 = *(_QWORD **)(v58[0] + 24 * v6 + 24), v14 = v12[5], v13 = v12[6], v14 < *((_QWORD *)&v62 + 1))
            ? (v15 = v14 > v13)
            : (v15 = 1),
              !v15 ? (v16 = (unint64_t)v62 >= v13) : (v16 = 1),
              v16))
        {
          v50 = 0uLL;
          v51 = 0;
        }
        else
        {
          if ((unint64_t)v62 <= v14)
            v11 = v12[5];
          if (v13 >= *((_QWORD *)&v62 + 1))
            v13 = *((_QWORD *)&v62 + 1);
          *(_QWORD *)&v50 = v11;
          *((_QWORD *)&v50 + 1) = v13;
          v51 = v13 - v11;
          if (v13 != v11)
          {
            v25 = *(_QWORD *)(*(_QWORD *)(*v8 + 32) + 48);
            v26 = *(_QWORD *)(v12[4] + 48);
            v27 = (char *)operator new(0x48uLL);
            *((_QWORD *)v27 + 1) = 0;
            *((_QWORD *)v27 + 2) = 0;
            *(_QWORD *)v27 = &unk_24C05B760;
            *(_OWORD *)(v27 + 24) = v50;
            *((_QWORD *)v27 + 5) = v51;
            *((_QWORD *)v27 + 6) = v25;
            *((_QWORD *)v27 + 7) = v26;
            *((_DWORD *)v27 + 16) = 1;
            *(_QWORD *)&v46 = v27 + 24;
            *((_QWORD *)&v46 + 1) = v27;
            std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100]((char **)&v47, &v46);
            std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](&v52, &v46);
            v28 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
            if (*((_QWORD *)&v46 + 1))
            {
              v29 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
          }
        }
      }
      ZinSpaceRange::Subtract((unint64_t *)&v62, (unint64_t *)&v50, (char **)&v46);
      v17 = (_QWORD *)v46;
      if (*((_QWORD *)&v46 + 1) - (_QWORD)v46 != 24)
        ZinAssertImpl("Only one contiguous space range should be returned");
      if (*(_QWORD *)(v46 + 16))
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*v8 + 32) + 48);
        v19 = *(_QWORD *)(*(_QWORD *)(*v9 + 32) + 48);
        v20 = (char *)operator new(0x48uLL);
        *((_QWORD *)v20 + 1) = 0;
        *((_QWORD *)v20 + 2) = 0;
        *(_QWORD *)v20 = &unk_24C05B760;
        v21 = v17[2];
        *(_OWORD *)(v20 + 24) = *(_OWORD *)v17;
        *((_QWORD *)v20 + 5) = v21;
        *((_QWORD *)v20 + 6) = v18;
        *((_QWORD *)v20 + 7) = v19;
        *((_DWORD *)v20 + 16) = 0;
        *(_QWORD *)&v46 = v20 + 24;
        *((_QWORD *)&v46 + 1) = v20;
        std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100]((char **)&v47, &v46);
        std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100](&v52, &v46);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      if (v48 != v47)
        std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>(a4, *v8 + 32, (_QWORD *)(*v8 + 32), &v47);
      *(_QWORD *)&v46 = &v47;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      operator delete(v17);
      ++v6;
      v5 = v59;
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
      if (v7 <= v6)
        goto LABEL_37;
    }
    __format = "Only one consumer is supported per branch\n";
LABEL_59:
    ZinAssertImpl(__format, __format);
  }
LABEL_37:
  v31 = v56;
  if (v56 != (uint64_t *)v57)
  {
    do
    {
      v32 = (__int128 *)v52;
      v33 = (__int128 *)v53;
      if (v52 != v53)
      {
        do
        {
          v34 = v31[5];
          v35 = v31[6];
          if (v34 <= v35)
          {
            v37 = **(_QWORD **)v32;
            v36 = *(_QWORD *)(*(_QWORD *)v32 + 8);
            v38 = v37 >= v35 || v37 > v36;
            if (!v38 && v34 < v36)
            {
              if ((_QWORD *)(a4 + 8) == std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::find<ZinIrOpLayer const*>(a4, (uint64_t)(v31 + 4)))
              {
                v62 = 0uLL;
                v63 = 0;
                std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>>((uint64_t **)a4, (uint64_t)(v31 + 4), v31 + 4, (uint64_t)&v62);
                *(_QWORD *)&v50 = &v62;
                std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
              }
              *(_QWORD *)&v50 = v31 + 4;
              v40 = std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t **)a4, (uint64_t)(v31 + 4), (uint64_t)&std::piecewise_construct, (uint64_t **)&v50);
              std::vector<std::shared_ptr<ZinIrConstData>>::push_back[abi:ne180100]((char **)v40 + 5, v32);
            }
          }
          ++v32;
        }
        while (v32 != v33);
      }
      v41 = (uint64_t *)v31[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (uint64_t *)v31[2];
          v43 = *v42 == (_QWORD)v31;
          v31 = v42;
        }
        while (!v43);
      }
      v31 = v42;
    }
    while (v42 != (uint64_t *)v57);
  }
  *(_QWORD *)&v62 = &v52;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v56, v57[0]);
  *(_QWORD *)&v62 = v58;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  *(_QWORD *)&v62 = &v59;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  return 1;
}

void sub_206F1C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a24, a25);
  *(_QWORD *)(v27 - 112) = &a27;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  *(_QWORD *)(v27 - 112) = v27 - 136;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  _Unwind_Resume(a1);
}

void ZinSpaceRange::Subtract(unint64_t *a1@<X0>, unint64_t *a2@<X1>, char **a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v10;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 > v5 || (v7 = *a2, v8 = a2[1], *a2 > v8))
    ZinAssertImpl("Live ranges must be in range");
  if (a2[2])
    v10 = v7 >= v5;
  else
    v10 = 1;
  if (v10 || v4 >= v8)
  {
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), 1uLL);
    v14 = &v12[24 * v13];
    v15 = *(_OWORD *)a1;
    *((_QWORD *)v12 + 2) = a1[2];
    *(_OWORD *)v12 = v15;
    v16 = v12 + 24;
    v18 = *a3;
    v17 = a3[1];
    if (v17 != *a3)
    {
      do
      {
        v19 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v12 - 24) = v19;
        v12 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = *a3;
    }
    *a3 = v12;
    a3[1] = v16;
    a3[2] = v14;
    if (!v17)
      goto LABEL_30;
    v20 = v17;
    goto LABEL_29;
  }
  if (v7 == v4 && v5 == v8)
  {
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), 1uLL);
    v20 = *a3;
    v27 = a3[1];
    v25 = &v22[24 * v28];
    v16 = v22 + 24;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    if (v27 == v20)
      goto LABEL_28;
    do
    {
      v29 = *(_OWORD *)(v27 - 24);
      *((_QWORD *)v22 - 1) = *((_QWORD *)v27 - 1);
      *(_OWORD *)(v22 - 24) = v29;
      v22 -= 24;
      v27 -= 24;
    }
    while (v27 != v20);
LABEL_27:
    v20 = *a3;
LABEL_28:
    *a3 = v22;
    a3[1] = v16;
    a3[2] = v25;
    if (!v20)
    {
LABEL_30:
      a3[1] = v16;
      return;
    }
LABEL_29:
    operator delete(v20);
    goto LABEL_30;
  }
  if (v7 <= v4 && v5 <= v8)
  {
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), 1uLL);
    v20 = *a3;
    v23 = a3[1];
    v25 = &v22[24 * v24];
    v16 = v22 + 24;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    if (v23 == v20)
      goto LABEL_28;
    do
    {
      v26 = *(_OWORD *)(v23 - 24);
      *((_QWORD *)v22 - 1) = *((_QWORD *)v23 - 1);
      *(_OWORD *)(v22 - 24) = v26;
      v22 -= 24;
      v23 -= 24;
    }
    while (v23 != v20);
    goto LABEL_27;
  }
  if (v7 <= v4)
  {
    *(_QWORD *)&v31 = a2[1];
    *((_QWORD *)&v31 + 1) = v5;
    v32 = v5 - v8;
    std::vector<ZinSpaceRange>::push_back[abi:ne180100]((void **)a3, &v31);
  }
  else
  {
    *(_QWORD *)&v31 = *a1;
    *((_QWORD *)&v31 + 1) = v7;
    v32 = v7 - v4;
    if (v5 > v8)
    {
      std::vector<ZinSpaceRange>::push_back[abi:ne180100]((void **)a3, &v31);
      v30 = a1[1];
      *(_QWORD *)&v31 = a2[1];
      *((_QWORD *)&v31 + 1) = v30;
      v32 = v30 - v31;
    }
    std::vector<ZinSpaceRange>::push_back[abi:ne180100]((void **)a3, &v31);
  }
}

void sub_206F1C798(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrDimension,unsigned long>>,std::reverse_iterator<std::map<ZinIrDimension,unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<ZinSpaceRange>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    v17 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v17;
    v9 = v15 + 24;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
}

_QWORD *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::find<ZinIrOpLayer const*>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  v6 = v2;
  do
  {
    v7 = *(_QWORD *)(v3[4] + 48);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (!v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_QWORD *)(v6[4] + 48))
    return v2;
  return v6;
}

uint64_t **std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>>(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  char *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a2 + 48);
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *(_QWORD *)(v7[4] + 48);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (char *)operator new(0x40uLL);
    *((_QWORD *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((_QWORD *)v12 + 7) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 5;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 48);
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *(_QWORD *)(v6[4] + 48);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  char *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a2 + 48);
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *(_QWORD *)(v7[4] + 48);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (char *)operator new(0x40uLL);
    *((_QWORD *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((_QWORD *)v12 + 7) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t **std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_impl<ZinConcatLayer const*&,ZinSpaceRange>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;

  v6 = (char *)operator new(0x40uLL);
  v7 = v6;
  v8 = *a2;
  *((_QWORD *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 16);
  v9 = a1 + 1;
  v10 = a1[1];
  if (v10)
  {
    v11 = *(_QWORD *)(v8 + 48);
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v10;
        v13 = *(_QWORD *)(v10[4] + 48);
        if (v11 >= v13)
          break;
        v10 = *v12;
        v9 = v12;
        if (!*v12)
          goto LABEL_10;
      }
      if (v13 >= v11)
        break;
      v10 = v12[1];
      if (!v10)
      {
        v9 = v12 + 1;
        goto LABEL_10;
      }
    }
    operator delete(v6);
    return v12;
  }
  else
  {
    v12 = a1 + 1;
LABEL_10:
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v12, v9, (uint64_t *)v6);
  }
  return (uint64_t **)v7;
}

void std::__shared_ptr_emplace<ZinBufferDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinBufferDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05B760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 48);
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *(_QWORD *)(v5[4] + 48);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__construct_node<ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>(a1, a3, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

char *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__construct_node<ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 8;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *((_QWORD *)v8 + 4) = *a2;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 5) = 0;
  result = std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)v8 + 40, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206F1CFC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t ZinParseKernelRasterizerUnit(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t result;
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  int v10;

  result = ZinParseUnitNumGroups(a1, (uint64_t *)(a2 + 88), a3);
  if (!(_DWORD)result)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("RasterizerMode"));
    if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFStringGetTypeID()))
    {
      v10 = CFStringToZinIrKernelRasterizerMode(v8);
      *(_DWORD *)(a2 + 80) = v10;
      if (v10 == 2)
      {
        ZinIrUnitStatus::SetError(a3, CFSTR("InvalidMode"));
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinParseKernelRasterizerUnit();
        return 3;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      result = 0;
      *(_DWORD *)(a2 + 80) = 0;
    }
  }
  return result;
}

void ZinParseKernelRasterizerUnit()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid Mode", v0, 2u);
}

uint64_t ZinMirKernelRasterizer::GetPaddedTemplateSize@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  unint64_t v4;
  char v5;

  if (result == 6 && a2 == 6 && a3 == 3)
  {
    v4 = 7;
  }
  else
  {
    if (result != 4 || a2 != 4 || a3 != 3)
    {
      v5 = 0;
      a4->i8[0] = 0;
      goto LABEL_11;
    }
    v4 = 5;
  }
  *a4 = vdupq_n_s64(v4);
  v5 = 1;
LABEL_11:
  a4[1].i8[0] = v5;
  return result;
}

BOOL ZinCodegen::SetSecondarySourceDMA<11u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t BarIdFromDynamicOffsetInfoOrSection;
  unsigned int v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  _BOOL8 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int IsCompressed;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  __int128 __p;
  uint64_t v78;
  int v79;
  uint64_t v80;

  v80 = a2;
  v11 = *(_QWORD *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) == 1)
  {
    BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection(*(ZinIrSymbol **)(a3 + 96 * a4 + 752));
    v18 = *(_DWORD *)(v11 + 208);
    ZinAneTd<11u>::SetL2Src2DmaFormat(a2, v18);
    if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
      && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
    {
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinCodegen::SetPrimarySourceDMA<7u>(result, v37, v38, v39, v40, v41, v42, v43);
        return 0;
      }
    }
    else
    {
      if (ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
      {
        ZinAneRelocInfo::ZinAneRelocInfo(&v76, v11 + 160, 1098, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
        v19 = *(_QWORD *)(a2 + 1016);
        if (v19 >= *(_QWORD *)(a2 + 1024))
        {
          v44 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a2 + 1008), (uint64_t)&v76);
        }
        else
        {
          *(_WORD *)v19 = v76;
          v20 = (std::string *)(v19 + 8);
          if (SHIBYTE(v78) < 0)
          {
            std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
          }
          else
          {
            v21 = __p;
            *(_QWORD *)(v19 + 24) = v78;
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          *(_DWORD *)(v19 + 32) = v79;
          v44 = v19 + 40;
          *(_QWORD *)(a2 + 1016) = v19 + 40;
        }
        *(_QWORD *)(a2 + 1016) = v44;
        if (SHIBYTE(v78) < 0)
          operator delete((void *)__p);
        *(_DWORD *)(a2 + 580) = *(_DWORD *)(a2 + 580) & 0xFFFFFF0F | (16
                                                                    * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
        *(_DWORD *)(a2 + 588) = *(_DWORD *)(a2 + 588) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
        *(_DWORD *)(a2 + 588) = *(_DWORD *)(a2 + 588) & 0xFFFFFF0F | (16
                                                                    * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
        switch(v18)
        {
          case 1u:
            v45 = *(_DWORD *)(a2 + 660) & 0xFFFFCFFC | 0x1000;
            goto LABEL_38;
          case 2u:
            v45 = *(_DWORD *)(a2 + 660) & 0xFFFFCFFC;
            goto LABEL_38;
          case 3u:
            v46 = *(_DWORD *)(a2 + 660) & 0xFFFFCFCC;
            v47 = 8241;
            goto LABEL_37;
          case 4u:
            v45 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC | 1;
            goto LABEL_38;
          case 5u:
            v46 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
            v47 = 257;
            goto LABEL_37;
          case 6u:
            v46 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
            v47 = 17;
            goto LABEL_37;
          case 7u:
            v46 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
            v47 = 273;
            goto LABEL_37;
          case 8u:
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!result)
              return result;
            ZinCodegen::SetSecondarySourceDMA<7u>(result, v48, v49, v50, v51, v52, v53, v54);
            return 0;
          case 9u:
            v55 = *(_DWORD *)(a2 + 660) & 0xFFFFFECC | 0x131;
            *(_DWORD *)(a2 + 660) = v55;
            v56 = v55 & 0xFFFFCFFF;
            if (!a11 && !a10)
              goto LABEL_35;
            v45 = v56 | 0x1000;
            goto LABEL_38;
          case 0xAu:
            v57 = *(_DWORD *)(a2 + 660) & 0xFFFFFECC | 0x131;
            *(_DWORD *)(a2 + 660) = v57;
            v56 = v57 & 0xFFFFCFFF;
            if (a11 || a10)
            {
              *(_DWORD *)(a2 + 660) = v56;
            }
            else
            {
LABEL_35:
              v45 = v56 | 0x2000;
LABEL_38:
              *(_DWORD *)(a2 + 660) = v45;
            }
            v58 = ZinTensorDescriptorDmaInterleave(v11 + 208);
            *(_DWORD *)(a2 + 800) = *(_DWORD *)(a2 + 800) & 0xFFFFF0FF | ((v58 & 0xF) << 8);
            result = CheckRegValueRange(v58, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 592));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 660) = *(_DWORD *)(a2 + 660) & 0xF0FFFFFF | ((v58 & 0xF) << 24);
            result = CheckRegValueRange(v58, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 592));
            if (!result)
              return result;
            v59 = *(_QWORD *)(a3 + 840);
            v60 = *(_QWORD *)(a3 + 832);
            v61 = *(_QWORD *)(a3 + 824);
            v62 = *(_QWORD *)(a3 + 816) / a6;
            *(_DWORD *)(a2 + 624) = *(_DWORD *)(a2 + 624) & 0x3F | ((_DWORD)v62 << 6);
            result = CheckRegValueRange(v62, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 440));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 628) = *(_DWORD *)(a2 + 628) & 0x3F | ((v61 / a6) << 6);
            result = CheckRegValueRange(v61 / a6, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 448));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 632) = *(_DWORD *)(a2 + 632) & 0x3F | ((v60 / a6) << 6);
            result = CheckRegValueRange(v60 / a6, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 456));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 636) = *(_DWORD *)(a2 + 636) & 0x3F | ((v59 / a6) << 6);
            result = CheckRegValueRange(v59 / a6, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 464));
            if (!result)
              return result;
            *(_DWORD *)(a2 + 576) |= 1u;
            if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808)))
              return 1;
            v63 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
            v64 = *(_DWORD *)(a3 + 888);
            v65 = *(_DWORD *)(a3 + 892);
            v66 = *(_DWORD *)(v11 + 232);
            v67 = *(_DWORD *)(a3 + 896);
            IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
            if (ZinCodegen::SetUniversalCompressionForSecondarySource<11u>(a3, (uint64_t)v63, v64, v65, &v80, v67, IsCompressed, v66))
            {
              return 1;
            }
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!result)
              return result;
            ZinCodegen::SetSecondarySourceDMA<11u>(result, v69, v70, v71, v72, v73, v74, v75);
            break;
          case 0xBu:
            v46 = *(_DWORD *)(a2 + 660) & 0xFFFFFFCF;
            v47 = 12547;
LABEL_37:
            v45 = v46 | v47;
            goto LABEL_38;
          default:
            return 0;
        }
        return 0;
      }
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(result, v30, v31, v32, v33, v34, v35, v36);
        return 0;
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinCodegen::SetResultDMA<7u>(result, v23, v24, v25, v26, v27, v28, v29);
      return 0;
    }
  }
  return result;
}

void sub_206F1D630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 1016) = v18;
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinCodegen::SetSecondarySourceDMA<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to set UC registers properly\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrScaleBiasInfo::ZinIrScaleBiasInfo(ZinIrScaleBiasInfo *this)
{
  *(_QWORD *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 2) = &unk_24C01E1B0;
}

_QWORD *ZinGOCLayer::ZinGOCLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, ZinIrKernel **a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v6 = *a2;
  *a2 = 0;
  v7 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v7;
  v17 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v17, &v15, a4, a5);
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *a1 = &off_24C015868;
  return a1;
}

void sub_206F1D774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinGOCLayer::Lower(ZinIrKernel **a1, uint64_t **a2)
{
  ZinIrKernel *v4;
  uint64_t Hal;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  size_t v11;
  std::string *v12;
  ZinIrKernel *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  __n128 v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  ZinIrOpLayer *TypeCastLayer;
  char v28;
  char v30;
  std::string v31;
  std::string v32;
  _QWORD v33[3];
  char v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (ZinIrKernel::HasDefaultScale(a1[17]))
  {
    v4 = a1[17];
    Hal = ZinIrTarget::GetHal(*((ZinIrTarget **)a1[2] + 20));
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    if (ZinIrKernel::HasDefaultBias(v4, *(unsigned __int8 *)(v6 + 1244)))
    {
      v7 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)a1[11] + 32))(*(_QWORD *)a1[11], 0, 0)+ 88);
      v8 = *(_DWORD *)((*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*a1 + 4))(a1, 0, 0) + 88);
      if (IsPrimaryFormat(v8) || !IsGeneratableFormat(v8))
      {
        if (IsPrimaryFormat(v7))
          return 0;
        v9 = IsGeneratableFormat(v7);
      }
      else
      {
        v9 = 1;
      }
      if (v7 != v8 && v9)
      {
        if (*((char *)a1 + 47) >= 0)
          v11 = *((unsigned __int8 *)a1 + 47);
        else
          v11 = (size_t)a1[4];
        v12 = &v32;
        std::string::basic_string[abi:ne180100]((uint64_t)&v32, v11 + 1);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = (std::string *)v32.__r_.__value_.__r.__words[0];
        if (v11)
        {
          if (*((char *)a1 + 47) >= 0)
            v13 = (ZinIrKernel *)(a1 + 3);
          else
            v13 = a1[3];
          memmove(v12, v13, v11);
        }
        *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v31, "goc_to_typecast");
        v14 = std::string::append(&v31, "_xfm", 4uLL);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v44 = v14->__r_.__value_.__r.__words[2];
        v43 = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (v44 >= 0)
          v16 = (const std::string::value_type *)&v43;
        else
          v16 = (const std::string::value_type *)v43;
        if (v44 >= 0)
          v17 = HIBYTE(v44);
        else
          v17 = *((_QWORD *)&v43 + 1);
        v18 = std::string::append(&v32, v16, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        *(_QWORD *)&v36 = *((_QWORD *)&v18->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = ZinObjectNameFactory::ZinObjectNameFactory(v33, __p);
        if (SBYTE7(v36) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v44) < 0)
          operator delete((void *)v43);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        v21 = (uint64_t)a1[2];
        (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(**(_QWORD **)a1[11] + 80))(__p, *(_QWORD *)a1[11], 0, 0, v20);
        v22 = operator new(0x78uLL);
        v32.__r_.__value_.__l.__size_ = (std::string::size_type)(v22 + 30);
        v32.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 30);
        v22[28] = v42;
        v23 = v41;
        *((_OWORD *)v22 + 5) = v40;
        *((_OWORD *)v22 + 6) = v23;
        v24 = v39;
        *((_OWORD *)v22 + 3) = v38;
        *((_OWORD *)v22 + 4) = v24;
        v25 = v36;
        *(_OWORD *)v22 = *(_OWORD *)__p;
        *((_OWORD *)v22 + 1) = v25;
        *((_OWORD *)v22 + 2) = v37;
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        v26 = (*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*a1 + 4))(a1, 0, 0);
        TypeCastLayer = (ZinIrOpLayer *)ZinBuilder::CreateTypeCastLayer(v21, (uint64_t)v33, (uint64_t)&v32, (__int128 *)(v26 + 48), v8, 0);
        if (v32.__r_.__value_.__r.__words[0])
        {
          v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        *(_QWORD *)&v43 = a1;
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v32.__r_.__value_.__l.__size_ = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &v32);
        v28 = ZinIrOpLayerGraph::ReplaceNode(a2, (ZinIrOpLayer *)a1, TypeCastLayer, (const Layer2TDMapper::SourceLayer *)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)&v36 = __p[1];
          operator delete(__p[1]);
        }
        if (ZinTypeCastLayer::IsReadDMAConversion(TypeCastLayer)
          || (ZinTypeCastLayer::IsWriteDMAConversion(TypeCastLayer) & 1) != 0)
        {
          if ((v28 & 1) != 0)
          {
LABEL_43:
            v33[0] = off_24C01FBB0;
            if (v34 < 0)
              operator delete((void *)v33[1]);
            return 0;
          }
        }
        else
        {
          *(_QWORD *)&v43 = a1;
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
          v32.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(__p, &v32);
          v30 = v28 & ZinIrOpLayerGraph::ReplaceNode(a2, TypeCastLayer, (ZinIrOpLayer *)a1, (const Layer2TDMapper::SourceLayer *)__p);
          __p[0] = &unk_24C02BB18;
          if (__p[1])
          {
            *(void **)&v36 = __p[1];
            operator delete(__p[1]);
          }
          if ((v30 & 1) != 0)
            goto LABEL_43;
        }
        ZinAssertImpl("Error: graph manipulation failed");
      }
    }
  }
  return 0;
}

void sub_206F1DB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,void *__p,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinGOCLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  const ZinIrOpLayerOpCode *v17;
  ZinIrOpLayerOpCode *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *GroupId;
  ZinIrKernel *v26;
  uint64_t v28[2];
  std::string v29;
  void *__p[2];
  int64_t v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  ZinIrKernel *v35;

  v6 = (uint64_t)a1 + 136;
  if (*((_QWORD *)a1 + 17))
  {
    if (*((char *)a3 + 23) >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    v8 = &v32;
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, v7 + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*((char *)a3 + 23) >= 0)
        v9 = a3;
      else
        v9 = *a3;
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v29, "goc_clone_kernel");
    v10 = std::string::append(&v29, "_xfm", 4uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v31 >= 0)
      v13 = HIBYTE(v31);
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append(&v32, (const std::string::value_type *)v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v34 = v14->__r_.__value_.__r.__words[2];
    v33 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>(v6, (uint64_t)&v33, (uint64_t *)&v35);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    v35 = 0;
  }
  v16 = (_QWORD *)operator new();
  v17 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v18 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v18, v17);
  *(_QWORD *)v18 = &unk_24C01E1B0;
  *(_QWORD *)&v33 = v18;
  v19 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  v28[0] = v19;
  v28[1] = (uint64_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  ZinGOCLayer::ZinGOCLayer(v16, (uint64_t *)&v33, v28, (__int128 *)a3, &v35);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if ((_QWORD)v33)
    (*(void (**)(_QWORD))(*(_QWORD *)v33 + 8))(v33);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v16, *GroupId);
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    ZinIrKernel::~ZinIrKernel(v26);
    MEMORY[0x20BD002F8]();
  }
  return v16;
}

void sub_206F1DEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t ZinGOCLayer::ComputeOutputDimensions(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  v3 = **a2;
  v4 = (*a2)[1];
  *(_QWORD *)(a3 + 32) = *((_QWORD *)*a2 + 4);
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  return 0;
}

_QWORD *ZinGOCLayer::Split(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  const LayerPartInfo *v5;
  uint64_t Hal;
  uint64_t v7;
  uint64_t *Transform;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  void **v14;
  ZinKernelSparsityCache *KernelSparsityCache;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const ZinIrOpLayerOpCode *v19;
  ZinIrOpLayerOpCode *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  ZinIrKernel *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;
  ZinIrOpLayerOpCode *v38;
  void *__p[2];
  char v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  ZinIrKernel *v43;
  std::string v44;
  void *v45[2];
  unsigned __int8 v46;
  ZinIrKernel *v47;

  v5 = *(const LayerPartInfo **)(*a3 + 384);
  v47 = 0;
  ZinMirKernelSizeSplitterEngine::GetKernelSplittingNames((uint64_t)v5, a2, a3, &v44);
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*(_QWORD *)(a1 + 16) + 160));
  (*(void (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v7 = *((_QWORD *)v5 + 17);
  Transform = (uint64_t *)LayerPartInfo::GetTransform((LayerPartInfo *)a3);
  v9 = Transform[1];
  v41 = *Transform;
  v42 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if ((v46 & 0x80u) == 0)
    v12 = v46;
  else
    v12 = (size_t)v45[1];
  v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 7);
  if (v40 < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if ((v46 & 0x80u) == 0)
      v14 = v45;
    else
      v14 = (void **)v45[0];
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "_kernel");
  KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(a1 + 16));
  ZinIrKernel::Partial(v7, &v41, (uint64_t)__p, KernelSparsityCache, (uint64_t *)&v43);
  if (v40 < 0)
    operator delete(__p[0]);
  v16 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (const ZinIrOpLayerOpCode *)*((_QWORD *)v5 + 8);
  v20 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v20, v19);
  *(_QWORD *)v20 = &unk_24C01E1B0;
  v38 = v20;
  ZinIrContext::GetAlternativeNameForTensor(*(_QWORD *)(a1 + 16), (uint64_t)&v44, (uint64_t)__p);
  ZinMirKernelSizeSplitterEngine::CreateSplitOutputTensor((uint64_t)a3, (__int128 *)__p, v5, &v36);
  if (v40 < 0)
    operator delete(__p[0]);
  v21 = (_QWORD *)operator new();
  v22 = v21;
  v23 = (std::__shared_weak_count *)v37;
  v35[0] = v36;
  v35[1] = v37;
  if (v37)
  {
    v24 = (unint64_t *)(v37 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  ZinGOCLayer::ZinGOCLayer(v21, (uint64_t *)&v38, v35, (__int128 *)v45, &v43);
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v29 = (unint64_t *)(v37 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v38)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v38 + 8))(v38);
  v31 = v43;
  v43 = 0;
  if (v31)
  {
    ZinIrKernel::~ZinIrKernel(v31);
    MEMORY[0x20BD002F8](v32, 0x1032C40DEE44497);
  }
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v47)
  {
    ZinIrKernel::~ZinIrKernel(v47);
    MEMORY[0x20BD002F8](v33, 0x1032C40DEE44497);
  }
  return v22;
}

void sub_206F1E328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,ZinIrKernel *a22,void *a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v23, 0x10B3C4024B96488);
  v26 = a13;
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a22, 0);
  KernelSplittingNames::~KernelSplittingNames(&a23);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v24 - 72), 0);
  _Unwind_Resume(a1);
}

ZinIrKernel *ZinGOCLayer::IsDynamicBias(ZinGOCLayer *this)
{
  ZinIrKernel *result;

  result = (ZinIrKernel *)*((_QWORD *)this + 17);
  if (result)
  {
    if (!*((_QWORD *)result + 75) || *((_QWORD *)result + 73) || (ZinIrKernel::HasBias(result) & 1) != 0)
      return 0;
    else
      return (ZinIrKernel *)(ZinIrKernel::HasScale(*((ZinIrKernel **)this + 17)) ^ 1);
  }
  return result;
}

uint64_t ZinGOCLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206F1E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ZinGOCLayer::IsOnlyGlobalScale(ZinGOCLayer *this)
{
  ZinIrKernel *v1;
  uint64_t Hal;
  int v3;

  v1 = (ZinIrKernel *)*((_QWORD *)this + 17);
  if (!v1 || !*((_QWORD *)v1 + 71))
    return 0;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v3 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1244);
  return ZinIrKernel::HasNoBiasNoWeightButSingularScale(v1, v3);
}

BOOL ZinGOCLayer::GetOnlyGlobalScale(ZinGOCLayer *this, float *a2)
{
  _BOOL8 IsOnlyGlobalScale;
  uint64_t v5;
  float SingularVal;

  IsOnlyGlobalScale = ZinGOCLayer::IsOnlyGlobalScale(this);
  if (IsOnlyGlobalScale)
  {
    v5 = *((_QWORD *)this + 17);
    SingularVal = ZinIrVector::GetSingularVal(*(ZinIrVector **)(v5 + 568));
    *a2 = SingularVal;
    *a2 = SingularVal * ldexpf(1.0, *(char *)(*(_QWORD *)(v5 + 568) + 280));
  }
  return IsOnlyGlobalScale;
}

BOOL ZinGOCLayer::IsSingularScaleBias(ZinGOCLayer *this)
{
  ZinIrKernel *v2;
  _BOOL8 result;

  v2 = (ZinIrKernel *)*((_QWORD *)this + 17);
  if (v2 && !*((_QWORD *)v2 + 72) && !*((_QWORD *)v2 + 71) && !*((_QWORD *)v2 + 73)
    || ZinIrKernel::HasSingularBias(v2) && !ZinIrKernel::HasScale(*((ZinIrKernel **)this + 17))
    || ZinIrKernel::HasSingularScale(*((ZinIrKernel **)this + 17))
    && !ZinIrKernel::HasBias(*((ZinIrKernel **)this + 17)))
  {
    return 1;
  }
  result = ZinIrKernel::HasSingularScale(*((ZinIrKernel **)this + 17));
  if ((_DWORD)result)
    return ZinIrKernel::HasSingularBias(*((ZinIrKernel **)this + 17));
  return result;
}

BOOL ZinGOCLayer::IsSingularScaleAndPerCoutBias(ZinGOCLayer *this)
{
  ZinIrKernel *v2;

  v2 = (ZinIrKernel *)*((_QWORD *)this + 17);
  return v2 && ZinIrKernel::HasSingularScale(v2) && ZinIrKernel::HasPerCoutBias(*((ZinIrKernel **)this + 17));
}

BOOL ZinGOCLayer::IsOnlyPerCoutBias(ZinGOCLayer *this)
{
  ZinIrKernel *v2;

  v2 = (ZinIrKernel *)*((_QWORD *)this + 17);
  return v2 && (ZinIrKernel::HasScale(v2) & 1) == 0 && ZinIrKernel::HasPerCoutBias(*((ZinIrKernel **)this + 17));
}

BOOL ZinGOCLayer::IsPerCout(ZinIrKernel **this)
{
  return ZinIrKernel::HasPerCoutScale(this[17]) || ZinIrKernel::HasPerCoutBias(this[17]);
}

BOOL ZinGOCLayer::HasShift(ZinIrKernel **this)
{
  int HasBias;
  ZinIrKernel *v3;
  _BOOL8 v4;

  HasBias = ZinIrKernel::HasBias(this[17]);
  v3 = this[17];
  if (HasBias)
    v4 = *(_BYTE *)(*((_QWORD *)v3 + 72) + 280) != 0;
  else
    v4 = 0;
  if (ZinIrKernel::HasScale(v3))
    return *(_BYTE *)(*((_QWORD *)this[17] + 71) + 280) || v4;
  return v4;
}

uint64_t ZinGOCLayer::CanMergeWithFollowingGOC(ZinGOCLayer *this, ZinIrKernel **a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  ZinIrKernel *v7;
  int HasScale;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  float *v12;
  float v13;
  _BOOL4 HasPerCoutBias;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  result = ZinIrOpLayer::CanMergeWithFollowingGOC(this, (uint64_t)a2);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)((*(uint64_t (**)(ZinGOCLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)
                   + 88);
    v6 = (*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0);
    result = ZinQuantizationUtils::TensorFormatCompatible(v5, *(_DWORD *)(v6 + 88));
    if ((_DWORD)result)
    {
      v7 = (ZinIrKernel *)*((_QWORD *)this + 17);
      if (v7)
      {
        HasScale = ZinIrKernel::HasScale(v7);
        v7 = (ZinIrKernel *)*((_QWORD *)this + 17);
        if (HasScale)
        {
          v9 = *((_QWORD *)v7 + 71);
          v10 = (*(uint64_t (**)(ZinGOCLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
          v11 = 1;
          ZinIrVector::GetValuesAsVector<float>(v9, *(_QWORD *)(v10 + 56), 1, (uint64_t)&v19);
          if (v19 != v20)
          {
            v12 = (float *)(v19 + 4);
            do
            {
              v13 = *(v12 - 1);
              v11 = v13 != 0.0;
            }
            while (v13 != 0.0 && v12++ != (float *)v20);
          }
          if (v19)
          {
            v20 = v19;
            operator delete(v19);
          }
          if (!v11)
            return 0;
          v7 = (ZinIrKernel *)*((_QWORD *)this + 17);
        }
      }
      HasPerCoutBias = ZinIrKernel::HasPerCoutBias(v7);
      v16 = ZinIrKernel::HasPerCoutBias(a2[17]);
      if (HasPerCoutBias)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 576) + 56);
        if (!v16)
        {
LABEL_18:
          v18 = 0;
          return v17 == v18 || !HasPerCoutBias || !v16;
        }
      }
      else
      {
        v17 = 0;
        if (!v16)
          goto LABEL_18;
      }
      v18 = *(_QWORD *)(*((_QWORD *)a2[17] + 72) + 56);
      return v17 == v18 || !HasPerCoutBias || !v16;
    }
  }
  return result;
}

uint64_t ZinGOCLayer::GetSingularScale(ZinGOCLayer *this, float *a2, signed __int8 *a3)
{
  uint64_t result;
  uint64_t v7;

  *a2 = 1.0;
  *a3 = 0;
  result = *((_QWORD *)this + 17);
  if (result)
  {
    result = ZinIrKernel::HasSingularScale((ZinIrKernel *)result);
    if ((_DWORD)result)
    {
      v7 = *((_QWORD *)this + 17);
      *a2 = *(float *)(v7 + 180);
      *a3 = *(_BYTE *)(v7 + 184);
      return 1;
    }
  }
  return result;
}

uint64_t ZinGOCLayer::GetSingularBias(ZinGOCLayer *this, float *a2, signed __int8 *a3)
{
  uint64_t result;
  uint64_t v7;

  *a2 = 0.0;
  *a3 = 0;
  result = *((_QWORD *)this + 17);
  if (result)
  {
    result = ZinIrKernel::HasSingularBias((ZinIrKernel *)result);
    if ((_DWORD)result)
    {
      v7 = *((_QWORD *)this + 17);
      *a2 = *(float *)(v7 + 188);
      *a3 = *(_BYTE *)(v7 + 192);
      return 1;
    }
  }
  return result;
}

uint64_t ZinGOCLayer::UnshiftSingularBias(ZinGOCLayer *this, float *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 17);
  if (result)
  {
    result = ZinIrKernel::HasSingularBias((ZinIrKernel *)result);
    if ((_DWORD)result)
    {
      *a2 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(*((_QWORD *)this + 17) + 192), *(float *)(*((_QWORD *)this + 17) + 188));
      return 1;
    }
  }
  return result;
}

uint64_t ZinGOCLayer::UnshiftSingularScale(ZinGOCLayer *this, float *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 17);
  if (result)
  {
    result = ZinIrKernel::HasSingularScale((ZinIrKernel *)result);
    if ((_DWORD)result)
    {
      *a2 = ZinIrVector::Unshift((ZinIrVector *)*(char *)(*((_QWORD *)this + 17) + 184), *(float *)(*((_QWORD *)this + 17) + 180));
      return 1;
    }
  }
  return result;
}

BOOL ZinGOCLayer::Hash(ZinIrKernel **this, int *a2)
{
  _BOOL8 IsSingularScaleBias;
  _DWORD *v5;
  char *v6;
  ZinIrKernel *v7;
  _BOOL4 HasSingularScale;
  ZinIrKernel *v9;
  _BYTE *v10;
  ZinIrKernel *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;

  IsSingularScaleBias = ZinGOCLayer::IsSingularScaleBias((ZinGOCLayer *)this);
  if (IsSingularScaleBias)
  {
    v5 = operator new(8uLL);
    *(_QWORD *)v5 = 0;
    v6 = (char *)operator new(2uLL);
    *(_WORD *)v6 = 0;
    *v5 = 1065353216;
    v7 = this[17];
    if (v7)
    {
      HasSingularScale = ZinIrKernel::HasSingularScale(v7);
      v9 = this[17];
      if (HasSingularScale)
      {
        *v5 = *((_DWORD *)v9 + 45);
        *(_WORD *)v6 = *((unsigned __int8 *)v9 + 184);
        v10 = v6 + 1;
        v5[1] = 0;
        goto LABEL_7;
      }
      v6[1] = 0;
      v10 = v6 + 1;
      v5[1] = 0;
      if (v9)
      {
LABEL_7:
        if (ZinIrKernel::HasSingularBias(v9))
        {
          v11 = this[17];
          v5[1] = *((_DWORD *)v11 + 47);
          *v10 = *((_BYTE *)v11 + 192);
        }
      }
    }
    else
    {
      v5[1] = 0;
      v6[1] = 0;
    }
    v12 = ZinHash(v5, 8u);
    v13 = ZinHash(v6, 2u);
    v14 = operator new(8uLL);
    *v14 = v12 | (unint64_t)(v13 << 32);
    *a2 = ZinHash(v14, 8u);
    operator delete(v14);
    operator delete(v6);
    operator delete(v5);
  }
  return IsSingularScaleBias;
}

void sub_206F1EB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  operator delete(v3);
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

ZinIrKernel *ZinGOCLayer::RemoveScale(ZinGOCLayer *this, ZinObjectNameFactory *a2)
{
  ZinIrKernel *result;
  ZinIrKernel **v3;
  ZinIrKernel *v5;
  ZinIrVector *v6;
  ZinIrVector *v7;
  ZinIrKernel *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  _BYTE __dst[280];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (ZinIrKernel **)((char *)this + 136);
  result = (ZinIrKernel *)*((_QWORD *)this + 17);
  if (result)
  {
    result = (ZinIrKernel *)ZinIrKernel::HasScale(result);
    if ((_DWORD)result)
    {
      v5 = *v3;
      v6 = (ZinIrVector *)*((_QWORD *)*v3 + 72);
      if (v6)
      {
        ZinIrVector::Clone(v6, &v17);
        v5 = *v3;
      }
      else
      {
        v17 = 0;
      }
      v7 = (ZinIrVector *)*((_QWORD *)v5 + 74);
      if (v7)
      {
        ZinIrVector::Clone(v7, &v16);
        v5 = *v3;
      }
      else
      {
        v16 = 0;
      }
      memcpy(__dst, (char *)v5 + 176, sizeof(__dst));
      __dst[272] &= ~8u;
      (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2, 2);
      v8 = (ZinIrKernel *)operator new();
      v18 = 0;
      v19 = 0;
      ZinIrKernel::ZinIrKernel(v8, __p, __dst, &v19, &v18, &v17, &v16, 2);
      v9 = v18;
      v18 = 0;
      if (v9)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v9);
      v10 = v19;
      v19 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      if (v14 < 0)
        operator delete(__p[0]);
      result = std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v3, v8);
      v11 = v16;
      v16 = 0;
      if (v11)
        result = (ZinIrKernel *)std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v16, v11);
      v12 = v17;
      v17 = 0;
      if (v12)
        return (ZinIrKernel *)std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v12);
    }
  }
  return result;
}

void sub_206F1ED24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 - 56);
  *(_QWORD *)(v14 - 56) = 0;
  if (v16)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v14 - 56, v16);
  _Unwind_Resume(exception_object);
}

ZinIrKernel *ZinGOCLayer::RemoveBias(ZinGOCLayer *this, ZinObjectNameFactory *a2)
{
  ZinIrKernel *result;
  ZinIrKernel **v3;
  ZinIrKernel *v5;
  ZinIrVector *v6;
  ZinIrVector *v7;
  ZinIrKernel *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  _BYTE __dst[280];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (ZinIrKernel **)((char *)this + 136);
  result = (ZinIrKernel *)*((_QWORD *)this + 17);
  if (result)
  {
    result = (ZinIrKernel *)ZinIrKernel::HasBias(result);
    if ((_DWORD)result)
    {
      v5 = *v3;
      v6 = (ZinIrVector *)*((_QWORD *)*v3 + 71);
      if (v6)
      {
        ZinIrVector::Clone(v6, &v17);
        v5 = *v3;
      }
      else
      {
        v17 = 0;
      }
      v7 = (ZinIrVector *)*((_QWORD *)v5 + 74);
      if (v7)
      {
        ZinIrVector::Clone(v7, &v16);
        v5 = *v3;
      }
      else
      {
        v16 = 0;
      }
      memcpy(__dst, (char *)v5 + 176, sizeof(__dst));
      __dst[272] &= ~0x10u;
      (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2, 2);
      v8 = (ZinIrKernel *)operator new();
      v18 = 0;
      v19 = 0;
      ZinIrKernel::ZinIrKernel(v8, __p, __dst, &v19, &v17, &v18, &v16, 2);
      v9 = v18;
      v18 = 0;
      if (v9)
        std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v18, v9);
      v10 = v19;
      v19 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      if (v14 < 0)
        operator delete(__p[0]);
      result = std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v3, v8);
      v11 = v16;
      v16 = 0;
      if (v11)
        result = (ZinIrKernel *)std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v16, v11);
      v12 = v17;
      v17 = 0;
      if (v12)
        return (ZinIrKernel *)std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&v17, v12);
    }
  }
  return result;
}

void sub_206F1EF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 - 56);
  *(_QWORD *)(v14 - 56) = 0;
  if (v16)
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v14 - 56, v16);
  _Unwind_Resume(exception_object);
}

uint64_t TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(TransposeAndConvolutionResizePatternHandler *this, const ZinIrOpLayer *a2, const ZinIrOpLayerGraph *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;

  Layer2TDMapper::LayerTracker::GetRootSourceLayers((const ZinIrOpLayerGraph *)((char *)a3 + 152), a2, &v6);
  v3 = (v7 - v6) >> 3;
  if (v3 == 2)
  {
    v4 = *(_QWORD *)v6;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 64) + 8) == 60)
    {
LABEL_8:
      v7 = v6;
      operator delete(v6);
      return v4;
    }
LABEL_6:
    v4 = 0;
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    v4 = *(_QWORD *)v6;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 64) + 8) == 59)
      goto LABEL_8;
    goto LABEL_6;
  }
  v4 = 0;
  if (v6)
    goto LABEL_8;
  return v4;
}

uint64_t TransposeAndConvolutionResizePatternHandler::MatchAndCombine(TransposeAndConvolutionResizePatternHandler *this, const ZinIrMemoryPressureAnalyzer *a2, uint64_t a3, BOOL *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char **v33;
  char v34;
  _BYTE v35[8];
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _QWORD v40[3];
  _QWORD v41[4];
  uint64_t v42;
  _QWORD v43[3];
  _QWORD v44[4];
  uint64_t v45;
  _QWORD v46[3];
  _QWORD v47[4];
  uint64_t v48;
  _QWORD v49[23];
  _QWORD v50[4];

  v50[3] = *MEMORY[0x24BDAC8D0];
  v32 = a3;
  std::string::basic_string[abi:ne180100]<0>(v40, "CH_tranpose1");
  v41[0] = &off_24C059818;
  v41[1] = this;
  v41[3] = v41;
  v26 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v42, &v26, 1);
  std::string::basic_string[abi:ne180100]<0>(v43, "1x1_conv");
  v44[0] = &off_24C059870;
  v44[1] = this;
  v44[3] = v44;
  v25 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v45, &v25, 1);
  std::string::basic_string[abi:ne180100]<0>(v46, "CH_tranpose2");
  v47[0] = &off_24C059818;
  v47[1] = this;
  v47[3] = v47;
  v24 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v48, &v24, 1);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v33 = &v27;
  v34 = 0;
  v27 = (char *)operator new(0x120uLL);
  v28 = (uint64_t)v27;
  v29 = v27 + 288;
  v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v29, (uint64_t)v40, (uint64_t)v49, (uint64_t)v27);
  v7 = *((_QWORD *)this + 2);
  v39 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24C0597C0;
  v8[1] = a2;
  v8[2] = &v32;
  v8[3] = this;
  v39 = v8;
  ZinLinearPattern::ZinLinearPattern(v49, &v27, v7, 0, v38, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v49, &v30);
  v31 = v30;
  v30 = 0uLL;
  v49[0] = &off_24C01BCC8;
  v33 = (char **)v50;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  ZinPattern::~ZinPattern((ZinPattern *)v49);
  v9 = v39;
  if (v39 == v38)
  {
    v10 = 4;
    v9 = v38;
    goto LABEL_5;
  }
  if (v39)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v33 = &v27;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v11 = 288;
  do
  {
    v12 = &v40[v11 / 8];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v38[v11 - 8]);
    v13 = *(_BYTE **)&v36[v11 + 16];
    if (&v35[v11 + 1] == v13)
    {
      v13 = v12 - 9;
      v14 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_12;
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_12:
    if ((char)v35[v11] < 0)
      operator delete((void *)*(v12 - 12));
    v11 -= 96;
  }
  while (v11);
  v15 = (_QWORD *)*((_QWORD *)this + 1);
  v37 = 0;
  v16 = operator new(0x20uLL);
  *v16 = &off_24C0598C8;
  v16[1] = &v31;
  v16[2] = a4;
  v16[3] = this;
  v37 = v16;
  v17 = ZinIrControlFlowGraph::TraverseForward(v15, (uint64_t)v36, 1);
  v18 = v37;
  if (v37 == v36)
  {
    v19 = 4;
    v18 = v36;
LABEL_19:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  else if (v37)
  {
    v19 = 5;
    goto LABEL_19;
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v17)
    return 3;
  else
    return 0;
}

void sub_206F1F370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  char *v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;

  v27 = *(char **)(v25 + 24);
  if (v27 == v24)
  {
    v28 = 4;
    v27 = &a24;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t TransposeAndConvolutionResizePatternHandler::Combine(uint64_t a1, const ZinIrOpLayerGraph *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v8;
  const ZinIrOpLayer *SingleMatch;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t SourceResizeOrResizeAsLayer;
  ZinIrOpLayer *v17;
  uint64_t InputTensor;
  ZinIrTensor *v19;
  ZinIrOpLayer *ResizeLayer;
  std::string *v21;
  __int128 v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  ZinIrTensor *v29;
  uint64_t v30;
  ZinIrOpLayer *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  uint64_t **v38;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  std::string __p[9];
  _QWORD v53[4];
  int v54;
  __int128 v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  std::string::size_type v64;
  std::string v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _QWORD v68[3];
  char v69;
  const ZinIrOpLayerGraph *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD v77[2];

  v77[1] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose1");
  SingleMatch = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "1x1_conv");
  v11 = ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v12 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose2");
  v13 = ZinPattern::GetSingleMatch(v12, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v14 = (char *)operator new(0x18uLL);
  *(_QWORD *)v14 = SingleMatch;
  *((_QWORD *)v14 + 1) = v11;
  *((_QWORD *)v14 + 2) = v13;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v76 = 0;
  v70 = a2;
  v15 = std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v71, v14, (uint64_t)(v14 + 24), 3uLL);
  SourceResizeOrResizeAsLayer = TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer((TransposeAndConvolutionResizePatternHandler *)v15, SingleMatch, a2);
  v17 = (ZinIrOpLayer *)SourceResizeOrResizeAsLayer;
  if (!SourceResizeOrResizeAsLayer)
    ZinAssertImpl("Failed to find source Resize or ResizeAs layer");
  *((_QWORD *)&v72 + 1) = SourceResizeOrResizeAsLayer;
  if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, (uint64_t *)v14))
  {
    ZinObjectNameFactory::ZinObjectNameFactory(v68, (char *)v17 + 24);
    InputTensor = ZinIrOpLayer::GetInputTensor(SingleMatch, 0);
    v19 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
    ZinObjectNameFactory::CreateName((uint64_t)v68, 0, __p);
    ZinIrTensor::CreateTensor(v19, (__int128 *)__p, &v66);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    ZinObjectNameFactory::CreateName((uint64_t)v68, 1u, &v65);
    ResizeLayer = v17;
    if (*(_DWORD *)(*((_QWORD *)v17 + 8) + 8) == 60)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ss_combine");
      v21 = std::string::append(__p, "_xfm", 4uLL);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v64 = v21->__r_.__value_.__r.__words[2];
      v63 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      ResizeLayer = (ZinIrOpLayer *)ZinResizeAsLayer::CreateResizeLayer((uint64_t)v17, (uint64_t)a2, (uint64_t)&v63, InputTensor, (uint64_t)v19);
      if (SHIBYTE(v64) < 0)
        operator delete((void *)v63);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v61 = v66;
    v62 = v67;
    if (v67)
    {
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    v25 = ZinResizeLayer::CloneResizeOnH(ResizeLayer, &v61, (__int128 *)&v65);
    v26 = v62;
    if (v62)
    {
      v27 = (unint64_t *)&v62->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    ZinObjectNameFactory::CreateName((uint64_t)v68, 1u, &v60);
    v29 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v14 + 2) + 32))(*((_QWORD *)v14 + 2), 0, 0);
    ZinObjectNameFactory::CreateName((uint64_t)v68, 0, __p);
    ZinIrTensor::CreateTensor(v29, (__int128 *)__p, &v58);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v30 = operator new();
    v31 = (ZinIrOpLayer *)v30;
    v56 = v58;
    v57 = v59;
    if (v59)
    {
      v32 = (unint64_t *)&v59->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    ZinNEBypassLayer::ZinNEBypassLayer(v30, &v56, (__int128 *)&v60, (uint64_t)v25, 0, 0, 0, 0, 0, 0);
    v34 = v57;
    if (v57)
    {
      v35 = (unint64_t *)&v57->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v77[0] = v17;
    *(_QWORD *)&v55 = v77;
    *((_QWORD *)&v55 + 1) = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v55);
    v37 = ZinIrOpLayerGraph::AddNode((uint64_t **)a2, v31, (ZinIrOpLayer ***)__p);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    }
    if (v37
      && ZinIrOpLayerGraph::MoveIncomingEdges(a2, *(ZinIrOpLayer **)v14, v31)
      && (v38 = (uint64_t **)*((_QWORD *)v14 + 2),
          memset(v53, 0, sizeof(v53)),
          v54 = 1065353216,
          v39 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, v38, v31, v53),
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v53),
          (v39 & 1) != 0))
    {
      ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)__p);
      if (ZinMirSetActiveNE(v31, (CFArrayRef *)__p))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          TransposeAndConvolutionResizePatternHandler::Combine();
      }
      else
      {
        v48 = 0;
        while (ZinIrOpLayerGraph::RemoveNode(a2, *(ZinIrOpLayer **)&v14[v48], 0))
        {
          v48 += 8;
          if (v48 == 24)
          {
            *(_QWORD *)&v73 = v31;
            v50 = *(_QWORD *)(a1 + 24);
            v49 = a1 + 24;
            v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 8) - v50) >> 5);
            *(_QWORD *)&v55 = v31;
            *((_QWORD *)&v55 + 1) = v51;
            std::__tree<std::__value_type<ZinConcatLayer *,ZinConcatLayer *>,std::__map_value_compare<ZinConcatLayer *,std::__value_type<ZinConcatLayer *,ZinConcatLayer *>,std::less<ZinConcatLayer *>,true>,std::allocator<std::__value_type<ZinConcatLayer *,ZinConcatLayer *>>>::__emplace_unique_key_args<ZinConcatLayer *,std::pair<ZinConcatLayer * const,ZinConcatLayer *>>((uint64_t **)(v49 + 24), (unint64_t *)&v55, &v55);
            std::vector<SplitPatternHandler::ChainInfo>::push_back[abi:ne180100]((uint64_t *)v49, (const SplitPatternHandler::ChainInfo *)&v70);
            v40 = 0;
            *a4 = 1;
            goto LABEL_43;
          }
        }
      }
      v40 = 3;
LABEL_43:
      ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)__p);
    }
    else
    {
      v40 = 3;
    }
    v41 = v59;
    if (v59)
    {
      v42 = (unint64_t *)&v59->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    v44 = v67;
    if (v67)
    {
      v45 = (unint64_t *)&v67->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v68[0] = off_24C01FBB0;
    if (v69 < 0)
      operator delete((void *)v68[1]);
  }
  else
  {
    v40 = 3;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*((_QWORD *)&v73 + 1))
  {
    *(_QWORD *)&v74 = *((_QWORD *)&v73 + 1);
    operator delete(*((void **)&v73 + 1));
  }
  if ((_QWORD)v71)
  {
    *((_QWORD *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  operator delete(v14);
  return v40;
}

void sub_206F1FAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;

  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a12);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  if (a55 < 0)
    operator delete(__p);
  if (a67 < 0)
    operator delete(a62);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v68 - 248);
  *(_QWORD *)(v68 - 232) = off_24C01FBB0;
  if (*(char *)(v68 - 201) < 0)
    operator delete(*(void **)(v68 - 224));
  SplitPatternHandler::ChainInfo::~ChainInfo((SplitPatternHandler::ChainInfo *)(v68 - 192));
  operator delete(v67);
  _Unwind_Resume(a1);
}

void sub_206F1FCA4()
{
  JUMPOUT(0x206F1FC9CLL);
}

uint64_t std::vector<SplitPatternHandler::ChainInfo>::push_back[abi:ne180100](uint64_t *a1, const SplitPatternHandler::ChainInfo *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<SplitPatternHandler::ChainInfo>::__push_back_slow_path<SplitPatternHandler::ChainInfo const&>(a1, a2);
  }
  else
  {
    SplitPatternHandler::ChainInfo::ChainInfo((SplitPatternHandler::ChainInfo *)a1[1], a2);
    result = v3 + 96;
    a1[1] = v3 + 96;
  }
  a1[1] = result;
  return result;
}

void sub_206F1FCF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void SplitPatternHandler::ChainInfo::~ChainInfo(SplitPatternHandler::ChainInfo *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 72);
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

BOOL TransposeAndConvolutionResizePatternHandler::IsLayerCreated(TransposeAndConvolutionResizePatternHandler *this, const ZinIrOpLayer *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 7);
  v2 = (char *)this + 56;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((_QWORD *)v5 + 4) > (unint64_t)a2)
LABEL_12:
    v5 = v2;
  return v5 != v2;
}

uint64_t TransposeAndConvolutionResizePatternHandler::SpatialSplitCopy(TransposeAndConvolutionResizePatternHandler *this, const ZinIrOpLayer *a2, const TiledLayerTensorRegions *a3)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  _DWORD *v13;

  v5 = (_QWORD *)*((_QWORD *)this + 7);
  v3 = (char *)this + 56;
  v4 = v5;
  if (!v5)
    goto LABEL_17;
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = (char *)v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v3 || *((_QWORD *)v7 + 4) > (unint64_t)a2)
LABEL_17:
    ZinAssertImpl("error in resize pattern handler", a2, a3);
  result = (*(uint64_t (**)(const ZinIrOpLayer *, const TiledLayerTensorRegions *))(*(_QWORD *)a2 + 320))(a2, a3);
  v12 = *(_QWORD *)(result + 200);
  if (v12 && !*(_QWORD *)(result + 192))
  {
    v13 = *(_DWORD **)(v12 + 64);
    if (v13[2] == 59)
    {
      v13[43] = *((_QWORD *)a3 + 7);
      v13[56] = *(_QWORD *)(*((_QWORD *)a3 + 16) + 56);
    }
  }
  return result;
}

uint64_t TransposeAndConvolutionResizePatternHandler::AdjustInputRegionOfTiledCombinedLayer(uint64_t result, unint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (!a4)
  {
    v6 = *(_QWORD **)(result + 56);
    v4 = result + 56;
    v5 = v6;
    if (!v6)
      goto LABEL_24;
    v8 = (_QWORD *)v4;
    do
    {
      v9 = v5[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v5;
      else
        v11 = v5 + 1;
      if (v10)
        v8 = v5;
      v5 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 == (_QWORD *)v4 || v8[4] > a2)
LABEL_24:
      ZinAssertImpl("error in resize pattern handler");
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 200) + 64);
    if (*(_DWORD *)(*(_QWORD *)(v12 + 144) + 4))
      v13 = 0;
    else
      v13 = *(_DWORD *)(*(_QWORD *)(v12 + 192) + 4) == 3;
    if (!v13)
      ZinAssertImpl("unsupported sampling mode");
    v14 = (float)*(unsigned int *)(v12 + 172) / (float)*(unsigned int *)(v12 + 224);
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a2 + 88) + 32))(**(_QWORD **)(a2 + 88), 0, 0);
    v15 = (float)(uint64_t)a3[16];
    v16 = vcvtms_s32_f32(v15 / v14);
    if (v16 <= 1)
      v16 = 1;
    v17 = v16 - 1;
    v18 = *(_QWORD *)(result + 64) - 1;
    v19 = vcvtps_s32_f32((float)((float)(v15 + (float)(uint64_t)a3[21]) + -1.0) / v14);
    if ((uint64_t)(v19 + 1) < v18)
      v18 = v19 + 1;
    a3[2] = v17;
    v20 = v18 - v17 + 1;
    a3[7] = v20;
    a3[24] = v20;
  }
  return result;
}

uint64_t TransposeAndConvolutionResizePatternHandler::GetSupportedSplitDimension(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unsigned int v11;

  v5 = *(_QWORD **)(a1 + 56);
  v3 = (_QWORD *)(a1 + 56);
  v4 = v5;
  if (!v5)
    goto LABEL_13;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2)
LABEL_13:
    ZinAssertImpl("error when getting splitting dimension");
  v11 = 1;
  return std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>(a3, &v11);
}

uint64_t TransposeAndConvolutionResizePatternHandler::InsertSplitLayer(TransposeAndConvolutionResizePatternHandler *this, ZinANELayer *a2, ZinIrOpLayer *a3, const TiledLayerTensorRegions *a4)
{
  char *v4;
  _QWORD *v5;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char **v18;
  unint64_t v19;
  void **v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  TiledLayerTensorRegions *v37;
  _QWORD *v38;
  uint64_t result;
  ZinANELayer *v40;

  v40 = a2;
  v4 = (char *)this + 56;
  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v5)
    goto LABEL_32;
  v9 = (char *)this + 48;
  v10 = v4;
  do
  {
    v11 = v5[4];
    v12 = v11 >= (unint64_t)a2;
    if (v11 >= (unint64_t)a2)
      v13 = v5;
    else
      v13 = v5 + 1;
    if (v12)
      v10 = (char *)v5;
    v5 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == v4 || *((_QWORD *)v10 + 4) > (unint64_t)a2)
LABEL_32:
    ZinAssertImpl("Error when inserting split layers", a2, a3, a4);
  v14 = *std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v9, (unint64_t *)&v40);
  v15 = *((_QWORD *)this + 3);
  v16 = v15 + 96 * v14;
  v19 = *(_QWORD *)(v16 + 64);
  v18 = (char **)(v16 + 64);
  v17 = v19;
  v20 = (void **)(v18 - 1);
  v21 = *(v18 - 1);
  if ((unint64_t)v21 >= v19)
  {
    v23 = (void **)(v18 - 2);
    v24 = (uint64_t)*(v18 - 2);
    v25 = ((uint64_t)v21 - v24) >> 3;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v26 = v17 - v24;
    v27 = v26 >> 2;
    if (v26 >> 2 <= (unint64_t)(v25 + 1))
      v27 = v25 + 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v18, v28);
    else
      v29 = 0;
    v30 = &v29[8 * v25];
    v31 = &v29[8 * v28];
    *(_QWORD *)v30 = a3;
    v22 = v30 + 8;
    v32 = (char *)*v20;
    v33 = (char *)*v23;
    if (*v20 != *v23)
    {
      do
      {
        v34 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v30 - 1) = v34;
        v30 -= 8;
      }
      while (v32 != v33);
      v32 = (char *)*v23;
    }
    *v23 = v30;
    *v20 = v22;
    *v18 = v31;
    if (v32)
      operator delete(v32);
  }
  else
  {
    *v21 = a3;
    v22 = v21 + 1;
  }
  *v20 = v22;
  v35 = v15 + 96 * v14;
  v37 = *(TiledLayerTensorRegions **)(v35 + 80);
  v36 = *(_QWORD *)(v35 + 88);
  v38 = (_QWORD *)(v35 + 80);
  if ((unint64_t)v37 >= v36)
  {
    result = std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>((uint64_t *)(v15 + 96 * v14 + 72), a4);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v37, a4);
    result = (uint64_t)v37 + 224;
    *v38 = (char *)v37 + 224;
  }
  *v38 = result;
  return result;
}

void sub_206F201A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t TransposeAndConvolutionResizePatternHandler::Flatten(TransposeAndConvolutionResizePatternHandler *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) == v1)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = (uint64_t *)(v1 + 96 * v3);
    v6 = v4 + 6;
    v5 = v4[6];
    if (v4[7] != v5)
      break;
    if ((ZinIrOpLayerGraph::ReplaceNode(*v4, *(ZinIrOpLayer **)(v1 + 96 * v3 + 40), (ZinIrOpLayer ***)(v1 + 96 * v3 + 8)) & 1) == 0)return 3;
LABEL_9:
    ++v3;
    v1 = *((_QWORD *)this + 3);
    if (v3 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v1) >> 5))
      return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = (_QWORD *)(v1 + 96 * v3 + 72);
  while (!TransposeAndConvolutionResizePatternHandler::FlattenSplitLayer((ZinKernelSparsityCache **)this, *(ZinIrOpLayer **)(v5 + 8 * v8), (const TiledLayerTensorRegions *)(*v9 + v7), (const SplitPatternHandler::ChainInfo *)v4))
  {
    ++v8;
    v5 = *v6;
    v7 += 224;
    if (v8 >= (v4[7] - *v6) >> 3)
      goto LABEL_9;
  }
  return 3;
}

uint64_t TransposeAndConvolutionResizePatternHandler::FlattenSplitLayer(ZinKernelSparsityCache **this, ZinIrOpLayer *a2, const TiledLayerTensorRegions *a3, const SplitPatternHandler::ChainInfo *a4)
{
  ZinReshapeLayer **v4;
  ZinReshapeLayer *v5;
  uint64_t *v6;
  const TiledLayerTensorRegions *v7;
  ZinIrOpLayer *v8;
  uint64_t v9;
  __int128 *v10;
  TiledLayerTensorRegions *v11;
  TiledLayerTensorRegions *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  TiledLayerTensorRegions *v22;
  TiledLayerTensorRegions *v23;
  TiledLayerTensorRegions *v24;
  TiledLayerTensorRegions *v25;
  uint64_t v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  const TiledLayerTensorRegions *v30;
  uint64_t *v31;
  __n128 v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t NEConvLayer;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  void **v41;
  const TiledLayerTensorRegions *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  size_t v46;
  void **v47;
  void **v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  size_t v56;
  void **v57;
  void **v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  ZinIrKernel *v63;
  unint64_t *v64;
  unint64_t v65;
  size_t v66;
  void **v67;
  void **v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  ZinIrKernel *v72;
  ZinIrKernel *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  ZinIrKernel *v77;
  unint64_t *v78;
  uint64_t v79;
  const ZinIrTensor *v80;
  ZinIrTensor *v81;
  char *v82;
  void *v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  ZinIrOpLayer *v98;
  int64x2_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  void *v104[2];
  __int128 v105;
  uint64_t v106;
  int64x2_t v107;
  int64x2_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  void *__p;
  void *v123;
  _OWORD *v124;
  _OWORD v125[2];
  void *v126;
  void *v127;
  char *v128;
  ZinIrKernel *v129[2];
  __int128 v130;
  uint64_t v131;
  void *v132;
  void *v133;
  char *v134;
  void *v135[2];
  __int128 v136;
  uint64_t v137;
  int64x2_t v138;
  int64x2_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  int64x2_t v148;
  int64x2_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  void **v154[3];
  char v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  int64x2_t v163;
  int64x2_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  TiledLayerTensorRegions *v170;
  unint64_t v171;
  _OWORD v172[4];
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v4 = (ZinReshapeLayer **)*((_QWORD *)a4 + 1);
  if (*((_QWORD *)a4 + 2) - (_QWORD)v4 != 24)
    ZinAssertImpl("wrong chain size", a2, a3);
  v5 = *v4;
  if (*(_DWORD *)(*((_QWORD *)*v4 + 8) + 8) != 37)
    ZinAssertImpl("wrong layer", a2, a3);
  v6 = (uint64_t *)a4;
  v7 = a3;
  v8 = a2;
  v168 = 0;
  v166 = 0u;
  v167 = 0u;
  v9 = ZinReshapeLayer::GetReshapeInfo(v5) + 16;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorPosition>(*((_QWORD **)v7 + 16), v9, &v166);
  v163 = vdupq_n_s64(1uLL);
  v164 = v163;
  v165 = 1;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((_QWORD *)(*((_QWORD *)v7 + 16) + 40), v9, &v163);
  v10 = (__int128 *)((char *)v7 + 152);
  v138 = v163;
  v139 = v164;
  v137 = v168;
  v140 = v165;
  *(_OWORD *)v135 = v166;
  v136 = v167;
  TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v154, (__int128 *)((char *)v7 + 152), v135, (uint64_t)v7 + 80, (uint64_t)v7 + 104, (uint64_t)v7 + 128, 0, 0);
  v11 = v170;
  if ((unint64_t)v170 >= v171)
  {
    v12 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>(&v169, (const TiledLayerTensorRegions *)v154);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v170, (const TiledLayerTensorRegions *)v154);
    v12 = (TiledLayerTensorRegions *)((char *)v11 + 224);
  }
  v170 = v12;
  v153 = 0;
  v151 = 0u;
  v152 = 0u;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorPosition>(v7, v9, &v151);
  v148 = vdupq_n_s64(1uLL);
  v149 = v148;
  v150 = 1;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((_QWORD *)v7 + 5, v9, &v148);
  *(_OWORD *)v104 = v151;
  v105 = v152;
  v107 = v148;
  v106 = v153;
  v108 = v149;
  v109 = v150;
  v13 = v169;
  *(_OWORD *)v129 = *(_OWORD *)v169;
  v130 = *(_OWORD *)(v169 + 16);
  v131 = *(_QWORD *)(v169 + 32);
  v14 = operator new(0x28uLL);
  v134 = (char *)v14 + 40;
  v15 = v130;
  *v14 = *(_OWORD *)v129;
  v14[1] = v15;
  *((_QWORD *)v14 + 4) = v131;
  v132 = v14;
  v133 = (char *)v14 + 40;
  memset(v125, 0, sizeof(v125));
  LogicalDimensions::LogicalDimensions((uint64_t)v172, v13 + 40, v125);
  v16 = operator new(0x48uLL);
  v128 = (char *)v16 + 72;
  v17 = v172[3];
  v16[2] = v172[2];
  v16[3] = v17;
  *((_QWORD *)v16 + 8) = v173;
  v18 = v172[1];
  *v16 = v172[0];
  v16[1] = v18;
  v126 = v16;
  v127 = (char *)v16 + 72;
  v118 = *(_OWORD *)(v169 + 16);
  v119 = *(_OWORD *)(v169 + 32);
  v120 = *(_OWORD *)(v169 + 48);
  v121 = *(_OWORD *)(v169 + 64);
  *(_OWORD *)v117 = *(_OWORD *)v169;
  v19 = operator new(0x50uLL);
  v123 = v19 + 5;
  v124 = v19 + 5;
  v20 = v120;
  v19[2] = v119;
  v19[3] = v20;
  v19[4] = v121;
  v21 = v118;
  *v19 = *(_OWORD *)v117;
  v19[1] = v21;
  __p = v19;
  TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v135, v10, v104, (uint64_t)&v132, (uint64_t)&v126, (uint64_t)&__p, 0, 0);
  if (__p)
  {
    v123 = __p;
    operator delete(__p);
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  v22 = v170;
  if ((unint64_t)v170 >= v171)
  {
    v23 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>(&v169, (const TiledLayerTensorRegions *)v135);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v170, (const TiledLayerTensorRegions *)v135);
    v23 = (TiledLayerTensorRegions *)((char *)v22 + 224);
  }
  v170 = v23;
  TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v104, v10, v7, v169 + 304, v169 + 328, v169 + 352, 0, 0);
  v24 = v170;
  if ((unint64_t)v170 >= v171)
  {
    v25 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>(&v169, (const TiledLayerTensorRegions *)v104);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v170, (const TiledLayerTensorRegions *)v104);
    v25 = (TiledLayerTensorRegions *)((char *)v24 + 224);
  }
  v170 = v25;
  if (v116)
    operator delete(v116);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v147)
    operator delete(v147);
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v162)
    operator delete(v162);
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  v135[1] = 0;
  v135[0] = 0;
  *(_QWORD *)&v136 = 0;
  v26 = v6[1];
  if (v6[2] != v26)
  {
    v27 = 0;
    v28 = (void **)off_24C01FBB0;
    v98 = v8;
    do
    {
      v29 = v169;
      v30 = (const TiledLayerTensorRegions *)(v169 + 224 * v27);
      v31 = *(uint64_t **)(v26 + 8 * v27);
      ZinIrOpLayer::CreateSpatialSplitCopyTensor((ZinIrOpLayer *)v31, v30, v172);
      ZinIrOpLayer::CreateSpatialSplitCopyName((ZinIrOpLayer *)v31, v7, (std::string *)v104);
      v32 = ZinObjectNameFactory::ZinObjectNameFactory(v154, v104);
      v33 = *(_DWORD *)(v31[8] + 8);
      if (v33 == 85)
      {
        v40 = v6;
        v41 = v28;
        v42 = v7;
        v43 = (_QWORD *)v31[54];
        v102 = v172[0];
        if (*((_QWORD *)&v172[0] + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v172[0] + 1) + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        if ((SBYTE7(v105) & 0x80u) == 0)
          v46 = BYTE7(v105);
        else
          v46 = (size_t)v104[1];
        std::string::basic_string[abi:ne180100]((uint64_t)v117, v46 + 5);
        if ((SBYTE7(v118) & 0x80u) == 0)
          v47 = v117;
        else
          v47 = (void **)v117[0];
        if (v46)
        {
          if ((SBYTE7(v105) & 0x80u) == 0)
            v48 = v104;
          else
            v48 = (void **)v104[0];
          memmove(v47, v48, v46);
        }
        strcpy((char *)v47 + v46, "_conv");
        v49 = (*(uint64_t (**)(_QWORD *, __int128 *, void **))(*v43 + 176))(v43, &v102, v117);
        if (SBYTE7(v118) < 0)
          operator delete(v117[0]);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        if (*((_QWORD *)&v102 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        *(_QWORD *)&v151 = 0;
        *(_QWORD *)&v151 = *((_QWORD *)v30 + 1);
        v148.i64[0] = 0;
        v148.i64[0] = *((_QWORD *)v30 + 6);
        v163.i8[0] = 0;
        std::allocate_shared[abi:ne180100]<ZinIrTransformPartial,std::allocator<ZinIrTransformPartial>,long &,long &,ZinPartialTransformDimension,void>(v148.i64, (uint64_t *)&v151, v163.i8, &v166);
        v53 = v43[17];
        v101 = v166;
        if (*((_QWORD *)&v166 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        if ((SBYTE7(v105) & 0x80u) == 0)
          v56 = BYTE7(v105);
        else
          v56 = (size_t)v104[1];
        std::string::basic_string[abi:ne180100]((uint64_t)v117, v56 + 9);
        if ((SBYTE7(v118) & 0x80u) == 0)
          v57 = v117;
        else
          v57 = (void **)v117[0];
        if (v56)
        {
          if ((SBYTE7(v105) & 0x80u) == 0)
            v58 = v104;
          else
            v58 = (void **)v104[0];
          memmove(v57, v58, v56);
        }
        strcpy((char *)v57 + v56, "_partialK");
        ZinIrKernel::Partial(v53, (uint64_t *)&v101, (uint64_t)v117, this[9], (uint64_t *)v129);
        if (SBYTE7(v118) < 0)
          operator delete(v117[0]);
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v132 = 0;
        v62 = v29 + 224 * v27;
        v132 = *(void **)(*(_QWORD *)(v62 + 128) + 8);
        v126 = 0;
        v126 = *(void **)(*(_QWORD *)(v62 + 128) + 48);
        LOBYTE(__p) = 1;
        std::allocate_shared[abi:ne180100]<ZinIrTransformPartial,std::allocator<ZinIrTransformPartial>,long &,long &,ZinPartialTransformDimension,void>((uint64_t *)&v126, (uint64_t *)&v132, (char *)&__p, &v163);
        v63 = v129[0];
        v100 = v163;
        if (v163.i64[1])
        {
          v64 = (unint64_t *)(v163.i64[1] + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        if ((SBYTE7(v105) & 0x80u) == 0)
          v66 = BYTE7(v105);
        else
          v66 = (size_t)v104[1];
        std::string::basic_string[abi:ne180100]((uint64_t)v117, v66 + 9);
        if ((SBYTE7(v118) & 0x80u) == 0)
          v67 = v117;
        else
          v67 = (void **)v117[0];
        if (v66)
        {
          if ((SBYTE7(v105) & 0x80u) == 0)
            v68 = v104;
          else
            v68 = (void **)v104[0];
          memmove(v67, v68, v66);
        }
        strcpy((char *)v67 + v66, "_partialC");
        ZinIrKernel::Partial((uint64_t)v63, v100.i64, (uint64_t)v117, this[9], (uint64_t *)&__p);
        v7 = v42;
        if (SBYTE7(v118) < 0)
          operator delete(v117[0]);
        v69 = (std::__shared_weak_count *)v100.i64[1];
        v28 = v41;
        v6 = v40;
        v8 = v98;
        if (v100.i64[1])
        {
          v70 = (unint64_t *)(v100.i64[1] + 8);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = (ZinIrKernel *)__p;
        __p = 0;
        std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v49 + 136), v72);
        NEConvLayer = ZinBuilder::CreateNEConvLayer(v31[2], (uint64_t)v154, *(_QWORD *)&v172[0] + 48, (__int128 *)(*(_QWORD *)&v172[0] + 48), *(_DWORD *)(*(_QWORD *)&v172[0] + 88), *(_DWORD *)(*(_QWORD *)&v172[0] + 88), 0, 0, 0, v49, 0, 0, 0, 0, 0);
        v73 = (ZinIrKernel *)__p;
        __p = 0;
        if (v73)
        {
          ZinIrKernel::~ZinIrKernel(v73);
          MEMORY[0x20BD002F8]();
        }
        v74 = (std::__shared_weak_count *)v163.i64[1];
        if (v163.i64[1])
        {
          v75 = (unint64_t *)(v163.i64[1] + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = v129[0];
        v129[0] = 0;
        if (v77)
        {
          ZinIrKernel::~ZinIrKernel(v77);
          MEMORY[0x20BD002F8]();
        }
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (!*((_QWORD *)&v166 + 1))
          goto LABEL_130;
        v78 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v39 = __ldaxr(v78);
        while (__stlxr(v39 - 1, v78));
      }
      else
      {
        if (v33 != 37)
          ZinAssertImpl("Expecting NEConv here", v32.n128_f64[0]);
        v103 = v172[0];
        if (*((_QWORD *)&v172[0] + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v172[0] + 1) + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        NEConvLayer = (*(uint64_t (**)(uint64_t *, __int128 *, void **, __n128))(*v31 + 176))(v31, &v103, v104, v32);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        if (!*((_QWORD *)&v103 + 1))
          goto LABEL_130;
        v38 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
      }
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
LABEL_130:
      if (*(_BYTE *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0)
                    + 144))
      {
        v79 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
        v80 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)NEConvLayer + 32))(NEConvLayer, 0, 0);
        ZinMirSpatialSplitUtils::PropagateSpatialSplitInfo(v79, v80, v81);
      }
      v82 = (char *)v135[1];
      if (v135[1] >= (void *)v136)
      {
        v84 = ((char *)v135[1] - (char *)v135[0]) >> 3;
        if ((unint64_t)(v84 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v85 = (uint64_t)(v136 - (unint64_t)v135[0]) >> 2;
        if (v85 <= v84 + 1)
          v85 = v84 + 1;
        if ((unint64_t)v136 - (unint64_t)v135[0] >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v136, v86);
        else
          v87 = 0;
        v88 = (uint64_t *)&v87[8 * v84];
        *v88 = NEConvLayer;
        v83 = v88 + 1;
        v89 = (char *)v135[1];
        v90 = (char *)v135[0];
        if (v135[1] != v135[0])
        {
          do
          {
            v91 = *((_QWORD *)v89 - 1);
            v89 -= 8;
            *--v88 = v91;
          }
          while (v89 != v90);
          v89 = (char *)v135[0];
        }
        v135[0] = v88;
        v135[1] = v83;
        *(_QWORD *)&v136 = &v87[8 * v86];
        if (v89)
          operator delete(v89);
      }
      else
      {
        *(_QWORD *)v135[1] = NEConvLayer;
        v83 = v82 + 8;
      }
      v135[1] = v83;
      v154[0] = v28;
      if (v155 < 0)
        operator delete(v154[1]);
      if (SBYTE7(v105) < 0)
        operator delete(v104[0]);
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v172[0] + 1);
      if (*((_QWORD *)&v172[0] + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v172[0] + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      ++v27;
      v26 = v6[1];
    }
    while (v27 < (v6[2] - v26) >> 3);
  }
  v95 = ZinIrOpLayerGraph::ReplaceNode(*v6, v8, (ZinIrOpLayer ***)v135);
  if (v135[0])
  {
    v135[1] = v135[0];
    operator delete(v135[0]);
  }
  if (v95)
    v96 = 0;
  else
    v96 = 3;
  v154[0] = (void **)&v169;
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100](v154);
  return v96;
}

void sub_206F20E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&a27);
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&STACK[0x260]);
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&STACK[0x3A0]);
  STACK[0x3A0] = v27 - 208;
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorPosition>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  __int128 v3;
  __int128 v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *(_OWORD *)a1;
  v4 = *((_OWORD *)a1 + 1);
  a3[4] = a1[4];
  *(_OWORD *)a3 = v3;
  *((_OWORD *)a3 + 1) = v4;
  v5 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v6)
  {
    while (2)
    {
      v7 = a1;
      switch(*v5)
      {
        case 0:
          goto LABEL_7;
        case 1:
          v7 = a1 + 4;
          goto LABEL_7;
        case 2:
          v7 = a1 + 1;
          goto LABEL_7;
        case 3:
          v7 = a1 + 2;
          goto LABEL_7;
        case 4:
          v7 = a1 + 3;
LABEL_7:
          v8 = a3 + 3;
          switch(v5[1])
          {
            case 0:
              v8 = a3;
              break;
            case 1:
              v8 = a3 + 4;
              break;
            case 2:
              v8 = a3 + 1;
              break;
            case 3:
              v8 = a3 + 2;
              break;
            case 4:
              break;
            default:
              return 3;
          }
          *v8 = *v7;
          v5 += 2;
          if (v5 == v6)
            return 0;
          continue;
        default:
          return 3;
      }
    }
  }
  return 0;
}

char **SplitPatternHandlerMgr::SplitPatternHandlerMgr(char **a1, char *a2, char *a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = a3;
  v8 = (_QWORD *)operator new();
  *v8 = off_24C026948;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  v8[7] = 0;
  v8[6] = v8 + 7;
  v8[8] = 0;
  v8[9] = a4;
  v9 = (unint64_t)a1[2];
  v10 = a1[1];
  if ((unint64_t)v10 >= v9)
  {
    v12 = (v10 - *a1) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v13 = v9 - (_QWORD)*a1;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v28 = a1 + 2;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v27 = v18;
    *(_QWORD *)v17 = v8;
    v11 = v17 + 8;
    v26.i64[1] = (uint64_t)(v17 + 8);
    v20 = *a1;
    v19 = a1[1];
    if (v19 == *a1)
    {
      v22 = vdupq_n_s64((unint64_t)v19);
    }
    else
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v22 = *(int64x2_t *)a1;
      v11 = (char *)v26.i64[1];
      v18 = v27;
    }
    *a1 = v17;
    a1[1] = v11;
    v26 = v22;
    v23 = a1[2];
    a1[2] = v18;
    v27 = v23;
    v25 = v22.i64[0];
    std::__split_buffer<std::unique_ptr<ZinIrUnit>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    *(_QWORD *)v10 = v8;
    v11 = v10 + 8;
  }
  a1[1] = v11;
  return a1;
}

void sub_206F212E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::vector<std::unique_ptr<ZinRtOperation>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t SplitPatternHandlerMgr::MatchAndCombine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v5)
    return 0;
  while (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v4 + 16))(*v4, a2, a3, a4))
  {
    if (++v4 == v5)
      return 0;
  }
  return 3;
}

uint64_t SplitPatternHandlerMgr::IsLayerCreated(SplitPatternHandlerMgr *this, const ZinIrOpLayer *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v2)
    return 0;
  v4 = *(_QWORD *)this + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, const ZinIrOpLayer *))(**(_QWORD **)(v4 - 8) + 24))(*(_QWORD *)(v4 - 8), a2);
    if ((result & 1) != 0)
      break;
    v6 = v4 == v2;
    v4 += 8;
  }
  while (!v6);
  return result;
}

uint64_t SplitPatternHandlerMgr::SpatialSplitCopy(SplitPatternHandlerMgr *this, const ZinIrOpLayer *a2, const TiledLayerTensorRegions *a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this == v4)
    goto LABEL_4;
  while (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *))(*(_QWORD *)*v3 + 24))(*v3, a2) & 1) == 0)
  {
    if (++v3 == v4)
      goto LABEL_4;
  }
  if (!*v3)
LABEL_4:
    ZinAssertImpl("error in pattern handler");
  return (*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const TiledLayerTensorRegions *))(*(_QWORD *)*v3 + 32))(*v3, a2, a3);
}

uint64_t SplitPatternHandlerMgr::AdjustInputRegionOfTiledCombinedLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v5)
    goto LABEL_4;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 24))(*v4, a2) & 1) == 0)
  {
    if (++v4 == v5)
      goto LABEL_4;
  }
  if (!*v4)
LABEL_4:
    ZinAssertImpl("error in pattern handler");
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, a2, a3, a4);
}

uint64_t SplitPatternHandlerMgr::GetSupportedSplitDimension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v4)
    goto LABEL_4;
  while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a2) & 1) == 0)
  {
    if (++v3 == v4)
      goto LABEL_4;
  }
  if (!*v3)
LABEL_4:
    ZinAssertImpl("error in pattern handler");
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 48))(*v3, a2, a3);
}

uint64_t SplitPatternHandlerMgr::InsertSplitLayer(SplitPatternHandlerMgr *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3, const TiledLayerTensorRegions *a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = *(_QWORD **)this;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this == v5)
    goto LABEL_4;
  while (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *))(*(_QWORD *)*v4 + 24))(*v4, a2) & 1) == 0)
  {
    if (++v4 == v5)
      goto LABEL_4;
  }
  if (!*v4)
LABEL_4:
    ZinAssertImpl("error in pattern handler");
  return (*(uint64_t (**)(_QWORD, ZinIrOpLayer *, ZinIrOpLayer *, const TiledLayerTensorRegions *))(*(_QWORD *)*v4 + 56))(*v4, a2, a3, a4);
}

uint64_t SplitPatternHandlerMgr::FlattenCombinedLayers(SplitPatternHandlerMgr *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)this;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  while (1)
  {
    if (v1 == v2)
      return 0;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v1 + 64))(*v1))
      break;
    ++v1;
  }
  return 3;
}

void TransposeAndConvolutionResizePatternHandler::~TransposeAndConvolutionResizePatternHandler(TransposeAndConvolutionResizePatternHandler *this)
{
  void **v2;

  *(_QWORD *)this = off_24C026948;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v2 = (void **)((char *)this + 24);
  std::vector<SplitPatternHandler::ChainInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(_QWORD *)this = off_24C026948;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v2 = (void **)((char *)this + 24);
  std::vector<SplitPatternHandler::ChainInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x20BD002F8](this, 0x10E1C401C2137EFLL);
}

uint64_t std::vector<SplitPatternHandler::ChainInfo>::__push_back_slow_path<SplitPatternHandler::ChainInfo const&>(uint64_t *a1, const SplitPatternHandler::ChainInfo *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  SplitPatternHandler::ChainInfo *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (SplitPatternHandler::ChainInfo *)&v10[96 * v4];
  v16 = &v10[96 * v9];
  SplitPatternHandler::ChainInfo::ChainInfo(v14, a2);
  v15 = (char *)v14 + 96;
  std::vector<SplitPatternHandler::ChainInfo>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<SplitPatternHandler::ChainInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206F217F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SplitPatternHandler::ChainInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

SplitPatternHandler::ChainInfo *SplitPatternHandler::ChainInfo::ChainInfo(SplitPatternHandler::ChainInfo *this, const SplitPatternHandler::ChainInfo *a2)
{
  __int128 v4;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v4 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = v4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<TiledLayerTensorRegions>::__init_with_size[abi:ne180100]<TiledLayerTensorRegions*,TiledLayerTensorRegions*>((_QWORD *)this + 9, *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 5));
  return this;
}

void sub_206F218B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<SplitPatternHandler::ChainInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 96;
    v4 -= 96;
    std::construct_at[abi:ne180100]<SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::construct_at[abi:ne180100]<SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo*>(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<SplitPatternHandler::ChainInfo,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 72);
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<SplitPatternHandler::ChainInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<SplitPatternHandler::ChainInfo,0>(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<SplitPatternHandler::ChainInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<SplitPatternHandler::ChainInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2)
{
  ZinTransposeLayer *v2;
  _BOOL8 IsCHTranspose;
  _BOOL4 v5;

  v2 = a2[1];
  v5 = *(_DWORD *)(*((_QWORD *)v2 + 8) + 8) == 37
    && (IsCHTranspose = ZinTransposeLayer::IsCHTranspose(v2))
    && TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer((TransposeAndConvolutionResizePatternHandler *)IsCHTranspose, a2[1], *a2) != 0;
  return v5 | 0x100u;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C059870;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C059870;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2)
{
  ZinNEConvLayer *v2;
  uint64_t v3;
  TransposeAndConvolutionResizePatternHandler *KernelDescriptor;

  v2 = a2[1];
  if (*(_DWORD *)(*((_QWORD *)v2 + 8) + 8) != 85)
    goto LABEL_7;
  v3 = *((_QWORD *)v2 + 54);
  if (v3)
  {
    if (*(_QWORD *)(ZinNEConvLayer::GetKernelDescriptor(a2[1]) + 96) == 1
      && *(_QWORD *)(ZinNEConvLayer::GetKernelDescriptor(v2) + 88) == 1)
    {
      KernelDescriptor = (TransposeAndConvolutionResizePatternHandler *)ZinNEConvLayer::GetKernelDescriptor(v2);
      if (*((_QWORD *)KernelDescriptor + 13) == 1)
      {
        LODWORD(v3) = TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(KernelDescriptor, a2[1], *a2) != 0;
        return v3 | 0x100;
      }
    }
LABEL_7:
    LODWORD(v3) = 0;
  }
  return v3 | 0x100;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C0597C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0597C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, uint64_t a3, uint64_t *a4)
{
  const ZinIrOpLayerGraph *v5;
  uint64_t v6;
  const ZinIrOpLayer *SingleMatch;
  const ZinIrOpLayer *v8;
  TransposeAndConvolutionResizePatternHandler *v9;
  const ZinIrOpLayer *v10;
  TransposeAndConvolutionResizePatternHandler *SourceResizeOrResizeAsLayer;
  TransposeAndConvolutionResizePatternHandler *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  ZinIrMemoryPressureAnalyzer *v19;
  unint64_t PeakPressure;
  void *__p[2];
  char v24;

  v5 = *a2;
  v6 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose1");
  SingleMatch = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)__p);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "1x1_conv");
  v8 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)__p);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose2");
  v9 = (TransposeAndConvolutionResizePatternHandler *)ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)__p);
  v10 = v9;
  if (v24 < 0)
    operator delete(__p[0]);
  SourceResizeOrResizeAsLayer = (TransposeAndConvolutionResizePatternHandler *)TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(v9, SingleMatch, v5);
  v12 = (TransposeAndConvolutionResizePatternHandler *)TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(SourceResizeOrResizeAsLayer, v8, v5);
  v13 = TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(v12, v10, v5);
  v14 = 0;
  if (SourceResizeOrResizeAsLayer == v12
    && SourceResizeOrResizeAsLayer == (TransposeAndConvolutionResizePatternHandler *)v13)
  {
    v15 = *((_QWORD *)SingleMatch + 6);
    v16 = operator new(0x18uLL);
    v17 = 0;
    *v16 = v15;
    v16[1] = v15 + 1;
    v16[2] = v15 + 2;
    v19 = *(ZinIrMemoryPressureAnalyzer **)(a1 + 8);
    v18 = *(unint64_t **)(a1 + 16);
    do
    {
      __p[0] = (void *)v16[v17];
      __p[1] = __p[0];
      PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(v19, (const ZinLiveRange *)__p);
      v14 = PeakPressure > *v18;
    }
    while (PeakPressure <= *v18 && v17++ != 2);
    operator delete(v16);
  }
  return v14;
}

void sub_206F21F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C0598C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0598C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, _QWORD *a3)
{
  const ZinIrOpLayerGraph *v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if ((*(unsigned int (**)(_QWORD, const ZinIrOpLayerGraph *, _QWORD))(***(_QWORD ***)(a1 + 8) + 8))(**(_QWORD **)(a1 + 8), *a2, *a3)&& TransposeAndConvolutionResizePatternHandler::Combine(v5, v4, *(uint64_t **)(a1 + 8), *(_BYTE **)(a1 + 16)))
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinIrTransformPartial,std::allocator<ZinIrTransformPartial>,long &,long &,ZinPartialTransformDimension,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<ZinIrTransformPartial>::__shared_ptr_emplace[abi:ne180100]<unsigned long const&,unsigned long &,ZinPartialTransformDimension,std::allocator<ZinIrTransformPartial>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_206F221A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void TransposeAndConvolutionResizePatternHandler::Combine()
{
  _DWORD v0[2];
  __int16 v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v0[0] = 67109378;
  v0[1] = 200;
  v1 = 2080;
  v2 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinMirPrepare/src/ZinMirSplitPatternHandler.cpp";
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: failed set active ne, line: %d, file: %s", (uint8_t *)v0, 0x12u);
}

void ZinMirNEConvUnit::ZinMirNEConvUnit(ZinMirNEConvUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  uint64_t v2;

  ZinMirNEUnit::ZinMirNEUnit((uint64_t)this, 85, (__int128 *)a2);
  *(_QWORD *)v2 = &off_24C01BDD8;
  *(_QWORD *)(v2 + 384) = 0;
  *(_BYTE *)(v2 + 392) = 1;
}

void ZinMirNEConvUnit::~ZinMirNEConvUnit(ZinMirNEConvUnit *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C01BDD8;
  v2 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  ZinMirNEUnit::~ZinMirNEUnit(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C01BDD8;
  v2 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  ZinMirNEUnit::~ZinMirNEUnit(this);
  JUMPOUT(0x20BD002F8);
}

double ZinMirNEConvUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, __int128 **a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int8x16_t v22;
  uint64_t v23;
  unsigned int v24[3];
  unsigned int v25[3];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v6 = *((_QWORD *)*a2 + 4);
  v7 = (*a2)[1];
  v29 = **a2;
  v30 = v7;
  v31 = v6;
  v8 = *(_QWORD **)(a1 + 288);
  if (v8)
  {
    ZinIrBroadcastInfo::ExtractDimensionsNotEqualToOne(v8, (uint64_t)&v26);
    v9 = *((_QWORD *)&v27 + 1);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v26);
    if (v9)
      return result;
  }
  v11 = *(_QWORD *)(a1 + 96);
  if (v11)
  {
    if ((*(unsigned int (**)(uint64_t, __int128 **, __int128 *))(*(_QWORD *)v11 + 16))(v11, a2, &v29))
      return result;
  }
  if (!*(_BYTE *)(a1 + 392))
    goto LABEL_15;
  v12 = *(_QWORD *)(a1 + 328);
  if (!v12)
    goto LABEL_15;
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 359))
      goto LABEL_15;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 344))
  {
LABEL_15:
    v17 = *(_QWORD *)(a1 + 312);
    if (v17)
    {
      ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(&v29, v17 + 16, a3);
      v18 = a3[1];
      v29 = *a3;
      v30 = v18;
      v31 = *((_QWORD *)a3 + 4);
    }
    result = *(double *)&v29;
    v19 = v30;
    *a3 = v29;
    a3[1] = v19;
    *((_QWORD *)a3 + 4) = v31;
    return result;
  }
LABEL_11:
  ZinMirConvUtils::ZinConvertProgrammedToLogicalKernelStrides((int *)(v12 + 152), (int *)(v12 + 164), (int *)v24);
  v13 = *(_QWORD *)(a1 + 328);
  v22 = vextq_s8(*(int8x16_t *)(v13 + 88), *(int8x16_t *)(v13 + 88), 8uLL);
  v23 = *(_QWORD *)(v13 + 104);
  v14 = (int *)(v13 + 176);
  v15 = *(_QWORD *)(v13 + 72);
  if (*(char *)(v13 + 272) < 0)
    v16 = *(_QWORD *)(v13 + 224);
  else
    v16 = 1;
  v20 = 0x100000001;
  v21 = 1;
  ZinGetOutputTensorDimension((uint64_t)&v29, &v22, v24, v25, v14, v16 * v15, (int *)&v20, (uint64_t)&v26);
  v29 = v26;
  v30 = v27;
  v31 = v28;
  if (ZinTensorDimensions::IsValid((ZinTensorDimensions *)&v29))
    goto LABEL_15;
  return result;
}

uint64_t ZinMirNEConvUnit::CreateLayer(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t DynamicOffsetInfo;
  char *v33;
  size_t v34;
  void **v35;
  char *v36;
  uint64_t v37;
  ZinIrKernel *v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  void **v42;
  char *v43;
  uint64_t v44;
  ZinIrConvolutionInfo *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  ZinIrConvolutionInfo *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  size_t v56;
  void **v57;
  char *v58;
  ZinIrScaleBiasInfo *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  ZinIrConvolutionInfo *v66;
  ZinIrKernel *v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  ZinIrConvolutionInfo *v93;
  void *__p[2];
  char v95;
  ZinIrKernel *v96;
  void *v97[2];
  char v98;
  ZinIrKernel *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;

  if (!*(_QWORD *)(a2 + 8))
    ZinAssertImpl("Invalid params when creating layer");
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v106 = *(_QWORD *)(a2 + 8);
  v107 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = ZinMirNEUnit::CreateBroadcast(a1, &v106);
  v8 = v107;
  if (v107)
  {
    v9 = (unint64_t *)&v107->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v104 = *(_QWORD *)(a2 + 8);
  v105 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = ZinMirNEUnit::CreateInputRelu(a1, &v104);
  v15 = v105;
  if (v105)
  {
    v16 = (unint64_t *)&v105->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  v102 = *(_QWORD *)(a2 + 8);
  v103 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = ZinMirNEUnit::CreateActivation(a1, &v102);
  v22 = v103;
  if (v103)
  {
    v23 = (unint64_t *)&v103->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  v100 = *(_QWORD *)(a2 + 8);
  v101 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = ZinMirNEUnit::CreateTranspose(a1, &v100);
  v29 = v101;
  if (v101)
  {
    v30 = (unint64_t *)&v101->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v99 = 0;
  if (!*(_QWORD *)(a1 + 328))
    goto LABEL_72;
  if (*(char *)(a1 + 359) < 0)
  {
    if (*(_QWORD *)(a1 + 344))
      goto LABEL_37;
LABEL_72:
    v44 = 0;
    v53 = 0;
    goto LABEL_100;
  }
  if (!*(_BYTE *)(a1 + 359))
    goto LABEL_72;
LABEL_37:
  DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)a1);
  v33 = (char *)DynamicOffsetInfo;
  if (*(char *)(DynamicOffsetInfo + 23) >= 0)
    v34 = *(unsigned __int8 *)(DynamicOffsetInfo + 23);
  else
    v34 = *(_QWORD *)(DynamicOffsetInfo + 8);
  v35 = v97;
  std::string::basic_string[abi:ne180100]((uint64_t)v97, v34 + 7);
  if (v98 < 0)
    v35 = (void **)v97[0];
  if (v34)
  {
    if (v33[23] >= 0)
      v36 = v33;
    else
      v36 = *(char **)v33;
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, "_kernel");
  v37 = *(_QWORD *)(a1 + 328);
  v38 = (ZinIrKernel *)operator new();
  ZinIrKernel::ZinIrKernel(v38, v97, v37, a1 + 336);
  v96 = v38;
  if (*(_BYTE *)(a1 + 392))
  {
    v39 = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)a1);
    v40 = (char *)v39;
    if (*(char *)(v39 + 23) >= 0)
      v41 = *(unsigned __int8 *)(v39 + 23);
    else
      v41 = *(_QWORD *)(v39 + 8);
    v42 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v41 + 5);
    if (v95 < 0)
      v42 = (void **)__p[0];
    if (v41)
    {
      if (v40[23] >= 0)
        v43 = v40;
      else
        v43 = *(char **)v40;
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, "_conv");
    v44 = operator new();
    v45 = (ZinIrConvolutionInfo *)operator new();
    ZinIrConvolutionInfo::ZinIrConvolutionInfo(v45);
    v46 = *(std::__shared_weak_count **)(a2 + 16);
    v91 = *(_QWORD *)(a2 + 8);
    v92 = v46;
    v93 = v45;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    ZinConvLayer::ZinConvLayer(v44, &v93, &v91, __p, &v96);
    v49 = v92;
    if (v92)
    {
      v50 = (unint64_t *)&v92->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v93;
    v93 = 0;
    if (v52)
      (*(void (**)(ZinIrConvolutionInfo *))(*(_QWORD *)v52 + 8))(v52);
    if (v95 < 0)
      operator delete(__p[0]);
    v53 = 0;
  }
  else
  {
    v54 = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)a1);
    v55 = (char *)v54;
    if (*(char *)(v54 + 23) >= 0)
      v56 = *(unsigned __int8 *)(v54 + 23);
    else
      v56 = *(_QWORD *)(v54 + 8);
    v57 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v56 + 4);
    if (v95 < 0)
      v57 = (void **)__p[0];
    if (v56)
    {
      if (v55[23] >= 0)
        v58 = v55;
      else
        v58 = *(char **)v55;
      memmove(v57, v58, v56);
    }
    strcpy((char *)v57 + v56, "_goc");
    v53 = operator new();
    v59 = (ZinIrScaleBiasInfo *)operator new();
    ZinIrScaleBiasInfo::ZinIrScaleBiasInfo(v59);
    v93 = v59;
    v60 = *(std::__shared_weak_count **)(a2 + 16);
    v89 = *(_QWORD *)(a2 + 8);
    v90 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    ZinGOCLayer::ZinGOCLayer(v53, &v93, &v89, __p, &v96);
    v63 = v90;
    if (v90)
    {
      v64 = (unint64_t *)&v90->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v93;
    v93 = 0;
    if (v66)
      (*(void (**)(ZinIrConvolutionInfo *))(*(_QWORD *)v66 + 8))(v66);
    if (v95 < 0)
      operator delete(__p[0]);
    v44 = 0;
  }
  v67 = v96;
  v96 = 0;
  if (v67)
  {
    ZinIrKernel::~ZinIrKernel(v67);
    MEMORY[0x20BD002F8]();
  }
  if (v98 < 0)
    operator delete(v97[0]);
LABEL_100:
  if (*(_QWORD *)(a1 + 384))
  {
    v68 = (_QWORD *)operator new();
    v69 = (uint64_t)v68;
    v70 = *(std::__shared_weak_count **)(a2 + 16);
    v87 = *(_QWORD *)(a2 + 8);
    v88 = v70;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    ZinStochasticRoundLayer::ZinStochasticRoundLayer(v68, (uint64_t *)(a1 + 384), &v87, (__int128 *)(a1 + 8));
    v73 = v88;
    if (v88)
    {
      v74 = (unint64_t *)&v88->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else
  {
    v69 = 0;
  }
  v76 = operator new();
  v77 = *(std::__shared_weak_count **)(a2 + 16);
  v85 = *(_QWORD *)(a2 + 8);
  v86 = v77;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v80 = (__int128 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)a1);
  ZinNEConvLayer::ZinNEConvLayer((_QWORD *)v76, &v85, v80, 0, v7, v14, v44, v69, v53, v21, v28, 0, 0);
  v81 = v86;
  if (v86)
  {
    v82 = (unint64_t *)&v86->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  *(_DWORD *)(v76 + 420) = *(_DWORD *)(a1 + 376);
  *(_BYTE *)(v76 + 424) = 1;
  if (ZinMirUnit::InitializeEngineLayer(a1, (ZinIrOpLayer *)v76, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32)))ZinAssertImpl("Error in initializing NEConv Engine Layer.");
  ZinMirNEUnit::SetLayerKernel((ZinMirNEUnit *)a1, (ZinIrKernel **)v76);
  if (v99)
  {
    ZinIrKernel::~ZinIrKernel(v99);
    MEMORY[0x20BD002F8]();
  }
  return v76;
}

void sub_206F22C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,ZinIrKernel *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  v39 = a23;
  a23 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  MEMORY[0x20BD002F8](v36, 0x10B3C4024B96488);
  if (a29 < 0)
    operator delete(__p);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a30, 0);
  if (a36 < 0)
    operator delete(a31);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v37 - 160), 0);
  _Unwind_Resume(a1);
}

BOOL ZinMirNEConvUnit::IsValid(ZinMirNEConvUnit *this, ZinMirUnitValidationContext *a2)
{
  return *((_QWORD *)this + 13) && ZinMirUnit::IsValid(this, a2);
}

uint64_t ZinMirNEConvUnit::SetHasConv(ZinMirNEConvUnit *this, char a2)
{
  *((_BYTE *)this + 392) = a2;
  return 0;
}

uint64_t ZinParseRingBufferOffset(const __CFArray *a1, ZinIrRingBufferUnitInfo *a2, CFArrayRef *a3)
{
  int Count;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  const void *v10;
  CFTypeID v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  const __CFDictionary **v22;
  _QWORD *v23;
  _QWORD *v24;
  const __CFDictionary *v25;
  const __CFNumber *Value;
  const __CFNumber *v27;
  CFTypeID v28;
  uint64_t v29;
  BOOL *v30;
  const __CFString *v31;
  const __CFString *v32;
  CFTypeID v33;
  std::string *v34;
  BOOL *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string __p;
  int v62;
  void *v63;
  char *v64;
  char *v65;
  _DWORD *valuePtr[4];

  valuePtr[3] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  if (Count <= 0)
  {
    v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v44)
      ZinParseRingBufferOffset(v44, v45, v46, v47, v48, v49, v50, v51);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferOffset"));
    return 3;
  }
  else
  {
    v7 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v8 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
      v10 = ValueAtIndex;
      if (!ValueAtIndex || (v11 = CFGetTypeID(ValueAtIndex), v11 != CFDictionaryGetTypeID()))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinParseRingBufferOffset(v7, v37, v38, v39, v40, v41, v42, v43);
        ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferOffset"));
        goto LABEL_39;
      }
      v12 = v64;
      if (v64 >= v65)
      {
        v14 = (v64 - (_BYTE *)v63) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v15 = (v65 - (_BYTE *)v63) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v65 - (_BYTE *)v63) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v65, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v10;
        v13 = v18 + 8;
        v20 = (char *)v63;
        v19 = v64;
        if (v64 != v63)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = (char *)v63;
        }
        v63 = v18;
        v64 = v13;
        v65 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v64 = v10;
        v13 = v12 + 8;
      }
      v64 = v13;
      ++v7;
    }
    while (v7 != v8);
    v22 = (const __CFDictionary **)v63;
    if (v63 == v13)
    {
      v36 = 0;
      if (v63)
        goto LABEL_41;
    }
    else
    {
      v23 = (_QWORD *)((char *)a2 + 80);
      v24 = (_QWORD *)((char *)a2 + 120);
      while (1)
      {
        v25 = *v22;
        v62 = 0;
        if (ZinParseRingBufferDimension(v25, (uint64_t)&v62, a3))
          break;
        if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v23, &v62)|| std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v24, &v62))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            DimensionToString(v62, &__p);
            ZinParseRingBufferOffset();
          }
          ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferDimension"));
          break;
        }
        Value = (const __CFNumber *)CFDictionaryGetValue(v25, CFSTR("Offset"));
        v27 = Value;
        if (Value && (v28 = CFGetTypeID(Value), v28 == CFNumberGetTypeID()))
        {
          LODWORD(valuePtr[0]) = 0;
          ZinGetCFObject(valuePtr, v27);
          v29 = SLODWORD(valuePtr[0]);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v24, &v62, (uint64_t)&std::piecewise_construct, &__p)[3] = v29;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
          v30 = (BOOL *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v24, &v62, (uint64_t)&std::piecewise_construct, &__p);
          ZinParseBoolean(v25, CFSTR("Circular"), v30 + 32);
        }
        else
        {
          v31 = (const __CFString *)CFDictionaryGetValue(v25, CFSTR("Offset"));
          v32 = v31;
          if (!v31 || (v33 = CFGetTypeID(v31), v33 != CFStringGetTypeID()))
          {
            v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v53)
              ZinParseRingBufferOffset(v53, v54, v55, v56, v57, v58, v59, v60);
            ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferOffset"));
            break;
          }
          memset(&__p, 0, sizeof(__p));
          ZinGetCFObject((uint64_t)&__p, v32);
          valuePtr[0] = &v62;
          v34 = (std::string *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v23, &v62, (uint64_t)&std::piecewise_construct, valuePtr);
          std::string::operator=(v34 + 1, &__p);
          valuePtr[0] = &v62;
          v35 = (BOOL *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v23, &v62, (uint64_t)&std::piecewise_construct, valuePtr);
          ZinParseBoolean(v25, CFSTR("Circular"), v35 + 48);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (++v22 == (const __CFDictionary **)v13)
        {
          v36 = 0;
          goto LABEL_40;
        }
      }
LABEL_39:
      v36 = 3;
LABEL_40:
      v22 = (const __CFDictionary **)v63;
      if (v63)
      {
LABEL_41:
        v64 = (char *)v22;
        operator delete(v22);
      }
    }
  }
  return v36;
}

void sub_206F23234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinParseRingBufferDimension(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  const void *Value;
  CFTypeID v5;
  uint64_t result;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Value = CFDictionaryGetValue(a1, CFSTR("Dimension"));
  if (!Value || (v5 = CFGetTypeID(Value), v5 != CFStringGetTypeID()) || (result = ZinParseDimension(), (_DWORD)result))
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinParseRingBufferDimension(v7, v8, v9, v10, v11, v12, v13, v14);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferDimension"));
    return 3;
  }
  return result;
}

uint64_t ZinParseRingBufferReaderOutputSize(const __CFDictionary *a1, ZinIrRingBufferReaderUnitInfo *a2, CFArrayRef *a3)
{
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  int Count;
  CFIndex v9;
  uint64_t v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  const __CFDictionary **v24;
  _QWORD *v25;
  const __CFDictionary *v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  CFTypeID v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64[3];
  int v65;
  void *__p;
  char *v67;
  char *v68;
  int valuePtr[6];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("RingBufferReaderOutputSizeInfo"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFArrayGetTypeID()))
  {
    v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v32)
      ZinParseRingBufferReaderOutputSize(v32, v33, v34, v35, v36, v37, v38, v39);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferReaderOutputSizeInfo"));
    return 3;
  }
  Count = CFArrayGetCount(v6);
  if (Count <= 0)
  {
    v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v48)
      ZinParseRingBufferReaderOutputSize(v48, v49, v50, v51, v52, v53, v54, v55);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferOffset"));
    return 3;
  }
  v9 = 0;
  __p = 0;
  v67 = 0;
  v68 = 0;
  v10 = Count;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
    v12 = ValueAtIndex;
    if (!ValueAtIndex || (v13 = CFGetTypeID(ValueAtIndex), v13 != CFDictionaryGetTypeID()))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinParseRingBufferReaderOutputSize(v9, v41, v42, v43, v44, v45, v46, v47);
      ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferOffset"));
      goto LABEL_40;
    }
    v14 = v67;
    if (v67 >= v68)
    {
      v16 = (v67 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v17 = (v68 - (_BYTE *)__p) >> 2;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if ((unint64_t)(v68 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v68, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v16];
      *(_QWORD *)v20 = v12;
      v15 = v20 + 8;
      v22 = (char *)__p;
      v21 = v67;
      if (v67 != __p)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v20 - 1) = v23;
          v20 -= 8;
        }
        while (v21 != v22);
        v21 = (char *)__p;
      }
      __p = v20;
      v67 = v15;
      v68 = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v67 = v12;
      v15 = v14 + 8;
    }
    v67 = v15;
    ++v9;
  }
  while (v9 != v10);
  v24 = (const __CFDictionary **)__p;
  if (__p == v15)
  {
    v31 = 0;
    if (__p)
      goto LABEL_42;
  }
  else
  {
    v25 = (_QWORD *)((char *)a2 + 160);
    while (1)
    {
      v26 = *v24;
      v65 = 0;
      if (ZinParseRingBufferDimension(v26, (uint64_t)&v65, a3))
        break;
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v25, &v65))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          DimensionToString(v65, v64);
          ZinParseRingBufferReaderOutputSize();
        }
        ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferDimension"));
        break;
      }
      v27 = (const __CFNumber *)CFDictionaryGetValue(v26, CFSTR("Size"));
      v28 = v27;
      if (!v27 || (v29 = CFGetTypeID(v27), v29 != CFNumberGetTypeID()))
      {
        v56 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v56)
          ZinParseRingBufferReaderOutputSize(v56, v57, v58, v59, v60, v61, v62, v63);
        ZinIrUnitStatus::SetError(a3, CFSTR("InvalidUnitRingBufferReaderOutputSizeInfo"));
        break;
      }
      valuePtr[0] = 0;
      ZinGetCFObject(valuePtr, v28);
      v30 = valuePtr[0];
      v64[0] = &v65;
      std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__emplace_unique_key_args<ZinDependencyOffsetDim,std::piecewise_construct_t const&,std::tuple<ZinDependencyOffsetDim const&>,std::tuple<>>((uint64_t)v25, &v65, (uint64_t)&std::piecewise_construct, v64)[3] = v30;
      if (++v24 == (const __CFDictionary **)v15)
      {
        v31 = 0;
        goto LABEL_41;
      }
    }
LABEL_40:
    v31 = 3;
LABEL_41:
    v24 = (const __CFDictionary **)__p;
    if (__p)
    {
LABEL_42:
      v67 = (char *)v24;
      operator delete(v24);
    }
  }
  return v31;
}

void sub_206F236B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  *((_BYTE *)v11 + 32) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_206F2390C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinParseRingBufferOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Ring buffer offset array cannot be empty.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse ringbuffer offset array at index #%d.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown or unsupported ringbuffer offset!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseRingBufferOffset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_2_11();
  *(_DWORD *)v1 = 136315138;
  *(_QWORD *)(v1 + 4) = v2;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v3, "Ringbuffer offset has duplicated entry at dimension %s.\n", v4);
  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
}

void ZinParseRingBufferDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown or unsupported ringbuffer dimension!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseRingBufferReaderOutputSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed to get the array containing output size for ring buffer reader", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Ring buffer reader output size cannot be empty.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to parse ring buffer reader output size array at index #%d.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown or unsupported ringbuffer size!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseRingBufferReaderOutputSize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_2_11();
  *(_DWORD *)v1 = 136315138;
  *(_QWORD *)(v1 + 4) = v2;
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], v3, "Ringbuffer reader output size has duplicated entry at dimension %s.\n", v4);
  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
}

__CFDictionary *ZinCreateDropoutUnit(_BYTE *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  const void **v7;
  const void *v8;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = CFNumberCreate(v3, kCFNumberFloat32Type, a1 + 80);
  CFDictionaryAddValue(Mutable, CFSTR("DropoutRate"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt64Type, a1 + 88);
  CFDictionaryAddValue(Mutable, CFSTR("Seed"), v6);
  CFRelease(v6);
  v7 = (const void **)MEMORY[0x24BDBD268];
  if (a1[96])
    v7 = (const void **)MEMORY[0x24BDBD270];
  v8 = *v7;
  CFDictionaryAddValue(Mutable, CFSTR("EnablePostScale"), *v7);
  CFRelease(v8);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

BOOL ZinKernelFormatIsUnity(int a1)
{
  return (a1 - 28) < 3;
}

uint64_t ZinKernelFormatGetPaletteFormat(int a1, _DWORD *a2)
{
  int v2;
  uint64_t result;

  if (!a2)
    return 14100;
  v2 = a1 - 7;
  if ((a1 - 7) > 0x14)
    return 14100;
  result = 0;
  *a2 = dword_207AAA4A8[v2];
  return result;
}

uint64_t ZinKernelFormatGetUnderlyingType(int a1)
{
  if ((a1 - 1) > 0x1E)
    return 0;
  else
    return dword_207AAA4FC[a1 - 1];
}

uint64_t ZinKernelFormatGetUnderlyingTypeSizeInBytes(int a1)
{
  uint64_t v1;

  v1 = (int)ZinKernelFormatGetUnderlyingType(a1) - 1;
  if (v1 > 4)
    return -1;
  else
    return qword_207AAA578[v1];
}

uint64_t ZinKernelGetPaletteLUTSize(int a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t result;

  if (!a3)
    return 14100;
  v3 = a1 - 1;
  if ((a1 - 1) > 0x1D)
    return 14100;
  result = 0;
  *a3 = qword_207AAA5A0[v3] * a2;
  return result;
}

uint64_t GetPalettizedKernelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  unsigned int *v5;

  result = 0;
  if (a2 <= 5 && ((1 << a2) & 0x36) != 0)
  {
    switch(a1)
    {
      case 1:
        v4 = a2 - 1;
        if ((a2 - 1) >= 5)
          goto LABEL_20;
        v5 = (unsigned int *)&unk_207AAA690;
        goto LABEL_14;
      case 2:
        v4 = a2 - 1;
        if ((a2 - 1) >= 5)
          goto LABEL_20;
        v5 = (unsigned int *)&unk_207AAA6A4;
        goto LABEL_14;
      case 3:
        v4 = a2 - 1;
        if ((a2 - 1) >= 5)
          goto LABEL_20;
        v5 = (unsigned int *)&unk_207AAA6B8;
        goto LABEL_14;
      case 4:
        v4 = a2 - 1;
        if ((a2 - 1) >= 5)
          goto LABEL_20;
        v5 = (unsigned int *)&unk_207AAA6CC;
        goto LABEL_14;
      case 6:
        v4 = a2 - 1;
        if ((a2 - 1) >= 5)
          goto LABEL_20;
        v5 = (unsigned int *)&unk_207AAA6E0;
LABEL_14:
        result = v5[v4];
        break;
      case 8:
        if ((a2 - 1) >= 2)
        {
          if ((_DWORD)a2 == 4)
            result = 27;
          else
LABEL_20:
            result = 0;
        }
        else
        {
          result = a2;
        }
        break;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t ZinKernelDescriptorGetStab(uint64_t a1, const char *a2, unsigned __int16 *a3, char *a4, size_t a5)
{
  uint64_t v5;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t PaletteLUTSize;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int Typeno;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  const char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = 14100;
  if (!a1 || !a2 || !a3 || !a4)
    return v5;
  v11 = *(_BYTE *)(a1 + 272) & 1;
  if ((*(_BYTE *)(a1 + 272) & 1) != 0)
    v12 = 150;
  else
    v12 = 0;
  v55 = 1;
  v56 = 0;
  v13 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    PaletteLUTSize = ZinKernelGetPaletteLUTSize(*(_DWORD *)a1, *(_QWORD *)(a1 + 240), &v56);
    if ((_DWORD)PaletteLUTSize)
    {
      v5 = PaletteLUTSize;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinKernelDescriptorGetStab_cold_1();
      return v5;
    }
    v15 = v56;
    v53 = a3;
    v38 = a5;
    v36 = a2;
    v37 = a4;
    v34 = v12;
    v35 = v11;
    if (v56 < 1)
    {
      v19 = 1;
      Typeno = 1;
    }
    else
    {
      LODWORD(v54) = 0;
      ZinKernelFormatGetPaletteFormat(v13, &v54);
      v17 = v54;
      ZinKernelFormatGetBitDepth(v54, &v55);
      Typeno = ZinKernelFormatGetTypeno(v17);
      v19 = v55;
    }
    v32 = v19;
    v33 = Typeno;
    v54 = 0;
    ZinKernelFormatGetBitDepth(v13, &v54);
    v16 = v54;
  }
  else
  {
    v34 = v12;
    v35 = v11;
    v36 = a2;
    v37 = a4;
    v38 = a5;
    v53 = a3;
    v54 = 0;
    v15 = 0;
    v16 = 0;
    v32 = 1;
    v33 = 1;
  }
  v51 = *(int *)(a1 + 160);
  v41 = *(int *)(a1 + 164);
  v20 = *(_QWORD *)(a1 + 72);
  v44 = *(_QWORD *)(a1 + 80);
  v52 = *(int *)(a1 + 156);
  v48 = *(_QWORD *)(a1 + 88);
  v49 = *(_DWORD *)(a1 + 152);
  v46 = *(_QWORD *)(a1 + 104);
  v47 = *(_QWORD *)(a1 + 96);
  v21 = *(_QWORD *)(a1 + 248);
  v50 = v21;
  v22 = *(int *)(a1 + 172);
  v42 = *(int *)(a1 + 168);
  v39 = *(_QWORD *)(a1 + 256);
  v40 = (v44 * v51 * v52 * v49 * v48 * v47 * v46 * v21 * v42 * v41 * v22 * v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(unsigned __int8 *)(a1 + 9);
  if (((v23 * v20) & 0x800000000000000) != 0)
    v24 = (16 * v23 * v20) | 0xE;
  else
    v24 = (16 * v23 * v20) | 7;
  v25 = *(unsigned __int8 *)(a1 + 17);
  if (((v25 * v20) & 0x800000000000000) != 0)
    v26 = (16 * v25 * v20) | 0xE;
  else
    v26 = (16 * v25 * v20) | 7;
  v43 = *(_QWORD *)(a1 + 264);
  v45 = v43 + *(_QWORD *)(a1 + 256) * (v21 - 1) + v15 + v34;
  v27 = ZinKernelFormatGetTypeno(v13);
  if ((_DWORD)v23)
    v28 = v20;
  else
    v28 = 0;
  if ((_DWORD)v25)
    v29 = v20;
  else
    v29 = 0;
  v30 = v44;
  if (!v13)
    v30 = 0;
  if (snprintf(v37, v38, "%s:t%u=s%lulut:ar1;0;%d;%d,0,%lu;pal:ar1;0;%lu;%u,%lu,%lu;ocgs:ar1;0;%lu;%u=s%lu,%luscale:ar1;0;%lu;%u,0,%lu;bi"
         "as:ar1;0;%lu;%u,%lu,%lu;weights:ar1;0;%lu;ar1;0;%d;ar1;0;%d;ar1;0;%d;ar1;0;%lu;ar1;0;%lu;ar1;0;%lu;ar1;0;%lu;ar"
         "1;0;%d;ar1;0;%d;ar1;0;%d;%d,%lu,%lu,%lu,%lu",
         v36,
         *v53,
         v45,
         v35,
         8,
         8 * v34,
         8 * v15 / v32,
         v33,
         v34,
         8 * v15,
         v50,
         *v53 + 1,
         v39,
         v43,
         v28,
         5,
         v24 & 0xFFFFFFFFFFFFFFF8,
         v29,
         5,
         v24 >> 3,
         v26 & 0xFFFFFFFFFFFFFFF8,
         v30,
         v52,
         v49,
         v51,
         v48,
         v47,
         v46,
         v20,
         v42,
         v41,
         v22,
         v27,
         (v26 >> 3) + (v24 >> 3),
         v40,
         v15 + v34,
         8 * v39) >= v38)
    return 14102;
  v5 = 0;
  *v53 += 2;
  return v5;
}

uint64_t ZinKernelFormatGetTypeno(int a1)
{
  if ((a1 - 1) > 0x1D)
    return 0;
  else
    return word_207AAA6F4[a1 - 1];
}

uint64_t ZinKernelCalculateStrides(_QWORD *a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == 1145261902)
  {
    result = 0;
    a4[4] = -1;
    v9 = a1[4];
    a4[3] = -v9;
    v10 = a1[3];
    a4[2] = -(v10 * v9);
    v11 = a1[2];
    v12 = v11 * v10 * v9;
    *a4 = v12;
    a4[1] = *a1 * v12;
    a3[1] = 0;
    a3[2] = 1 - v11;
    a3[3] = 1 - v10;
    a3[4] = 1 - v9;
  }
  else if (a2 == 1262703187)
  {
    result = 0;
    a4[4] = 1;
    v6 = a1[4];
    a4[3] = v6;
    v7 = a1[3] * v6;
    a4[2] = v7;
    v8 = a1[2] * v7;
    a4[1] = v8;
    *a4 = a1[1] * v8;
  }
  else
  {
    return 14100;
  }
  return result;
}

void ZinKernelDescriptorGetStab_cold_1()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Invalid palette information.\n", v0, 2u);
}

uint64_t ZinPEElementWisePerf::GetPECostPerPatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;

  a8[3] = (a5 + a7 - 1) / a7 * ((a4 + a6 - 1) / a6);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v10 = a8[3];
  v11 = 4;
  if ((v9 & (v10 < 4)) == 0)
    v11 = a8[3];
  a8[1] = v10;
  a8[2] = v11;
  *a8 = v10;
  return 0;
}

BOOL ZinPEElementWisePerf::HasReduction(ZinPEElementWisePerf *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 42) + 24);
  return v1 && *(_QWORD *)(v1 + 504) != 0;
}

float ZinDynamicRange::ZinAbsRange(float **a1)
{
  float *v1;
  float *v2;
  char v3;
  float result;
  float v5;
  float v6;
  float v7;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0.0;
  v3 = 0;
  result = 3.4028e38;
  v5 = 1.1755e-38;
  do
  {
    v6 = fabsf(*v1);
    if (v6 != INFINITY)
    {
      if (result >= v6)
        v7 = v6;
      else
        v7 = result;
      if (*v1 != 0.0)
        result = v7;
      if (v6 >= v5)
        v5 = v6;
      v3 = 1;
    }
    ++v1;
  }
  while (v1 != v2);
  if ((v3 & 1) == 0)
    return 0.0;
  return result;
}

void ZinDynamicRange::ZinConvertToFP32WithShift(float **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  float v8;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v16;
  float *v17;
  float *v18;
  char v19;
  float v20;
  float *v21;
  float v22;
  int v23;
  int v24;
  double v25;
  float v26;
  float v27;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  void *__p;
  float *v45;
  float *v46;

  __p = 0;
  v45 = 0;
  v46 = 0;
  if (a2 >= a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinDynamicRange::ZinConvertToFP32WithShift();
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)(a4 + 8), 0, 0, 0);
  }
  else
  {
    v8 = ZinDynamicRange::ZinAbsRange(a1);
    v10 = v9;
    LOBYTE(v11) = 0;
    if (v8 <= 0.000015259 && a2 < 0)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        --v11;
        v13 = ldexp(1.0, v12);
        v14 = fabsf(v8 * v13);
        if (v14 > 3.4028e38)
          v14 = 3.4028e38;
        if ((LODWORD(v8) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          v14 = 0.0;
        ++v12;
      }
      while (v14 < 0.000015259 && v11 > a2);
    }
    v16 = ldexpf(1.0, -(char)v11);
    v17 = *a1;
    v18 = a1[1];
    if (*a1 == v18)
    {
      v18 = *a1;
    }
    else
    {
      v19 = 0;
      v20 = 1.1755e-38;
      v21 = *a1;
      do
      {
        while (fabsf(*v21) != INFINITY)
        {
          v22 = fabsf(v16 * *v21);
          if (v22 >= v20)
            v20 = v22;
          ++v21;
          v19 = 1;
          if (v21 == v18)
            goto LABEL_27;
        }
        ++v21;
      }
      while (v21 != v18);
      if ((v19 & 1) == 0)
        goto LABEL_39;
LABEL_27:
      if (v20 > 32768.0 && a3 > (char)v11)
      {
        v23 = ~(char)v11 << 24;
        v24 = (char)v11 + 1;
        do
        {
          v11 = v24;
          v25 = ldexp(1.0, v23 >> 24);
          if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF)
            break;
          v26 = v25;
          v27 = fabsf(v10 * v26);
          if (v27 < 1.1755e-38)
            v27 = 1.1755e-38;
          v23 -= 0x1000000;
          v24 = v11 + 1;
        }
        while (v27 > 32768.0 && v11 < a3);
        v17 = *a1;
        v18 = a1[1];
      }
    }
LABEL_39:
    std::vector<float>::reserve(&__p, v18 - v17);
    v29 = *a1;
    v30 = a1[1];
    if (*a1 == v30)
    {
      v35 = (uint64_t)v45;
    }
    else
    {
      do
      {
        v31 = *v29;
        v32 = ldexp(1.0, -(char)v11);
        v33 = v31 * v32;
        v34 = v45;
        if (v45 >= v46)
        {
          v36 = (float *)__p;
          v37 = ((char *)v45 - (_BYTE *)__p) >> 2;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v39 = (char *)v46 - (_BYTE *)__p;
          if (((char *)v46 - (_BYTE *)__p) >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v46, v40);
            v36 = (float *)__p;
            v34 = v45;
          }
          else
          {
            v41 = 0;
          }
          v42 = (float *)&v41[4 * v37];
          *v42 = v33;
          v35 = (uint64_t)(v42 + 1);
          while (v34 != v36)
          {
            v43 = *((_DWORD *)v34-- - 1);
            *((_DWORD *)v42-- - 1) = v43;
          }
          __p = v42;
          v45 = (float *)v35;
          v46 = (float *)&v41[4 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v45 = v33;
          v35 = (uint64_t)(v34 + 1);
        }
        v45 = (float *)v35;
        ++v29;
      }
      while (v29 != v30);
    }
    *(_BYTE *)a4 = v11;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)(a4 + 8), __p, v35, (v35 - (uint64_t)__p) >> 2);
    if (__p)
    {
      v45 = (float *)__p;
      operator delete(__p);
    }
  }
}

void sub_206F2481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinDynamicRange::VectorMinMax(ZinDynamicRange *this, const ZinIrVector *a2, float *a3, float *a4)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  float v8;
  float v9;
  NSObject *v10;
  float v11;
  uint64_t result;
  const ZinIrVector *v13;
  float *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 7);
  if (!v4)
    goto LABEL_14;
  v13 = a2;
  v14 = a3;
  v6 = 0;
  v7 = 0;
  v8 = 3.4028e38;
  v9 = -3.4028e38;
  v10 = MEMORY[0x24BDACB70];
  do
  {
    ZinIrVector::GetAt<float>((uint64_t)this, v6);
    if (fabsf(v11) == INFINITY)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v16 = "VectorMinMax";
        v17 = 2048;
        v18 = v6;
        _os_log_impl(&dword_2069AB000, v10, OS_LOG_TYPE_INFO, "%s: bias INF value detected at offset %zu", buf, 0x16u);
      }
    }
    else
    {
      if (v11 < v8)
        v8 = v11;
      if (v11 > v9)
        v9 = v11;
      v7 = 1;
    }
    ++v6;
  }
  while (v4 != v6);
  a2 = v13;
  a3 = v14;
  if ((v7 & 1) != 0)
  {
    *(float *)v13 = v8;
    *v14 = v9;
    return 1;
  }
  else
  {
LABEL_14:
    result = 0;
    *a3 = 0.0;
    *(_DWORD *)a2 = 0;
  }
  return result;
}

void ZinDynamicRange::ZinConvertToFP32WithShift()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Not a valid range to accomodate fp16, returning shift of 0\n", v0, 2u);
}

_QWORD *ZinCopyLayer::ZinCopyLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  ZinIrKernel *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  ZinIrKernel *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v5 = *a2;
  *a2 = 0;
  v6 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v6;
  v19 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v19, &v17, a4, &v16);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    ZinIrKernel::~ZinIrKernel(v9);
    MEMORY[0x20BD002F8](v10, 0x1032C40DEE44497);
  }
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *a1 = &off_24C0163A0;
  return a1;
}

void sub_206F24B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinCopyLayer::LowerEngine(uint64_t **a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  std::string *v7;
  uint64_t *v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  __n128 v16;
  int v17;
  ZinIrTensor *v18;
  ZinIrOpLayer *v19;
  ZinIrTensor::MirInfo *v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v32[2];
  int v33;
  void *__p[2];
  void *v35;
  _BYTE v36[172];
  ZinIrTensor::MirInfo *v37;
  void *v38;
  char v39;
  std::string v40;
  _QWORD v41[3];
  char v42;
  __int128 v43;
  int64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = *a1[11];
  v5 = *(_QWORD *)(v4 + 16);
  if (*((char *)a1 + 47) >= 0)
    v6 = *((unsigned __int8 *)a1 + 47);
  else
    v6 = (size_t)a1[4];
  v7 = &v40;
  std::string::basic_string[abi:ne180100]((uint64_t)&v40, v6 + 1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 47) >= 0)
      v8 = (uint64_t *)(a1 + 3);
    else
      v8 = a1[3];
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v38, "copy_lowerengine");
  v10 = std::string::append(v9, "_xfm", 4uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v44 = v10->__r_.__value_.__r.__words[2];
  v43 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v12 = (const std::string::value_type *)&v43;
  else
    v12 = (const std::string::value_type *)v43;
  if (v44 >= 0)
    v13 = HIBYTE(v44);
  else
    v13 = *((_QWORD *)&v43 + 1);
  v14 = std::string::append(&v40, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35 = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = ZinObjectNameFactory::ZinObjectNameFactory(v41, __p);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v39 < 0)
    operator delete(v38);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v17 = *(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD, __n128))(*a1)[4])(a1, 0, 0, v16) + 88);
  v18 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a1)[4])(a1, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v18, &v37);
  v36[0] = 0;
  v36[168] = 0;
  v19 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v5, (uint64_t)v41, v4, v17, &v37, 0, (uint64_t)v36, 1.0);
  v20 = v37;
  v37 = 0;
  if (v20)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v37, v20);
  *(_QWORD *)&v43 = a1;
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  v40.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v40);
  ZinIrOpLayerGraph::AddNode(a2, v19, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v35 = __p[1];
    operator delete(__p[1]);
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v4, (uint64_t)v19, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v32, 0, sizeof(v32));
  v33 = 1065353216;
  v21 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, a1, v19, v32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v32);
  if ((v21 & 1) != 0)
  {
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0);
    v22 = 0;
  }
  else
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v23, v24, v25, v26, v27, v28, v29, v30);
    v22 = 3;
  }
  v41[0] = off_24C01FBB0;
  if (v42 < 0)
    operator delete((void *)v41[1]);
  return v22;
}

void sub_206F24E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  *(_QWORD *)(v17 - 136) = off_24C01FBB0;
  if (*(char *)(v17 - 105) < 0)
    operator delete(*(void **)(v17 - 128));
  _Unwind_Resume(a1);
}

_QWORD *ZinCopyLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *GroupId;
  uint64_t v17[2];
  ZinIrOpLayerOpCode *v18;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  *(_QWORD *)v8 = &unk_24C017878;
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinCopyLayer::ZinCopyLayer(v6, (uint64_t *)&v18, v17, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v18)
    (*(void (**)(ZinIrOpLayerOpCode *))(*(_QWORD *)v18 + 8))(v18);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206F25090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

_QWORD *ZinCopyLayer::OpCodeKindToString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "COPY");
}

uint64_t ZinCopyLayer::DebugDetailPrint(ZinCopyLayer *this)
{
  return (*(uint64_t (**)(ZinCopyLayer *))(*(_QWORD *)this + 184))(this);
}

void ZinCopyLayer::Lower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ReinterpretCast while lowering Copy failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Lowering Copy failed while Reinterpret casting\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinObjectGeneration::Make@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t result;
  void (**v12)(ZinObjectGenerationLegacy *__hidden);

  v10 = (_QWORD *)operator new();
  result = ZinObjectGeneration::ZinObjectGeneration((uint64_t)v10, a1, a2, a3);
  if (a4)
    v12 = &off_24BFF2450;
  else
    v12 = &off_24BFF2530;
  *v10 = v12;
  *a5 = v10;
  return result;
}

void sub_206F2521C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0xE1C40CDB54DAALL);
  _Unwind_Resume(a1);
}

uint64_t ZinObjectGeneration::AddBaseTypes(ZinObjectGeneration *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v2 = 0;
  v13 = xmmword_207AAA760;
  while (1)
  {
    v3 = ZinObjectGeneration::AddBaseTypes(void)::base_types[v2];
    v4 = ZinComputeMutableProgramWrapper::AddSymbol(*((_QWORD *)this + 6), 0, (uint64_t)&v13, (uint64_t)v3, 0, 0, 0);
    if ((_DWORD)v4)
      break;
    if (++v2 == 22)
      return v4;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinObjectGeneration::AddBaseTypes((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t ZinObjectGeneration::ZinObjectGeneration(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  ZinComputeMutableProgramWrapper **v5;
  ZinComputeMutableProgramWrapper *v6;
  int v8;
  _DWORD v9[3];
  __int128 v10;
  int v11;

  *(_QWORD *)a1 = &off_24C01F1C0;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = a2[1];
  v5 = (ZinComputeMutableProgramWrapper **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v9[0] = a3;
  v9[1] = 128;
  v9[2] = a4;
  v10 = xmmword_207A9A920;
  v11 = 0;
  v8 = 0;
  v6 = (ZinComputeMutableProgramWrapper *)operator new();
  ZinComputeMutableProgramWrapper::ZinComputeMutableProgramWrapper((uint64_t)v6, (uint64_t)v9, &v8, 0);
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](v5, v6);
  if (v8)
    ZinAssertImpl("Unable to create compute program");
  *(_DWORD *)(*(_QWORD *)ZinComputeMutableProgramWrapper::GetProgram(*v5) + 12) = 1;
  return a1;
}

void sub_206F253D8(_Unwind_Exception *a1)
{
  ZinComputeMutableProgramWrapper **v1;
  uint64_t v2;

  MEMORY[0x20BD002F8](v2, 0x1022C409972253CLL);
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ZinObjectGeneration::~ZinObjectGeneration(ZinComputeMutableProgramWrapper **this)
{
  *this = (ZinComputeMutableProgramWrapper *)&off_24C01F1C0;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);
}

{
  *this = (ZinComputeMutableProgramWrapper *)&off_24C01F1C0;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);
  JUMPOUT(0x20BD002F8);
}

uint64_t *ZinObjectGeneration::SetMemoryPools(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v10 = 2;
  v4 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v10);
  if (v4)
    v5 = v4[3];
  else
    v5 = 0;
  a1[3] = v5;
  v11 = 1;
  v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v11);
  if (v6)
    v7 = v6[3];
  else
    v7 = 0;
  a1[4] = v7;
  v12 = 0;
  result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v12);
  if (result)
    v9 = result[3];
  else
    v9 = 0;
  a1[5] = v9;
  return result;
}

void ZinObjectGeneration::AddTensorDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t Program;
  uint64_t v10;
  char v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20[512];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  v10 = Program;
  if (a5)
    v11 = 32;
  else
    v11 = 0x80;
  v19[0] = 0;
  v19[1] = a4;
  BYTE4(v19[0]) = v11;
  HIWORD(v19[0]) = *(_WORD *)(Program + 216);
  if (*(char *)(a3 + 23) >= 0)
    v12 = (const char *)a3;
  else
    v12 = *(const char **)a3;
  ZinTensorDescriptorGetStab(a2, v12, (unsigned __int16 *)(Program + 216), v20, 0x200uLL);
  if (ZinComputeMutableProgramAddSymbol<ZinComputeMutableProgram>(v10, 0, (uint64_t)v19, v20, 0, 0, 0))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinObjectGeneration::AddTensorDebugInfo(a3 + 23, a3, v13, v14, v15, v16, v17, v18);
  }
}

uint64_t ZinObjectGeneration::AddExternSymbol(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  char v9;
  uint64_t Program;
  char *v11;
  uint64_t ComputeProgramMutableSymbolSize;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v21;
  unint64_t v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 < *(_QWORD *)(*a4 + 32))
    ZinAssertImpl("Adding out of bounds symbol to section");
  v21 = 0;
  v22 = v4;
  if (a2 == a3)
    v9 = 15;
  else
    v9 = 14;
  BYTE4(v21) = v9;
  Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  v11 = (char *)(a2 + 160);
  if (*(char *)(a2 + 183) < 0)
    v11 = *(char **)(a2 + 160);
  ComputeProgramMutableSymbolSize = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)a2);
  if (ZinComputeMutableProgramAddSymbol<ZinComputeMutableProgram>(Program, a4, (uint64_t)&v21, v11, 0, ComputeProgramMutableSymbolSize, 0))ZinAssertImpl("Failed to create a symbol with the given name and size\n", v21);
  if (((v21 & 0x100000000) != 0 || *(_BYTE *)(*(_QWORD *)(a1 + 16) + 100)) && *(_DWORD *)(a2 + 156) == 1)
    ZinObjectGeneration::AddTensorDebugInfo(a1, a2 + 208, a2 + 160, v22 - *(_QWORD *)(*a4 + 32), BYTE4(v21) & 1);
  v13 = v22;
  v14 = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)a2) + v13 - *(_QWORD *)(*a4 + 32);
  if (*(_QWORD *)(*a4 + 40) < v14)
    *(_QWORD *)(*a4 + 40) = v14;
  v15 = *(_QWORD **)(a2 + 488);
  v16 = (_QWORD *)(a2 + 496);
  if (v15 != v16)
  {
    do
    {
      ZinObjectGeneration::AddExternSymbol(a1, v15[4], a3, a4);
      v17 = (_QWORD *)v15[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v15[2];
          v19 = *v18 == (_QWORD)v15;
          v15 = v18;
        }
        while (!v19);
      }
      v15 = v18;
    }
    while (v18 != v16);
  }
  return 0;
}

uint64_t ZinObjectGenerationLegacy::AddFVMLIBWithSymbol(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  char **Program;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Program = (char **)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  v13 = Program;
  v14 = *(_QWORD *)(a2 + 8);
  v18 = 0;
  v15 = *(_QWORD *)(v14 + 128);
  if (v15)
  {
    v16 = *(_QWORD **)(v15 + 8);
    v18 = v16;
    return ZinObjectGenerationLegacy::CreateFVMLIB(a1, v13, v16, a2, a3, a4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 512), a6);
  }
  v19[0] = 0;
  v20 = 0u;
  v25 = 0x200000000;
  v21 = 0u;
  v22 = 0;
  v19[1] = *(_QWORD *)"__FVMLIB";
  v23 = a5;
  v24 = a5;
  if (!ZinComputeMutableProgramAddSegment<ZinComputeMutableProgram>(Program, (uint64_t)v19, &v18))
  {
    v16 = v18;
    return ZinObjectGenerationLegacy::CreateFVMLIB(a1, v13, v16, a2, a3, a4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 512), a6);
  }
  return 3;
}

uint64_t ZinObjectGenerationLegacy::CreateFVMLIB(uint64_t a1, char **a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  const char *v17;
  int v18;
  void **v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33[2];
  char __dst[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v33 = 0;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 != *(_QWORD *)(a4 + 24))
  {
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ZinObjectGenerationLegacy::CreateFVMLIB(v20, v21, v22, v23, v24, v25, v26, v27);
    return 3;
  }
  v16 = *(_QWORD *)(a4 + 8);
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  *(_OWORD *)__dst = 0u;
  v35 = *(unint64_t *)"__FVMLIB";
  if (*(char *)(a5 + 23) >= 0)
    v17 = (const char *)a5;
  else
    v17 = *(const char **)a5;
  strcpy(__dst, v17);
  v18 = ZinLog2OfPow2(a7);
  *(_QWORD *)&v36 = v8;
  DWORD1(v37) = v18;
  LODWORD(v38) = a6;
  if (ZinComputeMutableProgramAddSection<ZinComputeMutableProgram>(a2, a3, (uint64_t)__dst, 0, 0, (uint64_t *)v33)|| ZinComputeMutableProgramAddSectionSymbol<ZinComputeMutableProgram>((uint64_t)a2, *(const char ***)v33, 0))
  {
    return 3;
  }
  if (!*(_QWORD *)(v16 + 128))
  {
    if (*(_QWORD *)(a4 + 16))
      ZinAssertImpl("Invalid symbol base offset");
    ZinIrSection::SetComputeProgramSectionAndTransferBarId(v16, *(uint64_t *)v33);
  }
  v19 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a8, (void **)(a4 + 160));
  if ((void **)(a8 + 8) == v19)
    ZinAssertImpl("Failed to find library name for live tensor\n");
  if (*((char *)v19 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__dst, (const std::string::value_type *)v19[7], (std::string::size_type)v19[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v19 + 7);
    *(_QWORD *)&v35 = v19[9];
  }
  v32[0] = 0;
  v32[1] = 0;
  if ((SBYTE7(v35) & 0x80u) == 0)
    v29 = __dst;
  else
    v29 = *(char **)__dst;
  if (ZinComputeMutableProgramAddFvmlib(a2, *(uint64_t *)v33, (uint64_t)v32, v29, 0))
    ZinAssertImpl("ZinComputeMutableProgramAddFvmlib failed.");
  v30 = a4;
  do
  {
    v31 = v30;
    v30 = *(_QWORD *)(v30 + 512);
  }
  while (v30);
  ZinObjectGeneration::AddExternSymbol(a1, v31, a4, *(_QWORD **)v33);
  if (SBYTE7(v35) < 0)
    operator delete(*(void **)__dst);
  return 0;
}

void sub_206F25B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGenerationLegacy::AddLiveIOFVMLIB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;

  v7 = *(_QWORD *)(a2 + 104);
  if (!v7 || (v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48)))
    v9 = 0;
  else
    v9 = *v8;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  switch((int)a3)
  {
    case 0:
      HIBYTE(v16) = 7;
      qmemcpy(v15, "__const", 7);
      v10 = 1;
      v11 = 33;
      goto LABEL_10;
    case 1:
      HIBYTE(v16) = 6;
      qmemcpy(v15, "__data", 6);
      v10 = 2;
      v11 = 35;
      goto LABEL_10;
    case 2:
      HIBYTE(v16) = 6;
      qmemcpy(v15, "__data", 6);
      v10 = 3;
      v11 = 53;
      goto LABEL_10;
    case 3:
      return a3;
    default:
      v10 = 0;
      v11 = 1;
LABEL_10:
      a3 = ZinObjectGenerationLegacy::AddFVMLIBWithSymbol(a1, v9, (uint64_t)v15, v11, v10, a4);
      if (!(_DWORD)a3)
      {
        v12 = *(_QWORD *)(a2 + 104);
        if (!v12)
          return 0;
        v13 = *(_QWORD *)(v12 + 64);
        if (!v13)
          return 0;
        a3 = ZinObjectGenerationLegacy::AddFVMLIBWithSymbol(a1, v13, (uint64_t)v15, v11, v10, a4);
        if (!(_DWORD)a3)
          return 0;
      }
      return a3;
  }
}

uint64_t ZinObjectGeneration::HandleSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  int v14;
  int v15;
  void *__p[2];
  char v18;
  uint64_t v19;

  v19 = 0;
  v13 = *(_QWORD *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
  v14 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v13, a2, a4, a5, 0, a6, a7, (uint64_t)__p, &v19);
  v15 = v14;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v15)
      return 3;
  }
  else if (v14)
  {
    return 3;
  }
  ZinIrSection::SetComputeProgramSectionAndTransferBarId(a3, v19);
  return 0;
}

void sub_206F25D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGeneration::BuildComputeProgram(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ComputeProgramMutableSymbolSize;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  void *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94[2];
  char v95;
  void *v96[2];
  uint64_t v97;
  void *__p;
  uint64_t v99;
  uint64_t v100;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    ZinIrMemoryPool::GetSections(v2, 1, &__p);
    v3 = *(_QWORD *)(v99 + 16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
    ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 40), 0, &__p);
    v4 = *(_QWORD *)(v99 + 16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
    ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 40), 8, &__p);
    if (v100)
    {
      if (*(_QWORD *)(*(_QWORD *)(v99 + 16) + 32))
        v5 = *(_QWORD *)(v99 + 16);
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 40), 4, v96);
    v7 = *((_QWORD *)v96[1] + 2);
    std::__list_imp<ZinIrSection *>::clear(v96);
    ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 40), 6, v96);
    if (v97)
    {
      ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 40), 6, v94);
      v6 = *((_QWORD *)v94[1] + 2);
      std::__list_imp<ZinIrSection *>::clear(v94);
    }
    else
    {
      v6 = 0;
    }
    std::__list_imp<ZinIrSection *>::clear(v96);
    std::__list_imp<ZinIrSection *>::clear(&__p);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    ZinIrMemoryPool::GetSections(v8, 4, &__p);
    v9 = *(_QWORD *)(v99 + 16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
    v90 = 0;
    if (v9)
      goto LABEL_17;
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  ZinIrMemoryPool::GetSections(v10, 4, &__p);
  v90 = *(_QWORD *)(v99 + 16);
  std::__list_imp<ZinIrSection *>::clear(&__p);
  if (!v9)
    goto LABEL_19;
LABEL_17:
  v11 = *(_QWORD *)(v9 + 32) != 0;
LABEL_20:
  if (ZinObjectGeneration::AddBaseTypes((ZinObjectGeneration *)a1))
    return 3;
  ZinComputeMutableProgramWrapper::SetNextStabTypeno(*(ZinComputeMutableProgramWrapper **)(a1 + 48), 23);
  if (v3)
  {
    v94[0] = 0;
    v13 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
    v14 = ZinComputeMutableProgramWrapper::AddSegment(v13, (uint64_t)&__p, 5, 0, (uint64_t)v94);
    v15 = v14;
    if (SHIBYTE(v100) < 0)
    {
      operator delete(__p);
      if (v15)
        return 3;
    }
    else if (v14)
    {
      return 3;
    }
    v16 = v94[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
    std::string::basic_string[abi:ne180100]<0>(v96, "__text");
    v17 = ZinObjectGeneration::HandleSection(a1, (uint64_t)v16, v3, (uint64_t)&__p, (uint64_t)v96, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 512), 40);
    if (SHIBYTE(v97) < 0)
      operator delete(v96[0]);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v17)
      return 3;
  }
  v93 = 0;
  if (v4 | v5)
  {
    v18 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
    v19 = ZinComputeMutableProgramWrapper::AddSegment(v18, (uint64_t)&__p, 1, 0, (uint64_t)&v93);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v19)
      return 3;
    if (v4)
    {
      v20 = v93;
      std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
      std::string::basic_string[abi:ne180100]<0>(v96, "__const");
      v21 = ZinObjectGeneration::HandleSection(a1, v20, v4, (uint64_t)&__p, (uint64_t)v96, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 528), 38);
      if (SHIBYTE(v97) < 0)
        operator delete(v96[0]);
      if (SHIBYTE(v100) < 0)
        operator delete(__p);
      if (v21)
        return 3;
    }
    if (v5)
    {
      v22 = v93;
      std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
      std::string::basic_string[abi:ne180100]<0>(v96, "__jit_const");
      v23 = ZinObjectGeneration::HandleSection(a1, v22, v5, (uint64_t)&__p, (uint64_t)v96, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 528), 54);
      if (SHIBYTE(v97) < 0)
        operator delete(v96[0]);
      if (SHIBYTE(v100) < 0)
        operator delete(__p);
      if (v23)
        return 3;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 100))
  {
    v91 = 0;
    v92 = 0;
    v24 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DEBUG");
    v25 = ZinComputeMutableProgramWrapper::AddSegment(v24, (uint64_t)&__p, 0, 0, (uint64_t)&v92);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v25)
      return 3;
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_207AF6795);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = v92;
    std::string::basic_string[abi:ne180100]<0>(v96, "__DEBUG");
    std::string::basic_string[abi:ne180100]<0>(v94, "__debug_info");
    v28 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v26, v27, (uint64_t)v96, (uint64_t)v94, 0, 4, 50, (uint64_t)&__p, &v91);
    if (v95 < 0)
      operator delete(v94[0]);
    if (SHIBYTE(v97) < 0)
      operator delete(v96[0]);
    if (v28)
    {
      v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v29)
        ZinObjectGeneration::BuildComputeProgram(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v91;
    }
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v28)
      return 3;
  }
  if (v7 && *(_QWORD *)(v7 + 32))
  {
    v91 = 0;
    v92 = 0;
    v37 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DATA");
    v38 = ZinComputeMutableProgramWrapper::AddSegment(v37, (uint64_t)&__p, 3, 0, (uint64_t)&v92);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v38)
      return 3;
    v39 = *(_QWORD *)(a1 + 48);
    v40 = v92;
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DATA");
    std::string::basic_string[abi:ne180100]<0>(v96, "__bss");
    v41 = *(_QWORD *)(v7 + 32);
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 528);
    std::string::basic_string[abi:ne180100]<0>(v94, &byte_207AF6795);
    v43 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v39, v40, (uint64_t)&__p, (uint64_t)v96, v41, v42, 37, (uint64_t)v94, &v91);
    if (v95 < 0)
      operator delete(v94[0]);
    if (SHIBYTE(v97) < 0)
      operator delete(v96[0]);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v43)
      return 3;
    ZinIrSection::SetComputeProgramSectionAndTransferBarId(v7, v91);
    v44 = *(_QWORD **)(v7 + 64);
    if (v44 != (_QWORD *)(v7 + 72))
    {
      while (1)
      {
        v45 = v44[4];
        v46 = *(_QWORD *)(v45 + 16);
        __p = (void *)0xE00000000;
        v99 = v46;
        v47 = (_QWORD *)(v45 + 160);
        if (*(char *)(v45 + 183) < 0)
          v47 = (_QWORD *)*v47;
        v48 = *(_QWORD *)(a1 + 48);
        v49 = v91;
        ComputeProgramMutableSymbolSize = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)v45);
        if (ZinComputeMutableProgramWrapper::AddSymbol(v48, v49, (uint64_t)&__p, (uint64_t)v47, 0, ComputeProgramMutableSymbolSize, 0))break;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 100))
          ZinObjectGeneration::AddTensorDebugInfo(a1, v44[4] + 208, v44[4] + 160, v99, 0);
        v51 = (_QWORD *)v44[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (_QWORD *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (_QWORD *)v44[2];
            v53 = *v52 == (_QWORD)v44;
            v44 = v52;
          }
          while (!v53);
        }
        v44 = v52;
        if (v52 == (_QWORD *)(v7 + 72))
          goto LABEL_87;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinObjectGeneration::BuildComputeProgram((uint64_t)(v44 + 4), v83, v84, v85, v86, v87, v88, v89);
      return 3;
    }
  }
LABEL_87:
  if (v6)
  {
    v94[0] = 0;
    v54 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DYNSHAPE");
    v55 = ZinComputeMutableProgramWrapper::AddSegment(v54, (uint64_t)&__p, 0, 0, (uint64_t)v94);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v55)
      return 3;
    v56 = v94[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DYNSHAPE");
    std::string::basic_string[abi:ne180100]<0>(v96, "__text");
    v57 = ZinObjectGeneration::HandleSection(a1, (uint64_t)v56, v6, (uint64_t)&__p, (uint64_t)v96, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 528), 46);
    if (SHIBYTE(v97) < 0)
      operator delete(v96[0]);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v57)
      return 3;
  }
  if (v11)
  {
    v91 = 0;
    v92 = 0;
    v58 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__L3");
    v59 = ZinComputeMutableProgramWrapper::AddSegment(v58, (uint64_t)&__p, 3, 0, (uint64_t)&v92);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v59)
      return 3;
    v60 = *(_QWORD *)(a1 + 48);
    v61 = v92;
    std::string::basic_string[abi:ne180100]<0>(&__p, "__L3");
    std::string::basic_string[abi:ne180100]<0>(v96, "__bss");
    v62 = *(_QWORD *)(v9 + 32);
    v63 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 528);
    std::string::basic_string[abi:ne180100]<0>(v94, &byte_207AF6795);
    v64 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v60, v61, (uint64_t)&__p, (uint64_t)v96, v62, v63, 37, (uint64_t)v94, &v91);
    if (v95 < 0)
      operator delete(v94[0]);
    if (SHIBYTE(v97) < 0)
      operator delete(v96[0]);
    if (SHIBYTE(v100) < 0)
      operator delete(__p);
    if (v64)
      return 3;
    ZinIrSection::SetComputeProgramSectionAndTransferBarId(v9, v91);
    v65 = *(_QWORD **)(v9 + 64);
    v66 = (_QWORD *)(v9 + 72);
    if (v65 != (_QWORD *)(v9 + 72))
    {
      do
      {
        v67 = v65[4];
        v68 = *(_QWORD *)(v67 + 16);
        __p = (void *)0xE00000000;
        v99 = v68;
        v69 = (_QWORD *)(v67 + 160);
        if (*(char *)(v67 + 183) < 0)
          v69 = (_QWORD *)*v69;
        v70 = *(_QWORD *)(a1 + 48);
        v71 = v91;
        v72 = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)v67);
        if (ZinComputeMutableProgramWrapper::AddSymbol(v70, v71, (uint64_t)&__p, (uint64_t)v69, 0, v72, 0))return 3;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 100))
          ZinObjectGeneration::AddTensorDebugInfo(a1, v65[4] + 208, v65[4] + 160, v99, 0);
        v73 = (_QWORD *)v65[1];
        if (v73)
        {
          do
          {
            v74 = v73;
            v73 = (_QWORD *)*v73;
          }
          while (v73);
        }
        else
        {
          do
          {
            v74 = (_QWORD *)v65[2];
            v53 = *v74 == (_QWORD)v65;
            v65 = v74;
          }
          while (!v53);
        }
        v65 = v74;
      }
      while (v74 != v66);
    }
  }
  if (v90)
  {
    v75 = *(_QWORD **)(v90 + 64);
    if (v75 != (_QWORD *)(v90 + 72))
    {
      while (1)
      {
        v76 = v75[4];
        v77 = *(_QWORD *)(v76 + 16) + *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
        __p = (void *)0x2000200000000;
        v99 = v77;
        v78 = (_QWORD *)(v76 + 160);
        if (*(char *)(v76 + 183) < 0)
          v78 = (_QWORD *)*v78;
        v79 = *(_QWORD *)(a1 + 48);
        v80 = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)v76);
        if (ZinComputeMutableProgramWrapper::AddSymbol(v79, 0, (uint64_t)&__p, (uint64_t)v78, 0, v80, 0))break;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 100))
          ZinObjectGeneration::AddTensorDebugInfo(a1, v75[4] + 208, v75[4] + 160, v99, 0);
        v81 = (_QWORD *)v75[1];
        if (v81)
        {
          do
          {
            v82 = v81;
            v81 = (_QWORD *)*v81;
          }
          while (v81);
        }
        else
        {
          do
          {
            v82 = (_QWORD *)v75[2];
            v53 = *v82 == (_QWORD)v75;
            v75 = v82;
          }
          while (!v53);
        }
        result = 0;
        v75 = v82;
        if (v82 == (_QWORD *)(v90 + 72))
          return result;
      }
      return 3;
    }
  }
  return 0;
}

void sub_206F267C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGenerationLegacy::BuildComputeProgram(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t i;
  uint8_t v21;
  char v22[15];
  std::string __p;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27[3];
  uint64_t v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  v6 = ZinObjectGeneration::BuildComputeProgram(a1);
  if (!(_DWORD)v6)
  {
    std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::map[abi:ne180100](v27, *a2 + 72);
    std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::map[abi:ne180100](v28, *a2 + 48);
    v7 = 0;
    v8 = MEMORY[0x24BDACB70];
    do
    {
      v9 = &v27[3 * v7];
      v12 = *v9;
      v10 = v9 + 1;
      v11 = (__int128 *)v12;
      if ((uint64_t *)v12 != v10)
      {
        do
        {
          std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::pair[abi:ne180100](&__p, v11 + 2);
          v13 = v25;
          v14 = v26;
          if (v25 == v26)
          {
            v15 = 1;
            if (v25)
              goto LABEL_15;
          }
          else
          {
            while (!*v13 || !ZinObjectGenerationLegacy::AddLiveIOFVMLIB(a1, *v13, v24, a3 + 48))
            {
              if (++v13 == v14)
              {
                v15 = 1;
                goto LABEL_14;
              }
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              ZinObjectGenerationLegacy::BuildComputeProgram(&v21, v22);
            v15 = 0;
LABEL_14:
            v13 = v25;
            if (v25)
            {
LABEL_15:
              v26 = v13;
              operator delete(v13);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!v15)
          {
            v6 = 3;
            goto LABEL_28;
          }
          v16 = (uint64_t *)*((_QWORD *)v11 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)*((_QWORD *)v11 + 2);
              v18 = *v17 == (_QWORD)v11;
              v11 = (__int128 *)v17;
            }
            while (!v18);
          }
          v11 = (__int128 *)v17;
        }
        while (v17 != v10);
      }
      ++v7;
    }
    while (v7 != 2);
    v6 = 0;
LABEL_28:
    for (i = 0; i != -6; i -= 3)
      std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::destroy((uint64_t)&v27[i + 3], (_QWORD *)v28[i + 1]);
  }
  return v6;
}

void sub_206F26A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t ZinObjectGenerationRT::BuildComputeProgram(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void *__p[2];
  uint64_t v30;

  result = ZinObjectGeneration::BuildComputeProgram(a1);
  if (!(_DWORD)result)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      ZinIrMemoryPool::GetSections(v3, 9, __p);
      if (v30)
      {
        ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 40), 9, v27);
        v4 = *((_QWORD *)v27[1] + 2);
        std::__list_imp<ZinIrSection *>::clear(v27);
        std::__list_imp<ZinIrSection *>::clear(__p);
        v26 = 0;
        if (v4)
        {
          v5 = *(_QWORD *)(a1 + 48);
          std::string::basic_string[abi:ne180100]<0>(__p, "__RUNTIME");
          v6 = ZinComputeMutableProgramWrapper::AddSegment(v5, (uint64_t)__p, 1, 0, (uint64_t)&v26);
          v7 = v6;
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__p[0]);
            if (v7)
            {
LABEL_7:
              v8 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v8)
                ZinObjectGenerationRT::BuildComputeProgram(v8, v9, v10, v11, v12, v13, v14, v15);
              return 3;
            }
          }
          else if (v6)
          {
            goto LABEL_7;
          }
          v16 = v26;
          std::string::basic_string[abi:ne180100]<0>(__p, "__RUNTIME");
          std::string::basic_string[abi:ne180100]<0>(v27, "__runtime");
          v17 = ZinObjectGeneration::HandleSection(a1, v16, v4, (uint64_t)__p, (uint64_t)v27, 4, 64);
          if (v28 < 0)
            operator delete(v27[0]);
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__p[0]);
            if (v17)
            {
LABEL_14:
              v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v18)
                ZinObjectGenerationRT::BuildComputeProgram(v18, v19, v20, v21, v22, v23, v24, v25);
              return 3;
            }
          }
          else if (v17)
          {
            goto LABEL_14;
          }
          return 0;
        }
      }
      else
      {
        std::__list_imp<ZinIrSection *>::clear(__p);
      }
    }
    ZinAssertImpl("Missing the __runtime section");
  }
  return result;
}

void sub_206F26C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGeneration::Generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFArrayRef *a5)
{
  __int128 **v6;
  uint64_t Program;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  std::string *v17;
  int v18;
  double v19;
  void *v20;
  uint64_t v21;
  uint64_t SymbolAtOffset;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t ComputeProgramMutableSymbolSize;
  ZinIrHalParameters *v33;
  double v34;
  uint64_t result;
  _QWORD *v36;
  unint64_t v37;
  char **v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  int v94[2];
  double v95[3];
  char v96;
  std::string v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE __p[32];
  _OWORD v102[19];
  _BYTE v103[32];
  _OWORD v104[19];
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v6 = *(__int128 ***)(a2 + 16);
  v91 = *(_QWORD **)(a2 + 8);
  Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  v8 = *v6;
  v9 = v6[1];
  if (*v6 != v9)
  {
    v10 = Program;
    do
    {
      if (*((_BYTE *)v8 + 48))
      {
        if (*((char *)v8 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
        }
        else
        {
          v11 = *v8;
          v97.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v11;
        }
        v14 = *(__int128 *)((char *)v8 + 24);
        v15 = *(__int128 *)((char *)v8 + 56);
        v99 = *(__int128 *)((char *)v8 + 40);
        v100 = v15;
        v98 = v14;
        if (BYTE9(v99))
          v16 = 117440512;
        else
          v16 = 83886080;
        *(_DWORD *)v103 = DWORD2(v98);
        *(_DWORD *)&v103[4] = v16;
        v95[0] = 0.0;
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v97;
        else
          v17 = (std::string *)v97.__r_.__value_.__r.__words[0];
        v18 = ZinComputeMutableSectionAddReloc<ZinComputeMutableProgram>(v10, *(_QWORD ***)(v98 + 128), (char *)v17, v103, v95);
        if (v18)
        {
          ZinIrNetworkStatus::SetError(a5, CFSTR("ComputeProgramError"));
        }
        else
        {
          v19 = v95[0];
          **(_BYTE **)&v95[0] = BYTE10(v99);
          *(_OWORD *)(*(_QWORD *)&v19 + 8) = v100;
        }
        if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_33;
        v20 = (void *)v97.__r_.__value_.__r.__words[0];
      }
      else
      {
        v12 = *((_QWORD *)v8 + 3);
        v13 = *(_QWORD *)(v12 + 24);
        ZinIrSymbol::Descriptor::Descriptor(v103, v8, *((_QWORD *)v8 + 5));
        *(_QWORD *)__p = *(_QWORD *)v103;
        if ((v103[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)&v103[8], *(std::string::size_type *)&v103[16]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)&v103[8];
          *(_QWORD *)&__p[24] = *(_QWORD *)&v103[24];
        }
        memcpy(v102, v104, sizeof(v102));
        v21 = *((_QWORD *)v8 + 4);
        LOBYTE(v95[0]) = 0;
        v96 = 0;
        SymbolAtOffset = ZinIrSection::CreateSymbolAtOffset(v12, (uint64_t)__p, 0, v21, v21, 0, 0, (uint64_t)v95);
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        v23 = *(double *)(SymbolAtOffset + 16);
        *(_QWORD *)&v95[0] = 0xE00000000;
        v95[1] = v23;
        if (v13)
          v24 = v13 + *((_QWORD *)v8 + 4);
        else
          v24 = 0;
        v25 = *(_QWORD **)(v12 + 128);
        v26 = (char *)(SymbolAtOffset + 160);
        if (*(char *)(SymbolAtOffset + 183) < 0)
          v26 = *(char **)v26;
        ComputeProgramMutableSymbolSize = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)SymbolAtOffset);
        v18 = ZinComputeMutableProgramAddSymbol<ZinComputeMutableProgram>(v10, v25, (uint64_t)v95, v26, v24, ComputeProgramMutableSymbolSize, 0);
        if (v18)
          ZinIrNetworkStatus::SetError(a5, CFSTR("ComputeProgramError"));
        if ((v103[31] & 0x80000000) == 0)
          goto LABEL_33;
        v20 = *(void **)&v103[8];
      }
      operator delete(v20);
LABEL_33:
      if (v18)
        return 3;
      v8 = (__int128 *)((char *)v8 + 72);
    }
    while (v8 != v9);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 80) + 387))
    return 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v103 = _Q0;
  *(_OWORD *)&v103[16] = _Q0;
  *(_QWORD *)&v104[0] = 0xBFF0000000000000;
  *(_OWORD *)__p = _Q0;
  *(_OWORD *)&__p[16] = _Q0;
  *(_QWORD *)&v102[0] = 0xBFF0000000000000;
  v97.__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)v94 = 0;
  v95[0] = 0.0;
  v33 = *(ZinIrHalParameters **)(a2 + 72);
  ZinIrHalParameters::GetMaxFrequenciesAndLevels(v33, (double *)&v97, &v94[1], v94);
  ZinIrHalParameters::GetClosestValidFrequency(v33, *(double *)&v97.__r_.__value_.__l.__data_ * 0.8, v95);
  v34 = v95[0];
  if (ZinPerfUtil::GetThreadPerformanceStats(*(ZinIrOpLayer ****)(a2 + 24), *(ZinIrHalParameters **)(a1 + 8), v94[1], v94[0], (uint64_t)v103, *(double *)&v97.__r_.__value_.__l.__data_ / 1000000.0)|| ZinPerfUtil::GetThreadPerformanceStats(*(ZinIrOpLayer ****)(a2 + 24), *(ZinIrHalParameters **)(a1 + 8), v94[1], v94[0], (uint64_t)__p, v34 / 1000000.0))
  {
    return 3;
  }
  v36 = v91;
  v37 = v91[20];
  v38 = (char **)(v91 + 18);
  v39 = (_OWORD *)v91[19];
  if ((unint64_t)v39 >= v37)
  {
    v46 = 0x6DB6DB6DB6DB6DB7 * (((char *)v39 - *v38) >> 4);
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) > 0x249249249249249)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v48 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v37 - (_QWORD)*v38) >> 4);
    if (2 * v48 > v47)
      v47 = 2 * v48;
    if (v48 >= 0x124924924924924)
      v49 = 0x249249249249249;
    else
      v49 = v47;
    if (v49)
    {
      v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinRtProcedure>>((uint64_t)(v91 + 20), v49);
      v36 = v91;
    }
    else
    {
      v50 = 0;
    }
    v51 = &v50[112 * v46];
    v52 = &v50[112 * v49];
    v53 = *(_OWORD *)v103;
    v54 = v104[0];
    *((_OWORD *)v51 + 1) = *(_OWORD *)&v103[16];
    *((_OWORD *)v51 + 2) = v54;
    *(_OWORD *)v51 = v53;
    v55 = v104[1];
    v56 = v104[2];
    v57 = v104[4];
    *((_OWORD *)v51 + 5) = v104[3];
    *((_OWORD *)v51 + 6) = v57;
    *((_OWORD *)v51 + 3) = v55;
    *((_OWORD *)v51 + 4) = v56;
    v45 = v51 + 112;
    v59 = (char *)v36[18];
    v58 = (char *)v36[19];
    if (v58 != v59)
    {
      do
      {
        v60 = *((_OWORD *)v58 - 7);
        v61 = *((_OWORD *)v58 - 5);
        *((_OWORD *)v51 - 6) = *((_OWORD *)v58 - 6);
        *((_OWORD *)v51 - 5) = v61;
        *((_OWORD *)v51 - 7) = v60;
        v62 = *((_OWORD *)v58 - 4);
        v63 = *((_OWORD *)v58 - 3);
        v64 = *((_OWORD *)v58 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v58 - 2);
        *((_OWORD *)v51 - 1) = v64;
        *((_OWORD *)v51 - 4) = v62;
        *((_OWORD *)v51 - 3) = v63;
        v51 -= 112;
        v58 -= 112;
      }
      while (v58 != v59);
      v58 = *v38;
    }
    v36[18] = v51;
    v36[19] = v45;
    v36[20] = v52;
    if (v58)
      operator delete(v58);
  }
  else
  {
    v40 = *(_OWORD *)v103;
    v41 = v104[0];
    v39[1] = *(_OWORD *)&v103[16];
    v39[2] = v41;
    *v39 = v40;
    v42 = v104[1];
    v43 = v104[2];
    v44 = v104[4];
    v39[5] = v104[3];
    v39[6] = v44;
    v39[3] = v42;
    v39[4] = v43;
    v45 = v39 + 7;
  }
  v36[19] = v45;
  v65 = v36[20];
  if ((unint64_t)v45 >= v65)
  {
    v72 = 0x6DB6DB6DB6DB6DB7 * (((char *)v45 - *v38) >> 4);
    if ((unint64_t)(v72 + 1) > 0x249249249249249)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v65 - (_QWORD)*v38) >> 4);
    v74 = 2 * v73;
    if (2 * v73 <= v72 + 1)
      v74 = v72 + 1;
    if (v73 >= 0x124924924924924)
      v75 = 0x249249249249249;
    else
      v75 = v74;
    if (v75)
    {
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinRtProcedure>>((uint64_t)(v91 + 20), v75);
      v36 = v91;
    }
    else
    {
      v76 = 0;
    }
    v77 = &v76[112 * v72];
    v78 = &v76[112 * v75];
    v79 = *(_OWORD *)__p;
    v80 = v102[0];
    *((_OWORD *)v77 + 1) = *(_OWORD *)&__p[16];
    *((_OWORD *)v77 + 2) = v80;
    *(_OWORD *)v77 = v79;
    v81 = v102[1];
    v82 = v102[2];
    v83 = v102[4];
    *((_OWORD *)v77 + 5) = v102[3];
    *((_OWORD *)v77 + 6) = v83;
    *((_OWORD *)v77 + 3) = v81;
    *((_OWORD *)v77 + 4) = v82;
    v71 = v77 + 112;
    v85 = (char *)v36[18];
    v84 = (char *)v36[19];
    if (v84 != v85)
    {
      do
      {
        v86 = *((_OWORD *)v84 - 7);
        v87 = *((_OWORD *)v84 - 5);
        *((_OWORD *)v77 - 6) = *((_OWORD *)v84 - 6);
        *((_OWORD *)v77 - 5) = v87;
        *((_OWORD *)v77 - 7) = v86;
        v88 = *((_OWORD *)v84 - 4);
        v89 = *((_OWORD *)v84 - 3);
        v90 = *((_OWORD *)v84 - 1);
        *((_OWORD *)v77 - 2) = *((_OWORD *)v84 - 2);
        *((_OWORD *)v77 - 1) = v90;
        *((_OWORD *)v77 - 4) = v88;
        *((_OWORD *)v77 - 3) = v89;
        v77 -= 112;
        v84 -= 112;
      }
      while (v84 != v85);
      v84 = *v38;
    }
    v36[18] = v77;
    v36[19] = v71;
    v36[20] = v78;
    if (v84)
      operator delete(v84);
  }
  else
  {
    v66 = *(_OWORD *)__p;
    v67 = v102[0];
    v45[1] = *(_OWORD *)&__p[16];
    v45[2] = v67;
    *v45 = v66;
    v68 = v102[1];
    v69 = v102[2];
    v70 = v102[4];
    v45[5] = v102[3];
    v45[6] = v70;
    v45[3] = v68;
    v45[4] = v69;
    v71 = v45 + 7;
  }
  result = 0;
  v36[19] = v71;
  return result;
}

void sub_206F27300(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t ZinObjectGenerationLegacy::Generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFArrayRef *a5)
{
  uint64_t v6;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  unsigned __int8 *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int BarId;
  uint64_t NumNeededNEs;
  uint64_t DynamicOffsetInfo;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  void **v36;
  const std::string *v37;
  int v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  uint64_t v42;
  std::string *v43;
  char *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  _QWORD *v48;
  int v49;
  char v50;
  int data;
  char *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t ValueAt;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  const __CFString *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  const char *v75;
  char *__format;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  CFArrayRef *v80;
  void **v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *Program;
  uint64_t v87;
  std::string *v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[25];
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  void *__p;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char **v105;
  std::string v106;
  std::string v107;
  char v108;
  std::string v109;

  v6 = a4;
  v10 = ZinObjectGeneration::Generate(a1, a2, a3, a4, a5);
  if ((_DWORD)v10)
    return v10;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v11 = *(__int128 **)(a2 + 8);
  v12 = *v11;
  v13 = v11[2];
  v91 = v11[1];
  v92 = v13;
  v90 = v12;
  v14 = v11[3];
  v15 = v11[4];
  v16 = v11[5];
  *(_OWORD *)&v95[9] = *(__int128 *)((char *)v11 + 89);
  v94 = v15;
  *(_OWORD *)v95 = v16;
  v93 = v14;
  v97 = 0;
  v98 = 0;
  v96 = 0;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__init_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(&v96, *((_QWORD *)v11 + 14), *((_QWORD *)v11 + 15), (uint64_t)(*((_QWORD *)v11 + 15) - *((_QWORD *)v11 + 14)) >> 6);
  v99 = *((_QWORD *)v11 + 17);
  __p = 0;
  v101 = 0;
  v102 = 0;
  std::vector<ThreadModeledPerformance>::__init_with_size[abi:ne180100]<ThreadModeledPerformance*,ThreadModeledPerformance*>(&__p, *((const void **)v11 + 18), *((_QWORD *)v11 + 19), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v11 + 19) - *((_QWORD *)v11 + 18)) >> 4));
  Program = (_QWORD *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  v85 = ZinMemCacheUtil::CalculateExpectedMemCacheSize(*(ZinIrOpLayer ****)(a2 + 24));
  if (BYTE8(v92))
    *((_QWORD *)&v91 + 1) = v85;
  if (*(char *)(a2 + 55) >= 0)
    v17 = (char *)(a2 + 32);
  else
    v17 = *(char **)(a2 + 32);
  if (ZinComputeMutableProgramAddProcedure(Program, v17, &v105))
  {
    ZinIrNetworkStatus::SetError(a5, CFSTR("InvalidProcedure"));
    goto LABEL_9;
  }
  v78 = (uint64_t *)a3;
  v79 = a2 + 32;
  v80 = a5;
  v19 = v96;
  v82 = v97;
  v83 = v6;
  if (v97 == v96)
  {
LABEL_89:
    v61 = *(_QWORD *)(a2 + 88);
    v62 = *(_QWORD *)(v61 + 8);
    if (v62 != v61)
    {
      v63 = 0;
      while (!(***(unsigned int (****)(_QWORD, __int128 *, _QWORD, _QWORD, unint64_t, _QWORD *, const char **, _QWORD, uint64_t *, _QWORD, _QWORD, CFArrayRef *))(v62 + 16))(*(_QWORD *)(v62 + 16), &v90, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 56), v85, Program, v105, *(unsigned int *)(a2 + 96), &v104, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v80))
      {
        ++v63;
        v62 = *(_QWORD *)(v62 + 8);
        if (v62 == v61)
          goto LABEL_93;
      }
      ZinIrNetworkStatus::SetError(v80, CFSTR("InvalidProcedure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinObjectGenerationLegacy::Generate(v63);
      goto LABEL_9;
    }
LABEL_93:
    v64 = *(_QWORD *)(a1 + 40);
    if (v64)
    {
      ZinIrMemoryPool::GetSections(v64, 6, &v107);
      if (v107.__r_.__value_.__r.__words[2])
      {
        v65 = *(_QWORD *)(v107.__r_.__value_.__l.__size_ + 16);
        std::__list_imp<ZinIrSection *>::clear(&v107);
        if (v65)
        {
          v66 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040F6D918ACuLL);
          v67 = *(_QWORD *)(a2 + 64);
          v66[1] = 0;
          v66[2] = v67;
          v68 = ZinComputeMutableProgramAddAneAotMetadataOperation(Program, (uint64_t)v105, v66, &v103);
          free(v66);
          if (v68)
          {
            ZinIrNetworkStatus::SetError(v80, CFSTR("UnsupportedOperation"));
            goto LABEL_9;
          }
          v73 = *(_QWORD *)(v65 + 128);
          if (v73)
            *(_QWORD *)(v103 + 16) = v73;
        }
      }
      else
      {
        std::__list_imp<ZinIrSection *>::clear(&v107);
      }
    }
    if (!ZinComputeMutableProgramCollectOperationScheduleInfo((uint64_t)v105))
    {
      v69 = (_QWORD *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
      v70 = v83 + 48;
      if (ZinAneBindingsForLiveIO(v78, v83, v83 + 48, v79, 0, v69))
      {
        v71 = CFSTR("InvalidInput");
      }
      else
      {
        v72 = (_QWORD *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
        if (ZinAneBindingsForLiveIO(v78, v83, v70, v79, 2, v72))
        {
          v71 = CFSTR("InvalidState");
        }
        else
        {
          v74 = (_QWORD *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
          if (!ZinAneBindingsForLiveIO(v78, v83 + 24, v70, v79, 1, v74))
          {
            v10 = 0;
            goto LABEL_10;
          }
          v71 = CFSTR("InvalidOutput");
        }
      }
      ZinIrNetworkStatus::SetError(v80, v71);
    }
LABEL_9:
    v10 = 3;
    goto LABEL_10;
  }
  v81 = (void **)(v6 + 8);
  __format = "LiveIO should have a proper symbol";
  v77 = "Invalid dynamic offset or function type for custom BAR command along wrap axis.";
  while (1)
  {
    v20 = malloc_type_calloc(1uLL, 0x118uLL, 0x1000040ED3ACACAuLL);
    *v20 = 1;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v21 = *(_QWORD *)(a2 + 72);
    v22 = (unint64_t)v19[56] << 32;
    v23 = *(_QWORD *)(ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v19) + 24);
    if (v22)
    {
      if (v23 != 1)
      {
        v75 = "SNE BAR command with wrap axis should only have offset along wrap axis.";
LABEL_120:
        v77 = (char *)v75;
LABEL_121:
        ZinAssertImpl(v77);
      }
      v24 = 8;
      v25 = 3;
    }
    else
    {
      v26 = v23 - 1;
      if (v26 > 4)
      {
        v75 = "Invalid count of dynamic offsets";
        goto LABEL_120;
      }
      v24 = v26 + 3;
      v25 = 2 * v26 + 3;
    }
    v84 = v25;
    v27 = *(_DWORD *)(v21 + 1308);
    v20[2] = v27 != 0;
    BarId = ZinDynamicOffsetCustomBarCmd::GetBarId((ZinDynamicOffsetCustomBarCmd *)v19);
    if (!v27)
      goto LABEL_24;
    if ((BarId & 1) != 0)
    {
      v75 = "64bit bar id should be an even number.";
      goto LABEL_120;
    }
    BarId = ZinDynamicOffsetCustomBarCmd::GetBarId((ZinDynamicOffsetCustomBarCmd *)v19) >> 1;
LABEL_24:
    v20[3] = BarId;
    v20[4] = v24;
    v20[5] = v84;
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v19);
    DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v19);
    v31 = DynamicOffsetInfo;
    v32 = (char *)(NumNeededNEs + 24);
    if (*(char *)(NumNeededNEs + 47) < 0)
      v32 = *(char **)v32;
    if (v19[56])
    {
      if (!v22 || *(_QWORD *)(DynamicOffsetInfo + 24) != 1)
        goto LABEL_121;
      v33 = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v19);
      v34 = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v19);
      v35 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + 24);
      if (v35 == 14)
      {
        v38 = 0;
      }
      else
      {
        if (v35 != 15)
        {
          if (v35 < 0xE)
            goto LABEL_98;
          goto LABEL_41;
        }
        v38 = 1;
      }
      v20[6] = v38;
LABEL_41:
      v20[8] = 0;
      GetLiveInParamUnmangledName(v6, *(_QWORD *)(v34 + 16) + 24, &v107);
      v39 = v88;
      if ((unint64_t)v88 >= v89)
      {
        v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v87, (uint64_t)&v107);
      }
      else
      {
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v88, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else
        {
          v40 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
          v88->__r_.__value_.__r.__words[2] = v107.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        v41 = v39 + 1;
      }
      v88 = v41;
      v20[10] = 3;
      v20[12] = *(_QWORD *)(v21 + 1224);
      v20[14] = 4;
      *((_QWORD *)v20 + 8) = *(_QWORD *)(v33 + 72);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      goto LABEL_87;
    }
    memset(&v109, 0, sizeof(v109));
    std::string::basic_string[abi:ne180100]<0>(&v107, v32);
    v36 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v6, (void **)&v107.__r_.__value_.__l.__data_);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    if (v81 == v36)
    {
      v42 = *(_QWORD *)(NumNeededNEs + 104);
      if (!v42 || *(_DWORD *)(v42 + 96) != 2)
        ZinAssertImpl("Error: the root tensor of RingBufferReader should be allocated to DRAM");
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      {
        v109.__r_.__value_.__l.__size_ = 5;
        v43 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v109.__r_.__value_.__s + 23) = 5;
        v43 = &v109;
      }
      strcpy((char *)v43, "__bss");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v107, v32);
      v37 = (const std::string *)std::map<std::string,BOOL>::at(v6, (void **)&v107.__r_.__value_.__l.__data_);
      std::string::operator=(&v109, v37);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
    }
    v20[6] = 2;
    v44 = (char *)(v20 + 6);
    v20[8] = 0;
    v45 = v88;
    if ((unint64_t)v88 >= v89)
    {
      v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v87, (uint64_t)&v109);
    }
    else
    {
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v88, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
      }
      else
      {
        v46 = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
        v88->__r_.__value_.__r.__words[2] = v109.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
      }
      v47 = v45 + 1;
    }
    v88 = v47;
    v48 = (_QWORD *)(v31 + 16);
    v49 = 1;
    while (1)
    {
      v48 = (_QWORD *)*v48;
      if (!v48)
        break;
      std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]((uint64_t)&v107, (uint64_t)(v48 + 2));
      if (LODWORD(v107.__r_.__value_.__r.__words[1]) >= 0xE)
      {
        data = (int)v107.__r_.__value_.__l.__data_;
        v52 = &v44[16 * v49];
        *(_DWORD *)v52 = LODWORD(v107.__r_.__value_.__r.__words[1]) == 15;
        *((_DWORD *)v52 + 2) = 0;
        GetLiveInParamUnmangledName(v83, (uint64_t)&v107.__r_.__value_.__l.__size_, &v106);
        v53 = v88;
        if ((unint64_t)v88 >= v89)
        {
          v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v87, (uint64_t)&v106);
        }
        else
        {
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v88, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
          }
          else
          {
            v54 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
            v88->__r_.__value_.__r.__words[2] = v106.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
          }
          v55 = v53 + 1;
        }
        v88 = v55;
        v56 = *(_QWORD *)(NumNeededNEs + 104);
        if (!v56)
          goto LABEL_116;
        v57 = *(uint64_t **)(v56 + 40);
        if (v57 == *(uint64_t **)(v56 + 48))
          goto LABEL_116;
        v58 = *v57;
        if (!v58)
          goto LABEL_116;
        if (data == 5)
        {
          __format = "Invalid stride dimension";
LABEL_116:
          ZinAssertImpl(__format);
        }
        ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v58 + 296), data);
        v60 = &v44[16 * v49 + 16];
        *(_DWORD *)v60 = 4;
        *((_QWORD *)v60 + 1) = ValueAt;
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        v49 += 2;
        v50 = 1;
      }
      else
      {
        v50 = 0;
      }
      if (v108 < 0)
      {
        operator delete((void *)v107.__r_.__value_.__r.__words[2]);
        if ((v50 & 1) == 0)
          goto LABEL_84;
      }
      else if ((v50 & 1) == 0)
      {
        goto LABEL_84;
      }
    }
    if (v84 != v49)
      ZinAssertImpl("Invalid variable count for the SNE function");
LABEL_84:
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v6 = v83;
    if (v48)
    {
LABEL_98:
      ZinIrNetworkStatus::SetError(v80, CFSTR("InvalidProcedure"));
      goto LABEL_102;
    }
LABEL_87:
    if (ZinComputeMutableProgramAddSneOperation((uint64_t)Program, v105, v20, &v87, &v104))
      break;
    free(v20);
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
    v19 += 64;
    if (v19 == v82)
      goto LABEL_89;
  }
  ZinIrNetworkStatus::SetError(v80, CFSTR("UnsupportedOperation"));
LABEL_102:
  free(v20);
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  v10 = 3;
LABEL_10:
  if (__p)
  {
    v101 = __p;
    operator delete(__p);
  }
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  return v10;
}

void sub_206F27C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  ThreadArgumentInfo::~ThreadArgumentInfo((ThreadArgumentInfo *)&a29);
  _Unwind_Resume(a1);
}

uint64_t ZinAneBindingsForLiveIO(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  _QWORD **v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int32x4_t v17;
  void **v18;
  void **v19;
  const char *v20;
  std::string *v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD **v24;
  BOOL v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int32x4_t v32;
  void **v33;
  void **v34;
  const char *v35;
  std::string *v36;
  std::string *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v43;
  _QWORD **v44;
  _QWORD *v45[2];
  _QWORD **v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49[2];
  uint64_t *v50;
  _QWORD *v51[2];
  _QWORD **v52;
  _QWORD *v53[2];
  std::string v54;
  std::string v55;
  _BYTE v56[48];
  int32x4_t v57;
  int32x4_t v58;
  _BYTE v59[48];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  std::string __p;
  uint64_t v66;
  __int128 v67;
  __int16 v68;
  int v69;
  unsigned int v70;
  _BYTE v71[12];
  int Typeno;
  int32x4_t v73;
  int v74;
  int32x4_t v75;
  int v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  __int16 v84;

  v43 = ANECGetBindingIOTypeFromIOType(a5);
  v53[0] = 0;
  v53[1] = 0;
  v51[1] = 0;
  v52 = v53;
  v50 = (uint64_t *)v51;
  v51[0] = 0;
  v49[0] = 0;
  v49[1] = 0;
  v47[1] = 0;
  v48 = v49;
  v46 = v47;
  v47[0] = 0;
  v45[0] = 0;
  v45[1] = 0;
  v44 = v45;
  if (ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*a1, a5, (uint64_t)&v52, &v50))
    goto LABEL_70;
  v11 = v52;
  if (v52 != v53)
  {
    do
    {
      bzero(v71, 0xD20uLL);
      v69 = 3;
      v70 = v43;
      v12 = *(_OWORD *)(v11 + 27);
      v61 = *(_OWORD *)(v11 + 25);
      v62 = v12;
      v13 = *(_OWORD *)(v11 + 31);
      v63 = *(_OWORD *)(v11 + 29);
      v64 = v13;
      v14 = *(_OWORD *)(v11 + 19);
      *(_OWORD *)v59 = *(_OWORD *)(v11 + 17);
      *(_OWORD *)&v59[16] = v14;
      v15 = *(_OWORD *)(v11 + 23);
      *(_OWORD *)&v59[32] = *(_OWORD *)(v11 + 21);
      v60 = v15;
      v16 = *(_OWORD *)(v11 + 9);
      v17 = *(int32x4_t *)(v11 + 13);
      *(_OWORD *)&v56[32] = *(_OWORD *)(v11 + 11);
      v57 = v17;
      v58 = *(int32x4_t *)(v11 + 15);
      *(_OWORD *)v56 = *(_OWORD *)(v11 + 7);
      *(_OWORD *)&v56[16] = v16;
      if (*((char *)v11 + 287) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v11[33], (std::string::size_type)v11[34]);
      else
        __p = *(std::string *)((_BYTE *)v11 + 11);
      v66 = (uint64_t)v11[36];
      Typeno = ZinTensorFormatGetTypeno(*(int *)v56);
      v74 = *(_DWORD *)v59;
      v76 = *(_DWORD *)&v56[40];
      v79 = *(_QWORD *)&v59[40];
      v73 = vuzp1q_s32(v57, v58);
      v75 = vuzp1q_s32(*(int32x4_t *)&v56[8], *(int32x4_t *)&v56[24]);
      v77 = *(_OWORD *)&v59[8];
      v78 = *(_OWORD *)&v59[24];
      v80 = v63;
      v81 = v66;
      memset(&v55, 0, sizeof(v55));
      memset(&v54, 0, sizeof(v54));
      v18 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v11 + 4);
      if ((void **)(a2 + 8) == v18)
        goto LABEL_64;
      std::string::operator=(&v55, (const std::string *)(v18 + 7));
      v19 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a3, (void **)&__p.__r_.__value_.__l.__data_);
      if ((void **)(a3 + 8) == v19)
        goto LABEL_64;
      std::string::operator=(&v54, (const std::string *)(v19 + 7));
      v20 = *(char *)(a4 + 23) >= 0 ? (const char *)a4 : *(const char **)a4;
      v21 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v55
          : (std::string *)v55.__r_.__value_.__r.__words[0];
      v22 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v54
          : (std::string *)v54.__r_.__value_.__r.__words[0];
      if (ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(a6, &v69, v20, (const char *)v21, (const char *)v22, 0))goto LABEL_64;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v23 = v11[1];
      if (v23)
      {
        do
        {
          v24 = (_QWORD **)v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD **)v11[2];
          v25 = *v24 == v11;
          v11 = v24;
        }
        while (!v25);
      }
      v11 = v24;
    }
    while (v24 != v53);
  }
  v26 = v50;
  if (v50 != (uint64_t *)v51)
  {
    while (1)
    {
      bzero(v71, 0xD20uLL);
      v69 = 2;
      v70 = v43;
      v27 = *(_OWORD *)(v26 + 27);
      v61 = *(_OWORD *)(v26 + 25);
      v62 = v27;
      v28 = *(_OWORD *)(v26 + 31);
      v63 = *(_OWORD *)(v26 + 29);
      v64 = v28;
      v29 = *(_OWORD *)(v26 + 19);
      *(_OWORD *)v59 = *(_OWORD *)(v26 + 17);
      *(_OWORD *)&v59[16] = v29;
      v30 = *(_OWORD *)(v26 + 23);
      *(_OWORD *)&v59[32] = *(_OWORD *)(v26 + 21);
      v60 = v30;
      v31 = *(_OWORD *)(v26 + 9);
      v32 = *(int32x4_t *)(v26 + 13);
      *(_OWORD *)&v56[32] = *(_OWORD *)(v26 + 11);
      v57 = v32;
      v58 = *(int32x4_t *)(v26 + 15);
      *(_OWORD *)v56 = *(_OWORD *)(v26 + 7);
      *(_OWORD *)&v56[16] = v31;
      if (*((char *)v26 + 287) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v26[33], v26[34]);
      else
        __p = *(std::string *)((_BYTE *)v26 + 11);
      v66 = v26[36];
      v68 = *((_WORD *)v26 + 156);
      v67 = *(_OWORD *)(v26 + 37);
      Typeno = ZinTensorFormatGetTypeno(*(int *)v56);
      v74 = *(_DWORD *)v59;
      v76 = *(_DWORD *)&v56[40];
      v79 = *(_QWORD *)&v59[40];
      v73 = vuzp1q_s32(v57, v58);
      v75 = vuzp1q_s32(*(int32x4_t *)&v56[8], *(int32x4_t *)&v56[24]);
      v77 = *(_OWORD *)&v59[8];
      v78 = *(_OWORD *)&v59[24];
      v80 = v63;
      v81 = v66;
      v82 = ZinIrDimensionGetTypeno(v67);
      v83 = DWORD2(v67);
      v84 = v68;
      memset(&v55, 0, sizeof(v55));
      memset(&v54, 0, sizeof(v54));
      v33 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v26 + 4);
      if ((void **)(a2 + 8) == v33)
        break;
      std::string::operator=(&v55, (const std::string *)(v33 + 7));
      v34 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a3, (void **)&__p.__r_.__value_.__l.__data_);
      if ((void **)(a3 + 8) == v34)
        break;
      std::string::operator=(&v54, (const std::string *)(v34 + 7));
      v35 = *(char *)(a4 + 23) >= 0 ? (const char *)a4 : *(const char **)a4;
      v36 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v55
          : (std::string *)v55.__r_.__value_.__r.__words[0];
      v37 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v54
          : (std::string *)v54.__r_.__value_.__r.__words[0];
      if (ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(a6, &v69, v35, (const char *)v36, (const char *)v37, 0))break;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v38 = (uint64_t *)v26[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (uint64_t *)v26[2];
          v25 = *v39 == (_QWORD)v26;
          v26 = v39;
        }
        while (!v25);
      }
      v26 = v39;
      if (v39 == (uint64_t *)v51)
        goto LABEL_58;
    }
LABEL_64:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_70;
  }
LABEL_58:
  if (ZinIrBindings::GetMultiPlaneUncompressedDescriptor(*a1, a5, (uint64_t)&v48)
    || ZinAddAneMultiPlaneUncompressedBindings(a6, a4, &v48, v43, a2, a3)
    || ZinIrBindings::GetCompressedDescriptor(*a1, a5, (uint64_t)&v46)
    || ZinAddAneCompressedBindings(a6, a4, &v46, v43, a2, a3)
    || !a5
    && (ZinIrBindings::GetLiveInParamDescriptor(*a1, (uint64_t)&v44)
     || ZinAddAneLiveInParamBindings(a6, a4, &v44, a2)))
  {
LABEL_70:
    v40 = 3;
    goto LABEL_71;
  }
  v40 = 0;
LABEL_71:
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&v44, v45[0]);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&v46, v47[0]);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&v48, v49[0]);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v50, v51[0]);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v52, v53[0]);
  return v40;
}

void sub_206F283F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&a16, (_QWORD *)a17);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&a19, (_QWORD *)a20);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&a22, (_QWORD *)a23);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&a25, (_QWORD *)a26);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&a28, (_QWORD *)a29);
  _Unwind_Resume(a1);
}

uint64_t ZinObjectGeneration::GetComputeMutableProgram(ZinObjectGeneration *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (!result)
    ZinAssertImpl("Invalid compute program");
  return result;
}

uint64_t ZinObjectGeneration::GetComputeMutableProgramWithOwnership@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 48);
  if (!v2)
    ZinAssertImpl("Invalid compute program");
  *(_QWORD *)(this + 48) = 0;
  *a2 = v2;
  return this;
}

BOOL ZinObjectGenHandleProgramToFile(ZinComputeMutableProgram *a1, const ZinIrCompilerParameters *a2, uint64_t a3, __sFILE *a4)
{
  int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = ZinComputeMutableProgramToFile<ZinComputeMutableProgram>((uint64_t)a1, a3, a4);
  if (v4)
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      ZinObjectGenHandleProgramToFile(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  return v4 == 0;
}

uint64_t ZinObjectGenWriteSymbolData(const char *a1, uint64_t a2, size_t a3, __sFILE *a4)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v7 = 0;
  if (!fseek(a4, a2, 0))
  {
    v7 = 1;
    v8 = fwrite(a1, a3, 1uLL, a4);
    if (v8 != 1)
    {
      v9 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinObjectGenWriteSymbolData(v9);
      return 0;
    }
  }
  return v7;
}

void ZinObjectGenerationLegacy::~ZinObjectGenerationLegacy(ZinComputeMutableProgramWrapper **this)
{
  *this = (ZinComputeMutableProgramWrapper *)&off_24C01F1C0;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);
}

{
  *this = (ZinComputeMutableProgramWrapper *)&off_24C01F1C0;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::vector<ThreadModeledPerformance>::__init_with_size[abi:ne180100]<ThreadModeledPerformance*,ThreadModeledPerformance*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<ThreadModeledPerformance>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_206F28688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void GetLiveInParamUnmangledName(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void **v5;
  __int128 v6;

  v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, (void **)(a2 + 8));
  if ((void **)(a1 + 8) == v5)
    ZinAssertImpl("Cannot find mangled name in IrNameMap");
  if (*((char *)v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v5[7], (std::string::size_type)v5[8]);
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 7);
    a3->__r_.__value_.__r.__words[2] = (std::string::size_type)v5[9];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

uint64_t ZinAddAneMultiPlaneUncompressedBindings(_QWORD *a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::vector<std::string>::pointer begin;
  void **v22;
  std::string *v23;
  const char *v24;
  std::string *v25;
  _BOOL4 v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  void **v34;
  _QWORD *v35;
  std::vector<std::string> v37;
  std::string v38;
  int64x2_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44[2];
  _DWORD v45[4];
  int32x2_t v46;
  unsigned int v47;
  uint64_t v48;
  _OWORD v49[16];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*a3;
  v35 = a3 + 1;
  if ((_QWORD *)*a3 == a3 + 1)
    return 0;
  v8 = a5;
  v9 = (void **)(a6 + 8);
  v34 = (void **)(a5 + 8);
  while (1)
  {
    bzero(v45, 0xD20uLL);
    v44[0] = 4;
    v44[1] = a4;
    v39 = *(int64x2_t *)(v6 + 7);
    v40 = *((_DWORD *)v6 + 18);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    std::vector<ZinPlaneDescriptor>::__init_with_size[abi:ne180100]<ZinPlaneDescriptor*,ZinPlaneDescriptor*>(&v41, v6[10], v6[11], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6[11] - v6[10]) >> 4));
    memset(&v38, 0, sizeof(v38));
    v10 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v8, (void **)v6 + 4);
    if (v34 == v10)
    {
      v26 = 1;
    }
    else
    {
      std::string::operator=(&v38, (const std::string *)(v10 + 7));
      v45[3] = v40;
      v46 = vmovn_s64(v39);
      v47 = -286331153 * ((v42 - v41) >> 4);
      memset(&v37, 0, sizeof(v37));
      std::vector<std::string>::resize(&v37, v47);
      memset(v49, 0, sizeof(v49));
      v12 = v41;
      v11 = v42;
      if (v42 != v41)
      {
        v13 = 0;
        v14 = 0;
        v15 = &v48;
        v16 = 232;
        do
        {
          v17 = *(_QWORD *)(v12 + v16 - 152);
          *(int32x4_t *)(v15 - 11) = vuzp1q_s32(*(int32x4_t *)(v12 + v16 - 184), *(int32x4_t *)(v12 + v16 - 168));
          *((_DWORD *)v15 - 18) = v17;
          v18 = *(_QWORD *)(v12 + v16 - 192);
          *(int32x4_t *)((char *)v15 - 68) = vuzp1q_s32(*(int32x4_t *)(v12 + v16 - 224), *(int32x4_t *)(v12 + v16 - 208));
          *((_DWORD *)v15 - 13) = v18;
          v19 = *(_QWORD *)(v12 + v16 - 112);
          *((_OWORD *)v15 - 3) = *(_OWORD *)(v12 + v16 - 144);
          *((_OWORD *)v15 - 2) = *(_OWORD *)(v12 + v16 - 128);
          *(v15 - 2) = v19;
          *((_DWORD *)v15 - 2) = *(_QWORD *)(v12 + v16 - 56);
          *v15 = *(_QWORD *)(v12 + v16);
          v20 = *(unsigned __int8 *)(v12 + v16 - 1);
          if ((v20 & 0x80u) != 0)
            v20 = *(_QWORD *)(v12 + v16 - 16);
          if (v20)
          {
            begin = v37.__begin_;
            v22 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, (void **)(v12 + v16 - 24));
            if (v9 == v22)
            {
              v26 = 1;
              goto LABEL_24;
            }
            std::string::operator=(&begin[v13], (const std::string *)(v22 + 7));
            v23 = &v37.__begin_[v13];
            if (SHIBYTE(v37.__begin_[v13].__r_.__value_.__r.__words[2]) < 0)
              v23 = (std::string *)v23->__r_.__value_.__r.__words[0];
            *((_QWORD *)v49 + v14) = v23;
            v12 = v41;
            v11 = v42;
          }
          else
          {
            *((_QWORD *)v49 + v14) = &byte_207AF6795;
          }
          ++v14;
          v16 += 240;
          ++v13;
          v15 += 13;
        }
        while (0xEEEEEEEEEEEEEEEFLL * ((v11 - v12) >> 4) > v14);
      }
      v24 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
      v25 = (v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v38
          : (std::string *)v38.__r_.__value_.__r.__words[0];
      v26 = ZinComputeMutableProgramAddAneMultiPlaneUncompressedBinding(a1, v44, v24, (const char *)v25, (const char **)v49, 0) != 0;
LABEL_24:
      v8 = a5;
      *(_QWORD *)&v49[0] = &v37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    *(_QWORD *)&v49[0] = &v41;
    std::vector<ZinPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    if (v26)
      return 1;
    v27 = (_QWORD *)v6[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v6[2];
        v29 = *v28 == (_QWORD)v6;
        v6 = v28;
      }
      while (!v29);
    }
    v6 = v28;
    if (v28 == v35)
      return 0;
  }
}

void sub_206F28A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  unint64_t v25;

  STACK[0xDD0] = (unint64_t)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xDD0]);
  if (a25 < 0)
    operator delete(__p);
  STACK[0xDD0] = v25;
  std::vector<ZinPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xDD0]);
  _Unwind_Resume(a1);
}

uint64_t ZinAddAneCompressedBindings(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  const char *v18;
  const char *v19;
  std::string *v20;
  std::string *v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::string::size_type v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  std::vector<std::string>::pointer begin;
  void **v36;
  _QWORD *v37;
  std::string *v38;
  char *v39;
  std::string *v40;
  _BOOL4 v41;
  uint64_t v42;
  void **v43;
  void **v44;
  void **v45;
  const char *v46;
  const char *v47;
  std::string *v48;
  std::string *v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v56;
  unsigned int v57;
  void **v60;
  std::vector<std::string> v61;
  std::string v62;
  std::string v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  int v67;
  int32x2_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[32];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  void *__p[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v7 = a3 + 1;
  v6 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 == a3 + 1)
    return 0;
  v9 = a5;
  v10 = a4;
  v11 = &v66;
  v60 = (void **)(a5 + 8);
  v12 = (void **)(a6 + 8);
  v57 = a4;
  v56 = a3 + 1;
  while (v6[12] - v6[11] != 64)
  {
    v23 = v11;
    bzero(v11, 0xD20uLL);
    v64 = 5;
    v65 = v10;
    v67 = *((_DWORD *)v6 + 20);
    v68 = vmovn_s64(*(int64x2_t *)(v6 + 7));
    v24 = v6[12] - v6[11];
    v69 = v24 >> 6;
    if (v69 >= 0x21)
      return 3;
    memset(&v63, 0, sizeof(v63));
    v25 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v9, (void **)v6 + 4);
    if (v60 == v25)
    {
      v41 = 1;
    }
    else
    {
      std::string::operator=(&v63, (const std::string *)(v25 + 7));
      memset(&v62, 0, sizeof(v62));
      memset(&v61, 0, sizeof(v61));
      std::vector<std::string>::resize((std::vector<std::string> *)&v62, (v24 >> 6));
      std::vector<std::string>::resize(&v61, (v24 >> 6));
      v105 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v100 = 0u;
      v99 = 0u;
      v98 = 0u;
      v97 = 0u;
      v96 = 0u;
      v95 = 0u;
      v94 = 0u;
      v93 = 0u;
      v92 = 0u;
      *(_OWORD *)__p = 0u;
      v90 = 0u;
      v89 = 0u;
      v88 = 0u;
      v87 = 0u;
      v86 = 0u;
      v85 = 0u;
      v84 = 0u;
      v83 = 0u;
      v82 = 0u;
      v81 = 0u;
      v80 = 0u;
      v79 = 0u;
      v78 = 0u;
      v77 = 0u;
      v76 = 0u;
      memset(v75, 0, sizeof(v75));
      if ((v24 >> 6))
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = v62.__r_.__value_.__r.__words[0];
        v30 = &v74;
        while (1)
        {
          v31 = v6[11];
          *(v30 - 4) = 0;
          v32 = *(_QWORD *)(v31 + v26 + 24);
          *(v30 - 3) = v32;
          *(v30 - 1) = v32;
          *v30 = *(_QWORD *)(v31 + v26 + 56);
          v33 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, (void **)(v31 + v26));
          if (v12 == v33)
            break;
          std::string::operator=((std::string *)(v29 + v27 * 24), (const std::string *)(v33 + 7));
          v34 = (void **)(v31 + v26 + 32);
          begin = v61.__begin_;
          v36 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, v34);
          if (v12 == v36)
            break;
          std::string::operator=(&begin[v27], (const std::string *)(v36 + 7));
          v29 = v62.__r_.__value_.__r.__words[0];
          v37 = (_QWORD *)(v62.__r_.__value_.__r.__words[0] + v27 * 24);
          if (*(char *)(v62.__r_.__value_.__r.__words[0] + v27 * 24 + 23) < 0)
            v37 = (_QWORD *)*v37;
          __p[v28 - 2] = v37;
          v38 = &v61.__begin_[v27];
          if (SHIBYTE(v61.__begin_[v27].__r_.__value_.__r.__words[2]) < 0)
            v38 = (std::string *)v38->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v75[8 * v28++] = v38;
          ++v27;
          v26 += 64;
          v30 += 6;
          if (v28 >= v69)
            goto LABEL_32;
        }
        v41 = 1;
      }
      else
      {
LABEL_32:
        v39 = *(char *)(a2 + 23) >= 0 ? (char *)a2 : *(char **)a2;
        v40 = (v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v63
            : (std::string *)v63.__r_.__value_.__r.__words[0];
        v41 = ZinComputeMutableProgramAddAneMultiPlaneCompressedBinding(a1, &v64, v39, (char *)v40, (const char **)&v90, (const char **)v75, 0) != 0;
      }
      v9 = a5;
      v7 = v56;
      v10 = v57;
      v11 = v23;
      *(_QWORD *)&v90 = &v61;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      *(_QWORD *)&v90 = &v62;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (v41)
      return 3;
LABEL_74:
    v51 = (_QWORD *)v6[1];
    if (v51)
    {
      do
      {
        v52 = v51;
        v51 = (_QWORD *)*v51;
      }
      while (v51);
    }
    else
    {
      do
      {
        v52 = (_QWORD *)v6[2];
        v53 = *v52 == (_QWORD)v6;
        v6 = v52;
      }
      while (!v53);
    }
    v6 = v52;
    if (v52 == v7)
      return 0;
  }
  ZinIr4CCInfo::ZinIr4CCInfo(&v90, *((unsigned int *)v6 + 20));
  if (ZinIr4CCInfo::IsMultiSlice((ZinIr4CCInfo *)&v90))
  {
    bzero(v11, 0xD20uLL);
    v13 = v10;
    v64 = 6;
    v65 = v10;
    v67 = *((_DWORD *)v6 + 20);
    v68 = vmovn_s64(*(int64x2_t *)(v6 + 7));
    v69 = v6[9];
    v14 = v6[11];
    v71 = *(_QWORD *)(v14 + 24);
    v73 = v71;
    v74 = *(_QWORD *)(v14 + 56);
    memset(v75, 0, 24);
    memset(&v63, 0, sizeof(v63));
    memset(&v62, 0, sizeof(v62));
    v15 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v9, (void **)v6 + 4);
    if (v60 != v15)
    {
      std::string::operator=((std::string *)v75, (const std::string *)(v15 + 7));
      v16 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, (void **)v14);
      if (v12 != v16)
      {
        std::string::operator=(&v63, (const std::string *)(v16 + 7));
        v17 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, (void **)(v14 + 32));
        if (v12 != v17)
        {
          std::string::operator=(&v62, (const std::string *)(v17 + 7));
          if (*(char *)(a2 + 23) >= 0)
            v18 = (const char *)a2;
          else
            v18 = *(const char **)a2;
          if (v75[23] >= 0)
            v19 = v75;
          else
            v19 = *(const char **)v75;
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v63;
          else
            v20 = (std::string *)v63.__r_.__value_.__r.__words[0];
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v62;
          else
            v21 = (std::string *)v62.__r_.__value_.__r.__words[0];
          v22 = ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(a1, &v64, v18, v19, (const char *)v20, (const char *)v21, 1, 0);
          goto LABEL_55;
        }
      }
    }
LABEL_60:
    v50 = 3;
    goto LABEL_61;
  }
  bzero(v11, 0xD20uLL);
  v13 = v10;
  v64 = 1;
  v65 = v10;
  v67 = *((_DWORD *)v6 + 20);
  v68 = vmovn_s64(*(int64x2_t *)(v6 + 7));
  v42 = v6[11];
  v70 = *(_QWORD *)(v42 + 24);
  v72 = v70;
  v73 = *(_QWORD *)(v42 + 56);
  memset(v75, 0, 24);
  memset(&v63, 0, sizeof(v63));
  memset(&v62, 0, sizeof(v62));
  v43 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v9, (void **)v6 + 4);
  if (v60 == v43)
    goto LABEL_60;
  std::string::operator=((std::string *)v75, (const std::string *)(v43 + 7));
  v44 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, (void **)v42);
  if (v12 == v44)
    goto LABEL_60;
  std::string::operator=(&v63, (const std::string *)(v44 + 7));
  v45 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a6, (void **)(v42 + 32));
  if (v12 == v45)
    goto LABEL_60;
  std::string::operator=(&v62, (const std::string *)(v45 + 7));
  if (*(char *)(a2 + 23) >= 0)
    v46 = (const char *)a2;
  else
    v46 = *(const char **)a2;
  if (v75[23] >= 0)
    v47 = v75;
  else
    v47 = *(const char **)v75;
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v63;
  else
    v48 = (std::string *)v63.__r_.__value_.__r.__words[0];
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v62;
  else
    v49 = (std::string *)v62.__r_.__value_.__r.__words[0];
  v22 = ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(a1, &v64, v46, v47, (const char *)v48, (const char *)v49, 0, 0);
LABEL_55:
  if (v22)
    v50 = 3;
  else
    v50 = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
LABEL_61:
  v10 = v13;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if ((v75[23] & 0x80000000) != 0)
    operator delete(*(void **)v75);
  if (!v50)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_74;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 3;
}

void sub_206F29168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  STACK[0xEB0] = (unint64_t)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xEB0]);
  STACK[0xEB0] = (unint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xEB0]);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinAddAneLiveInParamBindings(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v9;
  int Typeno;
  uint64_t v11;
  void **v12;
  const char *v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  std::string __p;
  uint64_t v20;
  _DWORD v21[840];

  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 == a3 + 1)
    return 0;
  v9 = (void **)(a4 + 8);
  while (1)
  {
    bzero(v21, 0xD20uLL);
    v20 = 0x100000007;
    Typeno = ZinTensorFormatGetTypeno(*((_DWORD *)v5 + 14));
    v11 = v5[11];
    v21[3] = Typeno;
    v21[4] = v11;
    memset(&__p, 0, sizeof(__p));
    v12 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a4, (void **)v5 + 4);
    if (v9 == v12)
      break;
    std::string::operator=(&__p, (const std::string *)(v12 + 7));
    v13 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    if (ZinComputeMutableProgramAddAneLiveInParamBinding(a1, &v20, v13, (const char *)v14, 0))
      break;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = (_QWORD *)v5[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v5[2];
        v17 = *v16 == (_QWORD)v5;
        v5 = v16;
      }
      while (!v17);
    }
    v5 = v16;
    if (v16 == v4)
      return 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_206F2936C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ZinPlaneDescriptor>::__init_with_size[abi:ne180100]<ZinPlaneDescriptor*,ZinPlaneDescriptor*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ZinPlaneDescriptor>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*,ZinPlaneDescriptor*,ZinPlaneDescriptor*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206F293EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<ZinPlaneDescriptor>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ZinPlaneDescriptor>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x111111111111112)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPlaneDescriptor>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[240 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*,ZinPlaneDescriptor*,ZinPlaneDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::construct_at[abi:ne180100]<ZinPlaneDescriptor,ZinPlaneDescriptor&,ZinPlaneDescriptor*>(v4, v6);
      v6 += 240;
      v4 = v11 + 240;
      v11 += 240;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206F294E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ZinPlaneDescriptor,ZinPlaneDescriptor&,ZinPlaneDescriptor*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 160);
  v12 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  v13 = (std::string *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 208);
    v13->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 224);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ZinPlaneDescriptor>,ZinPlaneDescriptor*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 240;
  }
}

uint64_t *std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_206F29640(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__construct_node<std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::__construct_node<std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_206F297C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinPattern::MapEntry>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void ZinObjectGeneration::AddBaseTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "symbol can't be added to macho: %s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinObjectGeneration::AddTensorDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not add debug information for symbol %s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinObjectGenerationLegacy::CreateFVMLIB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Live symbols should have same base and begin offset.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinObjectGeneration::BuildComputeProgram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed building program: at symbol: %s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in call to ZinComputeMutableProgramAddSectionSymbol\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinObjectGenerationLegacy::BuildComputeProgram(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AddLiveIOFVMLIB failed.", buf, 2u);
}

void ZinObjectGenerationRT::BuildComputeProgram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to add __runtime section", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to add __RUNTIME segment", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinObjectGenerationLegacy::Generate(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Failed to write operation (%d) to compute program.\n", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void ZinObjectGenHandleProgramToFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Fail to call ZinComputeMutableProgramToFile(.)\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinObjectGenWriteSymbolData(uint64_t a1)
{
  int v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = 134218240;
  v2 = a1;
  v3 = 2048;
  v4 = 1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ZinObjectGenWriteSymbolData: wrote %zd items, expected %zd items", (uint8_t *)&v1, 0x16u);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinMirSetKernelSize(ZinIrControlFlowGraph *a1, unsigned int a2, ZinIrNetworkStatus *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  ZinIrNetworkStatus *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8[0] = &off_24BFFF0E8;
  v8[1] = a2;
  v8[2] = &v7;
  v9 = v8;
  v3 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v8, 1);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_206F29C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirGetCompressedKernelOcgSize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5)
{
  unsigned int v10;

  v10 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 88) + 32))(**(_QWORD **)(a1 + 88), 0, 0)+ 88);
  return ZinMirGetCompressedKernelOcgSize((_QWORD *)a1, a2, a3, v10, a4, a5);
}

uint64_t ZinMirGetCompressedKernelOcgSize(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unint64_t *a6)
{
  ZinIrTarget *v11;
  uint64_t Hal;
  uint64_t v13;
  ZinIrKernel *v14;
  ZinIrKernel *v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  int v18;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v20;
  unint64_t OCGSize;
  _BOOL4 MustEnableFillLowerNEFirst;
  ZinMirConvUtils *v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  ZinIrKernel *v30;
  BOOL v31;
  uint64_t v32;
  int v35;
  _QWORD v36[2];
  uint64_t v37;
  ZinIrKernel *v38;

  v11 = *(ZinIrTarget **)(a1[2] + 160);
  Hal = ZinIrTarget::GetHal(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  (*(void (**)(ZinIrKernel **__return_ptr, _QWORD *, _QWORD))(*a1 + 568))(&v38, a1, 0);
  v14 = v38;
  v35 = *((_DWORD *)v38 + 44);
  ZinIrKernel::SetSmallSourceMode((uint64_t)v38, a5);
  v15 = v38;
  v16 = (_QWORD *)operator new();
  *v16 = &off_24C052EE8;
  v16[1] = v15;
  v16[2] = v11;
  v16[3] = 0;
  v17 = (unsigned __int8 *)a1[33];
  if (v17)
  {
    v18 = v17[2];
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v17);
    v20 = a3;
    OCGSize = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
    MustEnableFillLowerNEFirst = v18 != 0;
    v23 = (ZinMirConvUtils *)*((_QWORD *)v14 + 52);
  }
  else
  {
    MustEnableFillLowerNEFirst = ZinMirConvUtils::MustEnableFillLowerNEFirst(*((ZinMirConvUtils **)v14 + 52));
    v20 = a3;
    v23 = (ZinMirConvUtils *)*((_QWORD *)v14 + 52);
    OCGSize = (unint64_t)v23;
  }
  v24 = (int *)((char *)v14 + 340);
  v25 = ZinCalculateMaxCompressionOverhead(v13, v20, (ZinIrCodegenKernelUtil *)*(int *)(a2 + 4), v35, a5, *((_BYTE *)v38 + 173), v24, a4, v23);
  v26 = ZinIrCodegenKernelUtil::ZinCalculateMaxScaleBiasZeroPointDuplicationAndRoundUpSize((ZinIrCodegenKernelUtil *)*(int *)(a2 + 4), v24, v13, a5, a4, OCGSize, MustEnableFillLowerNEFirst);
  LOBYTE(v37) = 0;
  HIDWORD(v37) = 0;
  ZinIrKernel::CompressionInfo::Enable((uint64_t)&v37, a4);
  v27 = *((_DWORD *)v38 + 102);
  v36[0] = 0;
  v36[1] = v25 + v20 + v26;
  v28 = details::ZinIrKernelView::serialize_ocg((uint64_t)v16, v36, a2, &v37, v27, OCGSize, MustEnableFillLowerNEFirst, a6);
  v29 = *a6;
  v30 = v38;
  v38 = 0;
  if (v30)
  {
    ZinIrKernel::~ZinIrKernel(v30);
    MEMORY[0x20BD002F8]();
  }
  if (v29)
    v31 = v28 == 0;
  else
    v31 = 0;
  if (v31)
    v32 = 0;
  else
    v32 = 3;
  (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  return v32;
}

void sub_206F29F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24BFFF0E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24BFFF0E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  ZinNELayer *v4;
  uint64_t result;

  v4 = *a3;
  result = ZinIrOpLayer::IsNELayer(*a3);
  if ((_DWORD)result)
    return ZinNELayer::LowerKernel(v4, *(_BYTE *)(a1 + 8), **(ZinIrNetworkStatus ***)(a1 + 16));
  return result;
}

uint64_t std::__function::__func<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetKernelSize(ZinIrControlFlowGraph *,BOOL,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

ZinMirGraphSplitterBase *ZinMirSpatialSplitter::ZinMirSpatialSplitter(ZinMirGraphSplitterBase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  std::ios_base *v23;
  uint64_t v24;
  std::string::size_type size;
  std::string *v26;
  std::string *v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  void *__p[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  void *v47[2];
  std::string::size_type v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  char v53;
  uint64_t v54;
  int v55;

  v54 = a6;
  v55 = a7;
  v14 = ZinMirGraphSplitterBase::ZinMirGraphSplitterBase((uint64_t)a1, a2, a3, &v54, a8);
  *(_QWORD *)v14 = &off_24C020D40;
  *(_BYTE *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0x3F947AE147AE147BLL;
  *(_QWORD *)(v14 + 72) = 3;
  *(_OWORD *)(v14 + 80) = xmmword_207AAA8C0;
  *(_QWORD *)(v14 + 96) = 0x3FD999999999999ALL;
  *(_QWORD *)(v14 + 104) = 0;
  *(_BYTE *)(v14 + 128) = 0;
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 120) = a4;
  *(_BYTE *)(v14 + 168) = 0;
  *(_QWORD *)(v14 + 176) = a5;
  v15 = *a9;
  *a9 = 0;
  *(_QWORD *)(v14 + 184) = v15;
  v16 = *a10;
  *a10 = 0;
  v17 = MEMORY[0x24BEDB840];
  *(_QWORD *)(v14 + 192) = v16;
  *(_QWORD *)(v14 + 616) = v17 + 64;
  v18 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v19 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)(v14 + 200) = v18;
  v20 = (_QWORD *)(v14 + 200);
  v21 = (_QWORD *)(v14 + 616);
  v22 = v14 + 208;
  *(_QWORD *)(v14 + 200 + *(_QWORD *)(v18 - 24)) = v19;
  v23 = (std::ios_base *)(v14 + 200 + *(_QWORD *)(*(_QWORD *)(v14 + 200) - 24));
  std::ios_base::init(v23, (void *)(v14 + 208));
  v23[1].__vftable = 0;
  v23[1].__fmtflags_ = -1;
  *v20 = v17 + 24;
  *v21 = v17 + 64;
  MEMORY[0x20BCFFEA8](v22);
  if (ZinMirGraphSplitterBase::SetNextTileId(a1))
    ZinAssertImpl("Spatial Split Internal Error");
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v51, *(const ZinIrCompilerParameters **)(a3 + 8));
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  else
    v50 = v52;
  v24 = *((_QWORD *)a1 + 2);
  if (*(char *)(v24 + 39) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v24 + 16), *(_QWORD *)(v24 + 24));
  else
    v49 = *(std::string *)(v24 + 16);
  if ((v53 & 4) != 0)
  {
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    else
      size = v50.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v43, size + 10);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v43;
    else
      v26 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v50;
      else
        v27 = (std::string *)v50.__r_.__value_.__r.__words[0];
      memmove(v26, v27, size);
    }
    strcpy((char *)v26 + size, ".SS_debug.");
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_207AF6795);
    if ((v42 & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((v42 & 0x80u) == 0)
      v29 = v42;
    else
      v29 = (std::string::size_type)__p[1];
    v30 = std::string::append(&v43, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v44, ".", 1uLL);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v49;
    else
      v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      v35 = v49.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v45, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v46, ".txt", 4uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v48 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)v47 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if ((char)v42 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    std::ofstream::open();
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v51);
  return a1;
}

{
  return ZinMirSpatialSplitter::ZinMirSpatialSplitter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_206F2A45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;
  ZinMirSpatialSplitLatencyCostModel ***v44;
  _QWORD *v45;
  uint64_t v47;

  if (a42 < 0)
    operator delete(__p);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&a43);
  std::ofstream::~ofstream(v45);
  v47 = *(_QWORD *)(v43 + 192);
  *(_QWORD *)(v43 + 192) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  std::unique_ptr<BatchOrChannelSplitPressureBasedSubgraphIdentification>::reset[abi:ne180100](v44, 0);
  if (*(_BYTE *)(v43 + 168))
    std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table(a10);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v43);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::~ZinMirSpatialSplitter(ZinMirSpatialSplitter *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C020D40;
  ZinIrControlFlowGraph::UnsetScheduleMap(*((ZinIrControlFlowGraph **)this + 1));
  v2 = (_QWORD *)((char *)this + 200);
  if (*((_QWORD *)this + 41) && !std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
  v3 = MEMORY[0x24BEDB7E8];
  v4 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 25) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  MEMORY[0x20BCFFEB4]((char *)this + 208);
  std::ostream::~ostream();
  MEMORY[0x20BD0022C]((char *)this + 616);
  v5 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<BatchOrChannelSplitPressureBasedSubgraphIdentification>::reset[abi:ne180100]((ZinMirSpatialSplitLatencyCostModel ***)this + 23, 0);
  if (*((_BYTE *)this + 168))
    std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)this + 128);
  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  ZinMirSpatialSplitter::~ZinMirSpatialSplitter(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t SpatialDimensionToZinIrDimension(int a1)
{
  if (a1)
    return 4;
  else
    return 3;
}

uint64_t ZinIrDimensionToSpatialDimension(int a1, int *a2)
{
  int v2;
  uint64_t result;

  if (a1 == 4)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (a1 == 3)
  {
    v2 = 0;
LABEL_5:
    result = 0;
    *a2 = v2;
    return result;
  }
  return 3;
}

void SplitInfo::GetSplitDimensions(SplitInfo *this@<X0>, char **a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((_QWORD *)this + 13) >= 2uLL)
  {
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), 1uLL);
    v6 = *a2;
    v7 = a2[1];
    v9 = &v5[4 * v8];
    *(_DWORD *)v5 = 3;
    v4 = v5 + 4;
    while (v7 != v6)
    {
      v10 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v5 - 1) = v10;
      v5 -= 4;
    }
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v9;
    if (v6)
      operator delete(v6);
    a2[1] = v4;
  }
  if (*((_QWORD *)this + 14) >= 2uLL)
  {
    v11 = (unint64_t)a2[2];
    if ((unint64_t)v4 >= v11)
    {
      v13 = *a2;
      v14 = (v4 - *a2) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v16 = v11 - (_QWORD)v13;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), v17);
        v13 = *a2;
        v4 = a2[1];
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[4 * v14];
      v20 = &v18[4 * v17];
      *(_DWORD *)v19 = 4;
      v12 = v19 + 4;
      while (v4 != v13)
      {
        v21 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v19 - 1) = v21;
        v19 -= 4;
      }
      *a2 = v19;
      a2[1] = v12;
      a2[2] = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v4 = 4;
      v12 = v4 + 4;
    }
    a2[1] = v12;
    v4 = v12;
  }
  if (*((_QWORD *)this + 15) >= 2uLL)
  {
    v22 = (unint64_t)a2[2];
    if ((unint64_t)v4 >= v22)
    {
      v24 = *a2;
      v25 = (v4 - *a2) >> 2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)v24;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), v28);
        v24 = *a2;
        v4 = a2[1];
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v25];
      v31 = &v29[4 * v28];
      *(_DWORD *)v30 = 0;
      v23 = v30 + 4;
      while (v4 != v24)
      {
        v32 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      *a2 = v30;
      a2[1] = v23;
      a2[2] = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v4 = 0;
      v23 = v4 + 4;
    }
    a2[1] = v23;
  }
}

void sub_206F2A90C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *SplitInfo::GetTileCount(_QWORD *result, int a2)
{
  _QWORD *v2;

  switch(a2)
  {
    case 0:
      v2 = result + 15;
      goto LABEL_5;
    case 1:
    case 2:
    case 5:
      ZinAssertImpl("Spatial Splitting Error");
    case 3:
      v2 = result + 13;
      goto LABEL_5;
    case 4:
      v2 = result + 14;
LABEL_5:
      result = (_QWORD *)*v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *LatencyInfo::SetLatency(uint64_t *result, ZinIrOpLayer *a2, int a3, double a4)
{
  ZinIrOpLayer *v5;
  ZinIrOpLayer **v6;

  v5 = a2;
  if ((*((_QWORD *)a2 + 6) & 0x8000000000000000) != 0)
    ZinAssertImpl("Invalid call on unscheduled layer");
  switch(a3)
  {
    case 0:
      goto LABEL_7;
    case 1:
      result += 3;
      goto LABEL_7;
    case 2:
      result += 6;
      goto LABEL_7;
    case 3:
      result += 9;
      goto LABEL_7;
    case 4:
      result += 12;
LABEL_7:
      v6 = &v5;
      result = std::__tree<std::__value_type<ZinIrOpLayer const*,double>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,double>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,double>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t **)result, &v5, (uint64_t)&std::piecewise_construct, (uint64_t **)&v6);
      *((double *)result + 5) = a4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(uint64_t a1, ZinIrOpLayer **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__find_equal<ZinIrOpLayer *>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 40;
}

uint64_t ZinMirSpatialSplitter::TensorDimsToString@<X0>(const ZinTensorDimensions *a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  v3 = a1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"(", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"x", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"x", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"x", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  if (v3)
    v9 = "f";
  else
    v9 = &byte_207AF6795;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15, a2);
  v13[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v14 = v11;
  v15[0] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v17);
}

void sub_206F2ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 Padding::From@<Q0>(Padding *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  switch(*(_DWORD *)(*((_QWORD *)this + 8) + 8))
  {
    case 'S':
    case 'Y':
      v3 = *(_QWORD *)(*((_QWORD *)this + 54) + 64);
      v5 = *(_QWORD *)(v3 + 64);
      v4 = *(_QWORD *)(v3 + 72);
      goto LABEL_6;
    case 'U':
      v7 = *((_QWORD *)this + 54);
      if (!v7)
        goto LABEL_3;
      v8 = *(_QWORD *)(v7 + 136);
      v5 = *(_QWORD *)(v8 + 352);
      v4 = *(_QWORD *)(v8 + 360);
LABEL_6:
      v9.n128_u64[0] = (int)v4;
      v9.n128_u64[1] = SHIDWORD(v4);
      result = v9;
      v9.n128_u64[0] = (int)v5;
      v9.n128_u64[1] = SHIDWORD(v5);
      *a2 = result;
      a2[1] = v9;
      break;
    default:
LABEL_3:
      result.n128_u64[0] = 0;
      *a2 = 0u;
      a2[1] = 0u;
      break;
  }
  return result;
}

uint64_t Padding::ToString@<X0>(Padding *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  if (*(_QWORD *)this == *((_QWORD *)this + 1)
    && ((v4 = *((_QWORD *)this + 2), *(_QWORD *)this == v4) ? (v5 = v4 == *((_QWORD *)this + 3)) : (v5 = 0), v5))
  {
    std::ostream::operator<<();
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"{", 1);
    if (*(_QWORD *)this)
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)&byte_207AF6795, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"t=", 2);
      std::ostream::operator<<();
      v7 = ",";
    }
    else
    {
      v7 = &byte_207AF6795;
    }
    if (*((_QWORD *)this + 1))
    {
      v8 = strlen(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"b=", 2);
      std::ostream::operator<<();
      v7 = ",";
    }
    if (*((_QWORD *)this + 2))
    {
      v10 = strlen(v7);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"l=", 2);
      std::ostream::operator<<();
      v7 = ",";
    }
    if (*((_QWORD *)this + 3))
    {
      v12 = strlen(v7);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"r=", 2);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"}", 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18, a2);
  v16[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17 = v14;
  v18[0] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v20);
}

void sub_206F2AE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ProducerConsumerChain::Extract(ProducerConsumerChain *this, unint64_t a2, unint64_t a3, ProducerConsumerChain *a4)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v8;
  void **v10;
  char *v11;
  uint64_t v12;

  result = 3;
  if (a3 >= 2)
  {
    v6 = a3;
    v8 = a3 + a2;
    if (a3 + a2 <= (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3)
    {
      v10 = (void **)((char *)a4 + 8);
      *((_QWORD *)a4 + 2) = *((_QWORD *)a4 + 1);
      std::vector<ZinIrOpLayer *>::reserve((void **)a4 + 1, a3);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<ZinIrOpLayer * const*>,std::__wrap_iter<ZinIrOpLayer * const*>,std::back_insert_iterator<std::vector<ZinIrOpLayer *>>,0>((_QWORD *)(*((_QWORD *)this + 1) + 8 * a2), (_QWORD *)(*((_QWORD *)this + 1) + 8 * a2 + 8 * v6), v10);
      if (v8 > a2)
      {
        v11 = (char *)a4 + 32;
        v12 = 8 * a2;
        do
        {
          std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v11, (_QWORD *)(*((_QWORD *)this + 1) + v12), (_QWORD *)(*((_QWORD *)this + 1) + v12));
          v12 += 8;
          --v6;
        }
        while (v6);
      }
      return 0;
    }
  }
  return result;
}

uint64_t ProducerConsumerChain::ExtractAllSubChains(ProducerConsumerChain *this, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;
  __int128 __p;
  _BYTE v19[32];
  uint64_t v20;
  int v21;

  v3 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
  if (v3 != 1)
  {
    v6 = 0;
    v7 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
    do
    {
      v16 = v6 + 1;
      if (v6 + 1 < v3)
      {
        v8 = 1;
        while (1)
        {
          if (++v8 >= v3)
          {
            v12 = v2;
          }
          else
          {
            v9 = *(_DWORD *)this;
            __p = 0u;
            memset(v19, 0, sizeof(v19));
            v20 = 0;
            v17 = v9;
            v21 = 1065353216;
            v10 = ProducerConsumerChain::Extract(this, v6, v8, (ProducerConsumerChain *)&v17);
            v11 = v10;
            v12 = v10;
            if (!(_DWORD)v10)
            {
              v13 = a2[1];
              if (v13 >= a2[2])
              {
                v14 = std::vector<ProducerConsumerChain>::__push_back_slow_path<ProducerConsumerChain const&>(a2, (uint64_t)&v17);
              }
              else
              {
                std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain const&,ProducerConsumerChain*>(a2[1], (uint64_t)&v17);
                v14 = v13 + 72;
                a2[1] = v13 + 72;
              }
              a2[1] = v14;
              v12 = v2;
            }
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v19[8]);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v11)
              return v12;
          }
          v2 = v12;
          if (v7 == v8)
            goto LABEL_18;
        }
      }
      v12 = v2;
LABEL_18:
      --v7;
      v2 = v12;
      ++v6;
    }
    while (v16 != v3 - 1);
  }
  return 0;
}

void sub_206F2B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v4 + 8) = v5;
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)va);
  _Unwind_Resume(a1);
}

void ProducerConsumerChain::~ProducerConsumerChain(ProducerConsumerChain *this)
{
  void *v2;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 32);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t ProducerConsumerChain::GetLayerDesc@<X0>(ProducerConsumerChain *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  void *__p;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  _QWORD v64[10];
  char v65;
  uint64_t v66;

  v4 = *((_QWORD *)this + 1);
  if (a2 >= (*((_QWORD *)this + 2) - v4) >> 3)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(v4 + 8 * a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v62);
  v6 = "?";
  v7 = 1;
  switch(*(_DWORD *)(*(_QWORD *)(v5 + 64) + 8))
  {
    case 'S':
      v8 = *(int **)(*(_QWORD *)(v5 + 432) + 64);
      v9 = v8[18];
      v10 = v8[19];
      v58 = v9;
      v59 = v10;
      v11 = v8[16];
      v12 = v8[17];
      v60 = v11;
      v61 = v12;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"P(k=", 4);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"x", 1);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",s=", 3);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"x", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",e=", 3);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",f=", 3);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",p=", 3);
      std::ostream::operator<<();
      if (v10 + v9 > 0 || v12 + v11 >= 1)
      {
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)",p=", 3);
        Padding::ToString((Padding *)&v58, &__p);
        v21 = (v57 & 0x80u) == 0 ? &__p : (void **)__p;
        v22 = (v57 & 0x80u) == 0 ? v57 : v56;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        if ((char)v57 < 0)
          operator delete(__p);
      }
      goto LABEL_45;
    case 'U':
      v23 = *(_QWORD *)(v5 + 432);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 136);
        v25 = *(int *)(v24 + 360);
        v26 = *(int *)(v24 + 364);
        v58 = v25;
        v59 = v26;
        v27 = *(int *)(v24 + 352);
        v28 = *(int *)(v24 + 356);
        v60 = v27;
        v61 = v28;
        if ((*(_BYTE *)(v24 + 448) & 0x40) != 0)
          v29 = "D";
        else
          v29 = "C";
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v29, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(k=", 3);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"x", 1);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)",s=", 3);
        v33 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"x", 1);
        std::ostream::operator<<();
        if (v26 + v25 > 0 || v28 + v27 >= 1)
        {
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)",p=", 3);
          Padding::ToString((Padding *)&v58, &__p);
          v36 = (v57 & 0x80u) == 0 ? &__p : (void **)__p;
          v37 = (v57 & 0x80u) == 0 ? v57 : v56;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
          if ((char)v57 < 0)
            operator delete(__p);
        }
LABEL_45:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)")", 1);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"S", 1);
      }
      goto LABEL_50;
    case 'Y':
      v38 = *(int **)(*(_QWORD *)(v5 + 432) + 64);
      v39 = v38[18];
      v40 = v38[19];
      v58 = v39;
      v59 = v40;
      v41 = v38[16];
      v42 = v38[17];
      v60 = v41;
      v61 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"P(k=", 4);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"x", 1);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)",s=", 3);
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"x", 1);
      v46 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)",e=", 3);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)",f=", 3);
      v48 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)",p=", 3);
      std::ostream::operator<<();
      if (v40 + v39 > 0 || v42 + v41 >= 1)
      {
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)",p=", 3);
        Padding::ToString((Padding *)&v58, &__p);
        v51 = (v57 & 0x80u) == 0 ? &__p : (void **)__p;
        v52 = (v57 & 0x80u) == 0 ? v57 : v56;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
        if ((char)v57 < 0)
          operator delete(__p);
      }
      goto LABEL_45;
    case 'Z':
      v6 = "EW";
      goto LABEL_48;
    case '\\':
      v6 = "BP";
LABEL_48:
      v7 = 2;
      goto LABEL_49;
    default:
LABEL_49:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v6, v7);
LABEL_50:
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v64, a3);
      v62[0] = *MEMORY[0x24BEDB7F0];
      v53 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v62 + *(_QWORD *)(v62[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v63 = v53;
      v64[0] = MEMORY[0x24BEDB848] + 16;
      if (v65 < 0)
        operator delete((void *)v64[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return MEMORY[0x20BD0022C](&v66);
  }
}

void sub_206F2B614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t ProducerConsumerChain::ToString@<X0>(ProducerConsumerChain *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  void *p_p;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BOOL8 v30;
  void **v31;
  uint64_t v32;
  const std::locale::facet *v34;
  uint64_t v35;
  void *v37[2];
  unsigned __int8 v38;
  void *__p;
  uint64_t v40;
  unsigned __int8 v41;
  _QWORD v42[2];
  uint64_t v43;
  _QWORD v44[10];
  char v45;
  uint64_t v46;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v42);
  v4 = (char *)this + 8;
  v5 = **(_QWORD **)(**((_QWORD **)this + 1) + 88);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
  v9 = *(_QWORD *)(v6 + 24);
  v7 = v6 + 24;
  v8 = v9;
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = v7;
  else
    v11 = v8;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_QWORD *)(v7 + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(l=", 3);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"): ", 3);
  v16 = **(_QWORD **)(**(_QWORD **)v4 + 88);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
  v17 = **(_QWORD **)(**(_QWORD **)v4 + 88);
  v18 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0) + 88) == 3;
  ZinMirSpatialSplitter::TensorDimsToString((const ZinTensorDimensions *)v18, &__p);
  if ((v41 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v41 & 0x80u) == 0)
    v20 = v41;
  else
    v20 = v40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v20);
  if ((char)v41 < 0)
    operator delete(__p);
  v21 = 0;
  do
  {
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"-> ", 3);
    ProducerConsumerChain::GetLayerDesc(this, v21, &__p);
    if ((v41 & 0x80u) == 0)
      v23 = &__p;
    else
      v23 = __p;
    if ((v41 & 0x80u) == 0)
      v24 = v41;
    else
      v24 = v40;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-> ", 3);
    v27 = *((_QWORD *)this + 1);
    if (v21 >= (*((_QWORD *)this + 2) - v27) >> 3
      || (v28 = v26,
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v27 + 8 * v21) + 32))(*(_QWORD *)(v27 + 8 * v21), 0, 0), v29 = *((_QWORD *)this + 1), v21 >= (*((_QWORD *)this + 2) - v29) >> 3))
    {
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    }
    v30 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v29 + 8 * v21) + 32))(*(_QWORD *)(v29 + 8 * v21), 0, 0)+ 88) == 3;
    ZinMirSpatialSplitter::TensorDimsToString((const ZinTensorDimensions *)v30, v37);
    if ((v38 & 0x80u) == 0)
      v31 = v37;
    else
      v31 = (void **)v37[0];
    if ((v38 & 0x80u) == 0)
      v32 = v38;
    else
      v32 = (uint64_t)v37[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v31, v32);
    if ((char)v38 < 0)
      operator delete(v37[0]);
    if ((char)v41 < 0)
      operator delete(__p);
  }
  while (v21++ < ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) - 1);
  std::ios_base::getloc((const std::ios_base *)((char *)&v44[-1] + *(_QWORD *)(v43 - 24)));
  v34 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v44, a2);
  v42[0] = *MEMORY[0x24BEDB7F0];
  v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v42 + *(_QWORD *)(v42[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v43 = v35;
  v44[0] = MEMORY[0x24BEDB848] + 16;
  if (v45 < 0)
    operator delete((void *)v44[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v46);
}

void sub_206F2B9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void ProducerConsumerChain::IsLayerAdmissible(ProducerConsumerChain *this@<X0>, const ZinIrOpLayer *a2@<X1>, const ZinIrHalParameters *a3@<X2>, _QWORD *a4@<X8>)
{
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  IsLayerSplittable<ProducerConsumerChain>(a2, (uint64_t)a3, *((_BYTE *)this + 1), 0, *(unsigned __int8 *)this, 0, (uint64_t)__p, (uint64_t)this, a4, 0);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_206F2BAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IsLayerSplittable<ProducerConsumerChain>(ZinIrOpLayer *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, SplitPatternHandlerMgr *a10)
{
  unint64_t v18;
  char v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t v40;
  unint64_t PreOpsPreScaleIndex;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  uint64_t *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *__p;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  uint8_t buf[8];
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v18 = (uint64_t)(*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11)) >> 3;
  LOBYTE(v64) = 0;
  std::vector<BOOL>::vector(&v59, v18, (unsigned __int8 *)&v64);
  if (*(_QWORD *)a7)
  {
    operator delete(*(void **)a7);
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  *(_QWORD *)a7 = v59;
  *(_OWORD *)(a7 + 8) = v60;
  v64 = 0x100000000;
  std::set<SpatialDimension>::set[abi:ne180100]((uint64_t)&v59, (unsigned int *)&v64, 2);
  v65 = 0;
  v66 = 0;
  v64 = (uint64_t)&v65;
  if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 64) == 1)
  {
    LODWORD(__p) = 0;
    std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)&__p);
  }
  if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 72) == 1)
  {
    LODWORD(__p) = 1;
    std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)&__p);
  }
  if ((a4 & 1) != 0 || (__p = 0, v57 = 0, v58 = 0, (ZinIrOpLayer::IsNoOp(a1, (uint64_t *)&__p) & 1) == 0))
  {
    v20 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 112))(a1);
    v19 = v20;
    if ((a4 & 1) != 0)
    {
      if (v20)
        goto LABEL_16;
      goto LABEL_19;
    }
  }
  else
  {
    v19 = 1;
  }
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
  if ((v19 & 1) != 0)
    goto LABEL_16;
LABEL_19:
  if (!ZinIrOpLayer::IsANELayer(a1))
    goto LABEL_41;
  if (a10 && SplitPatternHandlerMgr::IsLayerCreated(a10, a1))
  {
    SplitPatternHandlerMgr::GetSupportedSplitDimension((uint64_t)a10, (uint64_t)a1, (uint64_t)&v59);
    v24 = v60;
    *a9 = v59;
    a9[1] = v24;
    v22 = a9 + 1;
    v25 = *((_QWORD *)&v60 + 1);
    a9[2] = *((_QWORD *)&v60 + 1);
    if (v25)
    {
      *(_QWORD *)(v24 + 16) = v22;
      v59 = (uint64_t *)&v60;
      v60 = 0uLL;
      goto LABEL_111;
    }
LABEL_110:
    *a9 = v22;
    goto LABEL_111;
  }
  if (!*((_QWORD *)a1 + 25) || *((_QWORD *)a1 + 24) > 1uLL)
  {
    if (ZinIrOpLayer::IsNELayer(a1))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1))
      {
        *(_DWORD *)buf = 1;
        std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)buf);
      }
      v26 = *((_QWORD *)a1 + 46);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 64);
        if (ZinIrBroadcastInfo::HasDimension(v27, 3)
          || ZinIrBroadcastInfo::HasDimension(v27, 4)
          || ZinIrBroadcastInfo::HasDimension(v27, 1))
        {
          if ((a6 & 1) == 0)
            goto LABEL_16;
          **(_QWORD **)a7 |= 1uLL;
        }
      }
    }
    else
    {
      if (!ZinIrOpLayer::IsPELayer(a1))
        ZinAssertImpl("Only NE and PE engine layers are supported for Splitting\n");
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1))
      {
        *(_DWORD *)buf = 1;
        std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)buf);
      }
      if (((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 640))(a1) & 1) != 0
        || (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 648))(a1)
        || !CheckBroadcastSupport<ProducerConsumerChain>(a1, a8))
      {
        goto LABEL_16;
      }
    }
LABEL_41:
    v28 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 8);
    switch(v28)
    {
      case 'Q':
        v22 = a9 + 1;
        if (*((_QWORD *)a1 + 63))
        {
          v21 = v65;
          *a9 = v64;
          a9[1] = v21;
          goto LABEL_17;
        }
        v29 = v60;
        *a9 = v59;
        a9[1] = v29;
        goto LABEL_43;
      case 'R':
      case 'V':
      case 'W':
      case 'X':
      case '[':
LABEL_64:
        if (a5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v28;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "unsupported: %d", buf, 8u);
        }
        goto LABEL_16;
      case 'S':
        v40 = *(_QWORD *)(*((_QWORD *)a1 + 54) + 64);
        if (*(uint64_t *)(v40 + 32) >= 2)
          goto LABEL_16;
        if (*(uint64_t *)(v40 + 16) >= 2 && !*(_BYTE *)(a2 + 1327))
        {
          *(_DWORD *)buf = 1;
          std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)buf);
        }
        if (ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1) == -1)
          goto LABEL_42;
        if ((a6 & 1) != 0)
        {
          PreOpsPreScaleIndex = ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1);
          *(_QWORD *)(*(_QWORD *)a7 + ((PreOpsPreScaleIndex >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << PreOpsPreScaleIndex;
          goto LABEL_42;
        }
        v54 = ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1);
        if (DetectIncomingConstIn(a1, v54))
          goto LABEL_42;
        goto LABEL_16;
      case 'T':
      case 'Z':
      case '\\':
        goto LABEL_42;
      case 'U':
        v43 = (_QWORD *)*((_QWORD *)a1 + 54);
        if (!v43)
          goto LABEL_42;
        v44 = v43[17];
        if ((*(_BYTE *)(v44 + 448) & 0x40) != 0 && (a3 & 1) == 0)
          goto LABEL_16;
        if (*(uint64_t *)(v44 + 264) >= 2 && !*(_BYTE *)(a2 + 1327))
        {
          *(_DWORD *)buf = 1;
          std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)buf);
          v43 = (_QWORD *)*((_QWORD *)a1 + 54);
        }
        if (!(*(unsigned int (**)(_QWORD *))(*v43 + 120))(v43))
          goto LABEL_42;
        (*(void (**)(uint8_t *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a1 + 128))(buf, a1);
        v45 = *(_QWORD *)buf;
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (a6)
        {
          if (*((_QWORD *)a1 + 12) != *((_QWORD *)a1 + 11))
          {
            v46 = 0;
            do
            {
              if (v45 == ZinIrOpLayer::GetInputTensor(a1, v46))
                *(_QWORD *)(*(_QWORD *)a7 + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v46;
              ++v46;
            }
            while (v46 < (uint64_t)(*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11)) >> 3);
          }
        }
        else
        {
          *(_QWORD *)buf = *(_QWORD *)(v45 + 96);
          if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a8 + 32), buf))
          {
            goto LABEL_16;
          }
        }
LABEL_42:
        v29 = v60;
        *a9 = v59;
        a9[1] = v29;
        v22 = a9 + 1;
LABEL_43:
        v30 = *((_QWORD *)&v60 + 1);
        a9[2] = *((_QWORD *)&v60 + 1);
        if (v30)
        {
          *(_QWORD *)(v29 + 16) = v22;
          v59 = (uint64_t *)&v60;
          v60 = 0uLL;
          goto LABEL_111;
        }
        break;
      case 'Y':
        v42 = *(_QWORD *)(*((_QWORD *)a1 + 54) + 64);
        if (*(uint64_t *)(v42 + 32) >= 2)
          goto LABEL_16;
        if (*(uint64_t *)(v42 + 16) >= 2 && !*(_BYTE *)(a2 + 1327))
        {
          *(_DWORD *)buf = 1;
          std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v59, (unsigned int *)buf);
        }
        goto LABEL_42;
      default:
        switch(v28)
        {
          case '!':
          case '%':
            goto LABEL_16;
          case '"':
            goto LABEL_64;
          case '#':
            ZinMirSpatialSplitUtils::SpatialDimensionsInWhichReshapeCannotBeSplit(a1, (uint64_t **)buf);
            v31 = a9 + 1;
            if (v63)
            {
              v32 = v65;
              *a9 = v64;
              a9[1] = v32;
              v33 = v66;
              a9[2] = v66;
              if (v33)
              {
                v32[2] = v31;
                v64 = (uint64_t)&v65;
                v65 = 0;
                v66 = 0;
                goto LABEL_116;
              }
            }
            else
            {
              v52 = v60;
              *a9 = v59;
              a9[1] = v52;
              v53 = *((_QWORD *)&v60 + 1);
              a9[2] = *((_QWORD *)&v60 + 1);
              if (v53)
              {
                *(_QWORD *)(v52 + 16) = v31;
                v59 = (uint64_t *)&v60;
                v60 = 0uLL;
                goto LABEL_116;
              }
            }
            *a9 = v31;
LABEL_116:
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, v62);
            break;
          case '$':
            v47 = v59;
            v35 = (uint64_t *)&v60;
            if (v59 == (uint64_t *)&v60)
              goto LABEL_108;
            do
            {
              if (*((_DWORD *)v47 + 7))
                v48 = 4;
              else
                v48 = 3;
              if (ZinViewLayer::IsSplittable((uint64_t)a1, v48))
              {
                v49 = (uint64_t *)v47[1];
                if (v49)
                {
                  do
                  {
                    v50 = v49;
                    v49 = (uint64_t *)*v49;
                  }
                  while (v49);
                }
                else
                {
                  do
                  {
                    v50 = (uint64_t *)v47[2];
                    v39 = *v50 == (_QWORD)v47;
                    v47 = v50;
                  }
                  while (!v39);
                }
              }
              else
              {
                v50 = std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v59, v47);
                operator delete(v47);
              }
              v47 = v50;
            }
            while (v50 != (uint64_t *)&v60);
            goto LABEL_107;
          default:
            if (v28 != 7)
              goto LABEL_64;
            v34 = v59;
            v35 = (uint64_t *)&v60;
            if (v59 == (uint64_t *)&v60)
              goto LABEL_108;
            do
            {
              if (*((_DWORD *)v34 + 7))
                v36 = 4;
              else
                v36 = 3;
              if (ZinConcatLayer::IsSplittable((uint64_t)a1, v36))
              {
                v37 = (uint64_t *)v34[1];
                if (v37)
                {
                  do
                  {
                    v38 = v37;
                    v37 = (uint64_t *)*v37;
                  }
                  while (v37);
                }
                else
                {
                  do
                  {
                    v38 = (uint64_t *)v34[2];
                    v39 = *v38 == (_QWORD)v34;
                    v34 = v38;
                  }
                  while (!v39);
                }
              }
              else
              {
                v38 = std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v59, v34);
                operator delete(v34);
              }
              v34 = v38;
            }
            while (v38 != (uint64_t *)&v60);
LABEL_107:
            v35 = v59;
LABEL_108:
            *a9 = v35;
            v51 = v60;
            a9[1] = v60;
            v22 = a9 + 1;
            a9[2] = *((_QWORD *)&v51 + 1);
            if (!*((_QWORD *)&v51 + 1))
              goto LABEL_110;
            *(_QWORD *)(v51 + 16) = v22;
            v59 = (uint64_t *)&v60;
            v60 = 0uLL;
            goto LABEL_111;
        }
        goto LABEL_111;
    }
    goto LABEL_110;
  }
LABEL_16:
  v21 = v65;
  *a9 = v64;
  a9[1] = v21;
  v22 = a9 + 1;
LABEL_17:
  v23 = v66;
  a9[2] = v66;
  if (!v23)
    goto LABEL_110;
  v21[2] = v22;
  v64 = (uint64_t)&v65;
  v65 = 0;
  v66 = 0;
LABEL_111:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v64, v65);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v59, (_QWORD *)v60);
}

void sub_206F2C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t ProducerConsumerChain::Analyze@<X0>(ProducerConsumerChain *this@<X0>, ZinIrOpLayerGraph *a2@<X1>, ZinIrOpLayer *a3@<X2>, const ZinIrHalParameters *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  ZinIrOpLayer *v12;
  _QWORD *v13;
  uint64_t v14;
  ZinANELayer *v15;
  uint64_t v16;
  uint64_t **v17;
  _QWORD *v18;
  char v19;
  ProducerConsumerChain *v20;
  ZinIrTensor *v21;
  uint64_t i;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  ZinANELayer *UniqueConsumer;
  int v30;
  void *__p[2];
  _OWORD v32[2];
  uint64_t v33;
  int v34;
  _BYTE v35[80];
  uint8_t buf[8];

  v35[0] = 0;
  v35[72] = 0;
  v30 = *(_DWORD *)this;
  *(_OWORD *)__p = 0u;
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v34 = 1065353216;
  UniqueConsumer = a3;
  v9 = (_QWORD *)((char *)a2 + 24);
  v10 = (char *)a2 + 104;
  v11 = MEMORY[0x24BDACB70];
  v12 = a3;
  do
  {
    if (ZinIrOpLayer::IsANELayer(v12)
      && ((*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)UniqueConsumer + 408))(UniqueConsumer) & 1) != 0)
    {
      break;
    }
    ProducerConsumerChain::IsLayerAdmissible(this, UniqueConsumer, a4, &v27);
    v13 = v28;
    if (!v28)
      goto LABEL_17;
    while (*((_DWORD *)v13 + 7))
    {
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_17;
    }
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)UniqueConsumer + 11) + 32))(**((_QWORD **)UniqueConsumer + 11), 0, 0);
    if (*(_QWORD *)(v14 + 48) != 1 && !*((_BYTE *)this + 2))
      goto LABEL_17;
    v15 = UniqueConsumer;
    if (UniqueConsumer != a3)
    {
      v16 = *(_QWORD *)(v14 + 104);
      if (v16)
      {
        if (*(_DWORD *)(v16 + 96))
          goto LABEL_17;
      }
    }
    if (!*((_BYTE *)this + 3))
    {
      for (i = *((_QWORD *)UniqueConsumer + 14); i != *((_QWORD *)UniqueConsumer + 15); i += 8)
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 7)
        {
          if (*(_BYTE *)this && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_2069AB000, v11, OS_LOG_TYPE_INFO, "chain output in concat", buf, 2u);
            v15 = UniqueConsumer;
          }
          break;
        }
      }
    }
    ProducerConsumerChain::AppendLayer((ProducerConsumerChain *)&v30, v15);
    *(_QWORD *)buf = &UniqueConsumer;
    v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(v9, (unint64_t **)buf);
    v18 = v17 + 3;
    if (!v17)
      v18 = v10;
    if (v18[1] - *v18 <= 8uLL)
    {
      v20 = (ProducerConsumerChain *)(*(uint64_t (**)(ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)UniqueConsumer
                                                                                              + 32))(UniqueConsumer, 0, 0);
      v19 = 0;
      UniqueConsumer = ProducerConsumerChain::GetUniqueConsumer(v20, v21);
    }
    else
    {
LABEL_17:
      v19 = 1;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
    if ((v19 & 1) != 0)
      break;
    v12 = UniqueConsumer;
  }
  while (UniqueConsumer);
  v23 = (char *)__p[1];
  if (__p[0] == __p[1])
  {
    v23 = (char *)__p[0];
  }
  else
  {
    v24 = *((_QWORD *)__p[1] - 1);
    if (*(_DWORD *)(*(_QWORD *)(v24 + 64) + 8) == 85)
    {
      v25 = *(_QWORD *)(v24 + 432);
      if (v25)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 136) + 448) & 0x40) != 0)
        {
          __p[1] = (char *)__p[1] - 8;
          v23 -= 8;
        }
      }
    }
  }
  if ((unint64_t)(v23 - (char *)__p[0]) < 0x10)
  {
LABEL_38:
    std::__optional_move_base<ProducerConsumerChain,false>::__optional_move_base[abi:ne180100]((_BYTE *)a5, (uint64_t)v35);
  }
  else
  {
    while (*(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v23 - 1) + 32))(*((_QWORD *)v23 - 1), 0, 0)+ 64) == 1)
    {
      v23 = (char *)__p[1] - 8;
      __p[1] = v23;
      if ((unint64_t)(v23 - (char *)__p[0]) <= 0xF)
        goto LABEL_38;
    }
    *(_DWORD *)a5 = v30;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a5 + 24) = *(_QWORD *)&v32[0];
    __p[1] = 0;
    *(_QWORD *)&v32[0] = 0;
    __p[0] = 0;
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a5 + 32, (uint64_t *)v32 + 1);
    *(_BYTE *)(a5 + 72) = 1;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v32 + 8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v35);
}

void sub_206F2C6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)va, v5);
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)va1);
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

_QWORD *ProducerConsumerChain::AppendLayer(ProducerConsumerChain *this, ZinANELayer *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  ZinANELayer *v22;

  v22 = a2;
  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 1);
    v18 = (char *)*((_QWORD *)this + 2);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 1) = v16;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 2) = v8;
  return std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)this + 32, &v22, &v22);
}

ZinIrOpLayer *ProducerConsumerChain::GetUniqueConsumer(ProducerConsumerChain *this, ZinIrTensor *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  ZinIrOpLayer *v5;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8 = (uint64_t *)&v9;
  v2 = *((_QWORD *)this + 12);
  v3 = *(uint64_t **)(v2 + 112);
  v4 = *(uint64_t **)(v2 + 120);
  if (v3 == v4)
    goto LABEL_7;
  do
  {
    v7 = *v3;
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v8, (unint64_t *)&v7, &v7);
    ++v3;
  }
  while (v3 != v4);
  if (v10 != 1)
  {
LABEL_7:
    v5 = 0;
  }
  else
  {
    v5 = (ZinIrOpLayer *)v8[4];
    if (!ZinIrOpLayer::IsANELayer(v5))
      v5 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v8, v9);
  return v5;
}

void sub_206F2C880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

unint64_t ProducerConsumerChain::GetIncomingLayerIndexInChain(ProducerConsumerChain *this, const ZinANELayer *a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) == v2)
    return 0;
  v4 = 0;
  v5 = (_QWORD *)((char *)this + 32);
  while (1)
  {
    v7 = *(_QWORD *)(v2 + 8 * v4);
    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v5, &v7))
    {
      break;
    }
    ++v4;
    v2 = *((_QWORD *)a2 + 11);
    if (v4 >= (*((_QWORD *)a2 + 12) - v2) >> 3)
      return 0;
  }
  return v4;
}

__n128 LogicalDimensions::LogicalDimensions(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = a3[2] + *(_QWORD *)(a2 + 24) + a3[3];
  *(_QWORD *)(a1 + 16) = *a3 + *(_QWORD *)(a2 + 16) + a3[1];
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(__n128 *)a3;
  *(_OWORD *)(a1 + 56) = *((_OWORD *)a3 + 1);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

unint64_t LayerTilingHelper::GetOutputCount(uint64_t a1, LayerTilingHelper::Requirement *this, int a3)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a3 == 0;
  v5 = 72;
  if (!a3)
    v5 = 64;
  v6 = *(_QWORD *)(a1 + v5);
  v7 = 88;
  if (!a3)
    v7 = 80;
  v8 = *(_QWORD *)(a1 + v7);
  v9 = 104;
  if (v4)
    v9 = 96;
  return LayerTilingHelper::Requirement::GetOutputCount(this, v6, v8, *(_QWORD *)(a1 + v9));
}

unint64_t LayerTilingHelper::Requirement::GetOutputCount(LayerTilingHelper::Requirement *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  if (a3 == 2 && a4 == 1)
    v4 = (*(_QWORD *)this
        - a2
        + (unint64_t)*((unsigned __int8 *)this + 24)
        + *((_QWORD *)this + 4)
        + *((_QWORD *)this + 2)) >> 1;
  else
    v4 = *(_QWORD *)this
       - a2
       + *((unsigned __int8 *)this + 24)
       + (*((_QWORD *)this + 2) + *((unsigned __int8 *)this + 25)) * a4
       + *((_QWORD *)this + 4);
  return v4 + 1;
}

uint64_t LayerTilingHelper::CreateLayer(const ZinIrOpLayer **a1, uint64_t **a2, uint64_t *a3, TiledLayerTensorRegions *a4, SplitPatternHandlerMgr *this, _QWORD *a6, ZinIrOpLayer **a7)
{
  uint64_t v14;
  const ZinIrOpLayer *v15;
  int v16;
  _BOOL4 IsANELayer;
  ZinIrOpLayer *v18;
  const ZinEngineLayerMirInfo *v19;
  _DWORD *v20;
  _DWORD *v21;
  ZinEngineLayerMirInfo *v22;
  uint64_t v23;
  ZinEngineLayerMirInfo *v24;
  _BOOL4 v25;
  uint64_t result;
  ZinIrOpLayer *v27;
  uint64_t v28;
  unint64_t v29;
  ZinIrOpLayer *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[2];
  ZinEngineLayerMirInfo *v40;
  void *__p;
  void *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[2];

  v45[1] = *MEMORY[0x24BDAC8D0];
  if (this && SplitPatternHandlerMgr::IsLayerCreated(this, *a1))
  {
    v14 = SplitPatternHandlerMgr::SpatialSplitCopy(this, *a1, a4);
    goto LABEL_7;
  }
  v15 = *a1;
  v16 = *(_DWORD *)(*((_QWORD *)*a1 + 8) + 8);
  if (v16 > 80)
  {
    switch(v16)
    {
      case 'Q':
      case 'S':
      case 'T':
      case 'Y':
      case 'Z':
      case '\\':
        v14 = (*(uint64_t (**)(const ZinIrOpLayer *, TiledLayerTensorRegions *))(*(_QWORD *)v15 + 320))(*a1, a4);
        goto LABEL_7;
      case 'U':
        *a7 = (ZinIrOpLayer *)(*(uint64_t (**)(const ZinIrOpLayer *, TiledLayerTensorRegions *))(*(_QWORD *)v15 + 320))(*a1, a4);
        if (!(*(unsigned int (**)(const ZinIrOpLayer *))(*(_QWORD *)v15 + 120))(v15))
          goto LABEL_8;
        (*(void (**)(ZinEngineLayerMirInfo **__return_ptr, const ZinIrOpLayer *))(*(_QWORD *)v15 + 128))(&v40, v15);
        if ((*(uint64_t (**)(const ZinIrOpLayer *, ZinEngineLayerMirInfo *))(*(_QWORD *)v15 + 152))(v15, v40) != 1)ZinAssertImpl("wrong kernel-tensor index");
        v30 = *a7;
        v31 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*a3 + 8) + 40))(*(_QWORD *)(*a3 + 8), 0, 0);
        v32 = (std::__shared_weak_count *)v31[1];
        v43 = *v31;
        v44 = v32;
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
        }
        v35 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v30 + 240))(v30, &v43);
        v36 = v44;
        if (v44)
        {
          v37 = (unint64_t *)&v44->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if ((v35 & 1) != 0)
        {
          std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
          goto LABEL_8;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          LOWORD(v39[0]) = 0;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Could not split MatMul", (uint8_t *)v39, 2u);
        }
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
        break;
      default:
        goto LABEL_50;
    }
    return 3;
  }
  switch(v16)
  {
    case 7:
      v14 = ZinConcatLayer::SpatialSplitCopy(*a1, (uint64_t)a4, (uint64_t)a6);
      break;
    case 35:
      v14 = ZinReshapeLayer::SpatialSplitCopy(*a1, a4);
      break;
    case 36:
      v14 = (uint64_t)ZinViewLayer::SpatialSplitCopy(*a1, a4);
      break;
    default:
LABEL_50:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        LayerTilingHelper::CreateLayer(v16);
      return 3;
  }
LABEL_7:
  *a7 = (ZinIrOpLayer *)v14;
LABEL_8:
  IsANELayer = ZinIrOpLayer::IsANELayer(*a7);
  v18 = *a7;
  if (IsANELayer)
  {
    v19 = (const ZinEngineLayerMirInfo *)*((_QWORD *)v18 + 33);
    if (v19)
    {
      v21 = (_DWORD *)*a6;
      v20 = (_DWORD *)a6[1];
      if ((_DWORD *)*a6 != v20)
      {
        while (*v21)
        {
          if (++v21 == v20)
          {
            v21 = (_DWORD *)a6[1];
            break;
          }
        }
      }
      if (v21 != v20)
      {
        v22 = (ZinEngineLayerMirInfo *)operator new();
        ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v22, v19);
        v40 = v22;
        v23 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0, 0);
        *((_QWORD *)v40 + 13) = *(_QWORD *)(v23 + 48);
        ZinANELayer::DeleteMirInfo((ZinEngineLayerMirInfo **)v18);
        ZinANELayer::SetMirInfo((uint64_t)v18, (int **)&v40);
        v24 = v40;
        v40 = 0;
        if (v24)
        {
          ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v24);
          MEMORY[0x20BD002F8]();
        }
        v18 = *a7;
      }
    }
  }
  v45[0] = *a1;
  v39[0] = v45;
  v39[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v40, v39);
  v25 = ZinIrOpLayerGraph::AddNode(a2, v18, (ZinIrOpLayer ***)&v40);
  v40 = (ZinEngineLayerMirInfo *)&unk_24C02BB18;
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (!v25 || (ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, a3, (uint64_t)*a7) & 1) == 0)
    ZinAssertImpl("Failed to update graph");
  result = ZinIrOpLayer::IsANELayer(*a7);
  if ((_DWORD)result)
  {
    v27 = *a7;
    v28 = *((_QWORD *)v27 + 33);
    if (v28
      && *(_BYTE *)(v28 + 233)
      && (v29 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v27 + 368))(v27, 3),
          *(_QWORD *)(v28 + 200) > v29))
    {
      if (*(_QWORD *)(v28 + 216)
        || *(_DWORD *)(*((_QWORD *)v27 + 8) + 8) != 85
        || !ZinNEConvLayer::IsKernelStreaming(v27))
      {
        ZinAssertImpl("Unsupported tile configuration in spatial split");
      }
      result = 0;
      *(_QWORD *)(v28 + 200) = v29;
      *(_BYTE *)(v28 + 233) = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_206F2CE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t LayerTilingHelper::Requirement::GetExtendedTo(LayerTilingHelper::Requirement *this, const LayerTilingHelper::Requirement *a2, LayerTilingHelper::Requirement *a3)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 1);
  if (v3 > *((_QWORD *)a2 + 1))
    return 3;
  result = 0;
  *((_QWORD *)a3 + 1) = v3;
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)a3 = *(_QWORD *)this;
  *((_BYTE *)a3 + 24) = *((_BYTE *)this + 24);
  *((_QWORD *)a3 + 2) = *((_QWORD *)a2 + 1) - v6 + *((_QWORD *)a2 + 2);
  *((_BYTE *)a3 + 25) = *((_BYTE *)a2 + 25);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)a3 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a3 + 5) = v7;
  *((_QWORD *)a3 + 6) = *((_QWORD *)a2 + 6);
  return result;
}

uint64_t LayerTilingHelper::ComputeInputRequirement(ZinIrOpLayer **this, LayerTilingHelper *a2)
{
  _QWORD *v3;
  uint64_t v4;
  ZinIrOpLayer *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _BOOL4 IsANELayer;
  ZinIrOpLayer *v20;
  ZinReshapeLayer *v21;
  uint64_t ReshapeInfo;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  ZinIrOpLayer *v61;
  LayerTilingHelper *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  ZinIrOpLayer *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 *v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  char *v94;
  _DWORD *__p;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _OWORD v110[2];
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v3 = operator new(8uLL);
  v4 = 0;
  *v3 = 0x100000000;
  v94 = (char *)(this + 18);
  __p = v3;
  v5 = *this;
  v93 = (char *)(this + 21);
  while (1)
  {
    v101 = __p[v4];
    v6 = 168;
    if (!v101)
      v6 = 144;
    v107 = v6;
    if (v101)
      v7 = v93;
    else
      v7 = v94;
    v8 = (char *)(this + 8);
    if (v101)
      v8 = (char *)(this + 9);
    v109 = *(_QWORD *)v8;
    if (v101)
      v9 = 11;
    else
      v9 = 10;
    v10 = (unint64_t)this[v9];
    v11 = (char *)(this + 14);
    if (v101)
      v11 = (char *)(this + 16);
    v104 = *(_QWORD *)v11;
    v12 = (char *)(this + 15);
    if (v101)
      v12 = (char *)(this + 17);
    v13 = *(_QWORD *)v12;
    v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v5 + 11) + 32))(**((_QWORD **)v5 + 11), 0, 0);
    v16 = *(_QWORD *)(v14 + 64);
    v15 = *(_QWORD *)(v14 + 72);
    v17 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*this + 32))(*this, 0, 0);
    v18 = *(_OWORD *)(v17 + 64);
    v112 = *(_OWORD *)(v17 + 48);
    v113 = v18;
    v114 = *(_QWORD *)(v17 + 80);
    IsANELayer = ZinIrOpLayer::IsANELayer(*this);
    v20 = *this;
    if (IsANELayer)
    {
      v15 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v20 + 360))(*this, 4);
      v16 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v20 + 360))(v20, 3);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v20 + 408))(v20))
      {
        v110[0] = v112;
        v110[1] = v113;
        v111 = v114;
        v21 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v20 + 416))(v20);
        ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v21);
        v23 = v7;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(v110, ReshapeInfo + 16, &v112);
LABEL_23:
        v99 = 0;
        goto LABEL_24;
      }
LABEL_22:
      v23 = v7;
      goto LABEL_23;
    }
    v24 = *((_QWORD *)v20 + 8);
    v25 = *(_DWORD *)(v24 + 8);
    if (v25 != 36)
    {
      if (v25 == 7)
      {
        v26 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v20 + 32))(*this, 0, 0);
        v23 = v7;
        v99 = 0;
        v16 = *(_QWORD *)(v26 + 64);
        v15 = *(_QWORD *)(v26 + 72);
LABEL_24:
        v27 = -1;
        goto LABEL_25;
      }
      goto LABEL_22;
    }
    v23 = v7;
    v79 = (unint64_t *)(v24 + 32);
    v80 = (unint64_t *)(v24 + 40);
    if (!v101)
      v80 = v79;
    v81 = *v80;
    v82 = &v113;
    if (v101)
      v82 = (__int128 *)((char *)&v113 + 8);
    v99 = v81;
    v27 = *(_QWORD *)v82 + v81;
LABEL_25:
    v108 = v27;
    if (!v101)
      v15 = v16;
    v28 = (char *)(this + 12);
    if (v101)
      v28 = (char *)(this + 13);
    v30 = this[v9] == (ZinIrOpLayer *)1 && *(_QWORD *)v28 == 2;
    v106 = v30;
    v31 = (v15 << v30) + v104;
    v32 = v31 + v13 - v109;
    if (v31 + v13 < v109)
      goto LABEL_107;
    std::vector<ZinOcgKernelData>::reserve((void **)v23, v32 / v10 + 1);
    v96 = v15;
    v97 = v13;
    v98 = v4;
    v33 = v99;
    if (v99 <= v32 && v99 < v108)
      break;
    v35 = (char *)*((_QWORD *)v23 + 1);
LABEL_42:
    v36 = *(uint64_t *)((char *)this + v107);
    v37 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v35[-v36] >> 3);
    v38 = &v113;
    if (v101)
      v38 = (__int128 *)((char *)&v113 + 8);
    if (v37 != *(_QWORD *)v38)
      ZinAssertImpl("Each output unit must have a calculation");
    v5 = *this;
    if (*(_DWORD *)(*((_QWORD *)*this + 8) + 8) == 36)
    {
      *(_QWORD *)(v36 + 40) = v99;
      if (v96 < v37 + v99)
        ZinAssertImpl("Illegal value in view layer for spatial splitting");
      *((_QWORD *)v35 - 1) = v96 - (v37 + v99);
    }
    else
    {
      v77 = *((_QWORD *)v35 - 5);
      v78 = v96 - (*((_QWORD *)v35 - 6) + v77 + *(v35 - 31));
      if (v97 - *((_QWORD *)v35 - 3) + v78 > v10 - 1)
        ZinAssertImpl("Extra padding would create extra row");
      *((_QWORD *)v35 - 3) = v97;
      *((_QWORD *)v35 - 5) = v78 + v77;
    }
    v4 = v98 + 1;
    if (v98 == 1)
    {
      v92 = 0;
      goto LABEL_108;
    }
  }
  v39 = v32;
  v40 = v109 - 1;
  v41 = v31 - 1;
  v100 = (uint64_t)(v23 + 16);
  v42 = v104;
  v103 = v32;
  v102 = v41;
  v105 = v23;
  while (1)
  {
    v43 = v42 >= v33 ? v42 - v33 : 0;
    v44 = v33 <= v42 ? v42 : v33;
    v45 = v109 - v43;
    if (v109 == v43)
      break;
    v46 = v40 + v33;
    v47 = v44 - v42;
    if ((v106 & 1) != 0)
    {
      v48 = v47 & 1;
      v49 = v45 - (v47 & 1);
      v50 = (v47 & 1) + v44;
      v47 = (v50 - v42) >> 1;
      if (v41 < v46)
        v46 = v41;
      v51 = v46 - v50 + 1;
      v52 = v51 >> 1;
      v53 = v51 & 1;
      v54 = v49 - v51;
      if (v50 <= v41)
        v55 = v53;
      else
        v55 = 0;
      if (v50 <= v41)
        v56 = v52;
      else
        v56 = 0;
      if (v50 > v41)
        v54 = v49;
    }
    else
    {
      if (v41 < v46)
        v46 = v41;
      v57 = v46 - v44;
      v55 = 0;
      v48 = 0;
      if (v44 <= v41)
        v56 = v57 + 1;
      else
        v56 = 0;
      if (v44 <= v41)
        v54 = v45 - (v57 + 1);
      else
        v54 = v109 - v43;
    }
    v58 = *((_QWORD *)v23 + 1);
    v59 = *((_QWORD *)v23 + 2);
    if (v58 >= v59)
    {
      v60 = v54;
      v61 = (ZinIrOpLayer *)v10;
      v62 = (LayerTilingHelper *)this;
      v63 = *(uint64_t *)((char *)this + v107);
      v64 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v58 - v63) >> 3);
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) > 0x492492492492492)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v66 = v56;
      v67 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v59 - v63) >> 3);
      if (2 * v67 > v65)
        v65 = 2 * v67;
      if (v67 >= 0x249249249249249)
        v68 = 0x492492492492492;
      else
        v68 = v65;
      if (v68)
        v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(v100, v68);
      else
        v69 = 0;
      v70 = &v69[56 * v64];
      *(_QWORD *)v70 = v43;
      *((_QWORD *)v70 + 1) = v47;
      *((_QWORD *)v70 + 2) = v66;
      v70[24] = v48;
      v70[25] = v55;
      *((_WORD *)v70 + 15) = WORD2(v110[0]);
      *(_DWORD *)(v70 + 26) = v110[0];
      *((_QWORD *)v70 + 5) = 0;
      *((_QWORD *)v70 + 6) = 0;
      *((_QWORD *)v70 + 4) = v60;
      v71 = (char *)*((_QWORD *)v105 + 1);
      this = (ZinIrOpLayer **)v62;
      v72 = *(char **)((char *)v62 + v107);
      v73 = (ZinIrOpLayer *)v70;
      v10 = (unint64_t)v61;
      if (v71 != v72)
      {
        do
        {
          v74 = *(_OWORD *)(v71 - 56);
          v75 = *(_OWORD *)(v71 - 40);
          v76 = *(_OWORD *)(v71 - 24);
          *((_QWORD *)v73 - 1) = *((_QWORD *)v71 - 1);
          *(_OWORD *)((char *)v73 - 24) = v76;
          *(_OWORD *)((char *)v73 - 40) = v75;
          *(_OWORD *)((char *)v73 - 56) = v74;
          v73 = (ZinIrOpLayer *)((char *)v73 - 56);
          v71 -= 56;
        }
        while (v71 != v72);
        v71 = *(char **)((char *)this + v107);
      }
      v42 = v104;
      v23 = v105;
      *(ZinIrOpLayer **)((char *)this + v107) = v73;
      v35 = v70 + 56;
      *((_QWORD *)v105 + 1) = v70 + 56;
      *((_QWORD *)v105 + 2) = &v69[56 * v68];
      if (v71)
        operator delete(v71);
      *((_QWORD *)v105 + 1) = v35;
      v40 = v109 - 1;
      v39 = v103;
      v41 = v102;
    }
    else
    {
      *(_QWORD *)v58 = v43;
      *(_QWORD *)(v58 + 8) = v47;
      *(_QWORD *)(v58 + 16) = v56;
      *(_BYTE *)(v58 + 24) = v48;
      *(_BYTE *)(v58 + 25) = v55;
      v35 = (char *)(v58 + 56);
      *(_QWORD *)(v58 + 40) = 0;
      *(_QWORD *)(v58 + 48) = 0;
      *(_QWORD *)(v58 + 32) = v54;
      *((_QWORD *)v23 + 1) = v58 + 56;
    }
    v33 += v10;
    if (v33 > v39 || v33 >= v108)
      goto LABEL_42;
  }
  v83 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v83)
    LayerTilingHelper::ComputeInputRequirement(v83, v84, v85, v86, v87, v88, v89, v90);
LABEL_107:
  v92 = 3;
LABEL_108:
  operator delete(__p);
  return v92;
}

void sub_206F2D5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t LayerTilingHelper::CreateHelper(LayerTilingHelper *this, const ZinIrOpLayer *a2, const SplitPatternHandlerMgr *a3, LayerTilingHelper *a4)
{
  unint64_t v6;
  __n128 v7;
  _QWORD *v8;
  _QWORD *v9;
  const SplitPatternHandlerMgr *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  LayerTilingHelper *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t KernelDimsFrom;
  int64x2_t v43;
  __int128 v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  LayerTilingHelper *v59;
  uint64_t v60;
  void **v61;
  const SplitPatternHandlerMgr *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;

  v7 = Padding::From(this, &v67);
  v61 = (void **)((char *)a3 + 16);
  v62 = a3;
  *((_QWORD *)a3 + 3) = *((_QWORD *)a3 + 2);
  v8 = (_QWORD *)*((_QWORD *)this + 11);
  v9 = (_QWORD *)*((_QWORD *)this + 12);
  v59 = this;
  v10 = a3;
  if (v8 != v9)
  {
    v65 = v67.n128_u64[1];
    v66 = v67.n128_u64[0];
    v11 = v67.n128_u64[1] + v67.n128_u64[0];
    v63 = v69;
    v64 = v68;
    v12 = v69 + v68;
    v60 = (uint64_t)v10 + 32;
    do
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)*v8 + 32))(*v8, 0, 0, v7);
      v14 = v13[6];
      v15 = v13[7];
      v16 = v11 + v13[8];
      v17 = v12 + v13[9];
      v18 = v13[10];
      v20 = (char *)*((_QWORD *)v10 + 3);
      v19 = *((_QWORD *)v10 + 4);
      if ((unint64_t)v20 >= v19)
      {
        v22 = v9;
        v23 = (char *)*v61;
        v24 = 0x8E38E38E38E38E39 * ((v20 - (_BYTE *)*v61) >> 3);
        v25 = v24 + 1;
        if (v24 + 1 > 0x38E38E38E38E38ELL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v26 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - (_QWORD)v23) >> 3);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x1C71C71C71C71C7)
          v6 = 0x38E38E38E38E38ELL;
        else
          v6 = v25;
        if (v6)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>(v60, v6);
          v23 = (char *)*((_QWORD *)v62 + 2);
          v20 = (char *)*((_QWORD *)v62 + 3);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[72 * v24];
        *(_QWORD *)v28 = v14;
        *((_QWORD *)v28 + 1) = v15;
        *((_QWORD *)v28 + 2) = v16;
        *((_QWORD *)v28 + 3) = v17;
        *((_QWORD *)v28 + 4) = v18;
        *((_QWORD *)v28 + 5) = v66;
        *((_QWORD *)v28 + 6) = v65;
        *((_QWORD *)v28 + 7) = v64;
        *((_QWORD *)v28 + 8) = v63;
        v29 = v28;
        v9 = v22;
        if (v20 != v23)
        {
          do
          {
            *(_OWORD *)(v29 - 72) = *(_OWORD *)(v20 - 72);
            v7 = *(__n128 *)(v20 - 56);
            v30 = *(_OWORD *)(v20 - 40);
            v31 = *(_OWORD *)(v20 - 24);
            *((_QWORD *)v29 - 1) = *((_QWORD *)v20 - 1);
            *(_OWORD *)(v29 - 24) = v31;
            *(_OWORD *)(v29 - 40) = v30;
            *(__n128 *)(v29 - 56) = v7;
            v29 -= 72;
            v20 -= 72;
          }
          while (v20 != v23);
          v23 = (char *)*v61;
        }
        v10 = v62;
        v21 = v28 + 72;
        *((_QWORD *)v62 + 2) = v29;
        *((_QWORD *)v62 + 3) = v28 + 72;
        *((_QWORD *)v62 + 4) = &v27[72 * v6];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v20 = v14;
        *((_QWORD *)v20 + 1) = v15;
        *((_QWORD *)v20 + 2) = v16;
        *((_QWORD *)v20 + 3) = v17;
        *((_QWORD *)v20 + 4) = v18;
        *((_QWORD *)v20 + 5) = v66;
        *((_QWORD *)v20 + 6) = v65;
        *((_QWORD *)v20 + 7) = v64;
        v21 = v20 + 72;
        *((_QWORD *)v20 + 8) = v63;
      }
      *((_QWORD *)v10 + 3) = v21;
      ++v8;
    }
    while (v8 != v9);
  }
  *(_QWORD *)v10 = v59;
  *((_QWORD *)v10 + 1) = a2;
  v32 = *(_DWORD *)(*((_QWORD *)v59 + 8) + 8);
  switch(v32)
  {
    case 'Q':
    case 'T':
    case 'Z':
    case '\\':
      goto LABEL_26;
    case 'R':
    case 'V':
    case 'W':
    case 'X':
    case '[':
      return 3;
    case 'S':
    case 'Y':
      v33 = *(_QWORD *)(*((_QWORD *)v59 + 54) + 64);
      *((_QWORD *)v62 + 8) = LayerTilingHelper::GetKernelDimsFrom(v59, (const ZinIrOpLayer *)v6);
      *((_QWORD *)v62 + 9) = v34;
      v35 = *(int *)(v33 + 40);
      *((_QWORD *)v62 + 10) = *(int *)(v33 + 44);
      *((_QWORD *)v62 + 11) = v35;
      *((int64x2_t *)v62 + 6) = vdupq_n_s64(1uLL);
      v36 = *(_QWORD *)(v33 + 72);
      *(_QWORD *)&v37 = (int)v36;
      *((_QWORD *)&v37 + 1) = SHIDWORD(v36);
      *((_OWORD *)v62 + 7) = v37;
      v38 = *(_QWORD *)(v33 + 64);
      goto LABEL_38;
    case 'U':
      v46 = *((_QWORD *)v59 + 54);
      if (!v46)
        goto LABEL_26;
      v47 = *(_QWORD *)(v46 + 136);
      *((_QWORD *)v62 + 8) = LayerTilingHelper::GetKernelDimsFrom(v59, (const ZinIrOpLayer *)v6);
      *((_QWORD *)v62 + 9) = v34;
      v48 = *(int *)(v47 + 328);
      v49 = v48 == 2;
      v50 = *(int *)(v47 + 332);
      v51 = *(int *)(v47 + 340);
      v52 = v51 == 2;
      if (v50 == 2 && *(_DWORD *)(v47 + 344) == 2)
      {
        v50 = 1;
        v53 = 1;
      }
      else
      {
        v53 = *(int *)(v47 + 344);
      }
      if (v49 && v52)
        v48 = 1;
      *((_QWORD *)v62 + 10) = v50;
      *((_QWORD *)v62 + 11) = v48;
      if (v49 && v52)
        v54 = 1;
      else
        v54 = v51;
      *((_QWORD *)v62 + 12) = v53;
      *((_QWORD *)v62 + 13) = v54;
      v55 = *(_QWORD *)(v47 + 360);
      *(_QWORD *)&v56 = (int)v55;
      *((_QWORD *)&v56 + 1) = SHIDWORD(v55);
      *((_OWORD *)v62 + 7) = v56;
      v38 = *(_QWORD *)(v47 + 352);
LABEL_38:
      v10 = v62;
      *(_QWORD *)&v57 = (int)v38;
      *((_QWORD *)&v57 + 1) = SHIDWORD(v38);
      v44 = v57;
      goto LABEL_39;
    default:
      v39 = v32 > 0x24;
      v40 = (1 << v32) & 0x1800000080;
      if (v39 || v40 == 0)
        return 3;
LABEL_26:
      KernelDimsFrom = LayerTilingHelper::GetKernelDimsFrom(v59, (const ZinIrOpLayer *)v6);
      v43 = vdupq_n_s64(1uLL);
      *((_QWORD *)v10 + 8) = KernelDimsFrom;
      *((_QWORD *)v10 + 9) = v34;
      *((int64x2_t *)v10 + 5) = v43;
      *((int64x2_t *)v10 + 6) = v43;
      v44 = 0uLL;
      *((_OWORD *)v10 + 7) = 0u;
LABEL_39:
      *((_OWORD *)v10 + 8) = v44;
      return LayerTilingHelper::ComputeInputRequirement((ZinIrOpLayer **)v10, v34);
  }
}

uint64_t LayerTilingHelper::GetKernelDimsFrom(LayerTilingHelper *this, const ZinIrOpLayer *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2 == 83 || v2 == 89)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 54) + 64) + 24;
    return *(_QWORD *)v4;
  }
  if (v2 == 85)
  {
    v3 = *((_QWORD *)this + 54);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 136) + 264;
      return *(_QWORD *)v4;
    }
  }
  return 1;
}

uint64_t LayerTilingHelper::Create(_QWORD *a1, ZinIrOpLayer *a2, uint64_t *a3, LayerTilingHelper *a4)
{
  LayerTilingHelper **v4;
  LayerTilingHelper **v5;
  uint64_t v8;
  _QWORD *v9;
  LayerTilingHelper *v10;
  _OWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t Helper;
  ZinIrOpLayer **v21;
  ZinIrOpLayer **v22;
  ZinIrOpLayer *v23;
  BOOL v25;
  _QWORD v26[5];

  v4 = (LayerTilingHelper **)a1[1];
  v5 = (LayerTilingHelper **)a1[2];
  if (v4 == v5)
    return 0;
  v8 = (uint64_t)(a3 + 2);
  v9 = a1 + 4;
  while (1)
  {
    v10 = *v4;
    v11 = (_OWORD *)a3[1];
    v12 = a3[2];
    if ((unint64_t)v11 >= v12)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *a3) >> 6);
      v15 = v14 + 1;
      if (v14 + 1 > 0x155555555555555)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *a3) >> 6);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      v17 = v16 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v15;
      v26[4] = v8;
      v18 = v17 ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LayerTilingHelper>>(v8, v17) : 0;
      v19 = &v18[192 * v14];
      v26[0] = v18;
      v26[1] = v19;
      v26[3] = &v18[192 * v17];
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      *((_OWORD *)v19 + 4) = 0u;
      *((_OWORD *)v19 + 5) = 0u;
      *((_OWORD *)v19 + 6) = 0u;
      *((_OWORD *)v19 + 7) = 0u;
      *((_OWORD *)v19 + 8) = 0u;
      *((_OWORD *)v19 + 9) = 0u;
      *((_OWORD *)v19 + 10) = 0u;
      *((_OWORD *)v19 + 11) = 0u;
      v26[2] = v19 + 192;
      std::vector<LayerTilingHelper>::__swap_out_circular_buffer(a3, v26);
      v13 = (_OWORD *)a3[1];
      std::__split_buffer<LayerTilingHelper>::~__split_buffer((uint64_t)v26);
    }
    else
    {
      v11[10] = 0u;
      v11[11] = 0u;
      v11[8] = 0u;
      v11[9] = 0u;
      v11[6] = 0u;
      v11[7] = 0u;
      v11[4] = 0u;
      v11[5] = 0u;
      v11[2] = 0u;
      v11[3] = 0u;
      *v11 = 0u;
      v11[1] = 0u;
      v13 = v11 + 12;
      a3[1] = (uint64_t)(v11 + 12);
    }
    a3[1] = (uint64_t)v13;
    Helper = LayerTilingHelper::CreateHelper(v10, a2, (const SplitPatternHandlerMgr *)(v13 - 12), a4);
    v22 = (ZinIrOpLayer **)*((_QWORD *)v10 + 11);
    v21 = (ZinIrOpLayer **)*((_QWORD *)v10 + 12);
    while (v22 != v21)
    {
      v23 = *v22;
      v25 = 0;
      if (ZinIrOpLayer::IsANELayer(v23))
      {
        v26[0] = v10;
        v25 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v9, v26) != 0;
      }
      std::vector<BOOL>::push_back(a3[1] - 152, &v25);
      ++v22;
    }
    if ((_DWORD)Helper)
      break;
    if (++v4 == v5)
      return 0;
  }
  return Helper;
}

void sub_206F2DC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<LayerTilingHelper>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t LayerTilingHelper::Create(_QWORD *a1, const ZinIrOpLayer *a2, uint64_t a3, LayerTilingHelper *a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  LayerTilingHelper *v8;
  uint64_t Helper;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  ZinIrOpLayer *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v27;
  BOOL v28;
  _BYTE v29[16];
  __int128 v30;
  void *v31[14];
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = a1 + 1;
  v5 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 0;
  while (1)
  {
    v8 = (LayerTilingHelper *)v5[4];
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    memset(v31, 0, sizeof(v31));
    v30 = 0u;
    Helper = LayerTilingHelper::CreateHelper(v8, a2, (const SplitPatternHandlerMgr *)v29, a4);
    v11 = (ZinIrOpLayer **)*((_QWORD *)v8 + 11);
    v10 = (ZinIrOpLayer **)*((_QWORD *)v8 + 12);
    while (v11 != v10)
    {
      v19 = 0;
      v19 = *v11;
      v28 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a1, &v19) != 0;
      std::vector<BOOL>::push_back((uint64_t)&v31[1], &v28);
      ++v11;
    }
    v12 = Helper;
    if (!(_DWORD)Helper)
    {
      v19 = v8;
      LayerTilingHelper::LayerTilingHelper((LayerTilingHelper *)&v20, (const LayerTilingHelper *)v29);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::pair<ZinIrOpLayer *,LayerTilingHelper>>(a3, &v19, (uint64_t)&v19);
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (v23)
        operator delete(v23);
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      v12 = v4;
    }
    if (*((_QWORD *)&v33 + 1))
    {
      *(_QWORD *)&v34 = *((_QWORD *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if ((_QWORD)v32)
    {
      *((_QWORD *)&v32 + 1) = v32;
      operator delete((void *)v32);
    }
    if (v31[1])
      operator delete(v31[1]);
    if ((_QWORD)v30)
    {
      *((_QWORD *)&v30 + 1) = v30;
      operator delete((void *)v30);
    }
    if ((_DWORD)Helper)
      break;
    v13 = (_QWORD *)v5[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v5[2];
        v15 = *v14 == (_QWORD)v5;
        v5 = v14;
      }
      while (!v15);
    }
    v4 = v12;
    v5 = v14;
    if (v14 == v6)
      return 0;
  }
  return v12;
}

void sub_206F2DE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::pair<ZinIrOpLayer *,LayerTilingHelper>::~pair(&a12);
  LayerTilingHelper::~LayerTilingHelper((LayerTilingHelper *)&a38);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<ZinIrOpLayer *,LayerTilingHelper>::~pair(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

void LayerTilingHelper::~LayerTilingHelper(LayerTilingHelper *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    operator delete(v5);
  }
}

void LayerTilingHelper::ToProduce(ZinIrOpLayer **this@<X0>, const TiledLayerTensorRegions::Id *a2@<X1>, const ZinTensorRegion *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  ZinIrOpLayer *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const ZinTensorRegion *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  ZinIrOpLayer *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const TiledLayerTensorRegions::Id *v39;
  _OWORD v40[5];
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  void *__p[3];
  void *v53[3];
  void *v54[3];
  __int128 v55;
  __int128 v56;
  _BYTE v57[48];
  __int128 v58;
  __int128 v59;
  _OWORD v60[6];
  __int128 v61;

  if (ZinTensorRegion::IsValid(a3))
  {
    v55 = 0u;
    v56 = 0u;
    *(int64x2_t *)&v57[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v57[24] = *(_OWORD *)&v57[8];
    *(_QWORD *)v57 = 0;
    *(_QWORD *)&v57[40] = 1;
    v58 = 0u;
    v59 = 0u;
    v60[5] = 0u;
    v61 = 0u;
    v8 = *((_OWORD *)a3 + 3);
    v60[2] = *((_OWORD *)a3 + 2);
    v60[3] = v8;
    v60[4] = *((_OWORD *)a3 + 4);
    v9 = *((_OWORD *)a3 + 1);
    v60[0] = *(_OWORD *)a3;
    v60[1] = v9;
    LayerTilingHelper::CalculateOutputRegion(this, 0, a3, (uint64_t)&v55);
    LayerTilingHelper::CalculateOutputRegion(this, 1, a3, (uint64_t)&v55);
    std::vector<LogicalDimensions>::vector(v54, 0x8E38E38E38E38E39 * ((this[3] - this[2]) >> 3));
    std::vector<ZinTensorRegion>::vector(v53, 0x8E38E38E38E38E39 * ((this[3] - this[2]) >> 3));
    v10 = this[2];
    if (this[3] == v10)
    {
      v32 = 0;
    }
    else
    {
      v39 = a2;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = a3;
      do
      {
        v15 = (char *)v10 + v12;
        v16 = *(_OWORD *)v15;
        v17 = *((_OWORD *)v15 + 1);
        *(_QWORD *)&v57[40] = *((_QWORD *)v15 + 4);
        *(_OWORD *)&v57[8] = v16;
        *(_OWORD *)&v57[24] = v17;
        LayerTilingHelper::CalculateInputRegion(this, 0, v14, &v55);
        LayerTilingHelper::CalculateInputRegion(this, 1, v14, &v55);
        v18 = v58;
        v19 = v59;
        v20 = *((_QWORD *)v14 + 5);
        if (v20 == *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)*this + 32))(*this, 0, 0)+ 48))
        {
          v21 = this[2];
          v22 = *(_QWORD *)((char *)v21 + v12);
          v14 = a3;
        }
        else
        {
          v14 = a3;
          v22 = *((_QWORD *)a3 + 5);
          *(_QWORD *)&v55 = *(_QWORD *)a3;
          v21 = this[2];
        }
        *(_QWORD *)&v57[8] = v22;
        v23 = *(_QWORD *)((char *)v21 + v12 + 8);
        *(_QWORD *)&v57[16] = v23;
        v24 = v19 + v18 + *(_QWORD *)&v57[24];
        v25 = *((_QWORD *)&v19 + 1) + *((_QWORD *)&v18 + 1) + *(_QWORD *)&v57[32];
        v26 = *(_QWORD *)&v57[40];
        v27 = (char *)v54[0] + v12;
        *v27 = v22;
        v27[1] = v23;
        v27[2] = v24;
        v27[3] = v25;
        v27[4] = v26;
        v27[5] = v18;
        v27[6] = v19;
        v27[7] = *((_QWORD *)&v18 + 1);
        v27[8] = *((_QWORD *)&v19 + 1);
        v28 = (char *)v53[0] + v11;
        v30 = v56;
        v29 = *(_OWORD *)v57;
        v31 = *(_OWORD *)&v57[32];
        v28[3] = *(_OWORD *)&v57[16];
        v28[4] = v31;
        v28[1] = v30;
        v28[2] = v29;
        *v28 = v55;
        ++v13;
        v10 = this[2];
        v32 = 0x8E38E38E38E38E39 * ((this[3] - v10) >> 3);
        v12 += 72;
        v11 += 80;
      }
      while (v13 < v32);
      a2 = v39;
    }
    std::vector<ZinTensorPosition>::vector(__p, v32, (__int128 *)a3);
    TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v40, (__int128 *)a2, v60, (uint64_t)__p, (uint64_t)v54, (uint64_t)v53, v61, *((uint64_t *)&v61 + 1));
    *(_QWORD *)(a4 + 96) = v42;
    *(_QWORD *)(a4 + 120) = v44;
    v33 = v50;
    *(_QWORD *)(a4 + 144) = v46;
    v34 = v40[3];
    *(_OWORD *)(a4 + 32) = v40[2];
    *(_OWORD *)(a4 + 48) = v34;
    v35 = v40[1];
    *(_OWORD *)a4 = v40[0];
    *(_OWORD *)(a4 + 16) = v35;
    v36 = v41;
    *(_OWORD *)(a4 + 64) = v40[4];
    *(_OWORD *)(a4 + 80) = v36;
    v41 = 0uLL;
    *(_OWORD *)(a4 + 104) = v43;
    v42 = 0;
    v43 = 0uLL;
    v44 = 0;
    *(_OWORD *)(a4 + 128) = v45;
    v45 = 0uLL;
    v46 = 0;
    v37 = v47;
    v38 = v48;
    *(_OWORD *)(a4 + 184) = v49;
    *(_OWORD *)(a4 + 168) = v38;
    *(_OWORD *)(a4 + 152) = v37;
    *(_QWORD *)(a4 + 200) = v33;
    *(_OWORD *)(a4 + 208) = v51;
    *(_BYTE *)(a4 + 224) = 1;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v53[0])
    {
      v53[1] = v53[0];
      operator delete(v53[0]);
    }
    if (v54[0])
    {
      v54[1] = v54[0];
      operator delete(v54[0]);
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 224) = 0;
  }
}

void sub_206F2E290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (__p)
    operator delete(__p);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);
  _Unwind_Resume(exception_object);
}

uint64_t LayerTilingHelper::CalculateOutputRegion(ZinIrOpLayer **a1, int a2, const ZinTensorRegion *a3, uint64_t a4)
{
  int v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  ZinIrOpLayer **v12;
  uint64_t v13;
  ZinIrOpLayer *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrOpLayer *v28;
  uint64_t v29;
  uint64_t v30;
  ZinIrOpLayer *v31;
  uint64_t v32;
  uint64_t result;
  ZinIrOpLayer *v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (ZinIrOpLayer::IsANELayer(*a1))
    v8 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)*a1 + 408))(*a1) ^ 1;
  else
    LOBYTE(v8) = 1;
  LayerTilingHelper::GetProgrammedOutRegion(a1, a3, (uint64_t)&v43);
  v9 = &v47;
  if (!a2)
    v9 = &v46;
  v10 = (unint64_t *)&v44;
  if (a2)
    v10 = (unint64_t *)&v45;
  v11 = *v10;
  v12 = a1 + 18;
  v13 = 21;
  if (a2)
    v12 = a1 + 21;
  else
    v13 = 18;
  v14 = a1[v13];
  v15 = 0x6DB6DB6DB6DB6DB7 * ((v12[1] - v14) >> 3);
  if (v11 >= v15 || (v16 = *v9, v17 = v16 + v11 - 1, v17 >= v15))
    ZinAssertImpl("Something is wrong in the realm of spatial splitting");
  v18 = *((_QWORD *)v14 + 7 * v11 + 1);
  v19 = *((_QWORD *)v14 + 7 * v17 + 1);
  v37 = v19 >= v18;
  v20 = v19 - v18;
  if (!v37)
    ZinAssertImpl("Invalid Spatial Split Calculation");
  v21 = (char *)v14 + 56 * v17;
  v22 = *((_QWORD *)v21 + 2) + v20;
  v23 = v22 + v21[25];
  if (!v23)
    goto LABEL_46;
  v24 = (char *)v14 + 56 * v11;
  v25 = *(_QWORD *)v24;
  v26 = v24[24];
  v27 = 9;
  if (!a2)
    v27 = 8;
  v28 = a1[v27];
  v29 = *((_QWORD *)v21 + 4);
  v30 = 11;
  if (!a2)
    v30 = 10;
  v31 = a1[v30];
  v32 = 13;
  result = 96;
  if (!a2)
    v32 = 12;
  v34 = a1[v32];
  if (v31 == (ZinIrOpLayer *)2 && v34 == (ZinIrOpLayer *)1)
    v35 = (v25 + v26 + v29 + v22 - (unint64_t)v28) >> 1;
  else
    v35 = v25 + v26 + v29 - (_QWORD)v28 + (_QWORD)v34 * v23;
  v36 = v35 + 1;
  v37 = v36 < v16 || v36 - v16 >= 2;
  if (v37)
LABEL_46:
    ZinAssertImpl("Internal Spatial Split Error");
  if (a2 == 1)
    v38 = v8;
  else
    v38 = 1;
  if ((v38 & 1) != 0)
  {
    v37 = v36 >= v16;
    v39 = v36 - v16;
    if (!v37)
      v39 = 0;
    v40 = 136;
    if (!a2)
      v40 = 128;
    *(_QWORD *)(a4 + v40) = v11;
    v41 = 176;
    if (!a2)
      v41 = 168;
    *(_QWORD *)(a4 + v41) = v36;
    v42 = 216;
    if (!a2)
      v42 = 208;
    *(_QWORD *)(a4 + v42) = v39;
  }
  else
  {
    *(_QWORD *)(a4 + 120) = v11;
    *(_QWORD *)(a4 + 160) = v36;
    if (v36 > v16)
      ZinAssertImpl("Error in the realm of spatial splitting");
  }
  return result;
}

SplitPatternHandlerMgr *LayerTilingHelper::CalculateInputRegion(ZinIrOpLayer **a1, uint64_t a2, ZinTensorRegion *a3, __int128 *a4)
{
  uint64_t v7;
  int ConcatAxis;
  int v9;
  __int128 v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  ZinIrOpLayer **v15;
  ZinIrOpLayer *v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  SplitPatternHandlerMgr *result;
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;

  LayerTilingHelper::GetProgrammedOutRegion(a1, a3, (uint64_t)&v44);
  v7 = *((_QWORD *)*a1 + 8);
  if (*(_DWORD *)(v7 + 8) == 7)
  {
    ConcatAxis = ZinConcatLayerUtils::GetConcatAxis(*(_DWORD *)(v7 + 12));
    v9 = (_DWORD)a2 ? 4 : 3;
    if (v9 == ConcatAxis)
    {
      v10 = a4[3];
      v45[1] = a4[2];
      v46 = v10;
      v47 = a4[4];
      v11 = a4[1];
      v44 = *a4;
      v45[0] = v11;
    }
  }
  v12 = (unint64_t *)v45;
  if ((_DWORD)a2)
    v12 = (unint64_t *)v45 + 1;
  v13 = *v12;
  v14 = 21;
  if ((_DWORD)a2)
  {
    v15 = a1 + 21;
  }
  else
  {
    v14 = 18;
    v15 = a1 + 18;
  }
  v16 = a1[v14];
  v17 = 0x6DB6DB6DB6DB6DB7 * ((v15[1] - v16) >> 3);
  if (v17 <= v13)
    goto LABEL_32;
  v18 = &v47;
  if (!(_DWORD)a2)
    v18 = (__int128 *)((char *)&v46 + 8);
  v19 = v13 + *(_QWORD *)v18 - 1;
  if (v17 <= v19)
LABEL_32:
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v20 = *((_QWORD *)v16 + 7 * v13 + 1);
  v21 = *((_QWORD *)v16 + 7 * v19 + 1);
  v22 = v21 >= v20;
  v23 = v21 - v20;
  if (!v22)
    ZinAssertImpl("Invalid Spatial Split Calculation");
  v24 = *((_QWORD *)v16 + 7 * v13);
  v25 = (uint64_t)v16 + 56 * v13;
  v26 = *(unsigned __int8 *)(v25 + 24);
  v27 = (uint64_t)v16 + 56 * v19;
  v28 = *(_QWORD *)(v27 + 16);
  v29 = *(unsigned __int8 *)(v27 + 25);
  v30 = *(_QWORD *)(v27 + 32);
  v31 = *(_QWORD *)(v25 + 40);
  v32 = *(_QWORD *)(v27 + 48);
  v33 = v24 + v26;
  v34 = v20 - v31;
  v35 = 88;
  if (!(_DWORD)a2)
    v35 = 80;
  *(_QWORD *)((char *)a4 + v35) = v33;
  v36 = 104;
  if (!(_DWORD)a2)
    v36 = 96;
  *(_QWORD *)((char *)a4 + v36) = v30 - v31;
  v37 = 24;
  if (!(_DWORD)a2)
    v37 = 16;
  *(_QWORD *)((char *)a4 + v37) = v34;
  v38 = v28 + v29 + v23;
  v39 = v38 + v31 + v32;
  v40 = 64;
  if (!(_DWORD)a2)
    v40 = 56;
  *(_QWORD *)((char *)a4 + v40) = v39;
  v41 = v38 + v24 + v30;
  v42 = 200;
  if (!(_DWORD)a2)
    v42 = 192;
  *(_QWORD *)((char *)a4 + v42) = v41;
  result = a1[1];
  if (result)
  {
    result = (SplitPatternHandlerMgr *)SplitPatternHandlerMgr::IsLayerCreated(result, *a1);
    if ((_DWORD)result)
      return (SplitPatternHandlerMgr *)SplitPatternHandlerMgr::AdjustInputRegionOfTiledCombinedLayer((uint64_t)a1[1], (uint64_t)*a1, (uint64_t)a4, a2);
  }
  return result;
}

void LayerTilingHelper::ProduceConcatRegionAfterOutputNode(__int128 *a1@<X0>, __int128 **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  int64x2_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t ValueAt;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[48];
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;

  v5 = a1;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v52 = 0;
    v53 = 0;
  }
  else
  {
    do
    {
      v82 = *v6;
      v83 = v6[1];
      v8 = *((_QWORD *)v6 + 5);
      *(_QWORD *)v84 = *((_QWORD *)v6 + 4);
      v9 = *((_QWORD *)v6 + 6);
      v10 = *((_QWORD *)v6 + 9);
      v74 = *(int64x2_t *)((char *)v6 + 184);
      v75 = *(int64x2_t *)((char *)v6 + 56);
      v77 = *v6;
      v78 = v6[1];
      *(_QWORD *)&v79 = *((_QWORD *)v6 + 4);
      v11 = v92;
      if (v92 >= v93)
      {
        v15 = v91;
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((v92 - v91) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v93 - v91) >> 3) > v17)
          v17 = 0x999999999999999ALL * ((v93 - v91) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v93 - v91) >> 3) >= 0x333333333333333)
          v18 = 0x666666666666666;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v93, v18);
          v15 = v91;
          v11 = v92;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[40 * v16];
        *(_OWORD *)v20 = v82;
        *((_OWORD *)v20 + 1) = v83;
        *((_QWORD *)v20 + 4) = *(_QWORD *)v84;
        if (v11 == v15)
        {
          v24 = &v19[40 * v16];
        }
        else
        {
          v21 = &v19[40 * v16];
          do
          {
            v22 = *(_OWORD *)(v11 - 40);
            v23 = *(_OWORD *)(v11 - 24);
            v24 = v21 - 40;
            *((_QWORD *)v21 - 1) = *((_QWORD *)v11 - 1);
            *(_OWORD *)(v21 - 24) = v23;
            *(_OWORD *)(v21 - 40) = v22;
            v11 -= 40;
            v21 -= 40;
          }
          while (v11 != v15);
        }
        v14 = v20 + 40;
        v91 = v24;
        v92 = v20 + 40;
        v93 = &v19[40 * v18];
        if (v15)
          operator delete(v15);
      }
      else
      {
        v12 = *v6;
        v13 = v6[1];
        *((_QWORD *)v92 + 4) = *((_QWORD *)v6 + 4);
        *(_OWORD *)v11 = v12;
        *((_OWORD *)v11 + 1) = v13;
        v14 = v11 + 40;
      }
      v25 = vsubq_s64(v75, v74);
      v92 = v14;
      v26 = v89;
      v76 = v25;
      if (v89 >= v90)
      {
        v28 = v88;
        v29 = 0xCCCCCCCCCCCCCCCDLL * ((v89 - v88) >> 4);
        v30 = v29 + 1;
        if (v29 + 1 > 0x333333333333333)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v90 - v88) >> 4) > v30)
          v30 = 0x999999999999999ALL * ((v90 - v88) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((v90 - v88) >> 4) >= 0x199999999999999)
          v31 = 0x333333333333333;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v90, v31);
          v28 = v88;
          v26 = v89;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[80 * v29];
        *(_OWORD *)v33 = v77;
        *((_OWORD *)v33 + 1) = v78;
        *((_QWORD *)v33 + 4) = v79;
        *((_QWORD *)v33 + 5) = v8;
        *((_QWORD *)v33 + 6) = v9;
        *(int64x2_t *)(v33 + 56) = v76;
        *((_QWORD *)v33 + 9) = v10;
        if (v26 == v28)
        {
          v38 = &v32[80 * v29];
        }
        else
        {
          v34 = &v32[80 * v29];
          do
          {
            *((_OWORD *)v34 - 5) = *((_OWORD *)v26 - 5);
            v35 = *((_OWORD *)v26 - 4);
            v36 = *((_OWORD *)v26 - 3);
            v37 = *((_OWORD *)v26 - 1);
            v38 = v34 - 80;
            *((_OWORD *)v34 - 2) = *((_OWORD *)v26 - 2);
            *((_OWORD *)v34 - 1) = v37;
            *((_OWORD *)v34 - 4) = v35;
            *((_OWORD *)v34 - 3) = v36;
            v26 -= 80;
            v34 -= 80;
          }
          while (v26 != v28);
        }
        v27 = v33 + 80;
        v88 = v38;
        v89 = v33 + 80;
        v90 = &v32[80 * v31];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_OWORD *)v89 = v77;
        *((_OWORD *)v26 + 1) = v78;
        *((_QWORD *)v26 + 4) = v79;
        *((_QWORD *)v26 + 5) = v8;
        *((_QWORD *)v26 + 6) = v9;
        *(int64x2_t *)(v26 + 56) = v25;
        *((_QWORD *)v26 + 9) = v10;
        v27 = v26 + 80;
      }
      v89 = v27;
      v39 = v86;
      if (v86 >= v87)
      {
        v41 = v85;
        v42 = 0x8E38E38E38E38E39 * ((v86 - v85) >> 3);
        v43 = v42 + 1;
        if (v42 + 1 > 0x38E38E38E38E38ELL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((v87 - v85) >> 3) > v43)
          v43 = 0x1C71C71C71C71C72 * ((v87 - v85) >> 3);
        if (0x8E38E38E38E38E39 * ((v87 - v85) >> 3) >= 0x1C71C71C71C71C7)
          v44 = 0x38E38E38E38E38ELL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>((uint64_t)&v87, v44);
          v41 = v85;
          v39 = v86;
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[8 * ((v86 - v85) >> 3)];
        *(_QWORD *)v46 = v8;
        *((_QWORD *)v46 + 1) = v9;
        *((int64x2_t *)v46 + 1) = v76;
        *((_QWORD *)v46 + 4) = v10;
        *(_OWORD *)(v46 + 40) = 0u;
        *(_OWORD *)(v46 + 56) = 0u;
        if (v39 == v41)
        {
          v51 = &v45[72 * v42];
        }
        else
        {
          v47 = &v45[72 * v42];
          do
          {
            *(_OWORD *)(v47 - 72) = *(_OWORD *)(v39 - 72);
            v48 = *(_OWORD *)(v39 - 56);
            v49 = *(_OWORD *)(v39 - 40);
            v50 = *(_OWORD *)(v39 - 24);
            v51 = v47 - 72;
            *((_QWORD *)v47 - 1) = *((_QWORD *)v39 - 1);
            *(_OWORD *)(v47 - 24) = v50;
            *(_OWORD *)(v47 - 40) = v49;
            *(_OWORD *)(v47 - 56) = v48;
            v39 -= 72;
            v47 -= 72;
          }
          while (v39 != v41);
        }
        v40 = v46 + 72;
        v85 = v51;
        v86 = v46 + 72;
        v87 = &v45[72 * v44];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_QWORD *)v86 = v8;
        *((_QWORD *)v39 + 1) = v9;
        *((int64x2_t *)v39 + 1) = v76;
        *((_QWORD *)v39 + 4) = v10;
        *(_OWORD *)(v39 + 40) = 0u;
        v40 = v39 + 72;
        *(_OWORD *)(v39 + 56) = 0u;
      }
      v86 = v40;
      v6 += 14;
    }
    while (v6 != v7);
    v52 = v88;
    v53 = v89;
    v5 = a1;
  }
  if (v53 - (char *)v52 != 80)
  {
    v54 = 0;
    v55 = 0;
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (char *)v52) >> 4);
    do
    {
      if (v56 <= v55)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v57 = &v52[v54];
      v82 = *v57;
      v58 = v57[1];
      v59 = v57[2];
      v60 = v57[4];
      *(_OWORD *)&v84[16] = v57[3];
      *(_OWORD *)&v84[32] = v60;
      v83 = v58;
      *(_OWORD *)v84 = v59;
      if (v56 <= ++v55)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v77 = v57[5];
      v61 = v57[6];
      v62 = v57[7];
      v63 = v57[9];
      v80 = v57[8];
      v81 = v63;
      v78 = v61;
      v79 = v62;
      ValueAt = GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v82, a3);
      v65 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v84[8], a3);
      if (v65 + ValueAt != GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v77, a3))
        ZinAssertImpl("Spatial Split Internal Error");
      v52 = v88;
      v53 = v89;
      v56 = 0xCCCCCCCCCCCCCCCDLL * ((v89 - v88) >> 4);
      v54 += 5;
    }
    while (v56 - 1 > v55);
  }
  *(_QWORD *)v84 = 0;
  v82 = 0u;
  v83 = 0u;
  *(int64x2_t *)&v84[8] = vdupq_n_s64(1uLL);
  *(_OWORD *)&v84[24] = *(_OWORD *)&v84[8];
  *(_QWORD *)&v84[40] = 1;
  v66 = *v52;
  v67 = v52[1];
  *(_QWORD *)v84 = *((_QWORD *)v52 + 4);
  v82 = v66;
  v83 = v67;
  v68 = *((_QWORD *)v52 + 9);
  v69 = *(_OWORD *)((char *)v52 + 56);
  *(_OWORD *)&v84[8] = *(_OWORD *)((char *)v52 + 40);
  *(_OWORD *)&v84[24] = v69;
  *(_QWORD *)&v84[40] = v68;
  v70 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)v53 - 10, a3);
  v71 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v89 - 5, a3);
  if (SetValueAtDimension<ZinTensorDimensions>(&v84[8], a3, v71 + v70))
    ZinAssertImpl("Spatial Splitting Intenral Error");
  TiledLayerTensorRegions::TiledLayerTensorRegions(a4, v5, &v82, (uint64_t)&v91, (uint64_t)&v85, (uint64_t)&v88, 0, 0);
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
}

void sub_206F2EE20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(_QWORD *)(v1 - 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 144);
  if (v4)
  {
    *(_QWORD *)(v1 - 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 120);
  if (v5)
  {
    *(_QWORD *)(v1 - 112) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LayerTilingHelper::GetProgrammedOutRegion@<X0>(ZinIrOpLayer **this@<X0>, const ZinTensorRegion *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  uint64_t result;
  ZinIrOpLayer *v9;
  ZinReshapeLayer *v10;
  uint64_t v11;

  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a3 + 48) = v6;
  *(_OWORD *)(a3 + 64) = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v7;
  result = ZinIrOpLayer::IsANELayer(*this);
  if ((_DWORD)result)
  {
    v9 = *this;
    result = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 408))(v9);
    if ((_DWORD)result)
    {
      v10 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v9 + 416))(v9);
      v11 = ZinReshapeLayer::GetReshapeInfo(v10) + 16;
      ZinIrTransposeUnitInfo::InverseTransposeDimensions<ZinTensorDimensions>((_QWORD *)a2 + 5, v11, (_QWORD *)(a3 + 40));
      return ZinIrTransposeUnitInfo::InverseTransposeDimensions<ZinTensorPosition>(a2, v11, (_QWORD *)a3);
    }
  }
  return result;
}

uint64_t ZinIrTransposeUnitInfo::InverseTransposeDimensions<ZinTensorPosition>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *(_DWORD **)a2;
  v4 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v4)
  {
    while (2)
    {
      v5 = a1;
      switch(v3[1])
      {
        case 0:
          goto LABEL_7;
        case 1:
          v5 = a1 + 4;
          goto LABEL_7;
        case 2:
          v5 = a1 + 1;
          goto LABEL_7;
        case 3:
          v5 = a1 + 2;
          goto LABEL_7;
        case 4:
          v5 = a1 + 3;
LABEL_7:
          v6 = a3 + 3;
          switch(*v3)
          {
            case 0:
              v6 = a3;
              break;
            case 1:
              v6 = a3 + 4;
              break;
            case 2:
              v6 = a3 + 1;
              break;
            case 3:
              v6 = a3 + 2;
              break;
            case 4:
              break;
            default:
              return 3;
          }
          *v6 = *v5;
          v3 += 2;
          if (v3 == v4)
            return 0;
          continue;
        default:
          return 3;
      }
    }
  }
  return 0;
}

BOOL TiledLayerTensorRegions::IsPerformanceEquivalent(TiledLayerTensorRegions *this, const TiledLayerTensorRegions *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  if (v3 - v2 != *((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)
    || (v6 = (char *)*((_QWORD *)this + 13),
        v7 = (char *)*((_QWORD *)this + 14),
        v8 = v7 - v6,
        v9 = (_QWORD *)*((_QWORD *)a2 + 13),
        v10 = *((_QWORD *)a2 + 14) - (_QWORD)v9,
        v7 - v6 != v10))
  {
    ZinAssertImpl("Spatial Split Internal Error");
  }
  if (v3 == v2)
  {
LABEL_9:
    if (v8 == v10)
    {
      while (v6 != v7)
      {
        result = LogicalDimensions::operator==(v6, v9);
        if (!result)
          return result;
        v6 += 72;
        v9 += 9;
      }
      if (!ZinTensorDimensions::operator!=((_QWORD *)this + 5, (_QWORD *)a2 + 5)
        && *((_QWORD *)this + 23) == *((_QWORD *)a2 + 23)
        && *((_QWORD *)this + 24) == *((_QWORD *)a2 + 24))
      {
        return 1;
      }
    }
  }
  else
  {
    v11 = 0;
    v12 = 40;
    while (1)
    {
      v13 = *((_QWORD *)a2 + 16);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 17) - v13) >> 4) <= v11)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      if (ZinTensorDimensions::operator!=((_QWORD *)(v2 + v12), (_QWORD *)(v13 + v12)))
        break;
      ++v11;
      v2 = *((_QWORD *)this + 16);
      v12 += 80;
      if (v11 >= 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 17) - v2) >> 4))
      {
        v6 = (char *)*((_QWORD *)this + 13);
        v7 = (char *)*((_QWORD *)this + 14);
        v9 = (_QWORD *)*((_QWORD *)a2 + 13);
        v8 = v7 - v6;
        v10 = *((_QWORD *)a2 + 14) - (_QWORD)v9;
        goto LABEL_9;
      }
    }
  }
  return 0;
}

uint64_t SplitInfo::Construct(ProducerConsumerChain *a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, ZinIrOpLayer *a7)
{
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15[3];
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void **v26;
  uint8_t buf[24];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v16) = 0;
  v25 = 0;
  memset(v15, 0, sizeof(v15));
  v12 = LayerTilingHelper::Create(a1, a7, v15, (LayerTilingHelper *)a4);
  if (!(_DWORD)v12)
  {
    v12 = SplitInfo::TryToConstruct(a1, a2, a3, (uint64_t)&v16, 0, a6, v15);
    if (!(_DWORD)v12)
    {
      if (v25)
      {
        if (&v16 != (uint64_t **)a4)
        {
          std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__assign_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(a4, v16, v17, 0xAAAAAAAAAAAAAAABLL * (v17 - v16));
          *(_DWORD *)(a4 + 56) = v19;
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *> *>>((_QWORD *)(a4 + 24), v18, 0);
          *(_DWORD *)(a4 + 96) = v21;
          std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a4 + 64), v20, 0);
        }
        v12 = 0;
        *(_OWORD *)(a4 + 104) = v22;
        *(_OWORD *)(a4 + 120) = v23;
        *(_BYTE *)(a4 + 136) = v24;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          ProducerConsumerChain::ToString(a1, v14);
          SplitInfo::Construct(a3, a2, (char *)v14, buf);
        }
        v12 = 3;
      }
    }
  }
  v26 = (void **)v15;
  std::vector<LayerTilingHelper>::__destroy_vector::operator()[abi:ne180100](&v26);
  std::__optional_destruct_base<SplitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
  return v12;
}

void sub_206F2F2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t SplitInfo::TryToConstruct(ProducerConsumerChain *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v87[4];
  void *v88[28];
  char v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[32];
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  uint64_t v97;
  int v98;
  _OWORD v99[2];
  int v100;
  int64x2_t v101;
  int64x2_t v102;

  std::__optional_destruct_base<SplitInfo,false>::reset[abi:ne180100](a4);
  if (!a2
    || *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 2) - 8)
                                                                                + 40))(*(_QWORD *)(*((_QWORD *)a1 + 2) - 8), 0, 0)+ 64) < a2)
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      SplitInfo::TryToConstruct(v12, v13, v14, v15, v16, v17, v18, v19);
    return 3;
  }
  if (!a3
    || *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 2) - 8)
                                                                                + 40))(*(_QWORD *)(*((_QWORD *)a1 + 2) - 8), 0, 0)+ 72) < a3)
  {
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      SplitInfo::TryToConstruct(v20, v21, v22, v23, v24, v25, v26, v27);
    return 3;
  }
  v78 = a2;
  v76 = a4;
  v97 = 0;
  memset(v96, 0, sizeof(v96));
  v95 = 0u;
  v98 = 1065353216;
  memset(v99, 0, sizeof(v99));
  v100 = 1065353216;
  v101 = vdupq_n_s64(1uLL);
  v102 = v101;
  v30 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 2) - 8) + 40))(*(_QWORD *)(*((_QWORD *)a1 + 2) - 8), 0, 0);
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(*(_QWORD *)v30 + 64);
  if (v32 < 1)
  {
LABEL_42:
    std::optional<SplitInfo>::operator=[abi:ne180100]<SplitInfo&,void>(v76, (uint64_t)&v95);
    v28 = 0;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v83 = *(_OWORD *)(v31 + 48);
    v36 = *(_QWORD *)(v31 + 72);
    v82 = *(_QWORD *)(v31 + 80);
    v79 = v36;
    v80 = a3;
    v77 = *(_QWORD *)(*(_QWORD *)v30 + 64);
    while (1)
    {
      v37 = v32 - v33;
      if (v32 - v33 >= v78)
        v37 = v78;
      v84 = v37;
      if (v36 >= 1)
        break;
LABEL_41:
      v32 = v77;
      v33 += v78;
      ++v35;
      if (v33 >= v77)
        goto LABEL_42;
    }
    v38 = 0;
    v81 = v33;
    while (1)
    {
      v39 = *((_QWORD *)&v95 + 1);
      v85 = v38;
      if (*((_QWORD *)&v95 + 1) >= *(_QWORD *)&v96[0])
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v95 + 1) - v95) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v96[0] - v95) >> 3) > v42)
          v42 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v96[0] - v95) >> 3);
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v96[0] - v95) >> 3) >= 0x555555555555555
            ? 0xAAAAAAAAAAAAAAALL
            : v42;
        v88[4] = v96;
        v44 = v43 ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v96, v43) : 0;
        v45 = &v44[24 * v41];
        v88[0] = v44;
        v88[1] = v45;
        v88[3] = &v44[24 * v43];
        *(_QWORD *)v45 = 0;
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 2) = 0;
        v88[2] = v45 + 24;
        std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__swap_out_circular_buffer((uint64_t *)&v95, v88);
        v40 = *((_QWORD *)&v95 + 1);
        std::__split_buffer<std::vector<std::optional<TiledLayerTensorRegions>>>::~__split_buffer(v88);
        v38 = v85;
      }
      else
      {
        **((_QWORD **)&v95 + 1) = 0;
        *(_QWORD *)(v39 + 8) = 0;
        v40 = v39 + 24;
        *(_QWORD *)(v39 + 16) = 0;
      }
      *((_QWORD *)&v95 + 1) = v40;
      v46 = v36 - v38;
      if (v36 - v38 >= (uint64_t)a3)
        v46 = a3;
      *(_QWORD *)&v92 = v33;
      *((_QWORD *)&v92 + 1) = v38;
      v91 = 0uLL;
      *(_QWORD *)v93 = 0;
      *(_QWORD *)&v93[24] = v84;
      *(_QWORD *)&v94 = v46;
      *(_OWORD *)&v93[8] = v83;
      *((_QWORD *)&v94 + 1) = v82;
      v47 = *((_QWORD *)a1 + 1);
      v48 = (*((_QWORD *)a1 + 2) - v47) >> 3;
      v49 = v48 - 1;
      v90 = 0;
      v50 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v47 + 8 * (v48 - 1)) + 32))(*(_QWORD *)(v47 + 8 * (v48 - 1)), 0, 0);
      ZinTensorFormatGetSize(*(_DWORD *)(v50 + 88), &v90);
      if ((unint64_t)(v90 * *((_QWORD *)&v92 + 1)) % *(_QWORD *)(a6 + 528))
        break;
      v51 = (_QWORD *)(v40 - 24);
      std::vector<std::optional<TiledLayerTensorRegions>>::resize((uint64_t *)(v40 - 24), v48);
      v52 = *a7;
      if (0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 6) <= v49)
LABEL_52:
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v53 = 192 * v48 - 192;
      v54 = 232 * v48;
      while (1)
      {
        v87[0] = v49;
        v87[1] = 0;
        v87[2] = v35;
        v87[3] = v34;
        LayerTilingHelper::ToProduce((ZinIrOpLayer **)(v52 + v53), (const TiledLayerTensorRegions::Id *)v87, (const ZinTensorRegion *)&v91, (uint64_t)v88);
        if (!v89)
          ZinAssertImpl("Spatial Splitting Internal Error");
        std::__optional_storage_base<TiledLayerTensorRegions,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<TiledLayerTensorRegions,false> const&>((TiledLayerTensorRegions *)(*v51 + v54 - 232), (TiledLayerTensorRegions *)v88);
        v55 = *v51 + v54;
        if (!*(_BYTE *)(v55 - 8))
          std::__throw_bad_optional_access[abi:ne180100]();
        v56 = (__int128 *)(*(_QWORD *)(v55 - 104)
                         + 80
                         * ProducerConsumerChain::GetIncomingLayerIndexInChain(a1, *(const ZinANELayer **)(*((_QWORD *)a1 + 1) + 8 * v49)));
        v91 = *v56;
        v57 = v56[1];
        v58 = v56[2];
        v59 = v56[4];
        *(_OWORD *)&v93[16] = v56[3];
        v94 = v59;
        v92 = v57;
        *(_OWORD *)v93 = v58;
        if (!v49)
          break;
        --v49;
        std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v88);
        v52 = *a7;
        v53 -= 192;
        v54 -= 232;
        if (0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 6) <= v49)
          goto LABEL_52;
      }
      if ((unint64_t)(v90 * *((_QWORD *)&v92 + 1)) % *(_QWORD *)(a6 + 528))
      {
        v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v68)
          SplitInfo::TryToConstruct(v68, v69, v70, v71, v72, v73, v74, v75);
        std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v88);
        goto LABEL_48;
      }
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v88);
      v36 = v79;
      a3 = v80;
      v38 = v85 + v80;
      ++v34;
      v33 = v81;
      if ((uint64_t)(v85 + v80) >= v79)
        goto LABEL_41;
    }
    v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v60)
      SplitInfo::TryToConstruct(v60, v61, v62, v63, v64, v65, v66, v67);
LABEL_48:
    v28 = 3;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v99);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)v96 + 8);
  v88[0] = &v95;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
  return v28;
}

void sub_206F2F83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  SplitInfo::~SplitInfo((void **)(v1 - 240));
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<SplitInfo,false>::reset[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 144))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 24);
    v2 = (void **)a1;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    *(_BYTE *)(a1 + 144) = 0;
  }
}

uint64_t std::optional<SplitInfo>::operator=[abi:ne180100]<SplitInfo&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 144))
  {
    if (a1 != a2)
    {
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__assign_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *> *>>((_QWORD *)(a1 + 24), *(_QWORD **)(a2 + 40), 0);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a1 + 64), *(_QWORD **)(a2 + 80), 0);
    }
    v4 = *(_OWORD *)(a2 + 104);
    v5 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v5;
    *(_OWORD *)(a1 + 104) = v4;
  }
  else
  {
    std::construct_at[abi:ne180100]<SplitInfo,SplitInfo&,SplitInfo*>(a1, a2);
    *(_BYTE *)(a1 + 144) = 1;
  }
  return a1;
}

_QWORD *SplitInfoMetrics::SplitInfoMetrics(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v11;
  uint64_t v12;
  ZinIrTensor *v13;
  ZinIrTensor *RootTensor;
  uint64_t v15;
  uint64_t v16;
  ZinIrTensor **v17;
  ZinIrTensor *v18;
  uint64_t v19;
  ZinIrOpLayer **v20;
  ZinIrOpLayer **v21;
  unint64_t v22;
  ZinIrOpLayer *v23;
  ZinIrKernel *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL EnableKernelRewind;
  ZinIrOpLayer **v31;
  ZinIrOpLayer **v32;
  unint64_t v33;
  unint64_t *v34;
  ZinIrOpLayer *v35;
  ZinIrKernel *v36;
  int WeightFormat;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  ZinIrKernel *v50;

  *a1 = a5;
  a1[1] = a6;
  a1[2] = a3;
  v11 = (uint64_t)(*(_QWORD *)(a5 + 16) - *(_QWORD *)(a5 + 8)) >> 3;
  v50 = (ZinIrKernel *)1;
  v46 = (unint64_t **)(a1 + 7);
  std::vector<unsigned long>::vector(a1 + 7, v11, &v50);
  v48 = a2;
  a1[10] = a2;
  *((_DWORD *)a1 + 22) = a4;
  v12 = **(_QWORD **)(**(_QWORD **)(*a1 + 8) + 88);
  v13 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  RootTensor = ZinIrTensor::GetRootTensor(v13);
  a1[3] = SplitInfoMetrics::GetSize((SplitInfoMetrics *)a1, RootTensor, (ZinIrTensor *)((char *)RootTensor + 48));
  a1[4] = v15;
  v16 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) - 8);
  v17 = (ZinIrTensor **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 40))(v16, 0, 0);
  v18 = ZinIrTensor::GetRootTensor(*v17);
  a1[5] = SplitInfoMetrics::GetSize((SplitInfoMetrics *)a1, v18, (ZinIrTensor *)((char *)v18 + 48));
  a1[6] = v19;
  a1[12] = 0;
  v20 = *(ZinIrOpLayer ***)(*a1 + 8);
  v21 = *(ZinIrOpLayer ***)(a5 + 16);
  if (v20 == v21)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = *v20;
      if (!ZinIrOpLayer::IsPELayer(*v20))
      {
        (*(void (**)(ZinIrKernel **__return_ptr, ZinIrOpLayer *, uint64_t))(*(_QWORD *)v23 + 568))(&v50, v23, 1);
        v24 = v50;
        if (v50)
        {
          if (*((_QWORD *)v50 + 73))
            v25 = 1;
          else
            v25 = *((_QWORD *)v50 + 75) != 0;
          v50 = 0;
          ZinIrKernel::~ZinIrKernel(v24);
          MEMORY[0x20BD002F8]();
          v22 += v25;
        }
      }
      ++v20;
    }
    while (v20 != v21);
    v20 = *(ZinIrOpLayer ***)(*a1 + 8);
  }
  v28 = a6;
  v26 = *a6;
  v27 = v28[1];
  v29 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)*v20 + 11) + 32))(**((_QWORD **)*v20 + 11), 0, 0);
  EnableKernelRewind = ZinIrCompilerParameters::getEnableKernelRewind((ZinIrCompilerParameters *)(*(_QWORD *)(v29 + 16)
                                                                                                + 176));
  v31 = *(ZinIrOpLayer ***)(*a1 + 8);
  v32 = *(ZinIrOpLayer ***)(*a1 + 16);
  if (v31 != v32)
  {
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3);
    v34 = *v46;
    if (EnableKernelRewind && v22 < 2)
      v33 = 1;
    v47 = v33;
    do
    {
      v35 = *v31;
      if (!ZinIrOpLayer::IsPELayer(*v31))
      {
        (*(void (**)(ZinIrKernel **__return_ptr, ZinIrOpLayer *, _QWORD))(*(_QWORD *)v35 + 568))(&v50, v35, 0);
        v36 = v50;
        if (v50)
        {
          if (*((_QWORD *)v50 + 73) || *((_QWORD *)v50 + 75))
          {
            v49 = 0;
            WeightFormat = ZinIrKernel::GetWeightFormat(v50);
            ZinKernelFormatGetBitDepth(WeightFormat, &v49);
            v38 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v35 + 11) + 32))(**((_QWORD **)v35 + 11), 0, 0)+ 56);
            v39 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v35 + 32))(v35, 0, 0)+ 56);
            v40 = *((_QWORD *)v36 + 33);
            v42 = v49;
            v41 = *((_QWORD *)v36 + 34);
            v43 = (unint64_t)(v39 * v38 * v40 * v41)
                / *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v35 + 11) + 32))(**((_QWORD **)v35 + 11), 0, 0)+ 48)* (v42/ 8);
            v44 = v43 / (*(_QWORD *)(v48 + 480) * *(int *)(v48 + 8));
            if (v44 <= 1)
              v44 = 1;
            *v34++ = v44;
            a1[12] += v43 * v47;
            v36 = v50;
            v50 = 0;
            if (!v36)
              goto LABEL_26;
          }
          else
          {
            v50 = 0;
          }
          ZinIrKernel::~ZinIrKernel(v36);
          MEMORY[0x20BD002F8]();
        }
      }
LABEL_26:
      ++v31;
    }
    while (v31 != v32);
  }
  return a1;
}

void sub_206F2FCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v14 + 64) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SplitInfoMetrics::GetSize(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ZinTensorFormatGetSize(a2, &v8);
  v5 = *a3 * a3[2] * a3[1];
  v6 = v5 * ZinAlignPower2(a3[3] * v8, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 416));
  ZinAlignPower2(a3[3] * v8, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 528));
  return v6;
}

uint64_t SplitInfoMetrics::GetSize(SplitInfoMetrics *this, const ZinIrTensor *a2, const ZinTensorDimensions *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v5 = *((_OWORD *)a3 + 1);
  v10 = *(_OWORD *)a3;
  v11 = v5;
  v12 = *((_QWORD *)a3 + 4);
  v6 = *((_QWORD *)a2 + 12);
  if (v6)
  {
    if (*(_DWORD *)(*(_QWORD *)(v6 + 64) + 8) == 85)
    {
      v7 = *(_QWORD *)(v6 + 432);
      if (v7)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 136) + 448) & 0x40) != 0)
        {
          *(_QWORD *)&v11 = ZinAlignPower2(*((_QWORD *)a3 + 2), 2);
          *((_QWORD *)&v11 + 1) = ZinAlignPower2(*((_QWORD *)a3 + 3), 2);
        }
      }
    }
  }
  return SplitInfoMetrics::GetSize((uint64_t)this, *((_DWORD *)a2 + 22), &v10);
}

uint64_t SplitInfoMetrics::GetNonResidentFootprintAtLayer(SplitInfoMetrics *this, unint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const ZinANELayer *v11;
  unint64_t v12;
  unint64_t IncomingLayerIndexInChain;
  const ZinIrTensor *v14;
  const ZinTensorDimensions *v15;
  uint64_t v16;
  uint64_t Size;
  uint64_t v18;
  uint64_t v19;
  const ZinIrTensor *v20;
  uint64_t v21;
  const ZinTensorDimensions *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL4 v32;
  uint64_t v33;
  _BOOL4 v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3) <= a3)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v7 = (_QWORD *)(*v4 + 24 * a3);
  if (0x34F72C234F72C235 * ((uint64_t)(v7[1] - *v7) >> 3) <= a2)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v8 = *v7 + 232 * a2;
  if (!*(_BYTE *)(v8 + 224))
    ZinAssertImpl("Internal spatial splitting error");
  v9 = *(_QWORD *)(*(_QWORD *)this + 8);
  v10 = (*(_QWORD *)(*(_QWORD *)this + 16) - v9) >> 3;
  if (v10 <= a2)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v11 = *(const ZinANELayer **)(v9 + 8 * a2);
  v12 = v10 - 1;
  IncomingLayerIndexInChain = ProducerConsumerChain::GetIncomingLayerIndexInChain(*(ProducerConsumerChain **)this, v11);
  v14 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)v11 + 11) + 32))(**((_QWORD **)v11 + 11), 0, 0);
  if (a2)
  {
    v15 = (const ZinTensorDimensions *)(*(_QWORD *)(v8 + 128) + 80 * IncomingLayerIndexInChain + 40);
  }
  else
  {
    v16 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)this + 8) + 88);
    v15 = (const ZinTensorDimensions *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0)+ 48);
  }
  Size = SplitInfoMetrics::GetSize(this, v14, v15);
  v19 = v18;
  v20 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinANELayer *, _QWORD, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0, 0);
  if (v12 == a2)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) - 8);
    v22 = (const ZinTensorDimensions *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 40))(v21, 0, 0)+ 48);
  }
  else
  {
    v22 = (const ZinTensorDimensions *)(v8 + 40);
  }
  v23 = SplitInfoMetrics::GetSize(this, v20, v22);
  v25 = v24;
  if (*((_DWORD *)this + 22) == 1)
  {
    v26 = 1;
  }
  else
  {
    v27 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)this + 8) + 88);
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0);
    if ((unint64_t)SplitInfoMetrics::GetSize(this, (const ZinIrTensor *)v28, (const ZinTensorDimensions *)(v28 + 6)) <= *((_QWORD *)this + 2))
    {
      v29 = v28[13];
      if (v29)
        v26 = *(_DWORD *)(v29 + 96) == 2;
      else
        v26 = 0;
    }
    else
    {
      v26 = 1;
    }
    if (*((_DWORD *)this + 22) != 1)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) - 8);
      v31 = *(_QWORD **)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v30 + 40))(v30, 0, 0);
      if ((unint64_t)SplitInfoMetrics::GetSize(this, (const ZinIrTensor *)v31, (const ZinTensorDimensions *)(v31 + 6)) <= *((_QWORD *)this + 2))
      {
        v46 = v31[13];
        if (v46)
          v32 = *(_DWORD *)(v46 + 96) == 2;
        else
          v32 = 0;
        goto LABEL_21;
      }
    }
  }
  v32 = 1;
LABEL_21:
  v33 = 0;
  v35 = a3 < 2 && a2 + 1 != (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 3;
  v36 = 0;
  v37 = a3 + 1 < 0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 3)
     || a2 == 0;
  if (v37 && !v26)
  {
    v36 = *((_QWORD *)this + 3);
    if (v36 >= *((_QWORD *)this + 2))
    {
      v33 = 0;
      v36 = 0;
    }
    else
    {
      v33 = *((_QWORD *)this + 4);
    }
  }
  if (v35 || v32)
  {
    v38 = *((_QWORD *)this + 2);
  }
  else
  {
    v39 = *((_QWORD *)this + 5);
    v38 = *((_QWORD *)this + 2);
    if (v39 < v38)
    {
      v36 += v39;
      v33 += *((_QWORD *)this + 6);
    }
  }
  if (a2)
    v40 = v19;
  else
    v40 = 0;
  if (a2)
    v41 = Size;
  else
    v41 = 0;
  if (v12 == a2)
    v42 = 0;
  else
    v42 = v25;
  v43 = v42 + v33 + v40;
  if (v12 == a2)
    v44 = 0;
  else
    v44 = v23;
  if (v44 + v36 + v41 <= v38)
    return 0;
  else
    return v43;
}

unint64_t SplitInfoMetrics::GetWorstNonResidentFootprintRequirement(SplitInfoMetrics *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t NonResidentFootprintAtLayer;
  unint64_t v10;
  unint64_t v11;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = *v1;
  v2 = v1[1];
  if (v2 == *v1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)this;
  do
  {
    if (*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8) != 8)
    {
      v8 = 0;
      do
      {
        NonResidentFootprintAtLayer = SplitInfoMetrics::GetNonResidentFootprintAtLayer(this, v8++, v5);
        v10 = SplitInfoMetrics::GetNonResidentFootprintAtLayer(this, v8, v5);
        if (NonResidentFootprintAtLayer <= v10)
          v11 = v10;
        else
          v11 = NonResidentFootprintAtLayer;
        if (v6 <= v11)
          v6 = v11;
        v7 = *(_QWORD *)this;
      }
      while (v8 < ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 3) - 1);
      v3 = *v1;
      v2 = v1[1];
    }
    ++v5;
  }
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3));
  return v6;
}

uint64_t SplitInfoMetrics::GetKOpCount(SplitInfoMetrics *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = *v1;
  v3 = v1[1] - *v1;
  if (!v3)
    return 0;
  result = 0;
  v6 = 0;
  v7 = v3 / 24;
  v8 = *(_QWORD *)this;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = (v10 - v9) >> 3;
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = (v10 - v9) >> 3;
  if (v7 <= 1)
    v13 = 1;
  else
    v13 = v7;
  do
  {
    if (v10 != v9)
    {
      v14 = 0;
      v15 = (_QWORD *)(v2 + 24 * v6);
      v16 = *v15 + 128;
      do
      {
        if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(v2 + 24 * v6 + 8) - *v15) >> 3) == v14)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        if (!*(_BYTE *)(v16 + 96))
          ZinAssertImpl("Internal spatial splitting error", 0x34F72C234F72C235, 232);
        if (v11 <= v14)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v17 = 0;
        v18 = *(_QWORD *)(v9 + 8 * v14);
        switch(*(_DWORD *)(*(_QWORD *)(v18 + 64) + 8))
        {
          case 'Q':
          case 'Z':
          case '\\':
            v19 = *v15 + 232 * v14;
            v20 = *(_QWORD *)(v16 - 72) * *(_QWORD *)(v16 - 64) * *(_QWORD *)(v16 - 88);
            goto LABEL_15;
          case 'S':
          case 'Y':
            v22 = *(_QWORD *)(*(_QWORD *)(v18 + 432) + 64);
            v20 = *(_QWORD *)(v16 - 72)
                * *(_QWORD *)(v16 - 64)
                * *(_QWORD *)(v16 - 88)
                * *(_QWORD *)(v16 - 80)
                * *(_QWORD *)(v22 + 16);
            v21 = (_QWORD *)(v22 + 24);
            goto LABEL_17;
          case 'U':
            v23 = *(_QWORD *)(v18 + 432);
            if (v23)
            {
              v20 = *(_QWORD *)(v16 - 72)
                  * *(_QWORD *)(v16 - 64)
                  * *(_QWORD *)(v16 - 88)
                  * *(_QWORD *)(*(_QWORD *)(v23 + 136) + 272)
                  * *(_QWORD *)(*(_QWORD *)(v23 + 136) + 264)
                  * *(_QWORD *)(v16 - 80);
              v19 = *(_QWORD *)v16;
LABEL_15:
              v21 = (_QWORD *)(v19 + 48);
            }
            else
            {
              v20 = *(_QWORD *)(v16 - 72) * *(_QWORD *)(v16 - 64) * *(_QWORD *)(v16 - 88);
              v21 = (_QWORD *)(v16 - 80);
            }
LABEL_17:
            v17 = v20 * *v21;
            break;
          default:
            break;
        }
        result += v17 >> 10;
        ++v14;
        v16 += 232;
      }
      while (v12 != v14);
    }
    ++v6;
  }
  while (v6 != v13);
  return result;
}

uint64_t SplitInfoMetrics::GetTempBytesAccessed(SplitInfoMetrics *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  const ZinTensorDimensions *v15;
  const ZinIrTensor *v16;
  uint64_t Size;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = *v1;
  if (v1[1] == *v1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)this;
    do
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)(v7 + 16);
      if (v9 - v8 != 8)
      {
        v10 = 0;
        v11 = 224;
        do
        {
          v12 = (_QWORD *)*((_QWORD *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3) <= v6)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v13 = (uint64_t *)(*v12 + 24 * v6);
          v14 = *v13;
          if (0x34F72C234F72C235 * ((v13[1] - *v13) >> 3) <= v10)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          if (!*(_BYTE *)(v14 + v11))
            ZinAssertImpl("Internal Spatial Split Error");
          if (v10 >= (v9 - v8) >> 3)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v15 = (const ZinTensorDimensions *)(v14 + v11 - 184);
          v16 = (const ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v8 + 8 * v10)
                                                                                       + 32))(*(_QWORD *)(v8 + 8 * v10), 0, 0);
          Size = SplitInfoMetrics::GetSize(this, v16, v15);
          v19 = *((_QWORD *)this + 7);
          if (v10 >= (*((_QWORD *)this + 8) - v19) >> 3)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v20 = *(_QWORD *)(v19 + 8 * v10);
          v4 += v20 * Size;
          v5 += v20 * v18;
          ++v10;
          v7 = *(_QWORD *)this;
          v8 = *(_QWORD *)(*(_QWORD *)this + 8);
          v9 = *(_QWORD *)(*(_QWORD *)this + 16);
          v11 += 232;
        }
        while (v10 < ((v9 - v8) >> 3) - 1);
        v1 = (uint64_t *)*((_QWORD *)this + 1);
        v2 = *v1;
      }
      ++v6;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v1[1] - v2) >> 3));
  }
  return 2 * v4;
}

uint64_t SplitInfoMetrics::GetInputBytesAccessed(SplitInfoMetrics *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const ZinIrTensor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Size;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v2 = **(_QWORD **)(**(_QWORD **)(*(_QWORD *)this + 8) + 88);
  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0, 0);
  v4 = **((_QWORD **)this + 1);
  if (*(_QWORD *)(*((_QWORD *)this + 1) + 8) == v4)
    return 0;
  v5 = (const ZinIrTensor *)v3;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = v4 + v6;
    v11 = *(_QWORD *)(v4 + v6);
    if (*(_QWORD *)(v10 + 8) == v11)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    if (!*(_BYTE *)(v11 + 224))
      ZinAssertImpl("Internal Spatial Splitting Error");
    Size = SplitInfoMetrics::GetSize(this, v5, (const ZinTensorDimensions *)(*(_QWORD *)(v11 + 128) + 40));
    v14 = (uint64_t *)*((_QWORD *)this + 7);
    if (*((uint64_t **)this + 8) == v14)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    v15 = *v14;
    v7 += v15 * Size;
    v8 += v15 * v13;
    ++v9;
    v4 = **((_QWORD **)this + 1);
    v6 += 24;
  }
  while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v4) >> 3));
  return v7;
}

uint64_t ZinMirSpatialSplitter::AddDeconvBypassIfNecessary(ZinMirSpatialSplitter *this, uint64_t **a2, const ProducerConsumerChain *a3, uint64_t a4, ZinIrOpLayer **a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  size_t v16;
  void *p_p;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  ZinIrOpLayer *v25;
  _QWORD *v26;
  _BOOL4 v27;
  uint64_t v28;
  _QWORD v30[2];
  void *__p;
  void *v32;
  void *v33;
  _BYTE v34[172];
  _QWORD *v35;
  _QWORD v36[3];
  char v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x24BDAC8D0];
  v5 = *a5;
  if (*(_DWORD *)(*((_QWORD *)*a5 + 8) + 8) == 85
    && (v5[17] || (v28 = v5[54]) != 0 && *(_QWORD *)(v28 + 136))
    && (*(_BYTE *)(ZinNEConvLayer::GetKernelDescriptor(*a5) + 272) & 0x40) != 0
    && (*(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + 32))(v5, 0, 0) + 64) & 1) != 0)
  {
    v10 = *((_QWORD *)a3 + 1);
    if (a4 + 1 < (unint64_t)((*((_QWORD *)a3 + 2) - v10) >> 3)
      && !ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(v10 + 8 * (a4 + 1))))
    {
      v11 = a4;
      do
      {
        v12 = *((_QWORD *)a3 + 1);
        v13 = v12 + 8 * v11;
        v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 64) + 8);
        if (v11 + 2 >= (unint64_t)((*((_QWORD *)a3 + 2) - v12) >> 3))
          break;
        ++v11;
      }
      while (!ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(v13 + 16)));
      if (v14 == 7)
        goto LABEL_12;
    }
    if (((uint64_t)(*((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1)) >> 3) - 1 == a4)
    {
LABEL_12:
      v15 = *a5;
      if (*((char *)*a5 + 47) >= 0)
        v16 = *((unsigned __int8 *)*a5 + 47);
      else
        v16 = *((_QWORD *)*a5 + 4);
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v16 + 7);
      if (SHIBYTE(v33) < 0)
        p_p = __p;
      if (v16)
      {
        v20 = (char *)v15[3];
        v19 = (char *)(v15 + 3);
        v18 = v20;
        if (v19[23] >= 0)
          v21 = v19;
        else
          v21 = v18;
        memmove(p_p, v21, v16);
      }
      strcpy((char *)p_p + v16, "/bypass");
      ZinObjectNameFactory::ZinObjectNameFactory(v36, &__p);
      if (SHIBYTE(v33) < 0)
        operator delete(__p);
      v22 = (uint64_t)*a5;
      v23 = *((_QWORD *)*a5 + 2);
      v24 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a5 + 32))(*a5, 0, 0) + 88);
      v35 = 0;
      v34[0] = 0;
      v34[168] = 0;
      v25 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v23, (uint64_t)v36, v22, v24, &v35, 0, (uint64_t)v34, 1.0);
      v26 = v35;
      v35 = 0;
      if (v26)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v35, v26);
      *((_BYTE *)v25 + 440) = 1;
      v38[0] = *a5;
      v30[0] = v38;
      v30[1] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&__p, v30);
      v27 = ZinIrOpLayerGraph::AddNode(a2, v25, (ZinIrOpLayer ***)&__p);
      __p = &unk_24C02BB18;
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      if (!v27
        || (ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)*a5, (uint64_t)v25, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
      {
        ZinAssertImpl("Failed to update graph");
      }
      *a5 = v25;
      v36[0] = off_24C01FBB0;
      if (v37 < 0)
        operator delete((void *)v36[1]);
    }
  }
  return 0;
}

void sub_206F30AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v13 - 120) = off_24C01FBB0;
  if (*(char *)(v13 - 89) < 0)
    operator delete(*(void **)(v13 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitter::Split(ZinIrOpLayer **this, uint64_t **a2, const ZinMirSpatialSplitter::SplitPlan *a3, LayerTilingHelper *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  const ZinMirSpatialSplitter::SplitPlan *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  ZinIrOpLayer *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t View;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t *GroupId;
  uint64_t **SpatialSplitTransform;
  _BOOL4 v47;
  int v48;
  _DWORD *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  const ZinIrTensor *v54;
  ZinIrTensor *v55;
  int v56;
  __int128 v57;
  __int128 v58;
  ZinIrOpLayer *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  void **v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  __int128 v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int64x2_t v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  ZinIrOpLayer **v96;
  char *v97;
  char *v98;
  ZinIrOpLayer *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  std::string::size_type v104;
  unsigned int v105;
  uint64_t v106;
  ZinIrOpLayer *v107;
  uint64_t *v108;
  std::__shared_weak_count *v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  size_t v112;
  _BYTE *v113;
  const void *v114;
  std::string *v115;
  __int128 v116;
  std::string *p_p;
  std::string::size_type size;
  std::string *v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  size_t v124;
  std::string *v125;
  const void *v126;
  std::string *v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string::size_type v134;
  std::string::size_type v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  ZinIrOpLayer **v140;
  std::string::size_type v141;
  char *v142;
  std::string::size_type v143;
  ZinIrOpLayer *v144;
  int v145;
  char v146;
  ZinIrOpLayer **v147;
  ZinIrOpLayer **v148;
  std::string::size_type v149;
  int64x2_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  ProducerConsumerChain *v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v159;
  _OWORD v164[2];
  int v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  _OWORD v168[2];
  uint64_t v169;
  int64x2_t v170;
  int64x2_t v171;
  uint64_t v172;
  std::string __p;
  _OWORD v174[2];
  uint64_t v175;
  int64x2_t v176;
  int64x2_t v177;
  uint64_t v178;
  std::string v179;
  _BYTE v180[32];
  uint64_t v181;
  std::string v182;
  ZinIrOpLayer *v183;
  void *v184[2];
  __int128 v185;
  uint64_t v186;
  void **v187[5];
  char v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  ZinIrOpLayer *v198;
  void *v199[2];
  char v200;
  uint64_t v201;

  v201 = *MEMORY[0x24BDAC8D0];
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v155 = (const ZinMirSpatialSplitter::SplitPlan *)((char *)a3 + 160);
  v5 = LayerTilingHelper::Create((_QWORD *)a3 + 20, this[6], &v195, a4);
  if (!(_DWORD)v5)
  {
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v6 = *(_QWORD *)(*((_QWORD *)a3 + 22) - 8);
    LOBYTE(v187[0]) = 0;
    v188 = 0;
    if (*(_BYTE *)(*((_QWORD *)this[2] + 1) + 492))
    {
      *(_OWORD *)v184 = 0u;
      v185 = 0u;
      LODWORD(v186) = 1065353216;
      std::optional<std::unordered_map<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>::operator=[abi:ne180100]<std::unordered_map<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,void>((uint64_t)v187, (uint64_t *)v184);
      std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)v184);
    }
    v152 = v6;
    v7 = a3;
    v154 = *(_QWORD *)a3;
    if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
    {
LABEL_131:
      v100 = *((_QWORD *)v7 + 21);
      if (*((_QWORD *)v7 + 22) != v100)
      {
        v101 = *(_QWORD *)(*(_QWORD *)v100 + 16);
        if (v101)
          ZinSpatialSplitTransform::TransferShapeDependentTransformsToContext((uint64_t)v187, v101);
      }
      v102 = *((_DWORD *)a3 + 58);
      v103 = operator new();
      v104 = v103;
      if (v102 == 1)
        v105 = 3;
      else
        v105 = 0;
      if (v102)
        v106 = v105;
      else
        v106 = 2;
      ZinIrConcatInfo::ZinIrConcatInfo(v103, v106, &v189);
      v179.__r_.__value_.__r.__words[0] = v104;
      v107 = (ZinIrOpLayer *)operator new();
      v108 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a3 + 22) - 8)
                                                                          + 40))(*(_QWORD *)(*((_QWORD *)a3 + 22) - 8), 0, 0);
      v109 = (std::__shared_weak_count *)v108[1];
      v166 = *v108;
      v167 = v109;
      if (v109)
      {
        p_shared_owners = (unint64_t *)&v109->__shared_owners_;
        do
          v111 = __ldxr(p_shared_owners);
        while (__stxr(v111 + 1, p_shared_owners));
      }
      if (*(char *)(v152 + 47) >= 0)
        v112 = *(unsigned __int8 *)(v152 + 47);
      else
        v112 = *(_QWORD *)(v152 + 32);
      v113 = v180;
      std::string::basic_string[abi:ne180100]((uint64_t)v180, v112 + 1);
      if (v180[23] < 0)
        v113 = *(_BYTE **)v180;
      if (v112)
      {
        if (*(char *)(v152 + 47) >= 0)
          v114 = (const void *)(v152 + 24);
        else
          v114 = *(const void **)(v152 + 24);
        memmove(v113, v114, v112);
      }
      *(_WORD *)&v113[v112] = 95;
      std::string::basic_string[abi:ne180100]<0>(&v182, "concat_ss1");
      v115 = std::string::append(&v182, "_xfm", 4uLL);
      v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v116;
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v119 = std::string::append((std::string *)v180, (const std::string::value_type *)p_p, size);
      v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
      *(_QWORD *)&v185 = *((_QWORD *)&v119->__r_.__value_.__l + 2);
      *(_OWORD *)v184 = v120;
      v119->__r_.__value_.__l.__size_ = 0;
      v119->__r_.__value_.__r.__words[2] = 0;
      v119->__r_.__value_.__r.__words[0] = 0;
      ZinConcatLayer::ZinConcatLayer(v107, &v179, &v166, v184, 0);
      if (SBYTE7(v185) < 0)
        operator delete(v184[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      if ((v180[23] & 0x80000000) != 0)
        operator delete(*(void **)v180);
      v121 = v167;
      if (v167)
      {
        v122 = (unint64_t *)&v167->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      if (*(char *)(v152 + 47) >= 0)
        v124 = *(unsigned __int8 *)(v152 + 47);
      else
        v124 = *(_QWORD *)(v152 + 32);
      v125 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v124 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v125 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v124)
      {
        if (*(char *)(v152 + 47) >= 0)
          v126 = (const void *)(v152 + 24);
        else
          v126 = *(const void **)(v152 + 24);
        memmove(v125, v126, v124);
      }
      *(_WORD *)((char *)&v125->__r_.__value_.__l.__data_ + v124) = 95;
      v127 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v199, "ss_copy2");
      v128 = std::string::append(v127, "_xfm", 4uLL);
      v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      v182.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = &v182;
      else
        v130 = (std::string *)v182.__r_.__value_.__r.__words[0];
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      else
        v131 = v182.__r_.__value_.__l.__size_;
      v132 = std::string::append(&__p, (const std::string::value_type *)v130, v131);
      v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      *(_QWORD *)&v180[16] = *((_QWORD *)&v132->__r_.__value_.__l + 2);
      *(_OWORD *)v180 = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(v184, v180);
      if ((v180[23] & 0x80000000) != 0)
        operator delete(*(void **)v180);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      if (v200 < 0)
        operator delete(v199[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ZinConcatLayerUtils::CreateCopyForConcat(*(_QWORD *)(v152 + 16), (uint64_t)v184, (uint64_t)&v192, (uint64_t)v107, 0, &__p);
      v134 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v136 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v136 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v137 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v137 <= v136 + 1)
          v137 = v136 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
          v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v138);
        else
          v139 = 0;
        v140 = (ZinIrOpLayer **)&v139[8 * v136];
        v141 = (std::string::size_type)&v139[8 * v138];
        *v140 = v107;
        v135 = (std::string::size_type)(v140 + 1);
        v142 = (char *)__p.__r_.__value_.__l.__size_;
        v143 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v144 = (ZinIrOpLayer *)*((_QWORD *)v142 - 1);
            v142 -= 8;
            *--v140 = v144;
          }
          while (v142 != (char *)v143);
          v142 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
        __p.__r_.__value_.__l.__size_ = v135;
        __p.__r_.__value_.__r.__words[2] = v141;
        if (v142)
          operator delete(v142);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = v107;
        v135 = v134 + 8;
      }
      __p.__r_.__value_.__l.__size_ = v135;
      v199[0] = (void *)v152;
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
      v182.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v180, &v182);
      v145 = ZinBuilder::AddConcatToGraph(a2, (uint64_t *)&v192, &__p, (ZinIrOpLayer ***)v180);
      *(_QWORD *)v180 = &unk_24C02BB18;
      if (*(_QWORD *)&v180[8])
      {
        *(_QWORD *)&v180[16] = *(_QWORD *)&v180[8];
        operator delete(*(void **)&v180[8]);
      }
      if (v145)
      {
        memset(v164, 0, sizeof(v164));
        v165 = 1065353216;
        v146 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)v152, v107, v164);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v164);
      }
      else
      {
        v146 = 0;
      }
      v147 = (ZinIrOpLayer **)*((_QWORD *)a3 + 21);
      v148 = (ZinIrOpLayer **)*((_QWORD *)a3 + 22);
      while (v147 != v148)
        v146 = (v146 & 1) != 0 && ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, *v147++, 0);
      if ((v146 & 1) == 0)
        ZinAssertImpl("Update graph failed");
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v184[0] = off_24C01FBB0;
      if (SHIBYTE(v185) < 0)
        operator delete(v184[1]);
      v149 = v179.__r_.__value_.__r.__words[0];
      v179.__r_.__value_.__r.__words[0] = 0;
      if (v149)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v149 + 8))(v149);
      v5 = 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v151 = vdupq_n_s64(1uLL);
      while (1)
      {
        v153 = v9;
        v183 = 0;
        v10 = *((_QWORD *)v7 + 21);
        if (*((_QWORD *)v7 + 22) != v10)
          break;
LABEL_95:
        v73 = *(_QWORD *)(v154 + 24 * v153 + 8);
        if (!*(_BYTE *)(v73 - 8))
          std::__throw_bad_optional_access[abi:ne180100]();
        *(_OWORD *)v184 = *(_OWORD *)(v73 - 232);
        v185 = *(_OWORD *)(v73 - 216);
        v74 = v190;
        if (v190 >= v191)
        {
          v78 = v189;
          v79 = 0xCCCCCCCCCCCCCCCDLL * ((v190 - v189) >> 4);
          v80 = v79 + 1;
          if (v79 + 1 > 0x333333333333333)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v191 - v189) >> 4) > v80)
            v80 = 0x999999999999999ALL * ((v191 - v189) >> 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((v191 - v189) >> 4) >= 0x199999999999999)
            v81 = 0x333333333333333;
          else
            v81 = v80;
          if (v81)
          {
            v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v191, v81);
            v78 = v189;
            v74 = v190;
          }
          else
          {
            v82 = 0;
          }
          v83 = &v82[80 * v79];
          *(_OWORD *)v83 = *(_OWORD *)v184;
          *((_OWORD *)v83 + 1) = v185;
          *((_OWORD *)v83 + 2) = xmmword_207A80930;
          v84 = vdupq_n_s64(1uLL);
          *((int64x2_t *)v83 + 3) = v84;
          *((int64x2_t *)v83 + 4) = v84;
          if (v74 == v78)
          {
            v89 = &v82[80 * v79];
          }
          else
          {
            v85 = &v82[80 * v79];
            do
            {
              *((_OWORD *)v85 - 5) = *((_OWORD *)v74 - 5);
              v86 = *((_OWORD *)v74 - 4);
              v87 = *((_OWORD *)v74 - 3);
              v88 = *((_OWORD *)v74 - 1);
              v89 = v85 - 80;
              *((_OWORD *)v85 - 2) = *((_OWORD *)v74 - 2);
              *((_OWORD *)v85 - 1) = v88;
              *((_OWORD *)v85 - 4) = v86;
              *((_OWORD *)v85 - 3) = v87;
              v74 -= 80;
              v85 -= 80;
            }
            while (v74 != v78);
          }
          v77 = v83 + 80;
          v189 = v89;
          v190 = v83 + 80;
          v191 = &v82[80 * v81];
          if (v78)
            operator delete(v78);
        }
        else
        {
          v75 = (_OWORD *)(v73 - 232);
          v76 = v75[1];
          *(_OWORD *)v190 = *v75;
          *((_OWORD *)v74 + 1) = v76;
          *((_OWORD *)v74 + 2) = xmmword_207A80930;
          *((int64x2_t *)v74 + 3) = v151;
          *((int64x2_t *)v74 + 4) = v151;
          v77 = v74 + 80;
        }
        v190 = v77;
        v90 = v193;
        if (v193 >= v194)
        {
          v92 = (v193 - v192) >> 3;
          if ((unint64_t)(v92 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v93 = (v194 - v192) >> 2;
          if (v93 <= v92 + 1)
            v93 = v92 + 1;
          if ((unint64_t)(v194 - v192) >= 0x7FFFFFFFFFFFFFF8)
            v94 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v94 = v93;
          if (v94)
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v194, v94);
          else
            v95 = 0;
          v96 = (ZinIrOpLayer **)&v95[8 * v92];
          *v96 = v183;
          v91 = (char *)(v96 + 1);
          v98 = v192;
          v97 = v193;
          if (v193 != v192)
          {
            do
            {
              v99 = (ZinIrOpLayer *)*((_QWORD *)v97 - 1);
              v97 -= 8;
              *--v96 = v99;
            }
            while (v97 != v98);
            v97 = v192;
          }
          v192 = (char *)v96;
          v193 = v91;
          v194 = &v95[8 * v94];
          if (v97)
            operator delete(v97);
        }
        else
        {
          *(_QWORD *)v193 = v183;
          v91 = v90 + 8;
        }
        v193 = v91;
        ++*(_WORD *)a4;
        v9 = v153 + 1;
        v7 = a3;
        v154 = *(_QWORD *)a3;
        if (v153 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 3))
          goto LABEL_131;
      }
      v11 = 0;
      v156 = (_QWORD *)(v154 + 24 * v9 + 8);
      v157 = (_QWORD *)(v154 + 24 * v9);
      while (1)
      {
        if (0x34F72C234F72C235 * ((uint64_t)(*v156 - *v157) >> 3) <= v11)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v12 = *v157 + 232 * v11;
        if (!*(_BYTE *)(v12 + 224))
          ZinAssertImpl("Internal Spatial Split Error");
        v13 = *(ZinIrOpLayer **)(v10 + 8 * v11);
        std::vector<ZinIrOpLayer *>::vector(&v182, (uint64_t)(*((_QWORD *)v13 + 12) - *((_QWORD *)v13 + 11)) >> 3);
        v159 = v11;
        v14 = *((_QWORD *)v13 + 11);
        if (*((_QWORD *)v13 + 12) != v14)
        {
          v15 = 0;
          v16 = 0;
          do
          {
            v17 = *(_QWORD *)(v14 + 8 * v16);
            v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
            v19 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)v13 + 200))(v13, v18);
            v184[0] = (void *)v17;
            v20 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)a3 + 24, v184);
            if (v20)
              v21 = v19;
            else
              v21 = 0;
            if (v21 == 1)
              ZinAssertImpl("kernel tensor can't not be the intermediate tensor in the chain.");
            v22 = v20;
            if (*((_DWORD *)a3 + 58))
              v23 = 4;
            else
              v23 = 3;
            if ((ZinMirSpatialSplitUtils::ShouldCreateView(v13, v16, v23) & 1) != 0)
            {
              if (v22)
              {
                *(_QWORD *)(v182.__r_.__value_.__r.__words[0] + 8 * v16) = v183;
              }
              else
              {
                v24 = *(_QWORD *)(v12 + 128) + v15;
                v25 = *(_OWORD *)(v24 + 40);
                v26 = *(_OWORD *)(v24 + 56);
                v186 = *(_QWORD *)(v24 + 72);
                *(_OWORD *)v184 = v25;
                v185 = v26;
                v27 = (__int128 *)(*(_QWORD *)(v12 + 128) + v15);
                v28 = *v27;
                v29 = v27[1];
                v181 = *((_QWORD *)v27 + 4);
                *(_OWORD *)v180 = v28;
                *(_OWORD *)&v180[16] = v29;
                v30 = *((_DWORD *)a3 + 58);
                v31 = operator new(4uLL);
                if (v30)
                  v32 = 4;
                else
                  v32 = 3;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
                *v31 = v32;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 1);
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v31 + 1);
                ZinMirSpatialSplitUtils::AdjustDimensionsForBroadcast(v180, v184, v13, (uint64_t)&__p, v16);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                v33 = *((_QWORD *)v13 + 2);
                TiledLayerTensorRegions::Id::ToStringForIr((TiledLayerTensorRegions::Id *)(v12 + 152), &v179);
                v34 = *(char *)(v17 + 47);
                if (v34 >= 0)
                  v35 = (const std::string::value_type *)(v17 + 24);
                else
                  v35 = *(const std::string::value_type **)(v17 + 24);
                if (v34 >= 0)
                  v36 = *(unsigned __int8 *)(v17 + 47);
                else
                  v36 = *(_QWORD *)(v17 + 32);
                v37 = std::string::insert(&v179, 0, v35, v36);
                v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
                v37->__r_.__value_.__l.__size_ = 0;
                v37->__r_.__value_.__r.__words[2] = 0;
                v37->__r_.__value_.__r.__words[0] = 0;
                ZinIrContext::GetAlternativeNameForTensor(v33, (uint64_t)&__p, (uint64_t)v199);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v179.__r_.__value_.__l.__data_);
                v39 = *((_QWORD *)v13 + 2);
                v40 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 0, 0);
                v174[0] = *(_OWORD *)v180;
                v174[1] = *(_OWORD *)&v180[16];
                v176 = vdupq_n_s64(1uLL);
                v177 = v176;
                v175 = v181;
                v178 = 1;
                View = ZinBuilder::CreateView(v39, (uint64_t)v199, v40, (__int128 *)v184, (uint64_t)v174);
                v42 = (uint64_t *)View;
                if ((a5 & 1) == 0)
                {
                  v43 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)View + 32))(View, 0, 0);
                  v44 = *(unsigned __int8 *)(v43 + 144);
                  *(_WORD *)(v43 + 128) = *(_WORD *)a4;
                  *(_DWORD *)(v43 + 132) = 2;
                  *(_QWORD *)(v43 + 136) = -1;
                  if (!v44)
                    *(_BYTE *)(v43 + 144) = 1;
                }
                if (v188)
                {
                  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(v13);
                  if (!v188)
                    std::__throw_bad_optional_access[abi:ne180100]();
                  SpatialSplitTransform = (uint64_t **)ZinSpatialSplitTransform::GetOrCreateSpatialSplitTransform(*GroupId, v187);
                  ZinSpatialSplitTransform::AddViewId(SpatialSplitTransform, v42[1]);
                }
                v198 = v13;
                v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
                v179.__r_.__value_.__l.__size_ = 1;
                Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v179);
                v47 = ZinIrOpLayerGraph::AddNode(a2, (ZinIrOpLayer *)v42, (ZinIrOpLayer ***)&__p);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
                if (__p.__r_.__value_.__l.__size_)
                {
                  __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
                  operator delete((void *)__p.__r_.__value_.__l.__size_);
                }
                if ((v47 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v17, (uint64_t)v42, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Failed to update graph");
                *(_QWORD *)(v182.__r_.__value_.__r.__words[0] + 8 * v16) = v42;
                if (v200 < 0)
                  operator delete(v199[0]);
                v8 = 1;
              }
            }
            else
            {
              *(_QWORD *)(v182.__r_.__value_.__r.__words[0] + 8 * v16) = v17;
            }
            ++v16;
            v14 = *((_QWORD *)v13 + 11);
            v15 += 80;
          }
          while (v16 < (*((_QWORD *)v13 + 12) - v14) >> 3);
        }
        v48 = *((_DWORD *)a3 + 58);
        v49 = operator new(4uLL);
        if (v48)
          v50 = 4;
        else
          v50 = 3;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        *v49 = v50;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v49 + 1);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v49 + 1);
        if (0xAAAAAAAAAAAAAAABLL * ((v196 - v195) >> 6) <= v159)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v51 = LayerTilingHelper::CreateLayer((const ZinIrOpLayer **)(v195 + 192 * v159), a2, (uint64_t *)&v182, (TiledLayerTensorRegions *)v12, this[6], &__p, &v183);
        if (v51)
        {
          if ((v8 & 1) != 0)
            ZinAssertImpl("CreateLayer failed and graph is changed");
        }
        else
        {
          if ((a5 & 1) != 0)
          {
            v52 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
            if (*(_BYTE *)(v52 + 144))
            {
              v53 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
              v54 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0, 0);
              v52 = ZinMirSpatialSplitUtils::PropagateSpatialSplitInfo(v53, v54, v55);
            }
          }
          else
          {
            v52 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0, 0);
            v56 = *(unsigned __int8 *)(v52 + 144);
            *(_WORD *)(v52 + 128) = *(_WORD *)a4;
            *(_DWORD *)(v52 + 132) = 2;
            *(_QWORD *)(v52 + 136) = -1;
            if (!v56)
              *(_BYTE *)(v52 + 144) = 1;
          }
          if (*(_QWORD *)(v12 + 184) || *(_QWORD *)(v12 + 192))
          {
            v57 = *(_OWORD *)(v12 + 40);
            v58 = *(_OWORD *)(v12 + 56);
            v186 = *(_QWORD *)(v12 + 72);
            *(_OWORD *)v184 = v57;
            v185 = v58;
            *(_QWORD *)&v185 = v58 - *(_QWORD *)(v12 + 184);
            *((_QWORD *)&v185 + 1) = *((_QWORD *)&v58 + 1) - *(_QWORD *)(v12 + 192);
            v59 = v183;
            v60 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0, 0);
            v61 = v60;
            if (*(char *)(v60 + 47) >= 0)
              v62 = *(unsigned __int8 *)(v60 + 47);
            else
              v62 = *(_QWORD *)(v60 + 32);
            std::string::basic_string[abi:ne180100]((uint64_t)v199, v62 + 8);
            if (v200 >= 0)
              v63 = v199;
            else
              v63 = (void **)v199[0];
            if (v62)
            {
              if (*(char *)(v61 + 47) >= 0)
                v64 = (const void *)(v61 + 24);
              else
                v64 = *(const void **)(v61 + 24);
              memmove(v63, v64, v62);
            }
            strcpy((char *)v63 + v62, "/trimmed");
            v65 = *((_QWORD *)v59 + 2);
            v66 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v59 + 32))(v59, 0, 0);
            v169 = 0;
            memset(v168, 0, sizeof(v168));
            v170 = vdupq_n_s64(1uLL);
            v171 = v170;
            v172 = 1;
            v67 = (uint64_t *)ZinBuilder::CreateView(v65, (uint64_t)v199, v66, (__int128 *)v184, (uint64_t)v168);
            if (*(_BYTE *)(*((_QWORD *)this[2] + 1) + 492))
            {
              v68 = (uint64_t *)ZinIrOpLayer::GetGroupId(v13);
              if (!v188)
                std::__throw_bad_optional_access[abi:ne180100]();
              v69 = (uint64_t **)ZinSpatialSplitTransform::GetOrCreateSpatialSplitTransform(*v68, v187);
              ZinSpatialSplitTransform::AddViewId(v69, v67[1]);
            }
            if ((a5 & 1) == 0)
            {
              v70 = (*(uint64_t (**)(uint64_t *, _QWORD, _QWORD))(*v67 + 32))(v67, 0, 0);
              v71 = *(unsigned __int8 *)(v70 + 144);
              *(_WORD *)(v70 + 128) = *(_WORD *)a4;
              *(_DWORD *)(v70 + 132) = 2;
              *(_QWORD *)(v70 + 136) = -1;
              if (!v71)
                *(_BYTE *)(v70 + 144) = 1;
            }
            v198 = v59;
            v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
            v179.__r_.__value_.__l.__size_ = 1;
            Layer2TDMapper::SourceLayer::SourceLayer(v180, &v179);
            v72 = ZinIrOpLayerGraph::AddNode(a2, (ZinIrOpLayer *)v67, (ZinIrOpLayer ***)v180);
            *(_QWORD *)v180 = &unk_24C02BB18;
            if (*(_QWORD *)&v180[8])
            {
              *(_QWORD *)&v180[16] = *(_QWORD *)&v180[8];
              operator delete(*(void **)&v180[8]);
            }
            if (!v72
              || (v52 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v59, (uint64_t)v67, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0), (v52 & 1) == 0))
            {
              ZinAssertImpl("Update graph failed", &v194);
            }
            v183 = (ZinIrOpLayer *)v67;
            if (v200 < 0)
              operator delete(v199[0]);
          }
          ZinMirSpatialSplitter::AddDeconvBypassIfNecessary((ZinMirSpatialSplitter *)v52, a2, v155, v159, &v183);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v182.__r_.__value_.__r.__words[0])
        {
          v182.__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
          operator delete(v182.__r_.__value_.__l.__data_);
        }
        if (v51)
          break;
        v11 = v159 + 1;
        v10 = *((_QWORD *)a3 + 21);
        v8 = 1;
        if (v159 + 1 >= (*((_QWORD *)a3 + 22) - v10) >> 3)
          goto LABEL_95;
      }
      v5 = 3;
    }
    if (v188)
      std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)v187);
    if (v189)
    {
      v190 = v189;
      operator delete(v189);
    }
    if (v192)
    {
      v193 = v192;
      operator delete(v192);
    }
  }
  v187[0] = (void **)&v195;
  std::vector<LayerTilingHelper>::__destroy_vector::operator()[abi:ne180100](v187);
  return v5;
}

void sub_206F31CC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  if (*(_BYTE *)(v1 - 216))
    std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table(v1 - 256);
  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 184);
  if (v4)
  {
    *(_QWORD *)(v1 - 176) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 - 256) = v1 - 160;
  std::vector<LayerTilingHelper>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::unordered_map<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>::operator=[abi:ne180100]<std::unordered_map<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,void>(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>>::__move_assign(a1, a2);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t ZinMirSpatialSplitter::DetermineTiling(uint64_t a1, ProducerConsumerChain *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const ZinIrTensor **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  LayerTilingHelper *v22;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const ZinIrTensor **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t KOpCount;
  unint64_t v44;
  unint64_t Size;
  uint64_t v46;
  void **v47[3];
  _BYTE v48[40];
  _BYTE v49[56];
  __int128 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint8_t buf;
  char v55[15];
  _QWORD v56[7];
  void *__p;
  void *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  _BYTE v63[40];
  _BYTE v64[40];
  __int128 v65;
  __int128 v66;
  char v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE v71[56];
  __int128 v72;
  char v73;
  char v74;
  uint64_t v75[3];
  _QWORD v76[2];
  unint64_t v77;
  void *v78;
  void *v79;
  unint64_t v80;
  _OWORD v81[3];
  uint64_t v82;
  int v83;
  _OWORD v84[2];
  int v85;
  int64x2_t v86;
  int64x2_t v87;
  void ***v88;

  v82 = 0;
  memset(v81, 0, sizeof(v81));
  v83 = 1065353216;
  memset(v84, 0, sizeof(v84));
  v85 = 1065353216;
  v86 = vdupq_n_s64(1uLL);
  v87 = v86;
  v8 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) - 8)
                                                                                + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0)+ 64);
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) - 8) + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0);
  v10 = SplitInfo::Construct(a2, v8, *(_QWORD *)(*(_QWORD *)v9 + 72), (uint64_t)v81, 0, **(_QWORD **)(a1 + 16), *(ZinIrOpLayer **)(a1 + 48));
  if ((_DWORD)v10)
    goto LABEL_49;
  v11 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2)
                                                                                               - 8)
                                                                                 + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0)+ 64);
  v12 = *(uint64_t **)(a1 + 16);
  v46 = *(_QWORD *)(*v12 + 408);
  SplitInfoMetrics::SplitInfoMetrics(v76, *v12, v46, 0, (uint64_t)a2, v81);
  SplitInfoMetrics::GetTempBytesAccessed((SplitInfoMetrics *)v76);
  v14 = v13;
  v15 = v80;
  KOpCount = SplitInfoMetrics::GetKOpCount((SplitInfoMetrics *)v76);
  v16 = **(_QWORD **)(**(_QWORD **)(v76[0] + 8) + 88);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
  Size = SplitInfoMetrics::GetSize((SplitInfoMetrics *)v76, (const ZinIrTensor *)v17, (const ZinTensorDimensions *)(v17 + 48));
  v44 = v77;
  v18 = (const ZinIrTensor **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v76[0] + 16)
                                                                                              - 8)
                                                                                + 40))(*(_QWORD *)(*(_QWORD *)(v76[0] + 16) - 8), 0, 0);
  v19 = SplitInfoMetrics::GetSize((SplitInfoMetrics *)v76, *v18, (const ZinIrTensor *)((char *)*v18 + 48));
  v20 = v77;
  SplitInfoMetrics::GetInputBytesAccessed((SplitInfoMetrics *)v76);
  if ((unint64_t)v11 < 2)
  {
    v10 = 0;
    goto LABEL_47;
  }
  v41 = v21;
  v42 = v15;
  memset(v75, 0, sizeof(v75));
  v10 = LayerTilingHelper::Create(a2, *(ZinIrOpLayer **)(a1 + 48), v75, v22);
  if ((_DWORD)v10)
    goto LABEL_46;
  if (v11 - 1 < 1)
    goto LABEL_45;
  v24 = a3 != 1 || v19 > v20;
  v40 = v24;
  while (1)
  {
    LOBYTE(v68) = 0;
    v74 = 0;
    v25 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) - 8) + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0);
    v10 = SplitInfo::TryToConstruct(a2, --v11, *(_QWORD *)(*(_QWORD *)v25 + 72), (uint64_t)&v68, 0, **(_QWORD **)(a1 + 16), v75);
    if ((_DWORD)v10)
    {
      std::__optional_destruct_base<SplitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v68);
      goto LABEL_46;
    }
    if (v74)
      break;
    std::__optional_destruct_base<SplitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v68);
LABEL_41:
    if (v11 <= 1)
      goto LABEL_45;
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(&v60, v68, v69, 0xAAAAAAAAAAAAAAABLL * (v69 - v68));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map((uint64_t)v63, (uint64_t)&v70);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set((uint64_t)v64, (uint64_t)v71);
  v65 = *(_OWORD *)&v71[40];
  v66 = v72;
  v67 = v73;
  SplitInfoMetrics::SplitInfoMetrics(v56, **(_QWORD **)(a1 + 16), v46, a3, (uint64_t)a2, &v60);
  if (SplitInfoMetrics::GetWorstNonResidentFootprintRequirement((SplitInfoMetrics *)v56) > *(_QWORD *)(**(_QWORD **)(a1 + 16) + 408))
    goto LABEL_16;
  SplitInfoMetrics::GetInputBytesAccessed((SplitInfoMetrics *)v56);
  v28 = v27;
  v29 = (const ZinIrTensor **)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) - 8)
                                                                                + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0);
  SplitInfoMetrics::GetSize((SplitInfoMetrics *)v56, *v29, (const ZinIrTensor *)((char *)*v29 + 48));
  if (v59 >= v42)
  {
    if (v40)
      v31 = 0;
    else
      v31 = v30;
    v32 = v31 + v28;
    if (a3 != 1)
      v32 = 0;
    if (Size > v44)
      v32 = v28 - v41;
    v33 = v59 - v42 + v32;
    v34 = v14 - v33;
    if (v14 <= v33)
    {
LABEL_16:
      v26 = 4;
      goto LABEL_37;
    }
    v35 = SplitInfoMetrics::GetKOpCount((SplitInfoMetrics *)v56);
    v36 = SplitInfoMetrics::GetKOpCount((SplitInfoMetrics *)v56);
    if (KOpCount >= v36)
      v37 = v36;
    else
      v37 = KOpCount;
    v38 = 0xAAAAAAAAAAAAAAABLL * (v61 - v60);
    if (*(_BYTE *)(a4 + 160) && v38 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3))
    {
      v26 = 2;
    }
    else
    {
      memset(v47, 0, sizeof(v47));
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v47, v60, v61, v38);
      std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map((uint64_t)v48, (uint64_t)v63);
      std::unordered_set<ZinIrOpLayer const*>::unordered_set((uint64_t)v49, (uint64_t)v64);
      *(_OWORD *)&v49[40] = v65;
      v50 = v66;
      v51 = v67;
      v52 = v34;
      v53 = v35 - v37;
      std::optional<ZinMirSpatialSplitter::TilingResult>::operator=[abi:ne180100]<ZinMirSpatialSplitter::TilingResult,void>(a4, (uint64_t)v47);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)v48);
      v88 = v47;
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      v26 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirSpatialSplitter::DetermineTiling(&buf, v55);
    v26 = 1;
  }
LABEL_37:
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v64);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)v63);
  v47[0] = (void **)&v60;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](v47);
  std::__optional_destruct_base<SplitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v68);
  if (!v26 || v26 == 4)
    goto LABEL_41;
  if (v26 == 2)
LABEL_45:
    v10 = 0;
  else
    v10 = 3;
LABEL_46:
  v47[0] = (void **)v75;
  std::vector<LayerTilingHelper>::__destroy_vector::operator()[abi:ne180100](v47);
LABEL_47:
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
LABEL_49:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v84);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v81[1] + 8);
  v47[0] = (void **)v81;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](v47);
  return v10;
}

void sub_206F32634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  uint64_t v62;
  void *v64;

  SplitInfo::~SplitInfo((void **)&a27);
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  SplitInfo::~SplitInfo(&a62);
  std::__optional_destruct_base<SplitInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x238]);
  a27 = (uint64_t)&STACK[0x2D0];
  std::vector<LayerTilingHelper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  v64 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v64;
    operator delete(v64);
  }
  SplitInfo::~SplitInfo((void **)(v62 - 256));
  _Unwind_Resume(a1);
}

uint64_t std::optional<ZinMirSpatialSplitter::TilingResult>::operator=[abi:ne180100]<ZinMirSpatialSplitter::TilingResult,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 160))
  {
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__vdeallocate((void ***)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__move_assign(a1 + 24, (uint64_t *)(a2 + 24));
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
    v4 = *(_OWORD *)(a2 + 104);
    v5 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v5;
    *(_OWORD *)(a1 + 104) = v4;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinMirSpatialSplitter::TilingResult,ZinMirSpatialSplitter::TilingResult,ZinMirSpatialSplitter::TilingResult*>(a1, a2);
    *(_BYTE *)(a1 + 160) = 1;
  }
  return a1;
}

uint64_t ZinMirSpatialSplitter::PruneForPerformance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const ZinIrOpLayer *v6;
  _BYTE *v7;
  LayerTilingHelper **v8;
  uint64_t v9;
  LayerTilingHelper **v10;
  LayerTilingHelper **v11;
  LayerTilingHelper **v12;
  LayerTilingHelper **v13;
  uint64_t v14;
  LayerTilingHelper *v15;
  int v16;
  LayerTilingHelper **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  void *v24[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;
  void *__p;
  LayerTilingHelper **v31;
  uint64_t v32;
  _QWORD v33[4];
  int v34;

  std::__optional_destruct_base<ProducerConsumerChain,false>::reset[abi:ne180100](a4);
  v29 = *(_DWORD *)a3;
  v31 = 0;
  v32 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  std::unordered_set<ZinANELayer const*>::unordered_set((uint64_t)v33, a3 + 32);
  v7 = __p;
  v8 = v31;
  if (__p == v31)
    goto LABEL_21;
  v22 = a4;
  v9 = -(uint64_t)__p;
  v10 = v31;
  v11 = v31;
  v12 = v31;
  v13 = (LayerTilingHelper **)__p;
  while (1)
  {
    v14 = v9;
    v15 = *v13;
    if ((unint64_t)LayerTilingHelper::GetKernelDimsFrom(*v13, v6) < 2)
    {
      if (v11 == v8)
        v17 = v13;
      else
        v17 = v11;
      goto LABEL_16;
    }
    v16 = *(_DWORD *)(*((_QWORD *)v15 + 8) + 8);
    if (v11 == v8)
    {
      if (v16 == 85)
        v10 = v13;
      v17 = v13;
      goto LABEL_16;
    }
    if (v16 != 85)
    {
      v17 = v11;
      goto LABEL_16;
    }
    if (v10 == v8)
      break;
    v17 = v13;
    v10 = v13;
    if (v12 != v11)
    {
      v17 = v11 + 1;
      goto LABEL_17;
    }
LABEL_16:
    v12 = v13;
    v9 = v14 - 8;
    v11 = v17;
    if (++v13 == v8)
      goto LABEL_17;
  }
  v17 = v11;
LABEL_17:
  if (v17 == v8 || (v18 = -((uint64_t)v17 + v14), v18 < 8))
  {
LABEL_21:
    v20 = 0;
    goto LABEL_22;
  }
  v19 = ((unint64_t)v18 >> 3) + 1;
  if (v19 == ((char *)v8 - v7) >> 3)
    goto LABEL_20;
  v23 = 16843008;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v28 = 1065353216;
  v20 = ProducerConsumerChain::Extract((ProducerConsumerChain *)&v29, ((char *)v17 - v7) >> 3, v19, (ProducerConsumerChain *)&v23);
  if (!(_DWORD)v20)
  {
    v29 = v23;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)v24[0], (uint64_t)v24[1], ((char *)v24[1] - (char *)v24[0]) >> 3);
    v34 = v28;
    std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>(v33, *((_QWORD **)&v26 + 1), 0);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v25 + 8);
    if (v24[0])
    {
      v24[1] = v24[0];
      operator delete(v24[0]);
    }
LABEL_20:
    std::optional<ProducerConsumerChain>::operator=[abi:ne180100]<ProducerConsumerChain&,void>(v22, (uint64_t)&v29);
    goto LABEL_21;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v25 + 8);
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
LABEL_22:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  if (__p)
  {
    v31 = (LayerTilingHelper **)__p;
    operator delete(__p);
  }
  return v20;
}

void sub_206F32A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21)
{
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)&a10);
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)&a19);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<ProducerConsumerChain,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 72))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 32);
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v2);
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
}

uint64_t std::optional<ProducerConsumerChain>::operator=[abi:ne180100]<ProducerConsumerChain&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (a1 != a2)
    {
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a1 + 32), *(_QWORD **)(a2 + 48), 0);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain&,ProducerConsumerChain*>(a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

uint64_t ZinMirSpatialSplitter::PruneForMemory(uint64_t a1, ProducerConsumerChain *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t NonResidentFootprintAtLayer;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v26;
  void *v27[2];
  _OWORD v28[2];
  uint64_t v29;
  int v30;
  void *__p;
  unint64_t v32;
  void **v33[7];
  void *v34;
  void *v35;
  _QWORD v36[6];
  uint64_t v37;
  int v38;
  _BYTE v39[32];
  int v40;
  int64x2_t v41;
  int64x2_t v42;

  v37 = 0;
  memset(v36, 0, sizeof(v36));
  memset(v39, 0, sizeof(v39));
  v38 = 1065353216;
  v40 = 1065353216;
  v41 = vdupq_n_s64(1uLL);
  v42 = v41;
  v6 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) - 8)
                                                                                + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0)+ 64);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) - 8) + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) - 8), 0, 0);
  v8 = SplitInfo::Construct(a2, v6, *(_QWORD *)(*(_QWORD *)v7 + 72), (uint64_t)v36, 0, **(_QWORD **)(a1 + 16), *(ZinIrOpLayer **)(a1 + 48));
  if ((_DWORD)v8)
    goto LABEL_34;
  v9 = *(uint64_t **)(a1 + 16);
  v10 = *(_QWORD *)(*v9 + 408);
  SplitInfoMetrics::SplitInfoMetrics(v33, *v9, v10, 0, (uint64_t)a2, v36);
  if (SplitInfoMetrics::GetWorstNonResidentFootprintRequirement((SplitInfoMetrics *)v33) > v10)
  {
    v11 = ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3) - 1;
    LOBYTE(v26) = 0;
    std::vector<BOOL>::vector(&__p, v11, (unsigned __int8 *)&v26);
    if (*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1) == 8)
    {
      v12 = v32;
      if (!v32)
        goto LABEL_29;
      v13 = 0;
    }
    else
    {
      v14 = 0;
      do
      {
        NonResidentFootprintAtLayer = SplitInfoMetrics::GetNonResidentFootprintAtLayer((SplitInfoMetrics *)v33, v14, 0);
        v16 = v14 + 1;
        v17 = SplitInfoMetrics::GetNonResidentFootprintAtLayer((SplitInfoMetrics *)v33, v14 + 1, 0);
        v18 = v14 >> 6;
        v19 = 1 << v14;
        if (v17 | NonResidentFootprintAtLayer)
          v20 = *((_QWORD *)__p + v18) & ~v19;
        else
          v20 = *((_QWORD *)__p + v18) | v19;
        *((_QWORD *)__p + v18) = v20;
        v13 = ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3) - 1;
        ++v14;
      }
      while (v16 < v13);
      v12 = v32;
      if (!v32)
      {
        if ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3 == 1)
          goto LABEL_29;
        v21 = 0;
        goto LABEL_25;
      }
    }
    v21 = 0;
    while (((*(_QWORD *)((char *)__p + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      if (v12 == ++v21)
      {
        v21 = v12;
        break;
      }
    }
    if (v21 == v13)
      goto LABEL_29;
    v22 = v12 - v21;
    if (v12 > v21)
    {
      v23 = 0;
      v24 = v21 - v12;
      while (((*(_QWORD *)((char *)__p + (((v21 + v23) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v21
                                                                                         + v23)) & 1) == 0)
      {
        ++v23;
        if (!(v24 + v23))
        {
          v23 = v22;
          goto LABEL_26;
        }
      }
      goto LABEL_26;
    }
LABEL_25:
    v23 = 0;
LABEL_26:
    if (v21 || v23 != v13)
    {
      v26 = 16843008;
      *(_OWORD *)v27 = 0u;
      memset(v28, 0, sizeof(v28));
      v29 = 0;
      v30 = 1065353216;
      v8 = ProducerConsumerChain::Extract(a2, v21, v23 + 1, (ProducerConsumerChain *)&v26);
      if (!(_DWORD)v8)
        v8 = ZinMirSpatialSplitter::PruneForMemory(a1, &v26, a3);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28 + 8);
      if (v27[0])
      {
        v27[1] = v27[0];
        operator delete(v27[0]);
      }
      goto LABEL_30;
    }
    std::optional<ProducerConsumerChain>::operator=[abi:ne180100]<ProducerConsumerChain const&,void>(a3, (uint64_t)a2);
LABEL_29:
    v8 = 0;
LABEL_30:
    if (__p)
      operator delete(__p);
    goto LABEL_32;
  }
  v8 = 0;
LABEL_32:
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
LABEL_34:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v39);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v36[3]);
  v33[0] = (void **)v36;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](v33);
  return v8;
}

void sub_206F32E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  SplitInfo::~SplitInfo(&a35);
  _Unwind_Resume(a1);
}

uint64_t std::optional<ProducerConsumerChain>::operator=[abi:ne180100]<ProducerConsumerChain const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (a1 != a2)
    {
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a1 + 32), *(_QWORD **)(a2 + 48), 0);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain const&,ProducerConsumerChain*>(a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

uint64_t ZinMirSpatialSplitter::DetermineOptimizedPlan(uint64_t a1, ZinIrOpLayerGraph *a2, int a3, ZinIrOpLayer *a4, uint64_t a5)
{
  uint64_t AllSubChains;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  unint64_t v17;
  int v19;
  uint64_t *v20;
  ZinMirSpatialSplitter::SplitPlan *v21;
  int64x2_t v22;
  unint64_t v23;
  void **v24;
  uint64_t *v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  int v29;
  int64x2_t v30;
  int64x2_t v31;
  char v32;
  __int128 v33;
  char v34;
  void *v35;
  int *v36;
  char **v37;
  char *v38[2];
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE v42[72];
  char v43;
  _BYTE v44[80];
  int v45;
  __int128 v46;
  _BYTE v47[32];
  uint64_t v48;
  int v49;
  void **v50;
  void *__src[2];
  _OWORD v52[2];
  _QWORD *v53;
  int v54;
  _QWORD v55[4];
  int v56;
  int64x2_t v57;
  int64x2_t v58;
  char v59;
  __int128 v60;
  int v61;
  void *__p[7];
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::reset[abi:ne180100](a5);
  v45 = 16843008;
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v48 = 0;
  v49 = 1065353216;
  ProducerConsumerChain::Analyze((ProducerConsumerChain *)&v45, a2, a4, **(const ZinIrHalParameters ***)(a1 + 16), (uint64_t)v44);
  if (!v44[72])
  {
    AllSubChains = 0;
    goto LABEL_37;
  }
  v42[0] = 0;
  v43 = 0;
  AllSubChains = ZinMirSpatialSplitter::PruneForMemory(a1, (ProducerConsumerChain *)v44, (uint64_t)v42);
  if (!(_DWORD)AllSubChains)
  {
    if (v43)
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v40 = (uint64_t *)std::vector<ProducerConsumerChain>::__push_back_slow_path<ProducerConsumerChain const&>((uint64_t *)&v39, (uint64_t)v42);
      v38[0] = 0;
      v38[1] = 0;
      v37 = v38;
      __src[1] = 0;
      __src[0] = 0;
      *(_QWORD *)&v52[0] = 0;
      if (!v43)
        std::__throw_bad_optional_access[abi:ne180100]();
      AllSubChains = ProducerConsumerChain::ExtractAllSubChains((ProducerConsumerChain *)v42, (uint64_t *)__src);
      if ((_DWORD)AllSubChains)
      {
        v24 = __src;
        std::vector<ProducerConsumerChain>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_35:
        std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v37, v38[0]);
        __src[0] = &v39;
        std::vector<ProducerConsumerChain>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
        goto LABEL_36;
      }
      std::vector<ProducerConsumerChain>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ProducerConsumerChain*>,std::__wrap_iter<ProducerConsumerChain*>>((uint64_t *)&v39, v40, (uint64_t)__src[0], (uint64_t)__src[1], 0x8E38E38E38E38E39 * (((char *)__src[1] - (char *)__src[0]) >> 3));
      v24 = __src;
      std::vector<ProducerConsumerChain>::__destroy_vector::operator()[abi:ne180100](&v24);
      __src[0] = (void *)0x100000000;
      v11 = (uint64_t)std::vector<SplitInfoMetrics::ResInputOutputMode>::vector[abi:ne180100](&v35, __src, 2uLL);
      v13 = (uint64_t)v39;
      v20 = v40;
      if (v39 == v40)
      {
LABEL_31:
        AllSubChains = 0;
LABEL_33:
        if (v35)
        {
          v36 = (int *)v35;
          operator delete(v35);
        }
        goto LABEL_35;
      }
      v21 = (ZinMirSpatialSplitter::SplitPlan *)a5;
      v23 = 0;
      v22 = vdupq_n_s64(1uLL);
      v19 = a3;
      while (1)
      {
        if (a3 != 2)
          goto LABEL_17;
        LOBYTE(__src[0]) = 0;
        LOBYTE(v55[1]) = 0;
        AllSubChains = ZinMirSpatialSplitter::PruneForPerformance(v11, v12, v13, (uint64_t)__src);
        if ((_DWORD)AllSubChains)
        {
          std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__src);
          goto LABEL_33;
        }
        if (LOBYTE(v55[1]))
          break;
        v11 = std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__src);
LABEL_30:
        v13 += 72;
        a3 = v19;
        if ((uint64_t *)v13 == v20)
          goto LABEL_31;
      }
      *(_DWORD *)v13 = __src[0];
      if ((void **)v13 != __src)
      {
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(v13 + 8), (char *)__src[1], *(uint64_t *)&v52[0], (uint64_t)(*(_QWORD *)&v52[0] - (unint64_t)__src[1]) >> 3);
        *(_DWORD *)(v13 + 64) = v55[0];
        std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(v13 + 32), v53, 0);
      }
      v11 = std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__src);
LABEL_17:
      v15 = (int *)v35;
      v14 = v36;
      while (v15 != v14)
      {
        v16 = *v15;
        LOBYTE(v24) = 0;
        v34 = 0;
        AllSubChains = ZinMirSpatialSplitter::DetermineTiling(a1, (ProducerConsumerChain *)v13, v16, (uint64_t)&v24);
        if ((_DWORD)AllSubChains)
        {
          std::__optional_destruct_base<ZinMirSpatialSplitter::TilingResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
          goto LABEL_33;
        }
        if (v34)
        {
          v53 = 0;
          memset(v52, 0, sizeof(v52));
          *(_OWORD *)__src = 0u;
          memset(v55, 0, sizeof(v55));
          v54 = 1065353216;
          v56 = 1065353216;
          v57 = v22;
          v58 = v22;
          memset(__p, 0, sizeof(__p));
          v61 = 0;
          v63 = 1065353216;
          v64 = 0;
          std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__assign_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>((uint64_t)__src, (uint64_t *)v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
          v54 = v27;
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *> *>>((_QWORD *)v52 + 1, v26, 0);
          v56 = v29;
          std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>(v55, v28, 0);
          v57 = v30;
          v58 = v31;
          v59 = v32;
          v60 = v33;
          v61 = *(_DWORD *)v13;
          if (&v61 != (int *)v13)
          {
            std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)__p, *(char **)(v13 + 8), *(_QWORD *)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 3);
            v63 = *(_DWORD *)(v13 + 64);
            std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>(&__p[3], *(_QWORD **)(v13 + 48), 0);
          }
          v17 = (0x5555555555555555 * (((char *)__src[1] - (char *)__src[0]) >> 3) + 0xFFFFFFFFLL) | ((_QWORD)v60 << 32);
          if (v17 > v23)
          {
            std::optional<ZinMirSpatialSplitter::SplitPlan>::operator=[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan&,void>(v21, (const ZinMirSpatialSplitter::SplitPlan *)__src);
            v23 = v17;
          }
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p[3]);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v55);
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)v52 + 8);
          v50 = __src;
          std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v50);
        }
        v11 = std::__optional_destruct_base<ZinMirSpatialSplitter::TilingResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
        ++v15;
      }
      goto LABEL_30;
    }
    AllSubChains = 0;
  }
LABEL_36:
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v42);
LABEL_37:
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v44);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v47[8]);
  if ((_QWORD)v46)
  {
    *((_QWORD *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }
  return AllSubChains;
}

void sub_206F3343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a71;

  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&a45, (char *)a46);
  STACK[0x240] = (unint64_t)&a48;
  std::vector<ProducerConsumerChain>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a51);
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a61);
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)&a71);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v3;

  if (*(_BYTE *)(a1 + 240))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 192);
    v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(_QWORD *)(a1 + 176) = v2;
      operator delete(v2);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 24);
    v3 = (void **)a1;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    *(_BYTE *)(a1 + 240) = 0;
  }
}

_QWORD *std::vector<SplitInfoMetrics::ResInputOutputMode>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<ZinIrPaddingMode>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_206F335BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

ZinMirSpatialSplitter::SplitPlan *std::optional<ZinMirSpatialSplitter::SplitPlan>::operator=[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan&,void>(ZinMirSpatialSplitter::SplitPlan *this, const ZinMirSpatialSplitter::SplitPlan *a2)
{
  if (*((_BYTE *)this + 240))
  {
    ZinMirSpatialSplitter::SplitPlan::operator=((uint64_t)this, (uint64_t)a2);
  }
  else
  {
    ZinMirSpatialSplitter::SplitPlan::SplitPlan(this, a2);
    *((_BYTE *)this + 240) = 1;
  }
  return this;
}

void ZinMirSpatialSplitter::SplitPlan::~SplitPlan(ZinMirSpatialSplitter::SplitPlan *this)
{
  void *v2;
  void **v3;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 192);
  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)this + 24);
  v3 = (void **)this;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t ZinMirSpatialSplitter::DetermineStessTestingPlan(uint64_t a1, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v15[3];
  _BYTE v16[40];
  _BYTE v17[56];
  int64x2_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *__p;
  void *v24;
  uint64_t v25;
  _DWORD v26[12];
  _OWORD v27[3];
  uint64_t v28;
  int v29;
  _OWORD v30[2];
  int v31;
  int64x2_t v32;
  int64x2_t v33;
  char v34;
  _BYTE v35[16];
  uint64_t v36;
  char v37;
  int v38;
  __int128 v39;
  _OWORD v40[2];
  uint64_t v41;
  int v42;
  void ***v43;

  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::reset[abi:ne180100](a4);
  v38 = 16843008;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v41 = 0;
  v42 = 1065353216;
  ProducerConsumerChain::Analyze((ProducerConsumerChain *)&v38, a2, a3, **(const ZinIrHalParameters ***)(a1 + 16), (uint64_t)v35);
  if (v37)
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v36 - 8) + 40))(*(_QWORD *)(v36 - 8), 0, 0);
    v9 = *(_QWORD *)(*(_QWORD *)v8 + 64);
    if (v9 < 4)
    {
      v11 = 1;
    }
    else
    {
      v10 = ZinAlignPower2(*(_QWORD *)(*(_QWORD *)v8 + 64), 2);
      if (0xAAAAAAAAAAAAAAABLL * v9 <= 0x5555555555555555)
        v11 = v10 / 3;
      else
        v11 = v10 / 3 + 1;
    }
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    v29 = 1065353216;
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v32 = vdupq_n_s64(1uLL);
    v33 = v32;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v36 - 8) + 40))(*(_QWORD *)(v36 - 8), 0, 0);
    v12 = SplitInfo::Construct((ProducerConsumerChain *)v35, v11, *(_QWORD *)(*(_QWORD *)v13 + 72), (uint64_t)v27, 0, **(_QWORD **)(a1 + 16), *(ZinIrOpLayer **)(a1 + 48));
    if (!(_DWORD)v12)
    {
      memset(v15, 0, sizeof(v15));
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v15, *(uint64_t **)&v27[0], *((uint64_t **)&v27[0] + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v27[0] + 1) - *(_QWORD *)&v27[0]) >> 3));
      std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map((uint64_t)v16, (uint64_t)&v27[1] + 8);
      std::unordered_set<ZinIrOpLayer const*>::unordered_set((uint64_t)v17, (uint64_t)v30);
      *(int64x2_t *)&v17[40] = v32;
      v18 = v33;
      v19 = v34;
      v20 = 0;
      v21 = 0;
      v22 = v38;
      v24 = 0;
      v25 = 0;
      __p = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, (const void *)v39, *((uint64_t *)&v39 + 1), (uint64_t)(*((_QWORD *)&v39 + 1) - v39) >> 3);
      std::unordered_set<ZinANELayer const*>::unordered_set((uint64_t)v26, (uint64_t)v40 + 8);
      v26[10] = 0;
      std::optional<ZinMirSpatialSplitter::SplitPlan>::operator=[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan,void>(a4, (uint64_t)v15);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v17);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)v16);
      v43 = v15;
      std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v30);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v27[1] + 8);
    v15[0] = (void **)v27;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](v15);
  }
  else
  {
    v12 = 0;
  }
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v40 + 8);
  if ((_QWORD)v39)
  {
    *((_QWORD *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  return v12;
}

void sub_206F33940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t v39;

  ZinMirSpatialSplitter::SplitPlan::~SplitPlan((ZinMirSpatialSplitter::SplitPlan *)&a9);
  SplitInfo::~SplitInfo(&a39);
  std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100](v39 - 224);
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)(v39 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::optional<ZinMirSpatialSplitter::SplitPlan>::operator=[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 240))
  {
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__vdeallocate((void ***)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__move_assign(a1 + 24, (uint64_t *)(a2 + 24));
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign(a1 + 64, (uint64_t *)(a2 + 64));
    v4 = *(_OWORD *)(a2 + 104);
    v5 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v5;
    *(_OWORD *)(a1 + 104) = v4;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(a1 + 168, (__n128 *)(a2 + 168));
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign(a1 + 192, (uint64_t *)(a2 + 192));
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan,ZinMirSpatialSplitter::SplitPlan,ZinMirSpatialSplitter::SplitPlan*>(a1, a2);
    *(_BYTE *)(a1 + 240) = 1;
  }
  return a1;
}

uint64_t ZinMirSpatialSplitter::DetermineMinimalSplitPlan(uint64_t a1, ZinANELayer ***a2, unint64_t a3, uint64_t a4)
{
  ZinANELayer **v8;
  ZinANELayer **v9;
  const ZinIrOpLayer **v10;
  const ZinIrOpLayer **v11;
  _OWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  ZinNEConvLayer *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD v24[3];
  uint64_t v25;
  int v26;
  _OWORD v27[2];
  int v28;
  int64x2_t v29;
  int64x2_t v30;
  char v31;
  _QWORD v32[4];
  int v33;
  int v34;
  __int128 v35;
  _BYTE v36[32];
  uint64_t v37;
  int v38;
  void **v39;
  __int128 v40;
  __int128 v41;
  int v42;
  _BYTE v43[56];
  int64x2_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *__p;
  void *v50;
  uint64_t v51;
  _DWORD v52[14];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::reset[abi:ne180100](a4);
  v34 = 16843008;
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v38 = 1065353216;
  *(_QWORD *)&v40 = 0x100000000;
  std::unordered_set<SpatialDimension>::unordered_set((uint64_t)v32, (unsigned int *)&v40, 2);
  v9 = *a2;
  v8 = a2[1];
  while (v9 != v8)
    ProducerConsumerChain::AppendLayer((ProducerConsumerChain *)&v34, *v9++);
  v11 = (const ZinIrOpLayer **)*((_QWORD *)&v35 + 1);
  v10 = (const ZinIrOpLayer **)v35;
  if ((_QWORD)v35 != *((_QWORD *)&v35 + 1))
  {
    while (1)
    {
      ProducerConsumerChain::IsLayerAdmissible((ProducerConsumerChain *)&v34, *v10, **(const ZinIrHalParameters ***)(a1 + 16), v24);
      v40 = 0u;
      v41 = 0u;
      v42 = 1065353216;
      v12 = *(_OWORD **)&v24[0];
      if (*(_OWORD **)&v24[0] == (_OWORD *)((char *)v24 + 8))
        break;
      do
      {
        LODWORD(v39) = *((_DWORD *)v12 + 7);
        if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(v32, (unsigned int *)&v39))
        {
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v40, (unsigned int *)&v39, &v39);
        }
        v13 = (_QWORD *)*((_QWORD *)v12 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_OWORD *)*((_QWORD *)v12 + 2);
            v15 = *(_QWORD *)v14 == (_QWORD)v12;
            v12 = v14;
          }
          while (!v15);
        }
        v12 = v14;
      }
      while (v14 != (_OWORD *)((char *)v24 + 8));
      if (!*((_QWORD *)&v41 + 1))
        break;
      v33 = v42;
      std::__hash_table<SpatialDimension,std::hash<SpatialDimension>,std::equal_to<SpatialDimension>,std::allocator<SpatialDimension>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<SpatialDimension,void *> *>>(v32, (unsigned int *)v41, 0);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v40);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v24, *((_QWORD **)&v24[0] + 1));
      if (++v10 == v11)
      {
        v10 = (const ZinIrOpLayer **)*((_QWORD *)&v35 + 1);
        goto LABEL_17;
      }
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v40);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v24, *((_QWORD **)&v24[0] + 1));
    goto LABEL_28;
  }
LABEL_17:
  v16 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*(v10 - 1) + 40))(*(v10 - 1), 0, 0)+ 64);
  v17 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)&v35 + 1)
                                                                                               - 8)
                                                                                 + 40))(*(_QWORD *)(*((_QWORD *)&v35 + 1) - 8), 0, 0)+ 72);
  if (v16 >= a3
    && (LODWORD(v40) = 0,
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(v32, (unsigned int *)&v40)))
  {
    v16 = (a3 + v16 - 1) / a3;
    v18 = *(ZinNEConvLayer **)(*((_QWORD *)&v35 + 1) - 8);
    if (*(_DWORD *)(*((_QWORD *)v18 + 8) + 8) == 85 && *((_QWORD *)v18 + 54))
    {
      if ((*(_BYTE *)(ZinNEConvLayer::GetKernelDescriptor(v18) + 272) & 0x40) != 0)
        v16 -= (v16 != 1) & v16;
      v19 = 0;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    LODWORD(v40) = 1;
    if (!std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(v32, (unsigned int *)&v40)|| ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v35 + 1) - 8) + 408))(*(_QWORD *)(*((_QWORD *)&v35 + 1) - 8)) & 1) != 0)
    {
LABEL_28:
      v20 = 3;
      goto LABEL_36;
    }
    *(_QWORD *)&v40 = 0;
    v21 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)&v35 + 1) - 8) + 40))(*(_QWORD *)(*((_QWORD *)&v35 + 1) - 8), 0, 0);
    ZinTensorFormatGetSize(*(_DWORD *)(*(_QWORD *)v21 + 88), &v40);
    v22 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 528) / (unint64_t)v40;
    v17 = ZinDivRoundUp(v17, v22) / a3 * v22;
    v19 = 1;
  }
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v26 = 1065353216;
  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  v29 = vdupq_n_s64(1uLL);
  v30 = v29;
  v20 = SplitInfo::Construct((ProducerConsumerChain *)&v34, v16, v17, (uint64_t)v24, 0, **(_QWORD **)(a1 + 16), *(ZinIrOpLayer **)(a1 + 48));
  if (!(_DWORD)v20)
  {
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(&v40, *(uint64_t **)&v24[0], *((uint64_t **)&v24[0] + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v24[0] + 1) - *(_QWORD *)&v24[0]) >> 3));
    std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map((uint64_t)&v41 + 8, (uint64_t)&v24[1] + 8);
    std::unordered_set<ZinIrOpLayer const*>::unordered_set((uint64_t)v43, (uint64_t)v27);
    *(int64x2_t *)&v43[40] = v29;
    v44 = v30;
    v45 = v31;
    v46 = 0;
    v47 = 0;
    v48 = v34;
    v50 = 0;
    v51 = 0;
    __p = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, (const void *)v35, *((uint64_t *)&v35 + 1), (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3);
    std::unordered_set<ZinANELayer const*>::unordered_set((uint64_t)v52, (uint64_t)&v36[8]);
    v52[10] = v19;
    std::optional<ZinMirSpatialSplitter::SplitPlan>::operator=[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan,void>(a4, (uint64_t)&v40);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
    if (__p)
    {
      v50 = __p;
      operator delete(__p);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v43);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v41 + 8);
    v39 = (void **)&v40;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v39);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v24[1] + 8);
  *(_QWORD *)&v40 = v24;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
LABEL_36:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v36[8]);
  if ((_QWORD)v35)
  {
    *((_QWORD *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
  return v20;
}

void sub_206F33F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a28);
  ProducerConsumerChain::~ProducerConsumerChain((ProducerConsumerChain *)&a33);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::DeterminePlanStartingAt(uint64_t a1, ZinIrOpLayerGraph *a2, int a3, ZinIrOpLayer *a4, uint64_t a5)
{
  uint64_t result;

  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::reset[abi:ne180100](a5);
  if ((a3 - 1) >= 2)
  {
    if (a3)
      return 3;
    result = ZinMirSpatialSplitter::DetermineStessTestingPlan(a1, a2, a4, a5);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = ZinMirSpatialSplitter::DetermineOptimizedPlan(a1, a2, a3, a4, a5);
    if ((_DWORD)result)
      return result;
  }
  if (*(_BYTE *)(a5 + 240))
  {
    if (((uint64_t)(*(_QWORD *)(a5 + 176) - *(_QWORD *)(a5 + 168)) >> 3)
       * (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3) - 1) > (unint64_t)(float)((float)*(unint64_t *)(**(_QWORD **)(a1 + 16) + 32) * 0.8))
      std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::reset[abi:ne180100](a5);
  }
  return 0;
}

uint64_t ZinMirSpatialSplitter::SplitLayers(ZinIrOpLayer **a1, uint64_t **a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unsigned __int16 v9;
  void *__p;
  void *v11;
  uint64_t v12;
  _BYTE v13[240];
  char v14;

  v13[0] = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v7 = ZinMirSpatialSplitter::DetermineMinimalSplitPlan((uint64_t)a1, (ZinANELayer ***)&__p, a4, (uint64_t)v13);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (!(_DWORD)v7)
  {
    v9 = 0;
    if (v14)
      v7 = ZinMirSpatialSplitter::Split(a1, a2, (const ZinMirSpatialSplitter::SplitPlan *)v13, (LayerTilingHelper *)&v9, 1);
    else
      v7 = 3;
  }
  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v13);
  return v7;
}

void sub_206F34210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::ResetTileRegion(uint64_t a1, ZinMirSpatialSplitUtils *a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  const ZinIrOpLayer *v9;
  int IsDeConv;
  char *v11;
  const ZinIrOpLayer *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *__p;
  void *__src;
  char *v26;
  __int128 v27;

  v8 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v27 = *(_OWORD *)(a3 + 104);
  IsDeConv = ZinMirSpatialSplitUtils::IsDeConv(a2, v9);
  __p = 0;
  __src = 0;
  v26 = 0;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v26, 1uLL);
  v13 = &v11[8 * (_QWORD)v12];
  *(_QWORD *)v11 = a2;
  v14 = v11 + 8;
  v16 = (char *)__p;
  v15 = (char *)__src;
  if (__src != __p)
  {
    do
    {
      v17 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *((_QWORD *)v11 - 1) = v17;
      v11 -= 8;
    }
    while (v15 != v16);
    v15 = (char *)__p;
  }
  __p = v11;
  __src = v14;
  v26 = v13;
  if (v15)
  {
    operator delete(v15);
    v11 = (char *)__p;
  }
  __src = v14;
  if (v11 == v14)
  {
    v19 = 0;
  }
  else
  {
    do
    {
      v18 = *((_QWORD *)v14 - 1);
      __src = v14 - 8;
      v19 = ZinMirSpatialSplitUtils::IsDeConv((ZinMirSpatialSplitUtils *)v18, v12);
      if ((v19 & 1) != 0)
        break;
      if (*(_DWORD *)(*(_QWORD *)(v18 + 64) + 8) == 7)
        std::vector<ZinIrOpLayer *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinTransposeLayer **>,std::__wrap_iter<ZinTransposeLayer **>>((uint64_t)&__p, (char *)__src, *(uint64_t **)(v18 + 88), *(uint64_t **)(v18 + 96), (uint64_t)(*(_QWORD *)(v18 + 96) - *(_QWORD *)(v18 + 88)) >> 3);
      v14 = (char *)__src;
    }
    while (__p != __src);
  }
  v20 = ZinMirSpatialSplitUtils::CalculateSplitAlignmentConstraintInHOnCompressedTensor(a2, v12);
  v21 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 528);
  v22 = *(_QWORD *)(a3 + 120);
  v23 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinMirSpatialSplitUtils::OptimizeOutputTensorTileRegions((int64_t *)(v8 + 48), (int64_t *)&v27, v22, IsDeConv | v19, v20, v21, *(_DWORD *)(v23 + 88), a4);
  if (__p)
  {
    __src = __p;
    operator delete(__p);
  }
}

void sub_206F343E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitter::GatherLatencyInfoOnLayer(uint64_t a1, uint64_t a2, ZinMirSpatialSplitUtils *a3, SplitInfo *a4, ZinIrOpLayer *this, const TiledLayerTensorRegions **a6, uint64_t *a7)
{
  ZinMirSpatialSplitUtils *v9;
  uint64_t (***v11)(_QWORD, ZinIrOpLayer *, void **, _OWORD *);
  int v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  double v23;
  double v24;
  uint64_t v25;
  void **v26;
  void ***v27;
  void ***v28;
  double v29;
  void **v30;
  double v31;
  uint64_t v32;
  double v33;
  ZinIrOpLayer **v34;
  SplitInfo *v35;
  ZinMirSpatialSplitUtils *v36;
  const ZinIrOpLayer *v37;
  const TiledLayerTensorRegions *v38;
  const TiledLayerTensorRegions *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int *v43;
  int *v44;
  int v45;
  uint64_t ValueAt;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  const ZinIrOpLayer *v61;
  void **v62;
  void **v63;
  uint64_t v64;
  char *v65;
  ZinIrTensor *v66;
  int v67;
  __int16 v68;
  char *v69;
  void *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  __int16 v79;
  const TiledLayerTensorRegions *v80;
  const TiledLayerTensorRegions *v81;
  BOOL v82;
  double v83;
  double v84;
  double v85;
  TiledLayerTensorRegions *v86;
  TiledLayerTensorRegions *v87;
  double v88;
  ZinIrOpLayer *v89;
  ZinIrOpLayer *v90;
  char v91;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  Subgraph *v103;
  unsigned int v104;
  ZinIrOpLayer **v105;
  void *v110;
  void *v111;
  _OWORD *v112;
  void *v113;
  void *v114;
  char *v115;
  void *__p;
  int *v117;
  uint64_t v118;
  char v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127[2];
  __int128 v128;
  _BYTE v129[48];
  ZinIrOpLayer *v130;
  void **__src;
  void **v132;
  uint64_t v133[5];
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  __int128 v140[3];
  void *v141;
  __int128 v142;
  __int128 v143;
  ZinIrOpLayer *v144[2];
  __int128 v145;
  void *v146;
  void *v147;
  uint64_t v148;
  char v149;
  char *v150;
  TiledLayerTensorRegions *v151;
  char *v152;
  _OWORD v153[3];

  v9 = a3;
  if (!ZinIrOpLayer::IsANELayer(this))
  {
    v21 = (void **)*((_QWORD *)this + 14);
    v22 = (void **)*((_QWORD *)this + 15);
    v103 = this;
    v23 = 0.0;
    v24 = 0.0;
    if (v21 != v22)
    {
      v25 = (uint64_t)a3 + 72;
      do
      {
        v146 = 0;
        v146 = *v21;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v25, (ZinIrOpLayer **)&v146))
        {
          __src = (void **)v146;
          if (a7 + 1 != (uint64_t *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a7, (ZinIrOpLayer **)&__src))
          {
            __src = (void **)v146;
            if (a7 + 4 != (uint64_t *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)(a7 + 3), (ZinIrOpLayer **)&__src))
            {
              v26 = (void **)v146;
              v27 = (void ***)*((_QWORD *)v146 + 11);
              v28 = (void ***)*((_QWORD *)v146 + 12);
              v29 = 0.0;
              if (v27 != v28)
              {
                do
                {
                  __src = 0;
                  v30 = *v27++;
                  __src = v30;
                  if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v25, (ZinIrOpLayer **)&__src))
                  {
                    v29 = v29 + 1.0;
                  }
                }
                while (v27 != v28);
                v26 = (void **)v146;
              }
              __src = v26;
              v31 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a7, (ZinIrOpLayer **)&__src);
              __src = (void **)v146;
              v24 = v24
                  + (v31
                   - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)(a7 + 3), (ZinIrOpLayer **)&__src))/ v29;
            }
          }
        }
        ++v21;
      }
      while (v21 != v22);
    }
    v32 = a1;
    if (*(_BYTE *)(a1 + 32))
      v33 = 0.0;
    else
      v33 = v24;
    LatencyInfo::SetLatency(a7, this, 0, v33);
    LatencyInfo::SetLatency(a7, this, 1, 0.0);
    LatencyInfo::SetLatency(a7, this, 3, 0.0);
    LatencyInfo::SetLatency(a7, this, 2, 0.0);
    if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) != 7)
      goto LABEL_64;
    v34 = (ZinIrOpLayer **)*((_QWORD *)this + 11);
    v105 = (ZinIrOpLayer **)*((_QWORD *)v103 + 12);
    v35 = a4;
    v36 = a3;
    if (v34 == v105)
      goto LABEL_64;
    v23 = 0.0;
    while (1)
    {
      v130 = 0;
      v130 = *v34;
      if ((ZinMirSpatialSplitUtils *)((char *)a3 + 80) != (ZinMirSpatialSplitUtils *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a3 + 72, &v130))goto LABEL_63;
      v144[1] = 0;
      v144[0] = 0;
      WORD4(v145) = 0;
      *(_QWORD *)&v145 = 0;
      LOWORD(__src) = 256;
      std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>((char *)v144, (char *)&__src, (uint64_t)&__src + 2, 1uLL);
      WORD4(v145) = !ZinMirSpatialSplitUtils::IsRootOutputOrOutsideSubgraph(v36, v103, v37) | 0x100;
      v38 = *a6;
      v39 = a6[1];
      while (v38 != v39)
      {
        std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)&__src, v38);
        LOBYTE(v146) = 0;
        v149 = 0;
        if (!(_BYTE)v142)
          goto LABEL_52;
        *(_OWORD *)v127 = 0u;
        v128 = 0u;
        *(int64x2_t *)&v129[8] = vdupq_n_s64(1uLL);
        *(_OWORD *)&v129[24] = *(_OWORD *)&v129[8];
        *(_QWORD *)v129 = 0;
        *(_QWORD *)&v129[40] = 1;
        v40 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v130 + 32))(v130, 0, 0);
        v41 = *(_OWORD *)(v40 + 48);
        v42 = *(_OWORD *)(v40 + 64);
        *(_QWORD *)&v129[40] = *(_QWORD *)(v40 + 80);
        *(_OWORD *)&v129[8] = v41;
        *(_OWORD *)&v129[24] = v42;
        SplitInfo::GetSplitDimensions(v35, (char **)&__p);
        v44 = (int *)__p;
        v43 = v117;
        if (__p == v117)
        {
          v49 = 14;
          v50 = 1;
          if (*(double *)&__p != 0.0)
            goto LABEL_36;
        }
        else
        {
          while (1)
          {
            v45 = *v44;
            ValueAt = GetValueAtDimension<ZinTensorDimensions>(v133, *v44);
            v47 = SetValueAtDimension<ZinTensorDimensions>(&v129[8], v45, ValueAt);
            if (v47)
              break;
            v48 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)&__src, v45);
            v47 = SetValueAtDimension<ZinTensorPosition>(v127, v45, v48);
            if (v47)
              break;
            if (++v44 == v43)
            {
              v49 = 14;
              v50 = 1;
              goto LABEL_35;
            }
          }
          v50 = 0;
          v49 = 1;
          v104 = v47;
LABEL_35:
          v44 = (int *)__p;
          if (*(double *)&__p != 0.0)
          {
LABEL_36:
            v117 = v44;
            operator delete(v44);
          }
        }
        if (v50)
        {
          v51 = operator new(0x28uLL);
          v151 = (TiledLayerTensorRegions *)((char *)v51 + 40);
          v152 = (char *)v51 + 40;
          v52 = v128;
          *v51 = *(_OWORD *)v127;
          v51[1] = v52;
          v53 = *(_QWORD *)&v129[8];
          *((_QWORD *)v51 + 4) = *(_QWORD *)v129;
          v150 = (char *)v51;
          v54 = *(_QWORD *)&v129[24];
          v55 = *(_QWORD *)&v129[16];
          v56 = *(_OWORD *)&v129[32];
          v57 = (char *)operator new(0x48uLL);
          v114 = v57 + 72;
          v115 = v57 + 72;
          *(_QWORD *)v57 = v53;
          *((_QWORD *)v57 + 1) = v55;
          *((_QWORD *)v57 + 2) = v54;
          *(_OWORD *)(v57 + 24) = v56;
          *(_OWORD *)(v57 + 40) = 0u;
          *(_OWORD *)(v57 + 56) = 0u;
          v113 = v57;
          v58 = operator new(0x50uLL);
          v111 = v58 + 5;
          v112 = v58 + 5;
          v59 = *(_OWORD *)&v129[16];
          v58[2] = *(_OWORD *)v129;
          v58[3] = v59;
          v58[4] = *(_OWORD *)&v129[32];
          v60 = v128;
          *v58 = *(_OWORD *)v127;
          v58[1] = v60;
          v110 = v58;
          TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)&__p, v140, v127, (uint64_t)&v150, (uint64_t)&v113, (uint64_t)&v110, 0, 0);
          v35 = a4;
          v36 = a3;
          v32 = a1;
          std::optional<TiledLayerTensorRegions>::operator=[abi:ne180100]<TiledLayerTensorRegions,void>((uint64_t)&v146, (uint64_t)&__p);
          if (v126)
            operator delete(v126);
          if (v124)
          {
            v125 = v124;
            operator delete(v124);
          }
          if (v122)
          {
            v123 = v122;
            operator delete(v122);
          }
          if (v120)
          {
            v121 = v120;
            operator delete(v120);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          if (v113)
          {
            v114 = v113;
            operator delete(v113);
          }
          if (v150)
          {
            v151 = (TiledLayerTensorRegions *)v150;
            operator delete(v150);
          }
LABEL_52:
          *(double *)&__p = 0.0;
          v117 = 0;
          v119 = 0;
          v118 = 0;
          (*(void (**)(_QWORD, uint64_t, ZinMirSpatialSplitUtils *, SplitInfo *, ZinIrOpLayer *, void **, ZinIrOpLayer **, void **))(**(_QWORD **)(v32 + 120) + 16))(*(_QWORD *)(v32 + 120), a2, v36, v35, v130, &v146, v144, &__p);
          v49 = 0;
          v23 = v23 + *(double *)&__p;
          goto LABEL_54;
        }
        v32 = a1;
LABEL_54:
        std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v146);
        std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__src);
        if (v49)
          goto LABEL_59;
        v38 = (const TiledLayerTensorRegions *)((char *)v38 + 232);
      }
      v49 = 0;
LABEL_59:
      if (v144[0])
      {
        v144[1] = v144[0];
        operator delete(v144[0]);
      }
      if (v49)
        return v104;
LABEL_63:
      if (++v34 == v105)
      {
LABEL_64:
        LatencyInfo::SetLatency(a7, v103, 4, v23);
        return 0;
      }
    }
  }
  *(double *)&__p = 0.0;
  v117 = 0;
  v119 = 0;
  v118 = 0;
  v11 = *(uint64_t (****)(_QWORD, ZinIrOpLayer *, void **, _OWORD *))(a1 + 120);
  memset(v153, 0, 32);
  v12 = (**v11)(v11, this, &__p, v153);
  if (*(_QWORD *)&v153[0])
  {
    *((_QWORD *)&v153[0] + 1) = *(_QWORD *)&v153[0];
    operator delete(*(void **)&v153[0]);
  }
  if (v12)
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinMirSpatialSplitter::GatherLatencyInfoOnLayer(v13, v14, v15, v16, v17, v18, v19, v20);
    return 3;
  }
  v127[0] = 0;
  v127[1] = 0;
  WORD4(v128) = 0;
  *(_QWORD *)&v128 = 0;
  if (!*(_BYTE *)(a1 + 32))
    goto LABEL_101;
  (*(void (**)(void ***__return_ptr, ZinIrOpLayer *))(*(_QWORD *)this + 512))(&__src, this);
  v63 = __src;
  v62 = v132;
  if (__src == v132)
    goto LABEL_98;
  v101 = a7;
  v64 = (uint64_t)v9 + 72;
  v65 = (char *)v9 + 80;
  do
  {
    v66 = (ZinIrTensor *)*v63;
    v144[0] = *((ZinIrOpLayer **)*v63 + 12);
    if (v65 == (char *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v64, v144))
    {
      v68 = 0;
    }
    else
    {
      v147 = 0;
      v146 = 0;
      v148 = 0;
      if (ZinIrOpLayer::IsNoOp(v144[0], (uint64_t *)&v146))
      {
        v67 = *(_DWORD *)(*((_QWORD *)v144[0] + 8) + 8);
        if (v146)
        {
          v147 = v146;
          operator delete(v146);
        }
        if (v67 != 7)
        {
          v146 = 0;
          v146 = (void *)*((_QWORD *)ZinIrTensor::GetRootTensor(v66) + 12);
          v68 = v65 != (char *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(v64, (ZinIrOpLayer **)&v146);
          goto LABEL_79;
        }
      }
      else if (v146)
      {
        v147 = v146;
        operator delete(v146);
      }
      v68 = 1;
    }
LABEL_79:
    v69 = (char *)v127[1];
    if (v127[1] >= (void *)v128)
    {
      v71 = (char *)v127[1] - (char *)v127[0];
      if ((char *)v127[1] - (char *)v127[0] <= -3)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v72 = v71 >> 1;
      if ((unint64_t)v128 - (unint64_t)v127[0] <= (v71 >> 1) + 1)
        v73 = v72 + 1;
      else
        v73 = v128 - (unint64_t)v127[0];
      if ((unint64_t)v128 - (unint64_t)v127[0] >= 0x7FFFFFFFFFFFFFFELL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v128, v74);
      else
        v75 = 0;
      v76 = &v75[2 * v72];
      *(_WORD *)v76 = v68 | 0x100;
      v70 = v76 + 2;
      v78 = (char *)v127[0];
      v77 = (char *)v127[1];
      if (v127[1] != v127[0])
      {
        do
        {
          v79 = *((_WORD *)v77 - 1);
          v77 -= 2;
          *((_WORD *)v76 - 1) = v79;
          v76 -= 2;
        }
        while (v77 != v78);
        v77 = (char *)v127[0];
      }
      v127[0] = v76;
      v127[1] = v70;
      *(_QWORD *)&v128 = &v75[2 * v74];
      if (v77)
        operator delete(v77);
    }
    else
    {
      *(_WORD *)v127[1] = v68 | 0x100;
      v70 = v69 + 2;
    }
    v127[1] = v70;
    ++v63;
  }
  while (v63 != v62);
  v63 = __src;
  a7 = v101;
  v9 = a3;
LABEL_98:
  if (v63)
  {
    v132 = v63;
    operator delete(v63);
  }
  WORD4(v128) = !ZinMirSpatialSplitUtils::IsRootOutputOrOutsideSubgraph(v9, this, v61) | 0x100;
LABEL_101:
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v80 = *a6;
  v81 = a6[1];
  if (*a6 != v81)
  {
    v82 = 0;
    v83 = 0.0;
    v84 = 0.0;
    v85 = 0.0;
    while (1)
    {
      std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)&v146, v80);
      if (v149)
      {
        v87 = (TiledLayerTensorRegions *)v150;
        v86 = v151;
        if (v150 == (char *)v151)
          goto LABEL_111;
        while (1)
        {
          if (!v149)
            std::__throw_bad_optional_access[abi:ne180100]();
          if (TiledLayerTensorRegions::IsPerformanceEquivalent(v87, (const TiledLayerTensorRegions *)&v146))
            break;
          v87 = (TiledLayerTensorRegions *)((char *)v87 + 256);
          if (v87 == v86)
          {
            v87 = v86;
            break;
          }
        }
        if (v87 == v151)
        {
LABEL_111:
          v144[1] = 0;
          v144[0] = 0;
          BYTE8(v145) = 0;
          *(_QWORD *)&v145 = 0;
          if ((*(unsigned int (**)(_QWORD, uint64_t, ZinMirSpatialSplitUtils *, SplitInfo *, ZinIrOpLayer *, void **, void **, ZinIrOpLayer **))(**(_QWORD **)(a1 + 120) + 8))(*(_QWORD *)(a1 + 120), a2, a3, a4, this, &v146, v127, v144))
          {
            v93 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v93)
              ZinMirSpatialSplitter::GatherLatencyInfoOnLayer(v93, v94, v95, v96, v97, v98, v99, v100);
            std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v146);
            v91 = 0;
            goto LABEL_126;
          }
          v82 = (BYTE8(v145) | v82) != 0;
          if (!v149)
            std::__throw_bad_optional_access[abi:ne180100]();
          v88 = *(double *)&v145;
          v89 = v144[0];
          v90 = v144[1];
          TiledLayerTensorRegions::TiledLayerTensorRegions((TiledLayerTensorRegions *)&__src, (const TiledLayerTensorRegions *)&v146);
          v142 = *(_OWORD *)v144;
          v143 = v145;
          std::vector<std::pair<TiledLayerTensorRegions,LatencyData>>::push_back[abi:ne180100]((uint64_t *)&v150, (uint64_t)&__src);
          if (v141)
            operator delete(v141);
          if (v138)
          {
            v139 = v138;
            operator delete(v138);
          }
          if (v136)
          {
            v137 = v136;
            operator delete(v136);
          }
          if (v134)
          {
            v135 = v134;
            operator delete(v134);
          }
          v83 = v83 + *(double *)&v89;
          v84 = v84 + v88;
          v85 = v85 + *(double *)&v90;
        }
        else
        {
          v83 = v83 + *((double *)v87 + 28);
          v84 = v84 + *((double *)v87 + 30);
          v85 = v85 + *((double *)v87 + 29);
          v82 = (*((unsigned __int8 *)v87 + 248) | v82) != 0;
        }
      }
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v146);
      v80 = (const TiledLayerTensorRegions *)((char *)v80 + 232);
      if (v80 == v81)
        goto LABEL_125;
    }
  }
  v82 = 0;
  v85 = 0.0;
  v84 = 0.0;
  v83 = 0.0;
LABEL_125:
  LatencyInfo::SetLatency(a7, this, 0, *(double *)&__p);
  LatencyInfo::SetLatency(a7, this, 1, v83);
  LatencyInfo::SetLatency(a7, this, 2, v85);
  LatencyInfo::SetLatency(a7, this, 3, v84);
  LatencyInfo::SetLatency(a7, this, 4, 0.0);
  v144[0] = this;
  v146 = v144;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,BOOL>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,BOOL>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t)(a7 + 15), v144, (uint64_t)&std::piecewise_construct, (_QWORD **)&v146)+ 24) = v82;
  v91 = 1;
LABEL_126:
  __src = (void **)&v150;
  std::vector<std::pair<TiledLayerTensorRegions,LatencyData>>::__destroy_vector::operator()[abi:ne180100](&__src);
  if (v127[0])
  {
    v127[1] = v127[0];
    operator delete(v127[0]);
  }
  if ((v91 & 1) != 0)
    return 0;
  return 3;
}

void sub_206F34EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TiledLayerTensorRegions,LatencyData>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 8;
    if ((unint64_t)(v9 + 1) >> 56)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 7;
    if (v10 >> 7 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF00)
      v12 = 0xFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TiledLayerTensorRegions,LatencyData>>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[256 * v9];
    v17 = &v13[256 * v12];
    std::pair<TiledLayerTensorRegions,LatencyData>::pair[abi:ne180100]((uint64_t)v15, a2);
    v16 = v15 + 256;
    std::vector<std::pair<TiledLayerTensorRegions,LatencyData>>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<std::pair<TiledLayerTensorRegions,LatencyData>>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::pair<TiledLayerTensorRegions,LatencyData>::pair[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 256;
    a1[1] = v7 + 256;
  }
  a1[1] = v8;
}

void sub_206F35120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TiledLayerTensorRegions,LatencyData>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<TiledLayerTensorRegions>::operator=[abi:ne180100]<TiledLayerTensorRegions,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 224))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(a1 + 80, (__n128 *)(a2 + 80));
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(a1 + 104, (__n128 *)(a2 + 104));
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(a1 + 128, (__n128 *)(a2 + 128));
    v7 = *(_OWORD *)(a2 + 152);
    v8 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v8;
    *(_OWORD *)(a1 + 152) = v7;
    std::vector<BOOL>::__move_assign(a1 + 200, (_QWORD *)(a2 + 200));
  }
  else
  {
    std::construct_at[abi:ne180100]<TiledLayerTensorRegions,TiledLayerTensorRegions,TiledLayerTensorRegions*>(a1, a2);
    *(_BYTE *)(a1 + 224) = 1;
  }
  return a1;
}

uint64_t ZinMirSpatialSplitter::IsWorthTile(ZinMirSpatialSplitter *this, const Subgraph *a2, const SplitInfo *a3, ZinIrOpLayer ***a4, const LatencyInfo *a5, BOOL *a6)
{
  double v11;
  double v12;
  const ZinIrOpLayer *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  double v20;
  ZinIrOpLayer **v21;
  ZinIrOpLayer **v22;
  char *v23;
  ZinIrOpLayer *v24;
  ZinIrOpLayer **v25;
  ZinIrOpLayer **v26;
  double v27;
  ZinIrOpLayer *v28;
  double v29;
  BOOL v30;
  BOOL v31;
  ZinIrOpLayer ***v33;
  ZinIrOpLayer *v34;

  v11 = 1.0;
  if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)a4))
  {
    v34 = (ZinIrOpLayer *)a4;
    v11 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a5, &v34);
  }
  v34 = (ZinIrOpLayer *)a4;
  v12 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a5 + 24, &v34);
  v34 = (ZinIrOpLayer *)a4;
  v14 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a5 + 48, &v34);
  v15 = 1.0 - *((double *)this + 8);
  if (vabdd_f64(v11, v12) >= 1.0e-10)
    v16 = v11 - v12;
  else
    v16 = 0.0;
  v19 = !ZinOpLayerUtils::IsCopy((ZinOpLayerUtils *)a4, v13)
     || (v17 = *(_QWORD *)(ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a4, 0) + 104)) == 0
     || !*(_DWORD *)(v17 + 96)
     || (v18 = *(_QWORD *)(((uint64_t (*)(ZinIrOpLayer ***, _QWORD, _QWORD))(*a4)[4])(a4, 0, 0) + 104)) == 0
     || *(_DWORD *)(v18 + 96) == 0;
  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a4) && v19)
    v20 = -(v12 - v11 * v15);
  else
    v20 = v16;
  if (v20 >= 0.0)
  {
    v30 = 1;
    if (*((_BYTE *)a2 + 144) && v11 / v12 < 1.5 && v12 != 0.0)
      v30 = v14 < v12 * *((double *)this + 10);
  }
  else if (v14 >= v12 * *((double *)this + 10))
  {
    v30 = 0;
  }
  else
  {
    v22 = a4[14];
    v21 = a4[15];
    if (v22 != v21)
    {
      v23 = (char *)a2 + 72;
      do
      {
        v33 = (ZinIrOpLayer ***)*v22;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v23, (ZinIrOpLayer **)&v33))
        {
          v24 = (ZinIrOpLayer *)v33;
          v25 = v33[11];
          v26 = v33[12];
          v27 = 0.0;
          if (v25 != v26)
          {
            do
            {
              v34 = 0;
              v28 = *v25++;
              v34 = v28;
              if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v23, &v34))
              {
                v27 = v27 + 1.0;
              }
            }
            while (v25 != v26);
            v24 = (ZinIrOpLayer *)v33;
          }
          v34 = v24;
          v29 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a5, &v34);
          v34 = (ZinIrOpLayer *)v33;
          v20 = v20
              + (v29
               - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a5 + 24, &v34))/ v27;
        }
        ++v22;
      }
      while (v22 != v21);
    }
    v30 = v20 > 0.0;
  }
  v31 = v30;
  *a6 = v31;
  *a6 = *((_BYTE *)this + 26) | v31;
  return 0;
}

uint64_t ZinMirSpatialSplitter::RemoveChainPairFromSubgraph(ZinMirSpatialSplitter *this, Subgraph *a2, ZinIrOpLayer ***a3, const LatencyInfo *a4)
{
  double v8;
  double v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **i;
  double v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  char *v15;
  uint64_t **v16;
  char *v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;

  v21 = (ZinIrOpLayer *)a3;
  v8 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, &v21);
  v21 = (ZinIrOpLayer *)a3;
  v9 = v8
     - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, &v21);
  v10 = a3[14];
  for (i = a3[15]; v10 != i; ++v10)
  {
    v20 = *v10;
    if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2 + 72, &v20)&& ZinIrOpLayer::IsANELayer(v20))
    {
      v21 = v20;
      v12 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, &v21);
      v21 = v20;
      v9 = v9
         + v12
         - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, &v21);
    }
  }
  if (v9 > 0.0)
    return 0;
  v13 = a3[14];
  v14 = a3[15];
  if (v13 == v14)
    return 0;
  v15 = (char *)a2 + 72;
  v16 = (uint64_t **)((char *)a2 + 120);
  v17 = (char *)a2 + 24;
  while (1)
  {
    v20 = *v13;
    if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v15, &v20))
    {
      if ((*(unsigned int (**)(_QWORD, ZinIrOpLayer *))(**((_QWORD **)this + 22) + 24))(*((_QWORD *)this + 22), v20))
      {
        v18 = (ZinIrOpLayer *)**((_QWORD **)v20 + 14);
        v21 = v20;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v16, &v21))
        {
          v21 = v18;
          if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v17, &v21))
          {
            break;
          }
        }
      }
    }
    if (++v13 == v14)
      return 0;
  }
  v21 = (ZinIrOpLayer *)a3;
  std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v16, &v21, (uint64_t *)&v21);
  return 1;
}

void ZinMirSpatialSplitter::RemoveOutputNodeFromSubgraph(ZinMirSpatialSplitter *this, Subgraph *a2, ZinIrOpLayer ***a3, const LatencyInfo *a4)
{
  char IsNoOp;
  double v8;
  double v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **i;
  double v12;
  ZinIrOpLayer **v13;
  ZinIrOpLayer **v14;
  uint64_t **v15;
  char *v16;
  ZinIrOpLayer *v17;
  void *__p;
  void *v19;
  uint64_t v20;

  if (((unsigned int (*)(ZinIrOpLayer ***))(*a3)[14])(a3))
    ZinAssertImpl("Error: SNE layer should not be in subgraph.");
  __p = 0;
  v19 = 0;
  v20 = 0;
  IsNoOp = ZinIrOpLayer::IsNoOp((ZinIrOpLayer *)a3, (uint64_t *)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if ((IsNoOp & 1) == 0)
  {
    __p = a3;
    v8 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, (ZinIrOpLayer **)&__p);
    __p = a3;
    v9 = v8
       - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, (ZinIrOpLayer **)&__p);
    v10 = a3[14];
    for (i = a3[15]; v10 != i; ++v10)
    {
      v17 = *v10;
      if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2 + 72, &v17)&& ZinIrOpLayer::IsANELayer(v17))
      {
        __p = v17;
        v12 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, (ZinIrOpLayer **)&__p);
        __p = v17;
        v9 = v9
           + v12
           - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, (ZinIrOpLayer **)&__p);
      }
    }
    if (v9 <= 0.0)
    {
      v13 = a3[14];
      v14 = a3[15];
      if (v13 != v14)
      {
        v15 = (uint64_t **)((char *)a2 + 120);
        v16 = (char *)a2 + 24;
        do
        {
          v17 = *v13;
          __p = v17;
          if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v15, (ZinIrOpLayer **)&__p))
          {
            if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v16, &v17))
            {
              __p = a3;
              std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v15, (ZinIrOpLayer **)&__p, (uint64_t *)&__p);
            }
          }
          ++v13;
        }
        while (v13 != v14);
      }
    }
  }
}

void sub_206F357A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ZinMirSpatialSplitter::ComputeScaleFactorForChainedPairResetDecision(ZinMirSpatialSplitter *this, ZinIrOpLayer *a2, const Subgraph *a3)
{
  uint64_t v5;
  ZinIrOpLayer *v6;

  v6 = a2;
  if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, &v6))
  {
    return 1.0 - *((double *)this + 8);
  }
  v5 = *((_QWORD *)v6 + 11);
  if (*((_QWORD *)v6 + 12) - v5 == 8)
    return dbl_207AAA8D0[*(_QWORD *)(*(_QWORD *)v5 + 120) - *(_QWORD *)(*(_QWORD *)v5 + 112) == 8];
  else
    return 1.3;
}

uint64_t ZinMirSpatialSplitter::HandleL2DepSplit(ZinMirSpatialSplitter *this, uint64_t **a2, ZinIrOpLayer *a3, const LatencyInfo *a4)
{
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  int v10;
  ZinIrTensor *v11;
  const ZinIrTensor *v12;
  double v13;
  double *v14;
  double v15;
  ZinIrOpLayer *v16;
  ZinIrRegAllocUtil *v17;
  const ZinIrHalParameters *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t result;
  ZinIrTensor *v22;
  const ZinIrTensor *v23;
  char v24;
  ZinIrRegAllocUtil *v25;
  const ZinIrHalParameters *v26;
  uint64_t **v27;
  ZinIrOpLayer *v28;
  ZinIrOpLayer *v29[13];
  char v30;
  ZinIrOpLayer *v31;

  if (!*((_BYTE *)this + 24))
    return 0;
  v8 = (ZinIrOpLayer **)*((_QWORD *)a3 + 11);
  v9 = (ZinIrOpLayer **)*((_QWORD *)a3 + 12);
  if (v8 == v9)
  {
    v29[0] = a3;
    v20 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)(a2 + 3), v29);
    LOBYTE(v10) = 0;
    result = 0;
    if (v20)
      return result;
LABEL_15:
    v22 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
    v23 = (const ZinIrTensor *)**((_QWORD **)this + 2);
    LOBYTE(v29[0]) = 0;
    v30 = 0;
    v24 = v10 | ZinIrRegAllocUtil::IsL2Dependentable(v22, v23, (ZinTensorFamilyUtil *)v29);
    std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
    if ((v24 & 1) != 0)
      goto LABEL_9;
    return 0;
  }
  v10 = 0;
  do
  {
    v31 = *v8;
    if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)(a2 + 9), &v31))
    {
      v11 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v31 + 32))(v31, 0, 0);
      v12 = (const ZinIrTensor *)**((_QWORD **)this + 2);
      LOBYTE(v29[0]) = 0;
      v30 = 0;
      v10 |= ZinIrRegAllocUtil::IsL2Dependentable(v11, v12, (ZinTensorFamilyUtil *)v29);
      std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
    }
    ++v8;
  }
  while (v8 != v9);
  v29[0] = a3;
  if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)(a2 + 3), v29))goto LABEL_15;
  if ((v10 & 1) == 0)
    return 0;
LABEL_9:
  if (!ZinIrOpLayer::IsNELayer(a3))
    return 1;
  v29[0] = a3;
  v13 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, v29);
  v29[0] = a3;
  v14 = (double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 48, v29);
  v15 = *v14;
  if (*v14 < v13 * *((double *)this + 10))
    return 1;
  v16 = (ZinIrOpLayer *)**((_QWORD **)a3 + 11);
  v31 = v16;
  v28 = (ZinIrOpLayer *)**((_QWORD **)a3 + 14);
  v17 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, double))(*(_QWORD *)a3 + 32))(a3, 0, 0, v15);
  if (ZinIrRegAllocUtil::IsChainable(v17, **((const ZinIrTensor ***)this + 2), v18)
    && std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)(a2 + 9), &v28))
  {
    v29[0] = a3;
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a2 + 15, v29, (uint64_t *)v29);
    v29[0] = v28;
    v19 = a2 + 15;
  }
  else
  {
    v25 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0, 0);
    if (!ZinIrRegAllocUtil::IsChainable(v25, **((const ZinIrTensor ***)this + 2), v26)
      || !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)(a2 + 9), &v31))
    {
      return 1;
    }
    v29[0] = v31;
    v27 = a2 + 15;
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v27, v29, (uint64_t *)v29);
    v29[0] = a3;
    v19 = v27;
  }
  std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v19, v29, (uint64_t *)v29);
  return 1;
}

void sub_206F35AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<ZinTensorFamilyUtil,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::HandleChainSplit(ZinMirSpatialSplitter *this, Subgraph *a2, ZinIrOpLayer *a3, LatencyInfo *a4)
{
  char *v7;
  uint64_t v8;
  double v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  uint64_t **v15;
  ZinIrOpLayer *v16;
  ZinIrOpLayer *v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer *v19;

  v18 = a3;
  v7 = (char *)a2 + 72;
  if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2 + 72, &v18))ZinAssertImpl("Error");
  if ((ZinMirSpatialSplitter::RemoveChainPairFromSubgraph(this, a2, (ZinIrOpLayer ***)v18, a4) & 1) != 0)
    return 0;
  v17 = 0;
  if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, ZinIrOpLayer **))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), v18, &v17) & 1) != 0)return 0;
  if (!(*(unsigned int (**)(_QWORD, ZinIrOpLayer *))(**((_QWORD **)this + 22) + 24))(*((_QWORD *)this + 22), v18))return 0;
  v17 = v18;
  v16 = (ZinIrOpLayer *)**((_QWORD **)v18 + 14);
  if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v7, &v16))return 0;
  if (*((_BYTE *)this + 24))
    return 1;
  v19 = v17;
  v10 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, &v19);
  v19 = v16;
  v11 = (double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, &v19);
  if (v10 <= *v11)
    v10 = *v11;
  v19 = v17;
  v12 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, &v19);
  v19 = v16;
  v13 = (double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, &v19);
  if (v12 <= *v13)
    v12 = *v13;
  v14 = ZinMirSpatialSplitter::ComputeScaleFactorForChainedPairResetDecision(this, v17, a2);
  v8 = 1;
  LatencyInfo::SetLatency((uint64_t *)a4, v17, 1, v12);
  LatencyInfo::SetLatency((uint64_t *)a4, v16, 1, v12);
  LatencyInfo::SetLatency((uint64_t *)a4, v17, 0, v10);
  LatencyInfo::SetLatency((uint64_t *)a4, v16, 0, v10);
  if (v10 * v14 <= v12)
  {
    v19 = v17;
    v15 = (uint64_t **)((char *)a2 + 120);
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v15, &v19, (uint64_t *)&v19);
    v19 = v16;
    std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v15, &v19, (uint64_t *)&v19);
  }
  return v8;
}

uint64_t ZinMirSpatialSplitter::DetermineCircularBufferInputTiling(uint64_t a1, ZinIrOpLayer *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v15;
  ZinIrOpLayer *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  BOOL v22;
  int CanConcatBeCircularBufferProducer;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  const ZinIrOpLayer *v32;
  int v33;
  int v34;
  int v35;
  ZinMirSpatialSplitUtils *v36;
  const ZinIrTensor *v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  _QWORD *v43;
  const ZinTensorRegion *v44;
  const ZinTensorRegion *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  ZinIrOpLayer *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66[2];
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD v70[4];
  void *__p[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  void *v77;
  const ZinTensorRegion *v78;
  uint64_t v79;
  ZinIrOpLayer *v80[2];
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  ZinIrOpLayer *v88[2];

  v88[0] = a2;
  v15 = a3 + 24;
  if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3 + 24, v88))
  {
    return 0;
  }
  v68 = a4;
  *(_QWORD *)v66 = a6;
  v16 = v88[0];
  v18 = *((_QWORD *)v88[0] + 14);
  v17 = *((_QWORD *)v88[0] + 15);
  if (v18 == v17)
  {
    v21 = 0;
    v67 = 0;
  }
  else
  {
    v19 = v18 + 8;
    do
    {
      v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 8);
      v21 = v20 == 7;
      v22 = v20 == 7 || v19 == v17;
      v19 += 8;
    }
    while (!v22);
    while (1)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 64) + 8) == 7)
      {
        __p[0] = *(void **)v18;
        if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(a5 + 64), __p))
        {
          break;
        }
      }
      v18 += 8;
      if (v18 == v17)
      {
        v67 = 0;
        goto LABEL_15;
      }
    }
    v67 = 1;
LABEL_15:
    v16 = v88[0];
  }
  if (*(_DWORD *)(*((_QWORD *)v16 + 8) + 8) == 7)
    CanConcatBeCircularBufferProducer = ZinMirSpatialSplitUtils::CanConcatBeCircularBufferProducer(a3, a1 + 24, v16);
  else
    CanConcatBeCircularBufferProducer = 0;
  v26 = a7;
  v25 = *a7;
  v24 = v26[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3) < 2 || v25 + 24 == v24)
  {
    v29 = 0;
  }
  else
  {
    do
    {
      v27 = std::__equal_to::operator()[abi:ne180100]<std::vector<ZinTensorRegion>,std::vector<ZinTensorRegion>>((uint64_t)__p, v25 + 24, v25);
      if (!v27)
        break;
      v28 = v25 + 48;
      v25 += 24;
    }
    while (v28 != v24);
    v29 = !v27;
  }
  if (*(_BYTE *)(a1 + 29))
    v30 = 1;
  else
    v30 = *(_BYTE *)(a1 + 32) != 0;
  v31 = (*(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 25))
     && std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(v15, v88) == 0;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v72 = 0;
  v33 = v31 & (ZinIrOpLayer::IsNoOp(v88[0], (uint64_t *)__p) ^ 1 | CanConcatBeCircularBufferProducer);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v34 = v29 & v30;
  v35 = (v21 & v33) == 1 ? v67 & ZinMirSpatialSplitUtils::IsDeConv(v88[0], v32) : 0;
  v36 = (ZinMirSpatialSplitUtils *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v88[0] + 32))(v88[0], 0, 0);
  if ((v33 & (!v21 | v35) & (v34 | ZinMirSpatialSplitUtils::HasConsumerWithKernelSupportOnHeight(v36, v37)) & 1) == 0)return 0;
  v39 = *a8;
  for (i = a8[1];
        i != v39;
  a8[1] = v39;
  v42 = *(_QWORD *)(a3 + 64);
  v43 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v68, v88);
  if (!v43)
    ZinAssertImpl("Helper for layer in Spatial Splitting not found");
  LayerTilingHelper::LayerTilingHelper((LayerTilingHelper *)v80, (const LayerTilingHelper *)(v43 + 3));
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<WorkUnit>::__init_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>(&v77, **(const void ***)v66, *(_QWORD *)(*(_QWORD *)v66 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v66 + 8) - **(_QWORD **)v66) >> 4));
  v44 = (const ZinTensorRegion *)v77;
  v45 = v78;
  if (v77 == v78)
  {
LABEL_70:
    if (&v77 != *(void ***)v66)
      std::vector<WorkUnit>::__assign_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>(*(char **)v66, (char *)v77, (uint64_t)v78, 0xCCCCCCCCCCCCCCCDLL * ((v78 - (const ZinTensorRegion *)v77) >> 4));
    v40 = 1;
    goto LABEL_78;
  }
  v46 = 0;
  v69 = (_QWORD *)(a5 + 64);
  while (!(v46 % *(_QWORD *)(a5 + 104)))
  {
    if (*((_QWORD *)v44 + 2))
      ZinAssertImpl("Spatial Splitting branch mismatch");
LABEL_61:
    v63 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v63 + 1;
    v70[0] = v42;
    v70[1] = v63;
    v70[2] = v46;
    v70[3] = 0;
    LayerTilingHelper::ToProduce(v80, (const TiledLayerTensorRegions::Id *)v70, v44, (uint64_t)__p);
    if (v35)
    {
      v70[0] = v88[0];
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v69, v70);
    }
    v64 = a8[1];
    if (v64 != *a8 && v76 && !*(_BYTE *)(v64 - 8))
    {
      v70[0] = v88[0];
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v69, v70);
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
      goto LABEL_77;
    }
    if (v64 >= a8[2])
    {
      v65 = std::vector<std::optional<TiledLayerTensorRegions>>::__push_back_slow_path<std::optional<TiledLayerTensorRegions> const&>(a8, (const TiledLayerTensorRegions *)__p);
    }
    else
    {
      std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)a8[1], (const TiledLayerTensorRegions *)__p);
      v65 = v64 + 232;
      a8[1] = v64 + 232;
    }
    a8[1] = v65;
    ++v46;
    std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
    v44 = (const ZinTensorRegion *)((char *)v44 + 80);
    if (v44 == v45)
      goto LABEL_70;
  }
  v47 = (a8[1] - *a8) / 232;
  v48 = 232 * v47 + 192;
  do
  {
    if (!v47)
      ZinAssertImpl("Invalid spatial split circular buffer state");
    --v47;
    v49 = *(unsigned __int8 *)(*a8 + v48 - 200);
    v48 -= 232;
  }
  while (!v49);
  if (!ZinTensorRegion::IsValid(v44))
    goto LABEL_61;
  v50 = *a8;
  if (0x34F72C234F72C235 * ((a8[1] - *a8) >> 3) <= v47)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  if (!*(_BYTE *)(v50 + v48 + 32))
    std::__throw_bad_optional_access[abi:ne180100]();
  v51 = v88[0];
  v52 = *(_QWORD *)(v50 + v48 - 136) + *(_QWORD *)(v50 + v48 - 176);
  v53 = *((_QWORD *)v44 + 2);
  v54 = __OFSUB__(v52, v53);
  v55 = v52 - v53;
  if (v55 < 0 == v54)
  {
    v56 = (_QWORD *)(v50 + v48);
    if (*(v56 - 21) == *((_QWORD *)v44 + 3) && *(v56 - 16) - *v56 == *((_QWORD *)v44 + 8))
    {
      v57 = *((_QWORD *)v44 + 7);
      v58 = v57 <= v55;
      v59 = v57 - v55;
      if (v58)
      {
        ZinTensorRegion::InvalidZinTensorRegion((uint64_t)__p);
        *(_OWORD *)v44 = *(_OWORD *)__p;
        v60 = v72;
        v61 = v73;
        v62 = v75;
        *((_OWORD *)v44 + 3) = v74;
        *((_OWORD *)v44 + 4) = v62;
        *((_OWORD *)v44 + 1) = v60;
        *((_OWORD *)v44 + 2) = v61;
        __p[0] = v51;
        std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v69, __p, __p);
      }
      else if (v55 >= 1)
      {
        *((_QWORD *)v44 + 2) = v52;
        *((_QWORD *)v44 + 7) = v59;
        __p[0] = v51;
        std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v69, __p, __p);
      }
      goto LABEL_61;
    }
  }
  __p[0] = v88[0];
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v69, __p);
LABEL_77:
  v40 = 0;
LABEL_78:
  if (v77)
  {
    v78 = (const ZinTensorRegion *)v77;
    operator delete(v77);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v83)
    operator delete(v83);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  return v40;
}

void sub_206F362F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,char a49)
{
  std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a17);
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  LayerTilingHelper::~LayerTilingHelper((LayerTilingHelper *)&a49);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::DetermineStandardInputTiling(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, const ZinTensorRegion **a5, uint64_t *a6)
{
  _QWORD *v10;
  uint64_t i;
  uint64_t v12;
  const ZinTensorRegion *v13;
  const ZinTensorRegion *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  _BYTE v21[232];
  ZinIrOpLayer *v22[2];
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;

  v30 = a2;
  v10 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v30);
  if (!v10)
    ZinAssertImpl("Helper for layer in Spatial Splitting not found");
  LayerTilingHelper::LayerTilingHelper((LayerTilingHelper *)v22, (const LayerTilingHelper *)(v10 + 3));
  v12 = *a6;
  for (i = a6[1];
        i != v12;
  a6[1] = v12;
  v13 = *a5;
  v14 = a5[1];
  if (v13 != v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 64);
    do
    {
      v17 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v17 + 1;
      v20[0] = v16;
      v20[1] = v17;
      v20[2] = v15;
      v20[3] = 0;
      LayerTilingHelper::ToProduce(v22, (const TiledLayerTensorRegions::Id *)v20, v13, (uint64_t)v21);
      v18 = a6[1];
      if (v18 >= a6[2])
      {
        v19 = std::vector<std::optional<TiledLayerTensorRegions>>::__push_back_slow_path<std::optional<TiledLayerTensorRegions> const&>(a6, (const TiledLayerTensorRegions *)v21);
      }
      else
      {
        std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)a6[1], (const TiledLayerTensorRegions *)v21);
        v19 = v18 + 232;
        a6[1] = v18 + 232;
      }
      a6[1] = v19;
      ++v15;
      std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v21);
      v13 = (const ZinTensorRegion *)((char *)v13 + 80);
    }
    while (v13 != v14);
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v25)
    operator delete(v25);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_206F364BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  LayerTilingHelper::~LayerTilingHelper((LayerTilingHelper *)&a42);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::DetermineInputTiling(uint64_t a1, ZinIrOpLayer *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t result;

  result = ZinMirSpatialSplitter::DetermineCircularBufferInputTiling(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t, ZinIrOpLayer *, uint64_t, _QWORD *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4, a6, a8);
  return result;
}

uint64_t ZinMirSpatialSplitter::ExploreResetCurrentLayer(uint64_t a1, ZinIrOpLayer ***a2, uint64_t **a3, uint64_t a4, const LatencyInfo *a5, _QWORD *a6)
{
  ZinMirSpatialSplitter *v12;
  ZinMirSpatialSplitter *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  BOOL v20;
  ZinIrOpLayer ***v21;

  v20 = 1;
  if (*(_BYTE *)(a1 + 56))
    return 0;
  ZinMirSpatialSplitter::IsWorthTile((ZinMirSpatialSplitter *)a1, (const Subgraph *)a3, (const SplitInfo *)a3, a2, a5, &v20);
  v12 = (ZinMirSpatialSplitter *)((uint64_t (*)(ZinIrOpLayer ***, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
  if (*(_QWORD *)(a4 + 104) <= *((_QWORD *)v12 + 8))
  {
    v13 = (ZinMirSpatialSplitter *)((uint64_t (*)(ZinIrOpLayer ***, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
    v14 = *((_QWORD *)v13 + 9);
    v15 = *(_QWORD *)(a4 + 112);
    if ((v20
       || ZinMirSpatialSplitter::ConcatenatedLayersBenefitFromSplit(v13, (const ZinIrOpLayer *)a2, (Subgraph *)a3, a5))&& v15 <= v14)
    {
      v16 = 1;
      goto LABEL_10;
    }
  }
  else if (!v20)
  {
    ZinMirSpatialSplitter::ConcatenatedLayersBenefitFromSplit(v12, (const ZinIrOpLayer *)a2, (Subgraph *)a3, a5);
  }
  v16 = (*(uint64_t (**)(_QWORD, ZinIrOpLayer ***))(**(_QWORD **)(a1 + 176) + 48))(*(_QWORD *)(a1 + 176), a2);
LABEL_10:
  v17 = ZinMirSpatialSplitter::HandleChainSplit((ZinMirSpatialSplitter *)a1, (Subgraph *)a3, (ZinIrOpLayer *)a2, a5);
  v18 = ZinMirSpatialSplitter::HandleL2DepSplit((ZinMirSpatialSplitter *)a1, a3, (ZinIrOpLayer *)a2, a5);
  if ((v18 & 1) == 0 && (v17 & 1) == 0 && (v16 & 1) == 0)
  {
    a6[1] = *a6;
    (*(void (**)(uint64_t, ZinIrOpLayer ***, uint64_t, _QWORD *))(*(_QWORD *)a1 + 120))(a1, a2, a4, a6);
    v21 = a2;
    v18 = (uint64_t)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(a3 + 15, (ZinIrOpLayer **)&v21, (uint64_t *)&v21);
  }
  ZinMirSpatialSplitter::RemoveOutputNodeFromSubgraph((ZinMirSpatialSplitter *)v18, (Subgraph *)a3, a2, a5);
  return 0;
}

uint64_t ZinMirSpatialSplitter::ConcatenatedLayersBenefitFromSplit(ZinMirSpatialSplitter *this, const ZinIrOpLayer *a2, Subgraph *a3, const LatencyInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  double v12;
  double v13;
  int v14;
  char v15;
  ZinIrOpLayer **v16;
  ZinIrOpLayer **v17;
  uint64_t **v18;
  ZinIrOpLayer *v19;
  ZinIrOpLayer *v20;
  ZinIrOpLayer *v21;

  v4 = *((_QWORD *)a2 + 14);
  v5 = *((_QWORD *)a2 + 15);
  if (v4 == v5)
    return 0;
  while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 64) + 8) != 7)
  {
    v4 += 8;
    if (v4 == v5)
      return 0;
  }
  v20 = *(ZinIrOpLayer **)v4;
  v9 = (char *)a3 + 72;
  result = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, &v20);
  if (!result)
    return result;
  v10 = (ZinIrOpLayer **)*((_QWORD *)v20 + 11);
  v11 = (ZinIrOpLayer **)*((_QWORD *)v20 + 12);
  if (v10 == v11)
  {
    v14 = 1;
    v12 = 0.0;
    goto LABEL_16;
  }
  v12 = 0.0;
  while (1)
  {
    v19 = *v10;
    if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, &v19))
    {
      break;
    }
LABEL_12:
    if (++v10 == v11)
    {
      v14 = 1;
      goto LABEL_16;
    }
  }
  v21 = v19;
  if ((const LatencyInfo *)((char *)a4 + 32) != (const LatencyInfo *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)a4 + 24, &v21))
  {
    v21 = v19;
    v13 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4, &v21);
    v21 = v19;
    v12 = v12
        + v13
        - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a4 + 24, &v21);
    goto LABEL_12;
  }
  v14 = 0;
LABEL_16:
  if (v12 > 0.0)
    v15 = v14;
  else
    v15 = 0;
  result = 1;
  if ((v15 & 1) == 0 && v14)
  {
    v16 = (ZinIrOpLayer **)*((_QWORD *)v20 + 11);
    v17 = (ZinIrOpLayer **)*((_QWORD *)v20 + 12);
    if (v16 != v17)
    {
      v18 = (uint64_t **)((char *)a3 + 120);
      do
      {
        v19 = *v16;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v9, &v19))
        {
          v21 = v19;
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v18, &v21, (uint64_t *)&v21);
        }
        ++v16;
      }
      while (v16 != v17);
    }
    return 0;
  }
  return result;
}

uint64_t ZinMirSpatialSplitter::ReEvaluateSubgraph(ZinMirSpatialSplitter *this, ZinIrOpLayerGraph *a2, Subgraph *a3, uint64_t **a4, LatencyInfo *a5, int a6)
{
  uint64_t result;

  if (*((_QWORD *)a3 + 11) != *((_QWORD *)a5 + 5))
    ZinAssertImpl("Spatial Split Internal Error", a2);
  if (a6 && !*((_BYTE *)this + 56) && ZinMirSpatialSplitter::ReEvaluateTiledLayers(this, a2, a3, a4, a5))
    return 3;
  ZinMirSpatialSplitter::PickBestResetLayer(this, a3);
  result = 0;
  if (*((_BYTE *)this + 56))
  {
    if (*((_QWORD *)a3 + 17))
      ZinAssertImpl("Resetting subgraph not allowed");
  }
  return result;
}

uint64_t ZinMirSpatialSplitter::ReEvaluateTiledLayers(ZinMirSpatialSplitter *this, ZinIrOpLayerGraph *a2, Subgraph *a3, uint64_t **a4, LatencyInfo *a5)
{
  Subgraph **v6;
  Subgraph *v7;
  _QWORD *v8;
  void **v9;
  void **v10;
  ZinIrTensor *v11;
  ZinIrTensor *RootTensor;
  TiledLayerTensorRegions *v13;
  TiledLayerTensorRegions *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  Subgraph *v19;
  Subgraph **v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  void **v24;
  void **v25;
  int v26;
  int v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  uint64_t *v31;
  const TiledLayerTensorRegions *v32;
  TiledLayerTensorRegions *v33;
  TiledLayerTensorRegions *v34;
  const SplitInfo *v35;
  ZinMirSpatialSplitter *v36;
  char v37;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v51;
  BOOL v52[8];
  uint64_t v53;
  uint64_t v54;
  ZinIrOpLayer *v55;
  void *__p;
  TiledLayerTensorRegions *v57;
  unint64_t v58;
  void **v59;

  v6 = (Subgraph **)((char *)a3 + 8);
  v7 = *(Subgraph **)a3;
  if (*(Subgraph **)a3 != (Subgraph *)((char *)a3 + 8))
  {
    v51 = (uint64_t **)((char *)a3 + 120);
    do
    {
      v8 = (_QWORD *)*((_QWORD *)v7 + 4);
      v9 = (void **)v8[11];
      v10 = (void **)v8[12];
      while (v9 != v10)
      {
        __p = 0;
        __p = *v9;
        if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, (ZinIrOpLayer **)&__p))
        {
          goto LABEL_21;
        }
        ++v9;
      }
      v11 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v8 + 32))(v8, 0, 0);
      RootTensor = ZinIrTensor::GetRootTensor(v11);
      ZinIrTensor::GetTensorFamily(RootTensor, (uint64_t)&__p);
      v14 = (TiledLayerTensorRegions *)__p;
      v13 = v57;
      if (__p == v57)
      {
        v15 = 0;
        if (__p)
          goto LABEL_17;
      }
      else
      {
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(*(_QWORD *)v14 + 96);
          v18 = *(_QWORD **)(v16 + 112);
          v17 = *(_QWORD **)(v16 + 120);
          while (v18 != v17)
          {
            *(_QWORD *)v52 = 0;
            *(_QWORD *)v52 = *v18;
            if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v52)
              && std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, (ZinIrOpLayer **)v52))
            {
              v15 = 1;
              break;
            }
            ++v18;
          }
          v14 = (TiledLayerTensorRegions *)((char *)v14 + 8);
        }
        while (v14 != v13);
        v14 = (TiledLayerTensorRegions *)__p;
        if (__p)
        {
LABEL_17:
          v57 = v14;
          operator delete(v14);
        }
      }
      if ((v15 & 1) == 0 && ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v8))
      {
        __p = v8;
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v51, (ZinIrOpLayer **)&__p, (uint64_t *)&__p);
      }
LABEL_21:
      v19 = (Subgraph *)*((_QWORD *)v7 + 1);
      if (v19)
      {
        do
        {
          v20 = (Subgraph **)v19;
          v19 = *(Subgraph **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (Subgraph **)*((_QWORD *)v7 + 2);
          v23 = *v20 == v7;
          v7 = (Subgraph *)v20;
        }
        while (!v23);
      }
      v7 = (Subgraph *)v20;
    }
    while (v20 != v6);
  }
  v21 = (char *)a3 + 48;
  if ((Subgraph *)((char *)a3 + 48) != *((Subgraph **)a3 + 7))
  {
    v22 = *((_QWORD *)a3 + 8);
    do
    {
      --v22;
      v55 = 0;
      v55 = *(ZinIrOpLayer **)(*(_QWORD *)v21 + 16);
      __p = v55;
      if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 120, (ZinIrOpLayer **)&__p)&& !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 24, &v55)&& !std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3, &v55))
      {
        v28 = (void **)*((_QWORD *)v55 + 11);
        v29 = (void **)*((_QWORD *)v55 + 12);
        while (v28 != v29)
        {
          __p = *v28;
          if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 120, (ZinIrOpLayer **)&__p))
          {
            __p = 0;
            v57 = 0;
            v58 = 0;
            v31 = *a4;
            v30 = a4[1];
            while (v31 != v30)
            {
              *(_QWORD *)v52 = 0;
              v53 = 0;
              v54 = 0;
              std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v52, *v31, v31[1], 0x34F72C234F72C235 * ((v31[1] - *v31) >> 3));
              v32 = (const TiledLayerTensorRegions *)(*(_QWORD *)v52 + 232 * v22);
              v33 = v57;
              if ((unint64_t)v57 >= v58)
              {
                v34 = (TiledLayerTensorRegions *)std::vector<std::optional<TiledLayerTensorRegions>>::__push_back_slow_path<std::optional<TiledLayerTensorRegions> const&>((uint64_t *)&__p, v32);
              }
              else
              {
                std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100](v57, v32);
                v34 = (TiledLayerTensorRegions *)((char *)v33 + 232);
              }
              v57 = v34;
              v59 = (void **)v52;
              std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v59);
              v31 += 3;
            }
            if (!(*(unsigned int (**)(ZinMirSpatialSplitter *, ZinIrOpLayerGraph *, Subgraph *, uint64_t **, ZinIrOpLayer *, void **, LatencyInfo *))(*(_QWORD *)this + 16))(this, a2, a3, a4, v55, &__p, a5))
            {
              v52[0] = 0;
              ZinMirSpatialSplitter::IsWorthTile(this, a3, v35, (ZinIrOpLayer ***)v55, a5, v52);
              v36 = (ZinMirSpatialSplitter *)ZinMirSpatialSplitter::HandleChainSplit(this, a3, v55, a5);
              if (*((_QWORD *)v55 + 12) - *((_QWORD *)v55 + 11) == 8)
                v37 = (char)v36;
              else
                v37 = 1;
              if ((v37 & 1) == 0
                && !v52[0]
                && (ZinMirSpatialSplitter::ConcatenatedLayersBenefitFromSplit(v36, v55, a3, a5) & 1) == 0)
              {
                v59 = (void **)v55;
                std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)a3 + 15, (ZinIrOpLayer **)&v59, (uint64_t *)&v59);
              }
              *(_QWORD *)v52 = &__p;
              std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
              break;
            }
            v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v39)
              ZinMirSpatialSplitter::ReEvaluateTiledLayers(v39, v40, v41, v42, v43, v44, v45, v46);
            *(_QWORD *)v52 = &__p;
            std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
            return 3;
          }
          ++v28;
        }
      }
      v23 = *(_DWORD *)(*((_QWORD *)v55 + 8) + 8) == 7 && *((_QWORD *)a3 + 17) == 0;
      if (v23)
      {
        v24 = (void **)*((_QWORD *)v55 + 11);
        v25 = (void **)*((_QWORD *)v55 + 12);
        if (v24 != v25)
        {
          v26 = 0;
          v27 = 0;
          do
          {
            __p = 0;
            __p = *v24;
            if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)__p))
            {
              if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a3 + 72, (ZinIrOpLayer **)&__p))
              {
                ++v27;
              }
              else
              {
                ++v26;
              }
            }
            ++v24;
          }
          while (v24 != v25);
          if (v26 > v27)
          {
            __p = v55;
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)a3 + 15, (ZinIrOpLayer **)&__p, (uint64_t *)&__p);
          }
        }
      }
      v21 = *(char **)v21;
    }
    while (v21 != *((char **)a3 + 7));
  }
  ZinMirSpatialSplitter::OptimizeTileCountByInsertingResetLayers(this, a2, a3, (const SplitInfo *)a4, a5);
  return 0;
}

void sub_206F36D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **p_p, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  p_p = &__p;
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::PickBestResetLayer(ZinMirSpatialSplitter *this, Subgraph *a2)
{
  uint64_t **v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  ZinIrOpLayer *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  void *__p;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  ZinIrOpLayer *v25;

  if (*((_BYTE *)this + 24))
  {
    v23 = 0;
    v24 = 0;
    v22 = (uint64_t *)&v23;
    v3 = (uint64_t **)((char *)a2 + 120);
    v4 = (char *)*((_QWORD *)a2 + 15);
    v5 = (char *)a2 + 128;
    if (v4 != (char *)a2 + 128)
    {
      do
      {
        v25 = (ZinIrOpLayer *)*((_QWORD *)v4 + 4);
        __p = v25;
        if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2 + 24, (ZinIrOpLayer **)&__p))std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v22, &v25, (uint64_t *)&v25);
        v6 = (char *)*((_QWORD *)v4 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v4 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != v5);
      if (v24 >= 2)
      {
        ZinMirSpatialSplitUtils::GetSortedCluster((uint64_t)a2 + 72, 1, (ZinIrOpLayer ***)&__p);
        v9 = *(_QWORD *)(*(_QWORD *)__p + 48);
        v10 = *(_QWORD *)(*(v21 - 1) + 48);
        v11 = __OFADD__(v10, v9);
        v12 = v10 + v9;
        if (v12 < 0 != v11)
          ++v12;
        v13 = v22;
        if (v22 == (uint64_t *)&v23)
          goto LABEL_31;
        v14 = 0;
        v15 = v12 >> 1;
        v16 = 0x7FFFFFFF;
        do
        {
          v17 = v15 - *(_DWORD *)(v13[4] + 48);
          if (v17 < 0)
            v17 = *(_DWORD *)(v13[4] + 48) - v15;
          if (v17 < v16)
          {
            v16 = v17;
            v14 = (ZinIrOpLayer *)v13[4];
          }
          v18 = (uint64_t *)v13[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (uint64_t *)v13[2];
              v8 = *v19 == (_QWORD)v13;
              v13 = v19;
            }
            while (!v8);
          }
          v13 = v19;
        }
        while (v19 != (uint64_t *)&v23);
        if (!v14)
LABEL_31:
          ZinAssertImpl("We should find a reset layer");
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v3, *((_QWORD **)a2 + 16));
        *((_QWORD *)a2 + 16) = 0;
        *((_QWORD *)a2 + 17) = 0;
        *((_QWORD *)a2 + 15) = v5;
        v25 = v14;
        std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v3, &v25, (uint64_t *)&v25);
        if (__p)
        {
          v21 = __p;
          operator delete(__p);
        }
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, v23);
  }
}

void sub_206F36FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::OptimizeTileCountByInsertingResetLayers(ZinMirSpatialSplitter *this, ZinIrOpLayerGraph *a2, Subgraph *a3, const SplitInfo *a4, const LatencyInfo *a5)
{
  const LatencyInfo *v6;
  double v7;
  const LatencyInfo *v8;
  const LatencyInfo *v9;
  const LatencyInfo *v10;
  BOOL v11;
  char *v12;
  double v13;
  ZinIrOpLayer *v14;
  uint64_t v15;
  Subgraph *v16;
  Subgraph *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  Subgraph *v21;
  Subgraph *v22;
  int v23;
  Subgraph *v24;
  double v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t **v31;
  _QWORD **v32;
  double v33;
  _QWORD *v34;
  _QWORD **v35;
  _QWORD **v36;
  _QWORD **v37;
  _DWORD *v38;
  void **v39;
  double *v40;
  void **v41;
  void **v42;
  ZinIrOpLayer *v43;
  ZinIrOpLayer **v45;
  ZinIrOpLayer *v46;
  ZinIrOpLayer *v47;
  Subgraph *v48;
  char *v49;
  int64x2_t v50;
  Subgraph *v51;
  uint8_t buf[8];
  _QWORD *v57;
  uint64_t v58;
  _QWORD **v59;
  _QWORD *v60[2];
  _QWORD **v61;
  _QWORD *v62[2];
  _QWORD **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD **v66;
  _QWORD *v67[2];
  _QWORD *v68[4];
  int v69;
  _OWORD v70[3];
  uint64_t v71;
  int v72;
  _BYTE v73[32];
  int v74;
  int64x2_t v75;
  int64x2_t v76;
  void **v77;
  _QWORD *v78[2];
  _QWORD *v79[3];
  uint64_t v80[3];
  ZinIrOpLayer **v81;
  ZinIrOpLayer **v82[2];
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85[4];
  _QWORD **v86;
  _QWORD *v87[2];
  Subgraph *v88;
  Subgraph *v89;
  uint64_t v90;
  char v91[8];
  _QWORD *v92;
  _QWORD *v93[3];
  uint64_t v94[3];
  _QWORD *v95[3];
  uint64_t v96;
  uint64_t *v97[4];
  _QWORD **v98;
  _QWORD **v99;
  ZinIrOpLayer **v100;
  _DWORD *v101[3];

  if (!*((_QWORD *)a3 + 17) || Subgraph::AreAllResetLayersOutputNodes(a3))
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 97) & 1) != 0
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "INFO:: (SpatialSplit) ---OptimizeTileCountByInsertingResetLayers:BEGIN---\n", buf, 2u);
    }
    v6 = (const LatencyInfo *)*((_QWORD *)a5 + 3);
    v7 = 0.0;
    if (v6 != (const LatencyInfo *)((char *)a5 + 32))
    {
      do
      {
        v8 = (const LatencyInfo *)*((_QWORD *)v6 + 1);
        v9 = v6;
        if (v8)
        {
          do
          {
            v10 = v8;
            v8 = *(const LatencyInfo **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v10 = (const LatencyInfo *)*((_QWORD *)v9 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v9;
            v9 = v10;
          }
          while (!v11);
        }
        v7 = v7 + *((double *)v6 + 5);
        v6 = v10;
      }
      while (v10 != (const LatencyInfo *)((char *)a5 + 32));
    }
    v12 = (char *)*((_QWORD *)a3 + 7);
    v49 = (char *)a3 + 48;
    v48 = a3;
    if (v12 == (char *)a3 + 48)
    {
      v46 = 0;
      v13 = 1.79769313e308;
    }
    else
    {
      v46 = 0;
      v45 = (ZinIrOpLayer **)((char *)a3 + 80);
      v13 = 1.79769313e308;
      v50 = vdupq_n_s64(1uLL);
      do
      {
        v14 = (ZinIrOpLayer *)*((_QWORD *)v12 + 2);
        if (ZinIrOpLayer::IsANELayer(v14))
        {
          Subgraph::Subgraph((Subgraph *)v91, v48);
          *(_QWORD *)buf = v14;
          std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v97, (ZinIrOpLayer **)buf, (uint64_t *)buf);
          v89 = 0;
          v88 = 0;
          v90 = 0;
          v15 = *((_QWORD *)this + 22);
          v57 = 0;
          v58 = 0;
          *(_QWORD *)buf = &v57;
          (*(void (**)(uint64_t, ZinIrOpLayerGraph *, char *, uint8_t *, Subgraph **))(*(_QWORD *)v15 + 8))(v15, a2, v91, buf, &v88);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, v57);
          v16 = v89;
          v17 = v88;
          if (v89 - v88 != 152)
          {
            v47 = v14;
            if (v88 == v89)
            {
LABEL_24:
              v23 = 0;
LABEL_25:
              if (*((_QWORD *)v48 + 11) <= (unint64_t)v23)
              {
                v87[0] = 0;
                v87[1] = 0;
                v86 = v87;
                v24 = v88;
                v51 = v89;
                v25 = 0.0;
                if (v88 == v89)
                {
                  v37 = v87;
                }
                else
                {
                  do
                  {
                    Subgraph::Subgraph((Subgraph *)&v77, v24);
                    v71 = 0;
                    memset(v70, 0, sizeof(v70));
                    memset(v73, 0, sizeof(v73));
                    v72 = 1065353216;
                    v74 = 1065353216;
                    v75 = v50;
                    v76 = v50;
                    v57 = 0;
                    v58 = 0;
                    v60[0] = 0;
                    v60[1] = 0;
                    *(_QWORD *)buf = &v57;
                    v59 = v60;
                    v62[0] = 0;
                    v62[1] = 0;
                    v64 = 0;
                    v65 = 0;
                    v61 = v62;
                    v63 = &v64;
                    v67[0] = 0;
                    v67[1] = 0;
                    v66 = v67;
                    memset(v68, 0, sizeof(v68));
                    v69 = 1065353216;
                    LODWORD(v100) = 3;
                    v101[0] = &v100;
                    v26 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v84 - 24), (int *)&v100, (uint64_t)&std::piecewise_construct, v101)[5];
                    LODWORD(v99) = 4;
                    v101[0] = &v99;
                    v27 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v84 - 24), (int *)&v99, (uint64_t)&std::piecewise_construct, v101)[5];
                    v75.i64[0] = (uint64_t)v26;
                    v75.i64[1] = (uint64_t)v27;
                    LODWORD(v100) = 3;
                    v101[0] = &v100;
                    v28 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v84 - 24), (int *)&v100, (uint64_t)&std::piecewise_construct, v101)[5];
                    LODWORD(v99) = 4;
                    v101[0] = &v99;
                    v29 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v84 - 24), (int *)&v99, (uint64_t)&std::piecewise_construct, v101);
                    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::resize((uint64_t *)v70, (_QWORD)v29[5] * (_QWORD)v28);
                    SplitInfo::ReserveBranch((uint64_t **)v70, (unint64_t)v82[1]);
                    LODWORD(v100) = 3;
                    v101[0] = &v100;
                    v30 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v84 - 24), (int *)&v100, (uint64_t)&std::piecewise_construct, v101)[5];
                    LODWORD(v99) = 4;
                    v101[0] = &v99;
                    v31 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t **)(v84 - 24), (int *)&v99, (uint64_t)&std::piecewise_construct, v101);
                    SplitInfo::ReserveTiledLayerTensorRegions((uint64_t)v70, &v81, (_QWORD)v31[5] * (_QWORD)v30);
                    ZinMirGraphSplitterBase::TileSubgraph(this, a2, (Subgraph *)&v77, (SplitInfo *)v70, (LatencyInfo *)buf, 0);
                    v32 = v59;
                    v33 = 0.0;
                    if (v59 != v60)
                    {
                      do
                      {
                        v34 = v32[1];
                        v35 = v32;
                        if (v34)
                        {
                          do
                          {
                            v36 = (_QWORD **)v34;
                            v34 = (_QWORD *)*v34;
                          }
                          while (v34);
                        }
                        else
                        {
                          do
                          {
                            v36 = (_QWORD **)v35[2];
                            v11 = *v36 == v35;
                            v35 = v36;
                          }
                          while (!v11);
                        }
                        v33 = v33 + *((double *)v32 + 5);
                        v32 = v36;
                      }
                      while (v36 != v60);
                    }
                    std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>((uint64_t *)&v86, v81, v82);
                    v25 = v25 + v33;
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v68);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v66, v67[0]);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v63, v64);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v61, v62[0]);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v59, v60[0]);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, v57);
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v73);
                    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)&v70[1] + 8);
                    *(_QWORD *)buf = v70;
                    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v85, v85[1]);
                    *(_QWORD *)buf = &v83;
                    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v81, v82[0]);
                    std::__list_imp<ZinIrSection *>::clear(v80);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v79, v79[1]);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v77, v78[0]);
                    v24 = (Subgraph *)((char *)v24 + 152);
                  }
                  while (v24 != v51);
                  v37 = v86;
                }
                v78[0] = 0;
                v78[1] = 0;
                v77 = (void **)v78;
                v38 = (_DWORD *)*((_QWORD *)v48 + 9);
                v100 = v45;
                v101[0] = v38;
                v98 = v87;
                v99 = v37;
                *(_QWORD *)&v70[0] = &v77;
                *((_QWORD *)&v70[0] + 1) = v78;
                std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &>((ZinIrOpLayer ***)v101, &v100, (uint64_t)&v99, &v98, (uint64_t *)v70, (uint64_t)buf);
                v39 = v77;
                if (v77 != (void **)v78)
                {
                  do
                  {
                    *(_QWORD *)buf = v39[4];
                    v40 = (double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)a5, (ZinIrOpLayer **)buf);
                    v41 = (void **)v39[1];
                    if (v41)
                    {
                      do
                      {
                        v42 = v41;
                        v41 = (void **)*v41;
                      }
                      while (v41);
                    }
                    else
                    {
                      do
                      {
                        v42 = (void **)v39[2];
                        v11 = *v42 == v39;
                        v39 = v42;
                      }
                      while (!v11);
                    }
                    v25 = v25 + *v40;
                    v39 = v42;
                  }
                  while (v42 != (void **)v78);
                }
                v43 = v46;
                if (v25 < v13)
                  v43 = v47;
                v46 = v43;
                if (v25 < v13)
                  v13 = v25;
                std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v77, v78[0]);
                std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v86, v87[0]);
              }
            }
            else
            {
              while (1)
              {
                v18 = (uint64_t **)(*((_QWORD *)v17 + 13) - 24);
                LODWORD(v77) = 3;
                *(_QWORD *)buf = &v77;
                v19 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v18, (int *)&v77, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5];
                v20 = (uint64_t **)(*((_QWORD *)v17 + 13) - 24);
                LODWORD(v70[0]) = 4;
                *(_QWORD *)buf = v70;
                if ((_QWORD)std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v20, (int *)v70, (uint64_t)&std::piecewise_construct, (_DWORD **)buf)[5]* (_QWORD)v19 >= *((_QWORD *)a4 + 14) * *((_QWORD *)a4 + 13))break;
                v17 = (Subgraph *)((char *)v17 + 152);
                if (v17 == v16)
                {
                  v21 = v88;
                  v22 = v89;
                  if (v88 == v89)
                    goto LABEL_24;
                  v23 = 0;
                  do
                  {
                    Subgraph::Subgraph((Subgraph *)buf, v21);
                    v23 += v65;
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v68, v68[1]);
                    v77 = (void **)&v66;
                    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v77);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v63, v64);
                    std::__list_imp<ZinIrSection *>::clear(&v61);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v59, v60[0]);
                    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, v57);
                    v21 = (Subgraph *)((char *)v21 + 152);
                  }
                  while (v21 != v22);
                  goto LABEL_25;
                }
              }
            }
          }
          *(_QWORD *)buf = &v88;
          std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v97, v97[1]);
          *(_QWORD *)buf = &v96;
          std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v95, v95[1]);
          std::__list_imp<ZinIrSection *>::clear(v94);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v93, v93[1]);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v91, v92);
        }
        v12 = (char *)*((_QWORD *)v12 + 1);
      }
      while (v12 != v49);
    }
    if (v7 * 0.95 > v13)
    {
      *(_QWORD *)buf = v46;
      std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v48 + 15, (ZinIrOpLayer **)buf, (uint64_t *)buf);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 97) & 1) != 0
      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "INFO:: (SpatialSplit) ---OptimizeTileCountByInsertingResetLayers:END---\n", buf, 2u);
    }
  }
  return 0;
}

void sub_206F378A4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x238], (_QWORD *)STACK[0x240]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&STACK[0x2D0], (_QWORD *)STACK[0x2D8]);
  STACK[0x238] = (unint64_t)&STACK[0x2E8];
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x238]);
  Subgraph::~Subgraph((Subgraph *)&STACK[0x300]);
  _Unwind_Resume(a1);
}

BOOL Subgraph::AreAllResetLayersOutputNodes(Subgraph *this)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  ZinIrOpLayer *v9;

  v1 = (_QWORD *)*((_QWORD *)this + 15);
  v2 = (char *)this + 128;
  if (v1 == (_QWORD *)((char *)this + 128))
    return 1;
  v3 = (char *)this + 24;
  do
  {
    v9 = (ZinIrOpLayer *)v1[4];
    v4 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)v3, &v9);
    result = v4 != 0;
    if (!v4)
      break;
    v6 = (_QWORD *)v1[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v1[2];
        v8 = *v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v1 = v7;
  }
  while (v7 != (_QWORD *)v2);
  return result;
}

uint64_t ZinMirSpatialSplitter::BuildConcatsForOutputNodes(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  size_t v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  int *v20;
  uint64_t v21;
  std::string::size_type size;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t TileCount;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  TiledLayerTensorRegions *v32;
  TiledLayerTensorRegions *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t ValueAt;
  unsigned int v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  int64x2_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  int64x2_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  ZinIrOpLayer *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  void *v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  int v75;
  ZinIrOpLayer **v76;
  char *v77;
  char *v78;
  ZinIrOpLayer *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  TiledLayerTensorRegions *v85;
  int v86;
  char v87;
  int v88;
  ZinIrOpLayer *v89;
  char v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  BOOL v94;
  _QWORD *v96;
  _QWORD *v99;
  int *v100;
  int *v101;
  unsigned int v102;
  _OWORD v105[2];
  int v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void *__p[2];
  std::string::size_type v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t *v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  __int128 *v130[3];
  uint64_t v131;
  TiledLayerTensorRegions *v132;
  unint64_t v133;
  void *__src;
  void *v135;
  unint64_t v136;
  std::string v137;
  __int128 v138;
  int64_t v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143[3];
  ZinIrOpLayer **v144;
  void *v145;
  void *v146;
  uint64_t **v147;
  _QWORD v148[3];
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a3 + 24);
  v96 = (_QWORD *)(a3 + 32);
  if (v6 == (_QWORD *)(a3 + 32))
    return 0;
  while (1)
  {
    v147 = (uint64_t **)v6[4];
    v148[0] = v147;
    __p[0] = v148;
    __p[1] = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v144, __p);
    v8 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a5, &v147);
    if (!v8)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    memset(v143, 0, sizeof(v143));
    std::vector<TiledLayerTensorRegions>::__init_with_size[abi:ne180100]<TiledLayerTensorRegions*,TiledLayerTensorRegions*>(v143, v8[3], v8[4], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8[4] - v8[3]) >> 5));
    v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a6, &v147);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v140 = 0;
    v141 = 0;
    v142 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v140, (const void *)v9[3], v9[4], (uint64_t)(v9[4] - v9[3]) >> 3);
    v99 = v6;
    v10 = v147;
    if (*((char *)v147 + 47) >= 0)
      v11 = *((unsigned __int8 *)v147 + 47);
    else
      v11 = (size_t)v147[4];
    std::string::basic_string[abi:ne180100]((uint64_t)&v110, v11 + 1);
    if ((SBYTE7(v111) & 0x80u) == 0)
      v12 = &v110;
    else
      v12 = (__int128 *)v110;
    if (v11)
    {
      if (*((char *)v10 + 47) >= 0)
        v13 = (uint64_t *)(v10 + 3);
      else
        v13 = v10[3];
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)v12 + v11) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v137, "concat_sssg");
    v14 = std::string::append(&v137, "_xfm", 4uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v139 = v14->__r_.__value_.__r.__words[2];
    v138 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v139 >= 0)
      v16 = (const std::string::value_type *)&v138;
    else
      v16 = (const std::string::value_type *)v138;
    if (v139 >= 0)
      v17 = HIBYTE(v139);
    else
      v17 = *((_QWORD *)&v138 + 1);
    v18 = std::string::append((std::string *)&v110, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v119 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v148, __p);
    if (SHIBYTE(v119) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v139) < 0)
      operator delete((void *)v138);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    if (SBYTE7(v111) < 0)
      operator delete((void *)v110);
    SplitInfo::GetSplitDimensions(a4, (char **)&v138);
    v100 = (int *)*((_QWORD *)&v138 + 1);
    v20 = (int *)v138;
    if ((_QWORD)v138 == *((_QWORD *)&v138 + 1))
    {
      v88 = 1;
      if (!(_QWORD)v138)
        goto LABEL_134;
LABEL_133:
      *((_QWORD *)&v138 + 1) = v20;
      operator delete(v20);
      goto LABEL_134;
    }
    do
    {
      v101 = v20;
      v21 = *v20;
      SplitInfo::GetSplitDimensions(a4, &v137.__r_.__value_.__l.__data_);
      size = v137.__r_.__value_.__l.__size_;
      v23 = 1;
      do
      {
        if (size == v137.__r_.__value_.__r.__words[0])
          break;
        v23 *= (_QWORD)SplitInfo::GetTileCount(a4, *(_DWORD *)(size - 4));
        v24 = *(_DWORD *)(size - 4);
        size -= 4;
      }
      while (v24 != (_DWORD)v21);
      v135 = 0;
      __src = 0;
      v136 = 0;
      v132 = 0;
      v131 = 0;
      v133 = 0;
      if (v23 < 1)
      {
        v85 = 0;
        v84 = 0;
LABEL_122:
        std::vector<TiledLayerTensorRegions>::__assign_with_size[abi:ne180100]<TiledLayerTensorRegions*,TiledLayerTensorRegions*>(v143, v84, (uint64_t)v85, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v85 - v84) >> 5));
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v140, (char *)__src, (uint64_t)v135, ((_BYTE *)v135 - (_BYTE *)__src) >> 3);
        v86 = 0;
      }
      else
      {
        if (v21 <= 5 && ((1 << v21) & 0x26) != 0)
          ZinAssertImpl("Spatial Splitting Internal Error");
        v25 = 0;
        while (1)
        {
          v26 = v21 >= 5 ? 0 : dword_207AAB870[v21];
          v27 = v143[0];
          TileCount = (unint64_t)SplitInfo::GetTileCount(a4, v21);
          memset(v130, 0, sizeof(v130));
          std::vector<TiledLayerTensorRegions>::__init_with_size[abi:ne180100]<TiledLayerTensorRegions*,TiledLayerTensorRegions*>(v130, v27 + 224 * v25, v27 + 224 * v25 + 224 * TileCount, TileCount);
          v29 = v140;
          v30 = (unint64_t)SplitInfo::GetTileCount(a4, v21);
          v127 = 0;
          v128 = 0;
          v129 = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v127, &v29[v25], (uint64_t)&v29[v25 + v30], v30);
          v31 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v31 + 1;
          *(_QWORD *)&v110 = 0;
          *((_QWORD *)&v110 + 1) = v31;
          v111 = (unint64_t)v25;
          LayerTilingHelper::ProduceConcatRegionAfterOutputNode(&v110, v130, v21, (uint64_t)__p);
          v32 = v132;
          if ((unint64_t)v132 >= v133)
          {
            v33 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>(&v131, (const TiledLayerTensorRegions *)__p);
          }
          else
          {
            TiledLayerTensorRegions::TiledLayerTensorRegions(v132, (const TiledLayerTensorRegions *)__p);
            v33 = (TiledLayerTensorRegions *)((char *)v32 + 224);
          }
          v132 = v33;
          SplitInfo::GetSplitDimensions(a4, (char **)&v110);
          if (*(_DWORD *)(*((_QWORD *)&v110 + 1) - 4) == (_DWORD)v21)
          {
            v34 = (uint64_t *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v147)[5])(v147, 0, 0);
            v35 = (std::__shared_weak_count *)v34[1];
            v116 = *v34;
            v117 = v35;
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
            }
          }
          else
          {
            ZinIrOpLayer::CreateSpatialSplitCopyTensor((ZinIrOpLayer *)v147, (const TiledLayerTensorRegions *)__p, &v116);
          }
          if ((_QWORD)v110)
          {
            *((_QWORD *)&v110 + 1) = v110;
            operator delete((void *)v110);
          }
          v113 = 0;
          v114 = 0;
          v115 = 0;
          v38 = (uint64_t *)v124;
          v39 = v125;
          while (v38 != v39)
          {
            v112 = 0;
            v110 = 0u;
            v111 = 0u;
            ValueAt = GetValueAtDimension<ZinTensorPosition>(v38, v21);
            v41 = SetValueAtDimension<ZinTensorPosition>(&v110, v21, ValueAt);
            if (v41)
            {
              v75 = 0;
              v102 = v41;
              goto LABEL_101;
            }
            v42 = v114;
            if (v114 >= v115)
            {
              v46 = 0xCCCCCCCCCCCCCCCDLL * ((v114 - (_BYTE *)v113) >> 4);
              v47 = v46 + 1;
              if (v46 + 1 > 0x333333333333333)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((v115 - (_BYTE *)v113) >> 4) > v47)
                v47 = 0x999999999999999ALL * ((v115 - (_BYTE *)v113) >> 4);
              if (0xCCCCCCCCCCCCCCCDLL * ((v115 - (_BYTE *)v113) >> 4) >= 0x199999999999999)
                v48 = 0x333333333333333;
              else
                v48 = v47;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v115, v48);
              v51 = &v49[80 * v46];
              v53 = v110;
              v52 = v111;
              *((_QWORD *)v51 + 4) = v112;
              *(_OWORD *)v51 = v53;
              *((_OWORD *)v51 + 1) = v52;
              v54 = vdupq_n_s64(1uLL);
              *(int64x2_t *)(v51 + 40) = v54;
              *(int64x2_t *)(v51 + 56) = v54;
              *((_QWORD *)v51 + 9) = 1;
              v56 = (char *)v113;
              v55 = v114;
              v57 = v51;
              if (v114 != v113)
              {
                do
                {
                  *((_OWORD *)v57 - 5) = *((_OWORD *)v55 - 5);
                  v58 = *((_OWORD *)v55 - 4);
                  v59 = *((_OWORD *)v55 - 3);
                  v60 = *((_OWORD *)v55 - 1);
                  *((_OWORD *)v57 - 2) = *((_OWORD *)v55 - 2);
                  *((_OWORD *)v57 - 1) = v60;
                  *((_OWORD *)v57 - 4) = v58;
                  *((_OWORD *)v57 - 3) = v59;
                  v57 -= 80;
                  v55 -= 80;
                }
                while (v55 != v56);
                v55 = v56;
              }
              v61 = v51 + 80;
              v113 = v57;
              v114 = v51 + 80;
              v115 = &v49[80 * v50];
              if (v55)
                operator delete(v55);
              v114 = v61;
            }
            else
            {
              v44 = v110;
              v43 = v111;
              *((_QWORD *)v114 + 4) = v112;
              v45 = vdupq_n_s64(1uLL);
              *(_OWORD *)v42 = v44;
              *((_OWORD *)v42 + 1) = v43;
              *(int64x2_t *)(v42 + 40) = v45;
              *(int64x2_t *)(v42 + 56) = v45;
              *((_QWORD *)v42 + 9) = 1;
              v114 = v42 + 80;
            }
            v38 += 10;
          }
          v62 = operator new();
          ZinIrConcatInfo::ZinIrConcatInfo(v62, v26, &v113);
          v109 = v62;
          v63 = (ZinIrOpLayer *)operator new();
          v107 = v116;
          v108 = v117;
          if (v117)
          {
            v64 = (unint64_t *)&v117->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          ZinObjectNameFactory::CreateName((uint64_t)v148, 1u, (std::string *)&v110);
          ZinConcatLayer::ZinConcatLayer(v63, &v109, &v107, &v110, 0);
          if (SBYTE7(v111) < 0)
            operator delete((void *)v110);
          v66 = v108;
          if (v108)
          {
            v67 = (unint64_t *)&v108->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          if (!ZinIrOpLayerGraph::AddNode(a2, v63, &v144)
            || (ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v127, (uint64_t)v63) & 1) == 0)
          {
            ZinAssertImpl("Spatial Splitting Internal Error");
          }
          v69 = (char *)v135;
          if ((unint64_t)v135 >= v136)
          {
            v71 = ((_BYTE *)v135 - (_BYTE *)__src) >> 3;
            if ((unint64_t)(v71 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v72 = (uint64_t)(v136 - (_QWORD)__src) >> 2;
            if (v72 <= v71 + 1)
              v72 = v71 + 1;
            if (v136 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v136, v73);
            else
              v74 = 0;
            v76 = (ZinIrOpLayer **)&v74[8 * v71];
            *v76 = v63;
            v70 = v76 + 1;
            v77 = (char *)v135;
            v78 = (char *)__src;
            if (v135 != __src)
            {
              do
              {
                v79 = (ZinIrOpLayer *)*((_QWORD *)v77 - 1);
                v77 -= 8;
                *--v76 = v79;
              }
              while (v77 != v78);
              v77 = (char *)__src;
            }
            __src = v76;
            v135 = v70;
            v136 = (unint64_t)&v74[8 * v73];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_QWORD *)v135 = v63;
            v70 = v69 + 8;
          }
          v135 = v70;
          v80 = v109;
          v109 = 0;
          if (v80)
            (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
          v75 = 1;
LABEL_101:
          if (v113)
          {
            v114 = (char *)v113;
            operator delete(v113);
          }
          v81 = v117;
          if (v117)
          {
            v82 = (unint64_t *)&v117->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if (v126)
            operator delete(v126);
          if (v124)
          {
            v125 = (uint64_t *)v124;
            operator delete(v124);
          }
          if (v122)
          {
            v123 = v122;
            operator delete(v122);
          }
          if (v120)
          {
            v121 = v120;
            operator delete(v120);
          }
          if (v127)
          {
            v128 = v127;
            operator delete(v127);
          }
          __p[0] = v130;
          std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (!v75)
            break;
          v25 += (uint64_t)SplitInfo::GetTileCount(a4, v21);
          if (v25 >= v23)
          {
            v84 = v131;
            v85 = v132;
            goto LABEL_122;
          }
        }
        v86 = 1;
      }
      __p[0] = &v131;
      std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (__src)
      {
        v135 = __src;
        operator delete(__src);
      }
      if (v137.__r_.__value_.__r.__words[0])
      {
        v137.__r_.__value_.__l.__size_ = v137.__r_.__value_.__r.__words[0];
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      v20 = v101 + 1;
      if (v101 + 1 == v100)
        v87 = 1;
      else
        v87 = v86;
    }
    while ((v87 & 1) == 0);
    v88 = v86 ^ 1;
    v20 = (int *)v138;
    if ((_QWORD)v138)
      goto LABEL_133;
LABEL_134:
    if (v88)
    {
      if (v141 - (char *)v140 != 8
        || (v89 = (ZinIrOpLayer *)*v140,
            memset(v105, 0, sizeof(v105)),
            v106 = 1065353216,
            v90 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v147, v89, v105),
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v105),
            (v90 & 1) == 0))
      {
        ZinAssertImpl("Spatial Splitting Internal Error");
      }
    }
    v148[0] = off_24C01FBB0;
    if (v149 < 0)
      operator delete((void *)v148[1]);
    if (v140)
    {
      v141 = (char *)v140;
      operator delete(v140);
    }
    __p[0] = v143;
    std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v144 = (ZinIrOpLayer **)&unk_24C02BB18;
    if (v145)
    {
      v146 = v145;
      operator delete(v145);
    }
    if (!v88)
      return v102;
    v91 = v99;
    v92 = (_QWORD *)v99[1];
    if (v92)
    {
      do
      {
        v93 = v92;
        v92 = (_QWORD *)*v92;
      }
      while (v92);
    }
    else
    {
      do
      {
        v93 = (_QWORD *)v91[2];
        v94 = *v93 == (_QWORD)v91;
        v91 = v93;
      }
      while (!v94);
    }
    v6 = v93;
    if (v93 == v96)
      return 0;
  }
}

void sub_206F38474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  uint64_t v41;
  void *v43;
  void *v44;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  *(_QWORD *)(v41 - 136) = off_24C01FBB0;
  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  v43 = *(void **)(v41 - 224);
  if (v43)
  {
    *(_QWORD *)(v41 - 216) = v43;
    operator delete(v43);
  }
  a41 = (void *)(v41 - 200);
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  *(_QWORD *)(v41 - 176) = &unk_24C02BB18;
  v44 = *(void **)(v41 - 168);
  if (v44)
  {
    *(_QWORD *)(v41 - 160) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::InitializeSubgraphForCostModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a3 + 104);
  return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 24))(v3, a2, &v5);
}

uint64_t ZinMirSpatialSplitter::DetermineSubgraphSplitInfo(ZinMirSpatialSplitter *this, ZinIrOpLayerGraph *a2, SubgraphSplitInfo *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD **v16;
  _QWORD *v17[2];
  int v18;
  int v19;
  int *v20;

  v6 = (uint64_t *)((char *)a3 + 152);
  v7 = (uint64_t **)(*((_QWORD *)a3 + 13) - 24);
  v19 = 3;
  v20 = &v19;
  v8 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20)[5];
  v9 = (uint64_t **)(*((_QWORD *)a3 + 13) - 24);
  v18 = 4;
  v20 = &v18;
  v10 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v9, &v18, (uint64_t)&std::piecewise_construct, &v20)[5];
  *((_QWORD *)a3 + 32) = v8;
  *((_QWORD *)a3 + 33) = v10;
  v11 = (uint64_t **)(*((_QWORD *)a3 + 13) - 24);
  v19 = 0;
  v20 = &v19;
  v12 = std::__tree<std::__value_type<ZinIrDimension,unsigned long>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,unsigned long>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v11, &v19, (uint64_t)&std::piecewise_construct, &v20)[5];
  *((_QWORD *)a3 + 34) = v12;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::resize(v6, *((_QWORD *)a3 + 32) * (_QWORD)v12 * *((_QWORD *)a3 + 33));
  SplitInfo::ReserveBranch((uint64_t **)v6, *((_QWORD *)a3 + 11));
  SplitInfo::ReserveTiledLayerTensorRegions((uint64_t)v6, (_QWORD *)a3 + 9, *((_QWORD *)a3 + 33) * *((_QWORD *)a3 + 32) * *((_QWORD *)a3 + 34));
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  v13 = PressureBasedSubgraphIdentification::EstimateSizeOfKernelReads((uint64_t)a3, (uint64_t)&v16, **((_QWORD **)this + 2), 1);
  v14 = *(_QWORD *)(**((_QWORD **)this + 2) + 480);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17[0]);
  if (v13 > v14)
    *((_BYTE *)a3 + 144) = 1;
  if (ZinMirGraphSplitterBase::TileSubgraph(this, a2, a3, (SplitInfo *)v6, (SubgraphSplitInfo *)((char *)a3 + 296), 1))return 3;
  else
    return 0;
}

void sub_206F38934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::IsCurrentGraphMinLatency(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 v3;
  _QWORD *v7;
  double v8;
  double v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  double v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  _QWORD *v28;
  _QWORD *v29;
  double v30;
  _QWORD *v31;
  double v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  double v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  ZinIrOpLayer **v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  ZinIrOpLayer ***v50;
  ZinIrOpLayer ***v51;
  ZinIrOpLayer ***v52;
  ZinIrOpLayer **v53;
  uint64_t v54;
  ZinIrOpLayer *v55;
  ZinIrOpLayer *v56;
  ZinIrOpLayer ***v57;
  ZinIrOpLayer **v59;
  _QWORD *v60;
  uint64_t v61;
  ZinIrOpLayer **v62;
  _QWORD *v63;
  uint64_t v64;
  ZinIrOpLayer *v65[3];
  char v66;
  uint64_t v67[2];
  _QWORD *v68;
  uint64_t v69;
  ZinIrOpLayer **v70;
  ZinIrOpLayer **v71;

  if (*(_BYTE *)(a1 + 29))
    return 1;
  v7 = *(_QWORD **)(a2 + 296);
  v8 = 0.0;
  v9 = 0.0;
  if (v7 != (_QWORD *)(a2 + 304))
  {
    do
    {
      v10 = (_QWORD *)v7[1];
      v11 = v7;
      if (v10)
      {
        do
        {
          v12 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v11[2];
          v13 = *v12 == (_QWORD)v11;
          v11 = v12;
        }
        while (!v13);
      }
      v9 = v9 + *((double *)v7 + 5);
      v7 = v12;
    }
    while (v12 != (_QWORD *)(a2 + 304));
  }
  v14 = *(_QWORD **)(a2 + 320);
  if (v14 != (_QWORD *)(a2 + 328))
  {
    v8 = 0.0;
    do
    {
      v15 = (_QWORD *)v14[1];
      v16 = v14;
      if (v15)
      {
        do
        {
          v17 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v16[2];
          v13 = *v17 == (_QWORD)v16;
          v16 = v17;
        }
        while (!v13);
      }
      v8 = v8 + *((double *)v14 + 5);
      v14 = v17;
    }
    while (v17 != (_QWORD *)(a2 + 328));
  }
  if (*(_BYTE *)(a1 + 35))
  {
    v18 = *(_QWORD **)(a2 + 368);
    v8 = 0.0;
    if (v18 != (_QWORD *)(a2 + 376))
    {
      do
      {
        v19 = (_QWORD *)v18[1];
        v20 = v18;
        if (v19)
        {
          do
          {
            v21 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v20[2];
            v13 = *v21 == (_QWORD)v20;
            v20 = v21;
          }
          while (!v13);
        }
        v8 = v8 + *((double *)v18 + 5);
        v18 = v21;
      }
      while (v21 != (_QWORD *)(a2 + 376));
    }
  }
  v22 = *(_QWORD **)(a2 + 392);
  v23 = 0.0;
  if (v22 != (_QWORD *)(a2 + 400))
  {
    do
    {
      v24 = (_QWORD *)v22[1];
      v25 = v22;
      if (v24)
      {
        do
        {
          v26 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v25[2];
          v13 = *v26 == (_QWORD)v25;
          v25 = v26;
        }
        while (!v13);
      }
      v23 = v23 + *((double *)v22 + 5);
      v22 = v26;
    }
    while (v26 != (_QWORD *)(a2 + 400));
  }
  v27 = v8 + v23;
  if (v9 <= v8 + v23)
    return 0;
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v62, (ZinIrOpLayer ***)(a2 + 72));
  v29 = (_QWORD *)*a3;
  v28 = (_QWORD *)a3[1];
  if (v29 != v28)
  {
    v30 = 0.0;
    while (1)
    {
      if (*(_BYTE *)(a1 + 35))
      {
        v31 = (_QWORD *)v29[46];
        if (v31 != v29 + 47)
        {
          v32 = 0.0;
          do
          {
            v33 = (_QWORD *)v31[1];
            v34 = v31;
            if (v33)
            {
              do
              {
                v35 = v33;
                v33 = (_QWORD *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v34[2];
                v13 = *v35 == (_QWORD)v34;
                v34 = v35;
              }
              while (!v13);
            }
            v32 = v32 + *((double *)v31 + 5);
            v31 = v35;
          }
          while (v35 != v29 + 47);
          goto LABEL_56;
        }
      }
      else
      {
        v36 = (_QWORD *)v29[40];
        if (v36 != v29 + 41)
        {
          v32 = 0.0;
          do
          {
            v37 = (_QWORD *)v36[1];
            v38 = v36;
            if (v37)
            {
              do
              {
                v39 = v37;
                v37 = (_QWORD *)*v37;
              }
              while (v37);
            }
            else
            {
              do
              {
                v39 = (_QWORD *)v38[2];
                v13 = *v39 == (_QWORD)v38;
                v38 = v39;
              }
              while (!v13);
            }
            v32 = v32 + *((double *)v36 + 5);
            v36 = v39;
          }
          while (v39 != v29 + 41);
          goto LABEL_56;
        }
      }
      v32 = 0.0;
LABEL_56:
      v40 = (_QWORD *)v29[49];
      v41 = 0.0;
      if (v40 != v29 + 50)
      {
        do
        {
          v42 = (_QWORD *)v40[1];
          v43 = v40;
          if (v42)
          {
            do
            {
              v44 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v43[2];
              v13 = *v44 == (_QWORD)v43;
              v43 = v44;
            }
            while (!v13);
          }
          v41 = v41 + *((double *)v40 + 5);
          v40 = v44;
        }
        while (v44 != v29 + 50);
      }
      v60 = 0;
      v61 = 0;
      v59 = (ZinIrOpLayer **)&v60;
      v45 = v29[9];
      v71 = v62;
      v69 = v45;
      v70 = (ZinIrOpLayer **)&v63;
      v67[1] = (uint64_t)&v60;
      v68 = v29 + 10;
      v67[0] = (uint64_t)&v59;
      std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,ScheduleComparator &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &>(&v71, &v70, (uint64_t)&v69, &v68, v67, (int)&v66, (uint64_t)v65);
      v30 = v30 + v32 + v41;
      v46 = v59;
      v47 = v60;
      v48 = v63;
      v59 = v62;
      v60 = v63;
      v62 = v46;
      v63 = v47;
      v49 = v61;
      v61 = v64;
      v64 = v49;
      if (v61)
        v50 = (ZinIrOpLayer ***)(v60 + 2);
      else
        v50 = &v59;
      *v50 = (ZinIrOpLayer **)&v60;
      v51 = (ZinIrOpLayer ***)(v47 + 2);
      if (v49)
        v52 = v51;
      else
        v52 = &v62;
      *v52 = (ZinIrOpLayer **)&v63;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v59, v48);
      v29 += 57;
      if (v29 == v28)
        goto LABEL_73;
    }
  }
  v30 = 0.0;
LABEL_73:
  v53 = v62;
  if (v62 != (ZinIrOpLayer **)&v63)
  {
    v54 = a2 + 296;
    do
    {
      v55 = v53[4];
      if (ZinIrOpLayer::IsANELayer(v55))
      {
        v65[0] = v55;
        v30 = v30
            + *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(v54, v65);
      }
      v56 = v53[1];
      if (v56)
      {
        do
        {
          v57 = (ZinIrOpLayer ***)v56;
          v56 = *(ZinIrOpLayer **)v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (ZinIrOpLayer ***)v53[2];
          v13 = *v57 == v53;
          v53 = (ZinIrOpLayer **)v57;
        }
        while (!v13);
      }
      v53 = (ZinIrOpLayer **)v57;
    }
    while (v57 != &v63);
  }
  v3 = v27 <= v30;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v62, v63);
  return v3;
}

void sub_206F38DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a9, a10);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::ConstructSplitInfoOfRefinedClusters(ZinMirSpatialSplitter *a1@<X0>, ZinIrOpLayerGraph *a2@<X1>, const Subgraph **a3@<X2>, uint64_t *a4@<X8>)
{
  const Subgraph *v4;
  const Subgraph *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t *v14;
  uint64_t *v15;
  SubgraphSplitInfo *v16;
  uint64_t v17;
  int64x2_t v19;
  unint64_t v22;
  void **v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29[3];
  _QWORD **v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  int64x2_t v47;
  int64x2_t v48;
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];
  _QWORD v54[2];
  __int128 v55;
  __int128 v56;
  int v57;
  void **v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[3];
  _QWORD **v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD **v70;
  _QWORD *v71;
  uint64_t v72;
  char v73;
  char v74;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = *a3;
  v5 = a3[1];
  v6 = v5 - *a3;
  if (0x86BCA1AF286BCA1BLL * (v6 >> 3) >= 2 && v6 != 152)
  {
    v8 = 0;
    v9 = 224;
    do
    {
      v10 = v8++;
      v11 = 0x86BCA1AF286BCA1BLL * ((v5 - v4) >> 3);
      if (v8 < v11)
      {
        v12 = v9;
        v22 = v8;
        do
        {
          v59 = 0;
          v60 = 0;
          v58 = (void **)&v59;
          if (v11 <= v10)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v13 = std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,ScheduleComparator &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::insert_iterator<std::set<ZinIrOpLayer *>>>(*((_QWORD **)v4 + 19 * v10 + 9), (_QWORD *)v4 + 19 * v10 + 10, *(_QWORD **)((char *)v4 + v12), (const Subgraph *)((char *)v4 + v12 + 8), (uint64_t)&v58, (uint64_t)&v59, (int)&v74, (uint64_t)&v23);
          if (v60)
            ZinAssertImpl("Refined subgraphs should not intersect", v13);
          std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v58, v59);
          ++v8;
          v4 = *a3;
          v5 = a3[1];
          v11 = 0x86BCA1AF286BCA1BLL * ((v5 - *a3) >> 3);
          v12 += 152;
        }
        while (v8 < v11);
        v8 = v22;
      }
      v9 += 152;
    }
    while (v8 < v11 - 1);
  }
  v14 = a4;
  if (v4 != v5)
  {
    v19 = vdupq_n_s64(1uLL);
    do
    {
      Subgraph::Subgraph((Subgraph *)&v58, v4);
      v24 = 0;
      v25 = 0;
      v27 = 0;
      v28 = 0;
      v23 = (void **)&v24;
      v26 = &v27;
      v29[0] = (uint64_t)v29;
      v29[1] = (uint64_t)v29;
      v31 = 0;
      v32 = 0;
      v29[2] = 0;
      v30 = &v31;
      v34 = 0;
      v33 = 0uLL;
      v36 = 0;
      v37 = 0;
      v35 = &v36;
      v38 = 0;
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 1065353216;
      v46 = 1065353216;
      v47 = v19;
      v48 = v19;
      v50[0] = 0;
      v50[1] = 0;
      v51[0] = 0;
      v51[1] = 0;
      v49 = v50;
      v50[2] = v51;
      v52[0] = 0;
      v52[1] = 0;
      v53[0] = 0;
      v53[1] = 0;
      v51[2] = v52;
      v52[2] = v53;
      v54[0] = 0;
      v54[1] = 0;
      v53[2] = v54;
      v55 = 0u;
      v56 = 0u;
      v57 = 1065353216;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v23, 0);
      v23 = v58;
      v24 = v59;
      v25 = v60;
      if (v60)
      {
        v59[2] = &v24;
        v58 = (void **)&v59;
        v59 = 0;
        v60 = 0;
      }
      else
      {
        v23 = (void **)&v24;
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v26, v27);
      v26 = v61;
      v27 = v62;
      v28 = v63;
      if (v63)
      {
        v62[2] = &v27;
        v61 = &v62;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        v26 = &v27;
      }
      std::list<ZinIrOpLayer *>::__move_assign(v29, v64);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v30, v31);
      v30 = v65;
      v31 = v66;
      v32 = v67;
      if (v67)
      {
        v66[2] = &v31;
        v65 = &v66;
        v66 = 0;
        v67 = 0;
      }
      else
      {
        v30 = &v31;
      }
      std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate((void **)&v33);
      v33 = v68;
      v34 = v69;
      v69 = 0;
      v68 = 0uLL;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v35, v36);
      v35 = v70;
      v36 = v71;
      v37 = v72;
      if (v72)
      {
        v71[2] = &v36;
        v70 = &v71;
        v71 = 0;
        v72 = 0;
      }
      else
      {
        v35 = &v36;
      }
      v38 = v73;
      if (ZinMirSpatialSplitter::DetermineSubgraphSplitInfo(a1, a2, (SubgraphSplitInfo *)&v23))
        ZinAssertImpl("Fail in determining sub-graph split info");
      v15 = v14;
      v16 = (SubgraphSplitInfo *)v14[1];
      if ((unint64_t)v16 >= v15[2])
      {
        v14 = v15;
        v17 = std::vector<SubgraphSplitInfo>::__emplace_back_slow_path<SubgraphSplitInfo&>(v15, (const SubgraphSplitInfo *)&v23);
      }
      else
      {
        SubgraphSplitInfo::SubgraphSplitInfo(v16, (const SubgraphSplitInfo *)&v23);
        v17 = (uint64_t)v16 + 456;
        v14 = a4;
        a4[1] = v17;
      }
      v14[1] = v17;
      SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&v23);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v70, v71);
      v23 = (void **)&v68;
      std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v23);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v65, v66);
      std::__list_imp<ZinIrSection *>::clear(v64);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v61, v62);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v58, v59);
      v4 = (const Subgraph *)((char *)v4 + 152);
    }
    while (v4 != v5);
  }
}

void sub_206F39278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(a9 + 8) = v33;
  SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&a33);
  Subgraph::~Subgraph((Subgraph *)(v34 - 248));
  *(_QWORD *)(v34 - 248) = a9;
  std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 248));
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::IsSubgraphLikelyToKernelStall(const ZinNELayer ***this, const SubgraphSplitInfo *a2)
{
  char *v2;
  char *v3;
  unint64_t v5;
  char *v6;
  char *v7;
  double v8;
  double v9;
  double v10;
  const ZinIrHalParameters *v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  PressureBasedSubgraphIdentification *v17;
  const ZinIrHalParameters *v18;
  uint64_t v19;
  double v20;
  double v21;
  char *v22;
  char *v23;
  BOOL v24;
  uint64_t v25;
  PressureBasedSubgraphIdentification *v27;
  _OWORD v28[2];
  __int128 v29;
  ZinIrOpLayer *v30;

  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  v2 = (char *)*((_QWORD *)a2 + 9);
  v3 = (char *)a2 + 80;
  if (v2 != (char *)a2 + 80)
  {
    v5 = 0;
    v6 = (char *)a2 + 368;
    v7 = (char *)a2 + 344;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    do
    {
      v27 = (PressureBasedSubgraphIdentification *)*((_QWORD *)v2 + 4);
      if (ZinIrOpLayer::IsNELayer(v27))
      {
        v12 = PressureBasedSubgraphIdentification::EstimateKernelReadsPerNE(v27, *this[2], v11);
        v30 = v27;
        v13 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)v6, &v30);
        v30 = v27;
        v8 = v8 + v13;
        v9 = v9
           + *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)v7, &v30);
      }
      else
      {
        v30 = v27;
        v12 = 0;
        v10 = v10
            + *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)v6, &v30);
      }
      std::deque<ZinIrOpLayer *>::push_back(v28, &v27);
      v5 += v12;
      if (v5 <= *((_QWORD *)*this[2] + 60))
        goto LABEL_23;
      v14 = *((_QWORD *)&v29 + 1);
      v15 = 0.0;
      if (*((_QWORD *)&v29 + 1) < 2uLL)
      {
LABEL_16:
        if (v14 < 2)
          goto LABEL_23;
      }
      else
      {
        v16 = *((_QWORD *)&v29 + 1);
        while (1)
        {
          v17 = *(PressureBasedSubgraphIdentification **)(*(_QWORD *)(*((_QWORD *)&v28[0] + 1)
                                                                    + (((unint64_t)v29 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                        + 8 * (v29 & 0x1FF));
          *(_QWORD *)&v29 = v29 + 1;
          *((_QWORD *)&v29 + 1) = v16 - 1;
          if ((unint64_t)v29 >= 0x400)
          {
            operator delete(**((void ***)&v28[0] + 1));
            *((_QWORD *)&v28[0] + 1) += 8;
            *(_QWORD *)&v29 = v29 - 512;
          }
          if (ZinIrOpLayer::IsNELayer(v17))
          {
            v19 = PressureBasedSubgraphIdentification::EstimateKernelReadsPerNE(v17, *this[2], v18);
            v30 = v17;
            v15 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)v6, &v30);
            v30 = v17;
            v8 = v8 - v15;
            v9 = v9
               - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)v7, &v30);
          }
          else
          {
            v30 = v17;
            v19 = 0;
            v10 = v10
                - *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at((uint64_t)v6, &v30);
          }
          v5 -= v19;
          if (v5 <= *((_QWORD *)*this[2] + 60))
            break;
          v16 = *((_QWORD *)&v29 + 1);
          if (*((_QWORD *)&v29 + 1) < 2uLL)
            goto LABEL_16;
        }
      }
      v20 = v8 + v15;
      if (v8 + v15 >= v10)
        v21 = v8 + v15;
      else
        v21 = v10;
      if (v10 < v20)
        v20 = v10;
      if (v21 + *((double *)this + 12) * v20 < v9)
      {
        v25 = 1;
        goto LABEL_30;
      }
LABEL_23:
      v22 = (char *)*((_QWORD *)v2 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (char *)*((_QWORD *)v2 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v2;
          v2 = v23;
        }
        while (!v24);
      }
      v2 = v23;
    }
    while (v23 != v3);
  }
  v25 = 0;
LABEL_30:
  std::deque<unsigned long>::~deque[abi:ne180100](v28);
  return v25;
}

void sub_206F39584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t ZinMirSpatialSplitter::FindWorstKernelBoundLayer(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  _BOOL4 v15;
  double v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  _QWORD *v21;
  ZinIrOpLayer **v23;
  uint64_t *v24;
  _QWORD v25[2];
  ZinIrOpLayer *v26;
  ZinIrOpLayer **v27;

  v25[1] = 0;
  v26 = 0;
  v24 = v25;
  v25[0] = 0;
  v2 = *(_QWORD **)(a2 + 72);
  v3 = (_QWORD *)(a2 + 80);
  if (v2 == (_QWORD *)(a2 + 80))
  {
    v21 = 0;
    v20 = 0;
  }
  else
  {
    v6 = a2 + 296;
    v7 = a2 + 344;
    v8 = a2 + 320;
    v9 = a2 + 368;
    do
    {
      v23 = (ZinIrOpLayer **)v2[4];
      if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v23))
      {
        v27 = v23;
        v10 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(v7, (ZinIrOpLayer **)&v27);
        v27 = v23;
        v11 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(v6, (ZinIrOpLayer **)&v27);
        v27 = v23;
        v12 = *(double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(v8, (ZinIrOpLayer **)&v27);
        v27 = v23;
        v13 = (double *)std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::at(v9, (ZinIrOpLayer **)&v27);
        if (*(_BYTE *)(a1 + 35))
          v14 = *v13;
        else
          v14 = v12;
        v15 = 0;
        if (v11 / v12 < 1.6 && *(_BYTE *)(a2 + 144) && v12 != 0.0)
          v15 = v10 >= v14 * *(double *)(a1 + 80);
        if (*(_BYTE *)(a1 + 35))
          v16 = v11 / *v13;
        else
          v16 = v11 / v12;
        v27 = (ZinIrOpLayer **)&v23;
        *((double *)std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v24, (unint64_t *)&v23, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27)+ 5) = v16;
        if (v15
          && (!v26
           || *(double *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)&v24, (unint64_t *)&v26) > v16))
        {
          v26 = (ZinIrOpLayer *)v23;
        }
      }
      v17 = (_QWORD *)v2[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v2[2];
          v19 = *v18 == (_QWORD)v2;
          v2 = v18;
        }
        while (!v19);
      }
      v2 = v18;
    }
    while (v18 != v3);
    v20 = (unint64_t)v26;
    v21 = (_QWORD *)v25[0];
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v24, v21);
  return v20;
}

void sub_206F3979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::RefineSubgraphByKernelOverhead(ZinMirSpatialSplitter *this@<X0>, ZinIrOpLayerGraph *a2@<X1>, const SubgraphSplitInfo *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  void **WorstKernelBoundLayer;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void **v14;
  _QWORD *v15[2];
  _QWORD *v16[3];
  _QWORD v17[3];
  _QWORD *v18[3];
  uint64_t v19;
  _QWORD *v20[4];
  void **v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v12 = 0uLL;
  v13 = 0;
  if (*((_BYTE *)this + 35)
    && (ZinMirSpatialSplitter::IsSubgraphLikelyToKernelStall((const ZinNELayer ***)this, a3) & 1) == 0)
  {
    goto LABEL_13;
  }
  v8 = (uint64_t *)*((_QWORD *)a3 + 54);
  if (!v8)
    goto LABEL_10;
  while (!*((_BYTE *)v8 + 24))
  {
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_10;
  }
  if (!*((_BYTE *)this + 35))
  {
LABEL_10:
    WorstKernelBoundLayer = (void **)ZinMirSpatialSplitter::FindWorstKernelBoundLayer((uint64_t)this, (uint64_t)a3);
    if (WorstKernelBoundLayer)
    {
      v10 = *((_QWORD *)this + 22);
      v21 = WorstKernelBoundLayer;
      std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t)&v14, (ZinIrOpLayer **)&v21, 1);
      (*(void (**)(uint64_t, ZinIrOpLayerGraph *, const SubgraphSplitInfo *, void ***, __int128 *))(*(_QWORD *)v10 + 8))(v10, a2, a3, &v14, &v12);
      goto LABEL_12;
    }
LABEL_13:
    Subgraph::Subgraph((Subgraph *)&v14, a3);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v21 = (void **)a4;
    v22 = 0;
    v11 = (char *)operator new(0x98uLL);
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v11 + 152;
    *(_QWORD *)(a4 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph const*,Subgraph const*,Subgraph*>(a4 + 16, (uint64_t)&v14, (uint64_t)&v21, (uint64_t)v11);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v20, v20[1]);
    v21 = (void **)&v19;
    std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v21);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v18, v18[1]);
    std::__list_imp<ZinIrSection *>::clear(v17);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v16, v16[1]);
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
    goto LABEL_14;
  }
  v15[0] = 0;
  v15[1] = 0;
  v14 = (void **)v15;
  (*(void (**)(_QWORD, ZinIrOpLayerGraph *, const SubgraphSplitInfo *, void ***, __int128 *))(**((_QWORD **)this + 22) + 8))(*((_QWORD *)this + 22), a2, a3, &v14, &v12);
LABEL_12:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  *(_OWORD *)a4 = v12;
  *(_QWORD *)(a4 + 16) = v13;
  v13 = 0;
  v12 = 0uLL;
LABEL_14:
  v14 = (void **)&v12;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_206F39A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, _QWORD *a16)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a15, a16);
  a15 = (void **)&a11;
  std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::RefineSplitInfoByKernelOverhead(ZinMirSpatialSplitter *this@<X0>, ZinIrOpLayerGraph *a2@<X1>, const SubgraphSplitInfo *a3@<X2>, char **a4@<X8>)
{
  char *v5;
  const SubgraphSplitInfo *v8;
  const SubgraphSplitInfo *v9;
  char v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  const SubgraphSplitInfo *v16;
  void **v17[3];
  void ***v18;
  uint64_t v19;
  const SubgraphSplitInfo *v20;
  __int128 v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  void ***v25;
  void **v26[57];
  _QWORD v27[2];

  v27[0] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 29))
  {
    SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)v26, a3);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v22 = a4;
    LOBYTE(v23) = 0;
    v5 = (char *)operator new(0x1C8uLL);
    *a4 = v5;
    a4[1] = v5;
    a4[2] = v5 + 456;
    a4[1] = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SubgraphSplitInfo>,SubgraphSplitInfo const*,SubgraphSplitInfo const*,SubgraphSplitInfo*>((uint64_t)(a4 + 2), (uint64_t)v26, (uint64_t)v27, (uint64_t)v5);
    SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)v26);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)v26, a3);
    v20 = 0;
    v21 = 0uLL;
    v18 = (void ***)&v20;
    LOBYTE(v19) = 0;
    v20 = (const SubgraphSplitInfo *)operator new(0x1C8uLL);
    *(_QWORD *)&v21 = v20;
    *((_QWORD *)&v21 + 1) = (char *)v20 + 456;
    *(_QWORD *)&v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SubgraphSplitInfo>,SubgraphSplitInfo const*,SubgraphSplitInfo const*,SubgraphSplitInfo*>((uint64_t)&v21 + 8, (uint64_t)v26, (uint64_t)v27, (uint64_t)v20);
    SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)v26);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = v20;
    v9 = (const SubgraphSplitInfo *)v21;
    if (v20 != (const SubgraphSplitInfo *)v21)
    {
      do
      {
        v10 = 0;
        do
        {
          SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)v26, v8);
          ZinMirSpatialSplitter::RefineSubgraphByKernelOverhead(this, a2, (const SubgraphSplitInfo *)v26, (uint64_t)&v18);
          v11 = 0x86BCA1AF286BCA1BLL * ((v19 - (uint64_t)v18) >> 3);
          if (v11)
          {
            if (v11 == 1 && v26[11] == v18[11])
            {
              v12 = a4[1];
              if (v12 >= a4[2])
              {
                v13 = std::vector<SubgraphSplitInfo>::__emplace_back_slow_path<SubgraphSplitInfo&>((uint64_t *)a4, (const SubgraphSplitInfo *)v26);
              }
              else
              {
                SubgraphSplitInfo::SubgraphSplitInfo((SubgraphSplitInfo *)a4[1], (const SubgraphSplitInfo *)v26);
                v13 = (uint64_t)(v12 + 456);
                a4[1] = v12 + 456;
              }
              a4[1] = (char *)v13;
            }
            else
            {
              ZinMirSpatialSplitter::ConstructSplitInfoOfRefinedClusters(this, a2, (const Subgraph **)&v18, (uint64_t *)v17);
              v14 = v17[0];
              v15 = v17[1];
              while (v14 != v15)
              {
                std::vector<SubgraphSplitInfo>::push_back[abi:ne180100]((uint64_t *)a4, (uint64_t)v14);
                v14 += 57;
              }
              v25 = v17;
              std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
              v10 = 1;
            }
          }
          v17[0] = (void **)&v18;
          std::vector<Subgraph>::__destroy_vector::operator()[abi:ne180100](v17);
          SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)v26);
          v8 = (const SubgraphSplitInfo *)((char *)v8 + 456);
        }
        while (v8 != v9);
        if ((v10 & 1) == 0)
          break;
        std::vector<SubgraphSplitInfo>::__vdeallocate((void **)&v20);
        v20 = (const SubgraphSplitInfo *)*a4;
        v8 = v20;
        v21 = *(_OWORD *)(a4 + 1);
        v16 = (const SubgraphSplitInfo *)v21;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        v9 = v16;
      }
      while (v8 != v16);
    }
    v26[0] = (void **)&v20;
    std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100](v26);
    v26[0] = (void **)&v22;
    std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100](v26);
  }
}

void sub_206F39D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)&a22);
  a22 = (void **)&a18;
  std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

BOOL ZinMirSpatialSplitter::IsWorthCompileTimeIncrease(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  double v4;
  double v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = (_QWORD *)a2[37];
  v4 = 0.0;
  v5 = 0.0;
  if (v3 != a2 + 38)
  {
    do
    {
      v6 = (_QWORD *)v3[1];
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v5 = v5 + *((double *)v3 + 5);
      v3 = v8;
    }
    while (v8 != a2 + 38);
  }
  v10 = (_QWORD *)a2[40];
  if (v10 != a2 + 41)
  {
    v4 = 0.0;
    do
    {
      v11 = (_QWORD *)v10[1];
      v12 = v10;
      if (v11)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v9 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v9);
      }
      v4 = v4 + *((double *)v10 + 5);
      v10 = v13;
    }
    while (v13 != a2 + 41);
  }
  v14 = (_QWORD *)a2[49];
  v15 = 0.0;
  if (v14 != a2 + 50)
  {
    do
    {
      v16 = (_QWORD *)v14[1];
      v17 = v14;
      if (v16)
      {
        do
        {
          v18 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v17[2];
          v9 = *v18 == (_QWORD)v17;
          v17 = v18;
        }
        while (!v9);
      }
      v15 = v15 + *((double *)v14 + 5);
      v14 = v18;
    }
    while (v18 != a2 + 50);
  }
  return (v5 - (v4 + v15)) / v5 >= *(double *)(a1 + 64)
      || a2[32] * a2[11] * a2[33] <= (unint64_t)(*(_QWORD *)(a1 + 72) * a3);
}

uint64_t ZinMirSpatialSplitter::TileWithGlobalRefinement(uint64_t a1, uint64_t a2, ZinEngineLayerMirInfo *a3, char a4)
{
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  ZinMirGraphSplitterBase *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char **v66;
  char *v67[2];
  uint64_t v68;
  char **v69;
  char *v70[2];
  char v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  _QWORD v86[3];
  _QWORD *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v71 = a4;
  v70[0] = 0;
  v70[1] = 0;
  v68 = 0;
  v69 = v70;
  v7 = *(_QWORD **)(a1 + 8);
  v86[0] = &off_24C001450;
  v86[1] = &v68;
  v87 = v86;
  v8 = ZinIrControlFlowGraph::TraverseForward(v7, (uint64_t)v86);
  v9 = v87;
  if (v87 == v86)
  {
    v10 = 4;
    v9 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  if (!v8)
  {
    v11 = *(_QWORD **)(a1 + 8);
    v85 = 0;
    v12 = operator new(0x20uLL);
    *v12 = &off_24C0014A8;
    v12[1] = &v69;
    v12[2] = a1;
    v12[3] = &v68;
    v85 = v12;
    v13 = ZinIrControlFlowGraph::TraverseForward(v11, (uint64_t)v84);
    v14 = v85;
    if (v85 == v84)
    {
      v15 = 4;
      v14 = v84;
    }
    else
    {
      if (!v85)
        goto LABEL_12;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_12:
    if (v13)
      goto LABEL_13;
    v67[0] = 0;
    v67[1] = 0;
    v66 = v67;
    if (!*(_QWORD *)(a1 + 184))
      goto LABEL_23;
    if (!*(_QWORD *)(a1 + 192))
      ZinAssertImpl("Spatial Split Internal Error");
    v18 = *(_QWORD **)(a1 + 8);
    v83 = 0;
    v19 = operator new(0x20uLL);
    *v19 = &off_24C001500;
    v19[1] = &v69;
    v19[2] = a1;
    v19[3] = &v66;
    v83 = v19;
    v20 = ZinIrControlFlowGraph::TraverseForward(v18, (uint64_t)v82);
    v21 = v83;
    if (v83 == v82)
    {
      v22 = 4;
      v21 = v82;
    }
    else
    {
      if (!v83)
        goto LABEL_22;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_22:
    if (v20)
    {
LABEL_29:
      v16 = 3;
LABEL_30:
      std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy((uint64_t)&v66, v67[0]);
      goto LABEL_14;
    }
LABEL_23:
    ZinMirSpatialSplitUtils::PostprocessForPressureBasedSubgraphIdentification(a3);
    v65 = 0;
    v23 = *(_QWORD **)(a1 + 8);
    v81 = 0;
    v24 = operator new(0x30uLL);
    *v24 = &off_24BFF4DD0;
    v24[1] = &v69;
    v24[2] = a1;
    v24[3] = a2;
    v24[4] = &v65;
    v24[5] = &v71;
    v81 = v24;
    v25 = ZinIrControlFlowGraph::TraverseForward(v23, (uint64_t)v80);
    v26 = v81;
    if (v81 == v80)
    {
      v27 = 4;
      v26 = v80;
    }
    else
    {
      if (!v81)
        goto LABEL_28;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_28:
    if (v25)
      goto LABEL_29;
    if (!*(_QWORD *)(a1 + 184) || (v28 = *(ZinMirGraphSplitterBase **)(a1 + 192)) == 0)
    {
LABEL_41:
      v34 = *(_QWORD **)(a1 + 8);
      v76[0] = &unk_24C053830;
      v76[1] = ZinViewLayerUtils::CascadeMultiDimensionalViews;
      v77 = v76;
      v35 = ZinIrControlFlowGraph::TraverseForward(v34, (uint64_t)v76, 1);
      v36 = v77;
      if (v77 == v76)
      {
        v37 = 4;
        v36 = v76;
      }
      else
      {
        if (!v77)
          goto LABEL_46;
        v37 = 5;
      }
      (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_46:
      if (v35)
        goto LABEL_29;
      v38 = *(_QWORD **)(a1 + 8);
      v74[0] = &unk_24C053830;
      v74[1] = ZinMirSpatialSplitUtils::UpdateMirInfoForSSM;
      v75 = v74;
      v40 = ZinIrControlFlowGraph::TraverseForward(v38, (uint64_t)v74, 1);
      v41 = v75;
      if (v75 == v74)
      {
        v42 = 4;
        v41 = v74;
      }
      else
      {
        if (!v75)
        {
LABEL_52:
          if (v40)
            goto LABEL_29;
          v64 = 0;
          if (MirOpt::CSE(*(MirOpt **)(a1 + 8), **(ZinIrControlFlowGraph ***)(a1 + 16), (const ZinIrHalParameters *)&v64, v39))goto LABEL_29;
          MirOpt::MergeConvolutions(*(_QWORD **)(a1 + 8), *(uint64_t **)(a1 + 16), 1);
          if (!v43)
          {
            v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v48)
              ZinMirSpatialSplitter::TileWithGlobalRefinement(v48, v49, v50, v51, v52, v53, v54, v55);
            goto LABEL_29;
          }
          MirOpt::MergeFanoutConvolutions(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
          if (!v44)
          {
            v56 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v56)
              ZinMirSpatialSplitter::TileWithGlobalRefinement(v56, v57, v58, v59, v60, v61, v62, v63);
            goto LABEL_29;
          }
          if (!*(_BYTE *)(a1 + 35))
          {
            v16 = 0;
            goto LABEL_30;
          }
          v45 = *(_QWORD **)(a1 + 8);
          v72[0] = &unk_24C053830;
          v72[1] = ZinMirSpatialSplitUtils::MoveChannelConcatFromOuterToInnerMost;
          v73 = v72;
          v16 = ZinIrControlFlowGraph::TraverseForward(v45, (uint64_t)v72, 1);
          v46 = v73;
          if (v73 == v72)
          {
            v47 = 4;
            v46 = v72;
          }
          else
          {
            if (!v73)
              goto LABEL_67;
            v47 = 5;
          }
          (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_67:
          if (!(_DWORD)v16)
            goto LABEL_30;
          goto LABEL_29;
        }
        v42 = 5;
      }
      (*(void (**)(void))(*v41 + 8 * v42))();
      goto LABEL_52;
    }
    if (ZinMirGraphSplitterBase::SetNextTileId(v28))
      goto LABEL_29;
    if (!*(_QWORD *)(a1 + 192))
      ZinAssertImpl("Spatial Split Internal Error");
    v29 = *(_QWORD **)(a1 + 8);
    v79 = 0;
    v30 = operator new(0x20uLL);
    *v30 = &off_24BFF4E28;
    v30[1] = a1;
    v30[2] = &v66;
    v30[3] = &v65;
    v79 = v30;
    v31 = ZinIrControlFlowGraph::TraverseForward(v29, (uint64_t)v78);
    v32 = v79;
    if (v79 == v78)
    {
      v33 = 4;
      v32 = v78;
    }
    else
    {
      if (!v79)
        goto LABEL_40;
      v33 = 5;
    }
    (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_40:
    if (v31)
      goto LABEL_29;
    goto LABEL_41;
  }
LABEL_13:
  v16 = 3;
LABEL_14:
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>>>::destroy((uint64_t)&v69, v70[0]);
  return v16;
}

void sub_206F3A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy((uint64_t)&a12, a13);
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<SubgraphSplitInfo>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::Tile(uint64_t a1, uint64_t *a2, ZinEngineLayerMirInfo *a3, char a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char **v36;
  char *v37[2];
  uint64_t v38;
  std::__shared_weak_count *v39;
  char v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v40 = a4;
  if (!*(_BYTE *)(a1 + 32))
  {
    v37[0] = 0;
    v37[1] = 0;
    v36 = v37;
    v14 = *(_QWORD **)(a1 + 8);
    v50 = 0;
    v15 = operator new(0x20uLL);
    *v15 = &off_24C001608;
    v15[1] = &v36;
    v15[2] = a1;
    v15[3] = a2;
    v50 = v15;
    v16 = ZinIrControlFlowGraph::TraverseForward(v14, (uint64_t)v49);
    v17 = v50;
    if (v50 == v49)
    {
      v18 = 4;
      v17 = v49;
    }
    else
    {
      if (!v50)
        goto LABEL_15;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_15:
    if (v16)
      goto LABEL_34;
    ZinMirSpatialSplitUtils::PostprocessForPressureBasedSubgraphIdentification(a3);
    v19 = *(_QWORD **)(a1 + 8);
    v48 = 0;
    v20 = operator new(0x20uLL);
    *v20 = &off_24C001660;
    v20[1] = &v36;
    v20[2] = a1;
    v20[3] = &v40;
    v48 = v20;
    v21 = ZinIrControlFlowGraph::TraverseForward(v19, (uint64_t)v47);
    v22 = v48;
    if (v48 == v47)
    {
      v23 = 4;
      v22 = v47;
    }
    else
    {
      if (!v48)
        goto LABEL_21;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_21:
    if (v21)
      goto LABEL_34;
    v24 = *(_QWORD **)(a1 + 8);
    v45[0] = &unk_24C053830;
    v45[1] = ZinViewLayerUtils::CascadeMultiDimensionalViews;
    v46 = v45;
    v25 = ZinIrControlFlowGraph::TraverseForward(v24, (uint64_t)v45, 1);
    v26 = v46;
    if (v46 == v45)
    {
      v27 = 4;
      v26 = v45;
    }
    else
    {
      if (!v46)
        goto LABEL_27;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_27:
    if (!v25)
    {
      v28 = *(_QWORD **)(a1 + 8);
      v43[0] = &unk_24C053830;
      v43[1] = ZinMirSpatialSplitUtils::UpdateMirInfoForSSM;
      v44 = v43;
      v29 = ZinIrControlFlowGraph::TraverseForward(v28, (uint64_t)v43, 1);
      v30 = v44;
      if (v44 == v43)
      {
        v31 = 4;
        v30 = v43;
      }
      else
      {
        if (!v44)
          goto LABEL_33;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_33:
      if (v29)
        goto LABEL_34;
      if (!*(_BYTE *)(a1 + 35))
      {
        v10 = 0;
        goto LABEL_35;
      }
      v33 = *(_QWORD **)(a1 + 8);
      v41[0] = &unk_24C053830;
      v41[1] = ZinMirSpatialSplitUtils::MoveChannelConcatFromOuterToInnerMost;
      v42 = v41;
      v10 = ZinIrControlFlowGraph::TraverseForward(v33, (uint64_t)v41, 1);
      v34 = v42;
      if (v42 == v41)
      {
        v35 = 4;
        v34 = v41;
      }
      else
      {
        if (!v42)
          goto LABEL_44;
        v35 = 5;
      }
      (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_44:
      if (!(_DWORD)v10)
        goto LABEL_35;
    }
LABEL_34:
    v10 = 3;
LABEL_35:
    std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy((uint64_t)&v36, v37[0]);
    return v10;
  }
  v7 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = ZinMirSpatialSplitter::TileWithGlobalRefinement(a1, (uint64_t)&v38, a3, a4);
  v11 = v39;
  if (v39)
  {
    v12 = (unint64_t *)&v39->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_206F3A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>,std::less<ZinIrBasicBlock *>,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<std::pair<Subgraph,SplitInfo>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void ZinMirSpatialSplitter::AdjustTiledRegionsForConcats(ZinMirSpatialSplitter *this, const Subgraph *a2, SplitInfo *a3)
{
  char *v3;
  char *v4;
  SplitInfo *v5;
  const Subgraph *v6;
  int v7;
  char *v8;
  Subgraph *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  unint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int *v39;
  int v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t ValueAt;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  BOOL v88;
  char *v89;
  int v90;
  char *v93;
  _OWORD *v94;
  unint64_t v95;
  int *v96;
  __int128 *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  char *v111;
  char *v112;
  void *__p;
  char *v114;
  char *v115;
  _OWORD v116[2];
  _OWORD v117[3];
  void *v118;
  unint64_t v119;
  void *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[12];
  char v126;

  v4 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 9);
  v98 = (char *)a2 + 80;
  if (v3 != (char *)a2 + 80)
  {
    v5 = a3;
    v6 = a2;
    v7 = (int)this;
    v8 = (char *)a2 + 48;
    v90 = (int)this;
    v93 = (char *)a2 + 72;
    while (1)
    {
      v89 = v3;
      v9 = (Subgraph *)*((_QWORD *)v3 + 4);
      if (*(_DWORD *)(*((_QWORD *)v9 + 8) + 8) == 7)
      {
        v10 = *((_QWORD *)v6 + 7);
        if ((char *)v10 == v8)
          goto LABEL_143;
        v11 = *((_QWORD *)v6 + 7);
        while (*(Subgraph **)(v11 + 16) != v9)
        {
          v11 = *(_QWORD *)(v11 + 8);
          if ((char *)v11 == v8)
            goto LABEL_143;
        }
        if ((char *)v11 == v8)
LABEL_143:
          ZinAssertImpl("Subgraph in set has not been tiled", v3);
        if (v10 == v11)
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          do
          {
            ++v12;
            v10 = *(_QWORD *)(v10 + 8);
          }
          while (v10 != v11);
        }
        v95 = v12;
        v14 = *(_QWORD *)v5;
        v13 = *((_QWORD *)v5 + 1);
        if (v13 != *(_QWORD *)v5)
          break;
      }
LABEL_130:
      v85 = v89;
      v86 = (char *)*((_QWORD *)v89 + 1);
      if (v86)
      {
        do
        {
          v87 = v86;
          v86 = *(char **)v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          v87 = (char *)*((_QWORD *)v85 + 2);
          v88 = *(_QWORD *)v87 == (_QWORD)v85;
          v85 = v87;
        }
        while (!v88);
      }
      v3 = v87;
      if (v87 == v98)
        return;
    }
    v15 = 0;
    while (1)
    {
      v99 = v15;
      v16 = (_QWORD *)(v14 + 24 * v15);
      if (0x34F72C234F72C235 * ((uint64_t)(v16[1] - *v16) >> 3) <= v95)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v17 = *v16 + 232 * v95;
      if (!*(_BYTE *)(v17 + 224))
        goto LABEL_129;
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v94 = (_OWORD *)v17;
      std::vector<WorkUnit>::__init_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>(&v120, *(const void **)(v17 + 128), *(_QWORD *)(v17 + 136), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v17 + 136) - *(_QWORD *)(v17 + 128)) >> 4));
      LOBYTE(v123) = 0;
      std::vector<BOOL>::vector(&v118, 0xCCCCCCCCCCCCCCCDLL * (((char *)v121 - (_BYTE *)v120) >> 4), (unsigned __int8 *)&v123);
      v18 = v119;
      v20 = *((_QWORD *)v9 + 11);
      v19 = *((_QWORD *)v9 + 12);
      if (v119 != (v19 - v20) >> 3)
        ZinAssertImpl("Internal Spatial Splitting Error", v89);
      if (v19 == v20)
      {
        v29 = *((_QWORD *)v9 + 12);
      }
      else
      {
        v21 = 0;
        v19 = *((_QWORD *)v9 + 11);
        do
        {
          *(_QWORD *)&v116[0] = 0;
          *(_QWORD *)&v116[0] = *(_QWORD *)(v19 + 8 * v21);
          if (v98 == (char *)std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>((uint64_t)v4, (ZinIrOpLayer **)v116))
          {
            *(_QWORD *)((char *)v118 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v21);
          }
          else
          {
            v22 = *((_QWORD *)v6 + 7);
            if ((char *)v22 == v8)
              goto LABEL_137;
            v23 = *((_QWORD *)v6 + 7);
            while (*(_QWORD *)(v23 + 16) != *(_QWORD *)&v116[0])
            {
              v23 = *(_QWORD *)(v23 + 8);
              if ((char *)v23 == v8)
                goto LABEL_137;
            }
            if ((char *)v23 == v8)
LABEL_137:
              ZinAssertImpl("Internal Spatial Split Error", v89);
            if (v22 == v23)
            {
              v24 = 0;
            }
            else
            {
              v24 = 0;
              do
              {
                ++v24;
                v22 = *(_QWORD *)(v22 + 8);
              }
              while (v22 != v23);
            }
            v25 = *(_QWORD *)v5;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3) <= v99)
              std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
            v100 = 0;
            v101 = 0;
            v102 = 0;
            std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(&v100, *(_QWORD *)(v25 + 24 * v99), *(_QWORD *)(v25 + 24 * v99 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(v25 + 24 * v99 + 8) - *(_QWORD *)(v25 + 24 * v99)) >> 3));
            if (0x34F72C234F72C235 * ((v101 - v100) >> 3) <= v24)
              std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
            std::__optional_copy_base<TiledLayerTensorRegions,false>::__optional_copy_base[abi:ne180100]((TiledLayerTensorRegions *)&v123, (const TiledLayerTensorRegions *)&v100[232 * v24]);
            v26 = v21 >> 6;
            v27 = 1 << v21;
            if (v126)
              v28 = *((_QWORD *)v118 + v26) & ~v27;
            else
              v28 = *((_QWORD *)v118 + v26) | v27;
            *((_QWORD *)v118 + v26) = v28;
            std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v123);
            *(_QWORD *)&v123 = &v100;
            std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          }
          ++v21;
          v19 = *((_QWORD *)v9 + 11);
          v29 = *((_QWORD *)v9 + 12);
        }
        while (v21 < (v29 - v19) >> 3);
        v18 = v119;
      }
      v30 = (char *)v118;
      v31 = v18 & 0x3F;
      if (v18 > 0x3F || (v18 & 0x3F) != 0)
        break;
LABEL_53:
      if (v29 != v19)
      {
        v34 = 0;
        v35 = 0;
        do
          v35 |= ZinMirSpatialSplitter::ShouldConcatBeTrimmed(v7, v9, v6, v5, v99, v34++, &v120);
        while (v34 < (uint64_t)(*((_QWORD *)v9 + 12) - *((_QWORD *)v9 + 11)) >> 3);
        v4 = v93;
        if ((v35 & 1) != 0)
          goto LABEL_57;
      }
LABEL_124:
      if (v118)
        operator delete(v118);
      if (v120)
      {
        v121 = (__int128 *)v120;
        operator delete(v120);
      }
      v14 = *(_QWORD *)v5;
      v13 = *((_QWORD *)v5 + 1);
LABEL_129:
      v15 = v99 + 1;
      if (v99 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3))
        goto LABEL_130;
    }
    v32 = 0;
    v33 = (char *)v118 + 8 * (v18 >> 6);
    while (((*(_QWORD *)v30 >> v32) & 1) == 0)
    {
      v30 += 8 * (v32 == 63);
      if (v32 == 63)
        v32 = 0;
      else
        ++v32;
      if (v32 == v31 && v30 == v33)
        goto LABEL_53;
    }
LABEL_57:
    v116[0] = *v94;
    v36 = v94[1];
    v37 = v94[2];
    v38 = v94[4];
    v117[1] = v94[3];
    v117[2] = v38;
    v116[1] = v36;
    v117[0] = v37;
    SplitInfo::GetSplitDimensions(v5, &v100);
    v39 = (int *)v100;
    v96 = (int *)v101;
    if (v100 != v101)
    {
      do
      {
        v40 = *v39;
        v42 = (__int128 *)v120;
        v41 = v121;
        if (v120 == v121)
        {
          v44 = 0x7FFFFFFFFFFFFFFFLL;
          v43 = -1;
        }
        else
        {
          v43 = -1;
          v44 = 0x7FFFFFFFFFFFFFFFLL;
          do
          {
            v123 = *v42;
            v45 = v42[1];
            v46 = v42[2];
            v47 = v42[4];
            v125[1] = v42[3];
            v125[2] = v47;
            v124 = v45;
            v125[0] = v46;
            ValueAt = GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v123, v40);
            if (v44 >= ValueAt)
              v44 = ValueAt;
            v49 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v123, v40);
            v50 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v125 + 1, v40);
            if (v50 + v49 > v43)
              v43 = v50 + v49;
            v42 += 5;
          }
          while (v42 != v41);
        }
        if (SetValueAtDimension<ZinTensorPosition>(v116, v40, v44)
          || SetValueAtDimension<ZinTensorDimensions>((_QWORD *)v117 + 1, v40, v43 - v44))
        {
          ZinAssertImpl("Spatial Split Internal Error", v89);
        }
        ++v39;
      }
      while (v39 != v96);
      v39 = (int *)v100;
    }
    if (v39)
    {
      v101 = (char *)v39;
      operator delete(v39);
    }
    __p = 0;
    v114 = 0;
    v115 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v52 = (__int128 *)v120;
    v51 = v121;
    v97 = v121;
    while (v52 != v51)
    {
      v123 = *v52;
      v124 = v52[1];
      v53 = *((_QWORD *)v52 + 5);
      *(_QWORD *)&v125[0] = *((_QWORD *)v52 + 4);
      v55 = *((_QWORD *)v52 + 6);
      v54 = *((_QWORD *)v52 + 7);
      v57 = *((_QWORD *)v52 + 8);
      v56 = *((_QWORD *)v52 + 9);
      v58 = v114;
      if (v114 >= v115)
      {
        v62 = __p;
        v63 = 0xCCCCCCCCCCCCCCCDLL * ((v114 - (_BYTE *)__p) >> 3);
        v64 = v63 + 1;
        if (v63 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((v115 - (_BYTE *)__p) >> 3) > v64)
          v64 = 0x999999999999999ALL * ((v115 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v115 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v65 = 0x666666666666666;
        else
          v65 = v64;
        if (v65)
        {
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v115, v65);
          v62 = __p;
          v58 = v114;
        }
        else
        {
          v66 = 0;
        }
        v67 = &v66[40 * v63];
        *(_OWORD *)v67 = v123;
        *((_OWORD *)v67 + 1) = v124;
        *((_QWORD *)v67 + 4) = *(_QWORD *)&v125[0];
        if (v58 == v62)
        {
          v71 = &v66[40 * v63];
        }
        else
        {
          v68 = &v66[40 * v63];
          do
          {
            v69 = *(_OWORD *)((char *)v58 - 40);
            v70 = *(_OWORD *)((char *)v58 - 24);
            v71 = v68 - 40;
            *((_QWORD *)v68 - 1) = *((_QWORD *)v58 - 1);
            *(_OWORD *)(v68 - 24) = v70;
            *(_OWORD *)(v68 - 40) = v69;
            v58 = (_OWORD *)((char *)v58 - 40);
            v68 -= 40;
          }
          while (v58 != v62);
        }
        v61 = v67 + 40;
        __p = v71;
        v114 = v67 + 40;
        v115 = &v66[40 * v65];
        if (v62)
          operator delete(v62);
      }
      else
      {
        v59 = *v52;
        v60 = v52[1];
        *((_QWORD *)v114 + 4) = *((_QWORD *)v52 + 4);
        *v58 = v59;
        v58[1] = v60;
        v61 = (char *)v58 + 40;
      }
      v114 = v61;
      v72 = v111;
      if (v111 >= v112)
      {
        v74 = (char *)v110;
        v75 = 0x8E38E38E38E38E39 * ((v111 - (_BYTE *)v110) >> 3);
        v76 = v75 + 1;
        if (v75 + 1 > 0x38E38E38E38E38ELL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((v112 - (_BYTE *)v110) >> 3) > v76)
          v76 = 0x1C71C71C71C71C72 * ((v112 - (_BYTE *)v110) >> 3);
        if (0x8E38E38E38E38E39 * ((v112 - (_BYTE *)v110) >> 3) >= 0x1C71C71C71C71C7)
          v77 = 0x38E38E38E38E38ELL;
        else
          v77 = v76;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>((uint64_t)&v112, v77);
          v74 = (char *)v110;
          v72 = v111;
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[72 * v75];
        *(_QWORD *)v79 = v53;
        *((_QWORD *)v79 + 1) = v55;
        *((_QWORD *)v79 + 2) = v54;
        *((_QWORD *)v79 + 3) = v57;
        *((_QWORD *)v79 + 4) = v56;
        *(_OWORD *)(v79 + 40) = 0u;
        *(_OWORD *)(v79 + 56) = 0u;
        if (v72 == v74)
        {
          v84 = &v78[72 * v75];
        }
        else
        {
          v80 = &v78[72 * v75];
          do
          {
            *(_OWORD *)(v80 - 72) = *(_OWORD *)(v72 - 72);
            v81 = *(_OWORD *)(v72 - 56);
            v82 = *(_OWORD *)(v72 - 40);
            v83 = *(_OWORD *)(v72 - 24);
            v84 = v80 - 72;
            *((_QWORD *)v80 - 1) = *((_QWORD *)v72 - 1);
            *(_OWORD *)(v80 - 24) = v83;
            *(_OWORD *)(v80 - 40) = v82;
            *(_OWORD *)(v80 - 56) = v81;
            v72 -= 72;
            v80 -= 72;
          }
          while (v72 != v74);
        }
        v73 = v79 + 72;
        v110 = v84;
        v111 = v79 + 72;
        v112 = &v78[72 * v77];
        if (v74)
          operator delete(v74);
      }
      else
      {
        *(_QWORD *)v111 = v53;
        *((_QWORD *)v72 + 1) = v55;
        *((_QWORD *)v72 + 2) = v54;
        *((_QWORD *)v72 + 3) = v57;
        *((_QWORD *)v72 + 4) = v56;
        v73 = v72 + 72;
        *(_OWORD *)(v72 + 40) = 0u;
        *(_OWORD *)(v72 + 56) = 0u;
      }
      v111 = v73;
      v52 += 5;
      v51 = v97;
    }
    TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)&v100, (_OWORD *)((char *)v94 + 152), v116, (uint64_t)&__p, (uint64_t)&v110, (uint64_t)&v120, 0, 0);
    std::vector<BOOL>::operator=(&v109, (uint64_t)&v118);
    v6 = a2;
    v5 = a3;
    v7 = v90;
    v4 = v93;
    TiledLayerTensorRegions::TiledLayerTensorRegions((TiledLayerTensorRegions *)&v123, (const TiledLayerTensorRegions *)&v100);
    v126 = 1;
    SplitInfo::AddTiledLayerTensorRegions((uint64_t)a3, (uint64_t)v9, v99, (TiledLayerTensorRegions *)&v123);
    std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v123);
    TiledLayerTensorRegions::TiledLayerTensorRegions((TiledLayerTensorRegions *)&v123, (const TiledLayerTensorRegions *)&v100);
    v126 = 1;
    SplitInfo::ReplaceTiledLayerOnBranch(a3, v99, v95, (TiledLayerTensorRegions *)&v123);
    std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v123);
    if (v109)
      operator delete(v109);
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    if (v103)
    {
      v104 = v103;
      operator delete(v103);
    }
    if (v110)
    {
      v111 = (char *)v110;
      operator delete(v110);
    }
    if (__p)
    {
      v114 = (char *)__p;
      operator delete(__p);
    }
    goto LABEL_124;
  }
}

void sub_206F3B34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a70;
  uint64_t a71;

  std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x200]);
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&a23);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a67)
    operator delete(a67);
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::ShouldConcatBeTrimmed(int a1, Subgraph *a2, ZinMirSpatialSplitUtils *this, SplitInfo *a4, unint64_t a5, unint64_t a6, _QWORD *a7)
{
  uint64_t v8;
  char *v10;
  _QWORD *v11;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  Subgraph *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const ZinIrOpLayer *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *i;
  _OWORD *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t *v69;
  char v70;
  SplitInfo *v71;
  uint64_t v72;
  ZinMirSpatialSplitUtils *v73;
  int *v74;
  int v75;
  uint64_t ValueAt;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  BOOL v81;
  BOOL v82;
  SplitInfo *v83;
  uint64_t v85;
  void *__p;
  uint64_t *v87;
  char *v88;
  ZinMirSpatialSplitUtils *v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  ZinMirSpatialSplitUtils *v94;
  _OWORD v95[2];
  __int128 v96;
  Subgraph *v97;

  v8 = *(_QWORD *)a4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) <= a5)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v10 = (char *)this + 48;
  v11 = (_QWORD *)*((_QWORD *)this + 7);
  if (v11 == (_QWORD *)((char *)this + 48))
    return 0;
  v14 = (_QWORD *)(v8 + 24 * a5);
  v15 = *((_QWORD *)this + 7);
  while (*(Subgraph **)(v15 + 16) != a2)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if ((char *)v15 == v10)
      return 0;
  }
  if ((char *)v15 == v10)
    return 0;
  if (v11 == (_QWORD *)v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      ++v16;
      v11 = (_QWORD *)v11[1];
    }
    while (v11 != (_QWORD *)v15);
  }
  v17 = v8 + 24 * a5;
  v19 = *(_QWORD *)(v17 + 8);
  v18 = (_QWORD *)(v17 + 8);
  if (0x34F72C234F72C235 * ((v19 - *v14) >> 3) <= v16)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v85 = *v14 + 232 * v16;
  if (!*(_BYTE *)(v85 + 224))
    std::__throw_bad_optional_access[abi:ne180100]();
  if (ZinMirSpatialSplitUtils::IsRootOutputOrOutsideSubgraph(this, a2, this))
    return 0;
  v97 = a2;
  v87 = 0;
  v88 = 0;
  __p = 0;
  v96 = 0u;
  memset(v95, 0, sizeof(v95));
  std::deque<ZinConcatLayer const*>::push_back(v95, &v97);
  v22 = *((_QWORD *)&v96 + 1);
  v83 = a4;
  if (*((_QWORD *)&v96 + 1))
  {
    do
    {
      v23 = *(Subgraph **)(*(_QWORD *)(*((_QWORD *)&v95[0] + 1) + (((unint64_t)v96 >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * (v96 & 0x1FF));
      *(_QWORD *)&v96 = v96 + 1;
      *((_QWORD *)&v96 + 1) = v22 - 1;
      if ((unint64_t)v96 >= 0x400)
      {
        operator delete(**((void ***)&v95[0] + 1));
        *((_QWORD *)&v95[0] + 1) += 8;
        *(_QWORD *)&v96 = v96 - 512;
      }
      v24 = *((_QWORD *)v23 + 11);
      v25 = *((_QWORD *)v23 + 12);
      if (v25 != v24)
      {
        v26 = 0;
        do
        {
          if (v26 == a6 || (a6 & 0x8000000000000000) != 0 || v23 != v97)
          {
            v89[0] = 0;
            v89[0] = *(ZinMirSpatialSplitUtils **)(v24 + 8 * v26);
            if (*(_DWORD *)(*((_QWORD *)v89[0] + 8) + 8) == 7)
            {
              if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this + 72, v89))
              {
                v94 = v89[0];
                std::deque<ZinConcatLayer const*>::push_back(v95, &v94);
              }
            }
            else if (std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)this + 72, v89)&& ZinMirSpatialSplitUtils::IsDeConv(v89[0], v27))
            {
              v28 = *((_QWORD *)this + 7);
              if ((char *)v28 == v10)
                goto LABEL_134;
              v29 = *((_QWORD *)this + 7);
              while (*(ZinMirSpatialSplitUtils **)(v29 + 16) != v89[0])
              {
                v29 = *(_QWORD *)(v29 + 8);
                if ((char *)v29 == v10)
                  goto LABEL_134;
              }
              if ((char *)v29 == v10)
LABEL_134:
                ZinAssertImpl("Spatial Splitting Internal Error", v83, a7);
              if (v28 == v29)
              {
                v30 = 0;
              }
              else
              {
                v30 = 0;
                do
                {
                  ++v30;
                  v28 = *(_QWORD *)(v28 + 8);
                }
                while (v28 != v29);
              }
              if (0x34F72C234F72C235 * ((uint64_t)(*v18 - *v14) >> 3) <= v30)
                std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
              v31 = *v14 + 232 * v30;
              if (!*(_BYTE *)(v31 + 224))
                std::__throw_bad_optional_access[abi:ne180100]();
              v32 = v87;
              if (v87 >= (uint64_t *)v88)
              {
                v37 = (uint64_t *)__p;
                v38 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v87 - (_BYTE *)__p) >> 4);
                v39 = v38 + 1;
                if (v38 + 1 > 0x333333333333333)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                if (0x999999999999999ALL * ((v88 - (_BYTE *)__p) >> 4) > v39)
                  v39 = 0x999999999999999ALL * ((v88 - (_BYTE *)__p) >> 4);
                if (0xCCCCCCCCCCCCCCCDLL * ((v88 - (_BYTE *)__p) >> 4) >= 0x199999999999999)
                  v40 = 0x333333333333333;
                else
                  v40 = v39;
                if (v40)
                {
                  v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v88, v40);
                  v37 = (uint64_t *)__p;
                  v32 = v87;
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[16 * (((char *)v87 - (_BYTE *)__p) >> 4)];
                *(_OWORD *)v42 = *(_OWORD *)v31;
                v43 = *(_OWORD *)(v31 + 16);
                v44 = *(_OWORD *)(v31 + 32);
                v45 = *(_OWORD *)(v31 + 64);
                *((_OWORD *)v42 + 3) = *(_OWORD *)(v31 + 48);
                *((_OWORD *)v42 + 4) = v45;
                *((_OWORD *)v42 + 1) = v43;
                *((_OWORD *)v42 + 2) = v44;
                if (v32 == v37)
                {
                  v50 = &v41[80 * v38];
                }
                else
                {
                  v46 = &v41[80 * v38];
                  do
                  {
                    *((_OWORD *)v46 - 5) = *((_OWORD *)v32 - 5);
                    v47 = *((_OWORD *)v32 - 4);
                    v48 = *((_OWORD *)v32 - 3);
                    v49 = *((_OWORD *)v32 - 1);
                    v50 = v46 - 80;
                    *((_OWORD *)v46 - 2) = *((_OWORD *)v32 - 2);
                    *((_OWORD *)v46 - 1) = v49;
                    *((_OWORD *)v46 - 4) = v47;
                    *((_OWORD *)v46 - 3) = v48;
                    v32 -= 10;
                    v46 -= 80;
                  }
                  while (v32 != v37);
                }
                v36 = (uint64_t *)(v42 + 80);
                __p = v50;
                v87 = (uint64_t *)(v42 + 80);
                v88 = &v41[80 * v40];
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_OWORD *)v87 = *(_OWORD *)v31;
                v33 = *(_OWORD *)(v31 + 16);
                v34 = *(_OWORD *)(v31 + 32);
                v35 = *(_OWORD *)(v31 + 64);
                *((_OWORD *)v32 + 3) = *(_OWORD *)(v31 + 48);
                *((_OWORD *)v32 + 4) = v35;
                *((_OWORD *)v32 + 1) = v33;
                *((_OWORD *)v32 + 2) = v34;
                v36 = v32 + 10;
              }
              v87 = v36;
            }
            v24 = *((_QWORD *)v23 + 11);
            v25 = *((_QWORD *)v23 + 12);
          }
          ++v26;
        }
        while (v26 < (v25 - v24) >> 3);
      }
      v22 = *((_QWORD *)&v96 + 1);
    }
    while (*((_QWORD *)&v96 + 1));
    v51 = (char *)__p;
    if (__p != v87)
      goto LABEL_102;
  }
  else
  {
    v51 = 0;
  }
  v52 = (char *)*((_QWORD *)this + 7);
  if (v52 == v10)
    goto LABEL_142;
  v53 = (char *)*((_QWORD *)this + 7);
  while (*((Subgraph **)v53 + 2) != v97)
  {
    v53 = (char *)*((_QWORD *)v53 + 1);
    if (v53 == v10)
    {
      v53 = v10;
      break;
    }
  }
  if (v52 == v53)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    do
    {
      ++v54;
      v52 = (char *)*((_QWORD *)v52 + 1);
    }
    while (v52 != v53);
    v52 = v53;
  }
  if (v52 == v10)
LABEL_142:
    ZinAssertImpl("Spatial Splitting Internal Error", v83, a7);
  if (0x34F72C234F72C235 * ((uint64_t)(*v18 - *v14) >> 3) <= v54)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v55 = *v14 + 232 * v54;
  if (!*(_BYTE *)(v55 + 224))
    ZinAssertImpl("Spatial Splitting Internal Error");
  v57 = *(_OWORD **)(v55 + 128);
  for (i = *(_OWORD **)(v55 + 136); v57 != i; v57 += 5)
  {
    v90 = v57[1];
    v91 = v57[2];
    v92 = v57[3];
    v93 = v57[4];
    *(_OWORD *)v89 = *v57;
    if (v51 >= v88)
    {
      v58 = (char *)__p;
      v59 = 0xCCCCCCCCCCCCCCCDLL * ((v51 - (_BYTE *)__p) >> 4);
      v60 = v59 + 1;
      if (v59 + 1 > 0x333333333333333)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x999999999999999ALL * ((v88 - (_BYTE *)__p) >> 4) > v60)
        v60 = 0x999999999999999ALL * ((v88 - (_BYTE *)__p) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((v88 - (_BYTE *)__p) >> 4) >= 0x199999999999999)
        v61 = 0x333333333333333;
      else
        v61 = v60;
      if (v61)
      {
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v88, v61);
        v58 = (char *)__p;
        v51 = (char *)v87;
      }
      else
      {
        v62 = 0;
      }
      v63 = &v62[80 * v59];
      *((_OWORD *)v63 + 1) = v90;
      *((_OWORD *)v63 + 2) = v91;
      *((_OWORD *)v63 + 3) = v92;
      *((_OWORD *)v63 + 4) = v93;
      *(_OWORD *)v63 = *(_OWORD *)v89;
      if (v51 == v58)
      {
        v68 = &v62[80 * v59];
      }
      else
      {
        v64 = &v62[80 * v59];
        do
        {
          *((_OWORD *)v64 - 5) = *((_OWORD *)v51 - 5);
          v65 = *((_OWORD *)v51 - 4);
          v66 = *((_OWORD *)v51 - 3);
          v67 = *((_OWORD *)v51 - 1);
          v68 = v64 - 80;
          *((_OWORD *)v64 - 2) = *((_OWORD *)v51 - 2);
          *((_OWORD *)v64 - 1) = v67;
          *((_OWORD *)v64 - 4) = v65;
          *((_OWORD *)v64 - 3) = v66;
          v51 -= 80;
          v64 -= 80;
        }
        while (v51 != v58);
      }
      v51 = v63 + 80;
      __p = v68;
      v87 = (uint64_t *)(v63 + 80);
      v88 = &v62[80 * v61];
      if (v58)
        operator delete(v58);
    }
    else
    {
      memmove(v51, v57, 0x50uLL);
      v51 += 80;
    }
    v87 = (uint64_t *)v51;
  }
LABEL_102:
  std::deque<unsigned long>::~deque[abi:ne180100](v95);
  v69 = (uint64_t *)__p;
  if (__p == v87)
  {
    v20 = 0;
    goto LABEL_132;
  }
  v70 = 1;
  v71 = v83;
  do
  {
    SplitInfo::GetSplitDimensions(v71, (char **)v89);
    v74 = (int *)v89[0];
    v73 = v89[1];
    if (v89[0] == v89[1])
    {
      v80 = 1;
      if (v89[0])
        goto LABEL_121;
    }
    else
    {
      do
      {
        v75 = *v74;
        ValueAt = GetValueAtDimension<ZinTensorPosition>(v69, *v74);
        v77 = GetValueAtDimension<ZinTensorDimensions>(v69 + 5, v75);
        v78 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)v85, v75);
        v72 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v85 + 40), v75);
        v79 = v75 != 4 || ValueAt == v78;
        v80 = v79;
        if (!v79)
          break;
        v81 = ValueAt == v78 && v77 == v72;
        v82 = v81;
        v70 &= v82;
        ++v74;
      }
      while (v74 != (int *)v73);
      v74 = (int *)v89[0];
      v71 = v83;
      if (v89[0])
      {
LABEL_121:
        v89[1] = (ZinMirSpatialSplitUtils *)v74;
        operator delete(v74);
      }
    }
    if ((v80 & 1) == 0)
      goto LABEL_129;
    v69 += 10;
  }
  while (v69 != v87);
  if ((v70 & 1) != 0)
  {
LABEL_129:
    v20 = 0;
    goto LABEL_131;
  }
  ZinMirSpatialSplitter::DetermineConcatTensorRegion(v72, (uint64_t **)&__p, v71, a6, a7);
  v20 = 1;
LABEL_131:
  v69 = (uint64_t *)__p;
LABEL_132:
  if (v69)
  {
    v87 = v69;
    operator delete(v69);
  }
  return v20;
}

void sub_206F3BC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SplitInfo::ReplaceTiledLayerOnBranch(_QWORD *a1, unint64_t a2, unint64_t a3, TiledLayerTensorRegions *a4)
{
  uint64_t v4;
  uint64_t *v5;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2
    || (v5 = (uint64_t *)(*a1 + 24 * a2), v4 = *v5, 0x34F72C234F72C235 * ((v5[1] - *v5) >> 3) <= a3))
  {
    ZinAssertImpl("Invalid replace call");
  }
  std::__optional_storage_base<TiledLayerTensorRegions,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<TiledLayerTensorRegions,false> const&>((TiledLayerTensorRegions *)(v4 + 232 * a3), a4);
}

uint64_t GetConcatConsumer(const ZinIrOpLayer *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)a1 + 14);
  v2 = *((_QWORD *)a1 + 15);
  while (v1 != v2)
  {
    result = *(_QWORD *)v1;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 64) + 8) == 7)
      return result;
    v1 += 8;
  }
  return 0;
}

void ZinMirSpatialSplitter::DetermineConcatTensorRegion(int a1, uint64_t **a2, SplitInfo *this, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  int *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v13;
  uint64_t ValueAt;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  char *v28;
  char *v29;

  if ((a4 & 0x8000000000000000) != 0 || (v5 = a5, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a5[1] - *a5) >> 4) <= a4))
    ZinAssertImpl("Spatial Split Internal Error", a2, this);
  SplitInfo::GetSplitDimensions(this, &v28);
  v7 = (int *)v28;
  v26 = (int *)v29;
  if (v28 != v29)
  {
    v25 = a4;
    do
    {
      v8 = *v7;
      v10 = *a2;
      v9 = a2[1];
      v11 = *a2 + 10;
      if (*a2 == v9 || v11 == v9)
      {
        v13 = *a2;
      }
      else
      {
        do
        {
          ValueAt = GetValueAtDimension<ZinTensorPosition>(v11, v8);
          if (ValueAt < GetValueAtDimension<ZinTensorPosition>(v10, v8))
            v10 = v11;
          v11 += 10;
        }
        while (v11 != v9);
        v13 = *a2;
        v9 = a2[1];
      }
      v15 = v5;
      v16 = v13 + 10;
      if (v13 != v9 && v16 != v9)
      {
        do
        {
          v18 = GetValueAtDimension<ZinTensorPosition>(v13, v8);
          v19 = GetValueAtDimension<ZinTensorDimensions>(v13 + 5, v8);
          v20 = GetValueAtDimension<ZinTensorPosition>(v16, v8);
          v21 = v16 + 5;
          if (v19 + v18 < GetValueAtDimension<ZinTensorDimensions>(v21, v8) + v20)
            v13 = v21 - 5;
          v16 = v21 + 5;
        }
        while (v16 != v9);
      }
      v22 = GetValueAtDimension<ZinTensorPosition>(v10, v8);
      v5 = v15;
      v23 = GetValueAtDimension<ZinTensorPosition>(v13, v8);
      v24 = GetValueAtDimension<ZinTensorDimensions>(v13 + 5, v8);
      if (SetValueAtDimension<ZinTensorPosition>((_QWORD *)(*v15 + 80 * v25), v8, v22)
        || SetValueAtDimension<ZinTensorDimensions>((_QWORD *)(*v15 + 80 * v25 + 40), v8, v23 - v22 + v24))
      {
        ZinAssertImpl("Spatial Split Internal Error", v25);
      }
      ++v7;
    }
    while (v7 != v26);
    v7 = (int *)v28;
  }
  if (v7)
  {
    v29 = (char *)v7;
    operator delete(v7);
  }
}

void sub_206F3BF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitter::DetermineInputLayersForCurrentSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, unint64_t a5, _QWORD *a6, uint64_t a7, ZinIrOpLayer *a8, _QWORD *a9, uint64_t **a10)
{
  uint64_t v10;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int *v20;
  int *v21;
  char View;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  _QWORD *v34;
  ZinIrOpLayer *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  void *v39;
  std::string::size_type size;
  std::string::size_type v41;
  int v42;
  uint64_t ValueAt;
  int v44;
  _BOOL4 v45;
  BOOL v46;
  uint64_t v47;
  __int128 v48;
  ZinIrOpLayer *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  std::string::size_type v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  ZinIrOpLayer *v71;
  size_t v72;
  std::string *v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  unint64_t v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *GroupId;
  uint64_t **SpatialSplitTransform;
  _BOOL4 v97;
  int v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t **v111;
  int v112;
  size_t v113;
  std::string *v114;
  const void *v115;
  std::string *v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  unint64_t v123;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  __n128 v128;
  uint64_t v129;
  int v130;
  ZinIrOpLayer *v131;
  _QWORD *v132;
  _BOOL4 v133;
  int v134;
  unint64_t v135;
  ZinIrOpLayer **v136;
  ZinIrOpLayer **v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  ZinIrOpLayer **v143;
  char *v144;
  char *v145;
  ZinIrOpLayer *v146;
  ZinIrOpLayer ***v147;
  uint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  TiledLayerTensorRegions::Id *v162;
  _QWORD *v164;
  uint64_t v168;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  std::string v173;
  _BYTE v174[172];
  _QWORD *v175;
  std::string v176;
  char v177;
  _OWORD v178[2];
  uint64_t v179;
  int64x2_t v180;
  int64x2_t v181;
  uint64_t v182;
  std::string v183;
  char v184;
  std::string v185;
  std::string v186;
  std::string v187;
  std::string v188;
  void *v189[2];
  std::string::size_type v190;
  void *__p[2];
  __int128 v192;
  uint64_t v193;
  ZinIrOpLayer *v194;
  ZinIrOpLayer **v195;
  void *v196;
  void *v197;
  _QWORD v198[3];
  __int128 v199;
  int64_t v200;
  _BYTE v201[40];
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)a4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) <= a5)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  memset(v198, 0, sizeof(v198));
  std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v198, *(_QWORD *)(v10 + 24 * a5), *(_QWORD *)(v10 + 24 * a5 + 8), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(v10 + 24 * a5 + 8) - *(_QWORD *)(v10 + 24 * a5)) >> 3));
  *(_QWORD *)v201 = a8;
  __p[0] = v201;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v195, __p);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a6[1] - *a6) >> 3) <= a5)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v14 = *((_QWORD *)a8 + 11);
  if (*((_QWORD *)a8 + 12) == v14)
  {
LABEL_233:
    v148 = 0;
    goto LABEL_237;
  }
  v15 = 0;
  v164 = (_QWORD *)(*a6 + 40 * a5);
  v168 = a3 + 80;
  v170 = a3 + 48;
  v171 = a5;
  v172 = a7;
  v162 = (TiledLayerTensorRegions::Id *)(a7 + 152);
  v158 = (uint64_t)(a10 + 2);
  v160 = a5 + 1;
  v161 = 24 * a5 + 32;
  v159 = -40 - 40 * a5;
  while (1)
  {
    v194 = 0;
    v194 = *(ZinIrOpLayer **)(v14 + 8 * v15);
    v16 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v194 + 32))(v194, 0, 0);
    v17 = (*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)a8 + 200))(a8, v16);
    v18 = std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a3 + 72, &v194);
    v19 = v168 == v18 ? 0 : v17;
    if (v19 == 1)
      break;
    SplitInfo::GetSplitDimensions(a4, (char **)__p);
    v20 = (int *)__p[0];
    v21 = (int *)__p[1];
    if (__p[0] == __p[1])
    {
      View = 0;
      if (__p[0])
        goto LABEL_16;
    }
    else
    {
      View = 0;
      do
      {
        if ((View & 1) != 0)
          View = 1;
        else
          View = ZinMirSpatialSplitUtils::ShouldCreateView(a8, v15, *v20);
        ++v20;
      }
      while (v20 != v21);
      v20 = (int *)__p[0];
      if (__p[0])
      {
LABEL_16:
        __p[1] = v20;
        operator delete(v20);
      }
    }
    if ((View & 1) != 0)
    {
      if (v168 == v18)
        goto LABEL_38;
      v23 = (_QWORD *)(*(_QWORD *)(v172 + 128) + 80 * v15);
      v24 = v23[5];
      v25 = v23[6];
      v27 = v23[7];
      v26 = v23[8];
      v28 = v23[9];
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v164, &v194))goto LABEL_38;
      v29 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v164, &v194);
      if (!v29)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v30 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v29[3] + 32))(v29[3], 0, 0);
      v31 = v30[6] == v24 && v30[7] == v25;
      v32 = v31 && v30[10] == v28;
      v33 = v32 && v30[8] == v27;
      if (!v33 || v30[9] != v26)
      {
LABEL_38:
        v36 = *(_QWORD *)(v172 + 128) + 80 * v15;
        v37 = *(_QWORD *)(v36 + 72);
        v38 = *(_OWORD *)(v36 + 56);
        *(_OWORD *)__p = *(_OWORD *)(v36 + 40);
        v192 = v38;
        v193 = v37;
        memset(v201, 0, sizeof(v201));
        SplitInfo::GetSplitDimensions(a4, &v183.__r_.__value_.__l.__data_);
        size = v183.__r_.__value_.__l.__size_;
        v39 = (void *)v183.__r_.__value_.__r.__words[0];
        if (v183.__r_.__value_.__r.__words[0] == v183.__r_.__value_.__l.__size_)
        {
          v45 = 1;
          if (v183.__r_.__value_.__r.__words[0])
            goto LABEL_46;
        }
        else
        {
          v41 = v183.__r_.__value_.__r.__words[0] + 4;
          do
          {
            v42 = *(_DWORD *)(v41 - 4);
            ValueAt = GetValueAtDimension<ZinTensorPosition>((uint64_t *)(*(_QWORD *)(v172 + 128) + 80 * v15), v42);
            v44 = SetValueAtDimension<ZinTensorPosition>(v201, v42, ValueAt);
            v45 = v44 == 0;
            if (v44)
              v46 = 1;
            else
              v46 = v41 == size;
            v41 += 4;
          }
          while (!v46);
          v39 = (void *)v183.__r_.__value_.__r.__words[0];
          if (v183.__r_.__value_.__r.__words[0])
          {
LABEL_46:
            v183.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
            operator delete(v39);
          }
        }
        if (!v45)
          goto LABEL_236;
        if (v17)
        {
          *(_QWORD *)v201 = *(_QWORD *)(*(_QWORD *)(v172 + 128) + 80 * v15);
          memset(&v201[8], 0, 32);
          v47 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v194 + 32))(v194, 0, 0);
          v48 = *(_OWORD *)(v47 + 64);
          *(_OWORD *)__p = *(_OWORD *)(v47 + 48);
          v192 = v48;
          v193 = *(_QWORD *)(v47 + 80);
          __p[0] = *(void **)(*(_QWORD *)(v172 + 128) + 80 * v15 + 40);
        }
        v49 = v194;
        if (v168 != v18)
        {
          v50 = *(_QWORD *)(a3 + 56);
          if (v50 == v170)
            goto LABEL_64;
          v51 = *(_QWORD *)(a3 + 56);
          while (*(ZinIrOpLayer **)(v51 + 16) != v194)
          {
            v51 = *(_QWORD *)(v51 + 8);
            if (v51 == v170)
            {
              v51 = a3 + 48;
              break;
            }
          }
          if (v50 == v51)
          {
LABEL_64:
            v52 = 0;
          }
          else
          {
            v52 = 0;
            do
            {
              ++v52;
              v50 = *(_QWORD *)(v50 + 8);
            }
            while (v50 != v51);
          }
          v53 = *(_QWORD *)a4;
          v54 = v159;
          v55 = v160;
          v56 = v161;
          do
          {
            if (!v55)
              goto LABEL_240;
            if ((*((_QWORD *)a4 + 1) - *(_QWORD *)a4) / 24 <= v171)
              std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
            v57 = *(_QWORD *)(v53 + v56 - 32);
            if (0x34F72C234F72C235 * ((*(_QWORD *)(v53 + v56 - 24) - v57) >> 3) <= v52)
              std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
            v56 -= 24;
            --v55;
            v54 += 40;
          }
          while (!*(_BYTE *)(v57 + 232 * v52 + 224));
          if ((v55 & 0x8000000000000000) != 0)
LABEL_240:
            ZinAssertImpl("Spatial Splitting Internal Error");
          v58 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(*a6 - v54), &v194);
          if (!v58)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v59 = *(_QWORD *)(a3 + 56);
          if (v59 == v170)
            goto LABEL_81;
          v60 = *(_QWORD *)(a3 + 56);
          while (*(ZinIrOpLayer **)(v60 + 16) != v194)
          {
            v60 = *(_QWORD *)(v60 + 8);
            if (v60 == v170)
            {
              v60 = a3 + 48;
              break;
            }
          }
          if (v59 == v60)
          {
LABEL_81:
            v61 = 0;
          }
          else
          {
            v61 = 0;
            do
            {
              ++v61;
              v59 = *(_QWORD *)(v59 + 8);
            }
            while (v59 != v60);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) <= v55)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v62 = (_QWORD *)(*(_QWORD *)a4 + v56);
          v63 = *(v62 - 1);
          if (0x34F72C234F72C235 * ((*v62 - v63) >> 3) <= v61)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v64 = v63 + 232 * v61;
          if (!*(_BYTE *)(v64 + 224))
            std::__throw_bad_optional_access[abi:ne180100]();
          v49 = (ZinIrOpLayer *)v58[3];
          SplitInfo::GetSplitDimensions(a4, &v183.__r_.__value_.__l.__data_);
          v66 = v183.__r_.__value_.__l.__size_;
          v65 = (int *)v183.__r_.__value_.__r.__words[0];
          if (v183.__r_.__value_.__r.__words[0] == v183.__r_.__value_.__l.__size_)
          {
            v70 = 1;
            if (v183.__r_.__value_.__r.__words[0])
              goto LABEL_95;
          }
          else
          {
            while (1)
            {
              v67 = *v65;
              v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
              if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)a4 + 8, &v176)|| v67 != 3)
              {
                v68 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)v64, v67);
                v69 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)v201, v67);
                if (SetValueAtDimension<ZinTensorPosition>(v201, v67, v69 - v68))
                  break;
              }
              if (++v65 == (int *)v66)
              {
                v70 = 1;
                goto LABEL_94;
              }
            }
            v70 = 0;
LABEL_94:
            v65 = (int *)v183.__r_.__value_.__r.__words[0];
            if (v183.__r_.__value_.__r.__words[0])
            {
LABEL_95:
              v183.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
              operator delete(v65);
            }
          }
          if (!v70)
            goto LABEL_236;
        }
        SplitInfo::GetSplitDimensions(a4, &v183.__r_.__value_.__l.__data_);
        ZinMirSpatialSplitUtils::AdjustDimensionsForBroadcast(v201, __p, a8, (uint64_t)&v183, v15);
        if (v183.__r_.__value_.__r.__words[0])
        {
          v183.__r_.__value_.__l.__size_ = v183.__r_.__value_.__r.__words[0];
          operator delete(v183.__r_.__value_.__l.__data_);
        }
        v71 = v194;
        if (*((char *)v194 + 47) >= 0)
          v72 = *((unsigned __int8 *)v194 + 47);
        else
          v72 = *((_QWORD *)v194 + 4);
        std::string::basic_string[abi:ne180100]((uint64_t)&v188, v72 + 1);
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = &v188;
        else
          v73 = (std::string *)v188.__r_.__value_.__r.__words[0];
        if (v72)
        {
          if (*((char *)v71 + 47) >= 0)
            v74 = (char *)v71 + 24;
          else
            v74 = (const void *)*((_QWORD *)v71 + 3);
          memmove(v73, v74, v72);
        }
        *(_WORD *)((char *)&v73->__r_.__value_.__l.__data_ + v72) = 95;
        TiledLayerTensorRegions::Id::ToStringForIr(v162, &v187);
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = &v187;
        else
          v75 = (std::string *)v187.__r_.__value_.__r.__words[0];
        if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
        else
          v76 = v187.__r_.__value_.__l.__size_;
        v77 = std::string::append(&v188, (const std::string::value_type *)v75, v76);
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v173.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v173, "_", 1uLL);
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v176.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v186, "ss_view");
        v81 = std::string::append(&v186, "_xfm", 4uLL);
        v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v200 = v81->__r_.__value_.__r.__words[2];
        v199 = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        if (v200 >= 0)
          v83 = (const std::string::value_type *)&v199;
        else
          v83 = (const std::string::value_type *)v199;
        if (v200 >= 0)
          v84 = HIBYTE(v200);
        else
          v84 = *((_QWORD *)&v199 + 1);
        v85 = std::string::append(&v176, v83, v84);
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v183.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        v87 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v87 + 1;
        std::to_string(&v185, v87);
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = &v185;
        else
          v88 = (std::string *)v185.__r_.__value_.__r.__words[0];
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
        else
          v89 = v185.__r_.__value_.__l.__size_;
        v90 = std::string::append(&v183, (const std::string::value_type *)v88, v89);
        v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v190 = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)v189 = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v183.__r_.__value_.__l.__data_);
        if (SHIBYTE(v200) < 0)
          operator delete((void *)v199);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v176.__r_.__value_.__l.__data_);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v173.__r_.__value_.__l.__data_);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v188.__r_.__value_.__l.__data_);
        ZinObjectNameFactory::ZinObjectNameFactory(&v183, v189);
        v92 = *((_QWORD *)a8 + 2);
        ZinObjectNameFactory::CreateName((uint64_t)&v183, 0, &v176);
        v93 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v49 + 32))(v49, 0, 0);
        v178[0] = *(_OWORD *)v201;
        v178[1] = *(_OWORD *)&v201[16];
        v180 = vdupq_n_s64(1uLL);
        v181 = v180;
        v179 = *(_QWORD *)&v201[32];
        v182 = 1;
        v94 = ZinBuilder::CreateView(v92, (uint64_t)&v176, v93, (__int128 *)__p, (uint64_t)v178);
        if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v176.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 168))
        {
          GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a8);
          if (!*(_BYTE *)(a1 + 168))
            std::__throw_bad_optional_access[abi:ne180100]();
          SpatialSplitTransform = (uint64_t **)ZinSpatialSplitTransform::GetOrCreateSpatialSplitTransform(*GroupId, (_QWORD *)(a1 + 128));
          ZinSpatialSplitTransform::AddViewId(SpatialSplitTransform, *(_QWORD *)(v94 + 8));
        }
        v97 = ZinIrOpLayerGraph::AddNode(a2, (ZinIrOpLayer *)v94, &v195);
        v98 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v49, v94, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v100 = a10[1];
        v99 = (unint64_t)a10[2];
        if ((unint64_t)v100 >= v99)
        {
          v102 = v100 - *a10;
          if ((unint64_t)(v102 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v103 = v99 - (_QWORD)*a10;
          v104 = v103 >> 2;
          if (v103 >> 2 <= (unint64_t)(v102 + 1))
            v104 = v102 + 1;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
            v105 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v105 = v104;
          if (v105)
            v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v158, v105);
          else
            v106 = 0;
          v107 = (uint64_t *)&v106[8 * v102];
          *v107 = v94;
          v101 = v107 + 1;
          v109 = (char *)*a10;
          v108 = (char *)a10[1];
          if (v108 == (char *)*a10)
          {
            v111 = a10;
          }
          else
          {
            do
            {
              v110 = *((_QWORD *)v108 - 1);
              v108 -= 8;
              *--v107 = v110;
            }
            while (v108 != v109);
            v111 = a10;
            v108 = (char *)*a10;
          }
          *v111 = v107;
          v111[1] = v101;
          v111[2] = (uint64_t *)&v106[8 * v105];
          if (v108)
            operator delete(v108);
        }
        else
        {
          *v100 = v94;
          v101 = v100 + 1;
        }
        v112 = v97 & v98;
        a10[1] = v101;
        *(_QWORD *)(*a9 + 8 * v15) = v94;
        if (*(_DWORD *)(*((_QWORD *)a8 + 8) + 8) == 7)
        {
          if (*(char *)(v94 + 47) >= 0)
            v113 = *(unsigned __int8 *)(v94 + 47);
          else
            v113 = *(_QWORD *)(v94 + 32);
          std::string::basic_string[abi:ne180100]((uint64_t)&v173, v113 + 1);
          if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v114 = &v173;
          else
            v114 = (std::string *)v173.__r_.__value_.__r.__words[0];
          if (v113)
          {
            if (*(char *)(v94 + 47) >= 0)
              v115 = (const void *)(v94 + 24);
            else
              v115 = *(const void **)(v94 + 24);
            memmove(v114, v115, v113);
          }
          *(_WORD *)((char *)&v114->__r_.__value_.__l.__data_ + v113) = 95;
          v116 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v199, "ss_concat");
          v117 = std::string::append(v116, "_xfm", 4uLL);
          v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          v187.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = &v187;
          else
            v119 = (std::string *)v187.__r_.__value_.__r.__words[0];
          if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
          else
            v120 = v187.__r_.__value_.__l.__size_;
          v121 = std::string::append(&v173, (const std::string::value_type *)v119, v120);
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v176.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          v123 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v123 + 1;
          std::to_string(&v186, v123);
          if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v124 = &v186;
          else
            v124 = (std::string *)v186.__r_.__value_.__r.__words[0];
          if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v125 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
          else
            v125 = v186.__r_.__value_.__l.__size_;
          v126 = std::string::append(&v176, (const std::string::value_type *)v124, v125);
          v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v188.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v186.__r_.__value_.__l.__data_);
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v176.__r_.__value_.__l.__data_);
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
          if (SHIBYTE(v200) < 0)
            operator delete((void *)v199);
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v173.__r_.__value_.__l.__data_);
          v128 = ZinObjectNameFactory::ZinObjectNameFactory(&v176, &v188);
          v129 = *((_QWORD *)a8 + 2);
          v130 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v94 + 32))(v94, 0, 0, v128)+ 88);
          v175 = 0;
          v174[0] = 0;
          v174[168] = 0;
          v131 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v129, (uint64_t)&v176, v94, v130, &v175, 0, (uint64_t)v174, 1.0);
          v132 = v175;
          v175 = 0;
          if (v132)
            std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v175, v132);
          *(_QWORD *)&v199 = v49;
          v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
          v187.__r_.__value_.__l.__size_ = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&v173, &v187);
          v133 = ZinIrOpLayerGraph::AddNode(a2, v131, (ZinIrOpLayer ***)&v173);
          v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
          if (v173.__r_.__value_.__l.__size_)
          {
            v173.__r_.__value_.__r.__words[2] = v173.__r_.__value_.__l.__size_;
            operator delete((void *)v173.__r_.__value_.__l.__size_);
          }
          v134 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v94, (uint64_t)v131, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          v136 = (ZinIrOpLayer **)a10[1];
          v135 = (unint64_t)a10[2];
          if ((unint64_t)v136 >= v135)
          {
            v138 = ((char *)v136 - (char *)*a10) >> 3;
            if ((unint64_t)(v138 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v139 = v135 - (_QWORD)*a10;
            v140 = v139 >> 2;
            if (v139 >> 2 <= (unint64_t)(v138 + 1))
              v140 = v138 + 1;
            if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
              v141 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v141 = v140;
            if (v141)
              v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v158, v141);
            else
              v142 = 0;
            v143 = (ZinIrOpLayer **)&v142[8 * v138];
            *v143 = v131;
            v137 = v143 + 1;
            v145 = (char *)*a10;
            v144 = (char *)a10[1];
            if (v144 == (char *)*a10)
            {
              v147 = (ZinIrOpLayer ***)a10;
            }
            else
            {
              do
              {
                v146 = (ZinIrOpLayer *)*((_QWORD *)v144 - 1);
                v144 -= 8;
                *--v143 = v146;
              }
              while (v144 != v145);
              v147 = (ZinIrOpLayer ***)a10;
              v144 = (char *)*a10;
            }
            *v147 = v143;
            v147[1] = v137;
            v147[2] = (ZinIrOpLayer **)&v142[8 * v141];
            if (v144)
              operator delete(v144);
          }
          else
          {
            *v136 = v131;
            v137 = v136 + 1;
          }
          a10[1] = (uint64_t *)v137;
          *(_QWORD *)(*a9 + 8 * v15) = v131;
          ++*(_QWORD *)(a1 + 104);
          v176.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
          if (v177 < 0)
            operator delete((void *)v176.__r_.__value_.__l.__size_);
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v188.__r_.__value_.__l.__data_);
          if ((v112 & v133 & v134 & 1) == 0)
LABEL_243:
            ZinAssertImpl("Failed to update graph");
        }
        else if ((v112 & 1) == 0)
        {
          goto LABEL_243;
        }
        v183.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
        if (v184 < 0)
          operator delete((void *)v183.__r_.__value_.__l.__size_);
        if (SHIBYTE(v190) < 0)
          operator delete(v189[0]);
        goto LABEL_232;
      }
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v164, &v194))ZinAssertImpl("Spatial Splitting Internal Error");
      v34 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v164, &v194);
      if (!v34)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v35 = (ZinIrOpLayer *)v34[3];
    }
    else
    {
      v35 = v194;
    }
    *(_QWORD *)(*a9 + 8 * v15) = v35;
LABEL_232:
    ++v15;
    v14 = *((_QWORD *)a8 + 11);
    if (v15 >= (*((_QWORD *)a8 + 12) - v14) >> 3)
      goto LABEL_233;
  }
  v149 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v149)
    ZinMirSpatialSplitter::DetermineInputLayersForCurrentSplitLayer(v149, v150, v151, v152, v153, v154, v155, v156);
LABEL_236:
  v148 = 3;
LABEL_237:
  v195 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  __p[0] = v198;
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v148;
}

void sub_206F3CF94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  *(_QWORD *)(v1 - 232) = &unk_24C02BB18;
  v3 = *(void **)(v1 - 224);
  if (v3)
  {
    *(_QWORD *)(v1 - 216) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(v1 - 144) = v1 - 200;
  std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::DetermineOutputLayersForCurrentSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD *a4, unint64_t a5, unint64_t a6, _QWORD *a7, uint64_t a8, ZinIrOpLayer *a9, ZinMirSpatialSplitUtils **a10, ZinIrOpLayer ***a11)
{
  ZinIrOpLayer *v17;
  uint64_t v18;
  uint64_t *v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t i;
  ZinIrOpLayer *v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  __n128 v33;
  int v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  char *v42;
  int64x2_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  std::string *v65;
  const void *v66;
  std::string *v67;
  std::string::size_type size;
  std::string *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  _QWORD *v74;
  ZinIrOpLayer *v75;
  unint64_t *v76;
  unint64_t v77;
  ZinIrOpLayer *v78;
  size_t v79;
  std::string *v80;
  const void *v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  ZinIrTensor *v89;
  int v90;
  ZinIrTensor *v91;
  int v92;
  _BOOL4 v93;
  int v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  ZinIrOpLayer **v100;
  ZinIrOpLayer **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  ZinIrOpLayer **v107;
  char *v108;
  char *v109;
  char *v110;
  ZinIrOpLayer *v111;
  ZinIrOpLayer ***v112;
  const ZinIrOpLayer *v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  ZinMirSpatialSplitUtils *v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  __int128 *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  void **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BOOL4 v130;
  _BOOL8 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  _QWORD *v141;
  ZinIrTensor *v142;
  ZinIrTensor *RootTensor;
  ZinIrTensor **v144;
  ZinIrTensor **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  size_t v157;
  std::string *v158;
  const void *v159;
  std::string *v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  std::string::size_type v164;
  std::string *v165;
  __int128 v166;
  unint64_t v167;
  std::string *v168;
  std::string::size_type v169;
  std::string *v170;
  __int128 v171;
  __n128 v172;
  uint64_t v173;
  ZinMirSpatialSplitUtils *v174;
  int v175;
  ZinIrOpLayer *v176;
  _QWORD *v177;
  _BOOL4 v178;
  unint64_t v179;
  ZinIrOpLayer **v180;
  ZinIrOpLayer **v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  ZinIrOpLayer **v187;
  char *v188;
  char *v189;
  char *v190;
  ZinIrOpLayer *v191;
  ZinIrTensor **v192;
  ZinMirSpatialSplitUtils *v193;
  size_t v194;
  std::string *v195;
  const void *v196;
  std::string *v197;
  std::string *v198;
  __int128 v199;
  std::string *v200;
  std::string::size_type v201;
  std::string *v202;
  __int128 v203;
  unint64_t v204;
  std::string *v205;
  std::string::size_type v206;
  std::string *v207;
  __int128 v208;
  __n128 v209;
  uint64_t v210;
  ZinMirSpatialSplitUtils *v211;
  int v212;
  ZinIrOpLayer *v213;
  _QWORD *v214;
  _BOOL4 v215;
  unint64_t v216;
  ZinIrOpLayer **v217;
  ZinIrOpLayer **v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  ZinIrOpLayer **v224;
  char *v225;
  char *v226;
  char *v227;
  ZinIrOpLayer *v228;
  uint64_t v230;
  ZinMirSpatialSplitUtils *v232;
  ZinIrOpLayer ***v234;
  ZinMirSpatialSplitUtils **v235;
  _BYTE v236[172];
  _QWORD *v237;
  _BYTE v238[172];
  _QWORD *v239;
  std::string v240;
  __int128 v241;
  int64x2_t v242;
  uint64_t v243;
  _BYTE v244[32];
  uint64_t v245;
  void *v246;
  void *v247;
  void *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  _QWORD *v251;
  uint64_t v252;
  ZinIrOpLayer *v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  int64x2_t v257;
  int64x2_t v258;
  uint64_t v259;
  char v260;
  std::string v261;
  std::string v262;
  std::string v263;
  std::string v264;
  uint64_t v265;
  int v266;
  uint64_t v267;

  v17 = a9;
  v267 = *MEMORY[0x24BDAC8D0];
  v264.__r_.__value_.__r.__words[0] = (std::string::size_type)a9;
  *(_QWORD *)&v254 = &v264;
  *((_QWORD *)&v254 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v246, &v254);
  v234 = a11;
  v235 = a10;
  if (a5 % a4[13])
  {
    *(_QWORD *)&v254 = v17;
    if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4 + 8, &v254))
    {
      v230 = *((_QWORD *)a9 + 2);
      v232 = *v235;
      v253 = a9;
      v18 = 40 * a5;
      v19 = (uint64_t *)(*a4 + 24 * a5 - 24);
      v20 = "Spatial Splitting Internal Error";
      v21 = a5;
      do
      {
        if ((--v21 & 0x8000000000000000) != 0)
          goto LABEL_331;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v21)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v22 = *v19;
        if (0x34F72C234F72C235 * ((v19[1] - *v19) >> 3) <= a6)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v18 -= 40;
        v19 -= 3;
        v23 = v22 + 232 * a6;
      }
      while (!*(_BYTE *)(v23 + 224));
      v24 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((_QWORD *)(*a7 + v18), &v253);
      if (!v24)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v25 = v24[3];
      if (*(_DWORD *)(*(_QWORD *)(v25 + 64) + 8) == 36 && *(_OWORD *)(v23 + 184) != 0)
        v25 = **(_QWORD **)(v25 + 88);
      for (i = *(_QWORD *)(v25 + 112); ; i += 8)
      {
        if (i == *(_QWORD *)(v25 + 120))
        {
          v27 = 0;
          goto LABEL_35;
        }
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) == 7)
          break;
      }
      std::string::basic_string[abi:ne180100]<0>(v244, "copy_for_cb");
      v28 = *(char *)(v25 + 47);
      if (v28 >= 0)
        v29 = (const std::string::value_type *)(v25 + 24);
      else
        v29 = *(const std::string::value_type **)(v25 + 24);
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(v25 + 47);
      else
        v30 = *(_QWORD *)(v25 + 32);
      v31 = std::string::insert((std::string *)v244, 0, v29, v30);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *(_QWORD *)&v255 = *((_QWORD *)&v31->__r_.__value_.__l + 2);
      v254 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = ZinObjectNameFactory::ZinObjectNameFactory(&v264, &v254);
      if (SBYTE7(v255) < 0)
        operator delete((void *)v254);
      if ((v244[23] & 0x80000000) != 0)
        operator delete(*(void **)v244);
      v34 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v25 + 32))(v25, 0, 0, v33)+ 88);
      v263.__r_.__value_.__r.__words[0] = 0;
      LOBYTE(v254) = 0;
      v260 = 0;
      v27 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v230, (uint64_t)&v264, v25, v34, &v263, 0, (uint64_t)&v254, 1.0);
      v35 = (_QWORD *)v263.__r_.__value_.__r.__words[0];
      v263.__r_.__value_.__r.__words[0] = 0;
      if (v35)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v263, v35);
      v262.__r_.__value_.__r.__words[0] = v25;
      v261.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
      v261.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v244, &v261);
      ZinIrOpLayerGraph::AddNode(a2, v27, (ZinIrOpLayer ***)v244);
      *(_QWORD *)v244 = &unk_24C02BB18;
      if (*(_QWORD *)&v244[8])
      {
        *(_QWORD *)&v244[16] = *(_QWORD *)&v244[8];
        operator delete(*(void **)&v244[8]);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v25, (uint64_t)v27, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v264.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
      if (SHIBYTE(v265) < 0)
        operator delete((void *)v264.__r_.__value_.__l.__size_);
LABEL_35:
      if (v27)
        v25 = (uint64_t)v27;
      v36 = *(_DWORD *)(*((_QWORD *)v232 + 8) + 8);
      if (v36 == 36 || v36 != *(_DWORD *)(*((_QWORD *)v253 + 8) + 8))
      {
        v20 = "The trimming view of the current tile happens in a different section";
LABEL_331:
        ZinAssertImpl(v20);
      }
      v37 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)v232 + 32))(v232, 0, 0);
      v38 = *(_OWORD *)(v37 + 64);
      v254 = *(_OWORD *)(v37 + 48);
      v255 = v38;
      v256 = *(_QWORD *)(v37 + 80);
      v39 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0, 0) + 64);
      if (*(_DWORD *)(*((_QWORD *)v253 + 8) + 8) == 7)
      {
        for (j = *(_QWORD *)(v23 + 128); j != *(_QWORD *)(v23 + 136); j += 80)
        {
          v41 = *(_QWORD *)(j + 56);
          if (v41 + *(_QWORD *)(j + 16) < v39)
            v39 = v41 + *(_QWORD *)(j + 16);
        }
      }
      v42 = (char *)operator new(0xA0uLL);
      *(_QWORD *)&v244[8] = v42 + 160;
      *(_QWORD *)&v244[16] = v42 + 160;
      *(_OWORD *)v42 = 0u;
      *((_OWORD *)v42 + 1) = 0u;
      *((_QWORD *)v42 + 4) = 0;
      v43 = vdupq_n_s64(1uLL);
      *(int64x2_t *)(v42 + 40) = v43;
      *(int64x2_t *)(v42 + 56) = v43;
      *((_QWORD *)v42 + 9) = 1;
      *((_QWORD *)v42 + 10) = 0;
      *((_QWORD *)v42 + 11) = 0;
      *((_QWORD *)v42 + 12) = v39;
      *((_QWORD *)v42 + 13) = 0;
      *((_QWORD *)v42 + 14) = 0;
      *(int64x2_t *)(v42 + 120) = v43;
      *(int64x2_t *)(v42 + 136) = v43;
      *((_QWORD *)v42 + 19) = 1;
      *(_QWORD *)v244 = v42;
      v44 = operator new();
      ZinIrConcatInfo::ZinIrConcatInfo(v44, 2, v244);
      v252 = v44;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= a5)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v45 = (_QWORD *)(*a4 + 24 * a5);
      if (0x34F72C234F72C235 * ((uint64_t)(v45[1] - *v45) >> 3) <= a6)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v46 = *v45 + 232 * a6;
      if (!*(_BYTE *)(v46 + 224))
        ZinAssertImpl("Spatial Splitting Internal Error");
      v47 = *(_QWORD *)(v46 + 128);
      v48 = *(_QWORD *)(v46 + 136) - v47;
      if (v48)
      {
        v49 = v48 / 80;
        v50 = (_QWORD *)(v46 + 200);
        v51 = *(_QWORD *)(v46 + 208);
        if (v49 <= 1)
          v52 = 1;
        else
          v52 = v49;
        if (v51 <= v52 - 1)
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        v53 = 0;
        v54 = (_QWORD *)(v47 + 56);
        v55 = 0x7FFFFFFFFFFFFFFFLL;
        v56 = -1;
        do
        {
          v57 = *(v54 - 5);
          v58 = (uint64_t)(*(_QWORD *)(*v50 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53 << 63) >> 63;
          v59 = (v58 & *v54) + v57;
          if (v59 > v56)
            v56 = (v58 & *v54) + v57;
          if (v55 >= v59)
            v55 = (v58 & *v54) + v57;
          ++v53;
          v54 += 10;
        }
        while (v52 != v53);
      }
      else
      {
        v56 = -1;
        v55 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v60 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0, 0);
      *(_QWORD *)&v255 = v55 - v56 + *(_QWORD *)(v60 + 64) + v255;
      v61 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v253 + 32))(v253, 0, 0)+ 88);
      v62 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v253 + 32))(v253, 0, 0);
      v63 = v62;
      if (*(char *)(v62 + 47) >= 0)
        v64 = *(unsigned __int8 *)(v62 + 47);
      else
        v64 = *(_QWORD *)(v62 + 32);
      v65 = &v263;
      std::string::basic_string[abi:ne180100]((uint64_t)&v263, v64 + 4);
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v65 = (std::string *)v263.__r_.__value_.__r.__words[0];
      if (v64)
      {
        if (*(char *)(v63 + 47) >= 0)
          v66 = (const void *)(v63 + 24);
        else
          v66 = *(const void **)(v63 + 24);
        memmove(v65, v66, v64);
      }
      strcpy((char *)v65 + v64, "_cb_");
      std::to_string(&v262, a5);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = &v262;
      else
        v67 = (std::string *)v262.__r_.__value_.__r.__words[0];
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v262.__r_.__value_.__r.__words[2]);
      else
        size = v262.__r_.__value_.__l.__size_;
      v69 = std::string::append(&v263, (const std::string::value_type *)v67, size);
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v250 = 0;
      v251 = 0;
      v249 = 0;
      v265 = 0;
      *(_OWORD *)&v264.__r_.__value_.__r.__words[1] = 0uLL;
      LODWORD(v264.__r_.__value_.__l.__data_) = 0;
      v266 = 0;
      ZinIrTensor::CreateTensor(v230, v61, &v254, (__int128 *)&v261, &v251, &v249, (unsigned int *)&v264, (uint64_t *)&v240);
      v71 = v250;
      if (v250)
      {
        p_shared_owners = (unint64_t *)&v250->__shared_owners_;
        do
          v73 = __ldaxr(p_shared_owners);
        while (__stlxr(v73 - 1, p_shared_owners));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v251;
      v251 = 0;
      if (v74)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v251, v74);
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v262.__r_.__value_.__l.__data_);
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v263.__r_.__value_.__l.__data_);
      v75 = (ZinIrOpLayer *)operator new();
      *(_OWORD *)&v262.__r_.__value_.__l.__data_ = *(_OWORD *)&v240.__r_.__value_.__l.__data_;
      if (v240.__r_.__value_.__l.__size_)
      {
        v76 = (unint64_t *)(v240.__r_.__value_.__l.__size_ + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      v78 = v253;
      if (*((char *)v253 + 47) >= 0)
        v79 = *((unsigned __int8 *)v253 + 47);
      else
        v79 = *((_QWORD *)v253 + 4);
      v80 = &v261;
      std::string::basic_string[abi:ne180100]((uint64_t)&v261, v79 + 4);
      if ((v261.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v80 = (std::string *)v261.__r_.__value_.__r.__words[0];
      if (v79)
      {
        if (*((char *)v78 + 47) >= 0)
          v81 = (char *)v78 + 24;
        else
          v81 = (const void *)*((_QWORD *)v78 + 3);
        memmove(v80, v81, v79);
      }
      strcpy((char *)v80 + v79, "_cb_");
      std::to_string(&v263, a5);
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v263;
      else
        v82 = (std::string *)v263.__r_.__value_.__r.__words[0];
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
      else
        v83 = v263.__r_.__value_.__l.__size_;
      v84 = std::string::append(&v261, (const std::string::value_type *)v82, v83);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v264.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v264.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      ZinConcatLayer::ZinConcatLayer(v75, &v252, &v262, &v264, 0);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v263.__r_.__value_.__l.__data_);
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      v86 = (std::__shared_weak_count *)v262.__r_.__value_.__l.__size_;
      if (v262.__r_.__value_.__l.__size_)
      {
        v87 = (unint64_t *)(v262.__r_.__value_.__l.__size_ + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 32))(v25, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v89, (uint64_t)&v264);
      v90 = v265;
      if (v264.__r_.__value_.__r.__words[0])
      {
        v264.__r_.__value_.__l.__size_ = v264.__r_.__value_.__r.__words[0];
        operator delete(v264.__r_.__value_.__l.__data_);
      }
      v91 = (ZinIrTensor *)(*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)v232 + 32))(v232, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(v91, (uint64_t)&v264);
      v92 = v265;
      if (v264.__r_.__value_.__r.__words[0])
      {
        v264.__r_.__value_.__l.__size_ = v264.__r_.__value_.__r.__words[0];
        operator delete(v264.__r_.__value_.__l.__data_);
      }
      if (v90 != v92)
        ZinAssertImpl("both concat inputs must have the same layout\n");
      ZinIrTensor::UpdateTensorTmemLayout(v240.__r_.__value_.__l.__data_, v90);
      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
      v261.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
      v261.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v264, &v261);
      v93 = ZinIrOpLayerGraph::AddNode(a2, v75, (ZinIrOpLayer ***)&v264);
      v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v264.__r_.__value_.__l.__size_)
      {
        v264.__r_.__value_.__r.__words[2] = v264.__r_.__value_.__l.__size_;
        operator delete((void *)v264.__r_.__value_.__l.__size_);
      }
      v94 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, v25, (uint64_t)v75, 0, 0, 0);
      if ((v93 & v94 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v232, (uint64_t)v75, 0, 1uLL, 0) & 1) == 0)ZinAssertImpl("Failed to update graph");
      v95 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
      if (v240.__r_.__value_.__l.__size_)
      {
        v96 = (unint64_t *)(v240.__r_.__value_.__l.__size_ + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = v252;
      v252 = 0;
      if (v98)
        (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
      if (*(_QWORD *)v244)
      {
        *(_QWORD *)&v244[8] = *(_QWORD *)v244;
        operator delete(*(void **)v244);
      }
      *v235 = v75;
      v99 = (unint64_t)v234[2];
      v100 = v234[1];
      if ((unint64_t)v100 >= v99)
      {
        v102 = v100 - *v234;
        if ((unint64_t)(v102 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v103 = v99 - (_QWORD)*v234;
        v104 = v103 >> 2;
        if (v103 >> 2 <= (unint64_t)(v102 + 1))
          v104 = v102 + 1;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
          v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v234 + 2), v105);
        else
          v106 = 0;
        v107 = (ZinIrOpLayer **)&v106[8 * v102];
        v108 = &v106[8 * v105];
        *v107 = v75;
        v101 = v107 + 1;
        v110 = (char *)*v234;
        v109 = (char *)v234[1];
        if (v109 == (char *)*v234)
        {
          v112 = v234;
        }
        else
        {
          do
          {
            v111 = (ZinIrOpLayer *)*((_QWORD *)v109 - 1);
            v109 -= 8;
            *--v107 = v111;
          }
          while (v109 != v110);
          v112 = v234;
          v109 = (char *)*v234;
        }
        *v112 = v107;
        v112[1] = v101;
        v112[2] = (ZinIrOpLayer **)v108;
        if (v109)
          operator delete(v109);
      }
      else
      {
        *v100 = v75;
        v101 = v100 + 1;
      }
      v234[1] = v101;
    }
  }
  else if (*(_QWORD *)(a8 + 16))
  {
    ZinAssertImpl("Spatial Split branch mismatch");
  }
  if (!std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>(a3 + 24, &a9))goto LABEL_324;
  if (*(_OWORD *)(a8 + 184) == 0)
  {
    if (!ZinMirSpatialSplitUtils::IsDeConv(*v235, v113)
      || (*(_QWORD *)((*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)*v235 + 32))(*v235, 0, 0)+ 64) & 0x8000000000000001) != 1)
    {
      goto LABEL_324;
    }
    v142 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a9 + 32))(a9, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v142);
    ZinIrTensor::GetTensorFamily(RootTensor, (uint64_t)v244);
    v145 = *(ZinIrTensor ***)&v244[8];
    v144 = *(ZinIrTensor ***)v244;
    if (*(_QWORD *)v244 != *(_QWORD *)&v244[8])
    {
      while (!ZinIrTensor::IsLiveOut(*v144))
      {
        if (++v144 == v145)
          goto LABEL_320;
      }
      v193 = *v235;
      if (*((char *)*v235 + 47) >= 0)
        v194 = *((unsigned __int8 *)*v235 + 47);
      else
        v194 = *((_QWORD *)*v235 + 4);
      v195 = &v264;
      std::string::basic_string[abi:ne180100]((uint64_t)&v264, v194 + 1);
      if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v195 = (std::string *)v264.__r_.__value_.__r.__words[0];
      if (v194)
      {
        if (*((char *)v193 + 47) >= 0)
          v196 = (char *)v193 + 24;
        else
          v196 = (const void *)*((_QWORD *)v193 + 3);
        memmove(v195, v196, v194);
      }
      *(_WORD *)((char *)&v195->__r_.__value_.__l.__data_ + v194) = 95;
      v197 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v262, "ss_copy");
      v198 = std::string::append(v197, "_xfm", 4uLL);
      v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
      v263.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v199;
      v198->__r_.__value_.__l.__size_ = 0;
      v198->__r_.__value_.__r.__words[2] = 0;
      v198->__r_.__value_.__r.__words[0] = 0;
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v200 = &v263;
      else
        v200 = (std::string *)v263.__r_.__value_.__r.__words[0];
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v201 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
      else
        v201 = v263.__r_.__value_.__l.__size_;
      v202 = std::string::append(&v264, (const std::string::value_type *)v200, v201);
      v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
      *(_QWORD *)&v255 = *((_QWORD *)&v202->__r_.__value_.__l + 2);
      v254 = v203;
      v202->__r_.__value_.__l.__size_ = 0;
      v202->__r_.__value_.__r.__words[2] = 0;
      v202->__r_.__value_.__r.__words[0] = 0;
      v204 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v204 + 1;
      std::to_string(&v240, v204);
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v205 = &v240;
      else
        v205 = (std::string *)v240.__r_.__value_.__r.__words[0];
      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v206 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
      else
        v206 = v240.__r_.__value_.__l.__size_;
      v207 = std::string::append((std::string *)&v254, (const std::string::value_type *)v205, v206);
      v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v208;
      v207->__r_.__value_.__l.__size_ = 0;
      v207->__r_.__value_.__r.__words[2] = 0;
      v207->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if (SBYTE7(v255) < 0)
        operator delete((void *)v254);
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v263.__r_.__value_.__l.__data_);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v262.__r_.__value_.__l.__data_);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
      v209 = ZinObjectNameFactory::ZinObjectNameFactory(&v254, &v261);
      v210 = *((_QWORD *)a9 + 2);
      v211 = *v235;
      v212 = *(_DWORD *)((*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD, __n128))(*(_QWORD *)*v235 + 32))(*v235, 0, 0, v209)+ 88);
      v237 = 0;
      v236[0] = 0;
      v236[168] = 0;
      v213 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v210, (uint64_t)&v254, (uint64_t)v211, v212, &v237, 0, (uint64_t)v236, 1.0);
      v214 = v237;
      v237 = 0;
      if (v214)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v237, v214);
      v262.__r_.__value_.__r.__words[0] = (std::string::size_type)*v235;
      v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
      v263.__r_.__value_.__l.__size_ = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v264, &v263);
      v215 = ZinIrOpLayerGraph::AddNode(a2, v213, (ZinIrOpLayer ***)&v264);
      v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
      if (v264.__r_.__value_.__l.__size_)
      {
        v264.__r_.__value_.__r.__words[2] = v264.__r_.__value_.__l.__size_;
        operator delete((void *)v264.__r_.__value_.__l.__size_);
      }
      if ((v215 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)*v235, (uint64_t)v213, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)ZinAssertImpl("Spatial Splitting Internal Error");
      v216 = (unint64_t)v234[2];
      v217 = v234[1];
      if ((unint64_t)v217 >= v216)
      {
        v219 = v217 - *v234;
        if ((unint64_t)(v219 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v220 = v216 - (_QWORD)*v234;
        v221 = v220 >> 2;
        if (v220 >> 2 <= (unint64_t)(v219 + 1))
          v221 = v219 + 1;
        if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8)
          v222 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v222 = v221;
        if (v222)
          v223 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v234 + 2), v222);
        else
          v223 = 0;
        v224 = (ZinIrOpLayer **)&v223[8 * v219];
        v225 = &v223[8 * v222];
        *v224 = v213;
        v218 = v224 + 1;
        v227 = (char *)*v234;
        v226 = (char *)v234[1];
        if (v226 != (char *)*v234)
        {
          do
          {
            v228 = (ZinIrOpLayer *)*((_QWORD *)v226 - 1);
            v226 -= 8;
            *--v224 = v228;
          }
          while (v226 != v227);
          v226 = (char *)*v234;
        }
        *v234 = v224;
        v234[1] = v218;
        v234[2] = (ZinIrOpLayer **)v225;
        if (v226)
          operator delete(v226);
      }
      else
      {
        *v217 = v213;
        v218 = v217 + 1;
      }
      v234[1] = v218;
      *v235 = v213;
      ++*(_QWORD *)(a1 + 104);
      *(_QWORD *)&v254 = off_24C01FBB0;
      if (SHIBYTE(v255) < 0)
        operator delete(*((void **)&v254 + 1));
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
LABEL_320:
      v144 = *(ZinIrTensor ***)v244;
    }
    if (!v144)
      goto LABEL_324;
    *(_QWORD *)&v244[8] = v144;
    v192 = v144;
    goto LABEL_323;
  }
  v114 = *(_OWORD *)(a8 + 56);
  *(_OWORD *)v244 = *(_OWORD *)(a8 + 40);
  *(_OWORD *)&v244[16] = v114;
  v245 = *(_QWORD *)(a8 + 72);
  *(_QWORD *)&v254 = a9;
  if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4 + 8, &v254))
  {
    v115 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)*v235 + 32))(*v235, 0, 0);
    v116 = *(_OWORD *)(v115 + 64);
    *(_OWORD *)v244 = *(_OWORD *)(v115 + 48);
    *(_OWORD *)&v244[16] = v116;
    v245 = *(_QWORD *)(v115 + 80);
  }
  v117 = *v235;
  v242 = *(int64x2_t *)&v244[16];
  v241 = *(_OWORD *)v244;
  v243 = v245;
  v242 = vsubq_s64(*(int64x2_t *)&v244[16], *(int64x2_t *)(a8 + 184));
  v118 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)v117 + 32))(v117, 0, 0);
  v119 = v118;
  if (*(char *)(v118 + 47) >= 0)
    v120 = *(unsigned __int8 *)(v118 + 47);
  else
    v120 = *(_QWORD *)(v118 + 32);
  v121 = &v254;
  std::string::basic_string[abi:ne180100]((uint64_t)&v254, v120 + 8);
  if (SBYTE7(v255) < 0)
    v121 = (__int128 *)v254;
  if (v120)
  {
    v124 = *(char **)(v119 + 24);
    v123 = (char *)(v119 + 24);
    v122 = v124;
    if (v123[23] >= 0)
      v125 = v123;
    else
      v125 = v122;
    memmove(v121, v125, v120);
  }
  strcpy((char *)v121 + v120, "_trimmed");
  ZinObjectNameFactory::ZinObjectNameFactory(&v264, &v254);
  v126 = (void **)v234;
  if (SBYTE7(v255) < 0)
    operator delete((void *)v254);
  v127 = *((_QWORD *)v117 + 2);
  ZinObjectNameFactory::CreateName((uint64_t)&v264, 0, &v261);
  v128 = (*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD))(*(_QWORD *)v117 + 32))(v117, 0, 0);
  v256 = 0;
  v254 = 0u;
  v255 = 0u;
  v257 = vdupq_n_s64(1uLL);
  v258 = v257;
  v259 = 1;
  v129 = ZinBuilder::CreateView(v127, (uint64_t)&v261, v128, &v241, (uint64_t)&v254);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v261.__r_.__value_.__l.__data_);
  v262.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
  v263.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v261, &v263);
  v130 = ZinIrOpLayerGraph::AddNode(a2, (ZinIrOpLayer *)v129, (ZinIrOpLayer ***)&v261);
  v261.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (v261.__r_.__value_.__l.__size_)
  {
    v261.__r_.__value_.__r.__words[2] = v261.__r_.__value_.__l.__size_;
    operator delete((void *)v261.__r_.__value_.__l.__size_);
  }
  if ((v130 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v117, v129, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
  {
    v131 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v131)
      ZinMirSpatialSplitter::DetermineOutputLayersForCurrentSplitLayer(v131, v132, v133, v134, v135, v136, v137, v138);
    v129 = 0;
  }
  v264.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01FBB0;
  if (SHIBYTE(v265) < 0)
  {
    operator delete((void *)v264.__r_.__value_.__l.__size_);
    if (v129)
      goto LABEL_181;
LABEL_190:
    v146 = 3;
    goto LABEL_325;
  }
  if (!v129)
    goto LABEL_190;
LABEL_181:
  v139 = (unint64_t)v234[2];
  v140 = (uint64_t *)v234[1];
  if ((unint64_t)v140 >= v139)
  {
    v147 = ((char *)v140 - (char *)*v234) >> 3;
    if ((unint64_t)(v147 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v148 = v139 - (_QWORD)*v234;
    v149 = v148 >> 2;
    if (v148 >> 2 <= (unint64_t)(v147 + 1))
      v149 = v147 + 1;
    if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
      v150 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v150 = v149;
    if (v150)
    {
      v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v234 + 2), v150);
      v126 = (void **)v234;
    }
    else
    {
      v151 = 0;
    }
    v152 = (uint64_t *)&v151[8 * v147];
    v153 = &v151[8 * v150];
    *v152 = v129;
    v141 = v152 + 1;
    v155 = (char *)*v126;
    v154 = (char *)v126[1];
    if (v154 != *v126)
    {
      do
      {
        v156 = *((_QWORD *)v154 - 1);
        v154 -= 8;
        *--v152 = v156;
      }
      while (v154 != v155);
      v154 = (char *)*v126;
    }
    *v126 = v152;
    v126[1] = v141;
    v126[2] = v153;
    if (v154)
      operator delete(v154);
  }
  else
  {
    *v140 = v129;
    v141 = v140 + 1;
  }
  v126[1] = v141;
  *v235 = (ZinMirSpatialSplitUtils *)v129;
  if (*(char *)(v129 + 47) >= 0)
    v157 = *(unsigned __int8 *)(v129 + 47);
  else
    v157 = *(_QWORD *)(v129 + 32);
  v158 = &v264;
  std::string::basic_string[abi:ne180100]((uint64_t)&v264, v157 + 1);
  if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v158 = (std::string *)v264.__r_.__value_.__r.__words[0];
  if (v157)
  {
    if (*(char *)(v129 + 47) >= 0)
      v159 = (const void *)(v129 + 24);
    else
      v159 = *(const void **)(v129 + 24);
    memmove(v158, v159, v157);
  }
  *(_WORD *)((char *)&v158->__r_.__value_.__l.__data_ + v157) = 95;
  v160 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v262, "ss_copy");
  v161 = std::string::append(v160, "_xfm", 4uLL);
  v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v163 = &v263;
  else
    v163 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v164 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v164 = v263.__r_.__value_.__l.__size_;
  v165 = std::string::append(&v264, (const std::string::value_type *)v163, v164);
  v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  *(_QWORD *)&v255 = *((_QWORD *)&v165->__r_.__value_.__l + 2);
  v254 = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  v167 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v167 + 1;
  std::to_string(&v240, v167);
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v168 = &v240;
  else
    v168 = (std::string *)v240.__r_.__value_.__r.__words[0];
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v169 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  else
    v169 = v240.__r_.__value_.__l.__size_;
  v170 = std::string::append((std::string *)&v254, (const std::string::value_type *)v168, v169);
  v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
  v261.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v171;
  v170->__r_.__value_.__l.__size_ = 0;
  v170->__r_.__value_.__r.__words[2] = 0;
  v170->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SBYTE7(v255) < 0)
    operator delete((void *)v254);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v264.__r_.__value_.__l.__data_);
  v172 = ZinObjectNameFactory::ZinObjectNameFactory(&v254, &v261);
  v173 = *((_QWORD *)a9 + 2);
  v174 = *v235;
  v175 = *(_DWORD *)((*(uint64_t (**)(ZinMirSpatialSplitUtils *, _QWORD, _QWORD, __n128))(*(_QWORD *)*v235
                                                                                                  + 32))(*v235, 0, 0, v172)+ 88);
  v239 = 0;
  v238[0] = 0;
  v238[168] = 0;
  v176 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v173, (uint64_t)&v254, (uint64_t)v174, v175, &v239, 0, (uint64_t)v238, 1.0);
  v177 = v239;
  v239 = 0;
  if (v177)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v239, v177);
  v262.__r_.__value_.__r.__words[0] = (std::string::size_type)*v235;
  v263.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
  v263.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v264, &v263);
  v178 = ZinIrOpLayerGraph::AddNode(a2, v176, (ZinIrOpLayer ***)&v264);
  v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C02BB18;
  if (v264.__r_.__value_.__l.__size_)
  {
    v264.__r_.__value_.__r.__words[2] = v264.__r_.__value_.__l.__size_;
    operator delete((void *)v264.__r_.__value_.__l.__size_);
  }
  if (!v178
    || (ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)*v235, (uint64_t)v176, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0) & 1) == 0)
  {
    ZinAssertImpl("Spatial Splitting Internal Error");
  }
  v180 = v234[1];
  v179 = (unint64_t)v234[2];
  if ((unint64_t)v180 >= v179)
  {
    v182 = v180 - *v234;
    if ((unint64_t)(v182 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v183 = v179 - (_QWORD)*v234;
    v184 = v183 >> 2;
    if (v183 >> 2 <= (unint64_t)(v182 + 1))
      v184 = v182 + 1;
    if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
      v185 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v185 = v184;
    if (v185)
      v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v234 + 2), v185);
    else
      v186 = 0;
    v187 = (ZinIrOpLayer **)&v186[8 * v182];
    v188 = &v186[8 * v185];
    *v187 = v176;
    v181 = v187 + 1;
    v190 = (char *)*v234;
    v189 = (char *)v234[1];
    if (v189 != (char *)*v234)
    {
      do
      {
        v191 = (ZinIrOpLayer *)*((_QWORD *)v189 - 1);
        v189 -= 8;
        *--v187 = v191;
      }
      while (v189 != v190);
      v189 = (char *)*v234;
    }
    *v234 = v187;
    v234[1] = v181;
    v234[2] = (ZinIrOpLayer **)v188;
    if (v189)
      operator delete(v189);
  }
  else
  {
    *v180 = v176;
    v181 = v180 + 1;
  }
  v234[1] = v181;
  *v235 = v176;
  ++*(_QWORD *)(a1 + 104);
  *(_QWORD *)&v254 = off_24C01FBB0;
  if (SHIBYTE(v255) < 0)
    operator delete(*((void **)&v254 + 1));
  if ((SHIBYTE(v261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_324;
  v192 = (ZinIrTensor **)v261.__r_.__value_.__r.__words[0];
LABEL_323:
  operator delete(v192);
LABEL_324:
  v146 = 0;
LABEL_325:
  v246 = &unk_24C02BB18;
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  return v146;
}

void sub_206F3E988(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  *(_QWORD *)(v1 + 112) = off_24C01FBB0;
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete(*(void **)(v1 + 120));
  if (*(char *)(v2 - 217) < 0)
    operator delete(*(void **)(v1 + 288));
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 40) = &unk_24C02BB18;
  v5 = *(void **)(v1 + 48);
  if (v5)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::CreateTilingHelpers(uint64_t a1, uint64_t a2, uint64_t a3, LayerTilingHelper *a4)
{
  return LayerTilingHelper::Create((_QWORD *)(a2 + 72), *(const ZinIrOpLayer **)(a1 + 48), (uint64_t)a4, a4);
}

uint64_t ZinMirSpatialSplitter::InitializeShapeDependentTransforms(uint64_t this)
{
  _OWORD v1[2];
  int v2;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8) + 492))
  {
    memset(v1, 0, sizeof(v1));
    v2 = 1065353216;
    std::optional<std::unordered_map<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>::operator=[abi:ne180100]<std::unordered_map<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,void>(this + 128, (uint64_t *)v1);
    return std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)v1);
  }
  return this;
}

void sub_206F3EEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSpatialSplitter::TransferShapeDependentTransforms(ZinMirSpatialSplitter *this, ZinIrContext *a2)
{
  return ZinSpatialSplitTransform::TransferShapeDependentTransformsToContext((uint64_t)this + 128, (uint64_t)a2);
}

uint64_t ZinMirSpatialSplitter::CreateSplitLayer(uint64_t a1, uint64_t **a2, uint64_t a3, SplitInfo *a4, uint64_t a5, uint64_t *a6, TiledLayerTensorRegions *a7, uint64_t a8, uint64_t a9, ZinIrOpLayer **a10)
{
  ZinIrOpLayer **v15;
  const ZinIrOpLayer **v16;
  SplitPatternHandlerMgr *v17;
  uint64_t Layer;
  uint64_t *GroupId;
  uint64_t SpatialSplitTransform;
  _QWORD v22[10];
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  void *__p[6];
  __int128 v28;
  uint64_t v29;
  char v30;

  v15 = a10;
  __p[0] = &a9;
  v16 = (const ZinIrOpLayer **)(std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,LayerTilingHelper>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(a5, &a9, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 3);
  v17 = *(SplitPatternHandlerMgr **)(a1 + 48);
  SplitInfo::GetSplitDimensions(a4, (char **)__p);
  Layer = LayerTilingHelper::CreateLayer(v16, a2, a6, a7, v17, __p, v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!(_DWORD)Layer && *(_BYTE *)(a1 + 168))
  {
    GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(*v15);
    if (!*(_BYTE *)(a1 + 168))
      std::__throw_bad_optional_access[abi:ne180100]();
    SpatialSplitTransform = ZinSpatialSplitTransform::GetOrCreateSpatialSplitTransform(*GroupId, (_QWORD *)(a1 + 128));
    (*(void (**)(void **__return_ptr))(*(_QWORD *)a9 + 136))(__p);
    if (v30)
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)a9 + 136))(__p);
      v24 = v28;
      v25 = v29;
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a9 + 136))(v22);
      v26 = v23;
      ZinSpatialSplitTransform::SetPaddingInfo(SpatialSplitTransform, &v24);
    }
  }
  return Layer;
}

void sub_206F3F064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirSpatialSplitter::Run(ZinMirSpatialSplitter *this)
{
  ZinIrCompilerParameters *v2;
  uint64_t v3;
  _QWORD *p_p;
  BOOL v5;
  uint64_t v7;
  _DWORD *v8;
  _BOOL4 v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  int v17;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  _BOOL4 v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = *(ZinIrCompilerParameters **)(*((_QWORD *)this + 2) + 8);
  ZinIrCompilerParameters::getSpatialSplitMode(v2, &__p);
  v3 = v30;
  if ((v30 & 0x80u) != 0)
    v3 = v29;
  if (v3 == 8)
  {
    p_p = __p;
    if ((v30 & 0x80u) == 0)
      p_p = &__p;
    v5 = *p_p == 0x64656C6261736964;
    if ((char)v30 < 0)
    {
LABEL_11:
      operator delete(__p);
      if (v5)
        return 0;
      goto LABEL_13;
    }
  }
  else
  {
    v5 = 0;
    if ((char)v30 < 0)
      goto LABEL_11;
  }
  if (v5)
    return 0;
LABEL_13:
  ZinIrCompilerParameters::getSpatialSplitMode(v2, &__p);
  v7 = v30;
  if ((v30 & 0x80u) != 0)
    v7 = v29;
  if (v7 != 4)
  {
    v9 = 0;
    if ((char)v30 < 0)
      goto LABEL_25;
LABEL_21:
    if (!v9)
      goto LABEL_26;
    goto LABEL_22;
  }
  v8 = __p;
  if ((v30 & 0x80u) == 0)
    v8 = &__p;
  v9 = *v8 == 1953719668;
  if (((char)v30 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_25:
  operator delete(__p);
  if (!v9)
  {
LABEL_26:
    ZinIrCompilerParameters::getSpatialSplitMode(v2, &__p);
    v14 = v30;
    if ((v30 & 0x80u) != 0)
      v14 = v29;
    if (v14 == 6)
    {
      v15 = (unsigned __int16 *)__p;
      if ((v30 & 0x80u) == 0)
        v15 = (unsigned __int16 *)&__p;
      v16 = *(_DWORD *)v15;
      v17 = v15[2];
      v19 = v16 == 1869440365 && v17 == 31090;
      if ((char)v30 < 0)
      {
LABEL_46:
        operator delete(__p);
        if (!v19)
        {
LABEL_47:
          ZinIrCompilerParameters::getSpatialSplitMode(v2, &__p);
          v21 = v30;
          if ((v30 & 0x80u) != 0)
            v21 = v29;
          if (v21 == 4)
          {
            v22 = __p;
            if ((v30 & 0x80u) == 0)
              v22 = &__p;
            v23 = *v22 == 1869903201;
            if (((char)v30 & 0x80000000) == 0)
              goto LABEL_58;
          }
          else
          {
            v23 = 0;
            if (((char)v30 & 0x80000000) == 0)
            {
LABEL_58:
              if (v23)
              {
                v20 = 2;
                goto LABEL_60;
              }
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinMirSpatialSplitter::Run(v2);
              return 3;
            }
          }
          operator delete(__p);
          goto LABEL_58;
        }
LABEL_41:
        v20 = 1;
LABEL_60:
        v31 = v20;
        goto LABEL_61;
      }
    }
    else
    {
      v19 = 0;
      if ((char)v30 < 0)
        goto LABEL_46;
    }
    if (!v19)
      goto LABEL_47;
    goto LABEL_41;
  }
LABEL_22:
  __p = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  v34[0] = &off_24C001558;
  v34[1] = &__p;
  v35 = v34;
  v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v34);
  v12 = v35;
  if (v35 == v34)
  {
    v13 = 4;
    v12 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_44;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_44:
  if (v11)
    return 3;
  if ((unint64_t)__p >= 0x801)
    return 0;
  v31 = 0;
LABEL_61:
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  v32[0] = &off_24C0015B0;
  v32[1] = this;
  v32[2] = &v31;
  v33 = v32;
  v25 = ZinIrControlFlowGraph::TraverseForward(v24, (uint64_t)v32);
  v26 = v33;
  if (v33 == v32)
  {
    v27 = 4;
    v26 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_66;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_66:
  if (v25)
    return 3;
  else
    return 0;
}

void sub_206F3F3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void IsLayerSplittable<Subgraph>(ZinIrOpLayer *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, SplitPatternHandlerMgr *a10)
{
  unint64_t v18;
  __int128 *v19;
  char v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t v45;
  unint64_t PreOpsPreScaleIndex;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *__p;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  __int128 v66;
  uint8_t buf[8];
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v18 = (uint64_t)(*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11)) >> 3;
  LOBYTE(v70) = 0;
  std::vector<BOOL>::vector(&v65, v18, (unsigned __int8 *)&v70);
  if (*(_QWORD *)a7)
  {
    operator delete(*(void **)a7);
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  *(_QWORD *)a7 = v65;
  *(_OWORD *)(a7 + 8) = v66;
  v70 = 0x100000000;
  std::set<SpatialDimension>::set[abi:ne180100]((uint64_t)&v65, (unsigned int *)&v70, 2);
  v19 = (__int128 *)&v71;
  v71 = 0;
  v72 = 0;
  v70 = (uint64_t)&v71;
  if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 64) == 1)
  {
    LODWORD(__p) = 0;
    std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)&__p);
  }
  if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 72) == 1)
  {
    LODWORD(__p) = 1;
    std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)&__p);
  }
  if ((a4 & 1) != 0 || (__p = 0, v63 = 0, v64 = 0, (ZinIrOpLayer::IsNoOp(a1, (uint64_t *)&__p) & 1) == 0))
  {
    v21 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 112))(a1);
    v20 = v21;
    if ((a4 & 1) != 0)
    {
      if (v21)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    v20 = 1;
  }
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  if ((v20 & 1) != 0)
    goto LABEL_16;
LABEL_20:
  if (!ZinIrOpLayer::IsANELayer(a1))
    goto LABEL_53;
  if (a10 && SplitPatternHandlerMgr::IsLayerCreated(a10, a1))
  {
    SplitPatternHandlerMgr::GetSupportedSplitDimension((uint64_t)a10, (uint64_t)a1, (uint64_t)&v65);
    v25 = v66;
    *a9 = v65;
    a9[1] = v25;
    v23 = a9 + 1;
    v26 = *((_QWORD *)&v66 + 1);
    a9[2] = *((_QWORD *)&v66 + 1);
    if (v26)
    {
      *(_QWORD *)(v25 + 16) = v23;
      v65 = (uint64_t *)&v66;
      v66 = 0uLL;
      goto LABEL_124;
    }
LABEL_123:
    *a9 = v23;
    goto LABEL_124;
  }
  if (!*((_QWORD *)a1 + 25) || *((_QWORD *)a1 + 24) > 1uLL)
  {
    if (ZinIrOpLayer::IsNELayer(a1))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1))
      {
        *(_DWORD *)buf = 1;
        std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)buf);
      }
      v27 = *((_QWORD *)a1 + 46);
      if (!v27)
        goto LABEL_53;
      v28 = *(_QWORD *)(v27 + 64);
      if (!ZinIrBroadcastInfo::HasDimension(v28, 3)
        && !ZinIrBroadcastInfo::HasDimension(v28, 4)
        && !ZinIrBroadcastInfo::HasDimension(v28, 1))
      {
        goto LABEL_53;
      }
      if ((a6 & 1) == 0)
        goto LABEL_16;
      goto LABEL_51;
    }
    if (!ZinIrOpLayer::IsPELayer(a1))
      ZinAssertImpl("Only NE and PE engine layers are supported for Splitting\n");
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 408))(a1))
    {
      *(_DWORD *)buf = 1;
      std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)buf);
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 640))(a1))
    {
      if ((a6 & 1) != 0)
      {
        **(_QWORD **)a7 |= 1uLL;
      }
      else if (!DetectIncomingConstIn(a1, 0))
      {
        goto LABEL_16;
      }
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 648))(a1))
    {
      if ((a6 & 1) == 0)
      {
        if (!DetectIncomingConstIn(a1, 1uLL))
          goto LABEL_16;
        goto LABEL_53;
      }
      **(_QWORD **)a7 |= 2uLL;
    }
    else if (!a6)
    {
      goto LABEL_53;
    }
    v29 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 656))(a1);
    v30 = *(_QWORD *)a1;
    if (v29)
    {
      v31 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *))(v30 + 696))(a1) + 64);
      if (ZinIrBroadcastInfo::HasDimension(v31, 3)
        || ZinIrBroadcastInfo::HasDimension(v31, 4)
        || ZinIrBroadcastInfo::HasDimension(v31, 1))
      {
LABEL_51:
        v32 = 1;
LABEL_52:
        **(_QWORD **)a7 |= v32;
      }
    }
    else if ((*(unsigned int (**)(ZinIrOpLayer *))(v30 + 664))(a1))
    {
      v57 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 832))(a1);
      if (ZinIrBroadcastInfo::HasDimension(v57, 3)
        || ZinIrBroadcastInfo::HasDimension(v57, 4)
        || ZinIrBroadcastInfo::HasDimension(v57, 1))
      {
        v32 = 2;
        goto LABEL_52;
      }
    }
LABEL_53:
    v33 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 8);
    switch(v33)
    {
      case 'Q':
        v23 = a9 + 1;
        if (*((_QWORD *)a1 + 63))
        {
          v22 = v71;
          *a9 = v70;
          a9[1] = v22;
          goto LABEL_17;
        }
        v34 = v66;
        *a9 = v65;
        a9[1] = v34;
        goto LABEL_55;
      case 'R':
      case 'V':
      case 'W':
      case 'X':
      case '[':
LABEL_76:
        if (a5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v33;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "unsupported: %d", buf, 8u);
        }
        goto LABEL_16;
      case 'S':
        v45 = *(_QWORD *)(*((_QWORD *)a1 + 54) + 64);
        if (*(uint64_t *)(v45 + 32) >= 2)
          goto LABEL_16;
        if (*(uint64_t *)(v45 + 16) >= 2 && !*(_BYTE *)(a2 + 1327))
        {
          *(_DWORD *)buf = 1;
          std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)buf);
        }
        if (ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1) == -1)
          goto LABEL_54;
        if ((a6 & 1) != 0)
        {
          PreOpsPreScaleIndex = ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1);
          *(_QWORD *)(*(_QWORD *)a7 + ((PreOpsPreScaleIndex >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << PreOpsPreScaleIndex;
          goto LABEL_54;
        }
        v60 = ZinPEPoolLayer::GetPreOpsPreScaleIndex(a1);
        if (DetectIncomingConstIn(a1, v60))
          goto LABEL_54;
        goto LABEL_16;
      case 'T':
      case 'Z':
      case '\\':
        goto LABEL_54;
      case 'U':
        v48 = *((_QWORD *)a1 + 54);
        if (!v48)
          goto LABEL_54;
        v49 = *(_QWORD *)(v48 + 136);
        if ((*(_BYTE *)(v49 + 448) & 0x40) != 0 && (a3 & 1) == 0)
          goto LABEL_16;
        if (*(uint64_t *)(v49 + 264) >= 2 && !*(_BYTE *)(a2 + 1327))
        {
          *(_DWORD *)buf = 1;
          std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)buf);
        }
        if (*(uint64_t *)(v49 + 280) >= 2)
          goto LABEL_16;
        if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a1 + 54) + 120))(*((_QWORD *)a1 + 54)))
          goto LABEL_54;
        (*(void (**)(uint8_t *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a1 + 128))(buf, a1);
        v50 = *(_QWORD *)buf;
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (a6)
        {
          if (*((_QWORD *)a1 + 12) != *((_QWORD *)a1 + 11))
          {
            v51 = 0;
            do
            {
              if (v50 == ZinIrOpLayer::GetInputTensor(a1, v51))
                *(_QWORD *)(*(_QWORD *)a7 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
              ++v51;
            }
            while (v51 < (uint64_t)(*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11)) >> 3);
          }
        }
        else
        {
          *(_QWORD *)buf = *(_QWORD *)(v50 + 96);
          if (a8 + 80 != std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a8 + 72, (ZinIrOpLayer **)buf))goto LABEL_16;
        }
LABEL_54:
        v34 = v66;
        *a9 = v65;
        a9[1] = v34;
        v23 = a9 + 1;
LABEL_55:
        v35 = *((_QWORD *)&v66 + 1);
        a9[2] = *((_QWORD *)&v66 + 1);
        if (v35)
        {
          *(_QWORD *)(v34 + 16) = v23;
          v65 = (uint64_t *)&v66;
          v66 = 0uLL;
          goto LABEL_124;
        }
        break;
      case 'Y':
        v47 = *(_QWORD *)(*((_QWORD *)a1 + 54) + 64);
        if (*(uint64_t *)(v47 + 32) >= 2)
          goto LABEL_16;
        if (*(uint64_t *)(v47 + 16) >= 2 && !*(_BYTE *)(a2 + 1327))
        {
          *(_DWORD *)buf = 1;
          std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>((uint64_t)&v65, (unsigned int *)buf);
        }
        goto LABEL_54;
      default:
        switch(v33)
        {
          case '!':
          case '%':
            goto LABEL_16;
          case '"':
            goto LABEL_76;
          case '#':
            ZinMirSpatialSplitUtils::SpatialDimensionsInWhichReshapeCannotBeSplit(a1, (uint64_t **)buf);
            v36 = a9 + 1;
            if (v69)
            {
              v37 = v71;
              *a9 = v70;
              a9[1] = v37;
              v38 = v72;
              a9[2] = v72;
              if (v38)
              {
                v37[2] = v36;
                v70 = (uint64_t)&v71;
                v71 = 0;
                v72 = 0;
                goto LABEL_136;
              }
            }
            else
            {
              v58 = v66;
              *a9 = v65;
              a9[1] = v58;
              v59 = *((_QWORD *)&v66 + 1);
              a9[2] = *((_QWORD *)&v66 + 1);
              if (v59)
              {
                *(_QWORD *)(v58 + 16) = v36;
                v65 = (uint64_t *)&v66;
                v66 = 0uLL;
                goto LABEL_136;
              }
            }
            *a9 = v36;
LABEL_136:
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)buf, v68);
            break;
          case '$':
            v52 = v65;
            v19 = &v66;
            v40 = (uint64_t *)&v66;
            if (v65 == (uint64_t *)&v66)
              goto LABEL_121;
            do
            {
              if (*((_DWORD *)v52 + 7))
                v53 = 4;
              else
                v53 = 3;
              if (ZinViewLayer::IsSplittable((uint64_t)a1, v53))
              {
                v54 = (uint64_t *)v52[1];
                if (v54)
                {
                  do
                  {
                    v55 = v54;
                    v54 = (uint64_t *)*v54;
                  }
                  while (v54);
                }
                else
                {
                  do
                  {
                    v55 = (uint64_t *)v52[2];
                    v44 = *v55 == (_QWORD)v52;
                    v52 = v55;
                  }
                  while (!v44);
                }
              }
              else
              {
                v55 = std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v65, v52);
                operator delete(v52);
              }
              v52 = v55;
            }
            while (v55 != (uint64_t *)&v66);
            goto LABEL_120;
          default:
            if (v33 != 7)
              goto LABEL_76;
            v39 = v65;
            v19 = &v66;
            v40 = (uint64_t *)&v66;
            if (v65 == (uint64_t *)&v66)
              goto LABEL_121;
            do
            {
              if (*((_DWORD *)v39 + 7))
                v41 = 4;
              else
                v41 = 3;
              if (ZinConcatLayer::IsSplittable((uint64_t)a1, v41))
              {
                v42 = (uint64_t *)v39[1];
                if (v42)
                {
                  do
                  {
                    v43 = v42;
                    v42 = (uint64_t *)*v42;
                  }
                  while (v42);
                }
                else
                {
                  do
                  {
                    v43 = (uint64_t *)v39[2];
                    v44 = *v43 == (_QWORD)v39;
                    v39 = v43;
                  }
                  while (!v44);
                }
              }
              else
              {
                v43 = std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v65, v39);
                operator delete(v39);
              }
              v39 = v43;
            }
            while (v43 != (uint64_t *)&v66);
LABEL_120:
            v40 = v65;
LABEL_121:
            *a9 = v40;
            v56 = v66;
            a9[1] = v66;
            v23 = a9 + 1;
            a9[2] = *((_QWORD *)&v56 + 1);
            if (!*((_QWORD *)&v56 + 1))
              goto LABEL_123;
            *(_QWORD *)(v56 + 16) = v23;
            v65 = (uint64_t *)&v66;
            goto LABEL_19;
        }
        goto LABEL_124;
    }
    goto LABEL_123;
  }
LABEL_16:
  v22 = v71;
  *a9 = v70;
  a9[1] = v22;
  v23 = a9 + 1;
LABEL_17:
  v24 = v72;
  a9[2] = v72;
  if (!v24)
    goto LABEL_123;
  v22[2] = v23;
  v70 = (uint64_t)&v71;
LABEL_19:
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
LABEL_124:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v70, v71);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v65, (_QWORD *)v66);
}

void sub_206F3FD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL DetectIncomingConstIn(const ZinPELayer *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;

  v2 = *((_QWORD *)a1 + 11);
  v3 = *((_QWORD *)a1 + 12);
  if (v2 == v3)
    return 0;
  if (a2 >= (v3 - v2) >> 3)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v4 = *(_QWORD *)(v2 + 8 * a2);
  if ((*(_DWORD *)(*(_QWORD *)(v4 + 64) + 8) - 28) >= 3)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v8, *(const void **)(v4 + 88), *(_QWORD *)(v4 + 96), (uint64_t)(*(_QWORD *)(v4 + 96) - *(_QWORD *)(v4 + 88)) >> 3);
    if (v9 == v8 || (unint64_t)(v9 - v8) > 8)
    {
      v6 = 0;
      v5 = 0;
      if (!v8)
        return v5;
    }
    else
    {
      v6 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 64) + 8) - 28) < 3;
    }
    v9 = v8;
    operator delete(v8);
    return v6;
  }
  return 1;
}

uint64_t ZinMirSplitSpatially(_QWORD *a1, uint64_t a2)
{
  int64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::string v16;
  void *v17[2];
  char v18;
  std::string v19;
  void *v20[2];
  unsigned __int8 v21;

  ZinIrCompilerParameters::getSpatialSplitMode(*(ZinIrCompilerParameters **)(a2 + 8), v20);
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v19 = *(std::string *)(a2 + 16);
  std::string::basic_string[abi:ne180100]<0>(v17, "before_spatial_splitting");
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v16, *(const ZinIrCompilerParameters **)(a2 + 8));
  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v17, (ZinIrCompilerParameters *)&v16, (uint64_t)&v19, 256);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v16);
  if (v18 < 0)
    operator delete(v17[0]);
  if ((v21 & 0x80u) == 0)
    v4 = v21;
  else
    v4 = (int64_t)v20[1];
  if (v4 > 14)
  {
    if (v4 == 15)
    {
      if ((v21 & 0x80u) == 0)
        v9 = v20;
      else
        v9 = (void **)v20[0];
      v10 = "generic-dag-exp";
    }
    else
    {
      if (v4 != 18)
        goto LABEL_36;
      if ((v21 & 0x80u) == 0)
        v9 = v20;
      else
        v9 = (void **)v20[0];
      v10 = "generic-dag-memory";
    }
    if (memcmp(v9, v10, v4))
      goto LABEL_36;
  }
  else
  {
    if (v4 == 6)
    {
      if ((v21 & 0x80u) == 0)
        v11 = v20;
      else
        v11 = (void **)v20[0];
      if (!memcmp(v11, "manual", 6uLL))
      {
        v12 = ZinMirSpatialSplitUtils::ExecuteManualMode((uint64_t)a1, a2);
        goto LABEL_38;
      }
      goto LABEL_36;
    }
    if (v4 != 11)
      goto LABEL_36;
    v5 = v20;
    if ((v21 & 0x80u) != 0)
      v5 = (void **)v20[0];
    v6 = *v5;
    v7 = *(uint64_t *)((char *)v5 + 3);
    if (v6 != (void *)0x2D636972656E6567 || v7 != 0x6761642D63697265)
    {
LABEL_36:
      v12 = ZinMirSpatialSplitUtils::ExecuteLegacyMode((uint64_t)a1, a2);
      goto LABEL_38;
    }
  }
  v12 = ZinMirSpatialSplitUtils::ExecuteGenericDAGMode(a1, (ZinIrCompilerParameters **)a2);
LABEL_38:
  v13 = v12;
  std::string::basic_string[abi:ne180100]<0>(v17, "after_spatial_splitting");
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v15, *(const ZinIrCompilerParameters **)(a2 + 8));
  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v17, (ZinIrCompilerParameters *)&v15, (uint64_t)&v19, 256);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v15);
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  return v13;
}

void sub_206F400E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::vector<ProducerConsumerChain>::__push_back_slow_path<ProducerConsumerChain const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[72 * v4];
  v16 = &v10[72 * v9];
  std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain const&,ProducerConsumerChain*>((uint64_t)v14, a2);
  v15 = v14 + 72;
  std::vector<ProducerConsumerChain>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ProducerConsumerChain>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206F4025C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ProducerConsumerChain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain const&,ProducerConsumerChain*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  std::unordered_set<ZinANELayer const*>::unordered_set(a1 + 32, a2 + 32);
  return a1;
}

void sub_206F402D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ProducerConsumerChain>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProducerConsumerChain>,std::reverse_iterator<ProducerConsumerChain*>,std::reverse_iterator<ProducerConsumerChain*>,std::reverse_iterator<ProducerConsumerChain*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProducerConsumerChain>,std::reverse_iterator<ProducerConsumerChain*>,std::reverse_iterator<ProducerConsumerChain*>,std::reverse_iterator<ProducerConsumerChain*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = a3 + v11;
      *(_DWORD *)(v12 - 72) = *(_DWORD *)(a3 + v11 - 72);
      *(_QWORD *)(v12 - 56) = 0;
      *(_QWORD *)(v12 - 48) = 0;
      *(_QWORD *)(v12 - 64) = 0;
      *(_OWORD *)(v12 - 64) = *(_OWORD *)(a3 + v11 - 64);
      *(_QWORD *)(v12 - 48) = *(_QWORD *)(a3 + v11 - 48);
      *(_QWORD *)(v13 - 64) = 0;
      *(_QWORD *)(v13 - 56) = 0;
      *(_QWORD *)(v13 - 48) = 0;
      std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a7 + v11 - 40, (uint64_t *)(a3 + v11 - 40));
      v11 -= 72;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void std::__destroy_at[abi:ne180100]<ProducerConsumerChain,0>(uint64_t a1)
{
  void *v2;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 32);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<ProducerConsumerChain>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<ProducerConsumerChain,0>(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_BYTE *std::__optional_move_base<ProducerConsumerChain,false>::__optional_move_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  std::__optional_storage_base<ProducerConsumerChain,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ProducerConsumerChain,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<ProducerConsumerChain,false>::__construct_from[abi:ne180100]<std::__optional_move_base<ProducerConsumerChain,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a2 + 72))
  {
    v2 = result;
    *(_DWORD *)result = *(_DWORD *)a2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    result = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(result + 32, (uint64_t *)(a2 + 32));
    *(_BYTE *)(v2 + 72) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<ProducerConsumerChain,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 72))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 32);
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void std::vector<LayerTilingHelper>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 192;
    v4 -= 192;
    std::construct_at[abi:ne180100]<LayerTilingHelper,LayerTilingHelper,LayerTilingHelper*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LayerTilingHelper>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a2);
}

__n128 std::construct_at[abi:ne180100]<LayerTilingHelper,LayerTilingHelper,LayerTilingHelper*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 168) = result;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<LayerTilingHelper,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<LayerTilingHelper>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<LayerTilingHelper,0>((_QWORD *)(i - 192));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<LogicalDimensions>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 72 * a2;
    v6 = vdupq_n_s64(1uLL);
    do
    {
      *(int64x2_t *)v4 = v6;
      *(int64x2_t *)(v4 + 16) = v6;
      *(_QWORD *)(v4 + 32) = 1;
      *(_OWORD *)(v4 + 40) = 0uLL;
      *(_OWORD *)(v4 + 56) = 0uLL;
      v4 += 72;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_206F407E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ZinTensorRegion>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ZinDramDependentInfo>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 80 * a2;
    v6 = vdupq_n_s64(1uLL);
    do
    {
      *(_QWORD *)(v4 + 32) = 0;
      *(_OWORD *)v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(int64x2_t *)(v4 + 40) = v6;
      *(int64x2_t *)(v4 + 56) = v6;
      *(_QWORD *)(v4 + 72) = 1;
      v4 += 80;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_206F40874(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<ZinTensorPosition>::vector(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ZinMirInterchangeInfo>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 40 * a2;
    v8 = 40 * a2;
    do
    {
      v9 = *a3;
      v10 = a3[1];
      *(_QWORD *)(v6 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)v6 = v9;
      *(_OWORD *)(v6 + 16) = v10;
      v6 += 40;
      v8 -= 40;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_206F40904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL LogicalDimensions::operator==(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = ZinTensorPosition::operator==(a1, a2);
  if (result)
    return a1[5] == a2[5] && a1[6] == a2[6] && a1[7] == a2[7] && a1[8] == a2[8];
  return result;
}

void std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__assign_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  TiledLayerTensorRegions **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (TiledLayerTensorRegions **)&a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>> *,std::vector<std::optional<TiledLayerTensorRegions>> *,std::vector<std::optional<TiledLayerTensorRegions>> *>((int)&v17, (TiledLayerTensorRegions **)a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v8, (uint64_t *)v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>> *,std::vector<std::optional<TiledLayerTensorRegions>> *,std::vector<std::optional<TiledLayerTensorRegions>> *>((int)&v18, (TiledLayerTensorRegions **)a2, (TiledLayerTensorRegions **)a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206F40B00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206F40B08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v4, *v6, v6[1], 0x34F72C234F72C235 * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206F40C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::optional<TiledLayerTensorRegions>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

TiledLayerTensorRegions **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>> *,std::vector<std::optional<TiledLayerTensorRegions>> *,std::vector<std::optional<TiledLayerTensorRegions>> *>(int a1, TiledLayerTensorRegions **a2, TiledLayerTensorRegions **a3, uint64_t a4)
{
  TiledLayerTensorRegions **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (TiledLayerTensorRegions **)a4)
        std::vector<std::optional<TiledLayerTensorRegions>>::__assign_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(a4, *v5, v5[1], 0x34F72C234F72C235 * ((v5[1] - *v5) >> 3));
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::optional<TiledLayerTensorRegions>>::__assign_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(uint64_t a1, TiledLayerTensorRegions *a2, TiledLayerTensorRegions *a3, unint64_t a4)
{
  uint64_t v8;
  TiledLayerTensorRegions *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  TiledLayerTensorRegions *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1 + 16;
  v9 = *(TiledLayerTensorRegions **)a1;
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::optional<TiledLayerTensorRegions>>::__vdeallocate((void **)a1);
    if (a4 > 0x11A7B9611A7B961)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x69EE58469EE5846ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x8D3DCB08D3DCB0)
      v11 = 0x11A7B9611A7B961;
    else
      v11 = v10;
    std::vector<std::optional<TiledLayerTensorRegions>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (TiledLayerTensorRegions *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::optional<TiledLayerTensorRegions> *,std::optional<TiledLayerTensorRegions> *,std::optional<TiledLayerTensorRegions> *,0>(a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<TiledLayerTensorRegions>>,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::optional<TiledLayerTensorRegions> *,std::optional<TiledLayerTensorRegions> *,std::optional<TiledLayerTensorRegions> *,0>(a2, a3, v9);
  v15 = v14;
  result = *(_QWORD *)(a1 + 8);
  if (result != v14)
  {
    do
      result = std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100](result - 232);
    while (result != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_206F40EB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206F40EC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::optional<TiledLayerTensorRegions>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::__optional_destruct_base<TiledLayerTensorRegions,false>::~__optional_destruct_base[abi:ne180100](v3 - 232);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

TiledLayerTensorRegions *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::optional<TiledLayerTensorRegions> *,std::optional<TiledLayerTensorRegions> *,std::optional<TiledLayerTensorRegions> *,0>(TiledLayerTensorRegions *a1, TiledLayerTensorRegions *a2, TiledLayerTensorRegions *this)
{
  TiledLayerTensorRegions *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::__optional_storage_base<TiledLayerTensorRegions,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<TiledLayerTensorRegions,false> const&>(this, v4);
      v4 = (TiledLayerTensorRegions *)((char *)v4 + 232);
      this = (TiledLayerTensorRegions *)((char *)this + 232);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  char *v8;
  BOOL v9;
  char *v10;
  BOOL v11;
  _QWORD v12[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (char *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 16;
        v12[1] = v8 + 24;
        std::pair<ZinIrOpLayer const*&,std::vector<std::optional<TiledLayerTensorRegions>> &>::operator=[abi:ne180100]<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 2));
        v10 = *(char **)v8;
        std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_multi(a1, v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_multi<std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_206F4105C(void *a1)
{
  uint64_t v1;
  char *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_206F41078(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::pair<ZinIrOpLayer const*&,std::vector<std::optional<TiledLayerTensorRegions>> &>::operator=[abi:ne180100]<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  **(_QWORD **)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 != a2 + 8)
    std::vector<std::optional<TiledLayerTensorRegions>>::__assign_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v3, *(TiledLayerTensorRegions **)(a2 + 8), *(TiledLayerTensorRegions **)(a2 + 16), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_multi<std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__node_insert_multi(a1, v4);
}

void sub_206F41128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node<std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  v7 = a2[1];
  v6[2] = *a2;
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  result = std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v6 + 3, v7, a2[2], 0x34F72C234F72C235 * ((a2[2] - v7) >> 3));
  *(_BYTE *)(a3 + 16) = 1;
  v9 = v6[2];
  v10 = HIDWORD(v9);
  v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
  v6[1] = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  return result;
}

void sub_206F4121C(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void std::vector<LayerTilingHelper>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 24;
        std::__destroy_at[abi:ne180100]<LayerTilingHelper,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<SplitInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 144))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 24);
    v3 = (void **)a1;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<SplitInfo,SplitInfo&,SplitInfo*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>((_QWORD *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map(a1 + 24, a2 + 24);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set(a1 + 64, a2 + 64);
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  return a1;
}

void sub_206F41384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(v2);
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::__unordered_map_hasher<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::hash<MemType>,std::equal_to<MemType>,true>,std::__unordered_map_equal<MemType,std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,std::equal_to<MemType>,std::hash<MemType>,true>,std::allocator<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

_QWORD *std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::optional<TiledLayerTensorRegions>>>,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206F414B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_206F4152C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == *a2)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node_hash<std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>(a1, v7, a3, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_206F4178C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__construct_node_hash<std::pair<ZinIrOpLayer const* const,std::vector<std::optional<TiledLayerTensorRegions>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = a3[1];
  v8[2] = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  result = std::vector<std::optional<TiledLayerTensorRegions>>::__init_with_size[abi:ne180100]<std::optional<TiledLayerTensorRegions>*,std::optional<TiledLayerTensorRegions>*>(v8 + 3, v9, a3[2], 0x34F72C234F72C235 * ((a3[2] - v9) >> 3));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_206F41844(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<ZinIrOpLayer const*>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_206F418BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::construct_at[abi:ne180100]<ZinMirSpatialSplitter::TilingResult,ZinMirSpatialSplitter::TilingResult,ZinMirSpatialSplitter::TilingResult*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 24, (uint64_t *)(a2 + 24));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 64, (uint64_t *)(a2 + 64));
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  return a1;
}

uint64_t std::unordered_set<ZinANELayer const*>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_206F41AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain&,ProducerConsumerChain*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  std::unordered_set<ZinANELayer const*>::unordered_set(a1 + 32, a2 + 32);
  return a1;
}

void sub_206F41B1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<ProducerConsumerChain>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ProducerConsumerChain*>,std::__wrap_iter<ProducerConsumerChain*>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = a3 + 72 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ProducerConsumerChain>,ProducerConsumerChain*,ProducerConsumerChain*,ProducerConsumerChain*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<ProducerConsumerChain>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[9 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ProducerConsumerChain *,ProducerConsumerChain *,ProducerConsumerChain *>((uint64_t)v27, v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x38E38E38E38E38ELL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = 0x8E38E38E38E38E39 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x1C71C71C71C71C7)
        v18 = 0x38E38E38E38E38ELL;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::TD>>(v9, v18);
      else
        v19 = 0;
      v22 = (uint64_t)&v19[72 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[72 * v18];
      v23 = 9 * a5;
      v24 = v22 + 72 * a5;
      v25 = 8 * v23;
      do
      {
        std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain&,ProducerConsumerChain*>(v22, v7);
        v22 += 72;
        v7 += 72;
        v25 -= 72;
      }
      while (v25);
      v28 = v24;
      v5 = (uint64_t *)std::vector<ProducerConsumerChain>::__swap_out_circular_buffer((uint64_t)a1, v27, v5);
      std::__split_buffer<ProducerConsumerChain>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_206F41D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ProducerConsumerChain>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t *v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = (uint64_t *)(a2 + 8 * ((v6 - a4) >> 3) + 32);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_DWORD *)v8 = *((_DWORD *)v10 - 8);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v10 - 3);
      *(_QWORD *)(v8 + 24) = *(v10 - 1);
      *(v10 - 3) = 0;
      *(v10 - 2) = 0;
      *(v10 - 1) = 0;
      std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(v8 + 32, v10);
      v8 += 72;
      v11 = v10 + 5;
      v10 += 9;
    }
    while ((unint64_t)v11 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ProducerConsumerChain *,ProducerConsumerChain *,ProducerConsumerChain *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::vector<ProducerConsumerChain>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProducerConsumerChain>,std::reverse_iterator<ProducerConsumerChain*>,std::reverse_iterator<ProducerConsumerChain*>,std::reverse_iterator<ProducerConsumerChain*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProducerConsumerChain>,ProducerConsumerChain*,ProducerConsumerChain*,ProducerConsumerChain*>(v7, a3, *(uint64_t **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ProducerConsumerChain>,ProducerConsumerChain*,ProducerConsumerChain*,ProducerConsumerChain*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<ProducerConsumerChain,ProducerConsumerChain&,ProducerConsumerChain*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206F41F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<ProducerConsumerChain,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ProducerConsumerChain *,ProducerConsumerChain *,ProducerConsumerChain *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7 - 72) = *(_DWORD *)(a3 + v7 - 72);
      std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(a4 + v7 - 64, (__n128 *)(a3 + v7 - 64));
      std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign(a4 + v7 - 40, (uint64_t *)(a3 + v7 - 40));
      v7 -= 72;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ProducerConsumerChain *,ProducerConsumerChain *,ProducerConsumerChain *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
    if (a2 != a4)
    {
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a4 + v7 + 8), *(char **)(a2 + v7 + 8), *(_QWORD *)(a2 + v7 + 16), (uint64_t)(*(_QWORD *)(a2 + v7 + 16) - *(_QWORD *)(a2 + v7 + 8)) >> 3);
      *(_DWORD *)(a4 + v7 + 64) = *(_DWORD *)(a2 + v7 + 64);
      std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a4 + v7 + 32), *(_QWORD **)(a2 + v7 + 48), 0);
    }
    v7 += 72;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProducerConsumerChain>,ProducerConsumerChain*,ProducerConsumerChain*,ProducerConsumerChain*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;

  if (a2 != a3)
  {
    v6 = a2 + 4;
    do
    {
      *(_DWORD *)a4 = *((_DWORD *)v6 - 8);
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)(v6 - 3);
      *(_QWORD *)(a4 + 24) = *(v6 - 1);
      *(v6 - 3) = 0;
      *(v6 - 2) = 0;
      *(v6 - 1) = 0;
      std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a4 + 32, v6);
      a4 += 72;
      v7 = v6 + 5;
      v6 += 9;
    }
    while (v7 != a3);
  }
  return a4;
}

void std::vector<ProducerConsumerChain>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<ProducerConsumerChain,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ZinMirSpatialSplitter::SplitPlan::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a1 == a2)
  {
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v7;
    *(_OWORD *)(a1 + 104) = v6;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  }
  else
  {
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__assign_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,void *> *>>((_QWORD *)(a1 + 24), *(_QWORD **)(a2 + 40), 0);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a1 + 64), *(_QWORD **)(a2 + 80), 0);
    v4 = *(_OWORD *)(a2 + 104);
    v5 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v5;
    *(_OWORD *)(a1 + 104) = v4;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 168), *(char **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    std::__hash_table<ZinIrOpLayer *,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<ZinIrOpLayer *,void *> *>>((_QWORD *)(a1 + 192), *(_QWORD **)(a2 + 208), 0);
  }
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  return a1;
}

ZinMirSpatialSplitter::SplitPlan *ZinMirSpatialSplitter::SplitPlan::SplitPlan(ZinMirSpatialSplitter::SplitPlan *this, const ZinMirSpatialSplitter::SplitPlan *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(this, *(uint64_t **)a2, *((uint64_t **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map((uint64_t)this + 24, (uint64_t)a2 + 24);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set((uint64_t)this + 64, (uint64_t)a2 + 64);
  v4 = *(_OWORD *)((char *)a2 + 104);
  v5 = *(_OWORD *)((char *)a2 + 120);
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v5;
  *(_OWORD *)((char *)this + 104) = v4;
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  v6 = *((_DWORD *)a2 + 40);
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 40) = v6;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 3);
  std::unordered_set<ZinANELayer const*>::unordered_set((uint64_t)this + 192, (uint64_t)a2 + 192);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  return this;
}

void sub_206F4234C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 176) = v13;
    operator delete(v13);
  }
  SplitInfo::~SplitInfo((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<ZinMirSpatialSplitter::TilingResult,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 160))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 24);
    v3 = (void **)a1;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<ZinMirSpatialSplitter::SplitPlan,ZinMirSpatialSplitter::SplitPlan,ZinMirSpatialSplitter::SplitPlan*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 24, (uint64_t *)(a2 + 24));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 64, (uint64_t *)(a2 + 64));
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 192, (uint64_t *)(a2 + 192));
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  return a1;
}

uint64_t std::__optional_destruct_base<ZinMirSpatialSplitter::SplitPlan,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 240))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 192);
    v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(_QWORD *)(a1 + 176) = v2;
      operator delete(v2);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(a1 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table(a1 + 24);
    v4 = (void **)a1;
    std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  return a1;
}

__n128 std::pair<TiledLayerTensorRegions,LatencyData>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v5 = *(_OWORD *)(a2 + 152);
  v6 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 152) = v5;
  v7 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v7;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  result = *(__n128 *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 240);
  *(__n128 *)(a1 + 224) = result;
  *(_OWORD *)(a1 + 240) = v9;
  return result;
}

void std::vector<std::pair<TiledLayerTensorRegions,LatencyData>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 256;
    std::pair<TiledLayerTensorRegions,LatencyData>::pair[abi:ne180100](v6 - 256, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TiledLayerTensorRegions,LatencyData>>>(uint64_t a1, unint64_t a2)
{
  if (HIBYTE(a2))
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 8);
}

uint64_t std::__split_buffer<std::pair<TiledLayerTensorRegions,LatencyData>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 256;
    std::__destroy_at[abi:ne180100]<TiledLayerTensorRegions,0>((_QWORD *)(i - 256));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<TiledLayerTensorRegions,LatencyData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::__destroy_at[abi:ne180100]<TiledLayerTensorRegions,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::optional<BOOL>>::__assign_with_size[abi:ne180100]<std::optional<BOOL> const*,std::optional<BOOL> const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<half>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::vector<ZinTensorRegion>,std::vector<ZinTensorRegion>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 result;

  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = *(_QWORD **)a3;
  if ((_QWORD *)((char *)v4 - *(_QWORD *)a2) != (_QWORD *)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3))
    return 0;
  if (v3 == v4)
    return 1;
  do
  {
    result = ZinTensorRegion::operator==(v3, v5);
    if (!result)
      break;
    v3 += 10;
    v5 += 10;
  }
  while (v3 != v4);
  return result;
}

void LayerTilingHelper::LayerTilingHelper(LayerTilingHelper *this, const LayerTilingHelper *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::TD*,ANEDebugInfo::DebugInfoInMem::TD*>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  std::vector<BOOL>::vector((_QWORD *)this + 5, (uint64_t)a2 + 40);
  v4 = *((_OWORD *)a2 + 6);
  v5 = *((_OWORD *)a2 + 7);
  v6 = *((_OWORD *)a2 + 8);
  v8 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 5);
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 7) = v5;
  *((_OWORD *)this + 8) = v6;
  *((_OWORD *)this + 5) = v7;
  *((_OWORD *)this + 6) = v4;
  *((_OWORD *)this + 4) = v8;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  std::vector<ZinOcgKernelData>::__init_with_size[abi:ne180100]<ZinOcgKernelData*,ZinOcgKernelData*>((_QWORD *)this + 18, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3));
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  std::vector<ZinOcgKernelData>::__init_with_size[abi:ne180100]<ZinOcgKernelData*,ZinOcgKernelData*>((_QWORD *)this + 21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 3));
}

void sub_206F4298C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 152) = v6;
    operator delete(v6);
  }
  if (*v3)
    operator delete(*v3);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

double std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &>@<D0>(ZinIrOpLayer ***a1@<X0>, ZinIrOpLayer ***a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  _QWORD *i;
  ZinIrOpLayer *v15;
  unint64_t v16;
  ZinIrOpLayer **v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer ***v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  ZinIrOpLayer *v23;
  ZinIrOpLayer ***v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  double result;
  uint64_t v29;
  __int128 v30;

  v10 = *a1;
  v11 = *a2;
  if (*a1 == *a2)
  {
LABEL_31:
    v11 = v10;
    goto LABEL_32;
  }
  for (i = *(_QWORD **)a3; *(_QWORD *)a3 != *a4; i = *(_QWORD **)a3)
  {
    v15 = v10[4];
    v16 = i[4];
    if ((unint64_t)v15 >= v16)
    {
      if (v16 >= (unint64_t)v15)
      {
        v23 = v10[1];
        if (v23)
        {
          do
          {
            v24 = (ZinIrOpLayer ***)v23;
            v23 = *(ZinIrOpLayer **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (ZinIrOpLayer ***)v10[2];
            v20 = *v24 == v10;
            v10 = (ZinIrOpLayer **)v24;
          }
          while (!v20);
        }
        *a1 = (ZinIrOpLayer **)v24;
        v25 = *(_QWORD **)a3;
        v26 = *(_QWORD **)(*(_QWORD *)a3 + 8);
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v25[2];
            v20 = *v27 == (_QWORD)v25;
            v25 = v27;
          }
          while (!v20);
        }
        *(_QWORD *)a3 = v27;
      }
      else
      {
        v21 = (_QWORD *)i[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)i[2];
            v20 = *v22 == (_QWORD)i;
            i = v22;
          }
          while (!v20);
        }
        *(_QWORD *)a3 = v22;
      }
    }
    else
    {
      std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::operator=[abi:ne180100]((uint64_t)a5, v10 + 4);
      v17 = *a1;
      v18 = (*a1)[1];
      if (v18)
      {
        do
        {
          v19 = (ZinIrOpLayer ***)v18;
          v18 = *(ZinIrOpLayer **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (ZinIrOpLayer ***)v17[2];
          v20 = *v19 == v17;
          v17 = (ZinIrOpLayer **)v19;
        }
        while (!v20);
      }
      *a1 = (ZinIrOpLayer **)v19;
    }
    v10 = *a1;
    v11 = *a2;
    if (*a1 == *a2)
      goto LABEL_31;
  }
LABEL_32:
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>(v10, v11, *a5, a5[1], (uint64_t)&v29);
  *(_QWORD *)a6 = v29;
  result = *(double *)&v30;
  *(_OWORD *)(a6 + 8) = v30;
  return result;
}

void std::vector<TiledLayerTensorRegions>::__assign_with_size[abi:ne180100]<TiledLayerTensorRegions*,TiledLayerTensorRegions*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  char v18;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5) < a4)
  {
    std::vector<TiledLayerTensorRegions>::__vdeallocate(a1);
    if (a4 > 0x124924924924924)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
      v11 = 0x124924924924924;
    else
      v11 = v10;
    std::vector<TiledLayerTensorRegions>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TiledLayerTensorRegions>,TiledLayerTensorRegions*,TiledLayerTensorRegions*,TiledLayerTensorRegions*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 5) < a4)
  {
    v13 = a2 + 32 * ((a1[1] - v9) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TiledLayerTensorRegions *,TiledLayerTensorRegions *,TiledLayerTensorRegions *>((uint64_t)&v17, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TiledLayerTensorRegions>,TiledLayerTensorRegions*,TiledLayerTensorRegions*,TiledLayerTensorRegions*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TiledLayerTensorRegions *,TiledLayerTensorRegions *,TiledLayerTensorRegions *>((uint64_t)&v18, a2, a3, v9);
  v15 = v14;
  v16 = (_QWORD *)a1[1];
  if (v16 != v14)
  {
    do
    {
      v16 -= 28;
      std::__destroy_at[abi:ne180100]<TiledLayerTensorRegions,0>(v16);
    }
    while (v16 != v15);
  }
  a1[1] = (uint64_t)v15;
}

void sub_206F42D08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206F42D10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<TiledLayerTensorRegions>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 28;
        std::__destroy_at[abi:ne180100]<TiledLayerTensorRegions,0>(v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TiledLayerTensorRegions *,TiledLayerTensorRegions *,TiledLayerTensorRegions *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 136;
  do
  {
    v7 = v6 - 136;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 136);
    v8 = *(_OWORD *)(v6 - 120);
    v9 = *(_OWORD *)(v6 - 104);
    v10 = *(_OWORD *)(v6 - 72);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v6 - 88);
    *(_OWORD *)(a4 + 64) = v10;
    *(_OWORD *)(a4 + 16) = v8;
    *(_OWORD *)(a4 + 32) = v9;
    if (a4 != v6 - 136)
    {
      std::vector<ZinTensorDimensions>::__assign_with_size[abi:ne180100]<ZinTensorDimensions const*,ZinTensorDimensions const*>((char *)(a4 + 80), *(char **)(v6 - 56), *(_QWORD *)(v6 - 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 - 48) - *(_QWORD *)(v6 - 56)) >> 3));
      std::vector<LogicalDimensions>::__assign_with_size[abi:ne180100]<LogicalDimensions*,LogicalDimensions*>((char *)(a4 + 104), *(char **)(v6 - 32), *(_QWORD *)(v6 - 24), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v6 - 24) - *(_QWORD *)(v6 - 32)) >> 3));
      std::vector<WorkUnit>::__assign_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>((char *)(a4 + 128), *(char **)(v6 - 8), *(_QWORD *)v6, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 4));
    }
    v11 = *(_OWORD *)(v6 + 16);
    v12 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a4 + 184) = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a4 + 168) = v12;
    *(_OWORD *)(a4 + 152) = v11;
    std::vector<BOOL>::operator=((void **)(a4 + 200), v6 + 64);
    a4 += 224;
    v6 += 224;
  }
  while (v7 + 224 != v5);
  return v5;
}

double std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,ScheduleComparator &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long> &,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>> &>@<D0>(ZinIrOpLayer ***a1@<X0>, ZinIrOpLayer ***a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  _QWORD *i;
  ZinIrOpLayer **v17;
  ZinIrOpLayer *v18;
  ZinIrOpLayer ***v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  ZinIrOpLayer **v24;
  ZinIrOpLayer *v25;
  ZinIrOpLayer ***v26;
  _QWORD *v27;
  _QWORD *v28;
  double result;
  uint64_t v30;
  __int128 v31;

  v11 = *a1;
  v12 = *a2;
  if (*a1 == *a2)
  {
LABEL_31:
    v12 = v11;
    goto LABEL_32;
  }
  for (i = *(_QWORD **)a3; *(_QWORD *)a3 != *a4; i = *(_QWORD **)a3)
  {
    if (ScheduleComparator::operator()(a6, v11[4], (ZinIrOpLayer *)i[4]))
    {
      std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>::operator=[abi:ne180100]((uint64_t)a5, *a1 + 4);
      v17 = *a1;
      v18 = (*a1)[1];
      if (v18)
      {
        do
        {
          v19 = (ZinIrOpLayer ***)v18;
          v18 = *(ZinIrOpLayer **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (ZinIrOpLayer ***)v17[2];
          v20 = *v19 == v17;
          v17 = (ZinIrOpLayer **)v19;
        }
        while (!v20);
      }
      *a1 = (ZinIrOpLayer **)v19;
    }
    else
    {
      if (ScheduleComparator::operator()(a6, *(ZinIrOpLayer **)(*(_QWORD *)a3 + 32), (*a1)[4]))
      {
        v21 = *(_QWORD **)a3;
        v22 = *(_QWORD **)(*(_QWORD *)a3 + 8);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v21[2];
            v20 = *v23 == (_QWORD)v21;
            v21 = v23;
          }
          while (!v20);
        }
      }
      else
      {
        v24 = *a1;
        v25 = (*a1)[1];
        if (v25)
        {
          do
          {
            v26 = (ZinIrOpLayer ***)v25;
            v25 = *(ZinIrOpLayer **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (ZinIrOpLayer ***)v24[2];
            v20 = *v26 == v24;
            v24 = (ZinIrOpLayer **)v26;
          }
          while (!v20);
        }
        *a1 = (ZinIrOpLayer **)v26;
        v27 = *(_QWORD **)a3;
        v28 = *(_QWORD **)(*(_QWORD *)a3 + 8);
        if (v28)
        {
          do
          {
            v23 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v27[2];
            v20 = *v23 == (_QWORD)v27;
            v27 = v23;
          }
          while (!v20);
        }
      }
      *(_QWORD *)a3 = v23;
    }
    v11 = *a1;
    v12 = *a2;
    if (*a1 == *a2)
      goto LABEL_31;
  }
LABEL_32:
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::insert_iterator<std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>>>(v11, v12, *a5, a5[1], (uint64_t)&v30);
  *(_QWORD *)a7 = v30;
  result = *(double *)&v31;
  *(_OWORD *)(a7 + 8) = v31;
  return result;
}

double std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,ScheduleComparator &,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>,std::insert_iterator<std::set<ZinIrOpLayer *>>>@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  _QWORD *v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  double result;
  __int128 v22;

  *(_QWORD *)&v22 = a5;
  *((_QWORD *)&v22 + 1) = a6;
  if (a1 != a2)
  {
    v11 = a3;
    if (a3 != a4)
    {
      v13 = a1;
      do
      {
        if (ScheduleComparator::operator()(a7, (ZinIrOpLayer *)v13[4], (ZinIrOpLayer *)v11[4]))
        {
          v14 = (_QWORD *)v13[1];
          if (v14)
          {
            do
            {
              v13 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = v13;
              v13 = (_QWORD *)v13[2];
            }
            while ((_QWORD *)*v13 != v15);
          }
        }
        else
        {
          if (ScheduleComparator::operator()(a7, (ZinIrOpLayer *)v11[4], (ZinIrOpLayer *)v13[4]))
          {
            v16 = v13;
          }
          else
          {
            std::insert_iterator<std::set<unsigned long long>>::operator=[abi:ne180100]((uint64_t)&v22, v13 + 4);
            v17 = (_QWORD *)v13[1];
            if (v17)
            {
              do
              {
                v16 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v13[2];
                v18 = *v16 == (_QWORD)v13;
                v13 = v16;
              }
              while (!v18);
            }
          }
          v19 = (_QWORD *)v11[1];
          if (v19)
          {
            do
            {
              v11 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = v11;
              v11 = (_QWORD *)v11[2];
            }
            while ((_QWORD *)*v11 != v20);
          }
          v13 = v16;
        }
      }
      while (v13 != a2 && v11 != a4);
    }
  }
  *(_QWORD *)a8 = a2;
  *(_QWORD *)(a8 + 8) = a4;
  result = *(double *)&v22;
  *(_OWORD *)(a8 + 16) = v22;
  return result;
}

uint64_t std::list<ZinIrOpLayer *>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<ZinIrSection *>::clear(a1);
  return std::list<ZinIrOpLayer *>::splice((uint64_t)a1, a1, a2);
}

void std::vector<std::map<ZinIrDimension,unsigned long>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<SubgraphSplitInfo>::__emplace_back_slow_path<SubgraphSplitInfo&>(uint64_t *a1, const SubgraphSplitInfo *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  SubgraphSplitInfo *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x823EE08FB823EE09 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x8FB823EE08FB82)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x823EE08FB823EE09 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x47DC11F7047DC1)
    v9 = 0x8FB823EE08FB82;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SubgraphSplitInfo>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (SubgraphSplitInfo *)&v10[456 * v4];
  v16 = &v10[456 * v9];
  SubgraphSplitInfo::SubgraphSplitInfo(v14, a2);
  v15 = (char *)v14 + 456;
  std::vector<SubgraphSplitInfo>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<SubgraphSplitInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206F43354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SubgraphSplitInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SubgraphSplitInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 456;
    result = SubgraphSplitInfo::SubgraphSplitInfo(result - 456, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SubgraphSplitInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x8FB823EE08FB83)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(456 * a2);
}

uint64_t SubgraphSplitInfo::SubgraphSplitInfo(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)Subgraph::Subgraph(a1, a2);
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  *(_OWORD *)(v4 + 19) = *(_OWORD *)(a2 + 152);
  v4[21] = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v4 + 22), (uint64_t *)(a2 + 176));
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 216, (uint64_t *)(a2 + 216));
  v5 = *(_OWORD *)(a2 + 256);
  v6 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v7 = a1 + 304;
  v8 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = v8;
  v9 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v9;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(a2 + 296) = a2 + 304;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v7;
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v10 = a1 + 328;
  v11 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v11;
  v12 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 336) = v12;
  if (v12)
  {
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(a2 + 320) = a2 + 328;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 320) = v10;
  }
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  v13 = a1 + 352;
  v14 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v14;
  v15 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 360) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(a2 + 344) = a2 + 352;
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(a2 + 360) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 344) = v13;
  }
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  v16 = a1 + 376;
  v17 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v17;
  v18 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 384) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(a2 + 368) = a2 + 376;
    *(_QWORD *)(a2 + 376) = 0;
    *(_QWORD *)(a2 + 384) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 368) = v16;
  }
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v19 = a1 + 400;
  v20 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 400) = v20;
  v21 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 408) = v21;
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(a2 + 392) = a2 + 400;
    *(_QWORD *)(a2 + 400) = 0;
    *(_QWORD *)(a2 + 408) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 392) = v19;
  }
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a1 + 416, (uint64_t *)(a2 + 416));
  return a1;
}

uint64_t std::__split_buffer<SubgraphSplitInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 456;
    SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)(i - 456));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SubgraphSplitInfo::~SubgraphSplitInfo(SubgraphSplitInfo *this)
{
  char *v2;
  void **v3;

  v2 = (char *)this + 296;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 416);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 344, *((_QWORD **)this + 44));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2, *((_QWORD **)this + 38));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::__unordered_map_hasher<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::hash<ZinIrOpLayer const*>,std::equal_to<ZinIrOpLayer const*>,true>,std::__unordered_map_equal<ZinIrOpLayer const*,std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>,std::equal_to<ZinIrOpLayer const*>,std::hash<ZinIrOpLayer const*>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>>>::~__hash_table((uint64_t)this + 176);
  v3 = (void **)((char *)this + 152);
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  v3 = (void **)((char *)this + 96);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__list_imp<ZinIrSection *>::clear((_QWORD *)this + 6);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void std::vector<SubgraphSplitInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        SubgraphSplitInfo::~SubgraphSplitInfo((SubgraphSplitInfo *)(v4 - 456));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<Subgraph>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1AF286BCA1AF287)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Subgraph>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[152 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Subgraph>,Subgraph const*,Subgraph const*,Subgraph*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      Subgraph::Subgraph((Subgraph *)(a4 + v7), (const Subgraph *)(a2 + v7));
      v7 += 152;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206F4380C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 152;
    do
    {
      std::__destroy_at[abi:ne180100]<Subgraph,0>(v4 + v2);
      v2 -= 152;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void SubgraphSplitInfo::SubgraphSplitInfo(SubgraphSplitInfo *this, const SubgraphSplitInfo *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;

  Subgraph::Subgraph(this, a2);
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  std::vector<std::vector<std::optional<TiledLayerTensorRegions>>>::__init_with_size[abi:ne180100]<std::vector<std::optional<TiledLayerTensorRegions>>*,std::vector<std::optional<TiledLayerTensorRegions>>*>(v4 + 19, *((uint64_t **)a2 + 19), *((uint64_t **)a2 + 20), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3));
  std::unordered_map<ZinIrOpLayer const*,std::vector<std::optional<TiledLayerTensorRegions>>>::unordered_map((uint64_t)this + 176, (uint64_t)a2 + 176);
  std::unordered_set<ZinIrOpLayer const*>::unordered_set((uint64_t)this + 216, (uint64_t)a2 + 216);
  v5 = *((_OWORD *)a2 + 16);
  v6 = *((_OWORD *)a2 + 17);
  *((_BYTE *)this + 288) = *((_BYTE *)a2 + 288);
  *((_OWORD *)this + 16) = v5;
  *((_OWORD *)this + 17) = v6;
  LatencyInfo::LatencyInfo((SubgraphSplitInfo *)((char *)this + 296), (ZinIrOpLayer ***)a2 + 37);
}

void sub_206F438CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  Subgraph *v10;
  void **v11;

  SplitInfo::~SplitInfo(v11);
  Subgraph::~Subgraph(v10);
  _Unwind_Resume(a1);
}

void LatencyInfo::LatencyInfo(LatencyInfo *this, ZinIrOpLayer ***a2)
{
  uint64_t *v4;

  v4 = std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::map[abi:ne180100]((uint64_t *)this, a2);
  std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::map[abi:ne180100](v4 + 3, a2 + 3);
  std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::map[abi:ne180100]((uint64_t *)this + 6, a2 + 6);
  std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::map[abi:ne180100]((uint64_t *)this + 9, a2 + 9);
  std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::map[abi:ne180100]((uint64_t *)this + 12, a2 + 12);
  std::unordered_map<ZinIrOpLayer const*,BOOL>::unordered_map((uint64_t)this + 120, (uint64_t)(a2 + 15));
}

void sub_206F43998(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v5, v1[13]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v4, v1[10]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v3, v1[7]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, v1[4]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v1, v1[1]);
  _Unwind_Resume(a1);
}

uint64_t *std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::map[abi:ne180100](uint64_t *a1, ZinIrOpLayer ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<ZinIrOpLayer const*,double,ScheduleComparator,std::allocator<std::pair<ZinIrOpLayer const* const,double>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<ZinIrOpLayer const*,double>,std::__tree_node<std::__value_type<ZinIrOpLayer const*,double>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_206F43A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

