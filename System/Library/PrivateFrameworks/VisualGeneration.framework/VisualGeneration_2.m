id *sub_249EA3050(id *a1)
{
  destroy for DefinitionSession.DrawOnImageConfiguration(a1);
  return a1;
}

id *sub_249EA307C(id *a1)
{

  return a1;
}

uint64_t initializeWithTake for DefinitionSession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);

  v6 = sub_249F1E8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (uint64_t *)(a2 + v8);
  v13 = *v12;
  if (*v12)
  {
    v14 = v12[1];
    *v11 = v13;
    v11[1] = v14;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a3[9];
  v22 = a3[10];
  v23 = (_OWORD *)(a1 + v21);
  v24 = (_OWORD *)(a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  *(_OWORD *)((char *)v23 + 25) = *(_OWORD *)((char *)v24 + 25);
  v26 = a1 + v22;
  v27 = a2 + v22;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_WORD *)(v26 + 8) = *(_WORD *)(v27 + 8);
  v28 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  v29 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_BYTE *)v30 = *(_BYTE *)(a2 + v29);
  *(_OWORD *)(v30 + 8) = *(_OWORD *)(a2 + v29 + 8);
  *(_OWORD *)(v30 + 24) = *(_OWORD *)(a2 + v29 + 24);
  *(_OWORD *)(v30 + 40) = *(_OWORD *)(a2 + v29 + 40);
  *(_QWORD *)(v30 + 55) = *(_QWORD *)(a2 + v29 + 55);
  v32 = *(_QWORD *)(a2 + v29 + 64);
  v33 = *(_QWORD *)(a2 + v29 + 72);
  *(_QWORD *)(v30 + 64) = v32;
  *(_QWORD *)(v30 + 72) = v33;
  *(_BYTE *)(v30 + 80) = *(_BYTE *)(v31 + 80);
  v34 = (int *)type metadata accessor for GenerationRecipe(0);
  v35 = v34[8];
  v36 = (char *)(v30 + v35);
  v37 = (char *)(v31 + v35);
  v38 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v39 = *((_QWORD *)v38 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v85 = v39;
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
    v86(v36, v37, v41);
    v86(&v36[v38[5]], &v37[v38[5]], v41);
    v42 = v38[6];
    v43 = &v36[v42];
    v44 = &v37[v42];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
    v36[v38[7]] = v37[v38[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v85 + 56))(v36, 0, 1, v38);
  }
  v45 = v34[9];
  v46 = v30 + v45;
  v47 = v31 + v45;
  *(_DWORD *)v46 = *(_DWORD *)v47;
  *(_BYTE *)(v46 + 4) = *(_BYTE *)(v47 + 4);
  v48 = v34[10];
  v49 = v30 + v48;
  v50 = v31 + v48;
  *(_BYTE *)(v49 + 4) = *(_BYTE *)(v50 + 4);
  *(_DWORD *)v49 = *(_DWORD *)v50;
  v51 = v34[11];
  v52 = v30 + v51;
  v53 = v31 + v51;
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
  *(_QWORD *)(v30 + v34[12]) = *(_QWORD *)(v31 + v34[12]);
  *(_QWORD *)(v30 + v34[13]) = *(_QWORD *)(v31 + v34[13]);
  v54 = v34[14];
  v55 = v30 + v54;
  v56 = v31 + v54;
  v57 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v57;
  *(_QWORD *)(v55 + 32) = *(_QWORD *)(v56 + 32);
  v58 = v34[15];
  v59 = v30 + v58;
  v60 = v31 + v58;
  *(_QWORD *)(v59 + 32) = *(_QWORD *)(v60 + 32);
  v61 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)v59 = *(_OWORD *)v60;
  *(_OWORD *)(v59 + 16) = v61;
  v62 = v34[16];
  v63 = v30 + v62;
  v64 = v31 + v62;
  v65 = *(_OWORD *)(v64 + 16);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v65;
  *(_QWORD *)(v63 + 32) = *(_QWORD *)(v64 + 32);
  v66 = v34[17];
  v67 = v30 + v66;
  v68 = v31 + v66;
  v69 = *(_OWORD *)(v68 + 16);
  *(_OWORD *)v67 = *(_OWORD *)v68;
  *(_OWORD *)(v67 + 16) = v69;
  *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
  v70 = v34[18];
  v71 = v30 + v70;
  v72 = v31 + v70;
  v73 = *(_OWORD *)(v72 + 48);
  *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
  *(_OWORD *)(v71 + 48) = v73;
  *(_OWORD *)(v71 + 64) = *(_OWORD *)(v72 + 64);
  *(_BYTE *)(v71 + 80) = *(_BYTE *)(v72 + 80);
  v74 = *(_OWORD *)(v72 + 16);
  *(_OWORD *)v71 = *(_OWORD *)v72;
  *(_OWORD *)(v71 + 16) = v74;
  *(_QWORD *)(v30 + v34[19]) = *(_QWORD *)(v31 + v34[19]);
  v75 = v34[20];
  v76 = (_OWORD *)(v30 + v75);
  v77 = (_OWORD *)(v31 + v75);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  v79 = v77[3];
  v76[2] = v77[2];
  v76[3] = v79;
  v80 = v34[21];
  v81 = v30 + v80;
  v82 = v31 + v80;
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_QWORD *)(v81 + 16) = *(_QWORD *)(v82 + 16);
  *(_QWORD *)(v30 + v34[22]) = *(_QWORD *)(v31 + v34[22]);
  *(_BYTE *)(v30 + v34[23]) = *(_BYTE *)(v31 + v34[23]);
  v83 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v83) = *(_QWORD *)(a2 + v83);
  return a1;
}

uint64_t assignWithTake for DefinitionSession(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  id v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  int *v57;
  uint64_t v58;
  uint64_t (*v59)(_BYTE *, uint64_t, int *);
  int v60;
  int v61;
  uint64_t v62;
  void (*v63)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  __int128 v109;
  void *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  void (*v127)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int *v134;

  v6 = sub_249F1E8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a1 + v11);
  v15 = *(_QWORD *)(a2 + v11);
  if (v14)
  {
    if (v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      *v12 = v15;
      v12[1] = v16;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v15)
  {
    v17 = *(_QWORD *)(v13 + 8);
    *v12 = v15;
    v12[1] = v17;
    goto LABEL_8;
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_8:
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  if (*(unsigned __int8 *)(a1 + v18 + 8) != 255)
  {
    v21 = *(unsigned __int8 *)(v20 + 8);
    if (v21 != 255)
    {
      v22 = *(id *)v19;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_BYTE *)(v19 + 8) = v21;

      goto LABEL_13;
    }
    sub_249DC27C8((id *)v19);
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
LABEL_13:
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  if (*(unsigned __int8 *)(a1 + v23 + 8) != 255)
  {
    v26 = *(unsigned __int8 *)(v25 + 8);
    if (v26 != 255)
    {
      v27 = *(id *)v24;
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v26;

      goto LABEL_18;
    }
    sub_249DC27C8((id *)v24);
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
LABEL_18:
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  if (*(_BYTE *)(a1 + v28 + 8) == 0xFF)
  {
LABEL_21:
    v32 = *(_OWORD *)(v30 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 16) = v32;
    *(_OWORD *)(v29 + 25) = *(_OWORD *)(v30 + 25);
    goto LABEL_23;
  }
  v31 = *(unsigned __int8 *)(v30 + 8);
  if (v31 == 255)
  {
    sub_249EA3050((id *)v29);
    goto LABEL_21;
  }
  v33 = *(id *)v29;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = v31;

  v34 = *(_BYTE *)(v30 + 24);
  v35 = *(void **)(v29 + 16);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  *(_BYTE *)(v29 + 24) = v34;

  v36 = *(_BYTE *)(v30 + 40);
  v37 = *(void **)(v29 + 32);
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
  *(_BYTE *)(v29 + 40) = v36;

LABEL_23:
  v38 = a3[10];
  v39 = a1 + v38;
  v40 = a2 + v38;
  if (*(unsigned __int8 *)(a1 + v38 + 8) == 0xFF)
  {
LABEL_26:
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *(_WORD *)(v39 + 8) = *(_WORD *)(v40 + 8);
    goto LABEL_28;
  }
  v41 = *(_WORD *)(v40 + 8);
  if (*(_BYTE *)(v40 + 8) == 0xFF)
  {
    sub_249EA307C((id *)v39);
    goto LABEL_26;
  }
  v42 = *(id *)v39;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = v41;

  *(_BYTE *)(v39 + 9) = *(_BYTE *)(v40 + 9);
LABEL_28:
  v43 = a3[11];
  v44 = *(void **)(a1 + v43);
  *(_QWORD *)(a1 + v43) = *(_QWORD *)(a2 + v43);

  v45 = a3[12];
  v46 = a1 + v45;
  v47 = a2 + v45;
  *(_BYTE *)v46 = *(_BYTE *)v47;
  v48 = *(void **)(v46 + 8);
  *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);

  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_release();
  v133 = a2;
  v134 = a3;
  v49 = a3[14];
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_BYTE *)v50 = *(_BYTE *)(a2 + v49);
  v52 = *(_QWORD *)(a2 + v49 + 16);
  *(_QWORD *)(v50 + 8) = *(_QWORD *)(a2 + v49 + 8);
  *(_QWORD *)(v50 + 16) = v52;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v50 + 24) = *(_OWORD *)(v51 + 24);
  *(_BYTE *)(v50 + 40) = *(_BYTE *)(v51 + 40);
  *(_QWORD *)(v50 + 48) = *(_QWORD *)(v51 + 48);
  *(_BYTE *)(v50 + 56) = *(_BYTE *)(v51 + 56);
  *(_BYTE *)(v50 + 57) = *(_BYTE *)(v51 + 57);
  *(_BYTE *)(v50 + 58) = *(_BYTE *)(v51 + 58);
  *(_BYTE *)(v50 + 59) = *(_BYTE *)(v51 + 59);
  *(_BYTE *)(v50 + 60) = *(_BYTE *)(v51 + 60);
  *(_BYTE *)(v50 + 61) = *(_BYTE *)(v51 + 61);
  *(_BYTE *)(v50 + 62) = *(_BYTE *)(v51 + 62);
  *(_QWORD *)(v50 + 64) = *(_QWORD *)(v51 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v50 + 72) = *(_QWORD *)(v51 + 72);
  *(_BYTE *)(v50 + 80) = *(_BYTE *)(v51 + 80);
  v53 = (int *)type metadata accessor for GenerationRecipe(0);
  v54 = v53[8];
  v55 = (_BYTE *)(v50 + v54);
  v56 = (_BYTE *)(v51 + v54);
  v57 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v58 = *((_QWORD *)v57 - 1);
  v59 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (v60)
  {
    if (!v61)
    {
      v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v63 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 32);
      v63(v55, v56, v62);
      v63(&v55[v57[5]], &v56[v57[5]], v62);
      v64 = v57[6];
      v65 = &v55[v64];
      v66 = &v56[v64];
      *(_OWORD *)v65 = *(_OWORD *)v66;
      *((_QWORD *)v65 + 2) = *((_QWORD *)v66 + 2);
      v55[v57[7]] = v56[v57[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v58 + 56))(v55, 0, 1, v57);
LABEL_34:
      v68 = v133;
      goto LABEL_35;
    }
LABEL_33:
    v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_34;
  }
  if (v61)
  {
    sub_249DC05A8((uint64_t)v55, type metadata accessor for PipelineConfiguration.InputConditioning);
    goto LABEL_33;
  }
  v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v127 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 40);
  v127(v55, v56, v126);
  v127(&v55[v57[5]], &v56[v57[5]], v126);
  v128 = v57[6];
  v129 = (uint64_t)&v55[v128];
  v130 = &v56[v128];
  if (!*(_QWORD *)&v55[v128 + 16])
    goto LABEL_75;
  if (!*((_QWORD *)v130 + 2))
  {
    sub_249E02528(v129);
LABEL_75:
    *(_OWORD *)v129 = *(_OWORD *)v130;
    *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
    goto LABEL_76;
  }
  v131 = *(_QWORD *)v129;
  v132 = *(_QWORD *)(v129 + 8);
  *(_OWORD *)v129 = *(_OWORD *)v130;
  sub_249DC3C24(v131, v132);
  *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
  swift_bridgeObjectRelease();
LABEL_76:
  v68 = v133;
  v55[v57[7]] = v56[v57[7]];
LABEL_35:
  v69 = v53[9];
  v70 = v50 + v69;
  v71 = v51 + v69;
  *(_DWORD *)v70 = *(_DWORD *)v71;
  *(_BYTE *)(v70 + 4) = *(_BYTE *)(v71 + 4);
  v72 = v53[10];
  v73 = v50 + v72;
  v74 = v51 + v72;
  *(_BYTE *)(v73 + 4) = *(_BYTE *)(v74 + 4);
  *(_DWORD *)v73 = *(_DWORD *)v74;
  v75 = v53[11];
  v76 = v50 + v75;
  v77 = v51 + v75;
  *(_WORD *)v76 = *(_WORD *)v77;
  *(_BYTE *)(v76 + 2) = *(_BYTE *)(v77 + 2);
  v79 = *(_QWORD *)(v77 + 8);
  v78 = *(_QWORD *)(v77 + 16);
  *(_QWORD *)(v76 + 8) = v79;
  *(_QWORD *)(v76 + 16) = v78;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v50 + v53[12]) = *(_QWORD *)(v51 + v53[12]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v50 + v53[13]) = *(_QWORD *)(v51 + v53[13]);
  swift_bridgeObjectRelease();
  v80 = v53[14];
  v81 = v50 + v80;
  v82 = v51 + v80;
  v83 = *(void **)(v50 + v80 + 24);
  if (v83)
  {
    v84 = *(_QWORD *)(v82 + 24);
    if (v84)
    {
      *(_OWORD *)v81 = *(_OWORD *)v82;
      *(_DWORD *)(v81 + 16) = *(_DWORD *)(v82 + 16);
      *(_QWORD *)(v81 + 24) = v84;

      *(_QWORD *)(v81 + 32) = *(_QWORD *)(v82 + 32);
      swift_release();
      goto LABEL_40;
    }
    sub_249E0255C(v81);
  }
  v85 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v81 = *(_OWORD *)v82;
  *(_OWORD *)(v81 + 16) = v85;
  *(_QWORD *)(v81 + 32) = *(_QWORD *)(v82 + 32);
LABEL_40:
  v86 = v53[15];
  v87 = v50 + v86;
  v88 = v51 + v86;
  v89 = *(void **)(v50 + v86 + 24);
  if (v89)
  {
    v90 = *(_QWORD *)(v88 + 24);
    if (v90)
    {
      *(_OWORD *)v87 = *(_OWORD *)v88;
      *(_DWORD *)(v87 + 16) = *(_DWORD *)(v88 + 16);
      *(_QWORD *)(v87 + 24) = v90;

      *(_QWORD *)(v87 + 32) = *(_QWORD *)(v88 + 32);
      swift_release();
      goto LABEL_45;
    }
    sub_249E0255C(v87);
  }
  v91 = *(_OWORD *)(v88 + 16);
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *(_OWORD *)(v87 + 16) = v91;
  *(_QWORD *)(v87 + 32) = *(_QWORD *)(v88 + 32);
LABEL_45:
  v92 = v53[16];
  v93 = v50 + v92;
  v94 = v51 + v92;
  v95 = *(void **)(v50 + v92 + 24);
  if (v95)
  {
    v96 = *(_QWORD *)(v94 + 24);
    if (v96)
    {
      *(_OWORD *)v93 = *(_OWORD *)v94;
      *(_DWORD *)(v93 + 16) = *(_DWORD *)(v94 + 16);
      *(_QWORD *)(v93 + 24) = v96;

      *(_QWORD *)(v93 + 32) = *(_QWORD *)(v94 + 32);
      swift_release();
      goto LABEL_50;
    }
    sub_249E0255C(v93);
  }
  v97 = *(_OWORD *)(v94 + 16);
  *(_OWORD *)v93 = *(_OWORD *)v94;
  *(_OWORD *)(v93 + 16) = v97;
  *(_QWORD *)(v93 + 32) = *(_QWORD *)(v94 + 32);
LABEL_50:
  v98 = v53[17];
  v99 = v50 + v98;
  v100 = v51 + v98;
  v101 = *(void **)(v50 + v98 + 24);
  if (v101)
  {
    v102 = *(_QWORD *)(v100 + 24);
    if (v102)
    {
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *(_DWORD *)(v99 + 16) = *(_DWORD *)(v100 + 16);
      *(_QWORD *)(v99 + 24) = v102;

      *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
      swift_release();
      goto LABEL_55;
    }
    sub_249E0255C(v99);
  }
  v103 = *(_OWORD *)(v100 + 16);
  *(_OWORD *)v99 = *(_OWORD *)v100;
  *(_OWORD *)(v99 + 16) = v103;
  *(_QWORD *)(v99 + 32) = *(_QWORD *)(v100 + 32);
LABEL_55:
  v104 = v53[18];
  v105 = v50 + v104;
  v106 = v51 + v104;
  v107 = *(void **)(v50 + v104 + 24);
  if (v107)
  {
    v108 = *(_QWORD *)(v106 + 24);
    if (v108)
    {
      *(_OWORD *)v105 = *(_OWORD *)v106;
      *(_DWORD *)(v105 + 16) = *(_DWORD *)(v106 + 16);
      *(_QWORD *)(v105 + 24) = v108;

      *(_QWORD *)(v105 + 32) = *(_QWORD *)(v106 + 32);
      swift_release();
      goto LABEL_60;
    }
    sub_249E0255C(v105);
  }
  v109 = *(_OWORD *)(v106 + 16);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_OWORD *)(v105 + 16) = v109;
  *(_QWORD *)(v105 + 32) = *(_QWORD *)(v106 + 32);
LABEL_60:
  v110 = *(void **)(v105 + 64);
  if (v110)
  {
    v111 = *(_QWORD *)(v106 + 64);
    if (v111)
    {
      *(_OWORD *)(v105 + 40) = *(_OWORD *)(v106 + 40);
      *(_DWORD *)(v105 + 56) = *(_DWORD *)(v106 + 56);
      *(_QWORD *)(v105 + 64) = v111;

      *(_QWORD *)(v105 + 72) = *(_QWORD *)(v106 + 72);
      swift_release();
      goto LABEL_65;
    }
    sub_249E0255C(v105 + 40);
  }
  v112 = *(_OWORD *)(v106 + 56);
  *(_OWORD *)(v105 + 40) = *(_OWORD *)(v106 + 40);
  *(_OWORD *)(v105 + 56) = v112;
  *(_QWORD *)(v105 + 72) = *(_QWORD *)(v106 + 72);
LABEL_65:
  *(_BYTE *)(v105 + 80) = *(_BYTE *)(v106 + 80);
  *(_QWORD *)(v50 + v53[19]) = *(_QWORD *)(v51 + v53[19]);
  swift_bridgeObjectRelease();
  v113 = v53[20];
  v114 = v50 + v113;
  v115 = v51 + v113;
  v116 = *(void **)(v50 + v113 + 24);
  if (!v116)
  {
LABEL_69:
    v119 = *(_OWORD *)(v115 + 16);
    *(_OWORD *)v114 = *(_OWORD *)v115;
    *(_OWORD *)(v114 + 16) = v119;
    v120 = *(_OWORD *)(v115 + 48);
    *(_OWORD *)(v114 + 32) = *(_OWORD *)(v115 + 32);
    *(_OWORD *)(v114 + 48) = v120;
    goto LABEL_70;
  }
  v117 = *(_QWORD *)(v115 + 24);
  if (!v117)
  {
    sub_249E02590(v114);
    goto LABEL_69;
  }
  *(_OWORD *)v114 = *(_OWORD *)v115;
  *(_DWORD *)(v114 + 16) = *(_DWORD *)(v115 + 16);
  *(_QWORD *)(v114 + 24) = v117;

  *(_QWORD *)(v114 + 32) = *(_QWORD *)(v115 + 32);
  swift_release();
  *(_QWORD *)(v114 + 40) = *(_QWORD *)(v115 + 40);
  swift_bridgeObjectRelease();
  v118 = *(_QWORD *)(v115 + 56);
  *(_QWORD *)(v114 + 48) = *(_QWORD *)(v115 + 48);
  *(_QWORD *)(v114 + 56) = v118;
  swift_bridgeObjectRelease();
LABEL_70:
  v121 = v53[21];
  v122 = (_QWORD *)(v50 + v121);
  v123 = v51 + v121;
  v124 = *(_QWORD *)(v51 + v121 + 8);
  *v122 = *(_QWORD *)(v51 + v121);
  v122[1] = v124;
  swift_bridgeObjectRelease();
  v122[2] = *(_QWORD *)(v123 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v50 + v53[22]) = *(_QWORD *)(v51 + v53[22]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v50 + v53[23]) = *(_BYTE *)(v51 + v53[23]);
  *(_QWORD *)(a1 + v134[15]) = *(_QWORD *)(v68 + v134[15]);
  swift_release();
  *(_QWORD *)(a1 + v134[16]) = *(_QWORD *)(v68 + v134[16]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DefinitionSession()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EA3D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_249F1E8D8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for GenerationRecipe(0);
    v10 = a1 + *(int *)(a3 + 56);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for DefinitionSession()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EA3E30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_249F1E8D8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for GenerationRecipe(0);
    v12 = a1 + *(int *)(a4 + 56);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_249EA3ED4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_249F1E8D8();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for GenerationRecipe(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefinitionSession.Error()
{
  return &type metadata for DefinitionSession.Error;
}

ValueMetadata *type metadata accessor for DefinitionSession.DrawOnImageConfiguration()
{
  return &type metadata for DefinitionSession.DrawOnImageConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for DefinitionSession.EmojiRetoningConfiguration(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int16 v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_WORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for DefinitionSession.EmojiRetoningConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  void *v6;
  id v7;

  v4 = *(void **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5;
  v7 = v4;

  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for DefinitionSession.EmojiRetoningConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;

  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefinitionSession.EmojiRetoningConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefinitionSession.EmojiRetoningConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefinitionSession.EmojiRetoningConfiguration()
{
  return &type metadata for DefinitionSession.EmojiRetoningConfiguration;
}

uint64_t storeEnumTagSinglePayload for DefinitionSession.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249EA418C + 4 * byte_249F2F099[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249EA41C0 + 4 * byte_249F2F094[v4]))();
}

uint64_t sub_249EA41C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EA41C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EA41D0);
  return result;
}

uint64_t sub_249EA41DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EA41E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249EA41E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EA41F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefinitionSession.CodingKeys()
{
  return &type metadata for DefinitionSession.CodingKeys;
}

ValueMetadata *type metadata accessor for DefinitionSession.Error.CodingKeys()
{
  return &type metadata for DefinitionSession.Error.CodingKeys;
}

uint64_t _s16VisualGeneration17DefinitionSessionV5ErrorO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_249EA4260 + 4 * byte_249F2F09E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_249EA4280 + 4 * byte_249F2F0A3[v4]))();
}

_BYTE *sub_249EA4260(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_249EA4280(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EA4288(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EA4290(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EA4298(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EA42A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DefinitionSession.Error.ImageAssignmentErrorCodingKeys()
{
  return &type metadata for DefinitionSession.Error.ImageAssignmentErrorCodingKeys;
}

unint64_t sub_249EA42C0()
{
  unint64_t result;

  result = qword_2578DD320;
  if (!qword_2578DD320)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F490, &type metadata for DefinitionSession.Error.ImageAssignmentErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD320);
  }
  return result;
}

unint64_t sub_249EA4308()
{
  unint64_t result;

  result = qword_2578DD328;
  if (!qword_2578DD328)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F548, &type metadata for DefinitionSession.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD328);
  }
  return result;
}

unint64_t sub_249EA4350()
{
  unint64_t result;

  result = qword_2578DD330;
  if (!qword_2578DD330)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F638, &type metadata for DefinitionSession.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD330);
  }
  return result;
}

unint64_t sub_249EA4398()
{
  unint64_t result;

  result = qword_2578DD338;
  if (!qword_2578DD338)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F570, &type metadata for DefinitionSession.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD338);
  }
  return result;
}

unint64_t sub_249EA43E0()
{
  unint64_t result;

  result = qword_2578DD340;
  if (!qword_2578DD340)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F598, &type metadata for DefinitionSession.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD340);
  }
  return result;
}

unint64_t sub_249EA4428()
{
  unint64_t result;

  result = qword_2578DD348;
  if (!qword_2578DD348)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F400, &type metadata for DefinitionSession.Error.ImageAssignmentErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD348);
  }
  return result;
}

unint64_t sub_249EA4470()
{
  unint64_t result;

  result = qword_2578DD350;
  if (!qword_2578DD350)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F428, &type metadata for DefinitionSession.Error.ImageAssignmentErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD350);
  }
  return result;
}

unint64_t sub_249EA44B8()
{
  unint64_t result;

  result = qword_2578DD358;
  if (!qword_2578DD358)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F4B8, &type metadata for DefinitionSession.Error.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD358);
  }
  return result;
}

unint64_t sub_249EA4500()
{
  unint64_t result;

  result = qword_2578DD360;
  if (!qword_2578DD360)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F4E0, &type metadata for DefinitionSession.Error.CodingKeys);
    atomic_store(result, &qword_2578DD360);
  }
  return result;
}

uint64_t sub_249EA4544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        __asm { BR              X9 }
      }
    }
  }
  return 0;
}

uint64_t sub_249EA4798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for DefinitionSession();
  v2 = *(int *)(v1 + 48);
  if (!*(_QWORD *)(v0 + v2 + 8))
    __asm { BR              X11 }
  return *(_QWORD *)(v0 + v2) & 1;
}

uint64_t sub_249EA4870(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000249F384B0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_249EA48F4()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_249EA493C(uint64_t a1)
{
  uint64_t v1;

  sub_249E9F8E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_249EA4944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD388);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_249EA49BC(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578DD388) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_249E9FAF8(a1, a2, (int)v2 + (int)v6, *(id *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_249EA4A38()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_249EA4A5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    if (v1 == 1)
      goto LABEL_6;
    swift_release();
  }
  if (*(_QWORD *)(v0 + 32))
    swift_release();
LABEL_6:
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_249EA4AA8(uint64_t a1)
{
  uint64_t v1;

  return sub_249E9EEC4(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_249EA4ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;

  v2 = type metadata accessor for AugmentedPrompt();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D73B8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_249F1E6B0();
  MEMORY[0x24BDAC7A8](v11);
  sub_249F1E6A4();
  sub_249F1E65C();
  v12 = *(_QWORD *)(a1 + 16);
  v21 = a1;
  if (v12)
  {
    v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v23 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    sub_249DC091C(a1 + v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v24(v10, 0, 1, v2);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    v25 = v2;
    v22 = v14;
    if (v14(v10, 1, v2) != 1)
    {
      sub_249D9E308((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
      sub_249F1E650();
      sub_249D9BBEC((unint64_t *)&qword_2578D73D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC588]);
      sub_249F1E62C();
      sub_249DC05A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
      v15 = v12 - 1;
      if (v15)
      {
        v16 = v21 + v23 + v13;
        while (1)
        {
          sub_249DC091C(v16, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
          v17 = v25;
          v24(v10, 0, 1, v25);
          if (v22(v10, 1, v17) == 1)
            break;
          sub_249D9E308((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
          sub_249F1E6A4();
          v18 = (uint64_t)v26;
          sub_249F1E65C();
          sub_249F1E62C();
          sub_249DC05A8(v18, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
          sub_249F1E62C();
          sub_249DC05A8((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AugmentedPrompt);
          v16 += v23;
          if (!--v15)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v24(v10, 1, 1, v25);
      }
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
    v19(v10, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EA4DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  return swift_task_switch();
}

uint64_t sub_249EA4DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64B8);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_249EA4EAC;
  return sub_249F1FC58();
}

uint64_t sub_249EA4EAC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_249EA4F18()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249EA4F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D62B8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249DCC274(a1, (uint64_t)v9, &qword_2578D62B8);
  v10 = sub_249F1F604();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_249DCC2FC((uint64_t)v9, &qword_2578D62B8);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_249F1F5B0();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_249F1F5F8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64B8);
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

void sub_249EA50E0()
{
  sub_249F1FA84();
  sub_249F2003C();
  swift_bridgeObjectRelease();
  sub_249F1F460();
  sub_249F1FBD4();
  __break(1u);
}

void sub_249EA5188()
{
  sub_249F1FA84();
  sub_249F2003C();
  swift_bridgeObjectRelease();
  sub_249F1F460();
  sub_249F1FBD4();
  __break(1u);
}

uint64_t sub_249EA5230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtCC16VisualGeneration14ImageGenerator14GenerationTask_id;
  v2 = sub_249F1E8D8();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtCC16VisualGeneration14ImageGenerator14GenerationTask_requestIdentifier, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_249EA52A8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtCC16VisualGeneration14ImageGenerator14GenerationTask_id;
  v4 = sub_249F1E8D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_249EA52F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2) & 1;
}

uint64_t sub_249EA533C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_249EA5384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[17] = a3;
  v8[18] = a4;
  v8[15] = a1;
  v8[16] = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD590);
  v8[23] = v9;
  v8[24] = *(_QWORD *)(v9 - 8);
  v8[25] = swift_task_alloc();
  v10 = *(_QWORD *)(type metadata accessor for GenerationRecipe(0) - 8);
  v8[26] = v10;
  v8[27] = *(_QWORD *)(v10 + 64);
  v8[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D62B8);
  v8[29] = swift_task_alloc();
  v11 = sub_249F1E8D8();
  v8[30] = v11;
  v8[31] = *(_QWORD *)(v11 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_249EA5478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 232);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v2, *(_QWORD *)(v0 + 136), v3);
  v8(v1, v7, v3);
  sub_249D9E1E4(v6, v0 + 16);
  type metadata accessor for ImageGenerator.GenerationTask();
  v9 = swift_allocObject();
  *(_QWORD *)(v0 + 272) = v9;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v10(v9 + OBJC_IVAR____TtCC16VisualGeneration14ImageGenerator14GenerationTask_id, v2, v3);
  v10(v9 + OBJC_IVAR____TtCC16VisualGeneration14ImageGenerator14GenerationTask_requestIdentifier, v1, v3);
  sub_249D9E174((__int128 *)(v0 + 16), v9 + 16);
  v11 = sub_249F1F604();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  sub_249DCC274(v17, v0 + 56, &qword_2578D73D8);
  sub_249DC091C(v18, v19, type metadata accessor for GenerationRecipe);
  v12 = (*(unsigned __int8 *)(v20 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v13 = (v21 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  sub_249EA68B4(v0 + 56, v14 + 32);
  sub_249D9E308(v19, v14 + v12, type metadata accessor for GenerationRecipe);
  *(_QWORD *)(v14 + v13) = v22;
  *(_QWORD *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) = v9;
  swift_retain();
  swift_retain();
  sub_249EA4F4C(v5, (uint64_t)&unk_2578DD5A0, v14);
  sub_249DCC2FC(v5, &qword_2578D62B8);
  *(_QWORD *)(v0 + 96) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
  sub_249F1F67C();
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v15;
  *v15 = v0;
  v15[1] = sub_249EA5714;
  return sub_249F1F694();
}

uint64_t sub_249EA5714()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_249EA5784()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    sub_249E5E050(v1);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v2;
    *v2 = v0;
    v2[1] = sub_249EA5898;
    return sub_249F1F694();
  }
  else
  {
    v4 = *(_QWORD **)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    swift_release();
    *v4 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_249EA5898()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_249EA5900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249EA5994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[59] = a6;
  v7[60] = a7;
  v7[57] = a4;
  v7[58] = a5;
  v7[56] = a1;
  v8 = type metadata accessor for GeneratedImage();
  v7[61] = v8;
  v7[62] = *(_QWORD *)(v8 - 8);
  v7[63] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_249EA59FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  int *v17;

  v1 = v0[58];
  sub_249DCC274(v0[57], (uint64_t)(v0 + 43), &qword_2578D73D8);
  v0[64] = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  *(_QWORD *)(inited + 32) = 0x657069636572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = type metadata accessor for GenerationRecipe(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
  sub_249DC091C(v1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for GenerationRecipe);
  v4 = sub_249DAE8D4(inited);
  v5 = sub_249EA69C0(v4);
  swift_bridgeObjectRelease();
  v6 = sub_249DB2820(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = sub_249DB2820((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[2 * v8];
  *((_BYTE *)v9 + 32) = 2;
  v9[5] = v5;
  v0[65] = v6;
  sub_249DCC274(v0[57], (uint64_t)(v0 + 28), &qword_2578D73D8);
  v10 = v0[31];
  if (v10)
  {
    v12 = v0[59];
    v11 = v0[60];
    v13 = v0[32];
    __swift_project_boxed_opaque_existential_1(v0 + 28, v0[31]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v12, v11, v10, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 28));
  }
  else
  {
    sub_249DCC2FC((uint64_t)(v0 + 28), &qword_2578D73D8);
  }
  v14 = *(int **)(*(_QWORD *)v0[59] + 160);
  v17 = (int *)((char *)v14 + *v14);
  v15 = (_QWORD *)swift_task_alloc();
  v0[66] = v15;
  *v15 = v0;
  v15[1] = sub_249EA5C00;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v17)(v0[58], v0[60], v0[57]);
}

uint64_t sub_249EA5C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 536) = a1;
  *(_QWORD *)(v3 + 544) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_249EA5C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  char v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  id v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  id v60;
  char v61;
  uint64_t v62;

  v1 = v0 + 344;
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(unsigned __int8 *)(v2 + 56);
  v4 = *(_BYTE *)(v2 + 62);
  if (v3 == 1)
  {
    if ((v4 & 1) != 0)
      v5 = 7;
    else
      v5 = 5;
  }
  else
  {
    if ((v4 & 1) == 0)
      goto LABEL_22;
    v5 = 6;
  }
  type metadata accessor for ImageChecker();
  inited = swift_initStaticObject();
  v7 = inited;
  if (*(_QWORD *)(inited + 24) != v5)
  {
    v8 = *(void **)(inited + 16);
    *(_QWORD *)(inited + 16) = 0;

  }
  v9 = *(_QWORD *)(v0 + 536);
  *(_QWORD *)(v7 + 24) = v5;
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v49 = (_QWORD *)(v0 + 264);
    v50 = v0 + 344;
    v53 = (_QWORD *)(v0 + 416);
    v11 = *(_QWORD *)(v0 + 496);
    v52 = *(_QWORD *)(v0 + 488);
    v12 = *(_QWORD *)(v0 + 536)
        + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v55 = *(_QWORD *)(v11 + 72);
    v56 = *(_QWORD *)(v0 + 504);
    v13 = *(_QWORD *)(v0 + 544);
    v57 = *(_QWORD **)(v0 + 520);
    swift_bridgeObjectRetain();
    v54 = v0 + 384;
    v51 = v0;
    while (1)
    {
      v14 = *(id **)(v0 + 504);
      sub_249DC091C(v12, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for GeneratedImage);
      v15 = *(_BYTE *)(v56 + 8);
      v60 = *v14;
      v61 = v15;
      v16 = v60;
      sub_249DDD43C((uint64_t)&v60, &v58);
      v17 = v13;
      if (v13)
        break;

      v18 = v59;
      if (v59)
      {
        v19 = v7;
        v20 = *(_QWORD *)(v0 + 504);
        v21 = swift_initStackObject();
        *(_OWORD *)(v21 + 16) = xmmword_249F21910;
        *(_QWORD *)(v21 + 32) = 25705;
        *(_QWORD *)(v21 + 40) = 0xE200000000000000;
        v22 = v20 + *(int *)(v52 + 20);
        v23 = type metadata accessor for ImageProvenance();
        *(_QWORD *)(v21 + 48) = sub_249F1E8A8();
        *(_QWORD *)(v21 + 56) = v24;
        *(_QWORD *)(v21 + 72) = MEMORY[0x24BEE0D00];
        strcpy((char *)(v21 + 80), "representation");
        *(_BYTE *)(v21 + 95) = -18;
        v25 = *(_QWORD *)(v22 + *(int *)(v23 + 24));
        *(_QWORD *)(v21 + 120) = MEMORY[0x24BEE1768];
        *(_QWORD *)(v21 + 96) = v25;
        v26 = sub_249DAE8D4(v21);
        *(_QWORD *)(v0 + 408) = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7068);
        *(_QWORD *)(v0 + 384) = v26;
        sub_249DCA7E4(v54, (uint64_t)v53);
        JSONValue.init(_:)(v53, &v62);
        v27 = v62;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v60 = v18;
        sub_249DD1B3C(v27, 0x69746172656E6567, 0xEA00000000006E6FLL, isUniquelyReferenced_nonNull_native);
        v29 = v60;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v54);
        if (v29)
        {
          v30 = v58;
          v7 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v31 = v57;
          else
            v31 = sub_249DB2820(0, v57[2] + 1, 1, v57);
          v33 = v31[2];
          v32 = v31[3];
          if (v33 >= v32 >> 1)
            v31 = sub_249DB2820((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
          v31[2] = v33 + 1;
          v57 = v31;
          v34 = &v31[2 * v33];
          *((_BYTE *)v34 + 32) = v30;
          v34[5] = v29;
          v0 = v51;
        }
        else
        {
          v7 = v19;
          v0 = v51;
        }
      }
      sub_249DC05A8(*(_QWORD *)(v0 + 504), (uint64_t (*)(_QWORD))type metadata accessor for GeneratedImage);
      v13 = 0;
      v12 += v55;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        v1 = v50;
        v35 = (uint64_t)v57;
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease();
    sub_249DC05A8(*(_QWORD *)(v0 + 504), (uint64_t (*)(_QWORD))type metadata accessor for GeneratedImage);
    swift_bridgeObjectRelease();
    v43 = *(_QWORD *)(v0 + 456);
    sub_249EA62B4((uint64_t)v57, v50);
    swift_bridgeObjectRelease();
    sub_249DCC2FC(v50, &qword_2578D73D8);
    sub_249DCC274(v43, (uint64_t)v49, &qword_2578D73D8);
    v44 = *(_QWORD *)(v0 + 288);
    if (v44)
    {
      v46 = *(_QWORD *)(v0 + 472);
      v45 = *(_QWORD *)(v0 + 480);
      v47 = *(_QWORD *)(v0 + 296);
      __swift_project_boxed_opaque_existential_1(v49, *(_QWORD *)(v0 + 288));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 24))(v46, v45, v17, v44, v47);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    }
    else
    {
      sub_249DCC2FC((uint64_t)v49, &qword_2578D73D8);
    }
    swift_willThrow();
    swift_task_dealloc();
    v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
LABEL_22:
  v35 = *(_QWORD *)(v0 + 520);
LABEL_25:
  v36 = *(_QWORD *)(v0 + 456);
  sub_249EA62B4(v35, v1);
  swift_bridgeObjectRelease();
  sub_249DCC2FC(v1, &qword_2578D73D8);
  sub_249DCC274(v36, v0 + 304, &qword_2578D73D8);
  v37 = *(_QWORD *)(v0 + 328);
  if (v37)
  {
    v38 = *(_QWORD *)(v0 + 536);
    v40 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(v0 + 480);
    v41 = *(_QWORD *)(v0 + 336);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v39, v38, v37, v41);
    __swift_destroy_boxed_opaque_existential_1(v0 + 304);
  }
  else
  {
    sub_249DCC2FC(v0 + 304, &qword_2578D73D8);
  }
  **(_QWORD **)(v0 + 448) = *(_QWORD *)(v0 + 536);
  swift_task_dealloc();
  v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

uint64_t sub_249EA61B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 456);
  sub_249EA62B4(*(_QWORD *)(v0 + 520), v0 + 344);
  swift_bridgeObjectRelease();
  sub_249DCC2FC(v0 + 344, &qword_2578D73D8);
  sub_249DCC274(v2, v0 + 264, &qword_2578D73D8);
  v3 = *(_QWORD *)(v0 + 288);
  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 472);
    v4 = *(_QWORD *)(v0 + 480);
    v6 = *(_QWORD *)(v0 + 296);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 288));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 24))(v5, v4, v1, v3, v6);
    __swift_destroy_boxed_opaque_existential_1(v0 + 264);
  }
  else
  {
    sub_249DCC2FC(v0 + 264, &qword_2578D73D8);
  }
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249EA62B4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(result + 16))
  {
    v2 = result;
    sub_249DCC274(a2, (uint64_t)v5, &qword_2578D73D8);
    if (v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD5A8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD5B0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v8 + 1))
        {
          sub_249D9E174(&v7, (uint64_t)v10);
          v3 = v11;
          v4 = v12;
          __swift_project_boxed_opaque_existential_1(v10, v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v2, v3, v4);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
        }
      }
      else
      {
        v9 = 0;
        v7 = 0u;
        v8 = 0u;
      }
    }
    else
    {
      sub_249DCC2FC((uint64_t)v5, &qword_2578D73D8);
      v7 = 0u;
      v8 = 0u;
      v9 = 0;
    }
    return sub_249DCC2FC((uint64_t)&v7, &qword_2578D7DF8);
  }
  return result;
}

uint64_t sub_249EA63C4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = *v0;
  return swift_task_switch();
}

uint64_t sub_249EA63E0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  if (qword_2578D5D78 != -1)
    swift_once();
  v1 = sub_249F1EF38();
  __swift_project_value_buffer(v1, (uint64_t)qword_2578FF3F0);
  v2 = sub_249F1EF20();
  v3 = sub_249F1F820();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315138;
    v6 = sub_249F2003C();
    *(_QWORD *)(v0 + 16) = sub_249E68CA8(v6, v7, &v9);
    sub_249F1F9AC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v2, v3, "%s must provide an override for generateImages(from:task:requestIdentifier:delegate:)", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v5, -1, -1);
    MEMORY[0x24BD06618](v4, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
}

uint64_t type metadata accessor for ImageGenerator()
{
  return objc_opt_self();
}

uint64_t sub_249EA6594()
{
  return type metadata accessor for ImageGenerator.GenerationTask();
}

uint64_t type metadata accessor for ImageGenerator.GenerationTask()
{
  uint64_t result;

  result = qword_2578DD4E0;
  if (!qword_2578DD4E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249EA65D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1E8D8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_249EA6650()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v1 = (int *)type metadata accessor for GenerationRecipe(0);
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  v3 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v2 + v1[8];
  v5 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v7 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(v4 + *(int *)(v5 + 20), v6);
    v8 = (uint64_t *)(v4 + *(int *)(v5 + 24));
    if (v8[2])
    {
      sub_249DC3C24(*v8, v8[1]);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(void **)(v3 + v1[14] + 24);
  if (v9)
  {

    swift_release();
  }
  v10 = *(void **)(v3 + v1[15] + 24);
  if (v10)
  {

    swift_release();
  }
  v11 = *(void **)(v3 + v1[16] + 24);
  if (v11)
  {

    swift_release();
  }
  v12 = *(void **)(v3 + v1[17] + 24);
  if (v12)
  {

    swift_release();
  }
  v13 = v3 + v1[18];
  v14 = *(void **)(v13 + 24);
  if (v14)
  {

    swift_release();
  }
  v15 = *(void **)(v13 + 64);
  if (v15)
  {

    swift_release();
  }
  swift_bridgeObjectRelease();
  v16 = *(void **)(v3 + v1[20] + 24);
  if (v16)
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_249EA68B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D73D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EA68FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for GenerationRecipe(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + 32;
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v1 + v6);
  v12 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_249DAFCF8;
  return sub_249EA5994(a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_249EA69C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD v24[4];
  _BYTE v25[32];
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C68);
  result = sub_249F1FC04();
  v4 = (_QWORD *)result;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v23 = (unint64_t)(v7 + 63) >> 6;
  v10 = result + 64;
  if ((v8 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    sub_249DCA7E4(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v25);
    sub_249DCA7E4((uint64_t)v25, (uint64_t)v24);
    swift_bridgeObjectRetain();
    JSONValue.init(_:)(v24, &v26);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      return (uint64_t)v4;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v19 = (_QWORD *)(v4[6] + 16 * i);
    *v19 = v18;
    v19[1] = v17;
    *(_QWORD *)(v4[7] + 8 * i) = v26;
    v20 = v4[2];
    v13 = __OFADD__(v20, 1);
    v21 = v20 + 1;
    if (v13)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v21;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v13 = __OFADD__(v5++, 1);
    if (v13)
      goto LABEL_27;
    if (v5 >= v23)
      return (uint64_t)v4;
    v14 = *(_QWORD *)(v22 + 8 * v5);
    if (!v14)
      break;
LABEL_15:
    v9 = (v14 - 1) & v14;
  }
  v15 = v5 + 1;
  if (v5 + 1 >= v23)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v22 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v5 + 2;
  if (v5 + 2 >= v23)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v22 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v5 + 3;
  if (v5 + 3 >= v23)
    return (uint64_t)v4;
  v14 = *(_QWORD *)(v22 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v5 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v23)
      return (uint64_t)v4;
    v14 = *(_QWORD *)(v22 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_249EA6BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  CFMutableDataRef Mutable;
  __CFData *v13;
  __CFString *v14;
  CGImageDestination *v15;
  __CFData *v16;
  uint64_t v17;
  uint64_t v19;

  v1 = sub_249F1EE0C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)v0;
  if (*(_BYTE *)(v0 + 8))
  {
    if (*(_BYTE *)(v0 + 8) == 1)
    {
      v6 = objc_allocWithZone(MEMORY[0x24BDBF648]);
      v7 = v5;
      v8 = objc_msgSend(v6, sel_init);
      objc_msgSend(v7, sel_extent);
      v9 = objc_msgSend(v8, sel_createCGImage_fromRect_, v7);
    }
    else
    {
      v10 = objc_allocWithZone(MEMORY[0x24BDBF660]);
      v8 = v5;
      v11 = objc_msgSend(v10, sel_initWithCVPixelBuffer_, v8);
      v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
      objc_msgSend(v11, sel_extent);
      v9 = objc_msgSend(v7, sel_createCGImage_fromRect_, v11);

    }
    if (!v9)
      return 0;
  }
  else
  {
    v9 = v5;
  }
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {

    return 0;
  }
  v13 = Mutable;
  sub_249F1EE00();
  sub_249F1EDF4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v14 = (__CFString *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v15 = CGImageDestinationCreateWithData(v13, v14, 1uLL, 0);

  if (!v15)
  {

    return 0;
  }
  CGImageDestinationAddImage(v15, (CGImageRef)v9, 0);
  if (!CGImageDestinationFinalize(v15))
  {

    return 0;
  }
  v16 = v13;
  v17 = sub_249F1E83C();

  return v17;
}

uint64_t storeEnumTagSinglePayload for AffineTransformImageScaler(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EA6E98 + 4 * byte_249F2F855[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EA6ECC + 4 * byte_249F2F850[v4]))();
}

uint64_t sub_249EA6ECC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EA6ED4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EA6EDCLL);
  return result;
}

uint64_t sub_249EA6EE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EA6EF0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EA6EF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EA6EFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AffineTransformImageScaler()
{
  return &type metadata for AffineTransformImageScaler;
}

uint64_t sub_249EA6F18(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 == v6 && v3 == v5;
  result = 1;
  if (!v7 && (a3 & 1) != 0)
  {
    if (v4 <= v3)
      v9 = v3;
    else
      v9 = v4;
    if (v6 <= v5)
      v10 = *a2;
    else
      v10 = a2[1];
    if (v4 < v3)
      v3 = v4;
    if (v6 < v5)
      v5 = a2[1];
    v11 = v3 >= v5;
    return v9 >= v10 && v11;
  }
  return result;
}

uint64_t sub_249EA6F68(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v4;
  *(_BYTE *)(v3 + 96) = *((_BYTE *)a2 + 8);
  *(_OWORD *)(v3 + 80) = *a3;
  return swift_task_switch();
}

id sub_249EA6F94()
{
  uint64_t v0;
  void *v1;
  id result;
  double v3;
  double v4;
  uint64_t v6;
  CGImage *v7;
  size_t Width;
  size_t Height;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  id v28;
  __int128 v29;
  __int128 v30;
  id v31;
  CGAffineTransform v32;

  if (!*(_BYTE *)(v0 + 96))
  {
    v7 = (CGImage *)*(id *)(v0 + 72);
    Width = CGImageGetWidth(v7);
    Height = CGImageGetHeight(v7);
    goto LABEL_15;
  }
  if (*(_BYTE *)(v0 + 96) != 1)
  {
    v7 = (CGImage *)*(id *)(v0 + 72);
    Width = CVPixelBufferGetWidth(v7);
    Height = CVPixelBufferGetHeight(v7);
LABEL_15:
    v6 = Height;
    v10 = *(_QWORD *)(v0 + 80);

    if (Width != v10)
    {
LABEL_18:
      if (!*(_BYTE *)(v0 + 96))
      {
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCGImage_, *(_QWORD *)(v0 + 72));
        goto LABEL_24;
      }
      if (*(_BYTE *)(v0 + 96) != 1)
      {
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVPixelBuffer_, *(_QWORD *)(v0 + 72));
        goto LABEL_24;
      }
      v1 = *(void **)(v0 + 72);
LABEL_21:
      v15 = v1;
LABEL_24:
      v16 = *(_QWORD *)(v0 + 64);
      v17 = *(_QWORD *)(v0 + 80);
      v18 = *(_QWORD *)(v0 + 88);
      v19 = v15;
      objc_msgSend(v19, sel_extent);
      v21 = v20;
      v23 = v22;
      CGAffineTransformMakeTranslation(&v32, -v24, -v25);
      v26 = *(_OWORD *)&v32.c;
      v27 = *(_OWORD *)&v32.tx;
      *(_OWORD *)(v0 + 16) = *(_OWORD *)&v32.a;
      *(_OWORD *)(v0 + 32) = v26;
      *(_OWORD *)(v0 + 48) = v27;
      v28 = objc_msgSend(v19, sel_imageByApplyingTransform_, v0 + 16);

      CGAffineTransformMakeScale(&v32, (double)v17 / v21, (double)v18 / v23);
      v29 = *(_OWORD *)&v32.c;
      v30 = *(_OWORD *)&v32.tx;
      *(_OWORD *)(v0 + 16) = *(_OWORD *)&v32.a;
      *(_OWORD *)(v0 + 32) = v29;
      *(_OWORD *)(v0 + 48) = v30;
      v31 = objc_msgSend(v28, sel_imageByApplyingTransform_, v0 + 16);

      *(_QWORD *)v16 = v31;
      *(_BYTE *)(v16 + 8) = 1;
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_16:
    if (v6 == *(_QWORD *)(v0 + 88))
    {
      v11 = *(_BYTE *)(v0 + 96);
      v13 = *(_QWORD *)(v0 + 64);
      v12 = *(void **)(v0 + 72);
      *(_QWORD *)v13 = v12;
      *(_BYTE *)(v13 + 8) = v11;
      v14 = v12;
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_18;
  }
  v1 = *(void **)(v0 + 72);
  result = objc_msgSend(v1, sel_extent);
  if (v3 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((*(_QWORD *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_28;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 9.22337204e18)
  {
    if (*(_QWORD *)(v0 + 80) != (uint64_t)v3)
      goto LABEL_21;
    v6 = (uint64_t)v4;
    goto LABEL_16;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_249EA721C(uint64_t *a1, uint64_t *a2)
{
  char *v2;

  return sub_249EA6F18(a1, a2, *v2);
}

uint64_t sub_249EA7224()
{
  return sub_249E590B8();
}

uint64_t _s23GenerationConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s23GenerationConfigurationVwca(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  return a1;
}

__n128 __swift_memcpy55_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 47) = *(_QWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s23GenerationConfigurationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  return a1;
}

uint64_t _s23GenerationConfigurationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 55))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23GenerationConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 54) = 0;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 55) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 55) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s23GenerationConfigurationVMa()
{
  return &_s23GenerationConfigurationVN;
}

uint64_t sub_249EA74A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249EA74DC + 4 * byte_249F2F8A0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_249EA74DC()
{
  return 0xD000000000000018;
}

unint64_t sub_249EA7544()
{
  return 0xD000000000000029;
}

void sub_249EA755C()
{
  JUMPOUT(0x249EA7570);
}

uint64_t sub_249EA757C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249EA75B4 + 4 * byte_249F2F8A8[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_249EA75B4()
{
  return 0xD000000000000018;
}

unint64_t sub_249EA761C()
{
  return 0xD000000000000029;
}

void sub_249EA7634()
{
  JUMPOUT(0x249EA7648);
}

void sub_249EA7654(char *a1)
{
  sub_249E393DC(*a1);
}

void sub_249EA7660()
{
  char *v0;

  sub_249DCD6BC(0, *v0);
}

void sub_249EA766C(uint64_t a1)
{
  char *v1;

  sub_249E48FD4(a1, *v1);
}

void sub_249EA7674(uint64_t a1)
{
  char *v1;

  sub_249DCD6BC(a1, *v1);
}

uint64_t sub_249EA767C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_249EA820C();
  *a1 = result;
  return result;
}

uint64_t sub_249EA76A8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_249EA74A4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_249EA76D0()
{
  unsigned __int8 *v0;

  return sub_249EA757C(*v0);
}

uint64_t sub_249EA76D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_249EA820C();
  *a1 = result;
  return result;
}

void sub_249EA76FC(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_249EA7708()
{
  sub_249EA7D6C();
  return sub_249F20024();
}

uint64_t sub_249EA7730()
{
  sub_249EA7D6C();
  return sub_249F20030();
}

uint64_t sub_249EA7758(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v10[6];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD5C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = v7;
  v18 = *(unsigned __int8 *)(v1 + 32);
  v11 = *(_QWORD *)(v1 + 40);
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 48);
  v10[4] = *(unsigned __int8 *)(v1 + 50);
  v10[5] = v7;
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 51);
  v10[2] = *(unsigned __int8 *)(v1 + 52);
  v10[3] = v7;
  v10[1] = *(unsigned __int8 *)(v1 + 53);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EA7D6C();
  sub_249F20018();
  LOBYTE(v15) = 0;
  v8 = v14;
  sub_249F1FD90();
  if (!v8)
  {
    v15 = v13;
    v16 = v12;
    v17 = v18;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD5D0);
    sub_249EA7DB0();
    sub_249F1FDCC();
    LOBYTE(v15) = 2;
    sub_249F1FDC0();
    LOBYTE(v15) = 3;
    sub_249F1FD9C();
    LOBYTE(v15) = 4;
    sub_249F1FD9C();
    LOBYTE(v15) = 5;
    sub_249F1FD9C();
    LOBYTE(v15) = 6;
    sub_249F1FD9C();
    LOBYTE(v15) = 7;
    sub_249F1FD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_249EA79DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  char v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD5E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EA7D6C();
  sub_249F1FFF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v29) = 0;
  v10 = sub_249F1FCC4();
  v12 = v11;
  v33 = 1;
  sub_249E59584();
  swift_bridgeObjectRetain();
  sub_249F1FCB8();
  v32 = v31;
  if (v31 == 1)
  {
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v27 = v29;
    v28 = v30;
  }
  LOBYTE(v29) = 2;
  v13 = sub_249F1FCAC();
  if ((v14 & 1) != 0)
    v15 = 1;
  else
    v15 = v13;
  v26 = v15;
  LOBYTE(v29) = 3;
  v16 = sub_249F1FC88();
  v24 = v16 == 2;
  v25 = v16;
  LOBYTE(v29) = 4;
  v23 = sub_249F1FC88();
  LOBYTE(v29) = 5;
  v22 = sub_249F1FC88();
  LOBYTE(v29) = 6;
  v21 = sub_249F1FC88();
  LOBYTE(v29) = 7;
  v17 = sub_249F1FC88();
  v20 = v24 | v25;
  v24 = v22 & 1;
  v25 = v23 & 1;
  v23 = (v21 == 2) | v21;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v12;
  v18 = v28;
  *(_QWORD *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 32) = v32;
  *(_QWORD *)(a2 + 40) = v26;
  *(_BYTE *)(a2 + 48) = v20 & 1;
  *(_BYTE *)(a2 + 49) = 1;
  *(_BYTE *)(a2 + 50) = v25;
  *(_BYTE *)(a2 + 51) = v24;
  *(_BYTE *)(a2 + 52) = v23 & 1;
  *(_WORD *)(a2 + 53) = (v17 == 2) | v17 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EA7D40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_249EA79DC(a1, a2);
}

uint64_t sub_249EA7D54(_QWORD *a1)
{
  return sub_249EA7758(a1);
}

unint64_t sub_249EA7D6C()
{
  unint64_t result;

  result = qword_2578DD5C8;
  if (!qword_2578DD5C8)
  {
    result = MEMORY[0x24BD06528](&unk_249F2FA4C, &_s23GenerationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2578DD5C8);
  }
  return result;
}

unint64_t sub_249EA7DB0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2578DD5D8;
  if (!qword_2578DD5D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DD5D0);
    v2 = sub_249E595C8();
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2578DD5D8);
  }
  return result;
}

uint64_t sub_249EA7E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t result;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 v48;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a1 + 49);
  v8 = *(unsigned __int8 *)(a1 + 50);
  v9 = *(unsigned __int8 *)(a1 + 51);
  v10 = *(_BYTE *)(a1 + 52);
  v11 = *(_BYTE *)(a1 + 53);
  v12 = *(unsigned __int8 *)(a1 + 54);
  v14 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v15 = *(unsigned __int8 *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(unsigned __int8 *)(a2 + 48);
  v18 = *(unsigned __int8 *)(a2 + 49);
  v19 = *(unsigned __int8 *)(a2 + 50);
  v20 = *(unsigned __int8 *)(a2 + 51);
  v21 = *(_BYTE *)(a2 + 52);
  v22 = *(_BYTE *)(a2 + 53);
  v23 = *(unsigned __int8 *)(a2 + 54);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    goto LABEL_4;
  v47 = *(unsigned __int8 *)(a2 + 51);
  v48 = *(_BYTE *)(a2 + 53);
  v44 = *(_QWORD *)(a1 + 16);
  v24 = *(_BYTE *)(a1 + 52);
  v41 = *(_QWORD *)(a2 + 40);
  v25 = *(_BYTE *)(a1 + 53);
  v42 = *(unsigned __int8 *)(a2 + 48);
  v43 = *(unsigned __int8 *)(a2 + 49);
  v26 = *(unsigned __int8 *)(a1 + 54);
  v40 = *(_BYTE *)(a1 + 32);
  v27 = *(unsigned __int8 *)(a1 + 51);
  v45 = *(unsigned __int8 *)(a2 + 50);
  v46 = *(unsigned __int8 *)(a1 + 50);
  v37 = *(unsigned __int8 *)(a2 + 32);
  v28 = *(unsigned __int8 *)(a1 + 49);
  v38 = *(_QWORD *)(a2 + 16);
  v39 = *(_QWORD *)(a2 + 24);
  v29 = *(unsigned __int8 *)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = *(unsigned __int8 *)(a2 + 54);
  v32 = *(_QWORD *)(a1 + 24);
  v33 = sub_249F1FE2C();
  v3 = v32;
  v19 = v45;
  v8 = v46;
  v20 = v47;
  v22 = v48;
  v23 = v31;
  v5 = v30;
  v6 = v29;
  v14 = v38;
  v13 = v39;
  v7 = v28;
  v15 = v37;
  v9 = v27;
  v4 = v40;
  v12 = v26;
  v17 = v42;
  v18 = v43;
  v11 = v25;
  v16 = v41;
  v10 = v24;
  v2 = v44;
  v34 = v33;
  result = 0;
  if ((v34 & 1) != 0)
  {
LABEL_4:
    if ((v4 & 1) != 0)
    {
      if (!v15)
        return 0;
    }
    else
    {
      result = 0;
      if ((v15 & 1) != 0 || v2 != v14 || v3 != v13)
        return result;
    }
    if (v5 != v16)
      return 0;
    result = 0;
    if (((v6 ^ v17) & 1) == 0 && ((v7 ^ v18) & 1) == 0 && ((v8 ^ v19) & 1) == 0 && ((v9 ^ v20) & 1) == 0)
    {
      if (((v11 ^ v22) & 1) != 0)
        v36 = 0;
      else
        v36 = v12 ^ v23 ^ 1;
      if (((v10 ^ v21) & 1) != 0)
        return 0;
      else
        return v36;
    }
  }
  return result;
}

uint64_t _s23GenerationConfigurationV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s23GenerationConfigurationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_249EA80B4 + 4 * byte_249F2F8B5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_249EA80E8 + 4 * byte_249F2F8B0[v4]))();
}

uint64_t sub_249EA80E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EA80F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EA80F8);
  return result;
}

uint64_t sub_249EA8104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EA810CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_249EA8110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EA8118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s23GenerationConfigurationV10CodingKeysOMa()
{
  return &_s23GenerationConfigurationV10CodingKeysON;
}

unint64_t sub_249EA8138()
{
  unint64_t result;

  result = qword_2578DD5E8;
  if (!qword_2578DD5E8)
  {
    result = MEMORY[0x24BD06528](&unk_249F2FA24, &_s23GenerationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2578DD5E8);
  }
  return result;
}

unint64_t sub_249EA8180()
{
  unint64_t result;

  result = qword_2578DD5F0;
  if (!qword_2578DD5F0)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F95C, &_s23GenerationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2578DD5F0);
  }
  return result;
}

unint64_t sub_249EA81C8()
{
  unint64_t result;

  result = qword_2578DD5F8;
  if (!qword_2578DD5F8)
  {
    result = MEMORY[0x24BD06528](&unk_249F2F984, &_s23GenerationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2578DD5F8);
  }
  return result;
}

uint64_t sub_249EA820C()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

unint64_t sub_249EA8254()
{
  return 0xD000000000000026;
}

void sub_249EA8270(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for UnavailableImageGenerator.Descriptor;
  *(_QWORD *)(a1 + 32) = &off_251B59BE0;
}

uint64_t sub_249EA8288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v0 = sub_249F1E734();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v13 - v5;
  sub_249F1E71C();
  sub_249E770D8();
  swift_allocError();
  v8 = v7;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  v9 = sub_249F1F394();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  *v8 = v9;
  v8[1] = v11;
  return swift_willThrow();
}

uint64_t sub_249EA8398()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_249F1E734();
  v0[2] = v1;
  v0[3] = *(_QWORD *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_249EA8404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  sub_249F1E71C();
  sub_249E770D8();
  swift_allocError();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  v7 = sub_249F1F394();
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  *v6 = v7;
  v6[1] = v9;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for UnavailableImageGenerator()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for UnavailableImageGenerator.Descriptor()
{
  return &type metadata for UnavailableImageGenerator.Descriptor;
}

uint64_t sub_249EA851C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v9 = 1;
    }
    else
    {
      v3 = (uint64_t *)(a1 + 32);
      v4 = (uint64_t *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v7 = *v3++;
        v6 = v7;
        v8 = *v4++;
        v13 = v8;
        v14 = v6;
        v9 = static JSONValue.== infix(_:_:)(&v14, &v13);
        v11 = v5-- != 0;
      }
      while ((v9 & 1) != 0 && v11);
    }
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_249EA85A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  unint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = v4 + (v3 << 6);
      v7 = *(_DWORD *)(v6 + 16);
      v8 = *(_QWORD **)(v6 + 24);
      v9 = *(_QWORD **)(v6 + 32);
      v10 = *(_QWORD **)(v6 + 40);
      v11 = *(_QWORD *)(v6 + 48);
      v12 = *(_QWORD *)(v6 + 56);
      v13 = v5 + (v3 << 6);
      v14 = *(_DWORD *)(v13 + 16);
      v16 = *(_QWORD **)(v13 + 24);
      v15 = *(_QWORD **)(v13 + 32);
      v18 = *(_QWORD **)(v13 + 40);
      v17 = *(_QWORD *)(v13 + 48);
      v19 = *(_QWORD *)(v13 + 56);
      if (*(_QWORD *)v6 == *(_QWORD *)v13 && *(_QWORD *)(v6 + 8) == *(_QWORD *)(v13 + 8))
      {
        if (v7 != v14)
          return 0;
      }
      else
      {
        v48 = *(_QWORD **)(v6 + 24);
        v49 = *(_QWORD **)(v13 + 32);
        v50 = *(_QWORD **)(v6 + 32);
        v51 = *(_QWORD **)(v13 + 40);
        v46 = *(_QWORD *)(v13 + 48);
        v47 = *(_QWORD **)(v6 + 40);
        v20 = v2;
        v21 = *(_QWORD *)(v13 + 56);
        v22 = *(_QWORD *)(v6 + 56);
        v23 = sub_249F1FE2C();
        result = 0;
        if ((v23 & 1) == 0)
          return result;
        v12 = v22;
        v19 = v21;
        v2 = v20;
        v17 = v46;
        v10 = v47;
        v9 = v50;
        v18 = v51;
        v8 = v48;
        v15 = v49;
        if (v7 != v14)
          return result;
      }
      v25 = v8[2];
      if (v25 != v16[2])
        return 0;
      if (v25)
        v26 = v8 == v16;
      else
        v26 = 1;
      if (!v26)
      {
        if ((v16[4] ^ v8[4]) >> 14 || (v16[5] ^ v8[5]) >> 14)
          return 0;
        v31 = v8 + 7;
        v32 = v16 + 7;
        while (--v25)
        {
          if (!((*(v32 - 1) ^ *(v31 - 1)) >> 14))
          {
            v34 = *v31;
            v31 += 2;
            v33 = v34;
            v35 = *v32;
            v32 += 2;
            if ((v35 ^ v33) < 0x4000)
              continue;
          }
          return 0;
        }
      }
      v27 = v9[2];
      if (v27 != v15[2])
        return 0;
      if (v27)
        v28 = v9 == v15;
      else
        v28 = 1;
      if (!v28)
      {
        if ((v15[4] ^ v9[4]) >> 14 || (v15[5] ^ v9[5]) >> 14)
          return 0;
        v36 = v9 + 7;
        v37 = v15 + 7;
        while (--v27)
        {
          result = 0;
          if (!((*(v37 - 1) ^ *(v36 - 1)) >> 14))
          {
            v39 = *v36;
            v36 += 2;
            v38 = v39;
            v40 = *v37;
            v37 += 2;
            if ((v40 ^ v38) < 0x4000)
              continue;
          }
          return result;
        }
      }
      v29 = v10[2];
      if (v29 != v18[2])
        return 0;
      if (v29)
        v30 = v10 == v18;
      else
        v30 = 1;
      if (!v30)
      {
        if ((v18[4] ^ v10[4]) >> 14 || (v18[5] ^ v10[5]) >> 14)
          return 0;
        v41 = v10 + 7;
        v42 = v18 + 7;
        while (--v29)
        {
          result = 0;
          if (!((*(v42 - 1) ^ *(v41 - 1)) >> 14))
          {
            v44 = *v41;
            v41 += 2;
            v43 = v44;
            v45 = *v42;
            v42 += 2;
            if ((v45 ^ v43) < 0x4000)
              continue;
          }
          return result;
        }
      }
      result = 0;
      if (!((v17 ^ v11) >> 14) && !((v19 ^ v12) >> 14))
      {
        ++v3;
        result = 1;
        if (v3 != v2)
          continue;
      }
      return result;
    }
  }
  return 1;
}

BOOL sub_249EA8870(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if ((a2[4] ^ a1[4]) >> 14 || (a2[5] ^ a1[5]) >> 14)
    return 0;
  v3 = a1 + 7;
  v4 = a2 + 7;
  do
  {
    result = --v2 == 0;
    if (!v2)
      break;
    if ((*(v4 - 1) ^ *(v3 - 1)) >> 14)
      break;
    v7 = *v3;
    v3 += 2;
    v6 = v7;
    v8 = *v4;
    v4 += 2;
  }
  while ((v8 ^ v6) < 0x4000);
  return result;
}

uint64_t PersonIndications.Span.promptRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t PersonIndications.Indication.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t PersonIndications.Indication.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static PersonIndications.Indication.generic.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static PersonIndications.Indication.group.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static PersonIndications.Indication.multiplePeople.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static PersonIndications.Indication.gender.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static PersonIndications.Indication.age.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static PersonIndications.Indication.ethnicity.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

uint64_t PersonIndications.Indication.description.getter()
{
  int *v0;
  int v1;

  v1 = *v0;
  if ((*v0 & 1) != 0)
  {
    sub_249F1F460();
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_249F1F460();
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  sub_249F1F460();
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    sub_249F1F460();
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_12:
  sub_249F1F460();
  if ((v1 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v1 & 0x20) != 0)
LABEL_7:
    sub_249F1F460();
LABEL_8:
  sub_249F1F460();
  return 91;
}

uint64_t sub_249EA8A84()
{
  sub_249EAA1D8();
  return sub_249F1F520();
}

uint64_t sub_249EA8AE0()
{
  sub_249EAA1D8();
  return sub_249F1F508();
}

uint64_t PersonIndications.Span.prompt.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void PersonIndications.Span.indication.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 16);
}

uint64_t sub_249EA8B68@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v4 = *(_QWORD *)(result + 56);
  v5 = v2[6];
  v6 = v5 >> 14;
  v7 = v4 >> 14;
  if (v5 >> 14 >= v4 >> 14)
    goto LABEL_16;
  v8 = *(_QWORD *)(result + 48);
  v9 = v8 >> 14;
  if (v8 >> 14 == v7)
    goto LABEL_16;
  v10 = v2[7];
  v11 = v10 >> 14;
  if (v9 >= v10 >> 14 || v6 == v11)
    goto LABEL_16;
  if ((v12 = v2[1], v26 = *((_DWORD *)v2 + 4), v27 = *(_DWORD *)(result + 16), v28 = *v2, *v2 == *(_QWORD *)result)
    && v12 == *(_QWORD *)(result + 8)
    || (v13 = v2[1], result = sub_249F1FE2C(), v12 = v13, (result & 1) != 0))
  {
    v25 = v12;
    if (v9 >= v6)
      v14 = v5;
    else
      v14 = v8;
    if (v7 >= v11)
      v15 = v4;
    else
      v15 = v10;
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    sub_249E5DDA4(v16);
    v17 = swift_bridgeObjectRetain();
    v18 = sub_249E72588(v17);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    v19 = swift_bridgeObjectRetain();
    sub_249E5DDA4(v19);
    v20 = swift_bridgeObjectRetain();
    v21 = sub_249E72588(v20);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    v22 = swift_bridgeObjectRetain();
    sub_249E5DDA4(v22);
    v23 = swift_bridgeObjectRetain();
    v24 = sub_249E72588(v23);
    result = swift_bridgeObjectRelease_n();
    if (v15 >> 14 < v14 >> 14)
    {
      __break(1u);
    }
    else
    {
      *a2 = v28;
      a2[1] = v25;
      a2[2] = v26 | v27;
      a2[3] = v18;
      a2[4] = v21;
      a2[5] = v24;
      a2[6] = v14;
      a2[7] = v15;
      return swift_bridgeObjectRetain();
    }
  }
  else
  {
LABEL_16:
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t PersonIndications.Span.description.getter()
{
  uint64_t v0;

  sub_249F1F460();
  v0 = sub_249F1F4D8();
  MEMORY[0x24BD04FE0](v0);
  sub_249F1F460();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_249F1F460();
  sub_249F1FB98();
  sub_249F1F460();
  PersonIndications.Indication.description.getter();
  sub_249F1F460();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_249EA8E80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD7E0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EAAE70();
  sub_249F20018();
  v11[0] = a2;
  v11[1] = a3;
  sub_249EA9FF8();
  sub_249F1FDCC();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_249EA8F84()
{
  return 0xD000000000000015;
}

uint64_t sub_249EA8FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EAAA68(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_249EA8FC8()
{
  sub_249EAAE70();
  return sub_249F20024();
}

uint64_t sub_249EA8FF0()
{
  sub_249EAAE70();
  return sub_249F20030();
}

uint64_t sub_249EA9018()
{
  sub_249F1FB98();
  sub_249F1F460();
  sub_249F1FB98();
  return 0;
}

_QWORD *sub_249EA90B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_249EAAAEC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_249EA90D8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_249EA8E80(a1, *v1, v1[1]);
}

uint64_t sub_249EA90F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249EA9124 + 4 * byte_249F2FB30[a1]))(0x74706D6F7270, 0xE600000000000000);
}

uint64_t sub_249EA9124()
{
  return 0x6974616369646E69;
}

unint64_t sub_249EA9140()
{
  return 0xD000000000000011;
}

unint64_t sub_249EA915C()
{
  return 0xD000000000000014;
}

uint64_t sub_249EA91AC()
{
  unsigned __int8 *v0;

  return sub_249EA90F4(*v0);
}

uint64_t sub_249EA91B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EAAC10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EA91D8()
{
  sub_249EA9F2C();
  return sub_249F20024();
}

uint64_t sub_249EA9200()
{
  sub_249EA9F2C();
  return sub_249F20030();
}

uint64_t PersonIndications.Span.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD6F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_DWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v17 = *(_QWORD *)(v1 + 32);
  v18 = v7;
  v8 = *(_QWORD *)(v1 + 40);
  v14 = *(_QWORD *)(v1 + 48);
  v15 = *(_QWORD *)(v1 + 56);
  v16 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EA9F2C();
  sub_249F20018();
  LOBYTE(v20) = 0;
  v9 = v19;
  sub_249F1FD90();
  if (!v9)
  {
    v11 = v17;
    v10 = v18;
    v12 = v16;
    LODWORD(v20) = v22;
    v23 = 1;
    sub_249EA9F70();
    sub_249F1FDCC();
    v20 = v10;
    v23 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD708);
    sub_249E0BDF0(&qword_2578DD710, &qword_2578DD708, (uint64_t (*)(void))sub_249EA9FB4, MEMORY[0x24BEE12A0]);
    sub_249F1FDCC();
    v20 = v11;
    v23 = 3;
    sub_249F1FDCC();
    v20 = v12;
    v23 = 4;
    sub_249F1FDCC();
    v20 = v14;
    v21 = v15;
    v23 = 5;
    sub_249EA9FF8();
    sub_249F1FDCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PersonIndications.Span.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD728);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EA9F2C();
  sub_249F1FFF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v21) = 0;
  v9 = sub_249F1FCC4();
  v11 = v10;
  v23 = 1;
  sub_249EAA03C();
  swift_bridgeObjectRetain();
  sub_249F1FD00();
  v19 = v9;
  v22 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD708);
  v23 = 2;
  v20 = sub_249E0BDF0(&qword_2578DD738, &qword_2578DD708, (uint64_t (*)(void))sub_249EAA080, MEMORY[0x24BEE12D0]);
  sub_249F1FD00();
  v23 = 3;
  v18 = v21;
  swift_bridgeObjectRetain();
  sub_249F1FD00();
  v23 = 4;
  v17 = v21;
  swift_bridgeObjectRetain();
  sub_249F1FD00();
  v13 = v21;
  v23 = 5;
  sub_249EAA0C4();
  v20 = v13;
  swift_bridgeObjectRetain();
  sub_249F1FD00();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v21;
  v15 = v18;
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v22;
  v16 = v17;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v20;
  *(_OWORD *)(a2 + 48) = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EA98BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonIndications.Span.init(from:)(a1, a2);
}

uint64_t sub_249EA98D0(_QWORD *a1)
{
  return PersonIndications.Span.encode(to:)(a1);
}

uint64_t PersonIndications.prompt.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PersonIndications.spans.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_249EA9918()
{
  qword_2578FF430 = 0;
  *(_QWORD *)algn_2578FF438 = 0xE000000000000000;
  qword_2578FF440 = MEMORY[0x24BEE4AF8];
}

uint64_t static PersonIndications.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_249F1FE2C() & 1) != 0)
    return sub_249EA85A8(v2, v3);
  else
    return 0;
}

uint64_t sub_249EA9998()
{
  _BYTE *v0;

  if (*v0)
    return 0x736E617073;
  else
    return 0x74706D6F7270;
}

uint64_t sub_249EA99CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EAAEB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EA99F0()
{
  sub_249EAA108();
  return sub_249F20024();
}

uint64_t sub_249EA9A18()
{
  sub_249EAA108();
  return sub_249F20030();
}

uint64_t PersonIndications.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD750);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EAA108();
  sub_249F20018();
  v13 = 0;
  sub_249F1FD90();
  if (!v2)
  {
    v11 = v9;
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD760);
    sub_249E0BDF0(&qword_2578DD768, &qword_2578DD760, (uint64_t (*)(void))sub_249EAA14C, MEMORY[0x24BEE12A0]);
    sub_249F1FDCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

uint64_t PersonIndications.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD778);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EAA108();
  sub_249F1FFF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = 0;
  v9 = sub_249F1FCC4();
  v11 = v10;
  v15[0] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD760);
  v16 = 1;
  sub_249E0BDF0(&qword_2578DD780, &qword_2578DD760, (uint64_t (*)(void))sub_249EAA190, MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_249F1FD00();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v15[0];
  v13 = v15[1];
  *(_QWORD *)v15[0] = v9;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 16) = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EA9DA0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (sub_249F1FE2C() & 1) != 0)
    return sub_249EA85A8(v2, v3);
  else
    return 0;
}

uint64_t sub_249EA9E00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonIndications.init(from:)(a1, a2);
}

uint64_t sub_249EA9E14(_QWORD *a1)
{
  return PersonIndications.encode(to:)(a1);
}

BOOL _s16VisualGeneration17PersonIndicationsV4SpanV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  uint64_t v15;
  _QWORD *v16;

  v2 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a2 + 16);
  v10 = *(_QWORD **)(a2 + 24);
  v9 = *(_QWORD **)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD **)(a2 + 40);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v8)
      return 0;
  }
  else
  {
    v12 = sub_249F1FE2C();
    result = 0;
    if ((v12 & 1) == 0 || v2 != v8)
      return result;
  }
  if (!sub_249EA8870(v4, v10) || !sub_249EA8870(v3, v9) || !sub_249EA8870(v5, v16))
    return 0;
  return (v15 ^ v6) < 0x4000 && (v11 ^ v7) < 0x4000;
}

unint64_t sub_249EA9F2C()
{
  unint64_t result;

  result = qword_2578DD6F8;
  if (!qword_2578DD6F8)
  {
    result = MEMORY[0x24BD06528](&unk_249F3014C, &type metadata for PersonIndications.Span.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD6F8);
  }
  return result;
}

unint64_t sub_249EA9F70()
{
  unint64_t result;

  result = qword_2578DD700;
  if (!qword_2578DD700)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Indication, &type metadata for PersonIndications.Indication);
    atomic_store(result, (unint64_t *)&qword_2578DD700);
  }
  return result;
}

unint64_t sub_249EA9FB4()
{
  unint64_t result;

  result = qword_2578DD718;
  if (!qword_2578DD718)
  {
    result = MEMORY[0x24BD06528](&unk_249F30124, &type metadata for PersonIndications.Span.AttributeSpan);
    atomic_store(result, (unint64_t *)&qword_2578DD718);
  }
  return result;
}

unint64_t sub_249EA9FF8()
{
  unint64_t result;

  result = qword_2578DD720;
  if (!qword_2578DD720)
  {
    result = MEMORY[0x24BD06528](&unk_249F22388, &type metadata for CodableStringIndexRange);
    atomic_store(result, (unint64_t *)&qword_2578DD720);
  }
  return result;
}

unint64_t sub_249EAA03C()
{
  unint64_t result;

  result = qword_2578DD730;
  if (!qword_2578DD730)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Indication, &type metadata for PersonIndications.Indication);
    atomic_store(result, (unint64_t *)&qword_2578DD730);
  }
  return result;
}

unint64_t sub_249EAA080()
{
  unint64_t result;

  result = qword_2578DD740;
  if (!qword_2578DD740)
  {
    result = MEMORY[0x24BD06528](&unk_249F300FC, &type metadata for PersonIndications.Span.AttributeSpan);
    atomic_store(result, (unint64_t *)&qword_2578DD740);
  }
  return result;
}

unint64_t sub_249EAA0C4()
{
  unint64_t result;

  result = qword_2578DD748;
  if (!qword_2578DD748)
  {
    result = MEMORY[0x24BD06528](&unk_249F22360, &type metadata for CodableStringIndexRange);
    atomic_store(result, (unint64_t *)&qword_2578DD748);
  }
  return result;
}

unint64_t sub_249EAA108()
{
  unint64_t result;

  result = qword_2578DD758;
  if (!qword_2578DD758)
  {
    result = MEMORY[0x24BD06528](&unk_249F300AC, &type metadata for PersonIndications.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD758);
  }
  return result;
}

unint64_t sub_249EAA14C()
{
  unint64_t result;

  result = qword_2578DD770;
  if (!qword_2578DD770)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Span, &type metadata for PersonIndications.Span);
    atomic_store(result, (unint64_t *)&qword_2578DD770);
  }
  return result;
}

unint64_t sub_249EAA190()
{
  unint64_t result;

  result = qword_2578DD788;
  if (!qword_2578DD788)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Span, &type metadata for PersonIndications.Span);
    atomic_store(result, (unint64_t *)&qword_2578DD788);
  }
  return result;
}

unint64_t sub_249EAA1D8()
{
  unint64_t result;

  result = qword_2578DD790;
  if (!qword_2578DD790)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Indication, &type metadata for PersonIndications.Indication);
    atomic_store(result, (unint64_t *)&qword_2578DD790);
  }
  return result;
}

unint64_t sub_249EAA220()
{
  unint64_t result;

  result = qword_2578DD798;
  if (!qword_2578DD798)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Indication, &type metadata for PersonIndications.Indication);
    atomic_store(result, (unint64_t *)&qword_2578DD798);
  }
  return result;
}

unint64_t sub_249EAA268()
{
  unint64_t result;

  result = qword_2578DD7A0;
  if (!qword_2578DD7A0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Indication, &type metadata for PersonIndications.Indication);
    atomic_store(result, (unint64_t *)&qword_2578DD7A0);
  }
  return result;
}

unint64_t sub_249EAA2B0()
{
  unint64_t result;

  result = qword_2578DD7A8;
  if (!qword_2578DD7A8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PersonIndications.Indication, &type metadata for PersonIndications.Indication);
    atomic_store(result, (unint64_t *)&qword_2578DD7A8);
  }
  return result;
}

uint64_t destroy for PersonIndications()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s16VisualGeneration17PersonIndicationsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PersonIndications(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PersonIndications(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PersonIndications(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PersonIndications(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonIndications()
{
  return &type metadata for PersonIndications;
}

ValueMetadata *type metadata accessor for PersonIndications.Indication()
{
  return &type metadata for PersonIndications.Indication;
}

uint64_t destroy for PersonIndications.Span()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PersonIndications.Span(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PersonIndications.Span(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for PersonIndications.Span(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersonIndications.Span(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PersonIndications.Span(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonIndications.Span()
{
  return &type metadata for PersonIndications.Span;
}

uint64_t storeEnumTagSinglePayload for PersonIndications.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EAA75C + 4 * byte_249F2FB3B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EAA790 + 4 * byte_249F2FB36[v4]))();
}

uint64_t sub_249EAA790(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EAA798(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EAA7A0);
  return result;
}

uint64_t sub_249EAA7AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EAA7B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EAA7B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EAA7C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonIndications.CodingKeys()
{
  return &type metadata for PersonIndications.CodingKeys;
}

ValueMetadata *type metadata accessor for PersonIndications.Span.AttributeSpan()
{
  return &type metadata for PersonIndications.Span.AttributeSpan;
}

uint64_t storeEnumTagSinglePayload for PersonIndications.Span.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_249EAA838 + 4 * byte_249F2FB45[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_249EAA86C + 4 * byte_249F2FB40[v4]))();
}

uint64_t sub_249EAA86C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EAA874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EAA87CLL);
  return result;
}

uint64_t sub_249EAA888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EAA890);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_249EAA894(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EAA89C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonIndications.Span.CodingKeys()
{
  return &type metadata for PersonIndications.Span.CodingKeys;
}

unint64_t sub_249EAA8BC()
{
  unint64_t result;

  result = qword_2578DD7B0;
  if (!qword_2578DD7B0)
  {
    result = MEMORY[0x24BD06528](&unk_249F2FF6C, &type metadata for PersonIndications.Span.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7B0);
  }
  return result;
}

unint64_t sub_249EAA904()
{
  unint64_t result;

  result = qword_2578DD7B8;
  if (!qword_2578DD7B8)
  {
    result = MEMORY[0x24BD06528](&unk_249F30084, &type metadata for PersonIndications.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7B8);
  }
  return result;
}

unint64_t sub_249EAA94C()
{
  unint64_t result;

  result = qword_2578DD7C0;
  if (!qword_2578DD7C0)
  {
    result = MEMORY[0x24BD06528](&unk_249F2FFF4, &type metadata for PersonIndications.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7C0);
  }
  return result;
}

unint64_t sub_249EAA994()
{
  unint64_t result;

  result = qword_2578DD7C8;
  if (!qword_2578DD7C8)
  {
    result = MEMORY[0x24BD06528](&unk_249F3001C, &type metadata for PersonIndications.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7C8);
  }
  return result;
}

unint64_t sub_249EAA9DC()
{
  unint64_t result;

  result = qword_2578DD7D0;
  if (!qword_2578DD7D0)
  {
    result = MEMORY[0x24BD06528](&unk_249F2FEDC, &type metadata for PersonIndications.Span.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7D0);
  }
  return result;
}

unint64_t sub_249EAAA24()
{
  unint64_t result;

  result = qword_2578DD7D8;
  if (!qword_2578DD7D8)
  {
    result = MEMORY[0x24BD06528](&unk_249F2FF04, &type metadata for PersonIndications.Span.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7D8);
  }
  return result;
}

uint64_t sub_249EAAA68(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000249F388D0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

_QWORD *sub_249EAAAEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DD7F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EAAE70();
  sub_249F1FFF4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    sub_249EAA0C4();
    sub_249F1FD00();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_249EAAC10(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974616369646E69 && a2 == 0xEA00000000006E6FLL || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000249F38850 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000249F38870 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000249F38890 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000249F388B0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_249EAAE70()
{
  unint64_t result;

  result = qword_2578DD7E8;
  if (!qword_2578DD7E8)
  {
    result = MEMORY[0x24BD06528](&unk_249F30254, &type metadata for PersonIndications.Span.AttributeSpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7E8);
  }
  return result;
}

uint64_t sub_249EAAEB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E617073 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t storeEnumTagSinglePayload for PersonIndications.Span.AttributeSpan.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_249EAAFD4 + 4 * byte_249F2FB4A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_249EAAFF4 + 4 * byte_249F2FB4F[v4]))();
}

_BYTE *sub_249EAAFD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_249EAAFF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EAAFFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EAB004(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EAB00C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EAB014(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PersonIndications.Span.AttributeSpan.CodingKeys()
{
  return &type metadata for PersonIndications.Span.AttributeSpan.CodingKeys;
}

unint64_t sub_249EAB034()
{
  unint64_t result;

  result = qword_2578DD7F8;
  if (!qword_2578DD7F8)
  {
    result = MEMORY[0x24BD06528](&unk_249F3022C, &type metadata for PersonIndications.Span.AttributeSpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD7F8);
  }
  return result;
}

unint64_t sub_249EAB07C()
{
  unint64_t result;

  result = qword_2578DD800;
  if (!qword_2578DD800)
  {
    result = MEMORY[0x24BD06528](&unk_249F3019C, &type metadata for PersonIndications.Span.AttributeSpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD800);
  }
  return result;
}

unint64_t sub_249EAB0C4()
{
  unint64_t result;

  result = qword_2578DD808;
  if (!qword_2578DD808)
  {
    result = MEMORY[0x24BD06528](&unk_249F301C4, &type metadata for PersonIndications.Span.AttributeSpan.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DD808);
  }
  return result;
}

uint64_t dispatch thunk of ForceInProcessGenerationAssignable.forceInProcessGeneration.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_249DAFA54;
  return v7(a1, a2);
}

uint64_t dispatch thunk of ForceInProcessGenerationAssignable.assign(forceInProcessGeneration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_249DAFCF8;
  return v9(a1, a2, a3);
}

uint64_t BidirectionalCollection._visualGeneration_suffix(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t (*v19)(char *);
  _QWORD v20[3];
  uint64_t v21;
  uint64_t (*v22)(char *);
  uint64_t v23;
  uint64_t v24;

  v22 = a1;
  v23 = a2;
  v20[2] = a5;
  v8 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)v20 - v10;
  v20[1] = v8;
  swift_getAssociatedConformanceWitness();
  v12 = sub_249F1FBA4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t (*)(char *))((char *)v20 - v14);
  v16 = v24;
  result = BidirectionalCollection._visualGeneration_startOfSuffix(while:)(v22, v23, a3, a4, (uint64_t)v11);
  if (!v16)
  {
    v20[0] = 0;
    v22 = v15;
    v23 = v13;
    v18 = v21;
    v24 = v5;
    result = sub_249F1F298();
    if ((result & 1) != 0)
    {
      v19 = v22;
      (*(void (**)(uint64_t (*)(char *), char *, uint64_t))(v18 + 32))(v22, v11, AssociatedTypeWitness);
      MEMORY[0x24BD06528](MEMORY[0x24BEE2C50], v12);
      sub_249F1F76C();
      return (*(uint64_t (**)(uint64_t (*)(char *), uint64_t))(v23 + 8))(v19, v12);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t BidirectionalCollection._visualGeneration_startOfSuffix(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *i;
  uint64_t AssociatedTypeWitness;
  uint64_t (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42[32];
  char *v43;

  v37 = a1;
  v38 = a2;
  v31 = a5;
  v39 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v30 - v7;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v43 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v40 = (char *)&v30 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - v15;
  sub_249F1F754();
  v32 = v5;
  v33 = v10;
  for (i = v16; ; v16 = i)
  {
    v17 = v40;
    sub_249F1F730();
    swift_getAssociatedConformanceWitness();
    v18 = sub_249F1F298();
    v19 = v17;
    v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v19, v9);
    if ((v18 & 1) != 0)
    {
      v28 = v16;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v31, v28, v9);
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v16, v9);
    sub_249F1F274();
    v21 = v34;
    v22 = a3;
    v23 = (void (*)(char *, _QWORD))sub_249F1F784();
    v24 = AssociatedTypeWitness;
    (*(void (**)(char *))(v21 + 16))(v8);
    v23(v42, 0);
    v25 = v41;
    v26 = v37(v8);
    if (v25)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v24);
      v20(v43, v9);
      return ((uint64_t (*)(char *, uint64_t))v20)(i, v9);
    }
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v24);
    if ((v27 & 1) == 0)
      break;
    v41 = 0;
    v20(v43, v9);
    a3 = v22;
    v10 = v33;
  }
  v20(i, v9);
  v28 = v43;
  v10 = v33;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v31, v28, v9);
}

int64x2_t *sub_249EAB67C()
{
  int64x2_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0;
  v3 = sub_249F1E7F4();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v21 - v8;
  v10 = type metadata accessor for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v21 - v14;
  v0[1] = vdupq_n_s64(0x200uLL);
  type metadata accessor for AppleDiffusionResourceFactory(0);
  static AppleDiffusionResourceFactory.shared()();
  if (v1)
  {
    type metadata accessor for HEDEdgeDetector();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v22 = v4;
    AppleDiffusionResourceFactory.catalogAssetLock()((uint64_t)v15);
    v16 = (uint64_t)v0->i64 + OBJC_IVAR____TtC16VisualGeneration15HEDEdgeDetector_modelLock;
    sub_249EAD2DC((uint64_t)v15, (uint64_t)v2->i64 + OBJC_IVAR____TtC16VisualGeneration15HEDEdgeDetector_modelLock);
    sub_249EAD320(v16, (uint64_t)v13);
    AppleDiffusionResourceFactory.hedEdgeDetectorModelURL(with:)((uint64_t)v9);
    sub_249EAD2A0((uint64_t)v13);
    sub_249D9D9F4(0, &qword_2578DD950);
    v17 = v22;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v7, v9, v3);
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFD8]), sel_init);
    v20 = sub_249EACD44((uint64_t)v7, (uint64_t)v18);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v3);
    swift_release();
    v2[2].i64[0] = (uint64_t)v20;
  }
  return v2;
}

uint64_t sub_249EAB900(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  int v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  size_t Width;
  size_t Height;
  CGImage *v19;
  CGImage *v20;
  size_t v21;
  size_t v22;
  __CVBuffer *v23;
  size_t v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t result;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  void **v61;
  void *v62;
  uint64_t v63[2];
  int64x2_t aBlock;
  void (*v65)(uint64_t, void *, void *);
  void *v66;
  void (*v67)(void *, void *);
  uint64_t v68;
  uint64_t v69;
  CGRect v70;
  CGRect v71;

  v4 = v2;
  v69 = *MEMORY[0x24BDAC8D0];
  v6 = *(void **)a1;
  v7 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (v7 == 1)
    {
      v8 = v6;
      if ((a2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVPixelBuffer_, v6);
  }
  else
  {
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCGImage_, v6);
  }
  v8 = v9;
  if ((a2 & 1) == 0)
    goto LABEL_9;
LABEL_8:
  v10 = v8;
  v8 = sub_249EACE60(v10);

  if (v3)
    return (uint64_t)v8;
LABEL_9:
  if (!v7)
  {
    v19 = v6;
    Width = CGImageGetWidth(v19);
    Height = CGImageGetHeight(v19);

    v20 = v19;
    v21 = CGImageGetWidth(v20);
    v22 = CGImageGetHeight(v20);
LABEL_28:
    v24 = v22;

    if (v21 == 512 && v24 == 512)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v7 != 1)
  {
    v23 = v6;
    Width = CVPixelBufferGetWidth(v23);
    Height = CVPixelBufferGetHeight(v23);

    v20 = v23;
    v21 = CVPixelBufferGetWidth(v20);
    v22 = CVPixelBufferGetHeight(v20);
    goto LABEL_28;
  }
  objc_msgSend(v6, sel_extent);
  if (v11 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_48;
  }
  v13 = v11;
  if (v11 >= 9.22337204e18)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if ((*(_QWORD *)&v11 & 0x7FF0000000000000) == 0x7FF0000000000000)
    goto LABEL_49;
  v14 = v12;
  if ((*(_QWORD *)&v12 & 0x7FF0000000000000) == 0x7FF0000000000000)
    goto LABEL_49;
  if (v12 <= -9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  objc_msgSend(v6, sel_extent);
  if (v15 <= -9.22337204e18)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v15 >= 9.22337204e18)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((*(_QWORD *)&v15 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v16 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_54;
  }
  if (v16 <= -9.22337204e18)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  if (v16 >= 9.22337204e18)
    goto LABEL_56;
  Width = (uint64_t)v13;
  Height = (uint64_t)v14;
  if ((uint64_t)v15 == 512 && (uint64_t)v16 == 512)
    goto LABEL_33;
LABEL_30:
  aBlock = vdupq_n_s64(0x200uLL);
  v25 = sub_249EAC0B0(aBlock.i64);
  if (v3)
  {
LABEL_31:

    return (uint64_t)v8;
  }
  v26 = v25;

  v8 = v26;
LABEL_33:
  v27 = *(void **)(v4 + 32);
  v28 = (void *)objc_opt_self();
  aBlock.i64[0] = 0;
  v29 = v27;
  v30 = objc_msgSend(v28, sel_modelForMLModel_error_, v29, &aBlock);
  if (!v30)
  {
    v50 = (id)aBlock.i64[0];
    sub_249F1E710();

    swift_willThrow();
    return (uint64_t)v8;
  }
  v31 = v30;
  v58 = Height;
  v59 = Width;
  v32 = (id)aBlock.i64[0];

  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = 0;
  v61 = (void **)(v33 + 16);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = 0;
  v60 = (uint64_t *)(v34 + 16);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 24) = v33;
  v36 = objc_allocWithZone(MEMORY[0x24BDF9B30]);
  v67 = sub_249EACB24;
  v68 = v35;
  aBlock.i64[0] = MEMORY[0x24BDAC760];
  aBlock.i64[1] = 1107296256;
  v65 = sub_249EACCB8;
  v66 = &block_descriptor_10;
  v37 = _Block_copy(&aBlock);
  v38 = v31;
  swift_retain();
  swift_retain();
  swift_release();
  v39 = objc_msgSend(v36, sel_initWithModel_completionHandler_, v38, v37);
  v62 = v38;

  _Block_release(v37);
  v40 = v8;
  sub_249DAEB2C(MEMORY[0x24BEE4AF8]);
  v41 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
  type metadata accessor for VNImageOption(0);
  sub_249DE1598();
  v42 = (void *)sub_249F1F1F0();
  swift_bridgeObjectRelease();
  v43 = objc_msgSend(v41, sel_initWithCIImage_options_, v40, v42);

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_249F21760;
  *(_QWORD *)(v44 + 32) = v39;
  aBlock.i64[0] = v44;
  sub_249F1F55C();
  sub_249D9D9F4(0, &qword_2578D7C18);
  v45 = v39;
  v46 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  aBlock.i64[0] = 0;
  LOBYTE(v39) = objc_msgSend(v43, sel_performRequests_error_, v46, &aBlock);

  v8 = (id)aBlock.i64[0];
  if ((v39 & 1) == 0)
  {
    v51 = (id)aBlock.i64[0];
    sub_249F1E710();

    swift_willThrow();
    swift_release();
    swift_release();

    return (uint64_t)v8;
  }
  swift_beginAccess();
  v47 = *v61;
  if (*v61)
  {
    v48 = v8;
    v49 = v47;
    swift_willThrow();
    swift_release();
    swift_release();

    return (uint64_t)v8;
  }
  result = swift_beginAccess();
  v53 = *v60;
  if (*v60)
  {
    v54 = objc_allocWithZone(MEMORY[0x24BDBF660]);
    v55 = v8;
    v8 = objc_msgSend(v54, sel_initWithCVPixelBuffer_, v53);
    objc_msgSend(v8, sel_extent);
    if (CGRectGetWidth(v70) == (double)v59)
    {
      objc_msgSend(v8, sel_extent);
      if (CGRectGetHeight(v71) == (double)v58)
      {
        swift_release();
        swift_release();

        return (uint64_t)v8;
      }
    }
    v63[0] = v59;
    v63[1] = v58;
    v56 = sub_249EAC0B0(v63);
    if (!v3)
    {
      v57 = v56;
      swift_release();
      swift_release();

      return (uint64_t)v57;
    }
    swift_release();
    swift_release();

    goto LABEL_31;
  }
  __break(1u);
  return result;
}

id sub_249EAC0B0(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  CGRect v13;
  CGRect v14;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v5 = (id)sub_249F1F304();
  v6 = objc_msgSend((id)objc_opt_self(), sel_filterWithName_, v5);

  if (v6)
  {
    objc_msgSend(v2, sel_extent);
    CGRectGetHeight(v13);
    objc_msgSend(v2, sel_extent);
    CGRectGetWidth(v14);
    v7 = (void *)sub_249F1E938();
    objc_msgSend(v6, sel_setValue_forKey_, v7, *MEMORY[0x24BDBF988]);

    v5 = (id)sub_249F1E938();
    objc_msgSend(v6, sel_setValue_forKey_, v5, *MEMORY[0x24BDBF920]);

    objc_msgSend(v6, sel_setValue_forKey_, v2, *MEMORY[0x24BDBF960]);
    v8 = objc_msgSend(v6, sel_outputImage);
    if (v8
      && (v9 = v8,
          v5 = objc_msgSend(v8, sel_imageByCroppingToRect_, 0.0, 0.0, (double)v3, (double)v4),
          v9,
          v5))
    {

    }
    else
    {
      sub_249EAD1FC();
      swift_allocError();
      *(_QWORD *)v11 = 0xD000000000000022;
      *(_QWORD *)(v11 + 8) = 0x8000000249F38B20;
      *(_BYTE *)(v11 + 16) = 0;
      swift_willThrow();

    }
  }
  else
  {
    sub_249EAD1FC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000025;
    *(_QWORD *)(v10 + 8) = 0x8000000249F38AF0;
    *(_BYTE *)(v10 + 16) = 1;
    swift_willThrow();
  }
  return v5;
}

void sub_249EAC2F8(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  id v5;
  id v6;
  id v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  if (a2)
  {
    v5 = a2;
    v6 = a2;
LABEL_14:
    swift_willThrow();
    goto LABEL_15;
  }
  v8 = objc_msgSend(a1, sel_results);
  if (!v8
    || (v9 = v8,
        sub_249D9D9F4(0, &qword_2578DD940),
        v10 = sub_249F1F544(),
        v9,
        v11 = sub_249E14844(v10),
        swift_bridgeObjectRelease(),
        !v11))
  {
    sub_249EAD1FC();
    v5 = (id)swift_allocError();
    *(_QWORD *)v16 = 0xD00000000000001ELL;
    *(_QWORD *)(v16 + 8) = 0x8000000249F389D0;
LABEL_13:
    *(_BYTE *)(v16 + 16) = 0;
    goto LABEL_14;
  }
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if (v23)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    sub_249EAD1FC();
    v5 = (id)swift_allocError();
    *(_QWORD *)v16 = 0xD000000000000016;
    *(_QWORD *)(v16 + 8) = 0x8000000249F38A10;
    goto LABEL_13;
  }
LABEL_7:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = (id)MEMORY[0x24BD056B8](0, v11);
  }
  else
  {
    if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v12 = *(id *)(v11 + 32);
  }
  v13 = v12;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v13, sel_featureValue);
  v15 = objc_msgSend(v14, sel_multiArrayValue);

  if (v15)
  {
    sub_249EAC5C0();
    v21 = v20;

    swift_beginAccess();
    v22 = *(void **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v21;

    return;
  }
  sub_249EAD1FC();
  v5 = (id)swift_allocError();
  *(_QWORD *)v19 = 0xD00000000000001BLL;
  *(_QWORD *)(v19 + 8) = 0x8000000249F389F0;
  *(_BYTE *)(v19 + 16) = 0;
  swift_willThrow();

LABEL_15:
  v17 = (void **)(a4 + 16);
  swift_beginAccess();
  v18 = *v17;
  *v17 = v5;

}

void sub_249EAC5C0()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  char v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  __CVBuffer *v21;
  __CVBuffer *v22;
  void *BaseAddress;
  uint64_t v24;
  uint64_t v25;
  size_t v26[2];

  v2 = v0;
  v3 = objc_msgSend(v0, sel_shape);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v4 = sub_249F1F544();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if (v25 != 4)
      goto LABEL_27;
  }
  else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) != 4)
  {
    goto LABEL_27;
  }
  v5 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x24BD056B8](0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }
    v6 = *(id *)(v4 + 32);
  }
  v7 = v6;
  v8 = (void *)sub_249F1F934();
  v9 = sub_249F1F940();

  if ((v9 & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    sub_249EAD240();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000023;
    *(_QWORD *)(v15 + 8) = 0x8000000249F38A30;
    goto LABEL_28;
  }
  if (v5)
  {
    v10 = (id)MEMORY[0x24BD056B8](1, v4);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v10 = *(id *)(v4 + 40);
LABEL_11:
  v11 = v10;
  v12 = (void *)sub_249F1F934();
  v13 = sub_249F1F940();

  if ((v13 & 1) == 0)
    goto LABEL_27;
  if (objc_msgSend(v2, sel_dataType) != (id)65552)
  {
    swift_bridgeObjectRelease();
    sub_249EAD240();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000013;
    *(_QWORD *)(v15 + 8) = 0x8000000249F38A60;
LABEL_28:
    *(_BYTE *)(v15 + 16) = 0;
    swift_willThrow();
    return;
  }
  if (v5)
  {
    v14 = (id)MEMORY[0x24BD056B8](3, v4);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 4uLL)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v14 = *(id *)(v4 + 56);
LABEL_18:
  v16 = v14;
  v17 = objc_msgSend(v14, sel_integerValue);

  if (v5)
  {
    v18 = (id)MEMORY[0x24BD056B8](2, v4);
    goto LABEL_22;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
LABEL_34:
    __break(1u);
    return;
  }
  v18 = *(id *)(v4 + 48);
LABEL_22:
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v19, sel_integerValue);

  v26[0] = (size_t)v17;
  v26[1] = (size_t)v20;
  v21 = sub_249DFD038(v26, 0x4C303066u);
  if (!v1)
  {
    v22 = v21;
    CVPixelBufferLockBaseAddress(v21, 0);
    CVPixelBufferGetBytesPerRow(v22);
    BaseAddress = CVPixelBufferGetBaseAddress(v22);
    if (BaseAddress)
    {
      MEMORY[0x24BDAC7A8](BaseAddress);
      sub_249F1F7CC();
      CVPixelBufferUnlockBaseAddress(v22, 0);
    }
    else
    {
      sub_249EAD240();
      swift_allocError();
      *(_QWORD *)v24 = 0xD00000000000001ELL;
      *(_QWORD *)(v24 + 8) = 0x8000000249F38A80;
      *(_BYTE *)(v24 + 16) = 1;
      swift_willThrow();
      CVPixelBufferUnlockBaseAddress(v22, 0);

    }
  }
}

uint64_t sub_249EAC9B0()
{
  uint64_t v0;

  sub_249EAD2A0(v0 + OBJC_IVAR____TtC16VisualGeneration15HEDEdgeDetector_modelLock);
  return swift_deallocClassInstance();
}

uint64_t sub_249EAC9E8()
{
  return type metadata accessor for HEDEdgeDetector();
}

uint64_t type metadata accessor for HEDEdgeDetector()
{
  uint64_t result;

  result = qword_2578DD848;
  if (!qword_2578DD848)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249EACA2C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1EB24();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_249EACAB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_249EACAD4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_249EACAF8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_249EACB24(void *a1, void *a2)
{
  uint64_t v2;

  sub_249EAC2F8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

vImage_Error sub_249EACB2C(void *a1, uint64_t a2, uint64_t a3, vImagePixelCount a4, vImagePixelCount a5, void *a6, size_t a7)
{
  uint64_t v7;
  vImage_Error result;
  uint64_t v9;
  const char *v10;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 16) < 4uLL)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a3 + 56);
  if (v7 != 1)
  {
    sub_249EAD240();
    swift_allocError();
    *(_QWORD *)v9 = 0xD00000000000001DLL;
    v10 = "unexpected multi array stride";
LABEL_10:
    *(_QWORD *)(v9 + 8) = (unint64_t)(v10 - 32) | 0x8000000000000000;
    *(_BYTE *)(v9 + 16) = v7 == 1;
    return swift_willThrow();
  }
  if (!a1)
  {
    sub_249EAD240();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000022;
    v10 = "error with multiarray base address";
    goto LABEL_10;
  }
  if ((a5 & 0x8000000000000000) == 0 && (a4 & 0x8000000000000000) == 0)
  {
    if ((uint64_t)(a4 + 0x4000000000000000) >= 0)
    {
      src.data = a1;
      src.height = a5;
      src.width = a4;
      src.rowBytes = 2 * a4;
      dest.data = a6;
      dest.height = a5;
      dest.width = a4;
      dest.rowBytes = a7;
      return vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    }
LABEL_12:
    __break(1u);
  }
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

void sub_249EACCB8(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

id sub_249EACD44(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  id v10;
  uint64_t v11;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = (void *)sub_249F1E788();
  v13[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelWithContentsOfURL_configuration_error_, v4, a2, v13);

  v6 = v13[0];
  if (v5)
  {
    v7 = sub_249F1E7F4();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v9 = v6;
    v8(a1, v7);
  }
  else
  {
    v10 = v13[0];
    sub_249F1E710();

    swift_willThrow();
    v11 = sub_249F1E7F4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  }
  return v5;
}

id sub_249EACE60(id a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (void *)sub_249F1F304();
  v3 = objc_msgSend((id)objc_opt_self(), sel_filterWithName_, v2);

  if (v3)
  {
    objc_msgSend(v3, sel_setValue_forKey_, a1, *MEMORY[0x24BDBF960]);
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF690]), sel_initWithX_Y_Z_W_, 0.874509804, 0.0, 0.0, 0.0);
    v5 = (void *)sub_249F1F304();
    objc_msgSend(v3, sel_setValue_forKey_, v4, v5);

    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF690]), sel_initWithX_Y_Z_W_, 0.0, 0.874509804, 0.0, 0.0);
    v7 = (void *)sub_249F1F304();
    objc_msgSend(v3, sel_setValue_forKey_, v6, v7);

    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF690]), sel_initWithX_Y_Z_W_, 0.0, 0.0, 0.874509804, 0.0);
    v9 = (void *)sub_249F1F304();
    objc_msgSend(v3, sel_setValue_forKey_, v8, v9);

    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF690]), sel_initWithX_Y_Z_W_, 0.0, 0.0, 0.0, 1.0);
    v11 = (void *)sub_249F1F304();
    objc_msgSend(v3, sel_setValue_forKey_, v10, v11);

    a1 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF690]), sel_initWithX_Y_Z_W_, 0.125490196, 0.125490196, 0.125490196, 0.0);
    v12 = (void *)sub_249F1F304();
    objc_msgSend(v3, sel_setValue_forKey_, a1, v12);

    v13 = objc_msgSend(v3, sel_outputImage);
    if (v13)
    {
      a1 = v13;
    }
    else
    {
      sub_249EAD1FC();
      swift_allocError();
      *(_QWORD *)v15 = 0xD000000000000027;
      *(_QWORD *)(v15 + 8) = 0x8000000249F389A0;
      *(_BYTE *)(v15 + 16) = 0;
      swift_willThrow();
    }

  }
  else
  {
    sub_249EAD1FC();
    swift_allocError();
    *(_QWORD *)v14 = 0xD000000000000022;
    *(_QWORD *)(v14 + 8) = 0x8000000249F38970;
    *(_BYTE *)(v14 + 16) = 1;
    swift_willThrow();
  }
  return a1;
}

unint64_t sub_249EAD1FC()
{
  unint64_t result;

  result = qword_2578DD938;
  if (!qword_2578DD938)
  {
    result = MEMORY[0x24BD06528](&unk_249F30398, &type metadata for HEDEdgeDetectorError);
    atomic_store(result, (unint64_t *)&qword_2578DD938);
  }
  return result;
}

unint64_t sub_249EAD240()
{
  unint64_t result;

  result = qword_2578DD948;
  if (!qword_2578DD948)
  {
    result = MEMORY[0x24BD06528](&unk_249F30358, &type metadata for MLMultiArrayConversionError);
    atomic_store(result, (unint64_t *)&qword_2578DD948);
  }
  return result;
}

vImage_Error sub_249EAD284(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_249EACB2C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t sub_249EAD2A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249EAD2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EAD320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MLMultiArrayConversionError()
{
  return &type metadata for MLMultiArrayConversionError;
}

ValueMetadata *type metadata accessor for HEDEdgeDetectorError()
{
  return &type metadata for HEDEdgeDetectorError;
}

uint64_t DetectedFacesPolicy.generatedImage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249D9E1A0(v1, a1);
}

uint64_t DetectedFacesPolicy.allowedFaceCountRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DetectedFacesPolicy() + 20));
}

uint64_t type metadata accessor for DetectedFacesPolicy()
{
  uint64_t result;

  result = qword_2578DD9B8;
  if (!qword_2578DD9B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DetectedFacesPolicy.detectedFaces.getter()
{
  type metadata accessor for DetectedFacesPolicy();
  return swift_bridgeObjectRetain();
}

uint64_t DetectedFacesPolicy.description.getter()
{
  uint64_t v0;

  sub_249F1FA84();
  type metadata accessor for DetectedFacesPolicy();
  v0 = sub_249F1FE08();
  swift_bridgeObjectRelease();
  sub_249F1F460();
  sub_249F1FB98();
  sub_249F1F460();
  sub_249F1FB98();
  sub_249F1F460();
  swift_bridgeObjectRelease();
  sub_249F1F460();
  return v0;
}

uint64_t sub_249EAD570(uint64_t a1)
{
  uint64_t result;

  result = sub_249EAD5D8(&qword_2578D8868, (uint64_t)&protocol conformance descriptor for DetectedFacesPolicy);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249EAD5A4(uint64_t a1)
{
  uint64_t result;

  result = sub_249EAD5D8(&qword_2578DD958, (uint64_t)&protocol conformance descriptor for DetectedFacesPolicy);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_249EAD5D8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DetectedFacesPolicy();
    result = MEMORY[0x24BD06528](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_249EAD61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_249F1F2E0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_249F1E92C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_249F1F2F8();
  MEMORY[0x24BDAC7A8](v3);
  result = type metadata accessor for DetectedFacesPolicy();
  v5 = (uint64_t *)(v0 + *(int *)(result + 20));
  v6 = v5[1];
  v7 = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 <= 0)
  {
    sub_249F1F2A4();
LABEL_10:
    sub_249F1E920();
    return sub_249F1F388();
  }
  v8 = *v5;
  if (!*v5)
  {
    sub_249F1F2D4();
    sub_249F1F2C8();
    sub_249F1F2B0();
    goto LABEL_9;
  }
  if (__OFADD__(v8, v7))
    goto LABEL_12;
  if (!__OFSUB__(v8 + v7, 1))
  {
    sub_249F1F2D4();
    sub_249F1F2C8();
    sub_249F1F2B0();
    sub_249F1F2C8();
    sub_249F1F2B0();
LABEL_9:
    sub_249F1F2C8();
    sub_249F1F2B0();
    sub_249F1F2C8();
    sub_249F1F2EC();
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *initializeBufferWithCopyOfBuffer for DetectedFacesPolicy(char *a1, char **a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v6;
  char v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(const void *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int *__dsta;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v28[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v6 = *a2;
    v7 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    a1[8] = v7;
    __dsta = (int *)type metadata accessor for GeneratedImage();
    v8 = __dsta[5];
    v9 = &v4[v8];
    v10 = (uint64_t)a2 + v8;
    v4[v8] = *((_BYTE *)a2 + v8);
    v11 = (int *)type metadata accessor for ImageProvenance();
    v12 = v11[5];
    v13 = &v9[v12];
    v14 = v10 + v12;
    v15 = sub_249F1E8D8();
    v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v17 = v6;
    v16(v13, v14, v15);
    *(_QWORD *)&v9[v11[6]] = *(_QWORD *)(v10 + v11[6]);
    *(_QWORD *)&v9[v11[7]] = *(_QWORD *)(v10 + v11[7]);
    v18 = __dsta[6];
    v19 = &v4[v18];
    v20 = (uint64_t)a2 + v18;
    v4[v18] = *((_BYTE *)a2 + v18);
    v21 = type metadata accessor for GeneratedImageIndications();
    v22 = *(int *)(v21 + 20);
    __dst = &v19[v22];
    v23 = (const void *)(v20 + v22);
    v24 = sub_249F1F13C();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6A90);
      memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v25 + 16))(__dst, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
    }
    *(_QWORD *)&v19[*(int *)(v21 + 24)] = *(_QWORD *)(v20 + *(int *)(v21 + 24));
    v29 = *(int *)(a3 + 24);
    *(_OWORD *)&v4[*(int *)(a3 + 20)] = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_QWORD *)&v4[v29] = *(char **)((char *)a2 + v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DetectedFacesPolicy(id *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for GeneratedImage();
  v3 = (char *)a1 + *(int *)(v2 + 20);
  v4 = &v3[*(int *)(type metadata accessor for ImageProvenance() + 20)];
  v5 = sub_249F1E8D8();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = (char *)a1 + *(int *)(v2 + 24);
  v7 = &v6[*(int *)(type metadata accessor for GeneratedImageIndications() + 20)];
  v8 = sub_249F1F13C();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DetectedFacesPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(const void *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;

  v5 = *(void **)a2;
  v6 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  v31 = type metadata accessor for GeneratedImage();
  v7 = *(int *)(v31 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for ImageProvenance();
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = sub_249F1E8D8();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v16 = v5;
  v15(v12, v13, v14);
  *(_QWORD *)(v8 + v10[6]) = *(_QWORD *)(v9 + v10[6]);
  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  v17 = *(int *)(v31 + 24);
  v18 = a1 + v17;
  v32 = a2;
  v19 = a2 + v17;
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v20 = type metadata accessor for GeneratedImageIndications();
  v21 = *(int *)(v20 + 20);
  v22 = (void *)(v18 + v21);
  v23 = (const void *)(v19 + v21);
  v24 = sub_249F1F13C();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain();
  if (v26(v23, 1, v24))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6A90);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *(_QWORD *)(v18 + *(int *)(v20 + 24)) = *(_QWORD *)(v19 + *(int *)(v20 + 24));
  v28 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(v32 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(v32 + v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectedFacesPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  char v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;

  v5 = *(void **)a2;
  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v6;
  v8 = v5;

  v9 = type metadata accessor for GeneratedImage();
  v10 = *(int *)(v9 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v13 = (int *)type metadata accessor for ImageProvenance();
  v14 = v13[5];
  v15 = v11 + v14;
  v16 = v12 + v14;
  v17 = sub_249F1E8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  *(_QWORD *)(v11 + v13[6]) = *(_QWORD *)(v12 + v13[6]);
  *(_QWORD *)(v11 + v13[7]) = *(_QWORD *)(v12 + v13[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *(int *)(v9 + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v33 = type metadata accessor for GeneratedImageIndications();
  v21 = *(int *)(v33 + 20);
  v22 = (void *)(v19 + v21);
  v23 = (void *)(v20 + v21);
  v24 = sub_249F1F13C();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v12) = v26(v22, 1, v24);
  v27 = v26(v23, 1, v24);
  if (!(_DWORD)v12)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6A90);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  *(_QWORD *)(v19 + *(int *)(v33 + 24)) = *(_QWORD *)(v20 + *(int *)(v33 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = *(int *)(a3 + 20);
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DetectedFacesPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = type metadata accessor for GeneratedImage();
  v7 = *(int *)(v6 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for ImageProvenance();
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = sub_249F1E8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)(v8 + v10[6]) = *(_QWORD *)(v9 + v10[6]);
  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  v15 = *(int *)(v6 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = type metadata accessor for GeneratedImageIndications();
  v19 = *(int *)(v18 + 20);
  v20 = (void *)(v16 + v19);
  v21 = (const void *)(v17 + v19);
  v22 = sub_249F1F13C();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6A90);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_QWORD *)(v16 + *(int *)(v18 + 24)) = *(_QWORD *)(v17 + *(int *)(v18 + 24));
  v25 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for DetectedFacesPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = *(_BYTE *)(a2 + 8);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v5;

  v7 = type metadata accessor for GeneratedImage();
  v8 = *(int *)(v7 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = (int *)type metadata accessor for ImageProvenance();
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_249F1E8D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)(v9 + v11[6]) = *(_QWORD *)(v10 + v11[6]);
  *(_QWORD *)(v9 + v11[7]) = *(_QWORD *)(v10 + v11[7]);
  swift_bridgeObjectRelease();
  v16 = *(int *)(v7 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v29 = type metadata accessor for GeneratedImageIndications();
  v19 = *(int *)(v29 + 20);
  v20 = (void *)(v17 + v19);
  v21 = (void *)(v18 + v19);
  v22 = sub_249F1F13C();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v10) = v24(v20, 1, v22);
  v25 = v24(v21, 1, v22);
  if (!(_DWORD)v10)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6A90);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  *(_QWORD *)(v17 + *(int *)(v29 + 24)) = *(_QWORD *)(v18 + *(int *)(v29 + 24));
  swift_bridgeObjectRelease();
  v27 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectedFacesPolicy()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EAE38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for GeneratedImage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectedFacesPolicy()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EAE414(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GeneratedImage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_249EAE48C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GeneratedImage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of GenerationSeedAssignable.assignedGenerationSeed.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_249EAE578;
  return v7(a1, a2);
}

uint64_t sub_249EAE578(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = a2 & 1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
}

uint64_t dispatch thunk of GenerationSeedAssignable.assign(generationSeed:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = a2 & 1;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_249DAFCF8;
  return v11(a1, v8, a3, a4);
}

uint64_t AppleDiffusionPipeline.IPASetting.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_249EAE694 + 4 * byte_249F304C0[a1]))(0xD00000000000001ELL, 0x8000000249F34760);
}

uint64_t sub_249EAE694()
{
  uint64_t v0;

  return v0 - 1;
}

unint64_t sub_249EAE6E0()
{
  return 0xD000000000000022;
}

void sub_249EAE708(char *a1)
{
  sub_249F13B64(*a1);
}

void sub_249EAE714()
{
  char *v0;

  sub_249DBFB70(0, *v0);
}

void sub_249EAE720(uint64_t a1)
{
  char *v1;

  sub_249F110D4(a1, *v1);
}

void sub_249EAE728(uint64_t a1)
{
  char *v1;

  sub_249DBFB70(a1, *v1);
}

uint64_t sub_249EAE730@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase05AppleA8PipelineV10IPASettingO8rawValueAESgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_249EAE75C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AppleDiffusionPipeline.IPASetting.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t AppleDiffusionPipeline.Properties.isLCM.getter(char a1)
{
  return a1 & 1;
}

uint64_t AppleDiffusionPipeline.Properties.supportsAdapters.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t AppleDiffusionPipeline.Properties.activeAdapter.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t AppleDiffusionPipeline.Properties.ipaScales.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionPipeline.Properties.ipaScaleRanges.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionPipeline.pipelineProperties.getter()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;

  if (v0[1])
    v1 = 256;
  else
    v1 = 0;
  v2 = v1 | *v0 | (v0[2] << 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t variable initialization expression of AppleDiffusionPipeline.encoder()
{
  return 0;
}

DiffusionBase::AppleDiffusionPipeline::MemoryReductionLevel_optional __swiftcall AppleDiffusionPipeline.MemoryReductionLevel.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3)
    LOBYTE(rawValue) = 3;
  return (DiffusionBase::AppleDiffusionPipeline::MemoryReductionLevel_optional)rawValue;
}

uint64_t AppleDiffusionPipeline.MemoryReductionLevel.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t *sub_249EAE830@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t variable initialization expression of AppleDiffusionPipeline.reduceMemory()
{
  return 0;
}

uint64_t AppleDiffusionPipeline.init(unet:encoder:decoder:sketchConditioner:imageConditioner:retoningConditioner:reduceMemory:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75[2];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _BYTE v94[32];
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  _BYTE v104[144];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  uint64_t v118[20];
  _OWORD v119[10];
  _OWORD v120[10];
  char v121[4];
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  int v129;
  char v130;
  char *v131;
  unint64_t v132;

  v88 = a6;
  v89 = a8;
  v90 = a4;
  v92 = a5;
  v93 = a3;
  v91 = a12;
  LODWORD(v85) = a13;
  v86 = a11;
  v84 = a10;
  v21 = sub_249F1E7F4();
  v80 = *(_QWORD *)(v21 - 8);
  v81 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v79 = (char *)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a9 + 168) = *(_OWORD *)(a1 + 144);
  v24 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a9 + 184) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a9 + 200) = v24;
  v25 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a9 + 104) = *(_OWORD *)(a1 + 80);
  v26 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a9 + 136) = v26;
  *(_OWORD *)(a9 + 152) = v23;
  v27 = *(_OWORD *)a1;
  *(_OWORD *)(a9 + 40) = *(_OWORD *)(a1 + 16);
  v28 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a9 + 72) = v28;
  *(_BYTE *)(a9 + 216) = *(_BYTE *)(a1 + 192);
  *(_OWORD *)(a9 + 88) = v25;
  *(_OWORD *)(a9 + 24) = v27;
  *(_QWORD *)(a9 + 224) = a2;
  *(_QWORD *)(a9 + 232) = a3;
  *(_QWORD *)(a9 + 240) = v90;
  *(_QWORD *)(a9 + 248) = a5;
  *(_QWORD *)(a9 + 256) = a6;
  v29 = a7[3];
  *(_OWORD *)(a9 + 296) = a7[2];
  *(_OWORD *)(a9 + 312) = v29;
  v30 = a7[5];
  *(_OWORD *)(a9 + 328) = a7[4];
  *(_OWORD *)(a9 + 344) = v30;
  v31 = a7[1];
  *(_OWORD *)(a9 + 264) = *a7;
  *(_OWORD *)(a9 + 280) = v31;
  v32 = v84;
  *(_QWORD *)(a9 + 360) = a8;
  *(_QWORD *)(a9 + 368) = v32;
  v33 = v91;
  *(_QWORD *)(a9 + 376) = v86;
  *(_QWORD *)(a9 + 384) = v33;
  *(_BYTE *)(a9 + 392) = v85;
  v34 = *(int *)(type metadata accessor for AppleDiffusionPipeline(0) + 48);
  v85 = a9;
  v35 = a9 + v34;
  sub_249EB6DF4(a1);
  v84 = (uint64_t)a2;
  sub_249EB6EEC(a2, v93);
  swift_retain();
  swift_retain();
  swift_retain();
  v83 = a7;
  sub_249EB6F18((uint64_t)a7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v82 = v35;
  sub_249F1EECC();
  v36 = *(_QWORD *)(a1 + 184);
  v132 = v36;
  if (!(v36 >> 62))
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v37)
      goto LABEL_3;
LABEL_31:
    sub_249DFBA54((uint64_t)&v132);
    sub_249EB6FC0(a1);
LABEL_32:
    if (qword_2578DDA10 == -1)
    {
LABEL_33:
      v61 = sub_249F1EF38();
      __swift_project_value_buffer(v61, (uint64_t)qword_2578FF458);
      v62 = sub_249F1EF20();
      v63 = sub_249F1F820();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v64 = 0;
        _os_log_impl(&dword_249D98000, v62, v63, "Unable to get unet user metadata", v64, 2u);
        MEMORY[0x24BD06618](v64, -1, -1);
      }

      sub_249EB70B4();
      v65 = swift_allocError();
      *(_OWORD *)v66 = xmmword_249F30B70;
      *(_BYTE *)(v66 + 16) = 4;
      v87 = v65;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      sub_249EB70F8((uint64_t)v83);
      swift_release();
      swift_release();
      swift_release();
      sub_249EB717C(v84, v93);
      goto LABEL_36;
    }
LABEL_39:
    swift_once();
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  if (!sub_249F1FBEC())
    goto LABEL_31;
LABEL_3:
  if ((v36 & 0xC000000000000001) != 0)
  {
    v38 = MEMORY[0x24BD056B8](0, v36);
  }
  else
  {
    if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_39;
    }
    v38 = *(_QWORD *)(v36 + 32);
    swift_retain();
  }
  sub_249DFBA54((uint64_t)&v132);
  v40 = (uint64_t)v79;
  v39 = v80;
  v41 = v81;
  (*(void (**)(char *, uint64_t, unint64_t))(v80 + 16))(v79, v38 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL, v81);
  sub_249EEF60C(v40, (uint64_t)v118);
  (*(void (**)(uint64_t, unint64_t))(v39 + 8))(v40, v41);
  sub_249DCB1B0((uint64_t)v118, (uint64_t)v119, &qword_2578DDA30);
  if (sub_249EB6F9C((uint64_t)v119) == 1)
  {
    sub_249EB6FC0(a1);
    swift_release();
    goto LABEL_32;
  }
  v120[6] = v119[6];
  v120[7] = v119[7];
  v120[8] = v119[8];
  v120[9] = v119[9];
  v120[2] = v119[2];
  v120[3] = v119[3];
  v120[4] = v119[4];
  v120[5] = v119[5];
  v120[0] = v119[0];
  v120[1] = v119[1];
  sub_249DCB1B0((uint64_t)v120, (uint64_t)v104, &qword_2578DDA40);
  sub_249DCB1B0((uint64_t)v104, (uint64_t)&v105, &qword_2578DDA40);
  if (sub_249EB71A8((uint64_t)&v105) == 1)
  {
    LODWORD(v80) = 0;
    v42 = 0;
    v43 = v87;
    goto LABEL_21;
  }
  v43 = v87;
  if (*((_QWORD *)&v105 + 1) == 1)
  {
    sub_249DCB1B0((uint64_t)v104, (uint64_t)v94, &qword_2578DDA40);
    v42 = 0;
    v44 = v103;
    if (v103)
    {
LABEL_12:
      LODWORD(v80) = sub_249EAF258(1634889580, 0xE400000000000000, v44);
      goto LABEL_21;
    }
  }
  else
  {
    v45 = v106;
    swift_bridgeObjectRetain();
    if (*((_QWORD *)&v45 + 1))
    {
      if (v45 == __PAIR128__(0xE300000000000000, 7168876))
        v42 = 1;
      else
        v42 = sub_249F1FE2C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = 0;
    }
    sub_249DCB1B0((uint64_t)v104, (uint64_t)v94, &qword_2578DDA40);
    v44 = v103;
    if (v103)
      goto LABEL_12;
  }
  LODWORD(v80) = 0;
LABEL_21:
  v81 = sub_249EAF41C((uint64_t)&unk_251B5A510);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA48);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_249F234B0;
  *(_BYTE *)(v46 + 32) = 4;
  *(_QWORD *)(v46 + 36) = 0x3ECCCCCD00000000;
  *(_BYTE *)(v46 + 44) = 5;
  *(_QWORD *)(v46 + 48) = 0x3ECCCCCD00000000;
  *(_BYTE *)(v46 + 56) = 6;
  *(_QWORD *)(v46 + 60) = 0x3ECCCCCD00000000;
  *(_BYTE *)(v46 + 68) = 7;
  *(_QWORD *)(v46 + 72) = 0x3ECCCCCD00000000;
  v47 = sub_249EAF31C(v46);
  sub_249DCB1B0((uint64_t)v104, (uint64_t)v94, &qword_2578DDA40);
  if (sub_249EB71A8((uint64_t)v94) == 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    sub_249EB70F8((uint64_t)v83);
    swift_release();
    swift_release();
    swift_release();
    sub_249EB717C(v84, v93);
    sub_249EB71CC(v118);
LABEL_27:
    v55 = v81;
LABEL_28:
    result = sub_249EB6FC0(a1);
    v57 = *(_BYTE *)(a1 + 192);
    v58 = v85;
    *(_BYTE *)v85 = v42 & 1;
    *(_BYTE *)(v58 + 1) = v80 & 1;
    *(_BYTE *)(v58 + 2) = v57;
    *(_QWORD *)(v58 + 8) = v55;
    *(_QWORD *)(v58 + 16) = v47;
    return result;
  }
  LODWORD(v87) = v42;
  v75[1] = v38;
  v76 = a1;
  sub_249EB7418((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_249EB7358);
  sub_249EB71CC(v118);
  v48 = v95;
  v49 = v96;
  v50 = v97;
  v51 = v98;
  v52 = v99;
  v77 = v100;
  v78 = v101;
  v79 = v102;
  sub_249E9311C(v95, v96);
  sub_249EB7418((uint64_t)v104, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_249EB7298);
  if (!v49)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    sub_249EB70F8((uint64_t)v83);
    swift_release();
    swift_release();
    swift_release();
    sub_249EB717C(v84, v93);
    a1 = v76;
    LOBYTE(v42) = v87;
    goto LABEL_27;
  }
  v75[0] = v47;
  v121[0] = v48;
  v122 = HIDWORD(v48);
  v123 = v49;
  v124 = v50;
  v125 = v51;
  v126 = v52;
  v127 = BYTE4(v52) & 1;
  v128 = v77;
  v129 = v78;
  v130 = BYTE4(v78) & 1;
  v131 = v79;
  v53 = sub_249EB75A4((uint64_t)v121);
  if (!v43)
  {
    v59 = v53;
    v60 = v54;
    sub_249E93264(v48, v49);
    v55 = sub_249EB0384(v59, v81, (uint64_t)sub_249EB6D84, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_249EB597C);
    v47 = sub_249EB0384(v60, v75[0], (uint64_t)sub_249EB6D70, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_249EB56C0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_249EB70F8((uint64_t)v83);
    swift_release();
    swift_release();
    swift_release();
    sub_249EB717C(v84, v93);
    swift_release();
    a1 = v76;
    LOBYTE(v42) = v87;
    goto LABEL_28;
  }
  v87 = v43;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_249EB70F8((uint64_t)v83);
  swift_release();
  swift_release();
  swift_release();
  sub_249EB717C(v84, v93);
  swift_release();
  sub_249EB6FC0(v76);
  sub_249E93264(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_36:
  v67 = v85;
  v68 = *(_OWORD *)(v85 + 200);
  v115 = *(_OWORD *)(v85 + 184);
  v116 = v68;
  v117 = *(_BYTE *)(v85 + 216);
  v69 = *(_OWORD *)(v85 + 136);
  v111 = *(_OWORD *)(v85 + 120);
  v112 = v69;
  v70 = *(_OWORD *)(v85 + 168);
  v113 = *(_OWORD *)(v85 + 152);
  v114 = v70;
  v71 = *(_OWORD *)(v85 + 72);
  v107 = *(_OWORD *)(v85 + 56);
  v108 = v71;
  v72 = *(_OWORD *)(v85 + 104);
  v109 = *(_OWORD *)(v85 + 88);
  v110 = v72;
  v73 = *(_OWORD *)(v85 + 40);
  v105 = *(_OWORD *)(v85 + 24);
  v106 = v73;
  sub_249EB6FC0((uint64_t)&v105);
  sub_249EB717C(*(_QWORD *)(v67 + 224), *(void **)(v67 + 232));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v74 = sub_249F1EED8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v82, v74);
}

uint64_t sub_249EAF258(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_249F1FE2C();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_249F1FE2C() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_249EAF31C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE38);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 36);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 4);
    v6 = *v4;
    result = sub_249DB81D8(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 = (_QWORD *)((char *)v4 + 12);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAF41C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE40);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 36);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 4);
    v6 = *v4;
    result = sub_249DB81D8(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_DWORD *)(v2[7] + 4 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAF51C(uint64_t a1)
{
  return sub_249EAF63C(a1, &qword_2578DDDD0);
}

unint64_t sub_249EAF528(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDC0);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = sub_249DB7DF0((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAF630(uint64_t a1)
{
  return sub_249EAF63C(a1, &qword_2578DDDC8);
}

unint64_t sub_249EAF63C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_249F1FC1C();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    v9 = v8;
    result = sub_249DB7D8C(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAF750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD98);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDA0);
  v6 = sub_249F1FC1C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_249DCC274(v12, (uint64_t)v5, &qword_2578DDD98);
    v14 = *v5;
    v15 = v5[1];
    result = sub_249DB7D8C(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = sub_249F1E7F4();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAF8F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD88);
  v6 = sub_249F1FC1C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_249DCC274(v12, (uint64_t)v5, &qword_2578DDD80);
    v14 = *v5;
    v15 = v5[1];
    result = sub_249DB7D8C(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAFA94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD58);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD60);
  v6 = sub_249F1FC1C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_249DCC274(v12, (uint64_t)v5, &qword_2578DDD58);
    v14 = *v5;
    result = sub_249DB7F54(*v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v7[6] + result) = v14;
    v18 = v7[7];
    v19 = sub_249F1E7F4();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v9, v19);
    v20 = v7[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAFC2C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCC8);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_249DB7D8C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAFD44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  unsigned __int8 v5;
  char v6;
  char v7;
  unint64_t result;
  char v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCD0);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 34);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    result = sub_249DB8164(v5);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v10 = (_BYTE *)(v2[7] + 2 * result);
    *v10 = v6;
    v10[1] = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAFE50(uint64_t a1)
{
  return sub_249EB0170(a1, &qword_2578DDD40, sub_249DB7F54);
}

unint64_t sub_249EAFE64(uint64_t a1)
{
  return sub_249EAFF8C(a1, &qword_2578DDD38, sub_249DB7F54);
}

unint64_t sub_249EAFE78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD28);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 40);
  while (1)
  {
    v5 = *((unsigned __int8 *)v4 - 8);
    v6 = *v4;
    result = sub_249DB8164(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EAFF78(uint64_t a1)
{
  return sub_249EAFF8C(a1, &qword_2578DDD20, sub_249DB8164);
}

unint64_t sub_249EAFF8C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  _BYTE v32[149];

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)sub_249F1FC1C();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v32[96] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v32[112] = v7;
  *(_OWORD *)&v32[128] = *(_OWORD *)(a1 + 160);
  *(_QWORD *)&v32[141] = *(_QWORD *)(a1 + 173);
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v32[32] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[48] = v8;
  v9 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v32[64] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v32[80] = v9;
  v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v32 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v32[16] = v10;
  v11 = v32[0];
  sub_249EB96C4((uint64_t *)v32);
  result = a3(v11);
  if ((v13 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v14 = 184;
  while (1)
  {
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v5[6] + result) = v11;
    v15 = (_OWORD *)(v5[7] + 144 * result);
    *v15 = *(_OWORD *)&v32[8];
    v16 = *(_OWORD *)&v32[24];
    v17 = *(_OWORD *)&v32[40];
    v18 = *(_OWORD *)&v32[72];
    v15[3] = *(_OWORD *)&v32[56];
    v15[4] = v18;
    v15[1] = v16;
    v15[2] = v17;
    v19 = *(_OWORD *)&v32[88];
    v20 = *(_OWORD *)&v32[104];
    v21 = *(_OWORD *)&v32[120];
    *(_OWORD *)((char *)v15 + 125) = *(_OWORD *)&v32[133];
    v15[6] = v20;
    v15[7] = v21;
    v15[5] = v19;
    v22 = v5[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      break;
    v5[2] = v24;
    if (!--v6)
      goto LABEL_9;
    v25 = v14 + 152;
    v26 = a1 + v14;
    v27 = *(_OWORD *)(v26 + 112);
    *(_OWORD *)&v32[96] = *(_OWORD *)(v26 + 96);
    *(_OWORD *)&v32[112] = v27;
    *(_OWORD *)&v32[128] = *(_OWORD *)(v26 + 128);
    *(_QWORD *)&v32[141] = *(_QWORD *)(v26 + 141);
    v28 = *(_OWORD *)(v26 + 48);
    *(_OWORD *)&v32[32] = *(_OWORD *)(v26 + 32);
    *(_OWORD *)&v32[48] = v28;
    v29 = *(_OWORD *)(v26 + 80);
    *(_OWORD *)&v32[64] = *(_OWORD *)(v26 + 64);
    *(_OWORD *)&v32[80] = v29;
    v30 = *(_OWORD *)(v26 + 16);
    *(_OWORD *)v32 = *(_OWORD *)v26;
    *(_OWORD *)&v32[16] = v30;
    v11 = v32[0];
    sub_249EB96C4((uint64_t *)v32);
    result = a3(v11);
    v14 = v25;
    if ((v31 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_249EB015C(uint64_t a1)
{
  return sub_249EB0170(a1, &qword_2578DDD18, sub_249DB8164);
}

unint64_t sub_249EB0170(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)sub_249F1FC1C();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *((unsigned __int8 *)v7 - 8);
    v9 = *v7;
    swift_bridgeObjectRetain();
    result = a3(v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v5[6] + result) = v8;
    *(_QWORD *)(v5[7] + 8 * result) = v9;
    v12 = v5[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5[2] = v14;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_249EB0278(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD30);
  v2 = (_QWORD *)sub_249F1FC1C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 16);
    v7 = *(v4 - 1);
    v6 = *v4;
    swift_bridgeObjectRetain();
    result = sub_249DB7FAC(v5);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v7;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_249EB0384(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  v10 = v12;
  swift_bridgeObjectRelease();
  if (v4)
    swift_bridgeObjectRelease();
  return v10;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionPipeline.loadResources()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  if (qword_2578DDA10 != -1)
    swift_once();
  v2 = sub_249F1EF38();
  __swift_project_value_buffer(v2, (uint64_t)qword_2578FF458);
  v3 = sub_249F1EF20();
  v4 = sub_249F1F814();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_249D98000, v3, v4, "loading all pipeline resources", v5, 2u);
    MEMORY[0x24BD06618](v5, -1, -1);
  }

  v6 = *(unsigned __int8 *)(v1 + 392);
  if (v6 == 1)
  {
    AppleDiffusionUnet.loadResources()();
  }
  else if (v6 == 2)
  {
    AppleDiffusionPipeline.prewarmResources()();
  }
  else
  {
    AppleDiffusionUnet.loadResources()();
    if (!v7)
    {
      if (!*(_QWORD *)(v1 + 224) || (ManagedMLModel.loadResources()(), !v8))
      {
        v9 = *(_QWORD *)(v1 + 248);
        v10 = *(_QWORD *)(v1 + 256);
        ManagedMLModel.loadResources()();
        if (!v11)
        {
          if (v9)
          {
            ManagedMLModel.loadResources()();
            if (v12)

          }
          if (v10)
          {
            ManagedMLModel.loadResources()();
            if (v13)

          }
          ManagedMLModel.loadResources()();
          if (!v14)
          {
            ManagedMLModel.loadResources()();
            if (!v15)
              ManagedMLModel.loadResources()();
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionPipeline.prewarmResources()()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[26];
  if (v1 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    v2 = sub_249F1FBEC();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x24BD056B8](v3 - 4, v1);
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
            goto LABEL_35;
        }
        else
        {
          swift_retain();
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
          {
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
        }
        ManagedMLModel.loadResources()();
        if (v7)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        ManagedMLModel.unloadResources()();
        swift_release();
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  if (v0[28])
  {
    v8 = (void *)v0[29];
    swift_retain();
    v9 = v8;
    ManagedMLModel.loadResources()();
    if (v10)
    {

      goto LABEL_32;
    }
    ManagedMLModel.unloadResources()();

    swift_release();
  }
  v11 = v0[31];
  v12 = v0[32];
  swift_retain();
  swift_retain();
  swift_retain();
  ManagedMLModel.loadResources()();
  if (v13)
  {
    swift_release();
    swift_release();
  }
  else
  {
    if (v11)
    {
      ManagedMLModel.loadResources()();
      if (v14)

    }
    if (v12)
    {
      ManagedMLModel.loadResources()();
      if (v15)

    }
    ManagedMLModel.unloadResources()();
    if (v11)
      ManagedMLModel.unloadResources()();
    if (v12)
      ManagedMLModel.unloadResources()();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ManagedMLModel.loadResources()();
    if (v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      ManagedMLModel.unloadResources()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      ManagedMLModel.loadResources()();
      if (!v17)
      {
        ManagedMLModel.unloadResources()();
        swift_bridgeObjectRelease();
        swift_release();
        swift_retain();
        ManagedMLModel.loadResources()();
        if (!v18)
          ManagedMLModel.unloadResources()();
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_32:
  swift_release();
}

Swift::Void __swiftcall AppleDiffusionPipeline.unloadResources()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_2578DDA10 != -1)
    swift_once();
  v2 = sub_249F1EF38();
  __swift_project_value_buffer(v2, (uint64_t)qword_2578FF458);
  v3 = sub_249F1EF20();
  v4 = sub_249F1F814();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_249D98000, v3, v4, "unloading all pipeline resources", v5, 2u);
    MEMORY[0x24BD06618](v5, -1, -1);
  }

  v6 = v1[26];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_249F1FBEC();
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_14;
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      MEMORY[0x24BD056B8](i, v6);
    else
      swift_retain();
    ManagedMLModel.unloadResources()();
    swift_release();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  if (v1[28])
    ManagedMLModel.unloadResources()();
  v9 = v1[31];
  v10 = v1[32];
  ManagedMLModel.unloadResources()();
  if (v9)
    ManagedMLModel.unloadResources()();
  if (v10)
    ManagedMLModel.unloadResources()();
  ManagedMLModel.unloadResources()();
  ManagedMLModel.unloadResources()();
  ManagedMLModel.unloadResources()();
}

void AppleDiffusionPipeline.generateImages(configuration:requestIdentifier:progressHandler:)(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  NSObject *v55;
  os_signpost_type_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint8_t *v61;
  os_signpost_id_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint8_t *v70;
  NSObject *v71;
  os_signpost_id_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  os_signpost_type_t v78;
  os_signpost_id_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  int *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  int v94;
  char *v95;
  __int128 v96;
  unsigned __int8 v97;
  char *v98;
  void *v99;
  uint64_t v100;
  id v101;
  unint64_t v102;
  int64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  float v120;
  char *v121;
  _UNKNOWN **v122;
  uint64_t (*v123)(unint64_t, uint64_t (*)(uint64_t), _UNKNOWN **);
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  char *v130;
  int v131;
  NSObject *v132;
  os_log_type_t v133;
  _BOOL4 v134;
  uint8_t *v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSObject *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  void (*v148)(char *, char *, uint64_t);
  uint8_t *v149;
  os_signpost_id_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  NSObject *v174;
  uint64_t v175;
  uint64_t (*v176)(uint64_t, uint64_t, int *);
  int v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint8_t *v182;
  NSObject *v183;
  os_signpost_type_t v184;
  os_signpost_id_t v185;
  os_signpost_type_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  float v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int64_t v199;
  unint64_t v200;
  void *v201;
  void *v202;
  uint64_t v203;
  void *v204;
  unint64_t v205;
  uint64_t v206;
  os_signpost_type_t v207;
  os_signpost_type_t v208;
  os_signpost_id_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint8_t *v223;
  NSObject *v224;
  os_signpost_id_t v225;
  uint64_t v226;
  os_signpost_id_t v227;
  uint8_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  NSObject *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t i;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint8_t *v244;
  NSObject *v245;
  os_signpost_type_t v246;
  os_signpost_id_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  float v251;
  char v252;
  char v253;
  uint64_t v254;
  char v255;
  void *v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  os_signpost_type_t v260;
  os_signpost_id_t v261;
  NSObject *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  __CVBuffer *v270;
  int64_t Width;
  int64_t Height;
  int64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  NSObject *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  const char *v286;
  uint64_t v287;
  void (*v288)(char *, uint64_t);
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint8_t *v293;
  os_signpost_id_t v294;
  uint64_t v295;
  uint64_t v296;
  int *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t (*v313)(_QWORD *);
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void (*v322)(char *, char *, uint64_t);
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int *v326;
  int *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  void *v333;
  uint64_t *v334;
  uint64_t v335;
  void (*v336)(char *, uint64_t, uint64_t);
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  __int128 v342;
  char *v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  int *v351;
  NSObject *v352;
  uint64_t *v353;
  uint64_t v354;
  id v355;
  __int128 v356;
  unsigned __int8 v357;
  uint64_t (*v358)(uint64_t);
  _UNKNOWN **v359;
  uint64_t v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  char v373;

  v5 = v4;
  v313 = a3;
  v314 = a4;
  v332 = a1;
  v311 = type metadata accessor for PipelineProgress();
  MEMORY[0x24BDAC7A8](v311);
  v312 = (char *)&v298 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PipelineConfiguration(0);
  MEMORY[0x24BDAC7A8](v8);
  v338 = (uint64_t)&v298 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v350 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v341 = *(_QWORD *)(v350 - 8);
  v10 = MEMORY[0x24BDAC7A8](v350);
  v348 = (char *)&v298 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v351 = (int *)((char *)&v298 - v13);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v349 = (char *)&v298 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v352 = ((char *)&v298 - v16);
  v347 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA50);
  v17 = MEMORY[0x24BDAC7A8](v347);
  v346 = (uint64_t)&v298 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)&v342 = (char *)&v298 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v343 = (char *)&v298 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA58);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v316 = (uint64_t)&v298 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v324 = (uint64_t)&v298 - v25;
  v326 = (int *)type metadata accessor for AppleDiffusionPipeline.ConditioningInputs(0);
  v315 = *((_QWORD *)v326 - 1);
  v26 = MEMORY[0x24BDAC7A8](v326);
  v328 = (unint64_t)&v298 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v320 = (uint64_t)&v298 - v28;
  v29 = sub_249F1E8D8();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v298 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, a2, v29);
  _s15PowerLogMetricsCMa();
  v33 = swift_allocObject();
  sub_249F1E884();
  *(_QWORD *)(v33 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__adapters) = 0;
  *(_QWORD *)(v33 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__inputPixelsCount) = 0;
  *(_QWORD *)(v33 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__unetIterationsCount) = 0;
  *(_QWORD *)(v33 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__outputPixelsCount) = 0;
  v34 = sub_249F1E8A8();
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  *(_QWORD *)(v33 + 16) = v34;
  *(_QWORD *)(v33 + 24) = v36;
  sub_249EDE554(*(unsigned __int8 *)(v5 + 2));
  v37 = sub_249F1EE9C();
  v329 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v323 = v38;
  v39 = (char *)&v298 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for AppleDiffusionPipeline(0);
  v40 = v5 + *(int *)(v310 + 48);
  sub_249F1EEC0();
  sub_249F1EE78();
  if (qword_2578DDA10 != -1)
    swift_once();
  v41 = sub_249F1EF38();
  v321 = __swift_project_value_buffer(v41, (uint64_t)qword_2578FF458);
  v42 = sub_249F1EF20();
  v43 = sub_249F1F814();
  v44 = os_log_type_enabled(v42, v43);
  v325 = v33;
  v330 = v5;
  v331 = v37;
  v337 = v39;
  v327 = (int *)v8;
  v339 = v40;
  if (v44)
  {
    v45 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    *(_QWORD *)&v356 = v46;
    *(_DWORD *)v45 = 136315138;
    v40 = v339;
    v47 = sub_249F1FA9C();
    v360 = sub_249E68CA8(v47, v48, (uint64_t *)&v356);
    sub_249F1F9AC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v42, v43, "Entering %s.", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v46, -1, -1);
    MEMORY[0x24BD06618](v45, -1, -1);
  }

  v49 = sub_249F1EED8();
  v345 = &v298;
  MEMORY[0x24BDAC7A8](v49);
  v51 = (char *)&v298 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = v52;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v340 = v54;
  v335 = v50;
  v336 = v53;
  ((void (*)(char *, uint64_t))v53)(v51, v40);
  v55 = sub_249F1EEC0();
  v56 = sub_249F1F8A4();
  v57 = sub_249F1F958();
  if ((v57 & 1) != 0)
  {
    v334 = &v298;
    v58 = v323;
    MEMORY[0x24BDAC7A8](v57);
    v322 = *(void (**)(char *, char *, uint64_t))(v329 + 16);
    v59 = v337;
    v60 = v331;
    v322((char *)&v298 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), v337, v331);
    v61 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v61 = 0;
    v62 = sub_249F1EE84();
    _os_signpost_emit_with_name_impl(&dword_249D98000, v55, v56, v62, "diffusion generateImages", "", v61, 2u);
    MEMORY[0x24BD06618](v61, -1, -1);

    v63 = (*(uint64_t (**)(char *, uint64_t))(v329 + 8))((char *)&v298 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), v60);
  }
  else
  {

    v60 = v331;
    v59 = v337;
    v58 = v323;
  }
  MEMORY[0x24BDAC7A8](v63);
  v322 = v64;
  v64((char *)&v298 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0), v59, v60);
  v65 = sub_249F1EF08();
  swift_allocObject();
  v318 = sub_249F1EEFC();
  v66 = v340;
  v334 = *(uint64_t **)(v344 + 8);
  v67 = ((uint64_t (*)(char *, uint64_t))v334)(v51, v340);
  v317 = &v298;
  MEMORY[0x24BDAC7A8](v67);
  v69 = (char *)&v298 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v336(v69, v339, v66);
  v70 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v70 = 0;
  v345 = (uint64_t *)v69;
  v71 = sub_249F1EEC0();
  LOBYTE(v69) = sub_249F1F8A4();
  v72 = sub_249F1EE84();
  _os_signpost_emit_with_name_impl(&dword_249D98000, v71, (os_signpost_type_t)v69, v72, "encodeConditioning", "", v70, 2u);
  v73 = v346;
  v74 = v347;
  v75 = v353;
  sub_249EB2DD8(v346, v346 + *(int *)(v347 + 48), v332);
  if (v75)
  {
    swift_release();

    ((void (*)(uint64_t *, uint64_t))v334)(v345, v340);
    (*(void (**)(char *, uint64_t))(v329 + 8))(v59, v331);
    sub_249EDE5F4();
    swift_release();
    return;
  }
  v308 = v65;
  v333 = 0;
  v76 = (uint64_t)v343;
  v77 = (uint64_t)&v343[*(int *)(v74 + 48)];
  v78 = sub_249F1F898();
  v79 = sub_249F1EE84();
  _os_signpost_emit_with_name_impl(&dword_249D98000, v71, v78, v79, "encodeConditioning", "", v70, 2u);

  v80 = v342;
  sub_249DCB1B0(v73, v342, &qword_2578DDA50);
  MEMORY[0x24BD06618](v70, -1, -1);
  v81 = v80 + *(int *)(v74 + 48);
  v82 = type metadata accessor for AppleDiffusionPipeline.ConditioningInputs;
  sub_249D9E308(v80, v76, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
  sub_249DCB1B0(v81, v77, &qword_2578DDA58);
  ((void (*)(uint64_t *, uint64_t))v334)(v345, v340);
  sub_249D9E308(v76, v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
  v83 = sub_249DCB1B0(v77, v324, &qword_2578DDA58);
  v84 = (int *)v330;
  if (*(_BYTE *)(v330 + 392))
  {
    ManagedMLModel.unloadResources()();
    ManagedMLModel.unloadResources()();
    ManagedMLModel.unloadResources()();
  }
  v85 = (uint64_t)v327;
  v87 = v332;
  v86 = v333;
  if ((*(_QWORD *)&v332[v327[17]] & 0x8000000000000000) != 0)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  MEMORY[0x24BDAC7A8](v83);
  v296 = (uint64_t)v87;
  v297 = v84;
  v89 = sub_249EB3BEC((uint64_t)sub_249EB7828, (uint64_t)&v295, 0, v88);
  if (!*(_QWORD *)(v89 + 16))
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  v90 = v89;
  v91 = v89 + 32;
  sub_249D9E1E4(v89 + 32, (uint64_t)&v356);
  v92 = sub_249EB3810((uint64_t)v87, &v356);
  if (!v86)
  {
    v102 = v92;
    v344 = v91;
    v307 = v90;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v356);
    v360 = v102;
    if (*((_BYTE *)v84 + 392) && *((_QWORD *)v84 + 28))
      ManagedMLModel.unloadResources()();
    v333 = 0;
    v103 = *(_QWORD *)(v102 + 16);
    v104 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v103)
    {
      *(_QWORD *)&v356 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_249EB5C40(0, v103, 0);
      v105 = v341;
      v106 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
      v343 = (char *)v102;
      v347 = v106;
      v107 = v102 + v106;
      v108 = *(_QWORD *)(v341 + 72);
      v345 = *(uint64_t **)(v341 + 16);
      v346 = v108;
      v104 = (_QWORD *)v356;
      v109 = v350;
      v110 = v345;
      do
      {
        v353 = (uint64_t *)v103;
        v111 = v349;
        ((void (*)(char *, unint64_t, uint64_t))v110)(v349, v107, v109);
        ((void (*)(int *, char *, uint64_t))v110)(v351, v111, v109);
        sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
        sub_249F1F058();
        (*(void (**)(char *, uint64_t))(v105 + 8))(v111, v109);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_249EB5C40(0, v104[2] + 1, 1);
          v104 = (_QWORD *)v356;
        }
        v113 = v104[2];
        v112 = v104[3];
        v114 = v341;
        v116 = v352;
        v115 = v353;
        if (v113 >= v112 >> 1)
        {
          sub_249EB5C40(v112 > 1, v113 + 1, 1);
          v114 = v341;
          v104 = (_QWORD *)v356;
        }
        v104[2] = v113 + 1;
        v117 = v346;
        v118 = (uint64_t)v104 + v347 + v113 * v346;
        v105 = v114;
        v109 = v350;
        (*(void (**)(uint64_t, NSObject *, uint64_t))(v114 + 32))(v118, v116, v350);
        v107 += v117;
        v103 = (int64_t)v115 - 1;
      }
      while (v103);
      swift_bridgeObjectRelease();
      v84 = (int *)v330;
    }
    v355 = v104;
    v119 = v332[v327[13] + 8];
    if (v119 == 255)
      v120 = 0.0;
    else
      v120 = *(float *)&v332[v327[15]];
    v85 = (uint64_t)v336;
    v121 = v332;
    sub_249D9E1E4(v344, (uint64_t)&v356);
    v82 = v358;
    v122 = v359;
    __swift_project_boxed_opaque_existential_1(&v356, (uint64_t)v358);
    v123 = (uint64_t (*)(unint64_t, uint64_t (*)(uint64_t), _UNKNOWN **))v122[4];
    LOBYTE(v354) = v119 == 255;
    if (v119 == 255)
      v124 = 0.0;
    else
      v124 = v120;
    v125 = v123(LODWORD(v120) | ((unint64_t)(v119 == 255) << 32), v82, v122);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v356);
    v126 = v124 * (float)*(uint64_t *)&v121[v327[18]];
    if ((~LODWORD(v126) & 0x7F800000) == 0)
      goto LABEL_97;
    v127 = v338;
    v128 = v339;
    if (v126 <= -9.2234e18)
    {
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    if (v126 >= 9.2234e18)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    v129 = v327;
    v130 = &v121[v327[11]];
    v299 = *(_QWORD *)v130;
    v131 = v130[8];
    sub_249DC091C((uint64_t)v121, v338, type metadata accessor for PipelineConfiguration);
    if (v131 == 1)
      v299 = *(_QWORD *)(v127 + v129[18]);
    sub_249DC05A8(v127, type metadata accessor for PipelineConfiguration);
    swift_bridgeObjectRetain();
    v132 = sub_249F1EF20();
    v133 = sub_249F1F814();
    v134 = os_log_type_enabled(v132, v133);
    v319 = v125;
    if (v134)
    {
      v135 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v135 = 134217984;
      v125 = v319;
      *(_QWORD *)&v356 = *(_QWORD *)(v319 + 16);
      sub_249F1F9AC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_249D98000, v132, v133, "Running denoise loop for %ld iterations.", v135, 0xCu);
      MEMORY[0x24BD06618](v135, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v302 = *(_QWORD *)(v125 + 16);
    if (!v302)
    {
      swift_bridgeObjectRelease();
      v238 = swift_bridgeObjectRelease();
LABEL_77:
      if (*((_BYTE *)v84 + 392) != 2)
        goto LABEL_102;
      v82 = (uint64_t (*)(uint64_t))*((_QWORD *)v84 + 26);
      if (!((unint64_t)v82 >> 62))
      {
        v239 = *(_QWORD *)(((unint64_t)v82 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v239)
        {
LABEL_101:
          v238 = swift_bridgeObjectRelease();
          v128 = v339;
LABEL_102:
          v351 = (int *)&v298;
          MEMORY[0x24BDAC7A8](v238);
          v243 = (char *)&v298 - ((v242 + 15) & 0xFFFFFFFFFFFFFFF0);
          ((void (*)(char *, uint64_t, uint64_t))v85)(v243, v128, v340);
          v244 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v244 = 0;
          v353 = (uint64_t *)v243;
          v245 = sub_249F1EEC0();
          v246 = sub_249F1F8A4();
          v247 = sub_249F1EE84();
          v352 = v245;
          _os_signpost_emit_with_name_impl(&dword_249D98000, v245, v246, v247, "decodeToImage", "", v244, 2u);
          v248 = *((_QWORD *)v84 + 30);
          v249 = *((_QWORD *)v84 + 31);
          v250 = *((_QWORD *)v84 + 32);
          v251 = *(float *)&v332[v327[27]];
          v252 = v332[80];
          v253 = v332[81];
          v254 = swift_bridgeObjectRetain();
          v255 = v252;
          v256 = v333;
          v257 = Decoder.decode(_:scaleFactor:outputRange:inferAlpha:detectSkin:)(v254, v255, v253, v248, v249, v250, v251);
          v333 = v256;
          if (v256)
          {
            v258 = v334;
            if (*((_BYTE *)v84 + 392) == 2)
            {
              ManagedMLModel.unloadResources()();
              if (v249)
                ManagedMLModel.unloadResources()();
              if (v250)
                ManagedMLModel.unloadResources()();
            }

            swift_bridgeObjectRelease();
            swift_release();
            sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
            ((void (*)(uint64_t *, uint64_t))v258)(v353, v340);
            sub_249DCC2FC(v324, &qword_2578DDA58);
            (*(void (**)(char *, uint64_t))(v329 + 8))(v337, v331);
LABEL_109:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_249EDE5F4();
            swift_release();
            return;
          }
          v259 = sub_249EB4E00(v257);
          swift_bridgeObjectRelease();
          if (*((_BYTE *)v84 + 392) == 2)
          {
            ManagedMLModel.unloadResources()();
            if (v249)
              ManagedMLModel.unloadResources()();
            if (v250)
              ManagedMLModel.unloadResources()();
          }
          swift_bridgeObjectRelease();
          v260 = sub_249F1F898();
          v261 = sub_249F1EE84();
          v262 = v352;
          _os_signpost_emit_with_name_impl(&dword_249D98000, v352, v260, v261, "decodeToImage", "", v244, 2u);

          MEMORY[0x24BD06618](v244, -1, -1);
          v263 = v340;
          v264 = ((uint64_t (*)(uint64_t *, uint64_t))v334)(v353, v340);
          v265 = *(_QWORD *)(v259 + 16);
          v266 = v325;
          if (!v265)
          {
LABEL_124:
            v353 = &v298;
            MEMORY[0x24BDAC7A8](v264);
            v277 = (char *)&v298 - ((v276 + 15) & 0xFFFFFFFFFFFFFFF0);
            v336(v277, v339, v263);
            v278 = sub_249F1EEC0();
            v352 = &v298;
            MEMORY[0x24BDAC7A8](v278);
            v280 = (char *)&v298 - ((v279 + 15) & 0xFFFFFFFFFFFFFFF0);
            sub_249F1EEF0();
            LODWORD(v351) = sub_249F1F898();
            if ((sub_249F1F958() & 1) != 0)
            {
              v349 = v280;
              v350 = (uint64_t)v277;
              v281 = sub_249F1EEE4();
              v282 = *(_QWORD *)(v281 - 8);
              MEMORY[0x24BDAC7A8](v281);
              v284 = (char *)&v298 - ((v283 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_retain();
              sub_249F1EF14();
              swift_release();
              v285 = (*(uint64_t (**)(char *, uint64_t))(v282 + 88))(v284, v281);
              if (MEMORY[0x24BEE7808] && (_DWORD)v285 == *MEMORY[0x24BEE7808])
              {
                v286 = "[Error] Interval already ended";
              }
              else
              {
                v285 = (*(uint64_t (**)(char *, uint64_t))(v282 + 8))(v284, v281);
                v286 = "";
              }
              v290 = v349;
              v352 = &v298;
              MEMORY[0x24BDAC7A8](v285);
              v292 = (char *)&v298 - ((v291 + 15) & 0xFFFFFFFFFFFFFFF0);
              v289 = v331;
              v322(v292, v290, v331);
              v293 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v293 = 0;
              v294 = sub_249F1EE84();
              _os_signpost_emit_with_name_impl(&dword_249D98000, v278, (os_signpost_type_t)v351, v294, "diffusion generateImages", v286, v293, 2u);
              MEMORY[0x24BD06618](v293, -1, -1);

              v288 = *(void (**)(char *, uint64_t))(v329 + 8);
              v288(v290, v289);
              ((void (*)(uint64_t, uint64_t))v334)(v350, v340);
              sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
              swift_release();
              v288(v292, v289);
            }
            else
            {
              v287 = v263;

              v288 = *(void (**)(char *, uint64_t))(v329 + 8);
              v289 = v331;
              v288(v280, v331);
              ((void (*)(char *, uint64_t))v334)(v277, v287);
              sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
              swift_release();
            }
            sub_249DCC2FC(v324, &qword_2578DDA58);
            v288(v337, v289);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_249EDE5F4();
            swift_release();
            return;
          }
          v267 = OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__outputPixelsCount;
          swift_bridgeObjectRetain();
          v268 = 32;
          while (1)
          {
            v269 = *(void **)(v259 + v268);
            if (v269)
            {
              v270 = v269;
              Width = CVPixelBufferGetWidth(v270);
              Height = CVPixelBufferGetHeight(v270);
              v273 = Width * Height;
              if ((unsigned __int128)(Width * (__int128)Height) >> 64 != (Width * Height) >> 63)
                goto LABEL_133;
            }
            else
            {
              v273 = 0;
            }
            v274 = *(_QWORD *)(v266 + v267);
            v213 = __OFADD__(v274, v273);
            v275 = v274 + v273;
            if (v213)
              break;
            *(_QWORD *)(v266 + v267) = v275;

            v268 += 16;
            if (!--v265)
            {
              v264 = swift_bridgeObjectRelease();
              v263 = v340;
              goto LABEL_124;
            }
          }
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          return;
        }
LABEL_80:
        if (v239 < 1)
          goto LABEL_134;
        for (i = 0; i != v239; ++i)
        {
          if (((unint64_t)v82 & 0xC000000000000001) != 0)
            MEMORY[0x24BD056B8](i, v82);
          else
            swift_retain();
          ManagedMLModel.unloadResources()();
          swift_release();
        }
        goto LABEL_101;
      }
LABEL_100:
      swift_bridgeObjectRetain();
      v239 = sub_249F1FBEC();
      if (!v239)
        goto LABEL_101;
      goto LABEL_80;
    }
    v136 = (uint64_t)v126 & ~((uint64_t)v126 >> 63);
    v300 = v327[20];
    v137 = *(float *)&v121[v300];
    v301 = OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__unetIterationsCount;
    v304 = v136;
    v305 = v125 + 32;
    v303 = v84 + 6;
    v138 = swift_bridgeObjectRetain();
    v139 = 0;
    v82 = (uint64_t (*)(uint64_t))&dword_249D98000;
    v342 = xmmword_249F21910;
    v140 = v340;
    while (v139 < *(_QWORD *)(v125 + 16))
    {
      v338 = v139;
      v321 = *(_QWORD *)(v305 + 8 * v139);
      MEMORY[0x24BDAC7A8](v138);
      v142 = (char *)&v298 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
      ((void (*)(char *, uint64_t, uint64_t))v85)(v142, v128, v140);
      v143 = sub_249F1EEC0();
      v144 = sub_249F1F8A4();
      v145 = sub_249F1F958();
      if ((v145 & 1) != 0)
      {
        v352 = &v298;
        v353 = &v298;
        v146 = v323;
        MEMORY[0x24BDAC7A8](v145);
        LODWORD(v351) = v144;
        v147 = v337;
        v148 = v322;
        v322((char *)&v298 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0), v337, v331);
        v149 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v149 = 0;
        v150 = sub_249F1EE84();
        _os_signpost_emit_with_name_impl(&dword_249D98000, v143, (os_signpost_type_t)v351, v150, "denoiseStep", "", v149, 2u);
        MEMORY[0x24BD06618](v149, -1, -1);

        v151 = v146;
        v152 = v331;
        v153 = (*(uint64_t (**)(char *, uint64_t))(v329 + 8))((char *)&v298 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0), v331);
      }
      else
      {

        v147 = v337;
        v148 = v322;
        v151 = v323;
        v152 = v331;
      }
      MEMORY[0x24BDAC7A8](v153);
      v148((char *)&v298 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0), v147, v152);
      swift_allocObject();
      v309 = sub_249F1EEFC();
      v154 = v340;
      ((void (*)(char *, uint64_t))v334)(v142, v340);
      v155 = v360;
      v156 = *(NSObject **)(v360 + 16);
      if (v156)
      {
        *(_QWORD *)&v356 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_249EB5C40(0, (int64_t)v156, 0);
        v157 = v341;
        v158 = *(unsigned __int8 *)(v341 + 80);
        v306 = v155;
        v159 = (char *)(v155 + ((v158 + 32) & ~v158));
        v160 = (v158 + 32) & ~v158;
        v161 = *(_QWORD *)(v341 + 72);
        v162 = *(uint64_t **)(v341 + 16);
        v344 = v160 + 2 * v161;
        v345 = v162;
        v343 = (char *)(v158 | 7);
        v163 = (uint64_t *)v356;
        v164 = v350;
        v346 = v160;
        v347 = v161;
        do
        {
          v352 = v156;
          v353 = v163;
          v165 = v349;
          v351 = (int *)v159;
          v166 = v345;
          ((void (*)(char *))v345)(v349);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
          v167 = v161;
          v168 = swift_allocObject();
          *(_OWORD *)(v168 + 16) = v342;
          v169 = v168 + v160;
          ((void (*)(uint64_t, char *, uint64_t))v166)(v169, v165, v164);
          ((void (*)(uint64_t, char *, uint64_t))v166)(v169 + v167, v165, v164);
          v354 = v168;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
          sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
          sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
          sub_249F1EFA4();
          v170 = v165;
          v163 = v353;
          (*(void (**)(char *, uint64_t))(v157 + 8))(v170, v164);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_249EB5C40(0, v163[2] + 1, 1);
            v157 = v341;
            v163 = (uint64_t *)v356;
          }
          v172 = v163[2];
          v171 = v163[3];
          v161 = v347;
          v173 = v348;
          v174 = v352;
          if (v172 >= v171 >> 1)
          {
            sub_249EB5C40(v171 > 1, v172 + 1, 1);
            v161 = v347;
            v173 = v348;
            v157 = v341;
            v163 = (uint64_t *)v356;
          }
          v163[2] = v172 + 1;
          v160 = v346;
          v175 = (uint64_t)v163 + v346 + v172 * v161;
          v164 = v350;
          (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v175, v173, v350);
          v159 = (char *)v351 + v161;
          v156 = ((char *)v174 - 1);
        }
        while (v156);
        swift_bridgeObjectRelease();
        v154 = v340;
      }
      else
      {
        v163 = (uint64_t *)MEMORY[0x24BEE4AF8];
      }
      v176 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v315 + 48);
      v177 = v176(v324, 1, v326);
      v178 = v332;
      v179 = v335;
      v180 = v316;
      if (v177 == 1 || v299 >= v338)
      {
        v85 = (uint64_t)v163;
        v181 = sub_249DC091C(v320, v328, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
      }
      else
      {
        sub_249DCC274(v324, v316, &qword_2578DDA58);
        if (v176(v180, 1, v326) == 1)
          goto LABEL_135;
        v85 = (uint64_t)v163;
        v181 = sub_249D9E308(v180, v328, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
      }
      MEMORY[0x24BDAC7A8](v181);
      v84 = (int *)((char *)&v298 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0));
      v336((char *)v84, v339, v154);
      v182 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v182 = 0;
      v183 = sub_249F1EEC0();
      v184 = sub_249F1F8A4();
      v185 = sub_249F1EE84();
      v186 = v184;
      v82 = (uint64_t (*)(uint64_t))&dword_249D98000;
      _os_signpost_emit_with_name_impl(&dword_249D98000, v183, v186, v185, "unet", "", v182, 2u);
      v187 = *((_OWORD *)v303 + 11);
      v371 = *((_OWORD *)v303 + 10);
      v372 = v187;
      v373 = *((_BYTE *)v303 + 192);
      v188 = *((_OWORD *)v303 + 7);
      v367 = *((_OWORD *)v303 + 6);
      v368 = v188;
      v189 = *((_OWORD *)v303 + 9);
      v369 = *((_OWORD *)v303 + 8);
      v370 = v189;
      v190 = *((_OWORD *)v303 + 3);
      v363 = *((_OWORD *)v303 + 2);
      v364 = v190;
      v191 = *((_OWORD *)v303 + 5);
      v365 = *((_OWORD *)v303 + 4);
      v366 = v191;
      v192 = *((_OWORD *)v303 + 1);
      v361 = *(_OWORD *)v303;
      v362 = v192;
      if (__OFADD__(v304, v338))
        goto LABEL_92;
      v193 = *(_QWORD *)(v319 + 16);
      if (__OFADD__(v304, v193))
        goto LABEL_93;
      v352 = *(NSObject **)(v319 + 16);
      v353 = &v298;
      v194 = (float)(v304 + v338) / (float)(v304 + v193);
      v195 = &v178[v327[12]];
      v196 = *(unsigned int *)v195;
      v197 = v328 + v326[5];
      v198 = v328 + v326[6];
      v199 = *(_QWORD *)(v328 + v326[7]);
      v200 = v328 + v326[8];
      v201 = *(void **)v200;
      v202 = *(void **)(v200 + 8);
      v203 = *(_QWORD *)(v200 + 16);
      LOBYTE(v200) = *(_BYTE *)(v200 + 24);
      LOBYTE(v356) = v195[4];
      v204 = v333;
      v205 = sub_249EBF384(v85, v321, v196 | ((unint64_t)v356 << 32), v328, v197, v198, v199, v201, v194, v202, v203, v200, v137 == 1.0);
      v333 = v204;
      if (v204)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

        ((void (*)(int *, uint64_t))v334)(v84, v340);
        sub_249DC05A8(v328, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
        sub_249EB4308(v330, "denoiseStep", 11, 2);
        swift_release();
        swift_release();
        sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
        sub_249DCC2FC(v324, &qword_2578DDA58);
        (*(void (**)(char *, uint64_t))(v329 + 8))(v337, v331);
        goto LABEL_109;
      }
      v206 = v205;
      v207 = sub_249F1F898();
      v351 = v84;
      v84 = &dword_249D98000;
      v208 = v207;
      v209 = sub_249F1EE84();
      _os_signpost_emit_with_name_impl(&dword_249D98000, v183, v208, v209, "unet", "", v182, 2u);

      MEMORY[0x24BD06618](v182, -1, -1);
      swift_bridgeObjectRelease();
      v354 = v206;
      v210 = v340;
      v82 = (uint64_t (*)(uint64_t))v334;
      v211 = ((uint64_t (*)(int *, uint64_t))v334)(v351, v340);
      v212 = *(_QWORD *)(v325 + v301);
      v213 = __OFADD__(v212, 1);
      v214 = v212 + 1;
      if (v213)
        goto LABEL_94;
      ++v338;
      *(_QWORD *)(v325 + v301) = v214;
      v215 = v354;
      v216 = v332;
      MEMORY[0x24BDAC7A8](v211);
      v296 = v330;
      LODWORD(v297) = v217;
      swift_bridgeObjectRetain();
      v218 = (uint64_t)v333;
      v219 = sub_249EB3D38((void (*)(uint64_t))sub_249EB7870, (uint64_t)&v295, v215);
      v347 = v218;
      swift_bridgeObjectRelease();
      v220 = swift_bridgeObjectRelease();
      v351 = (int *)&v298;
      v354 = v219;
      MEMORY[0x24BDAC7A8](v220);
      v222 = (char *)&v298 - ((v221 + 15) & 0xFFFFFFFFFFFFFFF0);
      v336(v222, v339, v210);
      v223 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v223 = 0;
      v224 = sub_249F1EEC0();
      LOBYTE(v219) = sub_249F1F8A4();
      v225 = sub_249F1EE84();
      _os_signpost_emit_with_name_impl(&dword_249D98000, v224, (os_signpost_type_t)v219, v225, "schedulerStep", "", v223, 2u);
      v226 = v347;
      sub_249EB4604(v216, (unint64_t *)&v360, v307, &v354, v321, (unint64_t *)&v355);
      v333 = (void *)v226;
      LOBYTE(v219) = sub_249F1F898();
      v227 = sub_249F1EE84();
      _os_signpost_emit_with_name_impl(&dword_249D98000, v224, (os_signpost_type_t)v219, v227, "schedulerStep", "", v223, 2u);

      v84 = (int *)v330;
      v228 = v223;
      v140 = v340;
      v229 = (uint64_t)v216;
      MEMORY[0x24BD06618](v228, -1, -1);
      ((void (*)(char *, uint64_t))v334)(v222, v140);
      v230 = &v360;
      if (v216[v327[23]])
        v230 = (uint64_t *)&v355;
      v231 = *v230;
      swift_bridgeObjectRetain();
      v358 = (uint64_t (*)(uint64_t))v310;
      v359 = &protocol witness table for AppleDiffusionPipeline;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v356);
      sub_249DC091C((uint64_t)v84, (uint64_t)boxed_opaque_existential_1, type metadata accessor for AppleDiffusionPipeline);
      __swift_project_boxed_opaque_existential_1(v216, *((_QWORD *)v216 + 3));
      v233 = sub_249F1FE08();
      v235 = v234;
      v236 = v312;
      sub_249DC091C(v229, (uint64_t)&v312[*(int *)(v311 + 36)], type metadata accessor for PipelineConfiguration);
      sub_249D9E174(&v356, (uint64_t)v236);
      v236[5] = v233;
      v236[6] = v235;
      v139 = v338;
      v237 = v352;
      v236[7] = v338;
      v236[8] = v237;
      v236[9] = v231;
      if ((v313(v236) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_249DC05A8((uint64_t)v236, (uint64_t (*)(_QWORD))type metadata accessor for PipelineProgress);
        sub_249DC05A8(v328, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
        swift_bridgeObjectRelease();
        sub_249EB4308((uint64_t)v84, "denoiseStep", 11, 2);
        swift_release();
        swift_release();
        sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
        sub_249DCC2FC(v324, &qword_2578DDA58);
        (*(void (**)(char *, uint64_t))(v329 + 8))(v337, v331);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_249EDE5F4();
        swift_release();
        return;
      }
      sub_249DC05A8((uint64_t)v236, (uint64_t (*)(_QWORD))type metadata accessor for PipelineProgress);
      sub_249DC05A8(v328, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
      swift_bridgeObjectRelease();
      sub_249EB4308((uint64_t)v84, "denoiseStep", 11, 2);
      v138 = swift_release();
      v128 = v339;
      v85 = (uint64_t)v336;
      v125 = v319;
      v82 = (uint64_t (*)(uint64_t))&dword_249D98000;
      if (v139 == v302)
      {
        swift_bridgeObjectRelease();
        v238 = swift_bridgeObjectRelease_n();
        goto LABEL_77;
      }
    }
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v356);
  swift_bridgeObjectRelease();
  v355 = v86;
  v93 = v86;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
  v94 = swift_dynamicCast();
  v95 = v337;
  if (v94)
  {
    v96 = v356;
    v97 = v357;
    if (v357 == 4 && v356 == 0)
    {

      v98 = &v332[*(int *)(v85 + 52)];
      if ((v98[8] & 1) == 0)
      {
        v99 = *(void **)v98;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA60);
        v100 = swift_allocObject();
        *(_OWORD *)(v100 + 16) = xmmword_249F21770;
        *(_QWORD *)(v100 + 32) = v99;
        *(_BYTE *)(v100 + 40) = 2;
        v101 = v99;
        swift_release();
        sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
        sub_249DCC2FC(v324, &qword_2578DDA58);
        (*(void (**)(char *, uint64_t))(v329 + 8))(v95, v331);

        sub_249EDE5F4();
        swift_release();
        return;
      }
      sub_249EB70B4();
      swift_allocError();
      *(_QWORD *)v241 = 0;
      *(_QWORD *)(v241 + 8) = 0;
      *(_BYTE *)(v241 + 16) = 4;
      swift_willThrow();
      swift_release();
    }
    else
    {
      swift_release();
      sub_249EB7844(v96, *((uint64_t *)&v96 + 1), v97);
    }
    sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
  }
  else
  {
    sub_249DC05A8(v320, type metadata accessor for AppleDiffusionPipeline.ConditioningInputs);
    swift_release();
  }
  sub_249DCC2FC(v324, &qword_2578DDA58);
  (*(void (**)(char *, uint64_t))(v329 + 8))(v95, v331);

  sub_249EDE5F4();
  swift_release();
}

uint64_t sub_249EB2DD8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  MLMultiArray v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  id v57;
  id v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  int *v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  void *v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  Class isa;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(unint64_t, char *, uint64_t);
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  int *v112;
  char *v113;
  char *v114;
  char *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  char v134;
  uint64_t v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;

  v4 = v3;
  v108 = a1;
  v109 = a2;
  v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v6 = *(_QWORD *)(v117 - 8);
  v7 = MEMORY[0x24BDAC7A8](v117);
  v107 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v106 = (char *)&v98 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v114 = (char *)&v98 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v115 = (char *)&v98 - v13;
  v14 = &qword_2578D67E0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (uint64_t *)((char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = (int *)type metadata accessor for PipelineConfiguration(0);
  v113 = a3;
  sub_249DCC274((uint64_t)&a3[v112[8]], (uint64_t)v17, &qword_2578D67E0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v111 = v18;
  if (v22(v17, 1, v18) == 1)
  {
    sub_249DCC2FC((uint64_t)v17, &qword_2578D67E0);
    sub_249EB70B4();
    swift_allocError();
    *(_OWORD *)v23 = xmmword_249F23BD0;
    *(_BYTE *)(v23 + 16) = 4;
    return swift_willThrow();
  }
  sub_249D9E308((uint64_t)v17, (uint64_t)v21, type metadata accessor for PipelineConfiguration.InputConditioning);
  v25 = *(_QWORD *)(v4 + 176);
  if (*(_QWORD *)(v25 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v110 = v21;
    v26 = *(_QWORD *)(v25 + 40);
    v103 = v25;
    if (v26 == 6)
      v120 = &unk_251B5A550;
    else
      v120 = &unk_251B5A5B8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
    sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
    v27 = v115;
    sub_249F1EFEC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    v28 = *(_QWORD *)(v6 + 72);
    v29 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_249F21910;
    v31 = v30 + v29;
    v32 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 16);
    v33 = v117;
    v32(v31, v27, v117);
    v105 = v32;
    v32(v31 + v28, v27, v33);
    v120 = (void *)v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
    sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    v34 = v114;
    sub_249F1EFA4();
    v35 = &v113[v112[14]];
    v36 = v35[20];
    if (v36 == 255)
    {
      *(_QWORD *)&v116 = 0;
      v14 = v110;
      v37 = v118;
      goto LABEL_9;
    }
    v104 = v6;
    v50 = *(void **)v35;
    v51 = (void *)*((_QWORD *)v35 + 1);
    v19 = *((unsigned int *)v35 + 4) | ((unint64_t)v36 << 32);
    v52 = v118;
    v101 = *(void **)v35;
    v102 = v51;
    if ((v19 & 0x100000000) != 0)
    {
      v69 = *(_QWORD *)(v4 + 384);
      sub_249E929F0(v50, v51, v19, 1);
      v70 = AppleDiffusionRetoningConditioner.encode(retoningBuffer:)((unint64_t)v50, v69);
      v14 = v110;
      if (v52)
        goto LABEL_20;
      v6 = v70;
    }
    else
    {
      v53 = *(_OWORD *)(v4 + 312);
      v139 = *(_OWORD *)(v4 + 296);
      v140 = v53;
      v54 = *(_OWORD *)(v4 + 344);
      v141 = *(_OWORD *)(v4 + 328);
      v142 = v54;
      v55 = *(_OWORD *)(v4 + 280);
      v137 = *(_OWORD *)(v4 + 264);
      v138 = v55;
      v56 = *(_BYTE *)(v4 + 2);
      v100 = v19;
      sub_249E92A18(v50, v51, v19);
      v57 = v51;
      v58 = v50;
      AppleDiffusionSketchConditioner.encode(_:scribbleEdgesBuffer:styleAdapter:strength:)((uint64_t)v58, v51, v56);
      if (v52)
      {

        v14 = v110;
        v27 = v115;
        v19 = v100;
LABEL_20:
        sub_249E92994(v101, v102, v19);
        v71 = *(void (**)(char *, uint64_t))(v104 + 8);
        v72 = v117;
        v71(v34, v117);
        v71(v27, v72);
        v49 = (uint64_t)v14;
        return sub_249DC05A8(v49, type metadata accessor for PipelineConfiguration.InputConditioning);
      }
      v6 = v59;

      v14 = v110;
      v19 = v100;
    }
    v118 = 0;
    if (!(v6 >> 62))
    {
      v73 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v73)
        goto LABEL_26;
LABEL_36:
      sub_249E92994(v101, v102, v19);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v116 = MEMORY[0x24BEE4AF8];
      v37 = v118;
      v6 = v104;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRetain();
  v73 = sub_249F1FBEC();
  swift_bridgeObjectRelease();
  if (!v73)
    goto LABEL_36;
LABEL_26:
  v99 = v4;
  v100 = v19;
  v120 = (void *)MEMORY[0x24BEE4AF8];
  result = sub_249F1FB44();
  if ((v73 & 0x8000000000000000) == 0)
  {
    v74 = (void *)objc_opt_self();
    v75 = 0;
    v116 = xmmword_249F30B80;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v76 = (id)MEMORY[0x24BD056B8](v75, v6);
      else
        v76 = *(id *)(v6 + 8 * v75 + 32);
      v77 = v76;
      ++v75;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
      v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = v116;
      *(_QWORD *)(v78 + 32) = v77;
      *(_QWORD *)(v78 + 40) = v77;
      v119 = v78;
      sub_249F1F55C();
      sub_249D9D9F4(0, &qword_2578DDE20);
      v79 = v77;
      v80 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v81 = objc_msgSend(v74, sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v80, 0, 65552);

      sub_249F1FB20();
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
    }
    while (v73 != v75);
    *(_QWORD *)&v116 = v120;
    sub_249E92994(v101, v102, v100);
    swift_bridgeObjectRelease();
    v37 = v118;
    v6 = v104;
    v14 = v110;
    v4 = v99;
LABEL_9:
    v38 = (uint64_t *)((char *)v14 + *(int *)(v111 + 24));
    v39 = v38[2];
    if (v39)
    {
      v40 = v4;
      v42 = *v38;
      v41 = v38[1];
      sub_249DC3928(*v38, v41);
      swift_bridgeObjectRetain();
      v43 = PipelineConfiguration.InputConditioning.Float16Data.multiArray.getter(v42, v41, v39);
      if (v37)
      {
LABEL_13:
        sub_249DFF634(v42, v41, v39);
        swift_bridgeObjectRelease();
        v47 = *(void (**)(char *, uint64_t))(v6 + 8);
        v48 = v117;
        v47(v114, v117);
        v47(v115, v48);
        v49 = (uint64_t)v110;
        return sub_249DC05A8(v49, type metadata accessor for PipelineConfiguration.InputConditioning);
      }
      v44 = v43;
      v45.super.isa = AppleDiffusionImageConditioner.encode(_:)((MLMultiArray)v43).super.isa;
      if (v46)
      {

        goto LABEL_13;
      }
      v104 = v6;
      v82 = *(_OWORD *)(v40 + 40);
      v83 = *(_OWORD *)(v40 + 56);
      v84 = *(_OWORD *)(v40 + 72);
      v85 = *(_QWORD *)(v40 + 88);
      v86 = *(_QWORD *)(v40 + 128);
      v87 = *(_QWORD *)(v40 + 152);
      v88 = *(_BYTE *)(v40 + 200);
      v89 = *(_QWORD *)(v40 + 208);
      v90 = *(_BYTE *)(v40 + 216);
      v121 = *(_OWORD *)(v40 + 24);
      v122 = v82;
      v123 = v83;
      v124 = v84;
      v125 = v85;
      v91 = *(_OWORD *)(v40 + 112);
      v126 = *(_OWORD *)(v40 + 96);
      v127 = v91;
      v128 = v86;
      v129 = *(_OWORD *)(v40 + 136);
      v131 = *(_OWORD *)(v40 + 160);
      v130 = v87;
      v132 = v103;
      v133 = *(_OWORD *)(v40 + 184);
      v134 = v88;
      v135 = v89;
      v136 = v90;
      isa = v45.super.isa;
      v113 = (char *)sub_249EC0910(v45.super.isa, *(float *)&v113[v112[9]]);
      v94 = v93;
      v96 = v95;
      LODWORD(v112) = v97;

      v118 = 0;
      LODWORD(v112) = v112 & 1;
      sub_249DFF634(v42, v41, v39);
      v6 = v104;
      v14 = v110;
      v103 = v96;
      v60 = v94;
    }
    else
    {
      v118 = v37;
      v113 = 0;
      v60 = 0;
      v103 = 0;
      LODWORD(v112) = 0;
    }
    v61 = v117;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v115, v117);
    v62 = (void (*)(char *, char *, uint64_t))v105;
    v63 = v106;
    v105((unint64_t)v106, (char *)v14, v61);
    v64 = v107;
    v62(v107, (char *)v14 + *(int *)(v111 + 20), v61);
    sub_249DC05A8((uint64_t)v14, type metadata accessor for PipelineConfiguration.InputConditioning);
    v65 = (int *)type metadata accessor for AppleDiffusionPipeline.ConditioningInputs(0);
    v66 = v108;
    v67 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    v67(v108 + v65[6], v114, v61);
    v67(v66, v63, v61);
    v67(v66 + v65[5], v64, v61);
    *(_QWORD *)(v66 + v65[7]) = v116;
    v68 = v66 + v65[8];
    *(_QWORD *)v68 = v113;
    *(_QWORD *)(v68 + 8) = v60;
    *(_QWORD *)(v68 + 16) = v103;
    *(_BYTE *)(v68 + 24) = (_BYTE)v112;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*((_QWORD *)v65 - 1) + 56))(v109, 1, 1, v65);
  }
  __break(1u);
  return result;
}

uint64_t sub_249EB3810(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int64_t v28;
  uint64_t v29;
  float v30;
  double v31;
  ValueMetadata *v32;
  _UNKNOWN **v33;
  void (*v34)(uint64_t, ValueMetadata *, _UNKNOWN **, double, double);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  ValueMetadata *v53;
  _UNKNOWN **v54;

  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDF0);
  MEMORY[0x24BDAC7A8](v49);
  v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v47 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PipelineConfiguration(0);
  v10 = *(unsigned __int8 *)(a1 + *(int *)(v9 + 100));
  v45 = v9;
  v46 = a1;
  v11 = *(unsigned int *)(a1 + *(int *)(v9 + 76));
  if (!v10)
  {
    v12 = sub_249EBE564(v11);
    v14 = v19;
    v16 = v20;
    v18 = v21;
    v53 = &type metadata for NumPyRandomSource;
    v54 = &off_251B5C728;
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    v12 = sub_249EBE564(v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v53 = &type metadata for TorchRandomSource;
    v54 = &off_251B5C5F0;
LABEL_5:
    v22 = swift_allocObject();
    v51 = v22;
    *(_QWORD *)(v22 + 16) = v12;
    *(_QWORD *)(v22 + 24) = v14;
    *(_QWORD *)(v22 + 32) = v16;
    *(_BYTE *)(v22 + 40) = v18 & 1;
    goto LABEL_7;
  }
  v53 = &type metadata for NvRandomSource;
  v54 = &off_251B5CE18;
  v51 = v11;
  v52 = 0;
LABEL_7:
  v23 = *(_QWORD **)(v2 + 168);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v23[2])
      goto LABEL_9;
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  result = (uint64_t)sub_249EC947C(v23);
  v23 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 16))
    goto LABEL_19;
LABEL_9:
  v23[4] = 1;
  v25 = a2[3];
  v26 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v25);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 64))(v25, v26);
  v28 = *(_QWORD *)(v46 + *(int *)(v45 + 68));
  if (v28 < 0)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v29 = MEMORY[0x24BEE4AF8];
  if (v28)
  {
    v30 = v27;
    v50 = MEMORY[0x24BEE4AF8];
    sub_249EB5C40(0, v28, 0);
    v29 = v50;
    v31 = v30;
    do
    {
      v32 = v53;
      v33 = v54;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v51, (uint64_t)v53);
      v34 = (void (*)(uint64_t, ValueMetadata *, _UNKNOWN **, double, double))v33[2];
      v35 = swift_bridgeObjectRetain();
      v34(v35, v32, v33, 0.0, v31);
      swift_bridgeObjectRelease();
      v36 = MEMORY[0x24BDBFCD0];
      sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
      sub_249DDFC68(&qword_2578DDDF8, &qword_2578DDDF0, v36);
      sub_249F1F058();
      v50 = v29;
      v38 = *(_QWORD *)(v29 + 16);
      v37 = *(_QWORD *)(v29 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_249EB5C40(v37 > 1, v38 + 1, 1);
        v29 = v50;
      }
      *(_QWORD *)(v29 + 16) = v38 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))(v29+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v38, v8, v6);
      --v28;
    }
    while (v28);
  }
  v39 = v46 + *(int *)(v45 + 52);
  v40 = *(_BYTE *)(v39 + 8);
  if ((v40 & 1) == 0)
  {
    v41 = *(id *)v39;
    v42 = *(id *)v39;
    swift_bridgeObjectRelease();
    sub_249EB70B4();
    swift_allocError();
    *(_QWORD *)v43 = 0;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 4;
    swift_willThrow();
    sub_249E92978(v41, v40);
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  return v29;
}

uint64_t sub_249EB3BEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(__int128 *__return_ptr, uint64_t *);
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;

  v14 = (void (*)(__int128 *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v7;
  v17 = MEMORY[0x24BEE4AF8];
  result = sub_249EB5C14(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v17;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v11 = a3;
    while (a4 != v11)
    {
      v15 = v11;
      v14(v16, &v15);
      if (v6)
      {
        swift_release();
        return v7;
      }
      v6 = 0;
      v17 = v7;
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_249EB5C14(v12 > 1, v13 + 1, 1);
        v7 = v17;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      result = sub_249D9E174(v16, v7 + 40 * v13 + 32);
      if (a4 < a3)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_249EB3D38(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_249EB5C40(0, v9, 0);
    v10 = v22;
    v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v11 = a3 + v18;
    v17 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      v20(v11);
      if (v4)
        break;
      v4 = 0;
      v22 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_249EB5C40(v12 > 1, v13 + 1, 1);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      v14 = v17;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v18 + v13 * v17, v8, v19);
      v11 += v14;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

_QWORD *sub_249EB3E9C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = (_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v19 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)sub_249EB5C88(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v17 = v11;
      result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)sub_249EB5C88(v13 > 1, v14 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_249EB3FE8(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = sub_249F1E7F4();
  v6 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_249EB5D50(0, v9, 0);
    v10 = v21;
    v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v12 = *v11;
      v20[0] = *(v11 - 1);
      v20[1] = v12;
      swift_bridgeObjectRetain();
      v18(v20);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v21 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_249EB5D50(v13 > 1, v14 + 1, 1);
        v10 = v21;
      }
      v11 += 2;
      *(_QWORD *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v17);
      if (!--v9)
        return v10;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_249EB415C(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = v4;
  v20 = a1;
  v21 = a2;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
  v8 = *(_QWORD *)(v19 - 8);
  result = MEMORY[0x24BDAC7A8](v19);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  v12 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
    return v13;
  v24 = MEMORY[0x24BEE4AF8];
  result = sub_249EB5DB4(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = v24;
    v14 = v22;
    if (a4 <= v22)
      v15 = v22;
    else
      v15 = a4;
    v18 = v15;
    while (a4 != v14)
    {
      v23 = v14;
      v20(&v23);
      if (v5)
      {
        swift_release();
        return v13;
      }
      v5 = 0;
      v24 = v13;
      v17 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_249EB5DB4(v16 > 1, v17 + 1, 1);
        v13 = v24;
      }
      *(_QWORD *)(v13 + 16) = v17 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v17, v11, v19);
      if (a4 < v22)
        goto LABEL_19;
      if (v18 == v14)
        goto LABEL_20;
      if (a4 == ++v14)
        return v13;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

char *sub_249EB4308(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  char *v27;

  LODWORD(v26) = a4;
  v27 = (char *)a2;
  v4 = a1 + *(int *)(type metadata accessor for AppleDiffusionPipeline(0) + 48);
  v5 = sub_249F1EED8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v4, v5);
  v9 = sub_249F1EEC0();
  v10 = sub_249F1EE9C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  sub_249F1EEF0();
  v25 = sub_249F1F898();
  if ((sub_249F1F958() & 1) == 0)
    goto LABEL_5;
  v23 = v6;
  v24 = v5;
  if ((v26 & 1) == 0)
  {
    if (!v27)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t))(v11 + 8))((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      return (char *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    goto LABEL_10;
  }
  result = v27;
  if ((unint64_t)v27 >> 32)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v27 >> 11 == 27)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (v27 >> 16 > 0x10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v27 = sub_249E14C50();
LABEL_10:
  v14 = sub_249F1EEE4();
  v26 = &v23;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_249F1EF14();
  swift_release();
  v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v17, v14);
  if (MEMORY[0x24BEE7808] && (_DWORD)v18 == *MEMORY[0x24BEE7808])
  {
    v19 = "[Error] Interval already ended";
  }
  else
  {
    v18 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v19 = "";
  }
  MEMORY[0x24BDAC7A8](v18);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v20 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v20 = 0;
  v21 = sub_249F1EE84();
  _os_signpost_emit_with_name_impl(&dword_249D98000, v9, (os_signpost_type_t)v25, v21, v27, v19, v20, 2u);
  MEMORY[0x24BD06618](v20, -1, -1);

  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  return (char *)((uint64_t (*)(char *, uint64_t))v22)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
}

uint64_t sub_249EB4604(_QWORD *a1, unint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  char v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD, _QWORD);
  char *v47;
  unint64_t *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  void (*v62)(unint64_t *, uint64_t, uint64_t);
  uint64_t v63;
  unint64_t *v64;

  v52 = a4;
  v53 = a6;
  v50 = a5;
  v54 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (unint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v12 = *(char **)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v49 = (char *)&v45 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v45 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v61 = (char *)&v45 - v21;
  result = type metadata accessor for PipelineConfiguration(0);
  v23 = *(_QWORD *)((char *)a1 + *(int *)(result + 68));
  if ((v23 & 0x8000000000000000) != 0)
    goto LABEL_28;
  v51 = v20;
  if (v23)
  {
    if (v23 - 1 >= *(_QWORD *)(a3 + 16))
      goto LABEL_29;
    v24 = v53;
    a1 = (_QWORD *)*v53;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v24 = (unint64_t)a1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_30;
    while (1)
    {
      v26 = 0;
      *v53 = (unint64_t)a1;
      a1 = (_QWORD *)(a3 + 32);
      v47 = v15;
      v48 = v10;
      v60 = v12;
      v46 = (void (*)(_QWORD, _QWORD, _QWORD))v23;
      while (1)
      {
        v27 = v11;
        v11 = a1[3];
        a3 = a1[4];
        v28 = __swift_project_boxed_opaque_existential_1(a1, v11);
        v29 = *v52;
        if ((unint64_t)v26 >= *(_QWORD *)(*v52 + 16))
          break;
        v56 = v28;
        v57 = v11;
        v59 = a1;
        v15 = v60;
        a1 = (_QWORD *)((v60[80] + 32) & ~(unint64_t)v60[80]);
        v55 = *((_QWORD *)v60 + 9);
        v11 = v55 * (_QWORD)v26;
        v30 = (char *)a1 + v29 + v55 * (_QWORD)v26;
        v23 = *((_QWORD *)v60 + 2);
        v12 = v26;
        v31 = v51;
        ((void (*)(char *, char *, uint64_t))v23)(v51, v30, v27);
        v10 = v54;
        v32 = *v54;
        v33 = *(_QWORD *)(*v54 + 16);
        v58 = v12;
        if ((unint64_t)v12 >= v33)
          goto LABEL_24;
        v64 = a1;
        v12 = v49;
        ((void (*)(char *, char *, uint64_t))v23)(v49, (char *)a1 + v32 + v11, v27);
        (*(void (**)(char *, uint64_t, char *, uint64_t, unint64_t))(a3 + 80))(v31, v50, v12, v57, a3);
        v34 = (void (*)(char *, uint64_t))*((_QWORD *)v15 + 1);
        v34(v12, v27);
        v34(v31, v27);
        a3 = *v10;
        v35 = swift_isUniquelyReferenced_nonNull_native();
        *v10 = a3;
        v62 = (void (*)(unint64_t *, uint64_t, uint64_t))v23;
        v63 = v11;
        if ((v35 & 1) == 0)
        {
          a3 = sub_249EC94B8(a3);
          *v54 = a3;
        }
        v36 = v58;
        a1 = v59;
        v10 = v64;
        if ((unint64_t)v58 >= *(_QWORD *)(a3 + 16))
          goto LABEL_25;
        v58 = (char *)*((_QWORD *)v15 + 5);
        ((void (*)(char *, char *, uint64_t))v58)((char *)v64 + a3 + v63, v61, v27);
        v37 = a1[3];
        v38 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v37);
        v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 72))(v37, v38);
        a3 = v39;
        v40 = *(_QWORD *)(v39 + 16);
        if (v40)
        {
          v41 = (uint64_t)v10 + v39 + (v40 - 1) * v55;
          v10 = v48;
          v62(v48, v41, v27);
          v42 = 0;
        }
        else
        {
          v42 = 1;
          v10 = v48;
        }
        v11 = v27;
        v23 = (unint64_t)v46;
        v15 = v47;
        v12 = v60;
        (*((void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))v60 + 7))(v10, v42, 1, v27);
        swift_bridgeObjectRelease();
        if ((*((unsigned int (**)(unint64_t *, uint64_t, uint64_t))v12 + 6))(v10, 1, v27) == 1)
        {
          if ((unint64_t)v36 >= *(_QWORD *)(*v54 + 16))
            goto LABEL_27;
          v62((unint64_t *)v15, (uint64_t)v64 + *v54 + v63, v27);
          sub_249DCC2FC((uint64_t)v10, &qword_2578DDDD8);
        }
        else
        {
          (*((void (**)(char *, unint64_t *, uint64_t))v12 + 4))(v15, v10, v27);
        }
        v43 = v53;
        a3 = *v53;
        v44 = swift_isUniquelyReferenced_nonNull_native();
        *v43 = a3;
        if ((v44 & 1) == 0)
        {
          a3 = sub_249EC94B8(a3);
          *v53 = a3;
        }
        if ((unint64_t)v36 >= *(_QWORD *)(a3 + 16))
          goto LABEL_26;
        v26 = v36 + 1;
        result = ((uint64_t (*)(char *, char *, uint64_t))v58)((char *)v64 + a3 + v63, v15, v11);
        a1 += 5;
        if ((char *)v23 == v26)
          return result;
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      a1 = (_QWORD *)sub_249EC94B8((unint64_t)a1);
    }
  }
  return result;
}

uint64_t AppleDiffusionPipeline.decodeToImages(_:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(v2 + 240);
  v6 = *(_QWORD *)(v2 + 248);
  v8 = *(_QWORD *)(v2 + 256);
  v9 = type metadata accessor for PipelineConfiguration(0);
  v10 = Decoder.decode(_:scaleFactor:outputRange:inferAlpha:detectSkin:)(a1, *(_BYTE *)(a2 + 80), *(_BYTE *)(a2 + 81), v7, v6, v8, *(float *)(a2 + *(int *)(v9 + 108)));
  if (v3)
  {
    if (*(_BYTE *)(v2 + 392) == 2)
    {
      ManagedMLModel.unloadResources()();
      if (v6)
        ManagedMLModel.unloadResources()();
      if (v8)
        ManagedMLModel.unloadResources()();
    }
  }
  else
  {
    a2 = sub_249EB4E00(v10);
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v2 + 392) == 2)
    {
      ManagedMLModel.unloadResources()();
      if (v6)
        ManagedMLModel.unloadResources()();
      if (v8)
        ManagedMLModel.unloadResources()();
    }
  }
  return a2;
}

uint64_t sub_249EB4B70@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int *v4;
  int *v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  int v30;
  ValueMetadata *v31;
  _UNKNOWN **v32;

  v4 = (int *)type metadata accessor for PipelineConfiguration(0);
  v5 = v4;
  v6 = *(unsigned __int16 *)(a1 + v4[24]);
  if (!(v6 >> 14))
  {
    v16 = *(_QWORD *)(a1 + v4[18]);
    v17 = type metadata accessor for DPMSolverMultistepScheduler();
    swift_allocObject();
    result = DPMSolverMultistepScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:timeStepSpacing:predictionType:)(v16, 1000, 1, SBYTE1(v6), v6, 0.00085, 0.012);
    v18 = &protocol witness table for DPMSolverMultistepScheduler;
    a2[3] = v17;
LABEL_9:
    a2[4] = (uint64_t)v18;
    *a2 = result;
    return result;
  }
  if (v6 >> 14 != 1)
  {
    v19 = *(_QWORD *)(a1 + v4[18]);
    v20 = type metadata accessor for PNDMScheduler();
    swift_allocObject();
    result = PNDMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:)(v19, 1000, 1, 0.00085, 0.012);
    v18 = &protocol witness table for PNDMScheduler;
    a2[3] = v20;
    goto LABEL_9;
  }
  v7 = *(_DWORD *)(a1 + v4[19]);
  result = (v7 + 1);
  if (v7 == -1)
  {
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(a1 + v5[25]))
  {
    if (*(_BYTE *)(a1 + v5[25]) != 1)
    {
      v31 = &type metadata for NvRandomSource;
      v32 = &off_251B5CE18;
      v29 = (v7 + 1);
      v30 = 0;
      goto LABEL_13;
    }
    v9 = sub_249EBE564(result);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v31 = &type metadata for TorchRandomSource;
    v32 = &off_251B5C5F0;
  }
  else
  {
    v9 = sub_249EBE564(result);
    v11 = v21;
    v13 = v22;
    v15 = v23;
    v31 = &type metadata for NumPyRandomSource;
    v32 = &off_251B5C728;
  }
  v24 = swift_allocObject();
  v29 = v24;
  *(_QWORD *)(v24 + 16) = v9;
  *(_QWORD *)(v24 + 24) = v11;
  *(_QWORD *)(v24 + 32) = v13;
  *(_BYTE *)(v24 + 40) = v15 & 1;
LABEL_13:
  v25 = *(_QWORD *)(a1 + v5[18]);
  sub_249D9E1E4((uint64_t)&v29, (uint64_t)v28);
  v26 = type metadata accessor for LCMScheduler();
  swift_allocObject();
  v27 = LCMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:predictionType:generator:)(v25, 1000, 1, v6, (uint64_t)v28, 0.00085, 0.012);
  a2[3] = v26;
  a2[4] = (uint64_t)&protocol witness table for LCMScheduler;
  *a2 = v27;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
}

uint64_t sub_249EB4E00(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    sub_249EB5C6C(0, v1, 0);
    v2 = v12;
    v4 = a1 + 40;
    do
    {
      v5 = *(id *)(v4 - 8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD78);
      swift_dynamicCast();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_249EB5C6C(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v12;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_249EB5C6C(v6 > 1, v7 + 1, 1);
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v7 + 1;
      v8 = v2 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v10;
      *(_BYTE *)(v8 + 40) = v11;
      v4 += 16;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_249EB4F48(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  AppleDiffusionPipeline.generateImages(configuration:requestIdentifier:progressHandler:)(a1, a2, a3, a4);
}

uint64_t sub_249EB4F5C(uint64_t a1, uint64_t a2)
{
  return AppleDiffusionPipeline.decodeToImages(_:configuration:)(a1, a2);
}

void sub_249EB4F70()
{
  AppleDiffusionPipeline.loadResources()();
}

uint64_t variable initialization expression of TextEncoder.queue()
{
  return sub_249EB502C(0xD000000000000013, 0x8000000249F39020);
}

uint64_t variable initialization expression of DiffusionBasePipeline.encoder()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBasePipeline.safetyChecker()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBasePipeline.controlNet()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBasePipeline.reduceMemory()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBasePipeline.useMultilingualTextEncoder()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBasePipeline.script()
{
  return 3;
}

uint64_t variable initialization expression of SampleTimer.startTime()
{
  return 0;
}

double variable initialization expression of SampleTimer.sum()
{
  return 0.0;
}

double variable initialization expression of SampleTimer.sumOfSquares()
{
  return 0.0;
}

uint64_t variable initialization expression of SampleTimer.count()
{
  return 0;
}

uint64_t variable initialization expression of SampleTimer.samples()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of Encoder.queue()
{
  return sub_249EB502C(0x2E7265646F636E65, 0xEF74636964657270);
}

uint64_t sub_249EB502C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  _QWORD v10[4];

  v10[1] = a1;
  v10[2] = a2;
  v2 = sub_249F1F868();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_249F1F85C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v6);
  v8 = sub_249F1F1D8();
  MEMORY[0x24BDAC7A8](v8);
  sub_249D9D9F4(0, &qword_2578DDB28);
  sub_249F1F1CC();
  v10[3] = MEMORY[0x24BEE4AF8];
  sub_249D9BBEC((unint64_t *)&qword_2578DDB30, v7, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB38);
  sub_249DDFC68(&qword_2578DDB40, &qword_2578DDB38, MEMORY[0x24BEE12C8]);
  sub_249F1FA0C();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5750], v2);
  return sub_249F1F88C();
}

uint64_t variable initialization expression of AppleDiffusionSketchConditioner.width()
{
  return 512;
}

uint64_t variable initialization expression of AppleDiffusionSketchConditioner.height()
{
  return 512;
}

void *variable initialization expression of AppleDiffusionSketchConditioner.conditioningVectorForAnimation()
{
  return &unk_251B5B080;
}

void *variable initialization expression of AppleDiffusionSketchConditioner.conditioningVectorForSketch()
{
  return &unk_251B5B0B0;
}

void *variable initialization expression of AppleDiffusionSketchConditioner.conditioningVectorForIllustration()
{
  return &unk_251B5B0E0;
}

uint64_t variable initialization expression of AppleDiffusionSketchConditioner.scribbleEdgesName()
{
  return 0x656C626269726373;
}

unint64_t variable initialization expression of AppleDiffusionSketchConditioner.scribbleStrengthName()
{
  return 0xD000000000000011;
}

uint64_t variable initialization expression of AppleDiffusionSketchConditioner.styleVectorName()
{
  return 0x65765F656C797473;
}

uint64_t variable initialization expression of Decoder.alphaModel()
{
  return 0;
}

uint64_t variable initialization expression of Decoder.skinPresenceModel()
{
  return 0;
}

uint64_t variable initialization expression of PNDMScheduler.modelOutputs()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PNDMScheduler.currentSample@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

double variable initialization expression of DiffusionBaseXLPipeline.textEncoder@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double variable initialization expression of DiffusionBaseXLPipeline.textEncoder2@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of DiffusionBaseXLPipeline.unetRefiner()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBaseXLPipeline.encoder()
{
  return 0;
}

uint64_t variable initialization expression of DiffusionBaseXLPipeline.reduceMemory()
{
  return 0;
}

void variable initialization expression of PipelineConfiguration.negativePrompt(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE0D70];
  a1[3] = MEMORY[0x24BEE0D00];
  a1[4] = v1;
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t variable initialization expression of PipelineConfiguration.inferAlpha()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.detectEmojiSkin()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.inputConditioning@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

float variable initialization expression of PipelineConfiguration.imageConditioningScale()
{
  return 0.7;
}

uint64_t variable initialization expression of PipelineConfiguration.ipaScaleRange()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.lastUnmergedPersonalizationStep()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.lcmScale()
{
  return 0x100000000;
}

uint64_t variable initialization expression of PipelineConfiguration.startingImage()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleEdgesBuffer()
{
  return 0;
}

float variable initialization expression of PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleStrength()
{
  return 1.0;
}

uint64_t variable initialization expression of PipelineConfiguration.localConditioningInput()
{
  return 0;
}

float variable initialization expression of PipelineConfiguration.strength()
{
  return 1.0;
}

float variable initialization expression of PipelineConfiguration.refinerStart()
{
  return 0.8;
}

uint64_t variable initialization expression of PipelineConfiguration.imageCount()
{
  return 1;
}

uint64_t variable initialization expression of PipelineConfiguration.stepCount()
{
  return 50;
}

uint64_t variable initialization expression of PipelineConfiguration.seed()
{
  return 0;
}

float variable initialization expression of PipelineConfiguration.guidanceScale()
{
  return 7.5;
}

uint64_t variable initialization expression of PipelineConfiguration.controlNetInputs()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of PipelineConfiguration.disableSafety()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.useDenoisedIntermediates()
{
  return 0;
}

uint64_t variable initialization expression of PipelineConfiguration.schedulerType()
{
  return 0x8000;
}

uint64_t variable initialization expression of PipelineConfiguration.rngType()
{
  return 0;
}

float variable initialization expression of PipelineConfiguration.encoderScaleFactor()
{
  return 0.18215;
}

float variable initialization expression of PipelineConfiguration.decoderScaleFactor()
{
  return 0.18215;
}

float variable initialization expression of PipelineConfiguration.originalSize()
{
  return 1024.0;
}

float variable initialization expression of PipelineConfiguration.cropsCoordsTopLeft()
{
  return 0.0;
}

float variable initialization expression of PipelineConfiguration.targetSize()
{
  return 1024.0;
}

float variable initialization expression of PipelineConfiguration.aestheticScore()
{
  return 6.0;
}

float variable initialization expression of PipelineConfiguration.negativeAestheticScore()
{
  return 2.5;
}

unint64_t variable initialization expression of AppleDiffusionImageConditioner.conditioningOutputName()
{
  return 0xD000000000000013;
}

uint64_t variable initialization expression of MultilingualTextEncoder.maximumEmbeddingSequenceLength()
{
  return 256;
}

uint64_t variable initialization expression of AppleDiffusionPipeline.ResourceURLs.catalogVersion()
{
  return 0;
}

double variable initialization expression of AppleDiffusionPipeline.ResourceURLs.requiredComponentCombinations()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB48);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_249F21910;
  *(_QWORD *)(v0 + 32) = &unk_251B5BC18;
  *(_QWORD *)(v0 + 40) = &unk_251B5BC40;
  return result;
}

uint64_t variable initialization expression of DPMSolverMultistepScheduler.solverOrder()
{
  return 2;
}

uint64_t variable initialization expression of DPMSolverMultistepScheduler.lowerOrderStepped()
{
  return 0;
}

uint64_t variable initialization expression of DPMSolverMultistepScheduler.usingKarrasSigmas()
{
  return 0;
}

uint64_t variable initialization expression of DPMSolverMultistepScheduler.useLowerOrderFinal()
{
  return 1;
}

uint64_t variable initialization expression of DPMSolverMultistepScheduler.modelOutputs()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t variable initialization expression of BPETokenizer.startToken()
{
  return 0x6F74726174737C3CLL;
}

uint64_t variable initialization expression of BPETokenizer.endToken()
{
  return 0x74666F646E657C3CLL;
}

uint64_t variable initialization expression of BPETokenizer.unknownToken()
{
  return 0x74666F646E657C3CLL;
}

uint64_t variable initialization expression of MockedTokenizer.padId()
{
  return 0;
}

uint64_t variable initialization expression of MockedTokenizer.padToken()
{
  return 0;
}

uint64_t variable initialization expression of LCMScheduler.modelOutputs()
{
  return MEMORY[0x24BEE4AF8];
}

float variable initialization expression of LCMScheduler.timeStepScaling()
{
  return 10.0;
}

uint64_t variable initialization expression of ManagedMLModel.loadedModel()
{
  return 0;
}

const char *variable initialization expression of ManagedMLModel.modelName()
{
  return "ManagedMLModel";
}

uint64_t variable initialization expression of ManagedMLModel.signposter()
{
  return sub_249F1EECC();
}

uint64_t sub_249EB563C()
{
  sub_249D9BBEC((unint64_t *)&qword_2578DDE90, (uint64_t (*)(uint64_t))type metadata accessor for MLModelMetadataKey, (uint64_t)&unk_249F30B24);
  sub_249D9BBEC(&qword_2578DDE98, (uint64_t (*)(uint64_t))type metadata accessor for MLModelMetadataKey, (uint64_t)&unk_249F309FC);
  return sub_249F1FC40();
}

uint64_t sub_249EB56C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _DWORD *v28;
  int v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  swift_bridgeObjectRetain();
  swift_retain();
  v8 = sub_249ED6AA4();
  if (v8 != 8)
  {
    v10 = v8;
    v11 = v9;
    v12 = (_QWORD *)*a5;
    v13 = sub_249DB81D8(v8);
    v15 = v12[2];
    v16 = (v14 & 1) == 0;
    v17 = __OFADD__(v15, v16);
    v18 = v15 + v16;
    if (v17)
      goto LABEL_22;
    v5 = v14;
    if (v12[3] < v18)
    {
      sub_249F01CE8(v18, a4 & 1);
      v13 = sub_249DB81D8(v10);
      if ((v5 & 1) == (v19 & 1))
        goto LABEL_7;
LABEL_5:
      v13 = sub_249F1FF10();
      __break(1u);
    }
    if ((a4 & 1) == 0)
      goto LABEL_24;
    while (1)
    {
LABEL_7:
      v20 = (_QWORD *)*a5;
      if ((v5 & 1) != 0)
      {
        v21 = (_DWORD *)(v20[7] + 8 * v13);
        *v21 = HIDWORD(v10);
        v21[1] = v11;
      }
      else
      {
        v20[(v13 >> 6) + 8] |= 1 << v13;
        *(_BYTE *)(v20[6] + v13) = v10;
        v22 = (_DWORD *)(v20[7] + 8 * v13);
        *v22 = HIDWORD(v10);
        v22[1] = v11;
        v23 = v20[2];
        v17 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v17)
          goto LABEL_23;
        v20[2] = v24;
      }
      v25 = sub_249ED6AA4();
      if (v25 == 8)
        break;
      v10 = v25;
      v11 = v26;
      v5 = 1;
      while (1)
      {
        v30 = (_QWORD *)*a5;
        v13 = sub_249DB81D8(v10);
        v32 = v30[2];
        v33 = (v31 & 1) == 0;
        v17 = __OFADD__(v32, v33);
        v34 = v32 + v33;
        if (v17)
          break;
        a4 = v31;
        if (v30[3] < v34)
        {
          sub_249F01CE8(v34, 1);
          v13 = sub_249DB81D8(v10);
          if ((a4 & 1) != (v35 & 1))
            goto LABEL_5;
        }
        v36 = (_QWORD *)*a5;
        if ((a4 & 1) != 0)
        {
          v28 = (_DWORD *)(v36[7] + 8 * v13);
          *v28 = HIDWORD(v10);
          v28[1] = v11;
        }
        else
        {
          v36[(v13 >> 6) + 8] |= 1 << v13;
          *(_BYTE *)(v36[6] + v13) = v10;
          v37 = (_DWORD *)(v36[7] + 8 * v13);
          *v37 = HIDWORD(v10);
          v37[1] = v11;
          v38 = v36[2];
          v17 = __OFADD__(v38, 1);
          v39 = v38 + 1;
          if (v17)
            goto LABEL_23;
          v36[2] = v39;
        }
        v10 = sub_249ED6AA4();
        v11 = v29;
        if (v10 == 8)
          goto LABEL_12;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      v40 = v13;
      sub_249F0513C();
      v13 = v40;
    }
  }
LABEL_12:
  swift_release();
  swift_bridgeObjectRelease();
  sub_249D9E18C();
  return swift_release();
}

uint64_t sub_249EB597C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  swift_bridgeObjectRetain();
  swift_retain();
  v8 = sub_249ED6C0C();
  if (v8 != 8)
  {
    v9 = v8;
    v10 = (_QWORD *)*a5;
    v11 = sub_249DB81D8(v8);
    v13 = v10[2];
    v14 = (v12 & 1) == 0;
    v15 = __OFADD__(v13, v14);
    v16 = v13 + v14;
    if (v15)
      goto LABEL_22;
    v5 = v12;
    if (v10[3] < v16)
    {
      sub_249F018D8(v16, a4 & 1);
      v11 = sub_249DB81D8(v9);
      if ((v5 & 1) == (v17 & 1))
        goto LABEL_7;
LABEL_5:
      v11 = sub_249F1FF10();
      __break(1u);
    }
    if ((a4 & 1) == 0)
      goto LABEL_24;
    while (1)
    {
LABEL_7:
      v18 = (_QWORD *)*a5;
      if ((v5 & 1) != 0)
      {
        *(_DWORD *)(v18[7] + 4 * v11) = HIDWORD(v9);
      }
      else
      {
        v18[(v11 >> 6) + 8] |= 1 << v11;
        *(_BYTE *)(v18[6] + v11) = v9;
        *(_DWORD *)(v18[7] + 4 * v11) = HIDWORD(v9);
        v19 = v18[2];
        v15 = __OFADD__(v19, 1);
        v20 = v19 + 1;
        if (v15)
          goto LABEL_23;
        v18[2] = v20;
      }
      v21 = sub_249ED6C0C();
      if (v21 == 8)
        break;
      v9 = v21;
      v5 = 1;
      while (1)
      {
        v23 = (_QWORD *)*a5;
        v11 = sub_249DB81D8(v9);
        v25 = v23[2];
        v26 = (v24 & 1) == 0;
        v15 = __OFADD__(v25, v26);
        v27 = v25 + v26;
        if (v15)
          break;
        a4 = v24;
        if (v23[3] < v27)
        {
          sub_249F018D8(v27, 1);
          v11 = sub_249DB81D8(v9);
          if ((a4 & 1) != (v28 & 1))
            goto LABEL_5;
        }
        v29 = (_QWORD *)*a5;
        if ((a4 & 1) != 0)
        {
          *(_DWORD *)(v29[7] + 4 * v11) = HIDWORD(v9);
        }
        else
        {
          v29[(v11 >> 6) + 8] |= 1 << v11;
          *(_BYTE *)(v29[6] + v11) = v9;
          *(_DWORD *)(v29[7] + 4 * v11) = HIDWORD(v9);
          v30 = v29[2];
          v15 = __OFADD__(v30, 1);
          v31 = v30 + 1;
          if (v15)
            goto LABEL_23;
          v29[2] = v31;
        }
        v9 = sub_249ED6C0C();
        if (v9 == 8)
          goto LABEL_12;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      v32 = v11;
      sub_249F04FB0();
      v11 = v32;
    }
  }
LABEL_12:
  swift_release();
  swift_bridgeObjectRelease();
  sub_249D9E18C();
  return swift_release();
}

uint64_t sub_249EB5C14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB6BCC(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDE00, &qword_2578DDE08);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5C40(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB69EC(a1, a2, a3, (_QWORD *)*v3, &qword_2578D9600, &qword_2578D67D8);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5C6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB5E38(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5C88(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB6860(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDCF8, &qword_2578DDD00);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5CB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB6860(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDDE0, &qword_2578DDDE8);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5CE0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_249EB5FBC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_249EB5CFC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_249EB6118(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_249EB5D18(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_249EB627C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_249EB5D34(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_249EB63C8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_249EB5D50(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB6524(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5D6C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_249EB6704(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_249EB5D88(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB6860(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDD08, &qword_2578DDD10);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5DB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB69EC(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDCF0, &qword_2578DDCE8);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5DE0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB69EC(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDCD8, &qword_2578DDCE0);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5E0C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_249EB6BCC(a1, a2, a3, (_QWORD *)*v3, &qword_2578DDD48, &qword_2578DDD50);
  *v3 = result;
  return result;
}

uint64_t sub_249EB5E38(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA60);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  v15 = 2 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v10 + 4, a4 + 4, v15 * 8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD78);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB5FBC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD68);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB6118(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDB0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB627C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDA8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB63C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB6524(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD90);
  v10 = *(_QWORD *)(sub_249F1E7F4() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_249F1E7F4() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB6704(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDB8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB6860(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB69EC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EB6BCC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

double sub_249EB6D70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_BYTE *)a2 = *(_BYTE *)a1;
  result = *(double *)(a1 + 4);
  *(double *)(a2 + 4) = result;
  return result;
}

float sub_249EB6D84@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 4);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(float *)(a2 + 4) = result;
  return result;
}

uint64_t _s13DiffusionBase05AppleA8PipelineV10IPASettingO8rawValueAESgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t type metadata accessor for AppleDiffusionPipeline(uint64_t a1)
{
  return sub_249DC74D0(a1, qword_2578DDBB8);
}

uint64_t sub_249EB6DF4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

id sub_249EB6EEC(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

uint64_t sub_249EB6F18(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_249EB6F9C(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 152);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_249EB6FC0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_249EB70B4()
{
  unint64_t result;

  result = qword_2578DDA38;
  if (!qword_2578DDA38)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionPipeline.AppleDiffusionError, &type metadata for AppleDiffusionPipeline.AppleDiffusionError);
    atomic_store(result, (unint64_t *)&qword_2578DDA38);
  }
  return result;
}

uint64_t sub_249EB70F8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void sub_249EB717C(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();

  }
}

uint64_t sub_249EB71A8(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t *sub_249EB71CC(uint64_t *a1)
{
  sub_249EB722C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_249EB722C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20 != 1)
  {
    sub_249EB7298(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_249EB7298(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a6 != 1)
  {
    sub_249E93230(result, a2);
    sub_249E93264(a5, a6);
    swift_bridgeObjectRelease();
    sub_249DFBBC4(a14, a15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_249EB7358(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a6 != 1)
  {
    sub_249E930E8(result, a2);
    sub_249E9311C(a5, a6);
    swift_bridgeObjectRetain();
    sub_249E5DA84(a14, a15);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_249EB7418(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(unsigned int *)(a1 + 136) | ((unint64_t)*(unsigned __int8 *)(a1 + 140) << 32));
  return a1;
}

uint64_t sub_249EB7480(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (*(_QWORD *)(result + 16) != 2)
  {
    if (qword_2578DDA10 != -1)
      swift_once();
    v1 = sub_249F1EF38();
    __swift_project_value_buffer(v1, (uint64_t)qword_2578FF458);
    v2 = sub_249F1EF20();
    v3 = sub_249F1F820();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_249D98000, v2, v3, "Error in IPA conditioning scale array: unexpected format", v4, 2u);
      MEMORY[0x24BD06618](v4, -1, -1);
    }

    sub_249EB70B4();
    swift_allocError();
    *(_OWORD *)v5 = xmmword_249F30B70;
    *(_BYTE *)(v5 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_249EB75A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;
  int v4;
  int v5;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  char isUniquelyReferenced_nonNull_native;
  float v14;
  float v15;
  float v16;
  float v17;
  char v18;
  uint64_t v19;
  float v20;
  char v21;
  float v22;
  char v23;
  _BYTE v24[8];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA48);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21910;
  *(_BYTE *)(inited + 32) = 4;
  sub_249EB7480(*(_QWORD *)(a1 + 8));
  if (v1)
  {
    swift_setDeallocating();
  }
  else
  {
    *(_DWORD *)(inited + 36) = v4;
    *(_DWORD *)(inited + 40) = v5;
    *(_BYTE *)(inited + 44) = 5;
    sub_249EB7480(*(_QWORD *)(a1 + 24));
    *(_DWORD *)(inited + 48) = v7;
    *(_DWORD *)(inited + 52) = v8;
    sub_249EAF31C(inited);
    sub_249DCB1B0(a1 + 40, (uint64_t)v25, &qword_2578DDE28);
    sub_249DCB1B0((uint64_t)v25, (uint64_t)&v26, &qword_2578DDE28);
    if (v26)
    {
      sub_249EB7480(v26);
      v10 = v9;
      v12 = v11;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_249ED893C(6, isUniquelyReferenced_nonNull_native, v10, v12);
      swift_bridgeObjectRelease();
    }
    sub_249DCB1B0(a1 + 56, (uint64_t)v24, &qword_2578DDE28);
    sub_249DCB1B0((uint64_t)v24, (uint64_t)&v27, &qword_2578DDE28);
    if (v27)
    {
      sub_249EB7480(v27);
      v15 = v14;
      v17 = v16;
      v18 = swift_isUniquelyReferenced_nonNull_native();
      sub_249ED893C(7, v18, v15, v17);
      swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE30);
    v19 = swift_initStackObject();
    *(_OWORD *)(v19 + 16) = xmmword_249F21910;
    *(_BYTE *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 36) = *(_DWORD *)(a1 + 4);
    *(_BYTE *)(v19 + 40) = 1;
    *(_DWORD *)(v19 + 44) = *(_DWORD *)(a1 + 16);
    inited = sub_249EAF41C(v19);
    if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    {
      v20 = *(float *)(a1 + 32);
      v21 = swift_isUniquelyReferenced_nonNull_native();
      sub_249ED8818(2, v21, v20);
      swift_bridgeObjectRelease();
    }
    if ((*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      v22 = *(float *)(a1 + 48);
      v23 = swift_isUniquelyReferenced_nonNull_native();
      sub_249ED8818(3, v23, v22);
      swift_bridgeObjectRelease();
    }
  }
  return inited;
}

uint64_t type metadata accessor for AppleDiffusionPipeline.ConditioningInputs(uint64_t a1)
{
  return sub_249DC74D0(a1, (uint64_t *)&unk_2578DDC78);
}

uint64_t sub_249EB7828@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_249EB4B70(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_249EB7844(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 < 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_249EB7870(uint64_t a1)
{
  uint64_t v1;

  return sub_249EE4964(a1, *(float *)(v1 + 24));
}

unint64_t sub_249EB78A4()
{
  unint64_t result;

  result = qword_2578DDB50;
  if (!qword_2578DDB50)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionPipeline.IPASetting, &type metadata for AppleDiffusionPipeline.IPASetting);
    atomic_store(result, (unint64_t *)&qword_2578DDB50);
  }
  return result;
}

unint64_t sub_249EB78EC()
{
  unint64_t result;

  result = qword_2578DDB58;
  if (!qword_2578DDB58)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionPipeline.MemoryReductionLevel, &type metadata for AppleDiffusionPipeline.MemoryReductionLevel);
    atomic_store(result, (unint64_t *)&qword_2578DDB58);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDiffusionPipeline(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v9;
    v10 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v10;
    v11 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v11;
    v12 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v12;
    v13 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v13;
    v30 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v30;
    v14 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v14;
    v32 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v32;
    v35 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v35;
    *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
    *(_QWORD *)(a1 + 208) = a2[26];
    *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
    v33 = a2[28];
    v29 = a2 + 28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      v15 = (void *)a2[29];
      *(_QWORD *)(v4 + 224) = v33;
      *(_QWORD *)(v4 + 232) = v15;
      swift_retain();
      v16 = v15;
    }
    else
    {
      *(_OWORD *)(v4 + 224) = *v29;
    }
    v18 = a2[31];
    *(_QWORD *)(v4 + 240) = a2[30];
    *(_QWORD *)(v4 + 248) = v18;
    v19 = a2[33];
    *(_QWORD *)(v4 + 256) = a2[32];
    *(_QWORD *)(v4 + 264) = v19;
    *(_OWORD *)(v4 + 272) = *((_OWORD *)a2 + 17);
    v20 = a2[37];
    *(_QWORD *)(v4 + 288) = a2[36];
    *(_QWORD *)(v4 + 296) = v20;
    v21 = a2[39];
    *(_QWORD *)(v4 + 304) = a2[38];
    *(_QWORD *)(v4 + 312) = v21;
    v22 = a2[41];
    *(_QWORD *)(v4 + 320) = a2[40];
    *(_QWORD *)(v4 + 328) = v22;
    v23 = a2[43];
    *(_QWORD *)(v4 + 336) = a2[42];
    *(_QWORD *)(v4 + 344) = v23;
    v24 = a2[45];
    *(_QWORD *)(v4 + 352) = a2[44];
    *(_QWORD *)(v4 + 360) = v24;
    v25 = a2[47];
    *(_QWORD *)(v4 + 368) = a2[46];
    *(_QWORD *)(v4 + 376) = v25;
    *(_QWORD *)(v4 + 384) = a2[48];
    v26 = *(int *)(a3 + 48);
    v37 = (uint64_t)a2 + v26;
    v34 = v4 + v26;
    *(_BYTE *)(v4 + 392) = *((_BYTE *)a2 + 392);
    v27 = sub_249F1EED8();
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v31(v34, v37, v27);
  }
  return v4;
}

uint64_t destroy for AppleDiffusionPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 224))
  {
    swift_release();

  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = sub_249F1EED8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AppleDiffusionPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v28 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v28;
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v13;
  v30 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v30;
  v33 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v33;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v31 = *(_QWORD *)(a2 + 224);
  v27 = (_OWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    v14 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v31;
    *(_QWORD *)(a1 + 232) = v14;
    swift_retain();
    v15 = v14;
  }
  else
  {
    *(_OWORD *)(a1 + 224) = *v27;
  }
  v16 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v16;
  v17 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v17;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  v18 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v18;
  v19 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v19;
  v20 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v20;
  v21 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v21;
  v22 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v22;
  v23 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v23;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v24 = *(int *)(a3 + 48);
  v35 = a2 + v24;
  v32 = a1 + v24;
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  v25 = sub_249F1EED8();
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v29(v32, v35, v25);
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a1 + 224);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v7 = *(_QWORD *)(a2 + 224);
  if (!v6)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 224) = v7;
      v11 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v11;
      swift_retain();
      v12 = v11;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    goto LABEL_8;
  }
  if (!v7)
  {
    sub_249EB847C(a1 + 224);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 224) = v7;
  swift_retain();
  swift_release();
  v8 = *(void **)(a2 + 232);
  v9 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v8;
  v10 = v8;

LABEL_8:
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  v13 = *(int *)(a3 + 48);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_249F1EED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t sub_249EB847C(uint64_t a1)
{
  destroy for Encoder(a1);
  return a1;
}

uint64_t initializeWithTake for AppleDiffusionPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v4;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v5 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v5;
  v6 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v6;
  v7 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v7;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  v8 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v8;
  v9 = *(int *)(a3 + 48);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  v12 = sub_249F1EED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AppleDiffusionPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 224);
  v15 = *(_QWORD *)(a1 + 224);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  if (!v15)
    goto LABEL_5;
  if (!v14)
  {
    sub_249EB847C(a1 + 224);
LABEL_5:
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 224) = v14;
  swift_release();
  v16 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

LABEL_6:
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_release();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_release();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_release();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_release();
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  swift_release();
  v20 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v20;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_release();
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  v21 = *(int *)(a3 + 48);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = sub_249F1EED8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionPipeline()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EB8898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_249F1EED8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionPipeline()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EB8920(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_249F1EED8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t sub_249EB8994()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1EED8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionPipeline.IPASetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_249EB8A8C + 4 * byte_249F304CD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_249EB8AC0 + 4 * byte_249F304C8[v4]))();
}

uint64_t sub_249EB8AC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EB8AC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EB8AD0);
  return result;
}

uint64_t sub_249EB8ADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EB8AE4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_249EB8AE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EB8AF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionPipeline.IPASetting()
{
  return &type metadata for AppleDiffusionPipeline.IPASetting;
}

uint64_t sub_249EB8B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionPipeline.Properties(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppleDiffusionPipeline.Properties(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppleDiffusionPipeline.Properties()
{
  return &type metadata for AppleDiffusionPipeline.Properties;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionPipeline.MemoryReductionLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249EB8C78 + 4 * byte_249F304D7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249EB8CAC + 4 * byte_249F304D2[v4]))();
}

uint64_t sub_249EB8CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EB8CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EB8CBCLL);
  return result;
}

uint64_t sub_249EB8CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EB8CD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249EB8CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EB8CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionPipeline.MemoryReductionLevel()
{
  return &type metadata for AppleDiffusionPipeline.MemoryReductionLevel;
}

uint64_t sub_249EB8CFC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 < 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AppleDiffusionPipeline.AppleDiffusionError(uint64_t a1)
{
  return sub_249EB7844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13DiffusionBase22AppleDiffusionPipelineV19AppleDiffusionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_249EB8CFC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionPipeline.AppleDiffusionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_249EB8CFC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_249EB7844(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppleDiffusionPipeline.AppleDiffusionError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_249EB7844(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AppleDiffusionPipeline.AppleDiffusionError()
{
  return &type metadata for AppleDiffusionPipeline.AppleDiffusionError;
}

void type metadata accessor for MLFeatureType(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDC10);
}

uint64_t sub_249EB8E38(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_249EB8E94(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for vImage_CGImageFormat(uint64_t a1)
{
  sub_249D9BE54(a1, qword_2578DDC18);
}

uint64_t *sub_249EB8F04(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v9 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(void **)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain();
    if (v12)
    {
      v13 = *(void **)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *((_QWORD *)v10 + 1) = v12;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
      v10[24] = v11[24];
      v14 = v13;
      v15 = v12;
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 9) = *(_OWORD *)(v11 + 9);
    }
  }
  return a1;
}

void sub_249EB900C(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  id *v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  swift_bridgeObjectRelease();
  v6 = (id *)(a1 + a2[8]);
  if (v6[1])
  {

  }
}

uint64_t sub_249EB90B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(void **)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = *(void **)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
    *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
    v13 = v12;
    v14 = v11;
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 9) = *(_OWORD *)(v10 + 9);
  }
  return a1;
}

uint64_t sub_249EB918C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = (__int128 *)(a2 + v8);
  v11 = *(_QWORD *)(a1 + v8 + 8);
  v12 = *((_QWORD *)v10 + 1);
  if (v11)
  {
    if (v12)
    {
      v13 = *(id *)v9;
      v14 = *(void **)v10;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v15 = v14;

      v16 = (void *)*((_QWORD *)v10 + 1);
      v17 = *(void **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v16;
      v18 = v16;

      v19 = *((_QWORD *)v10 + 2);
      *(_BYTE *)(v9 + 24) = *((_BYTE *)v10 + 24);
      *(_QWORD *)(v9 + 16) = v19;
    }
    else
    {
      sub_249EB92E4((id *)v9);
      v25 = *(__int128 *)((char *)v10 + 9);
      *(_OWORD *)v9 = *v10;
      *(_OWORD *)(v9 + 9) = v25;
    }
  }
  else if (v12)
  {
    v20 = *(void **)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v21 = (void *)*((_QWORD *)v10 + 1);
    *(_QWORD *)(v9 + 8) = v21;
    v22 = *((_QWORD *)v10 + 2);
    *(_BYTE *)(v9 + 24) = *((_BYTE *)v10 + 24);
    *(_QWORD *)(v9 + 16) = v22;
    v23 = v20;
    v24 = v21;
  }
  else
  {
    v26 = *v10;
    *(_OWORD *)(v9 + 9) = *(__int128 *)((char *)v10 + 9);
    *(_OWORD *)v9 = v26;
  }
  return a1;
}

id *sub_249EB92E4(id *a1)
{
  destroy for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration(a1);
  return a1;
}

uint64_t sub_249EB9318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)(a2 + v8);
  *v9 = *v10;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v10 + 9);
  return a1;
}

uint64_t sub_249EB93C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  if (!*(_QWORD *)(a1 + v8 + 8))
    goto LABEL_5;
  if (!*(_QWORD *)(v10 + 8))
  {
    sub_249EB92E4((id *)v9);
LABEL_5:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 9) = *(_OWORD *)(v10 + 9);
    return a1;
  }
  v11 = *(id *)v9;
  *(_QWORD *)v9 = *(_QWORD *)v10;

  v12 = *(void **)(v9 + 8);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);

  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  return a1;
}

uint64_t sub_249EB94C8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EB94D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_249EB9560()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EB956C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
  return result;
}

void sub_249EB95E8()
{
  unint64_t v0;

  sub_249EB9668();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_249EB9668()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2578DDC88[0])
  {
    v0 = sub_249F1EFF8();
    if (!v1)
      atomic_store(v0, qword_2578DDC88);
  }
}

uint64_t *sub_249EB96C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[5];
  v3 = a1[6];
  v5 = a1[15];
  v6 = a1[14];
  sub_249E930E8(a1[1], a1[2]);
  sub_249E9311C(v2, v3);
  swift_bridgeObjectRetain();
  sub_249E5DA84(v6, v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_249EB9788()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void type metadata accessor for vImage_Buffer(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDE48);
}

void type metadata accessor for vImageConverter(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDE50);
}

void type metadata accessor for vImageCVImageFormat(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDE58);
}

void type metadata accessor for MLModelMetadataKey(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDE60);
}

void type metadata accessor for CGColorRenderingIntent(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDE68);
}

void type metadata accessor for CGBitmapInfo(uint64_t a1)
{
  sub_249D9BE54(a1, &qword_2578DDE70);
}

uint64_t sub_249EB9824()
{
  return sub_249D9BBEC(&qword_2578DDE78, (uint64_t (*)(uint64_t))type metadata accessor for MLModelMetadataKey, (uint64_t)&unk_249F309C0);
}

uint64_t sub_249EB9850()
{
  return sub_249D9BBEC(&qword_2578DDE80, (uint64_t (*)(uint64_t))type metadata accessor for MLModelMetadataKey, (uint64_t)&unk_249F30994);
}

uint64_t sub_249EB987C()
{
  return sub_249D9BBEC(&qword_2578DDE88, (uint64_t (*)(uint64_t))type metadata accessor for MLModelMetadataKey, (uint64_t)&unk_249F30A30);
}

uint64_t DiffusionBasePipeline.ResourceURLs.textEncoderURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DiffusionBasePipeline.ResourceURLs.unetURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 20);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DiffusionBasePipeline.ResourceURLs()
{
  uint64_t result;

  result = qword_2578DDF08;
  if (!qword_2578DDF08)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DiffusionBasePipeline.ResourceURLs.unetChunk1URL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 24);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.unetChunk2URL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 28);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.decoderURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 32);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.encoderURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 36);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.safetyCheckerURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 40);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.vocabURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 44);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.mergesURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 48);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.controlNetDirURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 52);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.controlledUnetURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 56);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.controlledUnetChunk1URL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 60);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.controlledUnetChunk2URL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 64);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.multilingualTextEncoderProjectionURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DiffusionBasePipeline.ResourceURLs() + 68);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DiffusionBasePipeline.ResourceURLs.init(resourcesAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t);
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *, uint64_t);
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  int *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  int *v59;
  unsigned int v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  unint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  _QWORD v66[2];

  v63 = a1;
  v61 = a2;
  v2 = sub_249F1E770();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_249F1E7F4();
  v56 = *(_QWORD *)(v6 - 8);
  v7 = v56;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66[0] = 0xD000000000000014;
  v66[1] = 0x8000000249F39070;
  v10 = *MEMORY[0x24BDCD7A0];
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v60 = v10;
  v65(v5, v10, v2);
  v64 = sub_249D9E5BC();
  sub_249F1E7DC();
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12 = v2;
  v11(v5, v2);
  v62 = v11;
  swift_bridgeObjectRelease();
  v13 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v14 = v61;
  v13(v61, v9, v6);
  strcpy((char *)v66, "Unet.mlmodelc");
  HIWORD(v66[1]) = -4864;
  v65(v5, v10, v2);
  sub_249F1E7DC();
  v11(v5, v2);
  swift_bridgeObjectRelease();
  v15 = (int *)type metadata accessor for DiffusionBasePipeline.ResourceURLs();
  v16 = v14 + v15[5];
  v17 = v14;
  v58 = v6;
  v13(v16, v9, v6);
  v66[0] = 0xD000000000000013;
  v66[1] = 0x8000000249F39090;
  v18 = v60;
  v19 = v65;
  v65(v5, v60, v12);
  sub_249F1E7DC();
  v62(v5, v12);
  swift_bridgeObjectRelease();
  v20 = v15[6];
  v59 = v15;
  v13(v17 + v20, v9, v6);
  v57 = v13;
  v66[0] = 0xD000000000000013;
  v66[1] = 0x8000000249F390B0;
  v19(v5, v18, v12);
  v21 = v19;
  sub_249F1E7DC();
  v22 = v62;
  v62(v5, v12);
  swift_bridgeObjectRelease();
  v23 = v15[7];
  v24 = v61;
  v25 = v58;
  v13(v61 + v23, v9, v58);
  v66[0] = 0xD000000000000013;
  v66[1] = 0x8000000249F390D0;
  v26 = v60;
  v21(v5, v60, v12);
  sub_249F1E7DC();
  v22(v5, v12);
  swift_bridgeObjectRelease();
  v27 = v59;
  v28 = v24;
  v29 = v24 + v59[8];
  v30 = v57;
  v57(v29, v9, v25);
  v66[0] = 0xD000000000000013;
  v66[1] = 0x8000000249F390F0;
  v31 = v65;
  v65(v5, v26, v12);
  sub_249F1E7DC();
  v22(v5, v12);
  swift_bridgeObjectRelease();
  v32 = v27;
  v33 = v28 + v27[9];
  v34 = v58;
  v30(v33, v9, v58);
  v66[0] = 0xD000000000000016;
  v66[1] = 0x8000000249F39110;
  v31(v5, v60, v12);
  sub_249F1E7DC();
  v22(v5, v12);
  swift_bridgeObjectRelease();
  v35 = v61;
  v30(v61 + v32[10], v9, v34);
  strcpy((char *)v66, "vocab.json");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  v36 = v60;
  v65(v5, v60, v12);
  sub_249F1E7DC();
  v22(v5, v12);
  swift_bridgeObjectRelease();
  v38 = v58;
  v37 = v59;
  v39 = v35;
  v40 = v35 + v59[11];
  v41 = v57;
  v57(v40, v9, v58);
  strcpy((char *)v66, "merges.txt");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  v42 = v65;
  v65(v5, v36, v12);
  sub_249F1E7DC();
  v62(v5, v12);
  swift_bridgeObjectRelease();
  v41(v39 + v37[12], v9, v38);
  strcpy((char *)v66, "controlnet");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  v43 = v12;
  v42(v5, v36, v12);
  sub_249F1E7DC();
  v44 = v62;
  v62(v5, v12);
  swift_bridgeObjectRelease();
  v45 = v61;
  v41(v61 + v59[13], v9, v38);
  v66[0] = 0xD000000000000017;
  v66[1] = 0x8000000249F39130;
  v46 = v60;
  v65(v5, v60, v12);
  sub_249F1E7DC();
  v44(v5, v12);
  swift_bridgeObjectRelease();
  v41(v45 + v59[14], v9, v38);
  v66[0] = 0xD00000000000001DLL;
  v66[1] = 0x8000000249F39150;
  v47 = v65;
  v65(v5, v46, v12);
  sub_249F1E7DC();
  v62(v5, v12);
  swift_bridgeObjectRelease();
  v49 = v58;
  v48 = v59;
  v41(v61 + v59[15], v9, v58);
  v66[0] = 0xD00000000000001DLL;
  v66[1] = 0x8000000249F39170;
  v50 = v60;
  v47(v5, v60, v12);
  sub_249F1E7DC();
  v51 = v62;
  v62(v5, v12);
  swift_bridgeObjectRelease();
  v52 = v61;
  v53 = (uint64_t (*)(uint64_t, char *, uint64_t))v57;
  v57(v61 + v48[16], v9, v49);
  v66[0] = 0xD00000000000002ALL;
  v66[1] = 0x8000000249F39190;
  v65(v5, v50, v12);
  v54 = v63;
  sub_249F1E7DC();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v49);
  v51(v5, v43);
  swift_bridgeObjectRelease();
  return v53(v52 + v48[17], v9, v49);
}

uint64_t DiffusionBasePipeline.init(resourcesAt:controlNet:configuration:disableSafety:reduceMemory:useMultilingualTextEncoder:script:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, id);
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD, uint64_t, _QWORD *);
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, _QWORD *);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  void (*v62)(uint64_t, id);
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  id v75;
  int *v76;
  char *v77;
  void (*v78)(char *, char *, id);
  char *v79;
  char *v80;
  void *v81;
  id v82;
  void *v83;
  unsigned int v84;
  char *v85;
  _QWORD *v86;
  id v87;
  char *v88;
  void *v89;
  unsigned __int8 v90;
  _QWORD *v91;
  void (*v92)(char *, id);
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t (*v97)(unint64_t, char *, id);
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  void (*v104)(char *, uint64_t, id);
  uint64_t v105;
  char *v106;
  id v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t, id);
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  int *v117;
  id v118;
  id v119;
  void *v120;
  unsigned __int8 v121;
  char *v122;
  void (*v123)(char *, char *, id);
  char *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, id);
  void (*v136)(char *, id);
  uint64_t v137;
  id v138;
  char *v139;
  char *v140;
  uint64_t v142;
  char *v143;
  id v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  int v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  int *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  id v160;
  int v161;
  _QWORD *v162;
  char *v163;
  char *v164;
  void (*v165)(char *, char *, id);
  __int128 v166;
  uint64_t v167;
  ValueMetadata *v168;
  _UNKNOWN **v169;
  __int128 v170;
  ValueMetadata *v171;
  _UNKNOWN **v172;
  _OWORD v173[6];
  __int128 v174;
  _WORD v175[8];
  uint64_t v176;
  unint64_t v177;
  _WORD v178[8];
  _WORD v179[8];

  v154 = a7;
  v161 = a6;
  v152 = a5;
  v149 = a4;
  v160 = a3;
  v153 = a2;
  v164 = a1;
  v151 = a8;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v148 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v147 = (char *)&v142 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v143 = (char *)&v142 - v13;
  v14 = (_QWORD *)sub_249F1E7F4();
  v15 = (_QWORD *)*(v14 - 1);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v150 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v145 = (char *)&v142 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v158 = (char *)&v142 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v159 = (char *)&v142 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v163 = (char *)&v142 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v142 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v142 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v142 - v32;
  v34 = (int *)type metadata accessor for DiffusionBasePipeline.ResourceURLs();
  v35 = MEMORY[0x24BDAC7A8](v34);
  v146 = (uint64_t)&v142 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v142 - v37;
  v39 = (void (*)(char *, char *, id))v15[2];
  v39(v33, v164, v14);
  v156 = v33;
  DiffusionBasePipeline.ResourceURLs.init(resourcesAt:)((uint64_t)v33, (uint64_t)v38);
  v165 = v39;
  v155 = v34;
  v162 = v15;
  if ((v161 & 1) != 0)
  {
    v40 = (uint64_t)v143;
    v39(v143, &v38[v34[17]], v14);
    v41 = (void (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v15[7];
    v144 = v14;
    v41(v40, 0, 1, v14);
    if (v154 == 3)
      v42 = 0;
    else
      v42 = v154;
    v43 = v160;
    v44 = _s13DiffusionBase23MultilingualTextEncoderV7modelAt13configuration6scriptAC10Foundation3URLVSg_So20MLModelConfigurationCAA6ScriptOtcfC_0(v40, v160, v42);
    v168 = &type metadata for MultilingualTextEncoder;
    v169 = &protocol witness table for MultilingualTextEncoder;
    *(_QWORD *)&v166 = v44;
    *((_QWORD *)&v166 + 1) = v45;
    v167 = v46;
    v47 = (_OWORD *)sub_249D9E174(&v166, (uint64_t)&v170);
    v48 = (uint64_t)v157;
  }
  else
  {
    v39(v31, &v38[v34[12]], v14);
    v39(v28, &v38[v34[11]], v14);
    v49 = v157;
    v50 = sub_249EF78A8();
    v51 = v31;
    if (v49)
    {
      v52 = v28;
      v53 = (void (*)(char *, _QWORD *))v162[1];
      v53(v52, v14);
      v53(v31, v14);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v53(v164, v14);
      v54 = (uint64_t)v38;
      return sub_249EBB494(v54);
    }
    v143 = (char *)v50;
    v144 = v14;
    v157 = v38;
    swift_bridgeObjectRetain();
    v142 = (uint64_t)v28;
    v55 = sub_249F1E800();
    v57 = v56;
    sub_249F1E44C();
    swift_allocObject();
    sub_249F1E440();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDEA0);
    sub_249EBB4D0();
    v58 = v55;
    v59 = v57;
    sub_249F1E428();
    v48 = 0;
    v38 = v157;
    v60 = v144;
    sub_249DC3C24(v58, v59);
    swift_release();
    v61 = v166;
    v62 = (void (*)(uint64_t, id))v162[1];
    v62(v142, v60);
    v62((uint64_t)v51, v60);
    *(_QWORD *)&v174 = v143;
    *((_QWORD *)&v174 + 1) = v61;
    strcpy((char *)v175, "<|endoftext|>");
    v175[7] = -4864;
    v176 = 0x6F74726174737C3CLL;
    v177 = 0xEF3E7C7478657466;
    strcpy((char *)v178, "<|endoftext|>");
    v178[7] = -4864;
    strcpy((char *)v179, "<|endoftext|>");
    v179[7] = -4864;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = (uint64_t)v156;
    v165(v156, v38, v60);
    v43 = v160;
    sub_249EBD47C(&v174, v63, v160, (uint64_t)v173);
    v171 = &type metadata for TextEncoder;
    v172 = &protocol witness table for TextEncoder;
    v47 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v170 = v47;
    v64 = v173[3];
    v47[3] = v173[2];
    v47[4] = v64;
    v65 = v173[5];
    v47[5] = v173[4];
    v47[6] = v65;
    v66 = v173[1];
    v47[1] = v173[0];
    v47[2] = v66;
  }
  MEMORY[0x24BDAC7A8](v47);
  v157 = v38;
  *(&v142 - 2) = (uint64_t)v38;
  v67 = v48;
  v68 = sub_249EB3FE8((void (*)(_QWORD *))sub_249EBB590, (uint64_t)(&v142 - 4), v153);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v68 + 16))
  {
    v69 = v43;
    v70 = sub_249EBB338(v68, v69);
    v153 = v67;
    swift_bridgeObjectRelease();

    v71 = 5;
    if (v70)
    {
      v71 = 14;
      v72 = 15;
    }
    else
    {
      v72 = 6;
    }
    if (v70)
      v73 = 16;
    else
      v73 = 7;
    if (v70)
      v74 = (char *)v70;
    else
      v74 = 0;
    v143 = v74;
  }
  else
  {
    v153 = v48;
    swift_bridgeObjectRelease();
    v143 = 0;
    v73 = 7;
    v72 = 6;
    v71 = 5;
  }
  v75 = v144;
  v76 = v155;
  v77 = v157;
  v78 = v165;
  v165(v163, &v157[v155[v71]], v144);
  v78(v159, &v77[v76[v72]], v75);
  v79 = &v77[v76[v73]];
  v80 = v158;
  v78(v158, v79, v75);
  v81 = (void *)objc_opt_self();
  v82 = objc_msgSend(v81, sel_defaultManager);
  sub_249F1E7B8();
  v83 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v84 = objc_msgSend(v82, sel_fileExistsAtPath_, v83);

  v85 = v145;
  v78(v145, v80, v75);
  v86 = v162;
  v144 = v81;
  if (!v84)
  {
    v92 = (void (*)(char *, id))v162[1];
    v92(v85, v75);
    goto LABEL_25;
  }
  v87 = objc_msgSend(v81, sel_defaultManager);
  sub_249F1E7B8();
  v88 = v85;
  v89 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v90 = objc_msgSend(v87, sel_fileExistsAtPath_, v89);

  v91 = v86;
  v92 = (void (*)(char *, id))v86[1];
  v92(v88, v75);
  if ((v90 & 1) == 0)
  {
LABEL_25:
    v102 = (uint64_t)v156;
    v104 = (void (*)(char *, uint64_t, id))v165;
    v165(v156, v163, v75);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
    v105 = swift_allocObject();
    *(_OWORD *)(v105 + 16) = xmmword_249F21760;
    v106 = v150;
    v104(v150, v102, v75);
    type metadata accessor for ManagedMLModel();
    swift_allocObject();
    v99 = v160;
    v107 = v160;
    *(_QWORD *)(v105 + 32) = ManagedMLModel.init(modelAt:configuration:name:)(v106, v107, (uint64_t)"noise_predictor", 15, 2);
    *(_QWORD *)&v166 = v105;
    sub_249F1F55C();
    v142 = v166;

    v145 = (char *)v92;
    v92((char *)v102, v75);
    v103 = v155;
    v91 = v162;
    goto LABEL_26;
  }
  v145 = (char *)v92;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD90);
  v93 = v91[9];
  v94 = (*((unsigned __int8 *)v91 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v91 + 80);
  v95 = swift_allocObject();
  *(_OWORD *)(v95 + 16) = xmmword_249F21910;
  v96 = v95 + v94;
  v97 = (uint64_t (*)(unint64_t, char *, id))v165;
  v165((char *)v96, v159, v75);
  v98 = v97(v96 + v93, v158, v75);
  MEMORY[0x24BDAC7A8](v98);
  v99 = v160;
  *(&v142 - 2) = (uint64_t)v160;
  *(&v142 - 1) = (uint64_t)&unk_251B5A7C8;
  v100 = v99;
  v101 = v153;
  v142 = sub_249EBB5AC(v95, (void (*)(_QWORD, char *))sub_249EBB8F0, (uint64_t)(&v142 - 4));
  v153 = v101;

  swift_bridgeObjectRelease();
  v103 = v155;
  v102 = (uint64_t)v156;
LABEL_26:
  v108 = (uint64_t)v157;
  v165((char *)v102, &v157[v103[8]], v75);
  v109 = (void (*)(char *, uint64_t, uint64_t, id))v91[7];
  v110 = (uint64_t)v147;
  v109(v147, 1, 1, v75);
  v111 = (uint64_t)v148;
  v109(v148, 1, 1, v75);
  v112 = v99;
  v113 = v108;
  v162 = v112;
  v160 = (id)_s13DiffusionBase7DecoderV7modelAt010alphaModelE0012skinPresencegE013configurationAC10Foundation3URLV_AJSgAKSo20MLModelConfigurationCtcfC_0(v102, v110, v111, v112);
  v147 = v115;
  v148 = v114;
  v116 = v146;
  sub_249EBB8AC(v108, v146);
  v117 = v103;
  if ((v149 & 1) != 0)
  {
    sub_249EBB494(v116);
    v150 = 0;
    v118 = v144;
  }
  else
  {
    v118 = v144;
    v119 = objc_msgSend(v144, sel_defaultManager);
    sub_249F1E7B8();
    v120 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v121 = objc_msgSend(v119, sel_fileExistsAtPath_, v120);

    sub_249EBB494(v116);
    v103 = v117;
    if ((v121 & 1) != 0)
    {
      v122 = v156;
      v123 = v165;
      v165(v156, (char *)(v113 + v117[10]), v75);
      v124 = v150;
      v123(v150, v122, v75);
      type metadata accessor for ManagedMLModel();
      swift_allocObject();
      v150 = (char *)ManagedMLModel.init(modelAt:configuration:name:)(v124, v162, (uint64_t)"SafetyChecker", 13, 2);
      ((void (*)(char *, id))v145)(v122, v75);
    }
    else
    {
      v150 = 0;
    }
  }
  v125 = objc_msgSend(v118, sel_defaultManager);
  v126 = v103[9];
  v127 = v113;
  v128 = (char *)(v113 + v126);
  sub_249F1E7B8();
  v129 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v130 = objc_msgSend(v125, sel_fileExistsAtPath_, v129);

  if (v130)
  {
    v131 = (uint64_t)v156;
    v165(v156, v128, v75);
    v132 = _s13DiffusionBase7EncoderV7modelAt13configurationAC10Foundation3URLV_So20MLModelConfigurationCtcfC_0(v131, v162);
    v134 = v133;
    v135 = (void (*)(char *, id))v145;
    ((void (*)(char *, id))v145)(v164, v75);
    v135(v158, v75);
    v135(v159, v75);
    v135(v163, v75);
  }
  else
  {

    v136 = (void (*)(char *, id))v145;
    ((void (*)(char *, id))v145)(v164, v75);
    v136(v158, v75);
    v136(v159, v75);
    v136(v163, v75);
    v132 = 0;
    v134 = 0;
  }
  v137 = v151;
  sub_249D9E174(&v170, v151);
  v138 = v160;
  *(_QWORD *)(v137 + 40) = v142;
  *(_QWORD *)(v137 + 48) = v138;
  v139 = v147;
  *(_QWORD *)(v137 + 56) = v148;
  *(_QWORD *)(v137 + 64) = v139;
  *(_QWORD *)(v137 + 72) = v132;
  *(_QWORD *)(v137 + 80) = v134;
  v140 = v143;
  *(_QWORD *)(v137 + 88) = v150;
  *(_QWORD *)(v137 + 96) = v140;
  *(_BYTE *)(v137 + 104) = v152 & 1;
  *(_BYTE *)(v137 + 105) = v161 & 1;
  *(_BYTE *)(v137 + 106) = v154;
  v54 = v127;
  return sub_249EBB494(v54);
}

uint64_t sub_249EBB214(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = sub_249F1E770();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[1];
  v10 = *a1;
  v11 = v6;
  swift_bridgeObjectRetain();
  sub_249F1F460();
  v8 = v10;
  v7 = v11;
  type metadata accessor for DiffusionBasePipeline.ResourceURLs();
  v10 = v8;
  v11 = v7;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
  sub_249D9E5BC();
  sub_249F1E7DC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EBB338(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v5 = sub_249F1E7F4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v13[1] = v2;
    v15 = MEMORY[0x24BEE4AF8];
    sub_249F1FB44();
    v11 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v14 = *(_QWORD *)(v6 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      v12(v8, v11, v5);
      type metadata accessor for ManagedMLModel();
      swift_allocObject();
      ManagedMLModel.init(modelAt:configuration:name:)(v8, a2, (uint64_t)"ControlNet?", 11, 2);
      sub_249F1FB20();
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
      v11 += v14;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_249EBB494(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DiffusionBasePipeline.ResourceURLs();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_249EBB4D0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2578DDEA8;
  if (!qword_2578DDEA8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DDEA0);
    v2[0] = MEMORY[0x24BEE0D38];
    v2[1] = MEMORY[0x24BEE1798];
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2578DDEA8);
  }
  return result;
}

uint64_t sub_249EBB534()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_249EBB590(uint64_t *a1)
{
  return sub_249EBB214(a1);
}

uint64_t sub_249EBB5AC(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD v33[2];
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(_QWORD, char *);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v4 = v3;
  v42 = a2;
  v43 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_249F1E7F4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF70);
  v11 = MEMORY[0x24BDAC7A8](v40);
  v39 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v38 = (_QWORD *)((char *)v33 - v14);
  MEMORY[0x24BDAC7A8](v13);
  v37 = (char *)v33 - v15;
  v46 = MEMORY[0x24BEE4AF8];
  sub_249F1FB44();
  v16 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v36 = v16;
  v33[0] = a1;
  v33[1] = v4;
  if (v16)
  {
    v17 = 0;
    v18 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v34 = *(_QWORD *)(v9 + 72);
    v35 = v19;
    v20 = (uint64_t)v44;
    v21 = v40;
    while (1)
    {
      v35(v20, v18, v8);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v22(v20, 0, 1, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v20, 1, v8) == 1)
        break;
      v45 = v17 + 1;
      v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
      v24 = v8;
      v25 = v41;
      v23(v41, v20, v24);
      v26 = &v39[*(int *)(v21 + 48)];
      v27 = v25;
      v8 = v24;
      v23(v26, (uint64_t)v27, v24);
      v28 = v38;
      v29 = (char *)v38 + *(int *)(v21 + 48);
      *v38 = v17;
      v23(v29, (uint64_t)v26, v8);
      v30 = (uint64_t)v28;
      v31 = v37;
      sub_249EBC270(v30, (uint64_t)v37);
      v42(*(_QWORD *)v31, &v31[*(int *)(v21 + 48)]);
      sub_249DCC2FC((uint64_t)v31, &qword_2578DDF70);
      sub_249F1FB20();
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
      v20 = (uint64_t)v44;
      v18 += v34;
      v17 = v45;
      if (v36 == v45)
        goto LABEL_7;
    }
  }
  else
  {
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v20 = (uint64_t)v44;
LABEL_7:
    v22(v20, 1, 1, v8);
  }
  sub_249DCC2FC(v20, &qword_2578D7E10);
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t sub_249EBB8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiffusionBasePipeline.ResourceURLs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EBB8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_249ED468C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t *_s12ResourceURLsVwCP_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_249F1E7F4();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    v8((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]), v7);
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    v8((uint64_t *)((char *)a1 + a3[10]), (uint64_t *)((char *)a2 + a3[10]), v7);
    v8((uint64_t *)((char *)a1 + a3[11]), (uint64_t *)((char *)a2 + a3[11]), v7);
    v8((uint64_t *)((char *)a1 + a3[12]), (uint64_t *)((char *)a2 + a3[12]), v7);
    v8((uint64_t *)((char *)a1 + a3[13]), (uint64_t *)((char *)a2 + a3[13]), v7);
    v8((uint64_t *)((char *)a1 + a3[14]), (uint64_t *)((char *)a2 + a3[14]), v7);
    v8((uint64_t *)((char *)a1 + a3[15]), (uint64_t *)((char *)a2 + a3[15]), v7);
    v8((uint64_t *)((char *)a1 + a3[16]), (uint64_t *)((char *)a2 + a3[16]), v7);
    v8((uint64_t *)((char *)a1 + a3[17]), (uint64_t *)((char *)a2 + a3[17]), v7);
  }
  return a1;
}

uint64_t _s12ResourceURLsVwxx_0(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_249F1E7F4();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  v6(a1 + a2[6], v4);
  v6(a1 + a2[7], v4);
  v6(a1 + a2[8], v4);
  v6(a1 + a2[9], v4);
  v6(a1 + a2[10], v4);
  v6(a1 + a2[11], v4);
  v6(a1 + a2[12], v4);
  v6(a1 + a2[13], v4);
  v6(a1 + a2[14], v4);
  v6(a1 + a2[15], v4);
  v6(a1 + a2[16], v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + a2[17], v4);
}

uint64_t _s12ResourceURLsVwcp_0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_249F1E7F4();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v7(a1 + a3[16], a2 + a3[16], v6);
  v7(a1 + a3[17], a2 + a3[17], v6);
  return a1;
}

uint64_t _s12ResourceURLsVwca_0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_249F1E7F4();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v7(a1 + a3[16], a2 + a3[16], v6);
  v7(a1 + a3[17], a2 + a3[17], v6);
  return a1;
}

uint64_t _s12ResourceURLsVwtk_0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_249F1E7F4();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v7(a1 + a3[16], a2 + a3[16], v6);
  v7(a1 + a3[17], a2 + a3[17], v6);
  return a1;
}

uint64_t _s12ResourceURLsVwta_0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_249F1E7F4();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  v7(a1 + a3[16], a2 + a3[16], v6);
  v7(a1 + a3[17], a2 + a3[17], v6);
  return a1;
}

uint64_t _s12ResourceURLsVwet_0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EBC168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s12ResourceURLsVwst_0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EBC1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_249EBC1F0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1E7F4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_249EBC270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double TextEncoder.init(tokenizer:modelAt:configuration:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  _OWORD v9[6];

  sub_249EBD47C(a1, a2, a3, (uint64_t)v9);
  v5 = v9[3];
  a4[2] = v9[2];
  a4[3] = v5;
  v6 = v9[5];
  a4[4] = v9[4];
  a4[5] = v6;
  result = *(double *)v9;
  v8 = v9[1];
  *a4 = v9[0];
  a4[1] = v8;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TextEncoder.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall TextEncoder.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

uint64_t TextEncoder.encode(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = sub_249EBC6D8();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * v5 + 24);
    swift_bridgeObjectRelease();
    v7 = BPETokenizer.tokenize(input:minCount:)(a1, v6, 0);
    v9 = v8;
    v10 = *(_QWORD *)(v8 + 16);
    if (v6 >= v10)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      sub_249EBCDB4(v9, a2);
      return swift_bridgeObjectRelease();
    }
    v11 = *(_QWORD *)(v7 + 16);
    if (__OFSUB__(v11, v6))
    {
      __break(1u);
    }
    else
    {
      sub_249EBC938(v11 - v6, v7);
      if (!__OFSUB__(v10, v6))
      {
        v15 = sub_249EBCB8C(v10 - v6, v9);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8E30);
        sub_249DDFC68((unint64_t *)&qword_2578D8E38, &qword_2578D8E30, MEMORY[0x24BEE12B0]);
        sub_249F1F280();
        v12 = MEMORY[0x24BEE0D00];
        sub_249F1F4CC();
        sub_249D9E5BC();
        sub_249F1F9DC();
        swift_bridgeObjectRelease();
        sub_249F1F9DC();
        swift_bridgeObjectRelease();
        sub_249F1F9DC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_249F21770;
        sub_249F1FA84();
        sub_249F1F460();
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        sub_249F1FE14();
        sub_249F1F460();
        sub_249F1F460();
        swift_bridgeObjectRelease();
        sub_249F1F460();
        *(_QWORD *)(v13 + 56) = v12;
        v9 = v15;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0xE000000000000000;
        sub_249F1FF58();
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_249EBC6D8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  id v15;
  _QWORD *v16;

  v1 = *(void **)(*(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v2 = v1;
  sub_249F1F874();

  v3 = objc_msgSend(v15, sel_multiArrayConstraint);
  if (!v3)
    goto LABEL_17;
  v4 = objc_msgSend(v3, sel_shape);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v5 = sub_249F1F544();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_14;
LABEL_4:
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_249DB677C(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v8 = v16;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x24BD056B8](v7, v5);
      else
        v9 = *(id *)(v5 + 8 * v7 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_integerValue);

      v13 = v16[2];
      v12 = v16[3];
      if (v13 >= v12 >> 1)
        sub_249DB677C(v12 > 1, v13 + 1, 1);
      ++v7;
      v16[2] = v13 + 1;
      v16[v13 + 4] = v11;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_249EBC938(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (result < 0)
    goto LABEL_30;
  v2 = a2;
  if (!result)
    return v2;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
    v8 = MEMORY[0x24BEE4AF8];
LABEL_25:
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  v4 = 0;
  v5 = 0;
  v6 = (uint64_t *)(a2 + 40);
  v25 = v3 - 1;
  v7 = MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4AF8];
  v24 = result;
  do
  {
    v14 = *(v6 - 1);
    v13 = *v6;
    v15 = *(_QWORD *)(v7 + 16);
    if (v15 < result)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_249DB673C(0, v15 + 1, 1);
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      if (v10 >= v9 >> 1)
        sub_249DB673C(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v7 + 16) = v10 + 1;
      v11 = v7 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v14;
      *(_QWORD *)(v11 + 40) = v13;
      result = v24;
      v12 = a2;
LABEL_8:
      if (v25 == v4)
        goto LABEL_25;
      goto LABEL_9;
    }
    if (v5 >= v15)
      goto LABEL_28;
    v23 = *(v6 - 1);
    v16 = v7 + 16 * v5;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(_QWORD *)(v16 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_249DB673C(0, *(_QWORD *)(v8 + 16) + 1, 1);
    v20 = *(_QWORD *)(v8 + 16);
    v19 = *(_QWORD *)(v8 + 24);
    if (v20 >= v19 >> 1)
      sub_249DB673C(v19 > 1, v20 + 1, 1);
    *(_QWORD *)(v8 + 16) = v20 + 1;
    v21 = v8 + 16 * v20;
    *(_QWORD *)(v21 + 32) = v17;
    *(_QWORD *)(v21 + 40) = v18;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_249ECDA88(v7);
      v7 = result;
    }
    v12 = a2;
    if (v5 >= *(_QWORD *)(v7 + 16))
      goto LABEL_29;
    v22 = v7 + 16 * v5;
    swift_bridgeObjectRelease();
    result = v24;
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v13;
    if ((uint64_t)++v5 < v24)
      goto LABEL_8;
    if (v25 == v4)
      goto LABEL_25;
    v5 = 0;
LABEL_9:
    ++v4;
    v6 += 2;
  }
  while (v4 < *(_QWORD *)(v12 + 16));
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_249EBCB8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result < 0)
    goto LABEL_30;
  v2 = a2;
  v3 = result;
  if (!result)
    return v2;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v9 = MEMORY[0x24BEE4AF8];
LABEL_25:
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  v5 = 0;
  v6 = 0;
  v7 = a2 + 32;
  v20 = v4 - 1;
  v8 = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  v18 = result;
  v19 = a2 + 32;
  do
  {
    v12 = *(_QWORD *)(v7 + 8 * v5);
    v13 = *(_QWORD *)(v8 + 16);
    if (v13 < v3)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_249DB677C(0, v13 + 1, 1);
        v7 = v19;
      }
      v11 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
      if (v11 >= v10 >> 1)
      {
        result = sub_249DB677C(v10 > 1, v11 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v8 + 16) = v11 + 1;
      *(_QWORD *)(v8 + 8 * v11 + 32) = v12;
LABEL_8:
      if (v20 == v5)
        goto LABEL_25;
      goto LABEL_9;
    }
    if (v6 >= v13)
      goto LABEL_28;
    v14 = v2;
    v15 = *(_QWORD *)(v8 + 8 * v6 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_249DB677C(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v7 = v19;
    }
    v17 = *(_QWORD *)(v9 + 16);
    v16 = *(_QWORD *)(v9 + 24);
    if (v17 >= v16 >> 1)
    {
      sub_249DB677C(v16 > 1, v17 + 1, 1);
      v7 = v19;
    }
    *(_QWORD *)(v9 + 16) = v17 + 1;
    *(_QWORD *)(v9 + 8 * v17 + 32) = v15;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_249ECDA9C(v8);
      v8 = result;
    }
    v2 = v14;
    v3 = v18;
    if (v6 >= *(_QWORD *)(v8 + 16))
      goto LABEL_29;
    *(_QWORD *)(v8 + 8 * v6++ + 32) = v12;
    if ((uint64_t)v6 < v18)
      goto LABEL_8;
    if (v20 == v5)
      goto LABEL_25;
    v6 = 0;
LABEL_9:
    ++v5;
  }
  while (v5 < *(_QWORD *)(v2 + 16));
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void sub_249EBCDB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  unint64_t *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)@<X0>(void *@<X0>, _QWORD *@<X8>);
  uint64_t v51;
  unint64_t *v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)&v41 - v10;
  v11 = *(_QWORD *)(v2 + 80);
  v45 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue;
  v12 = *(void **)(v11 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  v49 = v11;
  v50 = sub_249EBD358;
  v51 = 0;
  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v13 = v12;
  sub_249F1F874();
  v14 = v3;
  if (!v3)
  {
    v43 = a2;

    v15 = v52;
    v16 = objc_msgSend(v52, sel_name);

    v17 = sub_249F1F328();
    v44 = v18;

    sub_249EBC6D8();
    v19 = *(_QWORD *)(a1 + 16);
    v20 = (unint64_t *)MEMORY[0x24BEE4AF8];
    if (v19)
    {
      v41 = v17;
      v42 = 0;
      v52 = (unint64_t *)MEMORY[0x24BEE4AF8];
      sub_249EB5D34(0, v19, 0);
      v20 = v52;
      v21 = (uint64_t *)(a1 + 32);
      v22 = v52[2];
      do
      {
        v24 = *v21++;
        v23 = v24;
        v52 = v20;
        v25 = v20[3];
        if (v22 >= v25 >> 1)
        {
          sub_249EB5D34(v25 > 1, v22 + 1, 1);
          v20 = v52;
        }
        v20[2] = v22 + 1;
        *((float *)v20 + v22++ + 8) = (float)v23;
        --v19;
      }
      while (v19);
      v14 = v42;
      v17 = v41;
    }
    v52 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
    sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
    v26 = v46;
    sub_249F1EFEC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249F21770;
    v28 = v44;
    *(_QWORD *)(inited + 32) = v17;
    *(_QWORD *)(inited + 40) = v28;
    v29 = sub_249D9D9F4(0, &qword_2578DDE20);
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v9, v26, v48);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    v30 = sub_249F1F7FC();
    *(_QWORD *)(inited + 72) = v29;
    *(_QWORD *)(inited + 48) = v30;
    sub_249DAE8D4(inited);
    v31 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v32 = sub_249EFD4E8();
    if (v14)
      goto LABEL_15;
    v33 = v32;
    v34 = MEMORY[0x24BDAC7A8](v32);
    *(&v41 - 2) = v34;
    MEMORY[0x24BDAC7A8](v34);
    *(&v41 - 4) = v11;
    *(&v41 - 3) = (uint64_t)sub_249EBDA9C;
    *(&v41 - 2) = v35;
    v37 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    sub_249F1F874();

    v38 = v52;
    v13 = (id)sub_249F1F304();
    v39 = objc_msgSend(v38, sel_featureValueForName_, v13);

    if (v39)
    {
      if (objc_msgSend(v39, sel_multiArrayValue))
      {
        v40 = v48;
        sub_249F1F04C();

        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v40);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }

  swift_unexpectedError();
  __break(1u);
LABEL_15:
  swift_unexpectedError();
  __break(1u);
}

id sub_249EBD2A4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  id v5;
  id v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8[0] = 0;
  v4 = objc_msgSend(a1, sel_predictionFromFeatures_error_, a2, v8);
  v5 = v8[0];
  if (v4)
  {
    *a3 = v4;
    return v5;
  }
  else
  {
    v7 = v8[0];
    sub_249F1E710();

    return (id)swift_willThrow();
  }
}

uint64_t sub_249EBD358@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_inputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v5 = sub_249F1F208();

  sub_249ECFC30(v5);
  v7 = v6;
  v9 = v8;
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    result = swift_bridgeObjectRelease();
    *a2 = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_249EBD428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TextEncoder.encode(_:)(a1, a2);
}

void sub_249EBD43C()
{
  ManagedMLModel.loadResources()();
}

void sub_249EBD45C()
{
  ManagedMLModel.unloadResources()();
}

__n128 sub_249EBD47C@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  v33 = a2;
  v34 = a3;
  v6 = sub_249F1E7F4();
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v29 = sub_249F1F868();
  v8 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_249F1F85C();
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_249F1F1D8();
  MEMORY[0x24BDAC7A8](v12);
  v28.n128_u64[0] = sub_249D9D9F4(0, &qword_2578DDB28);
  sub_249F1F1CC();
  v35 = MEMORY[0x24BEE4AF8];
  sub_249EBDAB4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB38);
  sub_249DDFC68(&qword_2578DDB40, &qword_2578DDB38, MEMORY[0x24BEE12C8]);
  sub_249F1FA0C();
  (*(void (**)(char *, _QWORD, _QWORD))(v8 + 104))(v10, *MEMORY[0x24BEE5750], v29);
  v13 = sub_249F1F88C();
  v14 = a1[2];
  v28 = (__n128)a1[3];
  v29 = v14;
  v15 = *((_QWORD *)a1 + 8);
  v16 = *((_QWORD *)a1 + 9);
  v18 = v30;
  v17 = v31;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v20 = a1[1];
  v26 = *a1;
  v27 = v20;
  v22 = v32;
  v21 = v33;
  v19(v30, v33, v32);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v23 = ManagedMLModel.init(modelAt:configuration:name:)(v18, v34, (uint64_t)"TextEncoder", 11, 2);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v22);
  v24 = v27;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v24;
  result = v28;
  *(_OWORD *)(a4 + 32) = v29;
  *(__n128 *)(a4 + 48) = result;
  *(_QWORD *)(a4 + 64) = v15;
  *(_QWORD *)(a4 + 72) = v16;
  *(_QWORD *)(a4 + 80) = v23;
  *(_QWORD *)(a4 + 88) = v13;
  return result;
}

void destroy for TextEncoder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

_QWORD *initializeWithCopy for TextEncoder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = (void *)a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = v8;
  return a1;
}

_QWORD *assignWithCopy for TextEncoder(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  v4 = (void *)a2[11];
  v5 = (void *)a1[11];
  a1[11] = v4;
  v6 = v4;

  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for TextEncoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  v7 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionSketchConditioner(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionSketchConditioner(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextEncoder()
{
  return &type metadata for TextEncoder;
}

void sub_249EBDA80(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_249EDC380(*(_QWORD *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

id sub_249EBDA9C@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_249EBD2A4(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_249EBDAB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DDB30;
  if (!qword_2578DDB30)
  {
    v1 = sub_249F1F85C();
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_2578DDB30);
  }
  return result;
}

void sub_249EBDAFC(_QWORD *a1@<X8>)
{
  sub_249EBDA80(a1);
}

uint64_t sub_249EBDB10(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v5 = result;
    v9 = MEMORY[0x24BEE4AF8];
    result = sub_249EB5CE0(0, v2 & ~(v2 >> 63), 0);
    if (a2 >= v5 && (v2 & 0x8000000000000000) == 0)
    {
      v3 = v9;
      do
      {
        v6 = sub_249EBDDC0();
        v8 = *(_QWORD *)(v9 + 16);
        v7 = *(_QWORD *)(v9 + 24);
        if (v8 >= v7 >> 1)
          sub_249EB5CE0(v7 > 1, v8 + 1, 1);
        *(_QWORD *)(v9 + 16) = v8 + 1;
        *(double *)(v9 + 8 * v8 + 32) = (float)((float)(v6 & 0xFFFFFF) * 0.000000059605);
        --v2;
      }
      while (v2);
      return v3;
    }
  }
  __break(1u);
  return result;
}

void sub_249EBDC1C(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  char v11;
  int v12;
  double v13;
  int v14;
  unsigned int v15;
  double v16;
  __double2 v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!v5)
    return;
  v22 = MEMORY[0x24BEE4AF8];
  sub_249EB5CE0(0, v5 & ~(v5 >> 63), 0);
  if (a2 < a1 || v5 < 0)
  {
LABEL_13:
    __break(1u);
    return;
  }
  do
  {
    v11 = *(_BYTE *)(a3 + 24);
    if ((v11 & 1) != 0)
    {
      v12 = sub_249EBDDC0();
      v13 = (double)(sub_249EBDDC0() | ((*(_QWORD *)&v12 & 0x1FFFFFuLL) << 32)) * 1.11022302e-16;
      v14 = sub_249EBDDC0();
      v15 = sub_249EBDDC0();
      v16 = sqrt(log(1.0 - (double)(v15 | ((*(_QWORD *)&v14 & 0x1FFFFFuLL) << 32)) * 1.11022302e-16) * -2.0);
      v17 = __sincos_stret(v13 * 6.28318531);
      v18 = v16 * v17.__sinval;
      v19 = v16 * v17.__cosval;
    }
    else
    {
      v19 = *(double *)(a3 + 16);
      v18 = 0.0;
    }
    *(double *)(a3 + 16) = v18;
    *(_BYTE *)(a3 + 24) = v11 ^ 1;
    v21 = *(_QWORD *)(v22 + 16);
    v20 = *(_QWORD *)(v22 + 24);
    if (v21 >= v20 >> 1)
      sub_249EB5CE0(v20 > 1, v21 + 1, 1);
    *(_QWORD *)(v22 + 16) = v21 + 1;
    *(double *)(v22 + 8 * v21 + 32) = v19 * a5 + a4;
    --v5;
  }
  while (v5);
}

uint64_t sub_249EBDDC0()
{
  char **v0;
  char *v1;
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;

  v2 = *v0;
  v1 = v0[1];
  v3 = (char *)*((_QWORD *)*v0 + 2);
  if (v1 == v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_49;
    while (1)
    {
      v4 = *((_QWORD *)v2 + 2);
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = *((_QWORD *)v2 + 2);
      v6 = v5 - 1;
      if (v4 < v6)
        v6 = *((_QWORD *)v2 + 2);
      v7 = 397;
      if (v4 > 0x18D)
        v7 = *((_QWORD *)v2 + 2);
      v8 = v7 - 397;
      if (v6 >= v8)
        v6 = v8;
      if (v6 >= 0xE2)
        v6 = 226;
      if (v6 >= 4)
      {
        v14 = v6 + 1;
        v15 = v14 & 3;
        if ((v14 & 3) == 0)
          v15 = 4;
        v9 = v14 - v15;
        v16 = (int8x16_t)vdupq_n_s32(0x7FFFFFFEu);
        v17.i64[0] = 0x8000000080000000;
        v17.i64[1] = 0x8000000080000000;
        v18.i64[0] = 0x100000001;
        v18.i64[1] = 0x100000001;
        v19 = (int8x16_t)vdupq_n_s32(0x9908B0DF);
        v20 = v9;
        v21 = v2;
        do
        {
          *((int8x16_t *)v21 + 2) = veorq_s8(veorq_s8(vbicq_s8(v19, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v21 + 36), v18))), *(int8x16_t *)(v21 + 1620)), (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 36), v16), vandq_s8(*((int8x16_t *)v21 + 2), v17)), 1uLL));
          v21 += 16;
          v20 -= 4;
        }
        while (v20);
      }
      else
      {
        v9 = 0;
      }
      do
      {
        if (v9 >= v4)
          goto LABEL_43;
        if (v9 + 1 >= v4)
          goto LABEL_44;
        v22 = v9 + 397;
        if (v9 + 397 >= v4)
          goto LABEL_45;
        v23 = &v2[4 * v9];
        *((_DWORD *)v23 + 8) = ((int)(*((_DWORD *)v23 + 9) << 31) >> 31) & 0x9908B0DF ^ ((*((_DWORD *)v23 + 9) & 0x7FFFFFFE | *((_DWORD *)v23 + 8) & 0x80000000) >> 1) ^ *((_DWORD *)v23 + 405);
        ++v9;
      }
      while (v22 != 623);
      v24 = v4 - 227;
      if (v4 - 227 >= v4 - 228)
        v24 = v4 - 228;
      if (v24 >= 0x18B)
        v24 = 395;
      if (v24 >= 4)
      {
        v26 = v24 + 1;
        v27 = v26 & 3;
        if ((v26 & 3) == 0)
          v27 = 4;
        v28 = v26 - v27;
        v25 = v28 + 227;
        v29 = v2 + 940;
        v30.i64[0] = 0x8000000080000000;
        v30.i64[1] = 0x8000000080000000;
        v31 = (int8x16_t)vdupq_n_s32(0x7FFFFFFEu);
        v32.i64[0] = 0x100000001;
        v32.i64[1] = 0x100000001;
        v33 = (int8x16_t)vdupq_n_s32(0x9908B0DF);
        do
        {
          *(int8x16_t *)v29 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v29 + 4), v31), vandq_s8(*(int8x16_t *)v29, v30)), 1uLL), veorq_s8(*(int8x16_t *)(v29 - 908), vbicq_s8(v33, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v29 + 4), v32)))));
          v29 += 16;
          v28 -= 4;
        }
        while (v28);
      }
      else
      {
        v25 = 227;
      }
      v34 = &v2[4 * v25 - 876];
      do
      {
        if (v25 >= v4)
          goto LABEL_46;
        if (++v25 >= v4)
          goto LABEL_47;
        *((_DWORD *)v34 + 227) = *(_DWORD *)v34 ^ ((*((_DWORD *)v34 + 228) & 0x7FFFFFFE | *((_DWORD *)v34 + 227) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)v34 + 228) << 31) >> 31) & 0x9908B0DF;
        v34 += 4;
      }
      while (v25 != 623);
      v1 = 0;
      *((_DWORD *)v2 + 631) = *((_DWORD *)v2 + 404) ^ ((*((_DWORD *)v2 + 8) & 0x7FFFFFFE | *((_DWORD *)v2 + 631) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)v2 + 8) << 31) >> 31) & 0x9908B0DF;
      *v0 = v2;
      if (*((_QWORD *)v2 + 2))
        break;
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      v2 = sub_249EC9468((uint64_t)v2);
    }
  }
  else
  {
    if (((unint64_t)v1 & 0x8000000000000000) != 0)
      goto LABEL_48;
    if (v1 >= v3)
      goto LABEL_42;
  }
  v10 = v1 + 1;
  v11 = *(_DWORD *)&v2[4 * (_QWORD)v1 + 32];
  v0[1] = v10;
  v12 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
  return (v12 << 15) & 0xEFC60000 ^ v12 ^ (((v12 << 15) & 0xEFC60000 ^ v12) >> 18);
}

double sub_249EBE0C8(double a1, double a2)
{
  uint64_t v2;
  char v5;
  int v6;
  double v7;
  int v8;
  unsigned int v9;
  double v10;
  __double2 v11;
  double v12;
  double v13;

  v5 = *(_BYTE *)(v2 + 24);
  if ((v5 & 1) != 0)
  {
    v6 = sub_249EBDDC0();
    v7 = (double)(sub_249EBDDC0() | ((*(_QWORD *)&v6 & 0x1FFFFFuLL) << 32)) * 1.11022302e-16;
    v8 = sub_249EBDDC0();
    v9 = sub_249EBDDC0();
    v10 = sqrt(log(1.0 - (double)(v9 | ((*(_QWORD *)&v8 & 0x1FFFFFuLL) << 32)) * 1.11022302e-16) * -2.0);
    v11 = __sincos_stret(v7 * 6.28318531);
    v12 = v10 * v11.__sinval;
    v13 = v10 * v11.__cosval;
  }
  else
  {
    v13 = *(double *)(v2 + 16);
    v12 = 0.0;
  }
  *(double *)(v2 + 16) = v12;
  *(_BYTE *)(v2 + 24) = v5 ^ 1;
  return v13 * a2 + a1;
}

_QWORD *sub_249EBE198(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD *v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  BOOL v13;
  double *v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __double2 v20;
  char v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __double2 v36;
  uint64_t v38;

  v7 = a1;
  v8 = a1 - 16;
  if (a1 >= 16)
  {
    v4 = (_QWORD *)sub_249EBDB10(0, a1);
    v38 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    if ((a1 & 0x8000000000000000) == 0)
    {
      sub_249EBDC1C(0, a1, v3, a2, a3);
      return (_QWORD *)v9;
    }
LABEL_40:
    __break(1u);
  }
  v4 = sub_249EC94A4(v4);
LABEL_5:
  v10 = 0;
  v11 = (double *)(v4 + 12);
  do
  {
    v12 = 0;
    v13 = __OFADD__(v10, 16);
    v14 = v11;
    do
    {
      v15 = v4[2];
      if (v10 + v12 >= v15)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if (v10 + v12 + 8 >= v15)
        goto LABEL_35;
      ++v12;
      v16 = *v14;
      v17 = log(1.0 - *(v14 - 8)) * -2.0;
      v18 = v16 * 6.28318531;
      v19 = sqrt(v17);
      v20 = __sincos_stret(v18);
      *(v14 - 8) = v19 * v20.__cosval * a3 + a2;
      *v14++ = v19 * v20.__sinval * a3 + a2;
    }
    while (v12 != 8);
    v21 = v10 + 16 >= v7 - 15 || v13;
    v11 += 16;
    v10 += 16;
  }
  while ((v21 & 1) == 0);
  if ((v7 & 0xF) != 0)
  {
    if (v7 >= (uint64_t)0x8000000000000010)
    {
      v22 = 16;
      v23 = v7;
      while (1)
      {
        v24 = sub_249EBDDC0();
        v25 = sub_249EBDDC0();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if (v38 < 0)
            goto LABEL_26;
        }
        else
        {
          v4 = sub_249EC94A4(v4);
          if (v38 < 0)
          {
LABEL_26:
            __break(1u);
LABEL_27:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_28:
              v26 = v4 + 4;
              v27 = 8;
              while (1)
              {
                v28 = v4[2];
                if (v7 - 16 >= v28)
                  goto LABEL_37;
                v29 = v7 - 8;
                if (__OFADD__(v7 - 16, 8))
                  goto LABEL_38;
                if (v29 >= v28)
                  goto LABEL_39;
                v30 = (double *)&v4[v7];
                v31 = v29;
                v32 = *(double *)&v26[v29];
                v33 = log(1.0 - *(v30 - 12)) * -2.0;
                v34 = v32 * 6.28318531;
                v35 = sqrt(v33);
                v36 = __sincos_stret(v34);
                *(v30 - 12) = v35 * v36.__cosval * a3 + a2;
                *(double *)&v26[v31] = v35 * v36.__sinval * a3 + a2;
                ++v7;
                if (!--v27)
                  return v4;
              }
            }
LABEL_43:
            v4 = sub_249EC94A4(v4);
            goto LABEL_28;
          }
        }
        if ((unint64_t)(v23 - 16) >= v4[2])
          goto LABEL_36;
        *(double *)&v4[v23++ - 12] = (double)((v24 << 32) & 0x1FFFFF00000000 | (unint64_t)v25) * 1.11022302e-16;
        if (!--v22)
          goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
  return v4;
}

uint64_t sub_249EBE478(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 32);
    v5 = 1;
    while (1)
    {
      v6 = *v4++;
      result = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
        break;
      v5 = result;
      if (!--v3)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    result = 1;
LABEL_7:
    sub_249EBE198(result, a2, a3);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF88);
    sub_249EBE614();
    return sub_249F1EFEC();
  }
  return result;
}

unint64_t sub_249EBE530()
{
  uint64_t v0;

  v0 = sub_249EBDDC0();
  return sub_249EBDDC0() | (unint64_t)(v0 << 32);
}

uint64_t sub_249EBE564(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  int v5;

  v2 = sub_249F1F58C();
  *(_QWORD *)(v2 + 16) = 624;
  bzero((void *)(v2 + 32), 0x9C0uLL);
  v3 = 0;
  for (i = 32; i != 2528; i += 4)
  {
    v5 = v3++ + 1812433253 * (a1 ^ (a1 >> 30));
    *(_DWORD *)(v2 + i) = a1;
    a1 = v5 + 1;
  }
  return v2;
}

ValueMetadata *type metadata accessor for TorchRandomSource()
{
  return &type metadata for TorchRandomSource;
}

unint64_t sub_249EBE614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DDF90;
  if (!qword_2578DDF90)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DDF88);
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2578DDF90);
  }
  return result;
}

uint64_t _s13DiffusionBase17TorchRandomSourceV5StateVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s13DiffusionBase17TorchRandomSourceV5StateVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s13DiffusionBase17TorchRandomSourceV5StateVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t _s13DiffusionBase17TorchRandomSourceV5StateVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_249EBE784(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TorchRandomSource.State()
{
  return &type metadata for TorchRandomSource.State;
}

void sub_249EBE7DC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_17;
  if (v5)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_249EB5CE0(0, v5 & ~(v5 >> 63), 0);
    if (a2 < a1 || v5 < 0)
      goto LABEL_18;
    v11 = 0;
    while (v11 != v5)
    {
      if (*(_BYTE *)(a3 + 24) == 1)
      {
        do
        {
          do
          {
            v12 = (double)(sub_249EBDDC0() >> 5);
            v13 = sub_249EBDDC0();
            v14 = (v12 * 67108864.0 + (double)(v13 >> 6)) * 1.11022302e-16
                + (v12 * 67108864.0 + (double)(v13 >> 6)) * 1.11022302e-16
                + -1.0;
            v15 = (double)(sub_249EBDDC0() >> 5);
            v16 = sub_249EBDDC0();
            v17 = (v15 * 67108864.0 + (double)(v16 >> 6)) * 1.11022302e-16
                + (v15 * 67108864.0 + (double)(v16 >> 6)) * 1.11022302e-16
                + -1.0;
            v18 = v14 * v14 + v17 * v17;
          }
          while (v18 >= 1.0);
        }
        while (v18 == 0.0);
        v19 = sqrt(log(v14 * v14 + v17 * v17) * -2.0 / v18);
        *(double *)(a3 + 16) = v14 * v19;
        *(_BYTE *)(a3 + 24) = 0;
        v20 = v17 * v19;
      }
      else
      {
        v20 = *(double *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 1;
      }
      v22 = *(_QWORD *)(v23 + 16);
      v21 = *(_QWORD *)(v23 + 24);
      if (v22 >= v21 >> 1)
        sub_249EB5CE0(v21 > 1, v22 + 1, 1);
      ++v11;
      *(_QWORD *)(v23 + 16) = v22 + 1;
      *(double *)(v23 + 8 * v22 + 32) = v20 * a5 + a4;
      if (v11 == v5)
        return;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

void sub_249EBE9E8()
{
  uint64_t v0;
  double v1;
  unsigned int v2;
  double v3;
  double v4;
  unsigned int v5;
  double v6;
  double v7;

  if (*(_BYTE *)(v0 + 24) == 1)
  {
    do
    {
      do
      {
        v1 = (double)(sub_249EBDDC0() >> 5);
        v2 = sub_249EBDDC0();
        v3 = (v1 * 67108864.0 + (double)(v2 >> 6)) * 1.11022302e-16
           + (v1 * 67108864.0 + (double)(v2 >> 6)) * 1.11022302e-16
           + -1.0;
        v4 = (double)(sub_249EBDDC0() >> 5);
        v5 = sub_249EBDDC0();
        v6 = (v4 * 67108864.0 + (double)(v5 >> 6)) * 1.11022302e-16
           + (v4 * 67108864.0 + (double)(v5 >> 6)) * 1.11022302e-16
           + -1.0;
        v7 = v3 * v3 + v6 * v6;
      }
      while (v7 >= 1.0);
    }
    while (v7 == 0.0);
    *(double *)(v0 + 16) = v3 * sqrt(log(v3 * v3 + v6 * v6) * -2.0 / v7);
    *(_BYTE *)(v0 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 16) = 0;
    *(_BYTE *)(v0 + 24) = 1;
  }
}

uint64_t sub_249EBEAF4(uint64_t result, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v5 = (uint64_t *)(result + 32);
    v6 = 1;
    do
    {
      v7 = *v5++;
      v8 = v6 * v7;
      if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
      {
        __break(1u);
        return result;
      }
      v6 = v8;
      --v4;
    }
    while (v4);
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_8;
    __break(1u);
  }
  v6 = 1;
LABEL_8:
  sub_249EBE7DC(0, v6, v3, a2, a3);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF88);
  sub_249EBE614();
  return sub_249F1EFEC();
}

unint64_t sub_249EBEBC0()
{
  unsigned int v0;

  v0 = sub_249EBDDC0();
  return v0 | (unint64_t)(sub_249EBDDC0() << 32);
}

double sub_249EBEBEC(double a1, double a2)
{
  double v4;

  sub_249EBE9E8();
  return v4 * a2 + a1;
}

ValueMetadata *type metadata accessor for NumPyRandomSource()
{
  return &type metadata for NumPyRandomSource;
}

ValueMetadata *type metadata accessor for NumPyRandomSource.State()
{
  return &type metadata for NumPyRandomSource.State;
}

uint64_t sub_249EBEC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_249EC26B0(a1, (uint64_t)sub_249ED6EF8, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionUnet.loadResources()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v2 = v1;
  v3 = *(_QWORD *)(v0 + 184);
  v38 = v3;
  if (v3 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_249F1FBEC())
  {
    v34 = v4;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v32 = (uint64_t *)v3;
      while (1)
      {
        v6 = MEMORY[0x24BD056B8](v5, v3);
        if (__OFADD__(v5, 1))
          break;
        v7 = v6;
        v35 = v5 + 1;
        if (qword_2578DDA10 != -1)
          swift_once();
        v8 = sub_249F1EF38();
        __swift_project_value_buffer(v8, (uint64_t)qword_2578FF458);
        swift_retain_n();
        v9 = sub_249F1EF20();
        v10 = sub_249F1F814();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = swift_slowAlloc();
          v12 = swift_slowAlloc();
          v37 = v12;
          *(_DWORD *)v11 = 136446210;
          v13 = sub_249F1FA9C();
          *(_QWORD *)(v11 + 4) = sub_249E68CA8(v13, v14, &v37);
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_249D98000, v9, v10, "Loading resources for %{public}s", (uint8_t *)v11, 0xCu);
          swift_arrayDestroy();
          v15 = v12;
          v4 = v34;
          MEMORY[0x24BD06618](v15, -1, -1);
          v16 = v11;
          v3 = (unint64_t)v32;
          MEMORY[0x24BD06618](v16, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        v17 = *(id *)(v7 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        sub_249F1F874();
        if (v2)
        {

          sub_249DFBA54((uint64_t)&v38);
          swift_unknownObjectRelease();
          return;
        }
        swift_unknownObjectRelease();

        ++v5;
        if (v35 == v4)
          goto LABEL_29;
      }
      __break(1u);
    }
    else
    {
      v18 = 0;
      v19 = (uint64_t *)(v3 + 32);
      v3 = (unint64_t)qword_2578FF458;
      v33 = v19;
      while (!__OFADD__(v18, 1))
      {
        v36 = v18 + 1;
        v20 = v19[v18];
        v21 = qword_2578DDA10;
        swift_retain();
        if (v21 != -1)
          swift_once();
        v22 = sub_249F1EF38();
        __swift_project_value_buffer(v22, (uint64_t)qword_2578FF458);
        swift_retain_n();
        v23 = sub_249F1EF20();
        v24 = sub_249F1F814();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = swift_slowAlloc();
          v26 = swift_slowAlloc();
          v37 = v26;
          *(_DWORD *)v25 = 136446210;
          v27 = sub_249F1FA9C();
          *(_QWORD *)(v25 + 4) = sub_249E68CA8(v27, v28, &v37);
          swift_release_n();
          v3 = (unint64_t)qword_2578FF458;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_249D98000, v23, v24, "Loading resources for %{public}s", (uint8_t *)v25, 0xCu);
          swift_arrayDestroy();
          v29 = v26;
          v4 = v34;
          MEMORY[0x24BD06618](v29, -1, -1);
          v30 = v25;
          v19 = v33;
          MEMORY[0x24BD06618](v30, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        v31 = *(id *)(v20 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        sub_249F1F874();
        if (v2)
        {

          sub_249DFBA54((uint64_t)&v38);
          swift_release();
          return;
        }
        swift_release();

        ++v18;
        if (v36 == v4)
          goto LABEL_29;
      }
    }
    __break(1u);
LABEL_28:
    swift_bridgeObjectRetain();
  }
LABEL_29:
  sub_249DFBA54((uint64_t)&v38);
}

Swift::Void __swiftcall AppleDiffusionUnet.unloadResources()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 184);
  v4 = v1;
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    sub_249DFBA54((uint64_t)&v4);
    return;
  }
  swift_bridgeObjectRetain();
  v2 = sub_249F1FBEC();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x24BD056B8](i, v1);
      else
        swift_retain();
      ManagedMLModel.unloadResources()();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionUnet.prewarmResources()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 184);
  v8 = v1;
  if (v1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = sub_249F1FBEC();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x24BD056B8](v3 - 4, v1);
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
            goto LABEL_13;
        }
        else
        {
          swift_retain();
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        ManagedMLModel.loadResources()();
        if (v7)
        {
          sub_249DFBA54((uint64_t)&v8);
          swift_release();
          return;
        }
        ManagedMLModel.unloadResources()();
        swift_release();
        ++v3;
      }
      while (v6 != v2);
    }
  }
  sub_249DFBA54((uint64_t)&v8);
}

unint64_t sub_249EBF384(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int64_t a7, void *a8, float a9, void *a10, uint64_t a11, char a12, char a13)
{
  unint64_t v13;
  int64_t v14;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  char v58;
  int64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t *v79;
  id v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  double v102;
  char v103;
  NSObject *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  double *v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int64_t v121;
  uint64_t *v122;
  id v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  id v142;
  double v143;
  char v144;
  void *v145;
  os_log_type_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  double v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  double v162;
  id v163;
  void *v164;
  id v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  id v184;
  int64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int64_t v200;
  uint64_t v201;
  _QWORD *v202;
  int64_t v203;
  double v204;
  double v205;
  uint64_t v206;

  v184 = a8;
  v200 = a7;
  v198 = a4;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v197 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v174 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC0);
  v24 = *(_QWORD *)(v196 - 8);
  v25 = MEMORY[0x24BDAC7A8](v196);
  v194 = (char *)&v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v195 = (char *)&v174 - v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC8);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_249F21910;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_149;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v182 = a1;
  *(_DWORD *)(v28 + 32) = a2;
  *(_DWORD *)(v28 + 36) = a2;
  v205 = *(double *)&v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFD0);
  sub_249DDFC68(&qword_2578DDFD8, &qword_2578DDFD0, MEMORY[0x24BEE12C8]);
  v193 = a3;
  v29 = v195;
  sub_249F1EFEC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F234B0;
  v31 = *(_QWORD *)(v13 + 16);
  v32 = *(_QWORD *)(v13 + 24);
  v186 = *(_QWORD *)(v13 + 32);
  v190 = a5;
  v33 = *(_QWORD *)(v13 + 40);
  v188 = *(_QWORD *)(v13 + 48);
  v187 = *(_QWORD *)(v13 + 56);
  v192 = *(_QWORD *)(v13 + 64);
  v191 = *(_QWORD *)(v13 + 72);
  v178 = *(_QWORD *)(v13 + 80);
  v176 = *(_QWORD *)(v13 + 88);
  v177 = *(_QWORD *)(v13 + 96);
  v179 = *(_QWORD *)(v13 + 104);
  v180 = *(_QWORD *)(v13 + 112);
  v175 = *(_QWORD *)(v13 + 128);
  v181 = *(_QWORD *)(v13 + 136);
  v203 = *(_QWORD *)(v13 + 160);
  v201 = *(_QWORD *)(v13 + 168);
  v202 = (_QWORD *)v13;
  v183 = *(unsigned __int8 *)(v13 + 176);
  *(_QWORD *)(inited + 32) = v31;
  *(_QWORD *)(inited + 40) = v32;
  v34 = sub_249D9D9F4(0, &qword_2578DDE20);
  v189 = a6;
  v35 = v34;
  v185 = v24;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v194, v29, v196);
  v36 = MEMORY[0x24BDBFCD0];
  sub_249DDFC68(&qword_2578DDFE8, &qword_2578DDFC0, MEMORY[0x24BDBFCD0]);
  swift_bridgeObjectRetain();
  v37 = sub_249F1F7FC();
  v38 = v186;
  *(_QWORD *)(inited + 48) = v37;
  *(_QWORD *)(inited + 56) = v38;
  *(_QWORD *)(inited + 64) = v33;
  v24 = *(_QWORD *)(v197 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v24)(v23, v198, v21);
  v39 = v36;
  a3 = v193;
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, v39);
  swift_bridgeObjectRetain();
  v40 = sub_249F1F7FC();
  v41 = v188;
  *(_QWORD *)(inited + 72) = v40;
  *(_QWORD *)(inited + 80) = v41;
  *(_QWORD *)(inited + 88) = v187;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v190, v21);
  swift_bridgeObjectRetain();
  v42 = sub_249F1F7FC();
  v43 = v192;
  *(_QWORD *)(inited + 96) = v42;
  *(_QWORD *)(inited + 104) = v43;
  *(_QWORD *)(inited + 112) = v191;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v189, v21);
  swift_bridgeObjectRetain();
  *(_QWORD *)(inited + 120) = sub_249F1F7FC();
  *(double *)&v13 = COERCE_DOUBLE(sub_249EAF51C(inited));
  v205 = *(double *)&v13;
  if ((a3 & 0x100000000) == 0 && (v183 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
    *(double *)&v44 = COERCE_DOUBLE(swift_allocObject());
    *(_OWORD *)(v44 + 16) = xmmword_249F21770;
    *(_DWORD *)(v44 + 32) = a3;
    v204 = *(double *)&v44;
    v45 = v181;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
    sub_249DDFC68(&qword_2578DDFF0, &qword_2578DDE10, MEMORY[0x24BEE12E0]);
    v13 = v35;
    v46 = v199;
    v47 = sub_249F1F7F0();
    v199 = v46;
    if (v46)
    {
LABEL_120:
      (*(void (**)(char *, uint64_t))(v185 + 8))(v195, v196);
      swift_bridgeObjectRelease();
      goto LABEL_121;
    }
    v48 = v47;
    v49 = v205;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v204 = v49;
    sub_249ED8A6C(v48, v175, v45, isUniquelyReferenced_nonNull_native);
    *(double *)&v13 = v204;
    v205 = v204;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v14 = v200;
  if (!v200)
  {
    v69 = *(_QWORD *)(v203 + 64);
    v198 = v203 + 64;
    v70 = 1 << *(_BYTE *)(v203 + 32);
    v71 = -1;
    if (v70 < 64)
      v71 = ~(-1 << v70);
    v24 = v71 & v69;
    v200 = (unint64_t)(v70 + 63) >> 6;
    swift_bridgeObjectRetain();
    v72 = 0;
    while (1)
    {
      if (v24)
      {
        v75 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        v76 = v75 | (v72 << 6);
      }
      else
      {
        v67 = __OFADD__(v72++, 1);
        if (v67)
          goto LABEL_144;
        if (v72 >= v200)
        {
LABEL_63:
          v205 = *(double *)&v13;
          swift_release();
          goto LABEL_64;
        }
        v77 = *(_QWORD *)(v198 + 8 * v72);
        if (!v77)
        {
          v78 = v72 + 1;
          if (v72 + 1 >= v200)
            goto LABEL_63;
          v77 = *(_QWORD *)(v198 + 8 * v78);
          if (!v77)
          {
            v78 = v72 + 2;
            if (v72 + 2 >= v200)
              goto LABEL_63;
            v77 = *(_QWORD *)(v198 + 8 * v78);
            if (!v77)
            {
              v78 = v72 + 3;
              if (v72 + 3 >= v200)
                goto LABEL_63;
              v77 = *(_QWORD *)(v198 + 8 * v78);
              if (!v77)
              {
                while (1)
                {
                  v72 = v78 + 1;
                  if (__OFADD__(v78, 1))
                    goto LABEL_147;
                  if (v72 >= v200)
                    goto LABEL_63;
                  v77 = *(_QWORD *)(v198 + 8 * v72);
                  ++v78;
                  if (v77)
                    goto LABEL_46;
                }
              }
            }
          }
          v72 = v78;
        }
LABEL_46:
        v24 = (v77 - 1) & v77;
        v76 = __clz(__rbit64(v77)) + (v72 << 6);
      }
      v79 = (uint64_t *)(*(_QWORD *)(v203 + 48) + 16 * v76);
      v51 = *v79;
      v52 = v79[1];
      v80 = *(id *)(*(_QWORD *)(v203 + 56) + 8 * v76);
      swift_bridgeObjectRetain();
      v81 = swift_isUniquelyReferenced_nonNull_native();
      v204 = *(double *)&v13;
      v83 = sub_249DB7D8C(v51, v52);
      v84 = *(_QWORD *)(v13 + 16);
      v85 = (v82 & 1) == 0;
      v86 = v84 + v85;
      if (__OFADD__(v84, v85))
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
        goto LABEL_148;
      }
      a3 = v82;
      if (*(_QWORD *)(v13 + 24) >= v86)
      {
        if ((v81 & 1) != 0)
        {
          *(double *)&v13 = v204;
          if ((v82 & 1) != 0)
            goto LABEL_32;
        }
        else
        {
          sub_249F052C8();
          *(double *)&v13 = v204;
          if ((a3 & 1) != 0)
            goto LABEL_32;
        }
      }
      else
      {
        sub_249F020F8(v86, v81);
        *(double *)&v13 = v204;
        v87 = sub_249DB7D8C(v51, v52);
        if ((a3 & 1) != (v88 & 1))
          goto LABEL_156;
        v83 = v87;
        *(double *)&v13 = v204;
        if ((a3 & 1) != 0)
        {
LABEL_32:
          v73 = *(_QWORD *)(v13 + 56);
          v74 = 8 * v83;

          *(_QWORD *)(v73 + v74) = v80;
          goto LABEL_33;
        }
      }
      *(_QWORD *)(v13 + 8 * (v83 >> 6) + 64) |= 1 << v83;
      v89 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v83);
      *v89 = v51;
      v89[1] = v52;
      *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v83) = v80;
      v90 = *(_QWORD *)(v13 + 16);
      v67 = __OFADD__(v90, 1);
      v91 = v90 + 1;
      if (v67)
        goto LABEL_142;
      *(_QWORD *)(v13 + 16) = v91;
      swift_bridgeObjectRetain();
LABEL_33:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if ((unint64_t)v200 >> 62)
  {
LABEL_151:
    v52 = v14;
    swift_bridgeObjectRetain();
    v51 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if ((v51 & 0x8000000000000000) == 0)
      goto LABEL_157;
    __break(1u);
    goto LABEL_153;
  }
  v51 = *(_QWORD *)((v200 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v51)
    goto LABEL_10;
  while (1)
  {
LABEL_64:
    a3 = (unint64_t)a10;
    if (!a10)
    {
      v110 = *(_QWORD *)(v201 + 64);
      v200 = v201 + 64;
      v111 = 1 << *(_BYTE *)(v201 + 32);
      v112 = -1;
      if (v111 < 64)
        v112 = ~(-1 << v111);
      v113 = v112 & v110;
      v203 = (unint64_t)(v111 + 63) >> 6;
      v114 = swift_bridgeObjectRetain();
      v24 = 0;
      v115 = v202;
      while (1)
      {
        if (v113)
        {
          v118 = __clz(__rbit64(v113));
          v113 &= v113 - 1;
          v119 = v118 | (v24 << 6);
        }
        else
        {
          v67 = __OFADD__(v24++, 1);
          if (v67)
            goto LABEL_145;
          if (v24 >= v203)
          {
LABEL_107:
            v205 = *(double *)&v13;
            swift_release();
            goto LABEL_119;
          }
          v120 = *(_QWORD *)(v200 + 8 * v24);
          if (!v120)
          {
            v121 = v24 + 1;
            if (v24 + 1 >= v203)
              goto LABEL_107;
            v120 = *(_QWORD *)(v200 + 8 * v121);
            if (!v120)
            {
              v121 = v24 + 2;
              if (v24 + 2 >= v203)
                goto LABEL_107;
              v120 = *(_QWORD *)(v200 + 8 * v121);
              if (!v120)
              {
                v121 = v24 + 3;
                if (v24 + 3 >= v203)
                  goto LABEL_107;
                v120 = *(_QWORD *)(v200 + 8 * v121);
                if (!v120)
                {
                  while (1)
                  {
                    v24 = v121 + 1;
                    if (__OFADD__(v121, 1))
                      break;
                    if (v24 >= v203)
                      goto LABEL_107;
                    v120 = *(_QWORD *)(v200 + 8 * v24);
                    ++v121;
                    if (v120)
                      goto LABEL_91;
                  }
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
                  goto LABEL_150;
                }
              }
            }
            v24 = v121;
          }
LABEL_91:
          v113 = (v120 - 1) & v120;
          v119 = __clz(__rbit64(v120)) + (v24 << 6);
        }
        v122 = (uint64_t *)(*(_QWORD *)(v114 + 48) + 16 * v119);
        v51 = *v122;
        v52 = v122[1];
        v123 = *(id *)(*(_QWORD *)(v114 + 56) + 8 * v119);
        swift_bridgeObjectRetain();
        v124 = swift_isUniquelyReferenced_nonNull_native();
        v204 = *(double *)&v13;
        v126 = sub_249DB7D8C(v51, v52);
        v127 = *(_QWORD *)(v13 + 16);
        v128 = (v125 & 1) == 0;
        v129 = v127 + v128;
        if (__OFADD__(v127, v128))
          goto LABEL_138;
        a3 = v125;
        if (*(_QWORD *)(v13 + 24) >= v129)
        {
          if ((v124 & 1) != 0)
          {
            *(double *)&v13 = v204;
            if ((v125 & 1) != 0)
              goto LABEL_77;
          }
          else
          {
            sub_249F052C8();
            *(double *)&v13 = v204;
            if ((a3 & 1) != 0)
              goto LABEL_77;
          }
        }
        else
        {
          sub_249F020F8(v129, v124);
          *(double *)&v13 = v204;
          v130 = sub_249DB7D8C(v51, v52);
          if ((a3 & 1) != (v131 & 1))
            goto LABEL_156;
          v126 = v130;
          *(double *)&v13 = v204;
          if ((a3 & 1) != 0)
          {
LABEL_77:
            v116 = *(_QWORD *)(v13 + 56);
            v117 = 8 * v126;

            *(_QWORD *)(v116 + v117) = v123;
            goto LABEL_78;
          }
        }
        *(_QWORD *)(v13 + 8 * (v126 >> 6) + 64) |= 1 << v126;
        v132 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v126);
        *v132 = v51;
        v132[1] = v52;
        *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v126) = v123;
        v133 = *(_QWORD *)(v13 + 16);
        v67 = __OFADD__(v133, 1);
        v134 = v133 + 1;
        if (v67)
          goto LABEL_143;
        *(_QWORD *)(v13 + 16) = v134;
        swift_bridgeObjectRetain();
LABEL_78:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v115 = v202;
        v114 = v201;
      }
    }
    v92 = v184;
    if (!v184)
    {
      v135 = a10;
      goto LABEL_118;
    }
    LOBYTE(v51) = a12;
    v52 = a11;
    sub_249EC5C38(v184, a10);
    v93 = v92;
    v94 = qword_2578DDA10;
    v24 = v93;
    if (v94 != -1)
LABEL_153:
      swift_once();
    v95 = sub_249F1EF38();
    __swift_project_value_buffer(v95, (uint64_t)qword_2578FF458);
    v96 = sub_249F1EF20();
    v97 = sub_249F1F808();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v98 = 134217984;
      v204 = a9;
      sub_249F1F9AC();
      _os_log_impl(&dword_249D98000, v96, v97, "Determining IPA scale. Current stepProgression: %f", v98, 0xCu);
      MEMORY[0x24BD06618](v98, -1, -1);
    }

    if ((v51 & 1) == 0)
    {
      v99 = v52;
      if (*(float *)&v52 > a9 || *((float *)&v52 + 1) < a9)
      {
        v136 = v201;
        v206 = v201;
        v137 = *(_QWORD *)(v201 + 16);
        v138 = v177;
        swift_bridgeObjectRetain();
        v139 = v176;
        if (v137)
        {
          swift_bridgeObjectRetain();
          sub_249EC5C64((uint64_t)&v206);
          v140 = sub_249DB7D8C(v139, v138);
          if ((v141 & 1) != 0)
          {
            v142 = *(id *)(*(_QWORD *)(v136 + 56) + 8 * v140);
            sub_249DFBA54((uint64_t)&v206);
            swift_bridgeObjectRelease();
            v143 = v205;
            v144 = swift_isUniquelyReferenced_nonNull_native();
            v204 = v143;
            sub_249ED8A6C((uint64_t)v142, v139, v138, v144);
            v205 = v204;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_115;
          }
          sub_249DFBA54((uint64_t)&v206);
          swift_bridgeObjectRelease();
        }
        v145 = (void *)sub_249ED68C8(v139, v138);
        swift_bridgeObjectRelease();

LABEL_115:
        v104 = sub_249F1EF20();
        v146 = sub_249F1F808();
        if (!os_log_type_enabled(v104, v146))
        {

          goto LABEL_118;
        }
        v147 = swift_slowAlloc();
        *(_DWORD *)v147 = 134218496;
        v204 = a9;
        sub_249F1F9AC();
        *(_WORD *)(v147 + 12) = 2048;
        v204 = *(float *)&v99;
        sub_249F1F9AC();
        *(_WORD *)(v147 + 22) = 2048;
        v204 = *((float *)&v99 + 1);
        sub_249F1F9AC();
        _os_log_impl(&dword_249D98000, v104, v146, "stepProgression %f is outside the range of [%f, %f], so using zero IPA scale", (uint8_t *)v147, 0x20u);
        MEMORY[0x24BD06618](v147, -1, -1);

LABEL_117:
        goto LABEL_118;
      }
    }
    v100 = (id)v24;
    v101 = v177;
    swift_bridgeObjectRetain();
    v102 = v205;
    v103 = swift_isUniquelyReferenced_nonNull_native();
    v204 = v102;
    sub_249ED8A6C((uint64_t)v100, v176, v101, v103);
    v205 = v204;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v104 = v100;
    v105 = sub_249F1EF20();
    v106 = sub_249F1F808();
    if (!os_log_type_enabled(v105, v106))
    {

      goto LABEL_117;
    }
    v107 = (uint8_t *)swift_slowAlloc();
    v108 = (double *)swift_slowAlloc();
    *(_DWORD *)v107 = 138412290;
    v24 = (int64_t)(v107 + 4);
    v109 = COERCE_DOUBLE(-[NSObject objectAtIndexedSubscript:](v104, sel_objectAtIndexedSubscript_, 0));
    v204 = v109;
    sub_249F1F9AC();
    *v108 = v109;

    _os_log_impl(&dword_249D98000, v105, v106, "Using scale value of %@", v107, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79B8);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v108, -1, -1);
    MEMORY[0x24BD06618](v107, -1, -1);

LABEL_118:
    v148 = v180;
    swift_bridgeObjectRetain();
    v149 = (id)a3;
    v150 = v205;
    v151 = swift_isUniquelyReferenced_nonNull_native();
    v204 = v150;
    sub_249ED8A6C((uint64_t)v149, v179, v148, v151);
    v205 = v204;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v115 = v202;
LABEL_119:
    sub_249EB6DF4((uint64_t)v115);
    v51 = v182;
    v152 = swift_bridgeObjectRetain();
    v153 = v199;
    v154 = (_QWORD *)sub_249EC29B8(v152, v115, &v205);
    sub_249EB6FC0((uint64_t)v115);
    swift_bridgeObjectRelease();
    v13 = (unint64_t)v115;
    v155 = sub_249EC145C(v154, a13 & 1);
    v199 = v153;
    if (v153)
      goto LABEL_120;
    v157 = v155;
    swift_bridgeObjectRelease();
    v158 = *(_QWORD *)(v157 + 16);
    if (v158)
      break;
    swift_bridgeObjectRelease();
    v162 = MEMORY[0x24BEE4AF8];
LABEL_129:
    swift_bridgeObjectRetain();
    if (*(_QWORD *)&v162 >> 62)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
      sub_249F1FBE0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249F1FEC8();
    }
    swift_bridgeObjectRelease();
    v163 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    v164 = (void *)sub_249F1F538();
    swift_bridgeObjectRelease();
    v165 = objc_msgSend(v163, sel_initWithFeatureProviderArray_, v164);

    v52 = (uint64_t)v165;
    v13 = (unint64_t)v115;
    v166 = v199;
    v167 = sub_249EC1A30(v52);
    v199 = v166;
    if (v166)
    {
      (*(void (**)(char *, uint64_t))(v185 + 8))(v195, v196);

      goto LABEL_121;
    }
    v168 = (void *)v167;

    v169 = (unint64_t)objc_msgSend(v168, sel_count);
    if ((v169 & 0x8000000000000000) == 0)
    {
      v170 = v169;
      swift_unknownObjectRetain();
      v171 = v170;
      v172 = v199;
      v173 = sub_249EC3484(0, v171, v168);
      v199 = v172;
      swift_unknownObjectRelease();
      *(double *)&v13 = COERCE_DOUBLE(sub_249EC2254(v173));

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v185 + 8))(v195, v196);
      swift_bridgeObjectRelease();
      return v13;
    }
    __break(1u);
LABEL_156:
    sub_249F1FF10();
    __break(1u);
LABEL_157:
    v14 = v52;
    if (v51)
    {
LABEL_10:
      v52 = 0;
      v198 = v14 & 0xC000000000000001;
      v203 = *(_QWORD *)(v178 + 16);
      v53 = (uint64_t *)(v178 + 40);
      v197 = v51;
      while (1)
      {
        if (v51 == v52)
          goto LABEL_139;
        if (v203 == v52)
          goto LABEL_140;
        v55 = *(v53 - 1);
        v51 = *v53;
        if (v198)
        {
          swift_bridgeObjectRetain();
          v56 = (id)MEMORY[0x24BD056B8](v52, v14);
        }
        else
        {
          v14 = *(_QWORD *)(v14 + 8 * v52 + 32);
          swift_bridgeObjectRetain();
          v56 = (id)v14;
        }
        v57 = v56;
        v58 = swift_isUniquelyReferenced_nonNull_native();
        v204 = *(double *)&v13;
        a3 = sub_249DB7D8C(v55, v51);
        v60 = *(_QWORD *)(v13 + 16);
        v61 = (v59 & 1) == 0;
        v62 = v60 + v61;
        if (__OFADD__(v60, v61))
          goto LABEL_141;
        v24 = v59;
        if (*(_QWORD *)(v13 + 24) >= v62)
        {
          if ((v58 & 1) != 0)
          {
            *(double *)&v13 = v204;
            if ((v59 & 1) == 0)
              goto LABEL_25;
          }
          else
          {
            sub_249F052C8();
            *(double *)&v13 = v204;
            if ((v24 & 1) == 0)
              goto LABEL_25;
          }
        }
        else
        {
          sub_249F020F8(v62, v58);
          *(double *)&v13 = v204;
          v63 = sub_249DB7D8C(v55, v51);
          if ((v24 & 1) != (v64 & 1))
            goto LABEL_156;
          a3 = v63;
          *(double *)&v13 = v204;
          if ((v24 & 1) == 0)
          {
LABEL_25:
            *(_QWORD *)(v13 + 8 * (a3 >> 6) + 64) |= 1 << a3;
            v65 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * a3);
            *v65 = v55;
            v65[1] = v51;
            *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * a3) = v57;
            v66 = *(_QWORD *)(v13 + 16);
            v67 = __OFADD__(v66, 1);
            v68 = v66 + 1;
            if (v67)
              goto LABEL_146;
            *(_QWORD *)(v13 + 16) = v68;
            swift_bridgeObjectRetain();
            goto LABEL_12;
          }
        }
        v54 = *(_QWORD *)(v13 + 56);
        a3 *= 8;

        *(_QWORD *)(v54 + a3) = v57;
LABEL_12:
        ++v52;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v53 += 2;
        v51 = v197;
        v14 = v200;
        if (v197 == v52)
        {
          v205 = *(double *)&v13;
          goto LABEL_64;
        }
      }
    }
  }
  v204 = MEMORY[0x24BEE4AF8];
  sub_249F1FB44();
  a3 = 0;
  while (1)
  {
    v159 = swift_bridgeObjectRetain();
    sub_249EFB730(v159);
    v160 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v161 = v199;
    sub_249EFD4E8();
    v199 = v161;
    if (v161)
      break;
    swift_bridgeObjectRelease();
    ++a3;
    sub_249F1FB20();
    v51 = *(_QWORD *)(*(_QWORD *)&v204 + 16);
    sub_249F1FB50();
    sub_249F1FB5C();
    sub_249F1FB2C();
    if (v158 == a3)
    {
      v162 = v204;
      swift_bridgeObjectRelease();
      v115 = v202;
      goto LABEL_129;
    }
  }
  swift_bridgeObjectRelease();
  *(double *)&v13 = v204;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v185 + 8))(v195, v196);
LABEL_121:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t AppleDiffusionUnet.geometricConditioningShape.getter()
{
  return swift_bridgeObjectRetain();
}

void *sub_249EC0910(void *a1, float a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  char v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v19;
  id v20;
  double v21;
  id v22;
  uint64_t v23;

  v6 = v2[11];
  v5 = v2[12];
  v7 = v2[21];
  v23 = v7;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_6;
  sub_249EC5C64((uint64_t)&v23);
  swift_bridgeObjectRetain();
  v9 = sub_249DB7D8C(v6, v5);
  if ((v10 & 1) == 0)
  {
    sub_249DFBA54((uint64_t)&v23);
    swift_bridgeObjectRelease();
LABEL_6:
    v13 = 0;
LABEL_7:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_249F30B80;
    *(_QWORD *)(v15 + 32) = a1;
    *(_QWORD *)(v15 + 40) = a1;
    sub_249F1F55C();
    sub_249D9D9F4(0, &qword_2578DDE20);
    v16 = a1;
    v17 = (void *)sub_249F1F538();
    swift_bridgeObjectRelease();
    objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v17, 0, 65552);

    return v13;
  }
  v11 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v9);
  sub_249DFBA54((uint64_t)&v23);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v11, sel_shape);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v13 = (void *)sub_249F1F544();

  objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v14 = sub_249E14B58((uint64_t)v13, 65552);
  if (!v3)
  {
    v13 = v14;
    if (v14)
    {
      v19 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
      v20 = v13;
      *(float *)&v21 = a2;
      v22 = objc_msgSend(v19, sel_initWithFloat_, v21);
      objc_msgSend(v20, sel_fillWithNumber_, v22);

    }
    goto LABEL_7;
  }

  return v13;
}

uint64_t AppleDiffusionUnet.latentSampleShape.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_249EC0B70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_249EC0B88()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_249EC0C1C;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_249E4E2FC;
  v3[3] = &block_descriptor_11;
  v3[4] = v2;
  objc_msgSend(v1, sel_modelDescriptionWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_249EC0C1C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_249EC0C7C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249EC0C90()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  **(_QWORD **)(v0 + 128) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 AppleDiffusionUnet.init(modelAt:configuration:loraWeights:adapter:)@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  _OWORD v25[12];
  char v26;
  uint64_t v27;

  v24 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD90);
  v12 = sub_249F1E7F4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_249F21770;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v15 + v14, a1, v12);
  sub_249EC2668(a3, (uint64_t)v11);
  v16 = v27;
  sub_249EC4590(v15, a2, (uint64_t)v11, v24, (uint64_t)v25);
  sub_249DCC2FC(a3, &qword_2578D7E10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  if (!v16)
  {
    v18 = v25[11];
    *(_OWORD *)(a5 + 160) = v25[10];
    *(_OWORD *)(a5 + 176) = v18;
    *(_BYTE *)(a5 + 192) = v26;
    v19 = v25[7];
    *(_OWORD *)(a5 + 96) = v25[6];
    *(_OWORD *)(a5 + 112) = v19;
    v20 = v25[9];
    *(_OWORD *)(a5 + 128) = v25[8];
    *(_OWORD *)(a5 + 144) = v20;
    v21 = v25[3];
    *(_OWORD *)(a5 + 32) = v25[2];
    *(_OWORD *)(a5 + 48) = v21;
    v22 = v25[5];
    *(_OWORD *)(a5 + 64) = v25[4];
    *(_OWORD *)(a5 + 80) = v22;
    result = (__n128)v25[1];
    *(_OWORD *)a5 = v25[0];
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

__n128 AppleDiffusionUnet.init(chunksAt:configuration:loraWeights:adapter:)@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[12];
  char v14;

  sub_249EC4590(a1, a2, a3, a4, (uint64_t)v13);
  if (!v5)
  {
    v8 = v13[11];
    *(_OWORD *)(a5 + 160) = v13[10];
    *(_OWORD *)(a5 + 176) = v8;
    *(_BYTE *)(a5 + 192) = v14;
    v9 = v13[7];
    *(_OWORD *)(a5 + 96) = v13[6];
    *(_OWORD *)(a5 + 112) = v9;
    v10 = v13[9];
    *(_OWORD *)(a5 + 128) = v13[8];
    *(_OWORD *)(a5 + 144) = v10;
    v11 = v13[3];
    *(_OWORD *)(a5 + 32) = v13[2];
    *(_OWORD *)(a5 + 48) = v11;
    v12 = v13[5];
    *(_OWORD *)(a5 + 64) = v13[4];
    *(_OWORD *)(a5 + 80) = v12;
    result = (__n128)v13[1];
    *(_OWORD *)a5 = v13[0];
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

uint64_t sub_249EC0F0C(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v8 = sub_249F1E7F4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a4 + 16) > a1)
  {
    v13 = a4 + 24 * a1;
    v14 = *(_QWORD *)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
    v16 = *(unsigned __int8 *)(v13 + 48);
    type metadata accessor for ManagedMLModel();
    swift_allocObject();
    return ManagedMLModel.init(modelAt:configuration:name:)(v10, a3, v14, v15, v16);
  }
  __break(1u);
  return result;
}

uint64_t AppleDiffusionUnet.adaptedCopy(mutableWeights:adapter:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _OWORD v47[12];
  char v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);

  v5 = v4;
  v45 = a2;
  v44 = a1;
  v7 = sub_249F1E7F4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v38 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  MEMORY[0x24BDAC7A8](v14);
  v43 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v3 + 184);
  v49 = v16;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = sub_249F1FBEC();
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v42 = v16 & 0xFFFFFFFFFFFFFF8;
  if (v17)
  {
    v46 = MEMORY[0x24BEE4AF8];
    result = sub_249EB5D50(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
      goto LABEL_26;
    v40 = v4;
    v41 = a3;
    v19 = v46;
    v39 = v16 & 0xC000000000000001;
    if ((v16 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v17; ++i)
      {
        v21 = MEMORY[0x24BD056B8](i, v16);
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v21 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL, v7);
        swift_unknownObjectRelease();
        v46 = v19;
        v23 = *(_QWORD *)(v19 + 16);
        v22 = *(_QWORD *)(v19 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_249EB5D50(v22 > 1, v23 + 1, 1);
          v19 = v46;
        }
        *(_QWORD *)(v19 + 16) = v23 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v23, v13, v7);
      }
    }
    else
    {
      v25 = (_QWORD *)(v16 + 32);
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      do
      {
        v26 = v16;
        v50(v11, *v25 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL, v7);
        v46 = v19;
        v28 = *(_QWORD *)(v19 + 16);
        v27 = *(_QWORD *)(v19 + 24);
        if (v28 >= v27 >> 1)
        {
          sub_249EB5D50(v27 > 1, v28 + 1, 1);
          v19 = v46;
        }
        *(_QWORD *)(v19 + 16) = v28 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v28, v11, v7);
        ++v25;
        --v17;
        v16 = v26;
      }
      while (v17);
    }
    result = sub_249DFBA54((uint64_t)&v49);
    a3 = v41;
    v5 = v40;
    v24 = v39;
  }
  else
  {
    result = sub_249DFBA54((uint64_t)&v49);
    v24 = v16 & 0xC000000000000001;
    v19 = MEMORY[0x24BEE4AF8];
  }
  if (!v24)
  {
    if (*(_QWORD *)(v42 + 16))
    {
      v29 = *(_QWORD *)(v16 + 32);
      swift_retain();
      goto LABEL_20;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  v29 = MEMORY[0x24BD056B8](0, v16);
LABEL_20:
  v30 = *(id *)(v29 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_configuration);
  swift_release();
  v31 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v43, v44, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v7);
  result = sub_249EC4590(v19, v30, v31, v45, (uint64_t)v47);
  if (!v5)
  {
    v32 = v47[11];
    *(_OWORD *)(a3 + 160) = v47[10];
    *(_OWORD *)(a3 + 176) = v32;
    *(_BYTE *)(a3 + 192) = v48;
    v33 = v47[7];
    *(_OWORD *)(a3 + 96) = v47[6];
    *(_OWORD *)(a3 + 112) = v33;
    v34 = v47[9];
    *(_OWORD *)(a3 + 128) = v47[8];
    *(_OWORD *)(a3 + 144) = v34;
    v35 = v47[3];
    *(_OWORD *)(a3 + 32) = v47[2];
    *(_OWORD *)(a3 + 48) = v35;
    v36 = v47[5];
    *(_OWORD *)(a3 + 64) = v47[4];
    *(_OWORD *)(a3 + 80) = v36;
    v37 = v47[1];
    *(_OWORD *)a3 = v47[0];
    *(_OWORD *)(a3 + 16) = v37;
  }
  return result;
}

uint64_t AppleDiffusionUnet.modelBatchSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 144);
  if (*(_QWORD *)(v1 + 16))
    return *(_QWORD *)(v1 + 32);
  __break(1u);
  return result;
}

void sub_249EC1440(void *a1, uint64_t a2)
{
  int64_t v2;

  if (a1)
  {
    v2 = a2 - (_QWORD)a1;
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (v2)
    {
      bzero(a1, v2);
    }
  }
}

uint64_t sub_249EC145C(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  char isUniquelyReferenced_nonNull_native;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int64_t v77;
  unint64_t v78;
  id v79;
  _QWORD *v80;

  v4 = *(_QWORD *)(v2 + 144);
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v5 = v3;
  v6 = a1;
  if (*(_QWORD *)(v4 + 32) == 2)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v6;
  }
  v7 = a1[2];
  if ((a2 & 1) != 0)
    goto LABEL_7;
  if (v7 + 0x4000000000000000 < 0)
  {
LABEL_72:
    __break(1u);
LABEL_73:
    result = sub_249F1FF10();
    __break(1u);
    return result;
  }
  v7 *= 2;
LABEL_7:
  v8 = sub_249F0CB94(0, v7 & ~(v7 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v69 = v6[2];
  if (!v69)
    return (uint64_t)v8;
  v9 = 0;
  v10 = v6 + 4;
  v11 = MEMORY[0x24BEE4AF8];
  v6 = v8;
  v75 = v10;
  while (2)
  {
    v71 = v9 + 1;
    v72 = v6;
    v12 = (_QWORD *)sub_249EAF51C(v11);
    v80 = (_QWORD *)sub_249EAF51C(v11);
    v13 = v10[v9];
    v14 = *(_QWORD *)(v13 + 64);
    v73 = v13 + 64;
    v15 = 1 << *(_BYTE *)(v13 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & v14;
    v74 = (unint64_t)(v15 + 63) >> 6;
    v76 = v10[v9];
    swift_bridgeObjectRetain();
    v18 = 0;
    while (1)
    {
      if (v17)
      {
        v21 = __clz(__rbit64(v17));
        v22 = (v17 - 1) & v17;
        v23 = v21 | (v18 << 6);
        goto LABEL_28;
      }
      v24 = __OFADD__(v18++, 1);
      if (v24)
        goto LABEL_69;
      if (v18 >= v74)
        break;
      v25 = *(_QWORD *)(v73 + 8 * v18);
      if (!v25)
      {
        v26 = v18 + 1;
        if (v18 + 1 >= v74)
          break;
        v25 = *(_QWORD *)(v73 + 8 * v26);
        if (!v25)
        {
          v26 = v18 + 2;
          if (v18 + 2 >= v74)
            break;
          v25 = *(_QWORD *)(v73 + 8 * v26);
          if (!v25)
          {
            v26 = v18 + 3;
            if (v18 + 3 >= v74)
              break;
            v25 = *(_QWORD *)(v73 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                v18 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_71;
                if (v18 >= v74)
                  goto LABEL_53;
                v25 = *(_QWORD *)(v73 + 8 * v18);
                ++v26;
                if (v25)
                  goto LABEL_27;
              }
            }
          }
        }
        v18 = v26;
      }
LABEL_27:
      v22 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_28:
      v27 = *(_QWORD *)(v76 + 48) + 16 * v23;
      v6 = *(_QWORD **)v27;
      v28 = *(_QWORD *)(v27 + 8);
      v29 = *(void **)(*(_QWORD *)(v76 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
      v79 = v29;
      v30 = sub_249EC30D8(v79);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();

        return (uint64_t)v6;
      }
      v32 = v30;
      v33 = v31;
      v78 = v22;
      v77 = v18;
      swift_bridgeObjectRetain();
      v34 = v32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v37 = sub_249DB7D8C((uint64_t)v6, v28);
      v38 = v12[2];
      v39 = (v36 & 1) == 0;
      v40 = v38 + v39;
      if (__OFADD__(v38, v39))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v41 = v36;
      if (v12[3] >= v40)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v36 & 1) != 0)
            goto LABEL_37;
        }
        else
        {
          sub_249F052C8();
          if ((v41 & 1) != 0)
            goto LABEL_37;
        }
      }
      else
      {
        sub_249F020F8(v40, isUniquelyReferenced_nonNull_native);
        v42 = sub_249DB7D8C((uint64_t)v6, v28);
        if ((v41 & 1) != (v43 & 1))
          goto LABEL_73;
        v37 = v42;
        if ((v41 & 1) != 0)
        {
LABEL_37:
          v47 = v12[7];
          v48 = 8 * v37;

          *(_QWORD *)(v47 + v48) = v34;
          goto LABEL_38;
        }
      }
      v12[(v37 >> 6) + 8] |= 1 << v37;
      v44 = (_QWORD *)(v12[6] + 16 * v37);
      *v44 = v6;
      v44[1] = v28;
      *(_QWORD *)(v12[7] + 8 * v37) = v34;
      v45 = v12[2];
      v24 = __OFADD__(v45, 1);
      v46 = v45 + 1;
      if (v24)
        goto LABEL_67;
      v12[2] = v46;
      swift_bridgeObjectRetain();
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = v33;
      v50 = swift_isUniquelyReferenced_nonNull_native();
      v52 = sub_249DB7D8C((uint64_t)v6, v28);
      v53 = v80[2];
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_66;
      v56 = v51;
      if (v80[3] >= v55)
      {
        if ((v50 & 1) == 0)
          sub_249F052C8();
      }
      else
      {
        sub_249F020F8(v55, v50);
        v57 = sub_249DB7D8C((uint64_t)v6, v28);
        if ((v56 & 1) != (v58 & 1))
          goto LABEL_73;
        v52 = v57;
      }
      v17 = v78;
      if ((v56 & 1) != 0)
      {
        v19 = v80[7];
        v20 = 8 * v52;

        *(_QWORD *)(v19 + v20) = v49;
      }
      else
      {
        v80[(v52 >> 6) + 8] |= 1 << v52;
        v59 = (_QWORD *)(v80[6] + 16 * v52);
        *v59 = v6;
        v59[1] = v28;
        *(_QWORD *)(v80[7] + 8 * v52) = v49;
        v60 = v80[2];
        v24 = __OFADD__(v60, 1);
        v61 = v60 + 1;
        if (v24)
          goto LABEL_68;
        v80[2] = v61;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = v77;
      v5 = 0;
      v10 = v75;
    }
LABEL_53:
    swift_release();
    if ((a2 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v6 = v72;
      v62 = v72[2];
      v63 = v80;
    }
    else
    {
      v65 = v72[2];
      v64 = v72[3];
      v62 = v65 + 1;
      if (v65 >= v64 >> 1)
        v72 = sub_249F0CB94((_QWORD *)(v64 > 1), v65 + 1, 1, v72);
      v63 = v80;
      v6 = v72;
      v72[2] = v62;
      v72[v65 + 4] = v12;
    }
    v66 = v6[3];
    v11 = MEMORY[0x24BEE4AF8];
    if (v62 >= v66 >> 1)
    {
      v67 = sub_249F0CB94((_QWORD *)(v66 > 1), v62 + 1, 1, v6);
      v63 = v80;
      v6 = v67;
    }
    v6[2] = v62 + 1;
    v6[v62 + 4] = v63;
    v9 = v71;
    if (v71 != v69)
      continue;
    return (uint64_t)v6;
  }
}

unint64_t sub_249EC1A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id (*v42)@<X0>(void *@<X0>, _QWORD *@<X8>);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;

  v4 = v2;
  v6 = *(_QWORD *)(v1 + 184);
  v52 = v6;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_249F1FBEC();
    v7 = result;
    if (result)
      goto LABEL_3;
LABEL_37:
    sub_249DFBA54((uint64_t)&v52);
    sub_249EB70B4();
    swift_allocError();
    *(_QWORD *)v39 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v39 + 8) = 0;
    *(_BYTE *)(v39 + 16) = 3;
    swift_willThrow();
    return (unint64_t)v3;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_37;
LABEL_3:
  v50 = v7;
  v48 = v6 >> 62;
  v46 = v6 & 0xC000000000000001;
  if ((v6 & 0xC000000000000001) != 0)
    goto LABEL_40;
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(_QWORD *)(v6 + 32);
    swift_retain();
    while (1)
    {
      v10 = sub_249DFBA54((uint64_t)&v52);
      v11 = MEMORY[0x24BDAC7A8](v10);
      v44 = a1;
      MEMORY[0x24BDAC7A8](v11);
      v3 = &v40;
      v41 = v9;
      v42 = sub_249EC5C8C;
      v43 = v12;
      v14 = v13;
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFF8);
      sub_249F1F874();
      if (v4)
      {
        swift_release();

        return (unint64_t)v3;
      }
      v47 = v15;
      v45 = v9;

      v3 = v51;
      v16 = v48;
      if (v48)
      {
        swift_bridgeObjectRetain();
        v17 = sub_249F1FBEC();
        sub_249DFBA54((uint64_t)&v52);
      }
      else
      {
        v17 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v18 = v50;
      if (v17 == 1)
      {
        swift_release();
        return (unint64_t)v3;
      }
      ObjectType = swift_getObjectType();
      result = sub_249ED3708(ObjectType);
      v49 = result;
      if (v18 < 0)
        goto LABEL_44;
      if (v16)
      {
        swift_bridgeObjectRetain_n();
        a1 = sub_249F1FBEC();
        result = sub_249DFBA54((uint64_t)&v52);
        if (a1 < 1)
          goto LABEL_42;
        swift_bridgeObjectRetain();
        v20 = sub_249F1FBEC();
        result = sub_249DFBA54((uint64_t)&v52);
      }
      else
      {
        v20 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (!v20)
          goto LABEL_42;
      }
      if (v20 < v18)
        goto LABEL_43;
      if (v46 && v18 != 1)
      {
        type metadata accessor for ManagedMLModel();
        v21 = 1;
        do
        {
          v22 = v21 + 1;
          sub_249F1FAA8();
          v21 = v22;
        }
        while (v18 != v22);
      }
      if (v16)
      {
        swift_bridgeObjectRetain();
        v46 = sub_249F1FBF8();
        v48 = v23;
        v6 = v24;
        v26 = v25;
        sub_249DFBA54((uint64_t)&v52);
        sub_249DFBA54((uint64_t)&v52);
        v18 = v26 >> 1;
        if (v6 == v26 >> 1)
        {
LABEL_28:
          swift_release();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          return (unint64_t)v3;
        }
      }
      else
      {
        v46 = v6 & 0xFFFFFFFFFFFFFF8;
        v48 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
        v6 = 1;
        if (v18 == 1)
          goto LABEL_28;
      }
      v50 = v18;
      while ((uint64_t)v6 < v18)
      {
        a1 = *(_QWORD *)(v48 + 8 * v6);
        v27 = swift_getObjectType();
        swift_retain();
        swift_unknownObjectRetain();
        v28 = sub_249ED3708(v27);
        v29 = swift_unknownObjectRelease();
        MEMORY[0x24BDAC7A8](v29);
        v44 = v49;
        v30 = sub_249ED6F30(v28, (void (*)(uint64_t, uint64_t))sub_249EC5CA4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (v30 >> 62)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
          sub_249F1FBE0();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_249F1FEC8();
        }
        swift_bridgeObjectRelease();
        v31 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
        v32 = (void *)sub_249F1F538();
        swift_bridgeObjectRelease();
        v33 = objc_msgSend(v31, sel_initWithFeatureProviderArray_, v32);

        v35 = MEMORY[0x24BDAC7A8](v34);
        v44 = (unint64_t)v33;
        MEMORY[0x24BDAC7A8](v35);
        v41 = a1;
        v42 = sub_249EC5D04;
        v43 = v36;
        v38 = v37;
        sub_249F1F874();
        ++v6;

        swift_unknownObjectRelease();
        swift_release();

        v18 = v50;
        v3 = v51;
        if (v50 == v6)
          goto LABEL_28;
      }
      __break(1u);
LABEL_40:
      v9 = MEMORY[0x24BD056B8](0, v6);
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void sub_249EC2058(_QWORD *a1, id a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;

  v2 = objc_msgSend(a2, sel_featuresAtIndex_, *a1);
  v3 = objc_msgSend(v2, sel_featureNames);
  v4 = sub_249F1F700();

  sub_249ECFCB8(v4);
  v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v2, sel_featureValueForName_, v7);

  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = objc_msgSend(v8, sel_multiArrayValue);

  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_249F21760;
    *(_QWORD *)(v10 + 32) = v9;
    sub_249F1F55C();
    sub_249D9D9F4(0, &qword_2578DDE20);
    v11 = v9;
    v12 = (void *)sub_249F1F538();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v12, 0, 65568);

    sub_249F1F01C();
    swift_unknownObjectRelease();

    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_249EC2254(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, unint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v29 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 144);
  if (*(_QWORD *)(v6 + 16))
  {
    if (*(_QWORD *)(v6 + 32) == 2)
    {
      swift_bridgeObjectRetain();
      return a1;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (!v7)
      return MEMORY[0x24BEE4AF8];
    v8 = v29;
    v9 = *(unsigned __int8 *)(v29 + 80);
    v10 = (v9 + 32) & ~v9;
    v11 = a1 + v10;
    v30 = *(_QWORD *)(v29 + 72);
    v22 = 2 * v30;
    v27 = 2 * v30 + v10;
    v28 = v7 - 1;
    v26 = v9 | 7;
    a1 = MEMORY[0x24BEE4AF8];
    v12 = 1;
    v25 = xmmword_249F21910;
    v23 = v11;
    v24 = v3;
    while (1)
    {
      v13 = v28 >= v12 ? v12 : v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = v25;
      v15 = v10;
      v16 = v14 + v10;
      v17 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
      result = v17(v16, v11, v3);
      if (v13 >= v7)
        break;
      v17(v16 + v30, v23 + v30 * v13, v3);
      v32 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
      sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
      sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
      sub_249F1EFA4();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = sub_249F0CCB4(0, *(_QWORD *)(a1 + 16) + 1, 1, a1);
      v8 = v29;
      v10 = v15;
      v19 = *(_QWORD *)(a1 + 16);
      v18 = *(_QWORD *)(a1 + 24);
      if (v19 >= v18 >> 1)
        a1 = sub_249F0CCB4(v18 > 1, v19 + 1, 1, a1);
      *(_QWORD *)(a1 + 16) = v19 + 1;
      v3 = v24;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(a1 + v15 + v19 * v30, v31, v24);
      v20 = v12 + 1;
      v12 += 2;
      v11 += v22;
      if (v20 >= v7)
        return a1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_249EC24F0(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > result)
  {
    swift_bridgeObjectRetain();
    v4 = swift_bridgeObjectRetain();
    v5 = sub_249EBEC3C(v4, a2);
    sub_249EFBA98(v5);
    swift_bridgeObjectRelease();
    v6 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    return (unint64_t)sub_249EFD4E8();
  }
  __break(1u);
  return result;
}

id sub_249EC2584@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  id v5;
  id v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8[0] = 0;
  v4 = objc_msgSend(a1, sel_predictionsFromBatch_error_, a2, v8);
  v5 = v8[0];
  if (v4)
  {
    *a3 = v4;
    return v5;
  }
  else
  {
    v7 = v8[0];
    sub_249F1E710();

    return (id)swift_willThrow();
  }
}

void sub_249EC2638()
{
  AppleDiffusionUnet.loadResources()();
}

void sub_249EC2650()
{
  sub_249F1AE6C();
}

uint64_t sub_249EC2668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EC26B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  void *v54;

  swift_bridgeObjectRetain();
  swift_retain();
  sub_249ED6D6C();
  if (!v8)
    goto LABEL_23;
  v10 = v7;
  v11 = v8;
  v54 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_249DB7D8C(v7, v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_249F05490();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v21[6] + 16 * v14);
    *v25 = v10;
    v25[1] = v11;
    *(_QWORD *)(v21[7] + 8 * v14) = v54;
    v26 = v21[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v28;
LABEL_13:
    sub_249ED6D6C();
    if (v30)
    {
      v32 = v29;
      v33 = v30;
      v34 = v31;
      do
      {
        v41 = (_QWORD *)*a5;
        v42 = sub_249DB7D8C(v32, v33);
        v44 = v41[2];
        v45 = (v43 & 1) == 0;
        v27 = __OFADD__(v44, v45);
        v46 = v44 + v45;
        if (v27)
          goto LABEL_24;
        v47 = v43;
        if (v41[3] < v46)
        {
          sub_249F02444(v46, 1);
          v42 = sub_249DB7D8C(v32, v33);
          if ((v47 & 1) != (v48 & 1))
            goto LABEL_26;
        }
        v49 = (_QWORD *)*a5;
        if ((v47 & 1) != 0)
        {
          v35 = 8 * v42;
          v36 = *(id *)(v49[7] + 8 * v42);
          swift_bridgeObjectRelease();

          v37 = v49[7];
          *(_QWORD *)(v37 + v35) = v36;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          v50 = (uint64_t *)(v49[6] + 16 * v42);
          *v50 = v32;
          v50[1] = v33;
          *(_QWORD *)(v49[7] + 8 * v42) = v34;
          v51 = v49[2];
          v27 = __OFADD__(v51, 1);
          v52 = v51 + 1;
          if (v27)
            goto LABEL_25;
          v49[2] = v52;
        }
        sub_249ED6D6C();
        v32 = v38;
        v33 = v39;
        v34 = v40;
      }
      while (v39);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    sub_249D9E18C();
    return swift_release();
  }
  sub_249F02444(v17, a4 & 1);
  v19 = sub_249DB7D8C(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v22 = 8 * v14;
    v23 = *(id *)(v21[7] + 8 * v14);
    swift_bridgeObjectRelease();

    v24 = v21[7];
    *(_QWORD *)(v24 + v22) = v23;
    goto LABEL_13;
  }
LABEL_26:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249EC29B8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t i;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t result;
  _QWORD v67[2];
  void (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  int64_t v88;
  _QWORD *v89;
  uint64_t v90;

  v81 = a2;
  v82 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v80 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE000);
  v10 = MEMORY[0x24BDAC7A8](v79);
  v78 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v77 = (_QWORD *)((char *)v67 - v13);
  MEMORY[0x24BDAC7A8](v12);
  v84 = (uint64_t)v67 - v14;
  v90 = MEMORY[0x24BEE4AF8];
  sub_249EB5CB4(0, 0, 0);
  v15 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v73 = v15;
  v67[0] = a1;
  if (!v15)
  {
    v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    goto LABEL_46;
  }
  v16 = 0;
  v75 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v74 = *(_QWORD *)(v8 + 72);
  v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16);
  v72 = xmmword_249F21770;
  v71 = v6;
  v70 = v7;
  v69 = v8;
  v68 = v17;
  while (1)
  {
    v17(v6, v75 + v74 * v16, v7);
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v18(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      break;
    v76 = v18;
    v83 = v16 + 1;
    v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v20 = v80;
    v19(v80, v6, v7);
    v22 = v78;
    v21 = v79;
    v23 = (void (*)(char *, uint64_t, uint64_t))v17;
    v24 = &v78[*(int *)(v79 + 48)];
    v19(v24, v20, v7);
    v25 = (uint64_t)v77;
    v26 = (char *)v77 + *(int *)(v21 + 48);
    *v77 = v16;
    v19(v26, v24, v7);
    v27 = v84;
    sub_249EC5CBC(v25, v84);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFE0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v72;
    v29 = v81[1];
    *(_QWORD *)(inited + 32) = *v81;
    *(_QWORD *)(inited + 40) = v29;
    sub_249D9D9F4(0, &qword_2578DDE20);
    v23(&v22[*(int *)(v21 + 48)], v27 + *(int *)(v21 + 48), v7);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    swift_bridgeObjectRetain();
    *(_QWORD *)(inited + 48) = sub_249F1F7FC();
    v30 = sub_249EAF51C(inited);
    v31 = (_QWORD *)*v82;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v89 = v31;
    v33 = *(_QWORD *)(v30 + 64);
    v85 = v30 + 64;
    v34 = 1 << *(_BYTE *)(v30 + 32);
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v36 = v35 & v33;
    v86 = (unint64_t)(v34 + 63) >> 6;
    v87 = v30;
    swift_bridgeObjectRetain();
    for (i = 0; ; i = v88)
    {
      if (v36)
      {
        v40 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        v88 = i;
        v41 = v40 | (i << 6);
        goto LABEL_28;
      }
      v42 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_50;
      if (v42 >= v86)
        break;
      v43 = *(_QWORD *)(v85 + 8 * v42);
      v44 = i + 1;
      if (!v43)
      {
        v44 = i + 2;
        if (i + 2 >= v86)
          break;
        v43 = *(_QWORD *)(v85 + 8 * v44);
        if (!v43)
        {
          v44 = i + 3;
          if (i + 3 >= v86)
            break;
          v43 = *(_QWORD *)(v85 + 8 * v44);
          if (!v43)
          {
            v44 = i + 4;
            if (i + 4 >= v86)
              break;
            v43 = *(_QWORD *)(v85 + 8 * v44);
            if (!v43)
            {
              v45 = i + 5;
              if (i + 5 >= v86)
                break;
              v43 = *(_QWORD *)(v85 + 8 * v45);
              if (!v43)
              {
                while (1)
                {
                  v44 = v45 + 1;
                  if (__OFADD__(v45, 1))
                    goto LABEL_51;
                  if (v44 >= v86)
                    goto LABEL_39;
                  v43 = *(_QWORD *)(v85 + 8 * v44);
                  ++v45;
                  if (v43)
                    goto LABEL_27;
                }
              }
              v44 = i + 5;
            }
          }
        }
      }
LABEL_27:
      v36 = (v43 - 1) & v43;
      v88 = v44;
      v41 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_28:
      v46 = (uint64_t *)(*(_QWORD *)(v87 + 48) + 16 * v41);
      v47 = *v46;
      v48 = v46[1];
      v49 = *(void **)(*(_QWORD *)(v87 + 56) + 8 * v41);
      swift_bridgeObjectRetain();
      v50 = v49;
      v52 = sub_249DB7D8C(v47, v48);
      v53 = v31[2];
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        result = sub_249F1FF10();
        __break(1u);
        return result;
      }
      v56 = v51;
      if (v31[3] >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v31 = v89;
          if ((v51 & 1) != 0)
            goto LABEL_8;
        }
        else
        {
          sub_249F052C8();
          v31 = v89;
          if ((v56 & 1) != 0)
            goto LABEL_8;
        }
      }
      else
      {
        sub_249F020F8(v55, isUniquelyReferenced_nonNull_native & 1);
        v57 = sub_249DB7D8C(v47, v48);
        if ((v56 & 1) != (v58 & 1))
          goto LABEL_52;
        v52 = v57;
        v31 = v89;
        if ((v56 & 1) != 0)
        {
LABEL_8:
          v38 = *(id *)(v31[7] + 8 * v52);
          swift_bridgeObjectRelease();

          v39 = v31[7];
          *(_QWORD *)(v39 + 8 * v52) = v38;
          goto LABEL_9;
        }
      }
      v31[(v52 >> 6) + 8] |= 1 << v52;
      v59 = (uint64_t *)(v31[6] + 16 * v52);
      *v59 = v47;
      v59[1] = v48;
      *(_QWORD *)(v31[7] + 8 * v52) = v50;
      v60 = v31[2];
      v61 = __OFADD__(v60, 1);
      v62 = v60 + 1;
      if (v61)
        goto LABEL_49;
      v31[2] = v62;
LABEL_9:
      isUniquelyReferenced_nonNull_native = 1;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_249DCC2FC(v84, &qword_2578DE000);
    v63 = v90;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_249EB5CB4(0, *(_QWORD *)(v63 + 16) + 1, 1);
      v63 = v90;
    }
    v6 = v71;
    v65 = *(_QWORD *)(v63 + 16);
    v64 = *(_QWORD *)(v63 + 24);
    if (v65 >= v64 >> 1)
    {
      sub_249EB5CB4(v64 > 1, v65 + 1, 1);
      v63 = v90;
    }
    *(_QWORD *)(v63 + 16) = v65 + 1;
    *(_QWORD *)(v63 + 8 * v65 + 32) = v31;
    v16 = v83;
    v7 = v70;
    v8 = v69;
    v17 = v68;
    if (v83 == v73)
    {
LABEL_46:
      v76(v6, 1, 1, v7);
      break;
    }
  }
  sub_249DCC2FC((uint64_t)v6, &qword_2578DDDD8);
  swift_bridgeObjectRelease();
  return v90;
}

id sub_249EC30D8(void *a1)
{
  id v2;
  unint64_t v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(a1, sel_shape);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v3 = sub_249F1F544();

  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x24BD056B8](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v4 = *(id *)(v3 + 32);
  }
  v5 = v4;
  v6 = objc_msgSend(v4, sel_integerValue);

  if (v6 != (id)2)
  {
    v11 = a1;
    swift_bridgeObjectRelease();
    return v11;
  }
  v25 = v3;
  swift_bridgeObjectRetain();
  v2 = (id)sub_249F1F934();
  if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    sub_249E3C630(v3);
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
  v7 = *(void **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x20);
  *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x20) = v2;

  sub_249F1F55C();
  v2 = (id)sub_249F1F934();
  if (!(v3 >> 62))
  {
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
LABEL_27:
  swift_bridgeObjectRetain();
  v8 = sub_249F1FBEC();
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  v24 = sub_249EF86CC(v2, v8);
  swift_bridgeObjectRetain();
  v9 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  v23 = 0;
  v11 = objc_msgSend(a1, sel_sliceAtOrigin_shape_squeeze_error_, v9, v10, 0, &v23);

  if (v11)
  {
    v12 = v23;
    v13 = sub_249F1F934();
    v14 = v24;
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || (v14 & 0x8000000000000000) != 0
      || (v14 & 0x4000000000000000) != 0)
    {
      sub_249E3C630(v14);
    }
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v15 = *(void **)((v14 & 0xFFFFFFFFFFFFFF8) + 0x20);
    *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x20) = v13;

    sub_249F1F55C();
    v16 = (void *)sub_249F1F538();
    swift_bridgeObjectRelease();
    v17 = (void *)sub_249F1F538();
    swift_bridgeObjectRelease();
    v23 = 0;
    v18 = objc_msgSend(a1, sel_sliceAtOrigin_shape_squeeze_error_, v16, v17, 0, &v23);

    if (v18)
    {
      v19 = v23;
    }
    else
    {
      v21 = v23;
      sub_249F1E710();

      swift_willThrow();
    }
  }
  else
  {
    v20 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_249F1E710();

    swift_willThrow();
  }
  return v11;
}

uint64_t sub_249EC3484(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v18 = a3;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(_QWORD *)(v17 - 8);
  result = MEMORY[0x24BDAC7A8](v17);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v12 = MEMORY[0x24BEE4AF8];
  if (!v11)
    return v12;
  v21 = MEMORY[0x24BEE4AF8];
  result = sub_249EB5C40(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = v21;
    v13 = v19;
    if (a2 <= v19)
      v14 = v19;
    else
      v14 = a2;
    while (a2 != v13)
    {
      v20 = v13;
      sub_249EC2058(&v20, v18);
      if (v4)
      {
        swift_release();
        return v12;
      }
      v4 = 0;
      v21 = v12;
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_249EB5C40(v15 > 1, v16 + 1, 1);
        v12 = v21;
      }
      *(_QWORD *)(v12 + 16) = v16 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, v10, v17);
      if (a2 < v19)
        goto LABEL_18;
      if (v14 == v13)
        goto LABEL_19;
      if (a2 == ++v13)
        return v12;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_249EC3628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char v42;
  id v43;
  id v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  void *v53;
  id v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char *v62;
  id v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  id v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  void *v90;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  id v104;
  void *v105;
  id v106;
  id v107;
  void *v108;
  void *v109;
  char v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  id v114;
  unint64_t v115;
  char v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  char *v121;
  _QWORD v122[2];
  _QWORD *v123;
  id v124;
  _QWORD *v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  id v129;
  char *v130;
  id v131;
  uint64_t v132;
  id v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  void *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char v152;
  id v153[4];
  _WORD v154[8];
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  void *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  id v169;
  id v170;
  char v171;
  uint64_t v172;

  v138 = a2;
  v172 = *MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_249F1E7F4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v122 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v139 = (id)sub_249EAF51C(MEMORY[0x24BEE4AF8]);
  v14 = sub_249EAF51C(v13);
  sub_249EC2668(a1, (uint64_t)v5);
  v15 = "timestep_conditioning";
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_249DCC2FC(a1, &qword_2578D7E10);
    sub_249DCC2FC((uint64_t)v5, &qword_2578D7E10);
    v16 = 0;
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v19 = v139;
    v20 = v138;
    v21 = (id)v14;
LABEL_8:
    *(_QWORD *)&v141 = 0x746E6574616CLL;
    *((_QWORD *)&v141 + 1) = 0xE600000000000000;
    *(_QWORD *)&v142 = 1885697139;
    *((_QWORD *)&v142 + 1) = 0xE400000000000000;
    strcpy((char *)&v143, "conditioning");
    BYTE13(v143) = 0;
    HIWORD(v143) = -5120;
    *(_QWORD *)&v144 = 0xD000000000000013;
    *((_QWORD *)&v144 + 1) = 0x8000000249F38D50;
    *(_QWORD *)&v145 = 0xD000000000000015;
    *((_QWORD *)&v145 + 1) = 0x8000000249F38D70;
    *(_QWORD *)&v146 = &unk_251B5A898;
    *((_QWORD *)&v146 + 1) = 0xD000000000000015;
    *(_QWORD *)&v147 = 0x8000000249F38BF0;
    *((_QWORD *)&v147 + 1) = 0xD000000000000013;
    *(_QWORD *)&v148 = 0x8000000249F38BD0;
    *((_QWORD *)&v148 + 1) = &unk_251B5A8E8;
    *(_QWORD *)&v149 = 0x6C6163735F6D636CLL;
    *((_QWORD *)&v149 + 1) = 0xE900000000000065;
    *(_QWORD *)&v150 = v18;
    *((_QWORD *)&v150 + 1) = v17;
    *(_QWORD *)&v151 = v19;
    *((_QWORD *)&v151 + 1) = v21;
    v152 = v16;
    v153[0] = (id)0x746E6574616CLL;
    v153[1] = (id)0xE600000000000000;
    v153[2] = (id)1885697139;
    v153[3] = (id)0xE400000000000000;
    strcpy((char *)v154, "conditioning");
    HIBYTE(v154[6]) = 0;
    v154[7] = -5120;
    v155 = 0xD000000000000013;
    v156 = 0x8000000249F38D50;
    v157 = 0xD000000000000015;
    v158 = 0x8000000249F38D70;
    v159 = &unk_251B5A898;
    v160 = 0xD000000000000015;
    v161 = 0x8000000249F38BF0;
    v162 = 0xD000000000000013;
    v163 = 0x8000000249F38BD0;
    v164 = &unk_251B5A8E8;
    v165 = 0x6C6163735F6D636CLL;
    v166 = 0xE900000000000065;
    v167 = v18;
    v168 = v17;
    v169 = v19;
    v170 = v21;
    v171 = v16;
    sub_249EC59E4((uint64_t)&v141);
    result = sub_249EC5ACC((uint64_t)v153);
    v28 = v150;
    *(_OWORD *)(v20 + 128) = v149;
    *(_OWORD *)(v20 + 144) = v28;
    *(_OWORD *)(v20 + 160) = v151;
    *(_BYTE *)(v20 + 176) = v152;
    v29 = v146;
    *(_OWORD *)(v20 + 64) = v145;
    *(_OWORD *)(v20 + 80) = v29;
    v30 = v148;
    *(_OWORD *)(v20 + 96) = v147;
    *(_OWORD *)(v20 + 112) = v30;
    v31 = v142;
    *(_OWORD *)v20 = v141;
    *(_OWORD *)(v20 + 16) = v31;
    v32 = v144;
    *(_OWORD *)(v20 + 32) = v143;
    *(_OWORD *)(v20 + 48) = v32;
    return result;
  }
  v135 = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  sub_249D9D9F4(0, &qword_2578DDFA8);
  v136 = v6;
  v137 = v7;
  v22 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v134 = v12;
  v22(v10, v12, v6);
  v23 = v140;
  v24 = sub_249F13D1C((uint64_t)v10);
  v25 = v23;
  if (v23)
  {

    v26 = v137;
    v19 = v139;
    v21 = (id)v14;
LABEL_5:
    sub_249DCC2FC(v135, &qword_2578D7E10);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v134, v136);
LABEL_6:
    v16 = 0;
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_7:
    v20 = v138;
    goto LABEL_8;
  }
  v33 = v24;
  v26 = v137;
  v19 = v139;
  v21 = (id)v14;
  if (!v24)
    goto LABEL_5;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v33;
  v35 = v33;
  v127 = (id)sub_249F13FC8((uint64_t)&unk_2578DDFB8, v34);
  swift_release();
  v36 = v136;
  if (!v127)
  {

    sub_249DCC2FC(v135, &qword_2578D7E10);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v134, v36);
    goto LABEL_6;
  }
  v37 = objc_msgSend(v127, sel_inputDescriptionsByName);
  v122[1] = sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v38 = sub_249F1F208();

  v39 = *(_QWORD *)(v38 + 16);
  v132 = v38;
  v133 = v21;
  v124 = v35;
  if (!v39)
  {
    v58 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v123 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_49:
    v125 = v58;
    goto LABEL_50;
  }
  v40 = sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
  v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v42 & 1) == 0)
    goto LABEL_30;
  v43 = *(id *)(*(_QWORD *)(v38 + 56) + 8 * v40);
  v44 = objc_msgSend(v43, sel_multiArrayConstraint);
  if (!v44)
  {
LABEL_29:

    goto LABEL_30;
  }
  v131 = v44;
  v45 = objc_msgSend(v44, sel_shape);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v46 = sub_249F1F544();

  v47 = v46;
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    v48 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if (v48)
      goto LABEL_16;
    goto LABEL_28;
  }
  v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v48)
  {
LABEL_28:
    swift_bridgeObjectRelease();

    goto LABEL_29;
  }
LABEL_16:
  v49 = v47;
  v130 = (char *)v43;
  v140 = 0;
  v153[0] = v41;
  sub_249DB677C(0, v48 & ~(v48 >> 63), 0);
  if (v48 < 0)
  {
    __break(1u);
    goto LABEL_45;
  }
  v50 = 0;
  v41 = v153[0];
  v51 = v47;
  do
  {
    if ((v49 & 0xC000000000000001) != 0)
      v52 = (id)MEMORY[0x24BD056B8](v50, v51);
    else
      v52 = *(id *)(v51 + 8 * v50 + 32);
    v53 = v52;
    v54 = objc_msgSend(v52, sel_integerValue);

    v153[0] = v41;
    v55 = v41;
    v56 = v41[2];
    v57 = v55[3];
    if (v56 >= v57 >> 1)
    {
      sub_249DB677C(v57 > 1, v56 + 1, 1);
      v55 = v153[0];
    }
    ++v50;
    v55[2] = v56 + 1;
    v55[v56 + 4] = v54;
    v41 = v55;
    v51 = v49;
  }
  while (v48 != v50);
  swift_bridgeObjectRelease();

  v25 = v140;
  v38 = v132;
LABEL_30:
  v59 = *(_QWORD *)(v38 + 16);
  v123 = v41;
  if (!v59)
  {
LABEL_48:
    v58 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_49;
  }
  v60 = sub_249DB7D8C(0xD000000000000015, 0x8000000249F38D70);
  v125 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v61 & 1) == 0)
    goto LABEL_50;
  v49 = (unint64_t)*(id *)(*(_QWORD *)(v38 + 56) + 8 * v60);
  v62 = (char *)objc_msgSend((id)v49, sel_multiArrayConstraint);
  if (!v62)
  {
LABEL_47:

    goto LABEL_48;
  }
  v15 = v62;
  v63 = objc_msgSend(v62, sel_shape);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v48 = sub_249F1F544();

  if (!((unint64_t)v48 >> 62))
  {
    v64 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v64)
      goto LABEL_35;
    goto LABEL_46;
  }
LABEL_45:
  swift_bridgeObjectRetain();
  v64 = sub_249F1FBEC();
  swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_46:
    swift_bridgeObjectRelease();

    goto LABEL_47;
  }
LABEL_35:
  v129 = (id)v49;
  v130 = v15;
  v140 = v25;
  v153[0] = (id)MEMORY[0x24BEE4AF8];
  result = sub_249DB677C(0, v64 & ~(v64 >> 63), 0);
  v131 = (id)v64;
  if ((v64 & 0x8000000000000000) == 0)
  {
    v65 = 0;
    v66 = v153[0];
    v67 = v48 & 0xC000000000000001;
    v68 = v48;
    do
    {
      if (v67)
        v69 = (id)MEMORY[0x24BD056B8](v65, v48);
      else
        v69 = *(id *)(v48 + 8 * (_QWORD)v65 + 32);
      v70 = v69;
      v71 = objc_msgSend(v69, sel_integerValue);

      v153[0] = v66;
      v73 = v66[2];
      v72 = v66[3];
      v74 = v66;
      if (v73 >= v72 >> 1)
      {
        sub_249DB677C(v72 > 1, v73 + 1, 1);
        v74 = v153[0];
      }
      v65 = (char *)v65 + 1;
      v74[2] = v73 + 1;
      v74[v73 + 4] = v71;
      v66 = v74;
      v48 = v68;
    }
    while (v131 != v65);
    v125 = v74;
    swift_bridgeObjectRelease();

    v25 = v140;
LABEL_50:
    v75 = 3;
    v76 = (uint64_t *)&unk_251B5A8C0;
    v126 = MEMORY[0x24BEE4AE0] + 8;
    do
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v78 = *(v76 - 1);
        v77 = *v76;
        swift_bridgeObjectRetain_n();
        v79 = sub_249DB7D8C(v78, v77);
        if ((v80 & 1) != 0)
        {
          v81 = *(id *)(*(_QWORD *)(v38 + 56) + 8 * v79);
          swift_bridgeObjectRelease();
          v82 = objc_msgSend(v81, sel_multiArrayConstraint);
          if (v82)
          {
            v128 = v78;
            v130 = (char *)v81;
            v140 = v25;
            v83 = v82;
            v84 = objc_msgSend(v82, sel_shape);
            sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
            sub_249F1F544();

            v129 = v83;
            v85 = objc_msgSend(v83, sel_dataType);
            v131 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
            v86 = (void *)sub_249F1F538();
            swift_bridgeObjectRelease();
            v153[0] = 0;
            v87 = objc_msgSend(v131, sel_initWithShape_dataType_error_, v86, v85, v153);

            if (!v87)
            {
              v118 = v153[0];
              sub_249F1E710();

              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

LABEL_75:
              v120 = v137;
              v121 = v134;
              sub_249DCC2FC(v135, &qword_2578D7E10);
              (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v136);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            v88 = v153[0];
            v89 = v140;
            sub_249F1F7CC();
            v90 = v139;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v153[0] = v90;
            v92 = (uint64_t)v87;
            v25 = v89;
            v38 = v132;
            sub_249ED8A6C(v92, v128, v77, isUniquelyReferenced_nonNull_native);
            v139 = v153[0];

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v76 += 2;
      --v75;
    }
    while (v75);
    v93 = 2;
    v94 = v137;
    v95 = (uint64_t *)&unk_251B5A910;
    v128 = MEMORY[0x24BEE4AE0] + 8;
    do
    {
      if (*(_QWORD *)(v38 + 16))
      {
        v97 = *(v95 - 1);
        v96 = *v95;
        swift_bridgeObjectRetain_n();
        v98 = sub_249DB7D8C(v97, v96);
        if ((v99 & 1) != 0)
        {
          v100 = *(id *)(*(_QWORD *)(v38 + 56) + 8 * v98);
          swift_bridgeObjectRelease();
          v101 = objc_msgSend(v100, sel_multiArrayConstraint);
          if (v101)
          {
            v130 = (char *)v100;
            v140 = v25;
            v102 = v101;
            v103 = objc_msgSend(v101, sel_shape);
            sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
            sub_249F1F544();

            v129 = v102;
            v104 = objc_msgSend(v102, sel_dataType);
            v131 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
            v105 = (void *)sub_249F1F538();
            swift_bridgeObjectRelease();
            v153[0] = 0;
            v106 = objc_msgSend(v131, sel_initWithShape_dataType_error_, v105, v104, v153);

            if (!v106)
            {
              v119 = v153[0];
              sub_249F1E710();

              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_75;
            }
            v107 = v153[0];
            v108 = v140;
            sub_249F1F7CC();
            v109 = v133;
            v110 = swift_isUniquelyReferenced_nonNull_native();
            v153[0] = v109;
            v111 = (uint64_t)v106;
            v25 = v108;
            v38 = v132;
            sub_249ED8A6C(v111, v97, v96, v110);
            v133 = v153[0];

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v94 = v137;
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v95 += 2;
      --v93;
    }
    while (v93);
    swift_bridgeObjectRelease();
    v112 = objc_msgSend(v127, sel_inputDescriptionsByName);
    v113 = sub_249F1F208();

    v19 = v139;
    v21 = v133;
    v114 = v124;
    if (*(_QWORD *)(v113 + 16) && (v115 = sub_249DB7D8C(0x6C6163735F6D636CLL, 0xE900000000000065), (v116 & 1) != 0))
    {
      v117 = *(id *)(*(_QWORD *)(v113 + 56) + 8 * v115);
      v16 = 1;
    }
    else
    {
      v16 = 0;
      v117 = 0;
    }
    swift_bridgeObjectRelease();

    sub_249DCC2FC(v135, &qword_2578D7E10);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v134, v136);

    v18 = v123;
    v17 = v125;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_249EC4590@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  unint64_t v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[2];
  unint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  char *v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  char *v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  _OWORD v91[11];
  char v92;
  unint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  uint64_t v107;

  LODWORD(v68) = a4;
  v72 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v77 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v73 = (char *)v67 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v67 - v13;
  v15 = sub_249F1E7F4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v75 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v67 - v19;
  v69 = a2;
  objc_msgSend(a2, sel_copy);
  sub_249F1F9F4();
  swift_unknownObjectRelease();
  sub_249D9D9F4(0, &qword_2578DDF98);
  swift_dynamicCast();
  v21 = (void *)v78;
  objc_msgSend((id)v78, sel_setExperimentalMLE5EngineUsage_, 2);
  v70 = a3;
  sub_249EC2668(a3, (uint64_t)v14);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v22 = v76(v14, 1, v15);
  v107 = v16;
  if (v22 == 1)
  {
    v23 = sub_249DCC2FC((uint64_t)v14, &qword_2578D7E10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v14, v15);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFA0);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD98);
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_249F21770;
    v28 = (_QWORD *)(v27 + v26);
    v29 = v27 + v26 + *(int *)(v24 + 48);
    *v28 = 1634889580;
    v28[1] = 0xE400000000000000;
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v29, v20, v15);
    sub_249EAF750(v27);
    v30 = (void *)sub_249F1F1F0();
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setE5rtMutableMILWeightURLs_, v30);

    v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
  }
  if (*(_QWORD *)(a1 + 16) == 1)
    v31 = &unk_251B5A928;
  else
    v31 = &unk_251B5A960;
  MEMORY[0x24BDAC7A8](v23);
  v71 = v21;
  v67[-2] = v21;
  v67[-1] = v31;
  v32 = swift_bridgeObjectRetain();
  v33 = v74;
  v34 = sub_249EBB5AC(v32, (void (*)(_QWORD, char *))sub_249EC59DC, (uint64_t)&v67[-4]);
  v35 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_249F1FBEC();
    v36 = result;
  }
  else
  {
    v36 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v38 = v107;
  v39 = v77;
  if (!v36)
  {
    v68 = v34;
    swift_bridgeObjectRelease();
    v44 = a1;
    v45 = *(_QWORD *)(a1 + 16);
    if (v45)
    {
      v46 = v44 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      v72 = *(_QWORD *)(v38 + 72);
      v74 = *(void (**)(_QWORD, _QWORD, _QWORD))(v38 + 16);
      v67[1] = v44;
      swift_bridgeObjectRetain();
      v47 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v73 = (char *)v15;
      while (1)
      {
        v74(v39, v46, v15);
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
        v48(v39, 0, 1, v15);
        if (v76(v39, 1, v15) == 1)
          break;
        v49 = v75;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v75, v39, v15);
        v50 = sub_249F1E7B8();
        v51 = v38;
        v52 = v50;
        v54 = v53;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v47 = sub_249F0CBA8(0, v47[2] + 1, 1, v47);
        v56 = v47[2];
        v55 = v47[3];
        if (v56 >= v55 >> 1)
          v47 = sub_249F0CBA8((_QWORD *)(v55 > 1), v56 + 1, 1, v47);
        v47[2] = v56 + 1;
        v57 = &v47[2 * v56];
        v57[4] = v52;
        v57[5] = v54;
        v15 = (uint64_t)v73;
        v46 += v72;
        --v45;
        v38 = v107;
        v39 = v77;
        if (!v45)
          goto LABEL_27;
      }
      v43 = v69;
      v42 = v70;
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
      swift_bridgeObjectRetain();
      v47 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_27:
      v48(v39, 1, 1, v15);
      v43 = v69;
      v42 = v70;
    }
    swift_bridgeObjectRelease_n();
    sub_249EB70B4();
    swift_allocError();
    *(_QWORD *)v66 = v47;
    *(_QWORD *)(v66 + 8) = 0;
    *(_BYTE *)(v66 + 16) = 3;
    swift_willThrow();
LABEL_29:

    sub_249DCC2FC(v42, &qword_2578D7E10);
    return swift_bridgeObjectRelease();
  }
  if ((v34 & 0xC000000000000001) != 0)
  {
    v40 = MEMORY[0x24BD056B8](0, v34);
    goto LABEL_13;
  }
  if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v40 = *(_QWORD *)(v34 + 32);
    swift_retain();
LABEL_13:
    swift_bridgeObjectRelease();
    v41 = (uint64_t)v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v73, v40 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v41, 0, 1, v15);
    sub_249EC3628(v41, (uint64_t)&v95);
    if (!v35)
    {
      swift_release();

      sub_249DCC2FC(v70, &qword_2578D7E10);
      v86 = v103;
      v87 = v104;
      v88 = v105;
      LOBYTE(v89) = v106;
      v82 = v99;
      v83 = v100;
      v84 = v101;
      v85 = v102;
      v78 = v95;
      v79 = v96;
      v80 = v97;
      v81 = v98;
      *((_QWORD *)&v89 + 1) = v34;
      v58 = v68;
      v90 = v68;
      sub_249EB6DF4((uint64_t)&v78);
      swift_bridgeObjectRelease();
      v91[8] = v103;
      v91[9] = v104;
      v91[10] = v105;
      v92 = v106;
      v91[4] = v99;
      v91[5] = v100;
      v91[6] = v101;
      v91[7] = v102;
      v91[0] = v95;
      v91[1] = v96;
      v91[2] = v97;
      v91[3] = v98;
      v93 = v34;
      v94 = v58;
      result = sub_249EB6FC0((uint64_t)v91);
      v59 = v89;
      v60 = v72;
      *(_OWORD *)(v72 + 160) = v88;
      *(_OWORD *)(v60 + 176) = v59;
      *(_BYTE *)(v60 + 192) = v90;
      v61 = v85;
      *(_OWORD *)(v60 + 96) = v84;
      *(_OWORD *)(v60 + 112) = v61;
      v62 = v87;
      *(_OWORD *)(v60 + 128) = v86;
      *(_OWORD *)(v60 + 144) = v62;
      v63 = v81;
      *(_OWORD *)(v60 + 32) = v80;
      *(_OWORD *)(v60 + 48) = v63;
      v64 = v83;
      *(_OWORD *)(v60 + 64) = v82;
      *(_OWORD *)(v60 + 80) = v64;
      v65 = v79;
      *(_OWORD *)v60 = v78;
      *(_OWORD *)(v60 + 16) = v65;
      return result;
    }
    swift_release();
    swift_bridgeObjectRelease();
    v43 = v69;
    v42 = v70;
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t destroy for AppleDiffusionUnet()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppleDiffusionUnet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v14;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionUnet(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  return a1;
}

__n128 __swift_memcpy193_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AppleDiffusionUnet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionUnet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 193))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionUnet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 192) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 193) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 193) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionUnet()
{
  return &type metadata for AppleDiffusionUnet;
}

uint64_t destroy for AppleDiffusionUnet.Interface()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppleDiffusionUnet.Interface(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v13;
  v14 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v14;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionUnet.Interface(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

__n128 __swift_memcpy177_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for AppleDiffusionUnet.Interface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionUnet.Interface(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 177))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionUnet.Interface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionUnet.Interface()
{
  return &type metadata for AppleDiffusionUnet.Interface;
}

void destroy for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration(id *a1)
{

}

uint64_t initializeWithCopy for AppleDiffusionUnet.IPAInputs(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionUnet.IPAInputs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for AppleDiffusionUnet.IPAInputs(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionUnet.IPAInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionUnet.IPAInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionUnet.IPAInputs()
{
  return &type metadata for AppleDiffusionUnet.IPAInputs;
}

uint64_t sub_249EC59DC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_249EC0F0C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_249EC59E4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_249EC5ACC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_249EC5BB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_249EC5BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_249DAFCF8;
  v5[16] = a1;
  v5[17] = v4;
  return swift_task_switch();
}

id sub_249EC5C38(id result, void *a2)
{
  id v2;

  if (a2)
  {
    v2 = result;
    return a2;
  }
  return result;
}

uint64_t sub_249EC5C64(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

id sub_249EC5C8C@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_249EC2584(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_249EC5CA4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_249EC24F0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_249EC5CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_249EC5D04@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_249EC5C8C(a1, a2);
}

void sub_249EC5D18(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  unint64_t v12;
  char v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33[5];
  __int128 v34;
  __int128 v35;

  if (!MEMORY[0x24BDFD200])
    return;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x8000000249F38360;
  v3 = sub_249F1E7AC();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  sub_249DAE8D4(inited);
  v5 = (void *)sub_249F1F304();
  v6 = (void *)sub_249F1F1F0();
  swift_bridgeObjectRelease();
  v7 = (id)sendAneSessionSignal();

  if (!v7)
    return;
  v8 = sub_249F1F208();

  v31 = (id)0xD000000000000016;
  v32 = 0x8000000249F39270;
  sub_249F1FA3C();
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_249DB7E78((uint64_t)v33), (v10 & 1) != 0))
  {
    sub_249DCA7E4(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_249DCA6C4((uint64_t)v33);
  if (!*((_QWORD *)&v35 + 1))
  {
    swift_bridgeObjectRelease();
    sub_249E36D34((uint64_t)&v34);
    return;
  }
  sub_249E4769C();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v11 = objc_msgSend(v31, sel_integerValue);

  v31 = (id)0xD000000000000013;
  v32 = 0x8000000249F39290;
  sub_249F1FA3C();
  if (*(_QWORD *)(v8 + 16) && (v12 = sub_249DB7E78((uint64_t)v33), (v13 & 1) != 0))
  {
    sub_249DCA7E4(*(_QWORD *)(v8 + 56) + 32 * v12, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_249DCA6C4((uint64_t)v33);
  if (!*((_QWORD *)&v35 + 1))
  {
    sub_249E36D34((uint64_t)&v34);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    v16 = 0xE500000000000000;
    v30 = 0x3E6C696E3CLL;
    goto LABEL_20;
  }
  v14 = objc_msgSend(v31, sel_integerValue);

  v33[0] = (uint64_t)v14;
  v30 = sub_249F1FE08();
  v16 = v15;
LABEL_20:
  if (qword_2578DDA10 != -1)
    swift_once();
  v17 = sub_249F1EF38();
  __swift_project_value_buffer(v17, (uint64_t)qword_2578FF458);
  v18 = sub_249F1E7F4();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  swift_bridgeObjectRetain();
  v22 = sub_249F1EF20();
  v23 = sub_249F1F82C();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v29[1] = v29;
    v26 = v25;
    v33[0] = v25;
    *(_DWORD *)v24 = 134218498;
    *(_QWORD *)&v34 = v11;
    sub_249F1F9AC();
    *(_WORD *)(v24 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v34 = sub_249E68CA8(v30, v16, v33);
    sub_249F1F9AC();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 22) = 2082;
    v27 = sub_249F1E7AC();
    *(_QWORD *)&v34 = sub_249E68CA8(v27, v28, v33);
    sub_249F1F9AC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    _os_log_impl(&dword_249D98000, v22, v23, "ANE Session resident pages: %ld / %{public}s for asset at %{public}s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v26, -1, -1);
    MEMORY[0x24BD06618](v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }

}

uint64_t DiffusionBasePipelineProtocol.canSafetyCheck.getter()
{
  return 0;
}

uint64_t DiffusionBasePipeline.init(textEncoder:unet:decoder:encoder:controlNet:safetyChecker:reduceMemory:useMultilingualTextEncoder:script:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, char a13)
{
  uint64_t result;

  result = sub_249D9E174(a1, a9);
  *(_QWORD *)(a9 + 40) = a2;
  *(_QWORD *)(a9 + 48) = a3;
  *(_QWORD *)(a9 + 56) = a4;
  *(_QWORD *)(a9 + 64) = a5;
  *(_QWORD *)(a9 + 72) = a6;
  *(_QWORD *)(a9 + 80) = a7;
  *(_QWORD *)(a9 + 88) = a10;
  *(_QWORD *)(a9 + 96) = a8;
  *(_BYTE *)(a9 + 104) = a11;
  *(_BYTE *)(a9 + 105) = a12;
  *(_BYTE *)(a9 + 106) = a13;
  return result;
}

uint64_t DiffusionBasePipeline.init(textEncoder:unet:decoder:encoder:controlNet:safetyChecker:reduceMemory:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  uint64_t result;

  *(_WORD *)(a9 + 105) = 768;
  result = sub_249D9E174(a1, a9);
  *(_QWORD *)(a9 + 40) = a2;
  *(_QWORD *)(a9 + 48) = a3;
  *(_QWORD *)(a9 + 56) = a4;
  *(_QWORD *)(a9 + 64) = a5;
  *(_QWORD *)(a9 + 72) = a6;
  *(_QWORD *)(a9 + 80) = a7;
  *(_QWORD *)(a9 + 88) = a10;
  *(_QWORD *)(a9 + 96) = a8;
  *(_BYTE *)(a9 + 104) = a11;
  return result;
}

uint64_t DiffusionBaseScheduler.hash(into:)(uint64_t a1, unsigned __int16 a2)
{
  if (a2 >> 14)
  {
    if (a2 >> 14 == 1)
      sub_249F1FF70();
  }
  else
  {
    sub_249F1FF70();
    sub_249F1FF70();
  }
  return sub_249F1FF70();
}

uint64_t DiffusionBaseScheduler.hashValue.getter(unsigned __int16 a1)
{
  sub_249F1FF64();
  if (a1 >> 14)
  {
    if (a1 >> 14 == 1)
      sub_249F1FF70();
  }
  else
  {
    sub_249F1FF70();
    sub_249F1FF70();
  }
  sub_249F1FF70();
  return sub_249F1FFA0();
}

uint64_t sub_249EC64BC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return _s13DiffusionBase0aB9SchedulerO21__derived_enum_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_249EC64C8()
{
  unsigned __int16 *v0;
  unsigned int v1;

  v1 = *v0;
  sub_249F1FF64();
  if (v1 >> 14)
  {
    if (v1 >> 14 == 1)
      sub_249F1FF70();
  }
  else
  {
    sub_249F1FF70();
    sub_249F1FF70();
  }
  sub_249F1FF70();
  return sub_249F1FFA0();
}

uint64_t sub_249EC655C()
{
  unsigned __int16 *v0;
  int v1;

  v1 = *v0 >> 14;
  if (v1)
  {
    if (v1 == 1)
      sub_249F1FF70();
  }
  else
  {
    sub_249F1FF70();
    sub_249F1FF70();
  }
  return sub_249F1FF70();
}

uint64_t sub_249EC65CC()
{
  unsigned __int16 *v0;
  unsigned int v1;

  v1 = *v0;
  sub_249F1FF64();
  if (v1 >> 14)
  {
    if (v1 >> 14 == 1)
      sub_249F1FF70();
  }
  else
  {
    sub_249F1FF70();
    sub_249F1FF70();
  }
  sub_249F1FF70();
  return sub_249F1FFA0();
}

BOOL static DiffusionBaseRNG.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t DiffusionBaseRNG.hash(into:)()
{
  return sub_249F1FF70();
}

uint64_t DiffusionBaseRNG.hashValue.getter()
{
  sub_249F1FF64();
  sub_249F1FF70();
  return sub_249F1FFA0();
}

uint64_t PipelineError.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_249EC6710
                                                                     + 4 * asc_249F30D50[a1]))(0xD000000000000011, 0x8000000249F38C90);
}

uint64_t sub_249EC6710(uint64_t a1)
{
  return a1 + 18;
}

void sub_249EC6748(char *a1)
{
  sub_249F13384(*a1);
}

void sub_249EC6754()
{
  char *v0;

  sub_249EF80F8(*v0);
}

void sub_249EC675C(uint64_t a1)
{
  char *v1;

  sub_249F11044(a1, *v1);
}

void sub_249EC6764(uint64_t a1)
{
  char *v1;

  sub_249EF84E0(a1, *v1);
}

uint64_t sub_249EC676C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase13PipelineErrorO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_249EC6798@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PipelineError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL DiffusionBasePipeline.canSafetyCheck.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88) != 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DiffusionBasePipeline.loadResources()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (_QWORD *)v0;
  if (*(_BYTE *)(v0 + 104) == 1)
  {
    DiffusionBasePipeline.prewarmResources()();
  }
  else
  {
    Unet.loadResources()();
    if (!v2)
    {
      v4 = *(_QWORD *)(v0 + 24);
      v3 = *(_QWORD *)(v0 + 32);
      __swift_project_boxed_opaque_existential_1(v1, v1[3]);
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v4);
      v5 = v1[7];
      v6 = v1[8];
      ManagedMLModel.loadResources()();
      if (!v7)
      {
        if (v5)
        {
          ManagedMLModel.loadResources()();
          if (v8)

        }
        if (v6)
        {
          ManagedMLModel.loadResources()();
          if (v9)

        }
        if (!v1[9] || (ManagedMLModel.loadResources()(), !v10))
        {
          if (!v1[12] || (ControlNet.loadResources()(), !v11))
          {
            if (v1[11])
              ManagedMLModel.loadResources()();
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DiffusionBasePipeline.prewarmResources()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v0;
  v3 = v0[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  sub_249F17DD4(v3, *(_QWORD *)(v4 + 8));
  if (!v1)
  {
    v5 = v2[5];
    if (v5 >> 62)
      goto LABEL_47;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v6; v6 = sub_249F1FBEC())
    {
      v7 = 4;
      while (1)
      {
        v8 = v7 - 4;
        if ((v5 & 0xC000000000000001) == 0)
          break;
        MEMORY[0x24BD056B8](v7 - 4, v5);
        v9 = __OFADD__(v8, 1);
        v10 = v7 - 3;
        if (v9)
          goto LABEL_46;
LABEL_10:
        ManagedMLModel.loadResources()();
        if (v11)
        {
LABEL_44:
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        ManagedMLModel.unloadResources()();
        swift_release();
        ++v7;
        if (v10 == v6)
          goto LABEL_12;
      }
      swift_retain();
      v9 = __OFADD__(v8, 1);
      v10 = v7 - 3;
      if (!v9)
        goto LABEL_10;
LABEL_46:
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    v12 = v2[7];
    v13 = v2[8];
    swift_retain();
    swift_retain();
    swift_retain();
    ManagedMLModel.loadResources()();
    if (v14)
    {
      swift_release();
      swift_release();
      goto LABEL_43;
    }
    if (v12)
    {
      ManagedMLModel.loadResources()();
      if (v15)

    }
    if (v13)
    {
      ManagedMLModel.loadResources()();
      if (v16)

    }
    ManagedMLModel.unloadResources()();
    if (v12)
      ManagedMLModel.unloadResources()();
    if (v13)
      ManagedMLModel.unloadResources()();
    swift_release();
    swift_release();
    swift_release();
    if (v2[9])
    {
      v17 = (void *)v2[10];
      swift_retain();
      v18 = v17;
      ManagedMLModel.loadResources()();
      if (v19)
      {

        goto LABEL_43;
      }
      ManagedMLModel.unloadResources()();

      swift_release();
    }
    v20 = v2[12];
    if (v20)
    {
      if (v20 >> 62)
        goto LABEL_50;
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v21; v21 = sub_249F1FBEC())
      {
        v22 = 4;
        while (1)
        {
          v23 = v22 - 4;
          if ((v20 & 0xC000000000000001) == 0)
            break;
          MEMORY[0x24BD056B8](v22 - 4, v20);
          v9 = __OFADD__(v23, 1);
          v24 = v22 - 3;
          if (v9)
            goto LABEL_49;
LABEL_37:
          ManagedMLModel.loadResources()();
          if (v25)
            goto LABEL_44;
          ManagedMLModel.unloadResources()();
          swift_release();
          ++v22;
          if (v24 == v21)
            goto LABEL_39;
        }
        swift_retain();
        v9 = __OFADD__(v23, 1);
        v24 = v22 - 3;
        if (!v9)
          goto LABEL_37;
LABEL_49:
        __break(1u);
LABEL_50:
        swift_bridgeObjectRetain();
      }
LABEL_39:
      swift_bridgeObjectRelease();
    }
    if (!v2[11])
      return;
    swift_retain();
    ManagedMLModel.loadResources()();
    if (!v26)
      ManagedMLModel.unloadResources()();
LABEL_43:
    swift_release();
  }
}

Swift::Void __swiftcall DiffusionBasePipeline.unloadResources()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;

  v1 = v0;
  v3 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(v3);
  v4 = v1[5];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_249F1FBEC();
    if (!v5)
      goto LABEL_10;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5)
      goto LABEL_10;
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_26;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      MEMORY[0x24BD056B8](i, v4);
    else
      swift_retain();
    ManagedMLModel.unloadResources()();
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  v7 = v1[7];
  v8 = v1[8];
  ManagedMLModel.unloadResources()();
  if (v7)
    ManagedMLModel.unloadResources()();
  if (v8)
    ManagedMLModel.unloadResources()();
  if (v1[9])
    ManagedMLModel.unloadResources()();
  v4 = v1[12];
  if (!v4)
    goto LABEL_28;
  if (v4 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    v9 = sub_249F1FBEC();
    if (v9)
      goto LABEL_19;
    goto LABEL_27;
  }
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v9)
  {
LABEL_19:
    if (v9 < 1)
    {
      __break(1u);
      return;
    }
    for (j = 0; j != v9; ++j)
    {
      if ((v4 & 0xC000000000000001) != 0)
        MEMORY[0x24BD056B8](j, v4);
      else
        swift_retain();
      ManagedMLModel.unloadResources()();
      swift_release();
    }
  }
LABEL_27:
  swift_bridgeObjectRelease();
LABEL_28:
  if (v1[11])
    ManagedMLModel.unloadResources()();
}

uint64_t DiffusionBasePipeline.generateImages(configuration:requestIdentifier:progressHandler:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t result;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  _BOOL4 v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  int32x2_t v94;
  int32x2_t v95;
  void *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, char *, uint64_t);
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int128 v107;
  uint64_t (*v108)(unint64_t, _QWORD, _QWORD);
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  int64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(uint64_t, char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  char *v141;
  unint64_t v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  BOOL v155;
  char *v156;
  _QWORD *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t i;
  uint64_t v169;
  char *v170;
  char *v171;
  void (**v172)(uint64_t, uint64_t);
  _QWORD *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t j;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  int *v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t (*v193)(_QWORD *);
  uint64_t v194;
  char *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  unint64_t v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;

  v194 = a4;
  v193 = a3;
  v192 = type metadata accessor for PipelineProgress();
  MEMORY[0x24BDAC7A8](v192);
  v195 = (char *)&v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  MEMORY[0x24BDAC7A8](v7);
  v213 = (uint64_t)&v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v225 = *(_QWORD *)(v223 - 8);
  v9 = MEMORY[0x24BDAC7A8](v223);
  v209 = (char *)&v179 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v219 = (char *)&v179 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v210 = (char *)&v179 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v216 = (char *)&v179 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v217 = (char *)&v179 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v212 = (char *)&v179 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v221 = (char *)&v179 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v179 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v179 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v179 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v199 = (char *)&v179 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v179 - v34;
  v36 = v4[3];
  v37 = v4[4];
  v196 = v4;
  v38 = (void (*)(char *, uint64_t))__swift_project_boxed_opaque_existential_1(v4, v36);
  v222 = *(_OWORD *)(a1 + 24);
  v39 = v222;
  v198 = a1;
  v40 = __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v222);
  v228 = v222;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v227);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(boxed_opaque_existential_1, v40, v39);
  v42 = v224;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v37 + 16))(&v227, v36, v37);
  if (v42)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
    return (uint64_t)v38;
  }
  v218 = v25;
  v191 = v28;
  v189 = v31;
  v190 = v35;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
  v43 = v196;
  v44 = v196[3];
  v45 = v196[4];
  __swift_project_boxed_opaque_existential_1(v196, v44);
  v224 = *(_OWORD *)(v198 + 64);
  v46 = v224;
  v47 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v198 + 40), v224);
  v228 = v224;
  v48 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v227);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v48, v47, v46);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v45 + 16))(&v227, v44, v45);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
  v50 = v225;
  v51 = v223;
  if (*((_BYTE *)v43 + 104) == 1)
  {
    v53 = v43[3];
    v52 = v43[4];
    __swift_project_boxed_opaque_existential_1(v43, v53);
    (*(void (**)(uint64_t))(*(_QWORD *)(v52 + 8) + 16))(v53);
  }
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
  v55 = *(_QWORD *)(v50 + 72);
  v56 = *(unsigned __int8 *)(v50 + 80);
  v57 = (v56 + 32) & ~v56;
  v208 = v54;
  v207 = v57 + 2 * v55;
  v206 = v56 | 7;
  v58 = swift_allocObject();
  v205 = xmmword_249F21910;
  *(_OWORD *)(v58 + 16) = xmmword_249F21910;
  v220 = v57;
  v59 = v58 + v57;
  v60 = *(_QWORD *)(v50 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v60)(v59, v199, v51);
  *(_QWORD *)&v222 = v55;
  ((void (*)(uint64_t, char *, uint64_t))v60)(v59 + v55, v190, v51);
  *(_QWORD *)&v227 = v58;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
  v62 = sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
  v63 = sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v64 = v189;
  v204 = v61;
  v203 = v62;
  v211 = v63;
  sub_249F1EFA4();
  v65 = *((_BYTE *)v43 + 105) == 1;
  v66 = (unint64_t)v191;
  *(_QWORD *)&v224 = v60;
  if (v65)
    ((void (*)(char *, char *, uint64_t))v60)(v191, v64, v51);
  else
    sub_249EC85C4();
  v67 = type metadata accessor for PipelineConfiguration(0);
  v188 = (int *)v67;
  v68 = v198;
  v184 = *(int *)(v67 + 68);
  if ((*(_QWORD *)(v198 + v184) & 0x8000000000000000) != 0)
    goto LABEL_47;
  MEMORY[0x24BDAC7A8](v67);
  *(&v179 - 2) = v68;
  *(&v179 - 1) = (uint64_t)v43;
  v70 = sub_249EB3BEC((uint64_t)sub_249EC9740, (uint64_t)(&v179 - 4), 0, v69);
  if (!*(_QWORD *)(v70 + 16))
    goto LABEL_48;
  v71 = v70 + 32;
  v72 = v70;
  sub_249D9E1E4(v70 + 32, (uint64_t)&v227);
  v73 = sub_249EC8AB0(v68, &v227);
  v182 = v71;
  v183 = v72;
  v74 = (_QWORD *)v73;
  v197 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
  v75 = v74[2];
  v215 = v74;
  if (v75)
  {
    *(_QWORD *)&v227 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_249EB5C40(0, v75, 0);
    v76 = (char *)v74 + v220;
    v66 = v227;
    v77 = v212;
    v78 = v218;
    do
    {
      v79 = v221;
      v80 = (void (*)(char *, char *, uint64_t))v224;
      ((void (*)(char *, char *, uint64_t))v224)(v221, v76, v223);
      v80(v77, v79, v223);
      sub_249F1F058();
      v81 = v79;
      v51 = v223;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v81, v223);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_249EB5C40(0, *(_QWORD *)(v66 + 16) + 1, 1);
        v66 = v227;
      }
      v82 = v66;
      v83 = *(_QWORD *)(v66 + 16);
      v84 = *(_QWORD *)(v82 + 24);
      v77 = v212;
      if (v83 >= v84 >> 1)
      {
        sub_249EB5C40(v84 > 1, v83 + 1, 1);
        v77 = v212;
        v82 = v227;
      }
      *(_QWORD *)(v82 + 16) = v83 + 1;
      v85 = v222;
      v86 = v82 + v220 + v83 * v222;
      v87 = v225;
      (*(void (**)(unint64_t, char *, uint64_t))(v225 + 32))(v86, v78, v51);
      v76 += v85;
      v50 = v87;
      --v75;
      v66 = v82;
    }
    while (v75);
    swift_bridgeObjectRelease();
  }
  else
  {
    v66 = MEMORY[0x24BEE4AF8];
  }
  v62 = v220;
  v88 = v198;
  if ((v43[13] & 1) != 0 && v43[9])
  {
    ManagedMLModel.unloadResources()();
    v88 = v198;
  }
  if (*(unsigned __int8 *)(v88 + v188[13] + 8) == 255)
  {
    LODWORD(v60) = 0;
    v90 = 1;
  }
  else
  {
    v89 = *(float *)(v88 + v188[15]);
    if (v89 < 1.0)
      LODWORD(v60) = *(_DWORD *)(v88 + v188[15]);
    else
      LODWORD(v60) = 0;
    v90 = v89 >= 1.0;
  }
  LODWORD(v202) = v90;
  v68 = *(_QWORD *)(v88 + v188[21]);
  if (v68 >> 62)
    goto LABEL_49;
  v91 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v91; v91 = sub_249F1FBEC())
  {
    LODWORD(v201) = v60;
    *(_QWORD *)&v227 = MEMORY[0x24BEE4AF8];
    sub_249EB5C40(0, v91 & ~((uint64_t)v91 >> 63), 0);
    if ((v91 & 0x8000000000000000) != 0)
      goto LABEL_120;
    v92 = 0;
    v60 = v227;
    v214 = v68 & 0xC000000000000001;
    v218 = (char *)v66;
    v223 = v68;
    while (v91 != v92)
    {
      if (v214)
        v93 = (id)MEMORY[0x24BD056B8](v92, v68);
      else
        v93 = *(id *)(v68 + 8 * v92 + 32);
      v96 = v93;
      v94.i32[0] = 0;
      v95.i32[0] = 1.0;
      v97 = v216;
      v98 = v197;
      CGImageRef.planarRGBShapedArray(minValue:maxValue:)(v94, v95);
      v197 = v98;
      if (v98)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        v38 = *(void (**)(char *, uint64_t))(v50 + 8);
        v38(v191, v51);
        v38(v189, v51);
        v38(v199, v51);
        v38(v190, v51);
        swift_bridgeObjectRelease();
        return (uint64_t)v38;
      }
      v99 = swift_allocObject();
      v100 = v62;
      v101 = v99;
      *(_OWORD *)(v99 + 16) = v205;
      v102 = v99 + v100;
      v103 = (void (*)(uint64_t, char *, uint64_t))v224;
      ((void (*)(uint64_t, char *, uint64_t))v224)(v99 + v100, v97, v51);
      v104 = v102 + v222;
      v50 = v225;
      v103(v104, v97, v51);
      v226 = v101;
      sub_249F1EFA4();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v97, v51);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_249EB5C40(0, *(_QWORD *)(v60 + 16) + 1, 1);
        v60 = v227;
      }
      v106 = *(_QWORD *)(v60 + 16);
      v105 = *(_QWORD *)(v60 + 24);
      v68 = v223;
      if (v106 >= v105 >> 1)
      {
        sub_249EB5C40(v105 > 1, v106 + 1, 1);
        v60 = v227;
      }
      ++v92;
      *(_QWORD *)(v60 + 16) = v106 + 1;
      v62 = v220;
      (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v60 + v220 + v106 * v222, v217, v51);
      v66 = (unint64_t)v218;
      if (v91 == v92)
      {
        v185 = v60;
        swift_bridgeObjectRelease();
        LODWORD(v60) = v201;
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v185 = MEMORY[0x24BEE4AF8];
LABEL_51:
  sub_249D9E1E4(v182, (uint64_t)&v227);
  v107 = v228;
  __swift_project_boxed_opaque_existential_1(&v227, v228);
  v108 = *(uint64_t (**)(unint64_t, _QWORD, _QWORD))(*((_QWORD *)&v107 + 1) + 32);
  LOBYTE(v226) = v202;
  v109 = v108(v60 | ((unint64_t)v202 << 32), v107, *((_QWORD *)&v107 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
  v68 = v197;
  v180 = *(_QWORD *)(v109 + 16);
  if (v180)
  {
    v181 = v109 + 32;
    v217 = (char *)(v50 + 8);
    swift_bridgeObjectRetain();
    v110 = 0;
    v187 = v109;
    while (1)
    {
      v197 = v68;
      v218 = (char *)v66;
      if (v110 >= *(_QWORD *)(v109 + 16))
        break;
      v186 = v110;
      v202 = *(_QWORD *)(v181 + 8 * v110);
      v111 = v215;
      v112 = v215[2];
      v113 = v220;
      if (v112)
      {
        *(_QWORD *)&v227 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_249EB5C40(0, v112, 0);
        v114 = (char *)v111 + v113;
        v115 = v222;
        do
        {
          v116 = v51;
          v117 = v221;
          v118 = (void (*)(uint64_t, char *, uint64_t))v224;
          ((void (*)(char *, char *, uint64_t))v224)(v221, v114, v116);
          v119 = swift_allocObject();
          *(_OWORD *)(v119 + 16) = v205;
          v120 = v119 + v113;
          v118(v120, v117, v116);
          v118(v120 + v115, v117, v116);
          v226 = v119;
          sub_249F1EFA4();
          v121 = v117;
          v51 = v116;
          (*(void (**)(char *, uint64_t))v217)(v121, v116);
          v122 = v227;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_249EB5C40(0, *(_QWORD *)(v122 + 16) + 1, 1);
            v122 = v227;
          }
          v124 = *(_QWORD *)(v122 + 16);
          v123 = *(_QWORD *)(v122 + 24);
          if (v124 >= v123 >> 1)
          {
            sub_249EB5C40(v123 > 1, v124 + 1, 1);
            v122 = v227;
          }
          *(_QWORD *)(v122 + 16) = v124 + 1;
          v113 = v220;
          v115 = v222;
          (*(void (**)(unint64_t, char *, uint64_t))(v225 + 32))(v122 + v220 + v124 * v222, v210, v116);
          v114 += v115;
          --v112;
        }
        while (v112);
        swift_bridgeObjectRelease();
        v50 = v225;
      }
      else
      {
        v122 = MEMORY[0x24BEE4AF8];
      }
      v125 = v196;
      v126 = v196[12];
      v91 = v197;
      v127 = v199;
      v128 = (uint64_t)v191;
      if (v126)
      {
        v129 = sub_249EDF870(v122, v202, (uint64_t)v191, v185, v126);
        if (v91)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = *(void (**)(char *, uint64_t))v217;
          (*(void (**)(uint64_t, uint64_t))v217)(v128, v51);
          v38(v189, v51);
          v170 = v127;
          goto LABEL_135;
        }
        v130 = v129;
      }
      else
      {
        v130 = 0;
      }
      v131 = sub_249ED3E00(v122, v202, v128, v130, v125[5]);
      if (v91)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = *(void (**)(char *, uint64_t))v217;
        (*(void (**)(char *, uint64_t))v217)(v191, v51);
        v38(v189, v51);
        v170 = v199;
        goto LABEL_135;
      }
      v132 = v125;
      v133 = v131;
      swift_bridgeObjectRelease();
      v134 = swift_bridgeObjectRelease();
      v135 = v198;
      MEMORY[0x24BDAC7A8](v134);
      *(&v179 - 2) = (uint64_t)v132;
      *((_DWORD *)&v179 - 2) = v136;
      v201 = sub_249EB3D38((void (*)(uint64_t))sub_249EB7870, (uint64_t)(&v179 - 4), v133);
      v66 = 0;
      swift_bridgeObjectRelease();
      v137 = *(_QWORD *)(v135 + v184);
      v68 = (unint64_t)v215;
      if (v137 < 0)
        goto LABEL_117;
      v138 = v220;
      v197 = 0;
      if (v137)
      {
        if ((unint64_t)(v137 - 1) >= *(_QWORD *)(v183 + 16))
          goto LABEL_118;
        if ((unint64_t)(v137 - 1) >= *(_QWORD *)(v201 + 16))
          goto LABEL_119;
        v91 = 0;
        v139 = v182;
        v66 = (unint64_t)v218;
        v200 = v137;
        while (1)
        {
          v223 = v139;
          sub_249D9E1E4(v139, (uint64_t)&v227);
          v140 = v228;
          v215 = __swift_project_boxed_opaque_existential_1(&v227, v228);
          v141 = v221;
          v50 = v68;
          v68 = v224;
          ((void (*)(char *, unint64_t, uint64_t))v224)(v221, v201 + v138, v51);
          v142 = *(_QWORD *)(v50 + 16);
          v216 = (char *)v91;
          if (v91 >= v142)
            break;
          v218 = (char *)v66;
          v214 = v138;
          v66 = (unint64_t)v212;
          ((void (*)(char *, unint64_t, uint64_t))v68)(v212, v50 + v138, v51);
          (*(void (**)(char *, uint64_t, unint64_t, _QWORD, _QWORD))(*((_QWORD *)&v140 + 1) + 80))(v141, v202, v66, v140, *((_QWORD *)&v140 + 1));
          v143 = *(void (**)(char *, uint64_t))v217;
          (*(void (**)(unint64_t, uint64_t))v217)(v66, v51);
          v143(v141, v51);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v50 = sub_249EC94B8(v50);
          v144 = v222;
          v91 = (unint64_t)v216;
          if ((unint64_t)v216 >= *(_QWORD *)(v50 + 16))
            goto LABEL_113;
          v145 = v50;
          v146 = v214;
          v147 = v50 + v214;
          v216 = *(char **)(v225 + 40);
          ((void (*)(unint64_t, char *, uint64_t))v216)(v50 + v214, v219, v51);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
          sub_249D9E1E4(v223, (uint64_t)&v227);
          v148 = v228;
          __swift_project_boxed_opaque_existential_1(&v227, v228);
          v149 = (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)&v148 + 1) + 72))(v148, *((_QWORD *)&v148 + 1));
          v150 = *(_QWORD *)(v149 + 16);
          if (v150)
          {
            v151 = v213;
            ((void (*)(uint64_t, uint64_t, uint64_t))v224)(v213, v149 + v220 + (v150 - 1) * v144, v51);
            v152 = 0;
          }
          else
          {
            v152 = 1;
            v151 = v213;
          }
          v50 = v225;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v225 + 56))(v151, v152, 1, v51);
          swift_bridgeObjectRelease();
          v153 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v151, 1, v51);
          v154 = v151;
          v68 = v145;
          if (v153 == 1)
          {
            v155 = v91 >= *(_QWORD *)(v145 + 16);
            v156 = v209;
            v66 = (unint64_t)v218;
            if (v155)
              goto LABEL_115;
            ((void (*)(char *, unint64_t, uint64_t))v224)(v209, v147, v51);
            sub_249EC975C(v213);
          }
          else
          {
            v156 = v209;
            (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v209, v154, v51);
            v66 = (unint64_t)v218;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v227);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v66 = sub_249EC94B8(v66);
          if (v91 >= *(_QWORD *)(v66 + 16))
            goto LABEL_114;
          ++v91;
          ((void (*)(unint64_t, char *, uint64_t))v216)(v66 + v146, v156, v51);
          v138 = v146 + v144;
          v139 = v223 + 40;
          if (v200 == v91)
            goto LABEL_90;
        }
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
        break;
      }
      v66 = (unint64_t)v218;
LABEL_90:
      swift_bridgeObjectRelease();
      v157 = (_QWORD *)v198;
      v65 = *(_BYTE *)(v198 + v188[23]) == 0;
      v215 = (_QWORD *)v68;
      v91 = v66;
      if (v65)
        v158 = v68;
      else
        v158 = v66;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v228 = &type metadata for DiffusionBasePipeline;
      *((_QWORD *)&v228 + 1) = &protocol witness table for DiffusionBasePipeline;
      *(_QWORD *)&v227 = swift_allocObject();
      sub_249EC9804((uint64_t)v196, v227 + 16);
      __swift_project_boxed_opaque_existential_1(v157, v157[3]);
      v159 = sub_249E14D88();
      v161 = v160;
      v162 = *(_QWORD *)(v187 + 16);
      v163 = v195;
      sub_249DC091C((uint64_t)v157, (uint64_t)&v195[*(int *)(v192 + 36)], type metadata accessor for PipelineConfiguration);
      sub_249D9E174(&v227, (uint64_t)v163);
      v163[5] = v159;
      v163[6] = v161;
      v164 = v186;
      v163[7] = v186;
      v163[8] = v162;
      v163[9] = v158;
      if ((v193(v163) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_249DC05A8((uint64_t)v163, (uint64_t (*)(_QWORD))type metadata accessor for PipelineProgress);
        v38 = (void (*)(char *, uint64_t))MEMORY[0x24BEE4AF8];
        v171 = v190;
        v165 = v199;
        v166 = (uint64_t)v191;
        v172 = (void (**)(uint64_t, uint64_t))v217;
        goto LABEL_137;
      }
      sub_249DC05A8((uint64_t)v163, (uint64_t (*)(_QWORD))type metadata accessor for PipelineProgress);
      v68 = v197;
      v110 = v164 + 1;
      v165 = v199;
      v166 = (uint64_t)v191;
      v66 = v91;
      v109 = v187;
      if (v164 + 1 == v180)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_97;
      }
    }
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v165 = v199;
  v166 = (uint64_t)v191;
LABEL_97:
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v196 + 104) != 1)
  {
    v169 = v198;
    goto LABEL_133;
  }
  v91 = v66;
  v66 = v196[12];
  if (!v66)
  {
    v173 = v196;
    goto LABEL_123;
  }
  if (v66 >> 62)
  {
LABEL_121:
    swift_bridgeObjectRetain();
    result = sub_249F1FBEC();
    v167 = result;
    if (!result)
      goto LABEL_122;
LABEL_101:
    if (v167 < 1)
      goto LABEL_139;
    for (i = 0; i != v167; ++i)
    {
      if ((v66 & 0xC000000000000001) != 0)
        MEMORY[0x24BD056B8](i, v66);
      else
        swift_retain();
      ManagedMLModel.unloadResources()();
      swift_release();
    }
    goto LABEL_122;
  }
  v167 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v167)
    goto LABEL_101;
LABEL_122:
  swift_bridgeObjectRelease();
  v173 = v196;
LABEL_123:
  v174 = v173[5];
  if (v174 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_249F1FBEC();
    v175 = result;
    if (result)
      goto LABEL_125;
LABEL_132:
    swift_bridgeObjectRelease();
    v165 = v199;
    v166 = (uint64_t)v191;
    v169 = v198;
    v66 = v91;
LABEL_133:
    v177 = DiffusionBasePipeline.decodeToImages(_:configuration:)(v66, v169);
    if (v68)
    {
      swift_bridgeObjectRelease();
      v38 = *(void (**)(char *, uint64_t))(v50 + 8);
      v38((char *)v166, v51);
      v38(v189, v51);
      v170 = v165;
LABEL_135:
      v38(v170, v51);
      v38(v190, v51);
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = (void (*)(char *, uint64_t))v177;
      swift_bridgeObjectRelease();
      v172 = (void (**)(uint64_t, uint64_t))(v50 + 8);
      v171 = v190;
LABEL_137:
      v178 = *v172;
      (*v172)(v166, v51);
      v178((uint64_t)v189, v51);
      v178((uint64_t)v165, v51);
      v178((uint64_t)v171, v51);
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v38;
  }
  v175 = *(_QWORD *)((v174 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v175)
    goto LABEL_132;
LABEL_125:
  if (v175 >= 1)
  {
    for (j = 0; j != v175; ++j)
    {
      if ((v174 & 0xC000000000000001) != 0)
        MEMORY[0x24BD056B8](j, v174);
      else
        swift_retain();
      ManagedMLModel.unloadResources()();
      swift_release();
    }
    goto LABEL_132;
  }
  __break(1u);
LABEL_139:
  __break(1u);
  return result;
}

uint64_t sub_249EC85C4()
{
  _QWORD *v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v0 = (_QWORD *)sub_249F1EFE0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_249F234B0;
  v2 = v0[2];
  if (!v2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)(result + 32) = v0[4];
  if (v2 < 3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(_QWORD *)(result + 40) = v0[6];
  *(_QWORD *)(result + 48) = 1;
  *(_QWORD *)(result + 56) = v0[5];
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  result = sub_249F1F0A0();
  v3 = v0[4];
  if ((v3 & 0x8000000000000000) == 0)
  {
    v13 = v0[4];
    if (!v3)
      return swift_bridgeObjectRelease();
    v4 = 0;
    v5 = v0[4];
    v14 = v0;
    while (v4 != v5)
    {
      v6 = v0[5];
      if (v6 < 0)
        goto LABEL_22;
      v16 = v4;
      if (v6)
      {
        v7 = 0;
        v15 = v0[5];
        while (v7 != v6)
        {
          v9 = v0[6];
          if (v9 < 0)
            goto LABEL_20;
          if (v9)
          {
            v10 = 0;
            v17 = v0[6];
            do
            {
              v11 = swift_allocObject();
              *(_OWORD *)(v11 + 16) = xmmword_249F234B0;
              *(_QWORD *)(v11 + 32) = v16;
              *(_QWORD *)(v11 + 40) = v10;
              *(_QWORD *)(v11 + 48) = 0;
              *(_QWORD *)(v11 + 56) = v7;
              v12 = swift_allocObject();
              *(_OWORD *)(v12 + 16) = xmmword_249F22C20;
              *(_QWORD *)(v12 + 32) = v16;
              *(_QWORD *)(v12 + 40) = v7;
              *(_QWORD *)(v12 + 48) = v10;
              sub_249F1F088();
              swift_bridgeObjectRelease();
              result = sub_249F1F094();
              ++v10;
            }
            while (v17 != v10);
          }
          v6 = v15;
          v8 = ++v7 == v15;
          v0 = v14;
          if (v8)
            goto LABEL_6;
        }
        __break(1u);
LABEL_20:
        __break(1u);
        break;
      }
LABEL_6:
      v4 = v16 + 1;
      v5 = v13;
      if (v16 + 1 == v13)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_249EC883C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int *v4;
  int *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned int v16;
  int64_t v17;
  uint64_t v18;
  uint64_t result;
  _UNKNOWN **v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30;
  int v31;
  ValueMetadata *v32;
  _UNKNOWN **v33;

  v4 = (int *)type metadata accessor for PipelineConfiguration(0);
  v5 = v4;
  v6 = *(unsigned __int16 *)(a1 + v4[24]);
  if (!(v6 >> 14))
  {
    v16 = v6 >> 8;
    v17 = *(_QWORD *)(a1 + v4[18]);
    v18 = type metadata accessor for DPMSolverMultistepScheduler();
    swift_allocObject();
    result = DPMSolverMultistepScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:timeStepSpacing:predictionType:)(v17, 1000, 1, v16, 0, 0.00085, 0.012);
    v20 = &protocol witness table for DPMSolverMultistepScheduler;
LABEL_8:
    a2[3] = v18;
    a2[4] = (uint64_t)v20;
    *a2 = result;
    return result;
  }
  if (v6 >> 14 != 1)
  {
    v21 = *(_QWORD *)(a1 + v4[18]);
    v18 = type metadata accessor for PNDMScheduler();
    swift_allocObject();
    result = PNDMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:)(v21, 1000, 1, 0.00085, 0.012);
    v20 = &protocol witness table for PNDMScheduler;
    goto LABEL_8;
  }
  v7 = *(unsigned __int8 *)(a1 + v4[25]);
  v8 = *(unsigned int *)(a1 + v4[19]);
  if (*(_BYTE *)(a1 + v5[25]))
  {
    if (v7 != 1)
    {
      v32 = &type metadata for NvRandomSource;
      v33 = &off_251B5CE18;
      v30 = v8;
      v31 = 0;
      goto LABEL_12;
    }
    v9 = sub_249EBE564(v8);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v32 = &type metadata for TorchRandomSource;
    v33 = &off_251B5C5F0;
  }
  else
  {
    v9 = sub_249EBE564(v8);
    v11 = v22;
    v13 = v23;
    v15 = v24;
    v32 = &type metadata for NumPyRandomSource;
    v33 = &off_251B5C728;
  }
  v25 = swift_allocObject();
  v30 = v25;
  *(_QWORD *)(v25 + 16) = v9;
  *(_QWORD *)(v25 + 24) = v11;
  *(_QWORD *)(v25 + 32) = v13;
  *(_BYTE *)(v25 + 40) = v15 & 1;
LABEL_12:
  v26 = *(_QWORD *)(a1 + v5[18]);
  sub_249D9E1E4((uint64_t)&v30, (uint64_t)v29);
  v27 = type metadata accessor for LCMScheduler();
  swift_allocObject();
  v28 = LCMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:predictionType:generator:)(v26, 1000, 1, 0, (uint64_t)v29, 0.00085, 0.012);
  a2[3] = v27;
  a2[4] = (uint64_t)&protocol witness table for LCMScheduler;
  *a2 = v28;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
}

uint64_t sub_249EC8AB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  float v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  _UNKNOWN **v34;
  ValueMetadata *v35;
  void (*v36)(uint64_t, ValueMetadata *, _UNKNOWN **, double, double);
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  float v43;
  void *v44;
  void *v45;
  void *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t (**v53)(uint64_t, uint64_t);
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  ValueMetadata *v68;
  _UNKNOWN **v69;
  uint64_t v70;

  v60 = a1;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDF0);
  MEMORY[0x24BDAC7A8](v63);
  v62 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v64 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v55 - v9;
  v58 = v2;
  Unet.latentSampleShape.getter(*(_QWORD *)(v2 + 40));
  v11 = v10;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v11[2])
      goto LABEL_3;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (uint64_t)sub_249EC947C(v11);
  v11 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 16))
    goto LABEL_25;
LABEL_3:
  v56 = v8;
  v11[4] = 1;
  v13 = a2[3];
  v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  v15 = (*(float (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
  v16 = (int *)type metadata accessor for PipelineConfiguration(0);
  v17 = v60;
  v18 = *(unsigned __int8 *)(v60 + v16[25]);
  result = *(unsigned int *)(v60 + v16[19]);
  v65 = v11;
  v55 = a2;
  if (!v18)
  {
    v19 = v16;
    v20 = sub_249EBE564(result);
    v22 = v27;
    v24 = v28;
    v26 = v29;
    v68 = &type metadata for NumPyRandomSource;
    v69 = &off_251B5C728;
    goto LABEL_7;
  }
  if (v18 == 1)
  {
    v19 = v16;
    v20 = sub_249EBE564(result);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v68 = &type metadata for TorchRandomSource;
    v69 = &off_251B5C5F0;
LABEL_7:
    result = swift_allocObject();
    v16 = v19;
    v17 = v60;
    v66 = result;
    *(_QWORD *)(result + 16) = v20;
    *(_QWORD *)(result + 24) = v22;
    *(_QWORD *)(result + 32) = v24;
    *(_BYTE *)(result + 40) = v26 & 1;
    goto LABEL_9;
  }
  v68 = &type metadata for NvRandomSource;
  v69 = &off_251B5CE18;
  v66 = result;
  v67 = 0;
LABEL_9:
  v30 = *(_QWORD *)(v17 + v16[17]);
  if (v30 < 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v31 = MEMORY[0x24BEE4AF8];
  if (v30)
  {
    v57 = v16;
    v70 = MEMORY[0x24BEE4AF8];
    sub_249EB5C40(0, v30, 0);
    v31 = v70;
    v32 = v15;
    v33 = MEMORY[0x24BDBFCD0];
    do
    {
      v35 = v68;
      v34 = v69;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v66, (uint64_t)v68);
      v36 = (void (*)(uint64_t, ValueMetadata *, _UNKNOWN **, double, double))v34[2];
      v37 = swift_bridgeObjectRetain();
      v36(v37, v35, v34, 0.0, v32);
      v38 = v61;
      swift_bridgeObjectRelease();
      sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, v33);
      sub_249DDFC68(&qword_2578DDDF8, &qword_2578DDDF0, v33);
      sub_249F1F058();
      v70 = v31;
      v40 = *(_QWORD *)(v31 + 16);
      v39 = *(_QWORD *)(v31 + 24);
      if (v40 >= v39 >> 1)
      {
        sub_249EB5C40(v39 > 1, v40 + 1, 1);
        v31 = v70;
      }
      *(_QWORD *)(v31 + 16) = v40 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v64 + 32))(v31+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v40, v38, v5);
      --v30;
    }
    while (v30);
    v17 = v60;
    v16 = v57;
  }
  v41 = v17 + v16[13];
  v42 = *(_BYTE *)(v41 + 8);
  if ((v42 & 1) == 0)
  {
    v43 = *(float *)(v17 + v16[15]);
    if (v43 < 1.0)
    {
      v44 = *(void **)v41;
      v45 = *(void **)(v58 + 72);
      if (v45)
      {
        v46 = *(void **)(v58 + 80);
        v47 = *(float *)(v17 + v16[26]);
        sub_249ECB9F4(v44, v42);
        sub_249EB6EEC(v45, v46);
        v48 = (uint64_t)v56;
        v49 = v59;
        Encoder.encode(_:scaleFactor:random:)(v44, (uint64_t)&v66, (char *)v45, (uint64_t)v56, v47);
        v59 = v49;
        if (v49)
        {

          swift_release();
          sub_249E92978(v44, v42);
          swift_bridgeObjectRelease();
        }
        else
        {
          v52 = v55[3];
          v53 = (uint64_t (**)(uint64_t, uint64_t))v55[4];
          __swift_project_boxed_opaque_existential_1(v55, v52);
          v54 = Scheduler.addNoise(originalSample:noise:strength:)(v48, v31, v52, v53, v43);

          swift_release();
          sub_249E92978(v44, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v48, v5);
          v31 = v54;
        }
      }
      else
      {
        v50 = v44;
        swift_bridgeObjectRelease();
        sub_249ECB9B0();
        swift_allocError();
        *v51 = 1;
        swift_willThrow();
        sub_249E92978(v44, v42);
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t DiffusionBasePipeline.decodeToImages(_:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v4 = v2;
  v7 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v4 + 56);
  v8 = *(_QWORD *)(v4 + 64);
  v10 = type metadata accessor for PipelineConfiguration(0);
  v11 = Decoder.decode(_:scaleFactor:outputRange:inferAlpha:detectSkin:)(a1, 0, 0, v7, v9, v8, *(float *)(a2 + *(int *)(v10 + 108)));
  if (!v3)
  {
    v12 = sub_249EB4E00(v11);
    swift_bridgeObjectRelease();
    v13 = *(unsigned __int8 *)(v4 + 104);
    if (v13 == 1)
    {
      ManagedMLModel.unloadResources()();
      if (v9)
        ManagedMLModel.unloadResources()();
      if (v8)
        ManagedMLModel.unloadResources()();
    }
    if ((*(_BYTE *)(a2 + *(int *)(v10 + 88)) & 1) != 0 || !*(_QWORD *)(v4 + 88))
    {
      return v12;
    }
    else
    {
      swift_retain();
      v4 = sub_249EC9568(v12);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        ManagedMLModel.unloadResources()();
      swift_release();
    }
  }
  return v4;
}

BOOL sub_249EC9134()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88) != 0;
}

uint64_t sub_249EC9144(unint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  return DiffusionBasePipeline.generateImages(configuration:requestIdentifier:progressHandler:)(a1, a2, a3, a4);
}

uint64_t sub_249EC9158(uint64_t a1, uint64_t a2)
{
  return DiffusionBasePipeline.decodeToImages(_:configuration:)(a1, a2);
}

void sub_249EC916C()
{
  DiffusionBasePipeline.loadResources()();
}

uint64_t PipelineProgress.pipeline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249D9E1E4(v1, a1);
}

uint64_t PipelineProgress.prompt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PipelineProgress.step.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t PipelineProgress.stepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t PipelineProgress.currentLatentSamples.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PipelineProgress.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PipelineProgress();
  return sub_249DC091C(v1 + *(int *)(v3 + 36), a1, type metadata accessor for PipelineConfiguration);
}

uint64_t PipelineProgress.isSafetyEnabled.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for PipelineProgress();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[3];
  v6 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  sub_249DC091C(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PipelineProgress);
  if ((v7 & 1) != 0)
  {
    v8 = *(int *)(v2 + 36);
    v9 = v4[v8 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 88)] ^ 1;
  }
  else
  {
    v9 = 0;
  }
  sub_249DC05A8((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PipelineProgress);
  return v9 & 1;
}

uint64_t PipelineProgress.currentImages.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)v0 + 3);
  v2 = *((_QWORD *)v0 + 4);
  __swift_project_boxed_opaque_existential_1(v0, v1);
  v3 = *((_QWORD *)v0 + 9);
  v4 = type metadata accessor for PipelineProgress();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v2 + 32))(v3, &v0[*(int *)(v4 + 36)], v1, v2);
}

uint64_t sub_249EC93A8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

uint64_t sub_249EC9408(uint64_t result, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  v6 = a6[1];
  if (v6 < 0)
    goto LABEL_9;
  if (v6)
  {
    if (!*(_QWORD *)(a5 + 16))
    {
LABEL_10:
      __break(1u);
      return result;
    }
    v7 = 0;
    v8 = *a6;
    v9 = *(_QWORD *)(a5 + 32);
    while (1)
    {
      v10 = v9 + v7;
      if (__OFADD__(v9, v7))
        break;
      v11 = 4 * v7;
      v12 = *(float *)(result + 4 * v7++);
      *(float *)(v8 + v11) = v12 + (float)((float)(*(float *)(result + 4 * v10) - v12) * a2);
      if (v6 == v7)
        return result;
    }
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

char *sub_249EC9468(uint64_t a1)
{
  return sub_249F0C97C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_249EC947C(_QWORD *a1)
{
  return sub_249F0CA88(0, a1[2], 0, a1);
}

_QWORD *sub_249EC9490(_QWORD *a1)
{
  return sub_249F0CEC4(0, a1[2], 0, a1);
}

_QWORD *sub_249EC94A4(_QWORD *a1)
{
  return sub_249F0CFF0(0, a1[2], 0, a1);
}

uint64_t sub_249EC94B8(unint64_t a1)
{
  return sub_249F0CCB4(0, *(_QWORD *)(a1 + 16), 0, a1);
}

char *sub_249EC94CC(uint64_t a1)
{
  return sub_249F0D0FC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_249EC94E0(_QWORD *a1)
{
  return sub_249F0D518(0, a1[2], 0, a1);
}

_QWORD *sub_249EC94F4(_QWORD *a1)
{
  return sub_249F0CBA8(0, a1[2], 0, a1);
}

uint64_t _s13DiffusionBase0aB9SchedulerO21__derived_enum_equalsySbAC_ACtFZ_0(unsigned __int16 a1, unsigned __int16 a2)
{
  if (a1 >> 14)
  {
    if (a1 >> 14 == 1)
    {
      if ((a2 & 0xC000) == 0x4000)
        return (a2 ^ a1) == 0;
    }
    else if (a2 == 0x8000)
    {
      return 1;
    }
  }
  else if (a2 < 0x4000u)
  {
    return a1 == a2;
  }
  return 0;
}

uint64_t sub_249EC9568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  _BYTE *v6;
  void *v7;
  char v8;
  __CVBuffer *v9;
  CGImage *v10;
  __CVBuffer *v11;
  Swift::Bool v12;
  uint64_t v13;
  Swift::Bool v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v19 = MEMORY[0x24BEE4AF8];
  sub_249EB5C6C(0, v3, 0);
  v4 = v19;
  v6 = (_BYTE *)(a1 + 40);
  while (1)
  {
    v7 = (void *)*((_QWORD *)v6 - 1);
    v8 = *v6;
    if (v7)
      break;
LABEL_8:
    v16 = *(_QWORD *)(v19 + 16);
    v15 = *(_QWORD *)(v19 + 24);
    if (v16 >= v15 >> 1)
      sub_249EB5C6C(v15 > 1, v16 + 1, 1);
    v6 += 16;
    *(_QWORD *)(v19 + 16) = v16 + 1;
    v17 = v19 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v7;
    *(_BYTE *)(v17 + 40) = v8;
    if (!--v3)
      return v4;
  }
  v9 = v7;
  v10 = (CGImage *)sub_249EFA904(v9);
  if (v2)
  {
    swift_release();
    v11 = v9;
    goto LABEL_14;
  }
  v11 = v10;
  v12 = SafetyChecker.isSafe(_:)(v10);
  v2 = v13;
  if (!v13)
  {
    v14 = v12;

    if (!v14)
    {

      v7 = 0;
      v8 = 0;
    }
    goto LABEL_8;
  }
  swift_release();

LABEL_14:
  return v4;
}

uint64_t _s13DiffusionBase13PipelineErrorO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t type metadata accessor for PipelineProgress()
{
  uint64_t result;

  result = qword_2578DE078;
  if (!qword_2578DE078)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249EC9740@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_249EC883C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_249EC975C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249EC979C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    swift_release();

  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_249EC9804(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DiffusionBasePipeline(a2, a1);
  return a2;
}

unint64_t sub_249EC983C()
{
  unint64_t result;

  result = qword_2578DE008;
  if (!qword_2578DE008)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for DiffusionBaseScheduler, &type metadata for DiffusionBaseScheduler);
    atomic_store(result, (unint64_t *)&qword_2578DE008);
  }
  return result;
}

unint64_t sub_249EC9884()
{
  unint64_t result;

  result = qword_2578DE010;
  if (!qword_2578DE010)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for DiffusionBaseRNG, &type metadata for DiffusionBaseRNG);
    atomic_store(result, (unint64_t *)&qword_2578DE010);
  }
  return result;
}

unint64_t sub_249EC98CC()
{
  unint64_t result;

  result = qword_2578DE018;
  if (!qword_2578DE018)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PipelineError, &type metadata for PipelineError);
    atomic_store(result, (unint64_t *)&qword_2578DE018);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DiffusionBaseScheduler(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0xFFE)
    goto LABEL_17;
  if (a2 + 61442 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 61442 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 61442;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 61442;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 61442;
  }
LABEL_17:
  v6 = (*a1 & 0xFC | (*a1 >> 14) | (*a1 >> 2) & 0xF00) ^ 0xFFF;
  if (v6 >= 0xFFD)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for DiffusionBaseScheduler(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 61442 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 61442 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFFD)
    return ((uint64_t (*)(void))((char *)&loc_249EC9A14 + 4 * byte_249F30D59[v4]))();
  *a1 = a2 - 4094;
  return ((uint64_t (*)(void))((char *)sub_249EC9A48 + 4 * byte_249F30D54[v4]))();
}

uint64_t sub_249EC9A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_249EC9A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x249EC9A58);
  return result;
}

uint64_t sub_249EC9A78(uint64_t result, int a2)
{
  unsigned int v2;

  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x249EC9A80);
  v2 = ((-a2 >> 2) & 0x3FF) - (a2 << 10);
  *(_WORD *)result = (16 * v2) & 0xFC00 | (4 * (v2 & 0x3F));
  return result;
}

uint64_t sub_249EC9A84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_249EC9A8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_249EC9A98(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  v2 = (__int16)v1;
  v3 = v1 >> 14;
  v4 = (v1 & 3 | (4 * ((v1 >> 8) & 3))) + 2;
  if (v2 >= 0)
    return v3;
  else
    return v4;
}

_WORD *sub_249EC9AC0(_WORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

_WORD *sub_249EC9AD0(_WORD *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 0x303 | ((_WORD)a2 << 14);
  else
    *result = (((_WORD)a2 - 2) << 6) & 0x300 | (a2 - 2) & 3 | 0x8000;
  return result;
}

ValueMetadata *type metadata accessor for DiffusionBaseScheduler()
{
  return &type metadata for DiffusionBaseScheduler;
}

uint64_t storeEnumTagSinglePayload for DiffusionBaseRNG(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249EC9B60 + 4 * byte_249F30D63[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249EC9B94 + 4 * byte_249F30D5E[v4]))();
}

uint64_t sub_249EC9B94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EC9B9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EC9BA4);
  return result;
}

uint64_t sub_249EC9BB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EC9BB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249EC9BBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EC9BC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiffusionBaseRNG()
{
  return &type metadata for DiffusionBaseRNG;
}

uint64_t storeEnumTagSinglePayload for PipelineError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_249EC9C2C + 4 * byte_249F30D6D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_249EC9C60 + 4 * byte_249F30D68[v4]))();
}

uint64_t sub_249EC9C60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EC9C68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EC9C70);
  return result;
}

uint64_t sub_249EC9C7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EC9C84);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_249EC9C88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EC9C90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PipelineError()
{
  return &type metadata for PipelineError;
}

uint64_t destroy for DiffusionBasePipeline(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 72))
  {
    swift_release();

  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DiffusionBasePipeline(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v5)
  {
    v8 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v8;
    swift_retain();
    v9 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DiffusionBasePipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 72) = v4;
      v8 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v8;
      swift_retain();
      v9 = v8;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_249EB847C(a1 + 72);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 72) = v4;
  swift_retain();
  swift_release();
  v5 = *(void **)(a2 + 80);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v7 = v5;

LABEL_8:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  return a1;
}

__n128 __swift_memcpy107_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 91) = *(__int128 *)((char *)a2 + 91);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for DiffusionBasePipeline(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  v6 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_5;
  if (!v6)
  {
    sub_249EB847C(a1 + 72);
LABEL_5:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 72) = v6;
  swift_release();
  v7 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiffusionBasePipeline(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 107))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiffusionBasePipeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 107) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 107) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiffusionBasePipeline()
{
  return &type metadata for DiffusionBasePipeline;
}

uint64_t initializeBufferWithCopyOfBuffer for PipelineProgress(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  char v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v52;
  uint64_t v53;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v8;
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    *(_QWORD *)(v4 + 72) = a2[9];
    v9 = *(int *)(a3 + 36);
    v10 = v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v4 + v9 + 24) = v12;
    v13 = v12;
    v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v10, v11, v13);
    v15 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 64) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v10 + 40, v11 + 40);
    *(_WORD *)(v10 + 80) = *(_WORD *)(v11 + 80);
    v16 = (int *)type metadata accessor for PipelineConfiguration(0);
    v17 = v16[8];
    v18 = (char *)(v10 + v17);
    v19 = (char *)(v11 + v17);
    v20 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
    v21 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      v25(v18, v19, v24);
      v25(&v18[v20[5]], &v19[v20[5]], v24);
      v26 = v20[6];
      v27 = (uint64_t *)&v18[v26];
      v28 = (uint64_t *)&v19[v26];
      if (*(_QWORD *)&v19[v26 + 16])
      {
        v52 = v28[1];
        v53 = *v28;
        sub_249DC3928(*v28, v52);
        *v27 = v53;
        v27[1] = v52;
        v27[2] = v28[2];
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v27 = *(_OWORD *)v28;
        v27[2] = v28[2];
      }
      v18[v20[7]] = v19[v20[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
    }
    *(_DWORD *)(v10 + v16[9]) = *(_DWORD *)(v11 + v16[9]);
    v29 = v16[10];
    v30 = v10 + v29;
    v31 = v11 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    v32 = v16[11];
    v33 = v10 + v32;
    v34 = v11 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
    v35 = v16[12];
    v36 = v10 + v35;
    v37 = v11 + v35;
    *(_DWORD *)v36 = *(_DWORD *)v37;
    *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
    v38 = v16[13];
    v39 = v10 + v38;
    v40 = (uint64_t *)(v11 + v38);
    v41 = *((unsigned __int8 *)v40 + 8);
    if (v41 == 255)
    {
      *(_QWORD *)v39 = *v40;
      *(_BYTE *)(v39 + 8) = *((_BYTE *)v40 + 8);
    }
    else
    {
      v42 = v41 & 1;
      v43 = *v40;
      v44 = (id)*v40;
      *(_QWORD *)v39 = v43;
      *(_BYTE *)(v39 + 8) = v42;
    }
    v45 = v16[14];
    v46 = v10 + v45;
    v47 = (uint64_t *)(v11 + v45);
    if (*((unsigned __int8 *)v47 + 20) == 255)
    {
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *(_QWORD *)(v46 + 13) = *(uint64_t *)((char *)v47 + 13);
    }
    else
    {
      v48 = *((unsigned int *)v47 + 4) | ((unint64_t)*((unsigned __int8 *)v47 + 20) << 32);
      v49 = *v47;
      v50 = (void *)v47[1];
      sub_249E929F0((void *)*v47, v50, v48, BYTE4(v48) & 1);
      *(_QWORD *)v46 = v49;
      *(_QWORD *)(v46 + 8) = v50;
      *(_DWORD *)(v46 + 16) = v48;
      *(_BYTE *)(v46 + 20) = BYTE4(v48) & 1;
    }
    *(_DWORD *)(v10 + v16[15]) = *(_DWORD *)(v11 + v16[15]);
    *(_DWORD *)(v10 + v16[16]) = *(_DWORD *)(v11 + v16[16]);
    *(_QWORD *)(v10 + v16[17]) = *(_QWORD *)(v11 + v16[17]);
    *(_QWORD *)(v10 + v16[18]) = *(_QWORD *)(v11 + v16[18]);
    *(_DWORD *)(v10 + v16[19]) = *(_DWORD *)(v11 + v16[19]);
    *(_DWORD *)(v10 + v16[20]) = *(_DWORD *)(v11 + v16[20]);
    *(_QWORD *)(v10 + v16[21]) = *(_QWORD *)(v11 + v16[21]);
    *(_BYTE *)(v10 + v16[22]) = *(_BYTE *)(v11 + v16[22]);
    *(_BYTE *)(v10 + v16[23]) = *(_BYTE *)(v11 + v16[23]);
    *(_WORD *)(v10 + v16[24]) = *(_WORD *)(v11 + v16[24]);
    *(_BYTE *)(v10 + v16[25]) = *(_BYTE *)(v11 + v16[25]);
    *(_DWORD *)(v10 + v16[26]) = *(_DWORD *)(v11 + v16[26]);
    *(_DWORD *)(v10 + v16[27]) = *(_DWORD *)(v11 + v16[27]);
    *(_DWORD *)(v10 + v16[28]) = *(_DWORD *)(v11 + v16[28]);
    *(_DWORD *)(v10 + v16[29]) = *(_DWORD *)(v11 + v16[29]);
    *(_DWORD *)(v10 + v16[30]) = *(_DWORD *)(v11 + v16[30]);
    *(_DWORD *)(v10 + v16[31]) = *(_DWORD *)(v11 + v16[31]);
    *(_DWORD *)(v10 + v16[32]) = *(_DWORD *)(v11 + v16[32]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PipelineProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  __swift_destroy_boxed_opaque_existential_1(v4);
  __swift_destroy_boxed_opaque_existential_1(v4 + 40);
  v5 = (int *)type metadata accessor for PipelineConfiguration(0);
  v6 = v4 + v5[8];
  v7 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v6, v8);
    v9(v6 + *(int *)(v7 + 20), v8);
    v10 = (uint64_t *)(v6 + *(int *)(v7 + 24));
    if (v10[2])
    {
      sub_249DC3C24(*v10, v10[1]);
      swift_bridgeObjectRelease();
    }
  }
  v11 = v4 + v5[13];
  if (*(unsigned __int8 *)(v11 + 8) != 255)

  v12 = v4 + v5[14];
  if (*(unsigned __int8 *)(v12 + 20) != 255)
  {
    v13 = *(unsigned int *)(v12 + 16) | ((unint64_t)*(unsigned __int8 *)(v12 + 20) << 32);
    sub_249E929AC(*(void **)v12, *(void **)(v12 + 8), v13, BYTE4(v13) & 1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PipelineProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  char v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v50;
  uint64_t v51;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(a1 + v8 + 24) = v11;
  v12 = v11;
  v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v9, v10, v12);
  v14 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 64) = v14;
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v9 + 40, v10 + 40);
  *(_WORD *)(v9 + 80) = *(_WORD *)(v10 + 80);
  v15 = (int *)type metadata accessor for PipelineConfiguration(0);
  v16 = v15[8];
  v17 = (char *)(v9 + v16);
  v18 = (char *)(v10 + v16);
  v19 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v20 = *((_QWORD *)v19 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v17, v18, v22);
    v23(&v17[v19[5]], &v18[v19[5]], v22);
    v24 = v19[6];
    v25 = (uint64_t *)&v17[v24];
    v26 = (uint64_t *)&v18[v24];
    if (*(_QWORD *)&v18[v24 + 16])
    {
      v50 = v26[1];
      v51 = *v26;
      sub_249DC3928(*v26, v50);
      *v25 = v51;
      v25[1] = v50;
      v25[2] = v26[2];
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
      v25[2] = v26[2];
    }
    v17[v19[7]] = v18[v19[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_DWORD *)(v9 + v15[9]) = *(_DWORD *)(v10 + v15[9]);
  v27 = v15[10];
  v28 = v9 + v27;
  v29 = v10 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = v15[11];
  v31 = v9 + v30;
  v32 = v10 + v30;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = v15[12];
  v34 = v9 + v33;
  v35 = v10 + v33;
  *(_DWORD *)v34 = *(_DWORD *)v35;
  *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
  v36 = v15[13];
  v37 = v9 + v36;
  v38 = (uint64_t *)(v10 + v36);
  v39 = *((unsigned __int8 *)v38 + 8);
  if (v39 == 255)
  {
    *(_QWORD *)v37 = *v38;
    *(_BYTE *)(v37 + 8) = *((_BYTE *)v38 + 8);
  }
  else
  {
    v40 = v39 & 1;
    v41 = *v38;
    v42 = (id)*v38;
    *(_QWORD *)v37 = v41;
    *(_BYTE *)(v37 + 8) = v40;
  }
  v43 = v15[14];
  v44 = v9 + v43;
  v45 = (uint64_t *)(v10 + v43);
  if (*((unsigned __int8 *)v45 + 20) == 255)
  {
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *(_QWORD *)(v44 + 13) = *(uint64_t *)((char *)v45 + 13);
  }
  else
  {
    v46 = *((unsigned int *)v45 + 4) | ((unint64_t)*((unsigned __int8 *)v45 + 20) << 32);
    v47 = *v45;
    v48 = (void *)v45[1];
    sub_249E929F0((void *)*v45, v48, v46, BYTE4(v46) & 1);
    *(_QWORD *)v44 = v47;
    *(_QWORD *)(v44 + 8) = v48;
    *(_DWORD *)(v44 + 16) = v46;
    *(_BYTE *)(v44 + 20) = BYTE4(v46) & 1;
  }
  *(_DWORD *)(v9 + v15[15]) = *(_DWORD *)(v10 + v15[15]);
  *(_DWORD *)(v9 + v15[16]) = *(_DWORD *)(v10 + v15[16]);
  *(_QWORD *)(v9 + v15[17]) = *(_QWORD *)(v10 + v15[17]);
  *(_QWORD *)(v9 + v15[18]) = *(_QWORD *)(v10 + v15[18]);
  *(_DWORD *)(v9 + v15[19]) = *(_DWORD *)(v10 + v15[19]);
  *(_DWORD *)(v9 + v15[20]) = *(_DWORD *)(v10 + v15[20]);
  *(_QWORD *)(v9 + v15[21]) = *(_QWORD *)(v10 + v15[21]);
  *(_BYTE *)(v9 + v15[22]) = *(_BYTE *)(v10 + v15[22]);
  *(_BYTE *)(v9 + v15[23]) = *(_BYTE *)(v10 + v15[23]);
  *(_WORD *)(v9 + v15[24]) = *(_WORD *)(v10 + v15[24]);
  *(_BYTE *)(v9 + v15[25]) = *(_BYTE *)(v10 + v15[25]);
  *(_DWORD *)(v9 + v15[26]) = *(_DWORD *)(v10 + v15[26]);
  *(_DWORD *)(v9 + v15[27]) = *(_DWORD *)(v10 + v15[27]);
  *(_DWORD *)(v9 + v15[28]) = *(_DWORD *)(v10 + v15[28]);
  *(_DWORD *)(v9 + v15[29]) = *(_DWORD *)(v10 + v15[29]);
  *(_DWORD *)(v9 + v15[30]) = *(_DWORD *)(v10 + v15[30]);
  *(_DWORD *)(v9 + v15[31]) = *(_DWORD *)(v10 + v15[31]);
  *(_DWORD *)(v9 + v15[32]) = *(_DWORD *)(v10 + v15[32]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PipelineProgress(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  id v57;
  id v58;
  char v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  char v75;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)a1 + v6), v8);
  __swift_assign_boxed_opaque_existential_1(v7 + 5, v8 + 5);
  *((_BYTE *)v7 + 80) = *((_BYTE *)v8 + 80);
  *((_BYTE *)v7 + 81) = *((_BYTE *)v8 + 81);
  v9 = (int *)type metadata accessor for PipelineConfiguration(0);
  v10 = v9[8];
  v11 = (char *)v7 + v10;
  v12 = (char *)v8 + v10;
  v13 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(v11, v12, v18);
      v19(&v11[v13[5]], &v12[v13[5]], v18);
      v20 = v13[6];
      v21 = (uint64_t *)&v11[v20];
      v22 = (uint64_t *)&v12[v20];
      if (*(_QWORD *)&v12[v20 + 16])
      {
        v77 = v22[1];
        v78 = *v22;
        sub_249DC3928(*v22, v77);
        *v21 = v78;
        v21[1] = v77;
        v21[2] = v22[2];
        swift_bridgeObjectRetain();
      }
      else
      {
        v34 = *(_OWORD *)v22;
        v21[2] = v22[2];
        *(_OWORD *)v21 = v34;
      }
      v11[v13[7]] = v12[v13[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_18;
    }
LABEL_7:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_18;
  }
  if (v17)
  {
    sub_249DC05A8((uint64_t)v11, type metadata accessor for PipelineConfiguration.InputConditioning);
    goto LABEL_7;
  }
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24);
  v25(v11, v12, v24);
  v25(&v11[v13[5]], &v12[v13[5]], v24);
  v26 = v13[6];
  v27 = (uint64_t *)&v11[v26];
  v28 = (uint64_t *)&v12[v26];
  v29 = *(_QWORD *)&v11[v26 + 16];
  v30 = *(_QWORD *)&v12[v26 + 16];
  if (v29)
  {
    if (v30)
    {
      v31 = v28[1];
      v79 = *v28;
      sub_249DC3928(*v28, v31);
      v32 = *v27;
      v33 = v27[1];
      *v27 = v79;
      v27[1] = v31;
      sub_249DC3C24(v32, v33);
      v27[2] = v28[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249E02528((uint64_t)v27);
      v36 = v28[2];
      *(_OWORD *)v27 = *(_OWORD *)v28;
      v27[2] = v36;
    }
  }
  else if (v30)
  {
    v35 = v28[1];
    v80 = *v28;
    sub_249DC3928(*v28, v35);
    *v27 = v80;
    v27[1] = v35;
    v27[2] = v28[2];
    swift_bridgeObjectRetain();
  }
  else
  {
    v37 = *(_OWORD *)v28;
    v27[2] = v28[2];
    *(_OWORD *)v27 = v37;
  }
  v11[v13[7]] = v12[v13[7]];
LABEL_18:
  *(_DWORD *)((char *)v7 + v9[9]) = *(_DWORD *)((char *)v8 + v9[9]);
  v38 = v9[10];
  v39 = (char *)v7 + v38;
  v40 = (char *)v8 + v38;
  v41 = *(_QWORD *)v40;
  v39[8] = v40[8];
  *(_QWORD *)v39 = v41;
  v42 = v9[11];
  v43 = (char *)v7 + v42;
  v44 = (char *)v8 + v42;
  v45 = *(_QWORD *)v44;
  v43[8] = v44[8];
  *(_QWORD *)v43 = v45;
  v46 = v9[12];
  v47 = (char *)v7 + v46;
  v48 = (char *)v8 + v46;
  LODWORD(v45) = *(_DWORD *)v48;
  v47[4] = v48[4];
  *(_DWORD *)v47 = v45;
  v49 = v9[13];
  v50 = (char *)v7 + v49;
  v51 = (char *)v8 + v49;
  LODWORD(v47) = *((unsigned __int8 *)v7 + v49 + 8);
  v52 = *((unsigned __int8 *)v8 + v49 + 8);
  if ((_DWORD)v47 == 255)
  {
    if (v52 == 255)
    {
      v54 = *(void **)v51;
      v50[8] = v51[8];
      *(_QWORD *)v50 = v54;
    }
    else
    {
      v59 = v52 & 1;
      v60 = *(void **)v51;
      v61 = v60;
      *(_QWORD *)v50 = v60;
      v50[8] = v59;
    }
  }
  else if (v52 == 255)
  {
    sub_249ECAFEC((id *)v50);
    v53 = v51[8];
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v50[8] = v53;
  }
  else
  {
    v55 = v52 & 1;
    v56 = *(void **)v51;
    v57 = v56;
    v58 = *(id *)v50;
    *(_QWORD *)v50 = v56;
    v50[8] = v55;

  }
  v62 = v9[14];
  v63 = (uint64_t)v7 + v62;
  v64 = (char *)v8 + v62;
  v65 = *((unsigned int *)v64 + 4) | ((unint64_t)v64[20] << 32);
  if (*((unsigned __int8 *)v7 + v62 + 20) == 255)
  {
    if (BYTE4(v65) == 255)
    {
      v66 = *(_OWORD *)v64;
      *(_QWORD *)(v63 + 13) = *(_QWORD *)(v64 + 13);
      *(_OWORD *)v63 = v66;
    }
    else
    {
      v68 = *(void **)v64;
      v69 = (void *)*((_QWORD *)v64 + 1);
      sub_249E929F0(v68, v69, v65, BYTE4(v65) & 1);
      *(_QWORD *)v63 = v68;
      *(_QWORD *)(v63 + 8) = v69;
      *(_DWORD *)(v63 + 16) = v65;
      *(_BYTE *)(v63 + 20) = BYTE4(v65) & 1;
    }
  }
  else if (BYTE4(v65) == 255)
  {
    sub_249ECB020(v63);
    v67 = *(_QWORD *)(v64 + 13);
    *(_OWORD *)v63 = *(_OWORD *)v64;
    *(_QWORD *)(v63 + 13) = v67;
  }
  else
  {
    v70 = *(void **)v64;
    v71 = (void *)*((_QWORD *)v64 + 1);
    sub_249E929F0(v70, v71, v65, BYTE4(v65) & 1);
    v72 = *(void **)v63;
    v73 = *(void **)(v63 + 8);
    v74 = *(unsigned int *)(v63 + 16);
    v75 = *(_BYTE *)(v63 + 20);
    *(_QWORD *)v63 = v70;
    *(_QWORD *)(v63 + 8) = v71;
    *(_DWORD *)(v63 + 16) = v65;
    *(_BYTE *)(v63 + 20) = BYTE4(v65) & 1;
    sub_249E929AC(v72, v73, v74, v75);
  }
  *(_DWORD *)((char *)v7 + v9[15]) = *(_DWORD *)((char *)v8 + v9[15]);
  *(_DWORD *)((char *)v7 + v9[16]) = *(_DWORD *)((char *)v8 + v9[16]);
  *(uint64_t *)((char *)v7 + v9[17]) = *(uint64_t *)((char *)v8 + v9[17]);
  *(uint64_t *)((char *)v7 + v9[18]) = *(uint64_t *)((char *)v8 + v9[18]);
  *(_DWORD *)((char *)v7 + v9[19]) = *(_DWORD *)((char *)v8 + v9[19]);
  *(_DWORD *)((char *)v7 + v9[20]) = *(_DWORD *)((char *)v8 + v9[20]);
  *(uint64_t *)((char *)v7 + v9[21]) = *(uint64_t *)((char *)v8 + v9[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v7 + v9[22]) = *((_BYTE *)v8 + v9[22]);
  *((_BYTE *)v7 + v9[23]) = *((_BYTE *)v8 + v9[23]);
  *(_WORD *)((char *)v7 + v9[24]) = *(_WORD *)((char *)v8 + v9[24]);
  *((_BYTE *)v7 + v9[25]) = *((_BYTE *)v8 + v9[25]);
  *(_DWORD *)((char *)v7 + v9[26]) = *(_DWORD *)((char *)v8 + v9[26]);
  *(_DWORD *)((char *)v7 + v9[27]) = *(_DWORD *)((char *)v8 + v9[27]);
  *(_DWORD *)((char *)v7 + v9[28]) = *(_DWORD *)((char *)v8 + v9[28]);
  *(_DWORD *)((char *)v7 + v9[29]) = *(_DWORD *)((char *)v8 + v9[29]);
  *(_DWORD *)((char *)v7 + v9[30]) = *(_DWORD *)((char *)v8 + v9[30]);
  *(_DWORD *)((char *)v7 + v9[31]) = *(_DWORD *)((char *)v8 + v9[31]);
  *(_DWORD *)((char *)v7 + v9[32]) = *(_DWORD *)((char *)v8 + v9[32]);
  return a1;
}

id *sub_249ECAFEC(id *a1)
{
  destroy for PipelineConfiguration.LatentInitializer(a1);
  return a1;
}

uint64_t sub_249ECB020(uint64_t a1)
{
  destroy for PipelineConfiguration.LocalConditioningInput(a1);
  return a1;
}

uint64_t initializeWithTake for PipelineProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + v5 + 32);
  v8 = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(a2 + v5 + 72);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + v5 + 56);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + v5 + 40);
  *(_BYTE *)(v6 + 80) = *(_BYTE *)(a2 + v5 + 80);
  *(_BYTE *)(v6 + 81) = *(_BYTE *)(a2 + v5 + 81);
  v9 = (int *)type metadata accessor for PipelineConfiguration(0);
  v10 = v9[8];
  v11 = (char *)(v6 + v10);
  v12 = (char *)(v7 + v10);
  v13 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
    v17(v11, v12, v16);
    v17(&v11[v13[5]], &v12[v13[5]], v16);
    v18 = v13[6];
    v19 = &v11[v18];
    v20 = &v12[v18];
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    v11[v13[7]] = v12[v13[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_DWORD *)(v6 + v9[9]) = *(_DWORD *)(v7 + v9[9]);
  v21 = v9[10];
  v22 = v6 + v21;
  v23 = v7 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v9[11];
  v25 = v6 + v24;
  v26 = v7 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = v9[12];
  v28 = v6 + v27;
  v29 = v7 + v27;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = v9[13];
  v31 = v6 + v30;
  v32 = v7 + v30;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = v9[14];
  v34 = v6 + v33;
  v35 = v7 + v33;
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_QWORD *)(v34 + 13) = *(_QWORD *)(v35 + 13);
  *(_DWORD *)(v6 + v9[15]) = *(_DWORD *)(v7 + v9[15]);
  *(_DWORD *)(v6 + v9[16]) = *(_DWORD *)(v7 + v9[16]);
  *(_QWORD *)(v6 + v9[17]) = *(_QWORD *)(v7 + v9[17]);
  *(_QWORD *)(v6 + v9[18]) = *(_QWORD *)(v7 + v9[18]);
  *(_DWORD *)(v6 + v9[19]) = *(_DWORD *)(v7 + v9[19]);
  *(_DWORD *)(v6 + v9[20]) = *(_DWORD *)(v7 + v9[20]);
  *(_QWORD *)(v6 + v9[21]) = *(_QWORD *)(v7 + v9[21]);
  *(_BYTE *)(v6 + v9[22]) = *(_BYTE *)(v7 + v9[22]);
  *(_BYTE *)(v6 + v9[23]) = *(_BYTE *)(v7 + v9[23]);
  *(_WORD *)(v6 + v9[24]) = *(_WORD *)(v7 + v9[24]);
  *(_BYTE *)(v6 + v9[25]) = *(_BYTE *)(v7 + v9[25]);
  *(_DWORD *)(v6 + v9[26]) = *(_DWORD *)(v7 + v9[26]);
  *(_DWORD *)(v6 + v9[27]) = *(_DWORD *)(v7 + v9[27]);
  *(_DWORD *)(v6 + v9[28]) = *(_DWORD *)(v7 + v9[28]);
  *(_DWORD *)(v6 + v9[29]) = *(_DWORD *)(v7 + v9[29]);
  *(_DWORD *)(v6 + v9[30]) = *(_DWORD *)(v7 + v9[30]);
  *(_DWORD *)(v6 + v9[31]) = *(_DWORD *)(v7 + v9[31]);
  *(_DWORD *)(v6 + v9[32]) = *(_DWORD *)(v7 + v9[32]);
  return a1;
}

uint64_t assignWithTake for PipelineProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v49;
  void (*v50)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_1(a1 + v7);
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  __swift_destroy_boxed_opaque_existential_1(v8 + 40);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(_BYTE *)(v8 + 81) = *(_BYTE *)(v9 + 81);
  v11 = (int *)type metadata accessor for PipelineConfiguration(0);
  v12 = v11[8];
  v13 = (_BYTE *)(v8 + v12);
  v14 = (_BYTE *)(v9 + v12);
  v15 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v21 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
      v21(v13, v14, v20);
      v21(&v13[v15[5]], &v14[v15[5]], v20);
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      v13[v15[7]] = v14[v15[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_249DC05A8((uint64_t)v13, type metadata accessor for PipelineConfiguration.InputConditioning);
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v50 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 40);
  v50(v13, v14, v49);
  v50(&v13[v15[5]], &v14[v15[5]], v49);
  v51 = v15[6];
  v52 = (uint64_t)&v13[v51];
  v53 = &v14[v51];
  if (!*(_QWORD *)&v13[v51 + 16])
    goto LABEL_22;
  if (!*((_QWORD *)v53 + 2))
  {
    sub_249E02528(v52);
LABEL_22:
    *(_OWORD *)v52 = *(_OWORD *)v53;
    *(_QWORD *)(v52 + 16) = *((_QWORD *)v53 + 2);
    goto LABEL_23;
  }
  v54 = *(_QWORD *)v52;
  v55 = *(_QWORD *)(v52 + 8);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  sub_249DC3C24(v54, v55);
  *(_QWORD *)(v52 + 16) = *((_QWORD *)v53 + 2);
  swift_bridgeObjectRelease();
LABEL_23:
  v13[v15[7]] = v14[v15[7]];
LABEL_7:
  *(_DWORD *)(v8 + v11[9]) = *(_DWORD *)(v9 + v11[9]);
  v26 = v11[10];
  v27 = v8 + v26;
  v28 = v9 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = v11[11];
  v30 = v8 + v29;
  v31 = v9 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = v11[12];
  v33 = v8 + v32;
  v34 = v9 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  v35 = v11[13];
  v36 = v8 + v35;
  v37 = v9 + v35;
  if (*(unsigned __int8 *)(v8 + v35 + 8) == 255)
  {
LABEL_10:
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
    goto LABEL_12;
  }
  v38 = *(unsigned __int8 *)(v37 + 8);
  if (v38 == 255)
  {
    sub_249ECAFEC((id *)v36);
    goto LABEL_10;
  }
  v39 = *(id *)v36;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = v38 & 1;

LABEL_12:
  v40 = v11[14];
  v41 = v8 + v40;
  v42 = v9 + v40;
  v43 = *(_BYTE *)(v8 + v40 + 20);
  if (v43 != 255)
  {
    v44 = *(unsigned int *)(v42 + 16) | ((unint64_t)*(unsigned __int8 *)(v42 + 20) << 32);
    if (HIDWORD(v44) <= 0xFE)
    {
      v45 = *(unsigned int *)(v41 + 16);
      v46 = *(void **)v41;
      v47 = *(void **)(v41 + 8);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *(_DWORD *)(v41 + 16) = v44;
      *(_BYTE *)(v41 + 20) = BYTE4(v44) & 1;
      sub_249E929AC(v46, v47, v45, v43 & 1);
      goto LABEL_17;
    }
    sub_249ECB020(v41);
  }
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_QWORD *)(v41 + 13) = *(_QWORD *)(v42 + 13);
LABEL_17:
  *(_DWORD *)(v8 + v11[15]) = *(_DWORD *)(v9 + v11[15]);
  *(_DWORD *)(v8 + v11[16]) = *(_DWORD *)(v9 + v11[16]);
  *(_QWORD *)(v8 + v11[17]) = *(_QWORD *)(v9 + v11[17]);
  *(_QWORD *)(v8 + v11[18]) = *(_QWORD *)(v9 + v11[18]);
  *(_DWORD *)(v8 + v11[19]) = *(_DWORD *)(v9 + v11[19]);
  *(_DWORD *)(v8 + v11[20]) = *(_DWORD *)(v9 + v11[20]);
  *(_QWORD *)(v8 + v11[21]) = *(_QWORD *)(v9 + v11[21]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + v11[22]) = *(_BYTE *)(v9 + v11[22]);
  *(_BYTE *)(v8 + v11[23]) = *(_BYTE *)(v9 + v11[23]);
  *(_WORD *)(v8 + v11[24]) = *(_WORD *)(v9 + v11[24]);
  *(_BYTE *)(v8 + v11[25]) = *(_BYTE *)(v9 + v11[25]);
  *(_DWORD *)(v8 + v11[26]) = *(_DWORD *)(v9 + v11[26]);
  *(_DWORD *)(v8 + v11[27]) = *(_DWORD *)(v9 + v11[27]);
  *(_DWORD *)(v8 + v11[28]) = *(_DWORD *)(v9 + v11[28]);
  *(_DWORD *)(v8 + v11[29]) = *(_DWORD *)(v9 + v11[29]);
  *(_DWORD *)(v8 + v11[30]) = *(_DWORD *)(v9 + v11[30]);
  *(_DWORD *)(v8 + v11[31]) = *(_DWORD *)(v9 + v11[31]);
  *(_DWORD *)(v8 + v11[32]) = *(_DWORD *)(v9 + v11[32]);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineProgress()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249ECB7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PipelineConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PipelineProgress()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249ECB884(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PipelineConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_249ECB8F8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PipelineConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_249ECB994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_249EC9408(a1, *(float *)(v4 + 24), a2, a3, a4, *(uint64_t **)(v4 + 16));
}

unint64_t sub_249ECB9B0()
{
  unint64_t result;

  result = qword_2578DE0C0;
  if (!qword_2578DE0C0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PipelineError, &type metadata for PipelineError);
    atomic_store(result, (unint64_t *)&qword_2578DE0C0);
  }
  return result;
}

id sub_249ECB9F4(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return result;
  return result;
}

uint64_t sub_249ECBA0C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NvRandomSource(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NvRandomSource(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NvRandomSource()
{
  return &type metadata for NvRandomSource;
}

uint64_t sub_249ECBAA4(unint64_t a1)
{
  unsigned int *v1;
  uint64_t inited;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  int v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t j;
  int v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD v29[16];

  v29[15] = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE0C8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F234B0;
  v4 = v1[2];
  *(_QWORD *)(inited + 32) = sub_249EF86C0(v4, a1);
  *(_QWORD *)(inited + 40) = sub_249EF86C0(0, a1);
  if ((a1 & 0x8000000000000000) == 0 && !HIDWORD(a1))
  {
    *(_QWORD *)(inited + 48) = sub_249ED97DC(a1 << 32);
    *(_QWORD *)(inited + 56) = sub_249EF86C0(0, a1);
    v29[0] = inited;
    if (v4 != -1)
    {
      v1[2] = v4 + 1;
      v5 = swift_initStackObject();
      *(_OWORD *)(v5 + 16) = xmmword_249F21910;
      v6 = v1[1];
      *(_QWORD *)(v5 + 32) = sub_249EF86C0(*v1, a1);
      v7 = sub_249EF86C0(v6, a1);
      v8 = 0;
      *(_QWORD *)(v5 + 40) = v7;
      while (1)
      {
        sub_249ECBFB8((uint64_t)v29, (_QWORD *)v5);
        v9 = *(_QWORD *)(v5 + 16);
        if (!v9)
          goto LABEL_35;
        v10 = *(_QWORD *)(v5 + 32);
        v11 = *(_QWORD *)(v10 + 16);
        if (!v11)
          goto LABEL_17;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = (uint64_t)sub_249EC9490((_QWORD *)v5);
        for (i = 0; i != v11; ++i)
        {
          if (!*(_QWORD *)(v5 + 16))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
          v13 = *(_DWORD *)(v10 + 4 * i + 32);
          v14 = *(char **)(v5 + 32);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v5 + 32) = v14;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v14 = sub_249EC9468((uint64_t)v14);
          if (i >= *((_QWORD *)v14 + 2))
            goto LABEL_32;
          *(_DWORD *)&v14[4 * i + 32] = v13 - 1640531527;
          *(_QWORD *)(v5 + 32) = v14;
        }
        swift_bridgeObjectRelease();
        v9 = *(_QWORD *)(v5 + 16);
LABEL_17:
        if (v9 < 2)
          goto LABEL_36;
        v16 = *(_QWORD *)(v5 + 40);
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = (uint64_t)sub_249EC9490((_QWORD *)v5);
          for (j = 0; j != v17; ++j)
          {
            if (*(_QWORD *)(v5 + 16) < 2uLL)
              goto LABEL_33;
            v19 = *(_DWORD *)(v16 + 4 * j + 32);
            v20 = *(char **)(v5 + 40);
            v21 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v5 + 40) = v20;
            if ((v21 & 1) == 0)
              v20 = sub_249EC9468((uint64_t)v20);
            if (j >= *((_QWORD *)v20 + 2))
              goto LABEL_34;
            *(_DWORD *)&v20[4 * j + 32] = v19 - 1150833019;
            *(_QWORD *)(v5 + 40) = v20;
          }
          swift_bridgeObjectRelease();
        }
        if (++v8 == 9)
        {
          sub_249ECBFB8((uint64_t)v29, (_QWORD *)v5);
          v22 = swift_bridgeObjectRelease();
          v23 = *(_QWORD *)(v29[0] + 16);
          if (v23)
          {
            if (v23 != 1)
            {
              v24 = *(_QWORD *)(v29[0] + 32);
              v25 = *(_QWORD *)(v29[0] + 40);
              MEMORY[0x24BDAC7A8](v22);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_249ECC31C(v24, v25, (double (*)(_QWORD, _QWORD))sub_249ECC29C);
              v27 = v26;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v27;
            }
LABEL_39:
            __break(1u);
          }
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
      }
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

unint64_t sub_249ECBEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(a1 + 32);
    v3 = 1;
    while (1)
    {
      v4 = *v2++;
      result = v3 * v4;
      if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
        break;
      v3 = result;
      if (!--v1)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    result = 1;
LABEL_7:
    sub_249ECBAA4(result);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF88);
    sub_249EBE614();
    return sub_249F1EFEC();
  }
  return result;
}

uint64_t sub_249ECBF7C()
{
  uint64_t result;

  result = sub_249ECBAA4(1uLL);
  if (*(_QWORD *)(result + 16))
    return swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_249ECBFB8(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v4 = *(_QWORD **)result;
  if (!*(_QWORD *)(*(_QWORD *)result + 16))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    v4 = sub_249EC9490(v4);
    goto LABEL_4;
  }
  v3 = *(_QWORD *)(v4[4] + 16);
  if (!v3)
    return result;
  v2 = a2;
  v28 = (_QWORD *)result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_53;
LABEL_4:
  v5 = 0;
  do
  {
    if (v3 == v5)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v6 = v4[2];
    if (!v6)
      goto LABEL_35;
    v7 = (char *)v4[4];
    if (v5 >= *((_QWORD *)v7 + 2))
      goto LABEL_36;
    if (v6 < 3)
      goto LABEL_37;
    v8 = v4[6];
    if (v5 >= *(_QWORD *)(v8 + 16))
      goto LABEL_38;
    v9 = v4[5];
    if (v5 >= *(_QWORD *)(v9 + 16))
      goto LABEL_39;
    v10 = v2[2];
    if (!v10)
      goto LABEL_40;
    v11 = v2[4];
    if (v5 >= *(_QWORD *)(v11 + 16))
      goto LABEL_41;
    v12 = *(_DWORD *)&v7[4 * v5 + 32];
    v13 = *(_DWORD *)(v8 + 4 * v5 + 32);
    v14 = *(_DWORD *)(v9 + 4 * v5 + 32);
    v15 = *(_DWORD *)(v11 + 4 * v5 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v4[4] = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v7 = sub_249EC9468((uint64_t)v7);
    if (v5 >= *((_QWORD *)v7 + 2))
      goto LABEL_42;
    v17 = 3449720151 * v13;
    *(_DWORD *)&v7[4 * v5 + 32] = v14 ^ v15 ^ HIDWORD(v17);
    v4[4] = v7;
    if (v4[2] < 2uLL)
      goto LABEL_43;
    v18 = (char *)v4[5];
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v4[5] = v18;
    if ((v19 & 1) == 0)
      v18 = sub_249EC9468((uint64_t)v18);
    if (v5 >= *((_QWORD *)v18 + 2))
      goto LABEL_44;
    *(_DWORD *)&v18[4 * v5 + 32] = v17;
    v4[5] = v18;
    if (v4[2] < 4uLL)
      goto LABEL_45;
    v20 = v4[7];
    if (v5 >= *(_QWORD *)(v20 + 16))
      goto LABEL_46;
    if (v10 < 2)
      goto LABEL_47;
    v21 = v2[5];
    if (v5 >= *(_QWORD *)(v21 + 16))
      goto LABEL_48;
    v22 = *(_DWORD *)(v20 + 4 * v5 + 32);
    v23 = *(_DWORD *)(v21 + 4 * v5 + 32);
    v24 = (char *)v4[6];
    v25 = swift_isUniquelyReferenced_nonNull_native();
    v4[6] = v24;
    if ((v25 & 1) == 0)
      v24 = sub_249EC9468((uint64_t)v24);
    if (v5 >= *((_QWORD *)v24 + 2))
      goto LABEL_49;
    v26 = 3528531795 * v12;
    *(_DWORD *)&v24[4 * v5 + 32] = v22 ^ v23 ^ HIDWORD(v26);
    v4[6] = v24;
    if (v4[2] < 4uLL)
      goto LABEL_50;
    v27 = v4[7];
    result = swift_isUniquelyReferenced_nonNull_native();
    v4[7] = v27;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_249EC9468(v27);
      v27 = result;
    }
    if (v5 >= *(_QWORD *)(v27 + 16))
      goto LABEL_51;
    *(_DWORD *)(v27 + 4 * v5 + 32) = v26;
    v4[7] = v27;
    ++v5;
  }
  while (v3 != v5);
  *v28 = v4;
  return result;
}

long double sub_249ECC29C(unsigned int a1, unsigned int a2)
{
  uint64_t v2;
  double v3;
  long double v4;
  double v5;

  v3 = *(double *)(v2 + 24);
  v4 = (double)a2 * 0.00000000146291808 + 7.3145904e-10;
  v5 = *(double *)(v2 + 16) * sqrt(log((double)a1 * 2.32830644e-10 + 1.16415322e-10) * -2.0);
  return v3 + sin(v4) * v5;
}

void sub_249ECC31C(uint64_t a1, uint64_t a2, double (*a3)(_QWORD, _QWORD))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v32;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v32 = MEMORY[0x24BEE4AF8];
  sub_249EB5CE0(0, v7, 0);
  v26 = v6;
  v28 = a2;
  v29 = a1;
  v27 = v5;
  v25 = v7;
  if (v7)
  {
    v8 = v5;
    v9 = (unsigned int *)(a1 + 32);
    v10 = (unsigned int *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v6;
    v12 = v8;
    while (v12)
    {
      if (!v11)
        goto LABEL_26;
      v13 = a3(*v9, *v10);
      v15 = *(_QWORD *)(v32 + 16);
      v14 = *(_QWORD *)(v32 + 24);
      if (v15 >= v14 >> 1)
        sub_249EB5CE0(v14 > 1, v15 + 1, 1);
      --v11;
      *(_QWORD *)(v32 + 16) = v15 + 1;
      *(double *)(v32 + 8 * v15 + 32) = v13;
      --v12;
      ++v10;
      ++v9;
      if (!--v7)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_13:
    if (v27 <= v26)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v16 = 0;
    if (v25 <= v26)
      v17 = v26;
    else
      v17 = v25;
    v30 = v17 - v25;
    v18 = v27 - v25;
    v19 = 4 * v25 + 32;
    v20 = v29 + v19;
    v21 = v28 + v19;
    while (v18 != v16)
    {
      if (v26 - v25 == v16)
        goto LABEL_24;
      if (v30 == v16)
        goto LABEL_28;
      v22 = a3(*(unsigned int *)(v20 + 4 * v16), *(unsigned int *)(v21 + 4 * v16));
      v24 = *(_QWORD *)(v32 + 16);
      v23 = *(_QWORD *)(v32 + 24);
      if (v24 >= v23 >> 1)
        sub_249EB5CE0(v23 > 1, v24 + 1, 1);
      *(_QWORD *)(v32 + 16) = v24 + 1;
      *(double *)(v32 + 8 * v24 + 32) = v22;
      if (v18 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t SampleTimer.__allocating_init()()
{
  uint64_t result;
  uint64_t v1;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 1;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v1;
  return result;
}

uint64_t SampleTimer.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = v2;
  return result;
}

Swift::Void __swiftcall SampleTimer.start()()
{
  uint64_t v0;

  *(CFAbsoluteTime *)(v0 + 16) = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(v0 + 24) = 0;
}

Swift::Double __swiftcall SampleTimer.stop()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;

  v3 = 0.0;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    return v3;
  v4 = *(double *)(v1 + 16);
  v3 = CFAbsoluteTimeGetCurrent() - v4;
  v5 = v3 * v3 + *(double *)(v1 + 40);
  *(double *)(v1 + 32) = *(double *)(v1 + 32) + v3;
  *(double *)(v1 + 40) = v5;
  v6 = *(_QWORD *)(v1 + 48);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)(v1 + 48) = v8;
  v0 = (_QWORD *)(v1 + 56);
  swift_beginAccess();
  v2 = *(_QWORD **)(v1 + 56);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 56) = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    v2 = sub_249F0CFF0(0, v2[2] + 1, 1, v2);
    *v0 = v2;
  }
  v11 = v2[2];
  v10 = v2[3];
  if (v11 >= v10 >> 1)
  {
    v2 = sub_249F0CFF0((_QWORD *)(v10 > 1), v11 + 1, 1, v2);
    *v0 = v2;
  }
  v2[2] = v11 + 1;
  *(double *)&v2[v11 + 4] = v3;
  swift_endAccess();
  return v3;
}

double SampleTimer.mean.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32) / (double)*(uint64_t *)(v0 + 48);
}

double SampleTimer.variance.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + 48);
  result = 0.0;
  if (v1 >= 2)
    return *(double *)(v0 + 40) / (double)(v1 - 1)
         - *(double *)(v0 + 32) / (double)v1 * (*(double *)(v0 + 32) / (double)v1);
  return result;
}

double SampleTimer.stdev.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = 0.0;
  if (v1 >= 2)
    v2 = *(double *)(v0 + 40) / (double)(v1 - 1)
       - *(double *)(v0 + 32) / (double)v1 * (*(double *)(v0 + 32) / (double)v1);
  return sqrt(v2);
}

uint64_t SampleTimer.median.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain_n();
  sub_249ECCEBC(&v4);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v4 + 16);
  v2 = v1 >> 1;
  if ((v1 & 1) != 0)
  {
    if (v2 < v1)
      return swift_release();
    goto LABEL_8;
  }
  if (v2 >= v1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >= 2)
    return swift_release();
LABEL_9:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t SampleTimer.allSamples.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_249ECC86C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249ECC8A0 + 4 * byte_249F31050[*v0]))(0x6D69547472617473, 0xE900000000000065);
}

uint64_t sub_249ECC8A0()
{
  return 7173491;
}

uint64_t sub_249ECC8B0()
{
  return 0x757153664F6D7573;
}

uint64_t sub_249ECC8D0()
{
  return 0x746E756F63;
}

uint64_t sub_249ECC8E4()
{
  return 0x73656C706D6173;
}

uint64_t sub_249ECC8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249ECDAC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249ECC920()
{
  sub_249ECCF24();
  return sub_249F20024();
}

uint64_t sub_249ECC948()
{
  sub_249ECCF24();
  return sub_249F20030();
}

uint64_t SampleTimer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SampleTimer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SampleTimer.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE0D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249ECCF24();
  sub_249F20018();
  v12 = 0;
  sub_249F1FD60();
  if (!v2)
  {
    v12 = 1;
    sub_249F1FDA8();
    v12 = 2;
    sub_249F1FDA8();
    v12 = 3;
    sub_249F1FDC0();
    swift_beginAccess();
    v11 = *(_QWORD *)(v3 + 56);
    v10[15] = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF88);
    sub_249ECCF68(&qword_2578DE0E0, MEMORY[0x24BEE13D8], MEMORY[0x24BEE12A0]);
    sub_249F1FDCC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SampleTimer.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SampleTimer.init(from:)(a1);
  return v2;
}

uint64_t SampleTimer.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;

  v3 = v1;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE0E8);
  v5 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 56) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  v8 = a1[3];
  v17 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  sub_249ECCF24();
  sub_249F1FFF4();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v18 = 0;
    v9 = v16;
    *(_QWORD *)(v3 + 16) = sub_249F1FC94();
    *(_BYTE *)(v3 + 24) = v10 & 1;
    v18 = 1;
    sub_249F1FCDC();
    *(_QWORD *)(v3 + 32) = v11;
    v18 = 2;
    sub_249F1FCDC();
    *(_QWORD *)(v3 + 40) = v12;
    v18 = 3;
    *(_QWORD *)(v3 + 48) = sub_249F1FCF4();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF88);
    v18 = 4;
    sub_249ECCF68(&qword_2578DE0F0, MEMORY[0x24BEE1400], MEMORY[0x24BEE12D0]);
    sub_249F1FD00();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v9);
    v14 = v19;
    swift_beginAccess();
    *(_QWORD *)(v3 + 56) = v14;
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v3;
}

uint64_t sub_249ECCE48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = SampleTimer.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_249ECCE9C(_QWORD *a1)
{
  return SampleTimer.encode(to:)(a1);
}

uint64_t sub_249ECCEBC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_249ECDAB0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_249ECD18C(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_249ECCF24()
{
  unint64_t result;

  result = qword_2578DE0D8;
  if (!qword_2578DE0D8)
  {
    result = MEMORY[0x24BD06528](&unk_249F311B8, &type metadata for SampleTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE0D8);
  }
  return result;
}

uint64_t sub_249ECCF68(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DDF88);
    v8 = a2;
    result = MEMORY[0x24BD06528](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SampleTimer()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for SampleTimer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_249ECD034 + 4 * byte_249F3105A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_249ECD068 + 4 * byte_249F31055[v4]))();
}

uint64_t sub_249ECD068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249ECD070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249ECD078);
  return result;
}

uint64_t sub_249ECD084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249ECD08CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_249ECD090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249ECD098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SampleTimer.CodingKeys()
{
  return &type metadata for SampleTimer.CodingKeys;
}

unint64_t sub_249ECD0B8()
{
  unint64_t result;

  result = qword_2578DE1C0;
  if (!qword_2578DE1C0)
  {
    result = MEMORY[0x24BD06528](&unk_249F31190, &type metadata for SampleTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE1C0);
  }
  return result;
}

unint64_t sub_249ECD100()
{
  unint64_t result;

  result = qword_2578DE1C8;
  if (!qword_2578DE1C8)
  {
    result = MEMORY[0x24BD06528](&unk_249F31100, &type metadata for SampleTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE1C8);
  }
  return result;
}

unint64_t sub_249ECD148()
{
  unint64_t result;

  result = qword_2578DE1D0;
  if (!qword_2578DE1D0)
  {
    result = MEMORY[0x24BD06528](&unk_249F31128, &type metadata for SampleTimer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE1D0);
  }
  return result;
}

uint64_t sub_249ECD18C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_249F1FDFC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_249ECD81C((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_249E750A8((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_249F1F58C();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_249E74C00(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_249E74C00((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_249ECD81C((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

uint64_t sub_249ECD81C(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_249E74E4C((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249ECDA88(uint64_t a1)
{
  return sub_249DB6AAC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_249ECDA9C(uint64_t a1)
{
  return sub_249DB6C20(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_249ECDAB0(uint64_t a1)
{
  return sub_249EB5FBC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_249ECDAC4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D69547472617473 && a2 == 0xE900000000000065;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7173491 && a2 == 0xE300000000000000 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x757153664F6D7573 && a2 == 0xEC00000073657261 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73656C706D6173 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t static AppleDiffusionPipeline.supportedImageResolutions(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = sub_249F1E7F4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, a1, v2);
  AppleDiffusionPipeline.ResourceURLs.init(resourcesAt:)((uint64_t)v8, v11);
  (*(void (**)(uint64_t))&v11[*(int *)(v9 + 24)])(5);
  sub_249EDDE74((uint64_t)v6);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_249ECDFE8((uint64_t)v11);
  return v13;
}

uint64_t static AppleDiffusionPipeline.supportedImageResolutions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2578DDA28 != -1)
    swift_once();
  v8 = (os_unfair_lock_s *)(qword_2578DEDB0 + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = 0;
  sub_249F14298(&v15);
  os_unfair_lock_unlock(v8);
  if (v0)
  {
    swift_release();
  }
  else
  {
    v10 = v15;
    swift_release();
    sub_249ECE024(v10 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_resourceURLs, (uint64_t)v3);
    swift_release();
    v11 = *(void (**)(uint64_t))&v3[*(int *)(v1 + 24)];
    swift_retain();
    sub_249ECDFE8((uint64_t)v3);
    v11(5);
    swift_release();
    sub_249EDDE74((uint64_t)v7);
    v9 = v12;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

uint64_t sub_249ECDFE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249ECE024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_249ECE068(unint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = sub_249DAE2C8((uint64_t)&unk_251B5AC00);
  if (a3 >> 62)
    goto LABEL_23;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_24;
LABEL_3:
  v20 = a1;
  v21 = v6;
  v19 = (uint64_t)a2;
  a1 = a3 & 0xC000000000000001;
  v6 = 4;
  a2 = &OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel;
  while (1)
  {
    v8 = v6 - 4;
    if (a1)
    {
      v9 = MEMORY[0x24BD056B8](v6 - 4, a3);
      v10 = v6 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_22;
    }
    else
    {
      v9 = *(_QWORD *)(a3 + 8 * v6);
      swift_retain();
      v10 = v6 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        swift_bridgeObjectRetain();
        v7 = sub_249F1FBEC();
        if (!v7)
          goto LABEL_24;
        goto LABEL_3;
      }
    }
    v11 = *(void **)(v9 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
    if (v11)
      break;
    swift_release();
LABEL_5:
    ++v6;
    if (v10 == v7)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      swift_bridgeObjectRelease();
      a1 = v20;
      goto LABEL_25;
    }
  }
  v12 = objc_msgSend(v11, sel_modelDescription);
  v13 = objc_msgSend(v12, sel_inputDescriptionsByName);

  sub_249ECE460();
  v14 = sub_249F1F208();

  if (!*(_QWORD *)(v14 + 16) || (sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000), (v15 & 1) == 0))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v21 + 16))
    goto LABEL_16;
  swift_bridgeObjectRetain();
  a1 = v20;
  v16 = sub_249DB7D8C(v20, v19);
  if ((v17 & 1) != 0)
  {
    a1 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 16 * v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_249ECE2D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;

  v4 = sub_249DAE2C8((uint64_t)&unk_251B5AD00);
  if (!TextEncoderXL.usePORParameters()() || !*(_QWORD *)(v4 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v5 = sub_249DB7D8C(a1, a2);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return a1;
  }
  a1 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

Swift::String __swiftcall ModelKeyRemapping._remapKey(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v7 = sub_249DAE2C8((uint64_t)&unk_251B5AE00);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3) & 1) == 0 || !*(_QWORD *)(v7 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v8 = sub_249DB7D8C(countAndFlagsBits, (uint64_t)object);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
  countAndFlagsBits = *v10;
  v11 = (void *)v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  object = v11;
LABEL_7:
  v12 = countAndFlagsBits;
  v13 = object;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

unint64_t sub_249ECE454(unint64_t a1, uint64_t *a2)
{
  unint64_t *v2;

  return sub_249ECE068(a1, a2, *v2);
}

unint64_t sub_249ECE460()
{
  unint64_t result;

  result = qword_2578DDF78;
  if (!qword_2578DDF78)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2578DDF78);
  }
  return result;
}

uint64_t SafetyChecker.init(modelAt:configuration:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v8 = ManagedMLModel.init(modelAt:configuration:name:)(v7, a2, (uint64_t)"SafetyChecker", 13, 2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SafetyChecker.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall SafetyChecker.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SafetyChecker.isSafe(_:)(CGImageRef a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  id v21;
  id v22;
  Swift::Bool result;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  CGColorSpace *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  _QWORD *v35;
  id v36;
  CGColorSpace *v37;
  CGColorSpace *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  _BYTE *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  _BYTE *v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  CGImageRef v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(void *@<X0>, uint64_t *@<X8>);
  uint64_t v81;
  _QWORD *v82;

  v2 = v1;
  v77 = a1;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v3 = *(_QWORD *)(v76 - 8);
  v4 = MEMORY[0x24BDAC7A8](v76);
  v6 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v69 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1D8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue;
  v14 = *(void **)(v2 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  v79 = v2;
  v80 = sub_249ECEF00;
  v81 = 0;
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1E0);
  v16 = v78;
  sub_249F1F874();
  v78 = v16;
  if (v16)
  {

    return v17 & 1;
  }
  v73 = v3;
  v75 = v6;
  v69[2] = v13;
  v72 = v8;
  v74 = v12;

  v18 = v82;
  if (!v82[2])
    goto LABEL_26;
  v19 = sub_249DB7D8C(0x706E695F70696C63, 0xEA00000000007475);
  if ((v20 & 1) == 0)
    goto LABEL_26;
  v70 = v10;
  v71 = v9;
  v21 = *(id *)(v18[7] + 8 * v19);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v21, sel_multiArrayConstraint);

  if (v22)
  {
    v24 = v2;
    v25 = objc_msgSend(v22, sel_shape);

    v26 = sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
    v27 = sub_249F1F544();

    v28 = v77;
    if ((v27 & 0xC000000000000001) != 0)
    {
      v29 = (id)MEMORY[0x24BD056B8](2, v27);
    }
    else
    {
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        result = swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_27;
      }
      v29 = *(id *)(v27 + 48);
    }
    v30 = v29;
    v31 = objc_msgSend(v29, sel_integerValue);

    v32 = v78;
    if ((v27 & 0xC000000000000001) != 0)
    {
      v33 = (id)MEMORY[0x24BD056B8](3, v27);
      goto LABEL_13;
    }
    if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      v33 = *(id *)(v27 + 56);
LABEL_13:
      v34 = v33;
      v35 = v75;
      swift_bridgeObjectRelease();
      v36 = objc_msgSend(v34, sel_integerValue);

      v37 = sub_249ECF940(v28, (size_t)v31, (size_t)v36);
      if (!v32)
      {
        v38 = v37;
        v39 = (uint64_t)v74;
        sub_249ECEFA0(v37, (uint64_t)v74);
        v69[1] = v24;
        v40 = (uint64_t)v72;
        sub_249ECF2AC(v39, (uint64_t)v72);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
        inited = swift_initStackObject();
        v78 = v26;
        v42 = (_QWORD *)inited;
        *(_OWORD *)(inited + 16) = xmmword_249F22C20;
        *(_QWORD *)(inited + 32) = 0x706E695F70696C63;
        v77 = (CGImageRef)(inited + 32);
        *(_QWORD *)(inited + 40) = 0xEA00000000007475;
        v43 = sub_249D9D9F4(0, &qword_2578DDE20);
        v44 = v76;
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v73 + 16))(v35, v40, v76);
        sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
        v45 = sub_249F1F7FC();
        v42[9] = v43;
        v42[10] = 0x656D7473756A6461;
        v75 = v42 + 10;
        v42[6] = v45;
        v42[11] = 0xEA0000000000746ELL;
        v82 = &unk_251B5A778;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
        sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
        sub_249F1EFEC();
        v42[12] = sub_249F1F7FC();
        v42[15] = v43;
        v42[16] = 0x736567616D69;
        v42[17] = 0xE600000000000000;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
        v46 = swift_allocObject();
        *(_OWORD *)(v46 + 16) = xmmword_249F31240;
        *(_QWORD *)(v46 + 32) = sub_249F1F934();
        *(_QWORD *)(v46 + 40) = sub_249F1F934();
        *(_QWORD *)(v46 + 48) = sub_249F1F934();
        *(_QWORD *)(v46 + 56) = sub_249F1F934();
        v82 = (_QWORD *)v46;
        sub_249F1F55C();
        v47 = (uint64_t)v82;
        v48 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
        v49 = sub_249E14B58(v47, 65552);
        v42[21] = v43;
        v42[18] = v49;
        sub_249DAE8D4((uint64_t)v42);
        v50 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
        v51 = sub_249EFD4E8();
        v53 = v51;
        v54 = (uint64_t)v72;
        v55 = v73;
        if (v51)
        {
          v56 = v44;
          v57 = MEMORY[0x24BDAC7A8](v51);
          v69[-2] = v53;
          MEMORY[0x24BDAC7A8](v57);
          v69[-4] = v58;
          v69[-3] = sub_249EBDA9C;
          v69[-2] = v59;
          v61 = v60;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
          sub_249F1F874();

          v62 = v82;
          v63 = (void *)sub_249F1F304();
          v64 = objc_msgSend(v62, sel_featureValueForName_, v63);

          if (v64)
          {
            v65 = objc_msgSend(v64, sel_multiArrayValue);
            if (v65)
            {
              v66 = v65;
              v67 = objc_msgSend(v65, sel_objectAtIndexedSubscript_, 0);

              LOBYTE(v66) = objc_msgSend(v67, sel_BOOLValue);
              swift_unknownObjectRelease();

              (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v56);
              (*(void (**)(char *, uint64_t))(v70 + 8))(v74, v71);
              v17 = v66 ^ 1;
              return v17 & 1;
            }
          }
          sub_249ECFA80();
          swift_allocError();
          *v68 = 3;
          swift_willThrow();

          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v56);
        }
        else
        {
          sub_249ECFA80();
          swift_allocError();
          *v52 = 2;
          swift_willThrow();

          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v44);
        }
        (*(void (**)(char *, uint64_t))(v70 + 8))(v74, v71);
      }
      return v17 & 1;
    }
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_249ECEF00(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_inputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v5 = sub_249F1F208();

  *a2 = v5;
}

uint64_t sub_249ECEFA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  CGImage *v17;
  _BYTE *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = a2;
  v28 = sub_249F1E3C8();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE208);
  v27 = *(_QWORD *)(v29 - 8);
  v6 = MEMORY[0x24BDAC7A8](v29);
  v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE210);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE218);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249F1E3BC();
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v17 = a1;
  sub_249F1E368();
  if (v2)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    sub_249DCC2FC((uint64_t)v12, &qword_2578DE210);
    sub_249ECFA80();
    swift_allocError();
    *v18 = 1;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    CGImageGetWidth(v17);
    CGImageGetHeight(v17);
    sub_249F1E3B0();
    sub_249F1E35C();
    v20 = v26;
    v21 = v28;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v5, *MEMORY[0x24BEDFC70], v28);
    sub_249F1E380();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
    v22 = v27;
    v23 = v29;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v25, v9, v29);
    sub_249F1E3A4();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_249ECF2AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  int v49;

  v27 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1F8);
  v29 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v26 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1D8);
  v28 = a1;
  v12 = sub_249F1E2FC();
  v13 = sub_249F1E308();
  v49 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_249F234B0;
  *(_OWORD *)(v14 + 32) = xmmword_249F21760;
  *(_QWORD *)(v14 + 48) = v12;
  *(_QWORD *)(v14 + 56) = v13;
  v30 = v12;
  v24 = v13;
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v25 = v11;
  sub_249F1F0A0();
  v22 = v9;
  sub_249F1F010();
  v23 = sub_249DDFC68(&qword_2578DE200, &qword_2578DE1F8, MEMORY[0x24BDBFD50]);
  sub_249F1F0C4();
  v15 = *(void (**)(char *, uint64_t))(v29 + 8);
  v15(v8, v3);
  v43 = v12;
  v44 = v13;
  v16 = v28;
  v45 = v28;
  v46 = 0;
  v47 = &unk_251B5A748;
  v48 = &unk_251B5A718;
  v29 = MEMORY[0x24BEE4AE0] + 8;
  sub_249F1F028();
  v15(v6, v3);
  v17 = v25;
  sub_249F1F010();
  sub_249F1F0C4();
  v15(v8, v3);
  v18 = v24;
  v37 = v30;
  v38 = v24;
  v39 = v16;
  v40 = 1;
  v41 = &unk_251B5A748;
  v42 = &unk_251B5A718;
  sub_249F1F028();
  v15(v6, v3);
  v19 = v22;
  sub_249F1F010();
  sub_249F1F0C4();
  v15(v8, v3);
  v31 = v30;
  v32 = v18;
  v33 = v28;
  v34 = 2;
  v35 = &unk_251B5A748;
  v36 = &unk_251B5A718;
  sub_249F1F028();
  v15(v6, v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v27, v17, v19);
}

uint64_t sub_249ECF6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
  v15 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      if ((unint64_t)(*(_QWORD *)(a4 + 32) - 0x2000000000000000) >> 62 == 3)
      {
        v20 = a7;
        v21 = result;
        sub_249F1E41C();
        v19 = sub_249F1E350();
        MEMORY[0x24BDAC7A8](v19);
        *(&v20 - 4) = (uint64_t)v18;
        *(&v20 - 3) = a9;
        *(&v20 - 2) = a8;
        *(&v20 - 1) = a10;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1D8);
        sub_249F1E338();
        return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v21);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_249ECF840(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = sub_249F1E38C();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a3 + 16) <= a4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a5 + 16) > a4)
    return sub_249F1E398();
LABEL_7:
  __break(1u);
  return result;
}

void sub_249ECF8E4()
{
  ManagedMLModel.loadResources()();
}

void sub_249ECF904()
{
  ManagedMLModel.unloadResources()();
}

void sub_249ECF924(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_249EDA304(*(_QWORD *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

CGColorSpace *sub_249ECF940(CGColorSpace *result, size_t a2, size_t a3)
{
  CGColorSpace *v5;
  CGColorSpace *v6;
  CGContext *v7;
  CGImageRef Image;
  _BYTE *v9;
  _BYTE *v10;

  if ((a2 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = result;
  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = CGBitmapContextCreate(0, a2, a3, 8uLL, 4 * a2, result, 5u);

  if (v7)
  {
    CGContextSetInterpolationQuality(v7, kCGInterpolationHigh);
    sub_249F1F7C0();
    Image = CGBitmapContextCreateImage(v7);
    if (Image)
    {
      v5 = Image;
    }
    else
    {
      sub_249ECFA80();
      swift_allocError();
      *v10 = 0;
      swift_willThrow();
    }

  }
  else
  {
    sub_249ECFA80();
    swift_allocError();
    *v9 = 0;
    swift_willThrow();
  }
  return v5;
}

unint64_t sub_249ECFA80()
{
  unint64_t result;

  result = qword_2578DE1E8;
  if (!qword_2578DE1E8)
  {
    result = MEMORY[0x24BD06528](&unk_249F312FC, &type metadata for SafetyChecker.SafetyCheckError);
    atomic_store(result, (unint64_t *)&qword_2578DE1E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SafetyChecker()
{
  return &type metadata for SafetyChecker;
}

uint64_t storeEnumTagSinglePayload for SafetyChecker.SafetyCheckError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_249ECFB20 + 4 * byte_249F31255[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_249ECFB54 + 4 * byte_249F31250[v4]))();
}

uint64_t sub_249ECFB54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249ECFB5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249ECFB64);
  return result;
}

uint64_t sub_249ECFB70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249ECFB78);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_249ECFB7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249ECFB84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafetyChecker.SafetyCheckError()
{
  return &type metadata for SafetyChecker.SafetyCheckError;
}

unint64_t sub_249ECFBA4()
{
  unint64_t result;

  result = qword_2578DE1F0;
  if (!qword_2578DE1F0)
  {
    result = MEMORY[0x24BD06528](&unk_249F312D4, &type metadata for SafetyChecker.SafetyCheckError);
    atomic_store(result, (unint64_t *)&qword_2578DE1F0);
  }
  return result;
}

uint64_t sub_249ECFBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_249ECF6B4(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t sub_249ECFC14(uint64_t a1)
{
  uint64_t v1;

  return sub_249ECF840(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

_QWORD *sub_249ECFC30(uint64_t a1)
{
  _QWORD *result;
  int v3;
  char v4;
  uint64_t v5;

  result = (_QWORD *)sub_249DD85C8(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_QWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_249ED15B8(&v5, (uint64_t)result, v3, 0, a1);
}

uint64_t sub_249ECFCB8(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_249DFB680(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_249ED1648(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Encoder.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall Encoder.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

void Encoder.encode(_:scaleFactor:random:)(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  char *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  id v73;
  void *v74;
  id v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  _BYTE *v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  float v112;
  float v113;
  unint64_t v114;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  float v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  id v137;
  id v138;
  float v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  id v145;
  _QWORD *v146;
  BOOL v147;
  uint64_t inited;
  id v149;
  uint64_t v150;
  id v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  id v157;
  _BYTE *v158;
  uint64_t v159;
  id v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  id v183[28];

  v173 = a2;
  v183[27] = *(id *)MEMORY[0x24BDAC8D0];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1F8);
  v170 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v172 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v171 = (char *)&v159 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v169 = (char *)&v159 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v159 - v17;
  v179 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v174 = *(_QWORD *)(v179 - 8);
  v19 = MEMORY[0x24BDAC7A8](v179);
  v177 = (char *)&v159 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v175 = (char *)&v159 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v178 = (char *)&v159 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v176 = (char *)&v159 - v25;
  v181 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue;
  v26 = *(void **)&a3[OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue];
  v183[3] = a3;
  v183[4] = sub_249EBD358;
  v183[5] = 0;
  v27 = sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v28 = v26;
  v180 = v27;
  sub_249F1F874();
  if (v5)
    goto LABEL_75;

  v29 = v183[0];
  v30 = objc_msgSend(v183[0], sel_type);

  if (v30 != (id)4)
  {
    if (v30 != (id)5)
    {
      sub_249ED1908();
      swift_allocError();
      *v95 = 1;
      swift_willThrow();
      return;
    }
    v31 = (void *)sub_249F17E20(0, 1, 0, 1);
    v165 = 0;
    v166 = v18;
    v168 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
    v32 = swift_allocObject();
    v167 = xmmword_249F31240;
    *(_OWORD *)(v32 + 16) = xmmword_249F31240;
    v33 = sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
    *(_QWORD *)(v32 + 32) = sub_249F1F934();
    *(_QWORD *)(v32 + 40) = sub_249F1F934();
    v34 = objc_msgSend(v31, sel_shape);
    v35 = sub_249F1F544();

    if ((v35 & 0xC000000000000001) != 0)
    {
      v36 = (id)MEMORY[0x24BD056B8](2, v35);
    }
    else
    {
      if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
      {
        __break(1u);
        goto LABEL_69;
      }
      v36 = *(id *)(v35 + 48);
    }
    v37 = v36;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v32 + 48) = v37;
    v38 = objc_msgSend(v31, sel_shape);
    v39 = sub_249F1F544();

    v164 = v10;
    if ((v39 & 0xC000000000000001) != 0)
    {
      v40 = (id)MEMORY[0x24BD056B8](3, v39);
LABEL_10:
      v41 = v40;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v32 + 56) = v41;
      v183[0] = (id)v32;
      sub_249F1F55C();
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = v167;
      *(_QWORD *)(v42 + 32) = sub_249F1F934();
      *(_QWORD *)(v42 + 40) = sub_249F1F934();
      *(_QWORD *)(v42 + 48) = sub_249F1F934();
      *(_QWORD *)(v42 + 56) = sub_249F1F934();
      v183[0] = (id)v42;
      sub_249F1F55C();
      v43 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v44 = (void *)sub_249F1F538();
      v183[0] = 0;
      v45 = v31;
      v46 = objc_msgSend(v31, sel_sliceAtOrigin_shape_squeeze_error_, v43, v44, 0, v183);

      v47 = v183[0];
      if (!v46)
      {
        v115 = v183[0];
        swift_bridgeObjectRelease();
        sub_249F1E710();

        swift_willThrow();
        return;
      }
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v167;
      v49 = v47;
      *(_QWORD *)(v48 + 32) = sub_249F1F934();
      *(_QWORD *)(v48 + 40) = sub_249F1F934();
      *(_QWORD *)(v48 + 48) = sub_249F1F934();
      *(_QWORD *)(v48 + 56) = sub_249F1F934();
      v183[0] = (id)v48;
      sub_249F1F55C();
      v50 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v51 = (void *)sub_249F1F538();
      v183[0] = 0;
      v52 = objc_msgSend(v45, sel_sliceAtOrigin_shape_squeeze_error_, v50, v51, 0, v183);

      v53 = v183[0];
      v163 = v52;
      if (!v52)
      {
        v116 = v183[0];
        swift_bridgeObjectRelease();
        sub_249F1E710();

        swift_willThrow();
        return;
      }
      v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = v167;
      v55 = v53;
      *(_QWORD *)(v54 + 32) = sub_249F1F934();
      *(_QWORD *)(v54 + 40) = sub_249F1F934();
      *(_QWORD *)(v54 + 48) = sub_249F1F934();
      *(_QWORD *)(v54 + 56) = sub_249F1F934();
      v183[0] = (id)v54;
      sub_249F1F55C();
      v56 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v57 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v183[0] = 0;
      v58 = objc_msgSend(v45, sel_sliceAtOrigin_shape_squeeze_error_, v56, v57, 0, v183);

      v59 = v183[0];
      if (!v58)
      {
        v145 = v183[0];
        sub_249F1E710();

        swift_willThrow();
        return;
      }
      *(_QWORD *)&v167 = v45;
      v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_249F31350;
      v61 = v163;
      *(_QWORD *)(v60 + 32) = v46;
      *(_QWORD *)(v60 + 40) = v61;
      *(_QWORD *)(v60 + 48) = v58;
      v183[0] = (id)v60;
      sub_249F1F55C();
      v62 = v46;
      v63 = sub_249D9D9F4(0, &qword_2578DDE20);
      v64 = v59;
      v162 = v62;
      v163 = v61;
      v161 = v58;
      v159 = v63;
      v65 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v66 = objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v65, 1, 65568);

      v160 = v66;
      v67 = objc_msgSend(v66, sel_shape);
      v33 = sub_249F1F544();

      if (!(v33 >> 62))
      {
        v68 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_15;
      }
LABEL_70:
      swift_bridgeObjectRetain();
      v68 = sub_249F1FBEC();
      swift_bridgeObjectRelease();
LABEL_15:
      v10 = v164;
      v69 = v166;
      v70 = (void *)v167;
      if (v68)
      {
        v183[0] = (id)MEMORY[0x24BEE4AF8];
        sub_249DB677C(0, v68 & ~(v68 >> 63), 0);
        if (v68 < 0)
          __break(1u);
        v71 = 0;
        v72 = v183[0];
        do
        {
          if ((v33 & 0xC000000000000001) != 0)
            v73 = (id)MEMORY[0x24BD056B8](v71, v33);
          else
            v73 = *(id *)(v33 + 8 * v71 + 32);
          v74 = v73;
          v75 = objc_msgSend(v73, sel_integerValue);

          v183[0] = v72;
          v77 = v72[2];
          v76 = v72[3];
          if (v77 >= v76 >> 1)
          {
            sub_249DB677C(v76 > 1, v77 + 1, 1);
            v72 = v183[0];
          }
          ++v71;
          v72[2] = v77 + 1;
          v72[v77 + 4] = v75;
        }
        while (v68 != v71);
        swift_bridgeObjectRelease();
        v10 = v164;
        v69 = v166;
        v70 = (void *)v167;
      }
      else
      {
        swift_bridgeObjectRelease();
        v72 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v146 = (_QWORD *)sub_249ED1BE4((uint64_t)a3);
      v147 = sub_249ED1544(v72, v146);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v147)
      {
        sub_249ED1908();
        swift_allocError();
        *v158 = 0;
        swift_willThrow();

        return;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_249F21770;
      MEMORY[0x24BDAC7A8](inited);
      *(&v159 - 4) = (uint64_t)a3;
      *(&v159 - 3) = (uint64_t)sub_249EBD358;
      *(&v159 - 2) = 0;
      v28 = v149;
      v150 = v165;
      sub_249F1F874();
      if (!v150)
      {

        v151 = v183[0];
        v152 = objc_msgSend(v183[0], sel_name);

        v153 = sub_249F1F328();
        v155 = v154;

        *(_QWORD *)(inited + 32) = v153;
        *(_QWORD *)(inited + 40) = v155;
        *(_QWORD *)(inited + 72) = v159;
        v156 = v160;
        *(_QWORD *)(inited + 48) = v160;
        v157 = v156;
        sub_249DAE8D4(inited);

        goto LABEL_26;
      }
      while (1)
      {
LABEL_75:

        swift_unexpectedError();
        __break(1u);
      }
    }
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      v40 = *(id *)(v39 + 56);
      goto LABEL_10;
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v78 = v18;
  v168 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
  v79 = swift_initStackObject();
  *(_OWORD *)(v79 + 16) = xmmword_249F21770;
  MEMORY[0x24BDAC7A8](v79);
  *(&v159 - 4) = (uint64_t)a3;
  *(&v159 - 3) = (uint64_t)sub_249EBD358;
  *(&v159 - 2) = 0;
  v81 = v80;
  sub_249F1F874();

  v82 = v183[0];
  v83 = objc_msgSend(v183[0], sel_name);

  v84 = sub_249F1F328();
  v86 = v85;

  *(_QWORD *)(v79 + 32) = v84;
  *(_QWORD *)(v79 + 40) = v86;
  type metadata accessor for CVBuffer(0);
  *(_QWORD *)(v79 + 72) = v87;
  *(_QWORD *)(v79 + 48) = a1;
  v88 = a1;
  sub_249DAE8D4(v79);
  v69 = v78;
LABEL_26:
  v89 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
  v90 = sub_249EFD4E8();
  v91 = MEMORY[0x24BDAC7A8](v90);
  *(&v159 - 2) = v91;
  MEMORY[0x24BDAC7A8](v91);
  *(&v159 - 4) = (uint64_t)a3;
  *(&v159 - 3) = (uint64_t)sub_249EBDA9C;
  *(&v159 - 2) = v92;
  v94 = v93;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
  sub_249F1F874();
  v165 = 0;

  v96 = v183[0];
  v97 = objc_msgSend(v183[0], sel_featureNames);
  v98 = sub_249F1F700();

  v28 = (id)sub_249ECFCB8(v98);
  v100 = v99;
  swift_bridgeObjectRelease();
  if (!v100)
  {
    __break(1u);
    goto LABEL_73;
  }
  v28 = (id)sub_249F1F304();
  swift_bridgeObjectRelease();
  v101 = objc_msgSend(v96, sel_featureValueForName_, v28);

  if (!v101)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  *(_QWORD *)&v167 = v96;
  v28 = objc_msgSend(v101, sel_multiArrayValue);

  if (!v28)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v102 = sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v163 = v28;
  v181 = v102;
  sub_249F1F04C();
  v103 = v169;
  sub_249F1F010();
  sub_249DDFC68(&qword_2578DE200, &qword_2578DE1F8, MEMORY[0x24BDBFD50]);
  sub_249F1F0D0();
  v104 = *(void (**)(char *, uint64_t))(v170 + 8);
  v104(v103, v10);
  v105 = v171;
  sub_249F1F010();
  v106 = v172;
  sub_249F1F0D0();
  v104(v105, v10);
  v107 = sub_249F1F07C();
  v171 = (char *)v104;
  v104(v106, v10);
  v108 = *(_QWORD *)(v107 + 16);
  v166 = v69;
  if (v108)
  {
    v183[0] = (id)MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v108, 0);
    v109 = 0;
    v110 = v183[0];
    v111 = *((_QWORD *)v183[0] + 2);
    do
    {
      v112 = *(float *)(v107 + 4 * v109 + 32);
      if (v112 <= -30.0)
        v112 = -30.0;
      if (v112 <= 20.0)
        v113 = v112;
      else
        v113 = 20.0;
      v183[0] = v110;
      v114 = v110[3];
      if (v111 >= v114 >> 1)
      {
        sub_249EB5D34(v114 > 1, v111 + 1, 1);
        v110 = v183[0];
      }
      ++v109;
      v110[2] = v111 + 1;
      *((float *)v110 + v111++ + 8) = v113;
    }
    while (v108 != v109);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v110 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v183[0] = v110;
  v164 = v10;
  sub_249F1F040();
  v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  v118 = sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  v180 = v117;
  v172 = (char *)v118;
  sub_249F1EFEC();
  v119 = sub_249F1F07C();
  v120 = *(_QWORD *)(v119 + 16);
  v162 = v90;
  if (v120)
  {
    v183[0] = (id)MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v120, 0);
    v121 = 0;
    v122 = v183[0];
    v123 = *((_QWORD *)v183[0] + 2);
    do
    {
      v124 = expf(*(float *)(v119 + 4 * v121 + 32) * 0.5);
      v183[0] = v122;
      v125 = v122[3];
      if (v123 >= v125 >> 1)
      {
        sub_249EB5D34(v125 > 1, v123 + 1, 1);
        v122 = v183[0];
      }
      ++v121;
      v122[2] = v123 + 1;
      *((float *)v122 + v123++ + 8) = v124;
    }
    while (v120 != v121);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v122 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v183[0] = v122;
  sub_249F1EFE0();
  sub_249F1EFEC();
  v126 = sub_249F1F07C();
  v127 = sub_249F1F07C();
  MEMORY[0x24BDAC7A8](v127);
  *(&v159 - 2) = v173;
  v128 = v165;
  sub_249ED19AC(v126, v127, (float (*)(uint64_t, float, float))sub_249ED194C);
  v130 = v129;
  v165 = v128;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v183[0] = v130;
  sub_249F1EFE0();
  sub_249F1EFEC();
  v131 = sub_249F1F07C();
  v132 = *(_QWORD *)(v131 + 16);
  if (v132)
  {
    v183[0] = (id)MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v132, 0);
    v133 = 0;
    v134 = v183[0];
    v135 = *((_QWORD *)v183[0] + 2);
    v136 = v164;
    v137 = v163;
    v138 = v162;
    do
    {
      v139 = *(float *)(v131 + 4 * v133 + 32);
      v183[0] = v134;
      v140 = v134[3];
      if (v135 >= v140 >> 1)
      {
        sub_249EB5D34(v140 > 1, v135 + 1, 1);
        v134 = v183[0];
      }
      ++v133;
      v134[2] = v135 + 1;
      *((float *)v134 + v135++ + 8) = v139 * a5;
    }
    while (v132 != v133);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v134 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v136 = v164;
    v137 = v163;
    v138 = v162;
  }
  v183[0] = v134;
  v141 = v179;
  v142 = v177;
  v143 = sub_249F1EFE0();
  v182 = &unk_251B5AA60;
  sub_249F0AE30(v143);
  sub_249F1EFEC();

  swift_unknownObjectRelease();
  v144 = *(void (**)(char *, uint64_t))(v174 + 8);
  v144(v142, v141);
  v144(v175, v141);
  v144(v178, v141);
  ((void (*)(char *, uint64_t))v171)(v166, v136);
  v144(v176, v141);
}

DiffusionBase::Encoder::Error_optional __swiftcall Encoder.Error.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  DiffusionBase::Encoder::Error_optional v2;

  v1 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = DiffusionBase_Encoder_Error_unsupportedInputFormat;
  else
    v2.value = DiffusionBase_Encoder_Error_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

unint64_t Encoder.Error.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000016;
  else
    return 0xD00000000000001ALL;
}

uint64_t sub_249ED1428(char *a1, char *a2)
{
  return sub_249F131DC(*a1, *a2);
}

uint64_t sub_249ED1434()
{
  return sub_249EF81B8();
}

uint64_t sub_249ED143C()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249ED149C()
{
  return sub_249EF859C();
}

uint64_t sub_249ED14A4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_249F1FC4C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_249ED1500(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000016;
  else
    v2 = 0xD00000000000001ALL;
  v3 = 0x8000000249F38DD0;
  if (*v1)
    v3 = 0x8000000249F38DF0;
  *a1 = v2;
  a1[1] = v3;
}

BOOL sub_249ED1544(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

_QWORD *sub_249ED15B8(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  id v7;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * a2);
    *result = v6;
    swift_bridgeObjectRetain();
    v7 = v6;
    return (_QWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_249ED1648(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _s13DiffusionBase7EncoderV7modelAt13configurationAC10Foundation3URLV_So20MLModelConfigurationCtcfC_0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v20 = a1;
  v21 = a2;
  v2 = sub_249F1E7F4();
  v18 = *(_QWORD *)(v2 - 8);
  v19 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v17 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_249F1F868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_249F1F85C();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_249F1F1D8();
  MEMORY[0x24BDAC7A8](v9);
  sub_249D9D9F4(0, &qword_2578DDB28);
  sub_249F1F1CC();
  v22 = MEMORY[0x24BEE4AF8];
  sub_249EBDAB4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB38);
  sub_249DDFC68(&qword_2578DDB40, &qword_2578DDB38, MEMORY[0x24BEE12C8]);
  sub_249F1FA0C();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE5750], v4);
  sub_249F1F88C();
  v11 = v17;
  v10 = v18;
  v13 = v19;
  v12 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v14 = ManagedMLModel.init(modelAt:configuration:name:)(v11, v21, (uint64_t)"latent image encoder", 20, 2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v13);
  return v14;
}

unint64_t sub_249ED1908()
{
  unint64_t result;

  result = qword_2578DE220;
  if (!qword_2578DE220)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for Encoder.Error, &type metadata for Encoder.Error);
    atomic_store(result, (unint64_t *)&qword_2578DE220);
  }
  return result;
}

float sub_249ED194C(float a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = a1;
  v5 = a2;
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v3, v6);
  return (*(double (**)(uint64_t, uint64_t, double, double))(v7 + 8))(v6, v7, v4, v5);
}

void sub_249ED19AC(uint64_t a1, uint64_t a2, float (*a3)(uint64_t, float, float))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  sub_249EB5D34(0, v7, 0);
  v27 = v6;
  v29 = a2;
  v30 = a1;
  v28 = v5;
  v26 = v7;
  if (v7)
  {
    v8 = v5;
    v9 = (float *)(a1 + 32);
    v10 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v12 = v6;
    v13 = v8;
    while (v13)
    {
      if (!v12)
        goto LABEL_26;
      v14 = a3(v11, *v9, *v10);
      v16 = *(_QWORD *)(v33 + 16);
      v15 = *(_QWORD *)(v33 + 24);
      if (v16 >= v15 >> 1)
        v11 = sub_249EB5D34(v15 > 1, v16 + 1, 1);
      --v12;
      *(_QWORD *)(v33 + 16) = v16 + 1;
      *(float *)(v33 + 4 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v9;
      if (!--v7)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v17 = 0;
    if (v26 <= v27)
      v18 = v27;
    else
      v18 = v26;
    v31 = v18 - v26;
    v19 = v28 - v26;
    v20 = 4 * v26 + 32;
    v21 = v30 + v20;
    v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17)
        goto LABEL_24;
      if (v31 == v17)
        goto LABEL_28;
      v23 = a3(v11, *(float *)(v21 + 4 * v17), *(float *)(v22 + 4 * v17));
      v25 = *(_QWORD *)(v33 + 16);
      v24 = *(_QWORD *)(v33 + 24);
      if (v25 >= v24 >> 1)
        v11 = sub_249EB5D34(v24 > 1, v25 + 1, 1);
      *(_QWORD *)(v33 + 16) = v25 + 1;
      *(float *)(v33 + 4 * v25 + 32) = v23;
      if (v19 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_249ED1BE4(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  id v15;
  _QWORD *v16;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v2 = v1;
  sub_249F1F874();

  v3 = objc_msgSend(v15, sel_multiArrayConstraint);
  if (!v3)
    goto LABEL_17;
  v4 = objc_msgSend(v3, sel_shape);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v5 = sub_249F1F544();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_14;
LABEL_4:
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_249DB677C(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v8 = v16;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x24BD056B8](v7, v5);
      else
        v9 = *(id *)(v5 + 8 * v7 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_integerValue);

      v13 = v16[2];
      v12 = v16[3];
      if (v13 >= v12 >> 1)
        sub_249DB677C(v12 > 1, v13 + 1, 1);
      ++v7;
      v16[2] = v13 + 1;
      v16[v13 + 4] = v11;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t sub_249ED1E44()
{
  unint64_t result;

  result = qword_2578DE228;
  if (!qword_2578DE228)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for Encoder.Error, &type metadata for Encoder.Error);
    atomic_store(result, (unint64_t *)&qword_2578DE228);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Encoder(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

void destroy for Encoder(uint64_t a1)
{
  swift_release();

}

_QWORD *assignWithCopy for Encoder(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for Encoder(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Encoder()
{
  return &type metadata for Encoder;
}

uint64_t storeEnumTagSinglePayload for Encoder.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249ED1FD0 + 4 * byte_249F31365[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249ED2004 + 4 * byte_249F31360[v4]))();
}

uint64_t sub_249ED2004(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249ED200C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249ED2014);
  return result;
}

uint64_t sub_249ED2020(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249ED2028);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249ED202C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249ED2034(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Encoder.Error()
{
  return &type metadata for Encoder.Error;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionRetoningConditioner.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall AppleDiffusionRetoningConditioner.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

uint64_t AppleDiffusionRetoningConditioner.encode(retoningBuffer:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  id v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t result;
  id v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;

  v5 = sub_249F182A4();
  if (v2)
    return a1;
  v6 = (void *)v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE230);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  *(_QWORD *)(inited + 32) = sub_249ED2558(a2);
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = v6;
  v9 = v6;
  v10 = sub_249EAF630(inited);
  sub_249EFB744(v10);
  swift_bridgeObjectRelease();
  objc_allocWithZone(MEMORY[0x24BDBFF80]);
  v11 = sub_249EFD4E8();
  v26 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v26);
  v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
  sub_249F1F874();

  v15 = (id)v29;
  v16 = objc_msgSend((id)v29, sel_featureNames);
  sub_249F1F700();

  v17 = swift_bridgeObjectRetain();
  v18 = sub_249DBDDCC(v17);
  swift_bridgeObjectRelease();
  v29 = (unint64_t)v18;
  sub_249ED276C((uint64_t *)&v29);
  swift_bridgeObjectRelease();
  v19 = v29;
  v29 = MEMORY[0x24BEE4AF8];
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {

    swift_release();
    a1 = MEMORY[0x24BEE4AF8];
LABEL_13:
    swift_unknownObjectRelease();

    return a1;
  }
  v27 = v19;
  v28 = v9;
  v21 = v19 + 40;
  while (1)
  {
    swift_bridgeObjectRetain();
    v22 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v23 = objc_msgSend(v15, sel_featureValueForName_, v22, v27);

    if (!v23)
      break;
    v24 = objc_msgSend(v23, sel_multiArrayValue);

    if (!v24)
      goto LABEL_15;
    v25 = v24;
    MEMORY[0x24BD05130]();
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_249F1F568();
    v21 += 16;
    sub_249F1F598();
    sub_249F1F55C();

    if (!--v20)
    {

      swift_release();
      a1 = v29;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t AppleDiffusionRetoningConditioner.init(modelAt:configuration:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v8 = ManagedMLModel.init(modelAt:configuration:name:)(v7, a2, (uint64_t)"local_conditioning_producer_skintone_emoji", 42, 2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v8;
}

void sub_249ED24C8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_inputDescriptionsByName);

  sub_249ECE460();
  v5 = sub_249F1F208();

  *a2 = v5;
}

uint64_t sub_249ED2558(uint64_t a1)
{
  id v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v1 = *(id *)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1E0);
  sub_249F1F874();

  v2 = swift_bridgeObjectRetain();
  v3 = sub_249ED96F8(v2);
  swift_bridgeObjectRelease();
  v16 = v3;
  sub_249ED276C((uint64_t *)&v16);
  swift_bridgeObjectRelease();
  if (v16[2])
  {
    v5 = v16[4];
    v4 = v16[5];
    swift_bridgeObjectRetain();
    v6 = swift_release();
    MEMORY[0x24BDAC7A8](v6);
    v8 = v7;
    sub_249F1F874();

    v9 = v16;
    if (v16[2])
    {
      v10 = sub_249DB7D8C(v5, v4);
      if ((v11 & 1) != 0)
      {
        v12 = *(id *)(v9[7] + 8 * v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = objc_msgSend(v12, sel_name);

        v14 = sub_249F1F328();
        return v14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
  }
  swift_release();
  __break(1u);
  swift_unexpectedError();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_249ED276C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_249ECDA88(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_249ED27D4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_249ED27D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_249F1FDFC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_249ED2EBC(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_249ED2F88((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_249E750A8((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_249F1F58C();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_249F1FE2C();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_249F1FE2C()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_249E74C00(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_249E74C00((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_249ED2F88((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_249F1FE2C() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

uint64_t sub_249ED2EBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_249F1FE2C(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_249ED2F88(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_249F1FE2C() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_249F1FE2C() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_249E74CFC((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionRetoningConditioner()
{
  return &type metadata for AppleDiffusionRetoningConditioner;
}

void sub_249ED3230(_QWORD *a1@<X8>)
{
  sub_249ECF924(a1);
}

DiffusionBase::Unet __swiftcall Unet.init(chunksAt:configuration:)(Swift::OpaquePointer chunksAt, MLModelConfiguration configuration)
{
  uint64_t v3;
  _QWORD v5[4];

  v5[2] = configuration.super.isa;
  v5[3] = &unk_251B5A830;
  v3 = sub_249EBB5AC((uint64_t)chunksAt._rawValue, (void (*)(_QWORD, char *))sub_249EBB8F0, (uint64_t)v5);

  swift_bridgeObjectRelease();
  return (DiffusionBase::Unet)v3;
}

uint64_t Unet.init(modelAt:configuration:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_249F21760;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v9 = a2;
  *(_QWORD *)(v8 + 32) = ManagedMLModel.init(modelAt:configuration:name:)(v7, v9, (uint64_t)"noise_predictor", 15, 2);
  v12 = v8;
  sub_249F1F55C();
  v10 = v12;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v10;
}

uint64_t sub_249ED33CC(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a2;
  v40 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v39 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE000);
  v10 = MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v36 = (_QWORD *)((char *)v30 - v13);
  MEMORY[0x24BDAC7A8](v12);
  v35 = (uint64_t)v30 - v14;
  v45 = MEMORY[0x24BEE4AF8];
  sub_249F1FB44();
  v15 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  v33 = v15;
  if (v15)
  {
    v16 = 0;
    v17 = *(unsigned __int8 *)(v8 + 80);
    v30[1] = a3;
    v18 = a3 + ((v17 + 32) & ~v17);
    v32 = *(_QWORD *)(v8 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    while (1)
    {
      v34(v6, v18, v7);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v19(v6, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        break;
      v31 = v19;
      v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v21 = v39;
      v20(v39, v6, v7);
      v22 = v38;
      v23 = &v37[*(int *)(v38 + 48)];
      v20(v23, v21, v7);
      v24 = *(int *)(v22 + 48);
      v25 = (uint64_t)v36;
      v26 = (char *)v36 + v24;
      *v36 = v16;
      v20(v26, v23, v7);
      v27 = v35;
      sub_249DCB1B0(v25, v35, &qword_2578DE000);
      v28 = v42;
      v40(&v44, v27, &v43);
      sub_249DCC2FC(v27, &qword_2578DE000);
      if (v28)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
      ++v16;
      sub_249F1FB20();
      v42 = 0;
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
      v18 += v32;
      if (v33 == v16)
      {
        v31(v6, 1, 1, v7);
        break;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_249DCC2FC((uint64_t)v6, &qword_2578DDDD8);
  swift_bridgeObjectRelease();
  return v45;
}

unint64_t sub_249ED3708(uint64_t a1)
{
  void *v1;
  unint64_t result;
  uint64_t v4;
  _QWORD v5[4];

  result = (unint64_t)objc_msgSend(v1, sel_count);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    v5[2] = a1;
    v5[3] = v1;
    return (unint64_t)sub_249EB3E9C(sub_249ED707C, (uint64_t)v5, 0, v4);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Unet.loadResources()()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v3 = v0;
  if (v0 >> 62)
    goto LABEL_27;
  v4 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_249F1FBEC())
  {
    v32 = v4;
    v33 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      while (1)
      {
        v6 = MEMORY[0x24BD056B8](v5, v3);
        if (__OFADD__(v5, 1))
          break;
        v7 = v6;
        v34 = v5 + 1;
        if (qword_2578DDA10 != -1)
          swift_once();
        v8 = sub_249F1EF38();
        __swift_project_value_buffer(v8, (uint64_t)qword_2578FF458);
        swift_retain_n();
        v9 = sub_249F1EF20();
        v10 = sub_249F1F814();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = swift_slowAlloc();
          v12 = swift_slowAlloc();
          v35 = v12;
          *(_DWORD *)v11 = 136446210;
          v13 = sub_249F1FA9C();
          *(_QWORD *)(v11 + 4) = sub_249E68CA8(v13, v14, &v35);
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_249D98000, v9, v10, "Loading resources for %{public}s", (uint8_t *)v11, 0xCu);
          swift_arrayDestroy();
          v15 = v12;
          v3 = v33;
          MEMORY[0x24BD06618](v15, -1, -1);
          v16 = v11;
          v4 = v32;
          MEMORY[0x24BD06618](v16, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        v17 = *(id *)(v7 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        sub_249F1F874();
        swift_unknownObjectRelease();
        if (v2)
          goto LABEL_24;

        ++v5;
        if (v34 == v4)
          goto LABEL_28;
      }
      __break(1u);
    }
    else
    {
      v18 = 0;
      v19 = &qword_2578DCF28[27];
      while (1)
      {
        v20 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        v21 = *(_QWORD *)(v3 + 8 * v18 + 32);
        v22 = v19[322];
        swift_retain();
        if (v22 != -1)
          swift_once();
        v23 = sub_249F1EF38();
        __swift_project_value_buffer(v23, (uint64_t)qword_2578FF458);
        swift_retain_n();
        v24 = sub_249F1EF20();
        v25 = sub_249F1F814();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = swift_slowAlloc();
          v27 = swift_slowAlloc();
          v35 = v27;
          *(_DWORD *)v26 = 136446210;
          v28 = sub_249F1FA9C();
          *(_QWORD *)(v26 + 4) = sub_249E68CA8(v28, v29, &v35);
          swift_release_n();
          v4 = v32;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_249D98000, v24, v25, "Loading resources for %{public}s", (uint8_t *)v26, 0xCu);
          swift_arrayDestroy();
          v30 = v27;
          v3 = v33;
          MEMORY[0x24BD06618](v30, -1, -1);
          v31 = v26;
          v19 = qword_2578DCF28 + 216;
          MEMORY[0x24BD06618](v31, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        v17 = *(id *)(v21 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        sub_249F1F874();
        swift_release();
        if (v2)
        {
LABEL_24:
          swift_bridgeObjectRelease();

          return;
        }

        ++v18;
        if (v20 == v4)
          goto LABEL_28;
      }
    }
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
  }
LABEL_28:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Unet.unloadResources()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = v0;
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = sub_249F1FBEC();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x24BD056B8](i, v1);
      else
        swift_retain();
      ManagedMLModel.unloadResources()();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Unet.prewarmResources()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  if (v0 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_249F1FBEC();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x24BD056B8](v3 - 4, v1);
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
            goto LABEL_14;
        }
        else
        {
          swift_retain();
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        ManagedMLModel.loadResources()();
        if (v7)
        {
          swift_release();
          break;
        }
        ManagedMLModel.unloadResources()();
        swift_release();
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
}

unint64_t sub_249ED3E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  unint64_t result;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v51 = a3;
  v52 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC0);
  v55 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v45 - v12;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v58 = *(_QWORD *)(v56 - 8);
  v14 = MEMORY[0x24BDAC7A8](v56);
  v47 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v45 - v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
  v18 = swift_allocObject();
  v53 = xmmword_249F21910;
  *(_OWORD *)(v18 + 16) = xmmword_249F21910;
  *(float *)(v18 + 32) = (float)a2;
  *(float *)(v18 + 36) = (float)a2;
  v59 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  v57 = v17;
  sub_249F1EFEC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC8);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v53;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    v20 = sub_249F1FBEC();
    if (v20)
      goto LABEL_5;
    goto LABEL_22;
  }
  *(_DWORD *)(v19 + 32) = a2;
  *(_DWORD *)(v19 + 36) = a2;
  v59 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFD0);
  sub_249DDFC68(&qword_2578DDFD8, &qword_2578DDFD0, MEMORY[0x24BEE12C8]);
  sub_249F1EFEC();
  v49 = a1;
  v50 = v9;
  v54 = v13;
  v48 = v5;
  if (a5 >> 62)
    goto LABEL_21;
  v20 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v20)
  {
LABEL_5:
    v21 = 4;
    do
    {
      v22 = v21 - 4;
      if ((a5 & 0xC000000000000001) != 0)
      {
        v23 = MEMORY[0x24BD056B8](v21 - 4, a5);
        v24 = v21 - 3;
        if (__OFADD__(v22, 1))
          goto LABEL_18;
      }
      else
      {
        v23 = *(_QWORD *)(a5 + 8 * v21);
        swift_retain();
        v24 = v21 - 3;
        if (__OFADD__(v22, 1))
        {
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
      }
      v25 = *(void **)(v23 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
      if (v25)
      {
        v26 = objc_msgSend(v25, sel_modelDescription);
        v27 = objc_msgSend(v26, sel_inputDescriptionsByName);

        sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
        v28 = sub_249F1F208();

        if (*(_QWORD *)(v28 + 16))
        {
          sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
          if ((v29 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            sub_249D9D9F4(0, &qword_2578DDE20);
            v30 = v50;
            (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v46, v54, v50);
            sub_249DDFC68(&qword_2578DDFE8, &qword_2578DDFC0, MEMORY[0x24BDBFCD0]);
            v31 = sub_249F1F7FC();
            v32 = (void *)v31;
            v33 = v56;
            goto LABEL_23;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      ++v21;
    }
    while (v24 != v20);
  }
LABEL_22:
  swift_bridgeObjectRelease();
  sub_249D9D9F4(0, &qword_2578DDE20);
  v33 = v56;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v47, v57, v56);
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v31 = sub_249F1F7FC();
  v32 = (void *)v31;
  v30 = v50;
LABEL_23:
  MEMORY[0x24BDAC7A8](v31);
  *(&v45 - 4) = a5;
  *(&v45 - 3) = (uint64_t)v32;
  v34 = v52;
  *(&v45 - 2) = v51;
  *(&v45 - 1) = v34;
  v35 = v49;
  swift_bridgeObjectRetain();
  v36 = v48;
  v37 = sub_249ED33CC((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_249ED7128, (uint64_t)(&v45 - 6), v35);
  swift_bridgeObjectRelease();
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v30);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v33);

    return v33;
  }
  swift_bridgeObjectRetain();
  if (v37 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    sub_249F1FBE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_249F1FEC8();
  }
  swift_bridgeObjectRelease();
  v38 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
  v39 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(v38, sel_initWithFeatureProviderArray_, v39);

  v41 = v40;
  v42 = (void *)sub_249ED5574((uint64_t)v41, a5);

  result = (unint64_t)objc_msgSend(v42, sel_count);
  if ((result & 0x8000000000000000) == 0)
  {
    v44 = result;
    swift_unknownObjectRetain();
    v33 = sub_249EC3484(0, v44, v42);

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v30);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v56);
    swift_unknownObjectRelease();
    return v33;
  }
  __break(1u);
  return result;
}

void Unet.latentSampleShape.getter(uint64_t a1)
{
  sub_249ED4C04(a1, (uint64_t (*)(void))sub_249ED4784);
}

Swift::Bool __swiftcall Unet.usePORParameters()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  char v11;

  v1 = v0;
  if (v0 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v2 = sub_249F1FBEC();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x24BD056B8](v3 - 4, v1);
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_16;
        }
        else
        {
          v5 = *(_QWORD *)(v1 + 8 * v3);
          swift_retain();
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        v7 = *(void **)(v5 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
        if (v7)
        {
          v8 = objc_msgSend(v7, sel_modelDescription);
          v9 = objc_msgSend(v8, sel_inputDescriptionsByName);

          sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
          v10 = sub_249F1F208();

          if (*(_QWORD *)(v10 + 16))
          {
            sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
            if ((v11 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              return 1;
            }
          }
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_249ED468C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v8 = sub_249F1E7F4();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  if (*(_QWORD *)(a4 + 16) <= a1)
  {
    v16 = 2;
    v14 = "UnetChunk?";
    v15 = 10;
    goto LABEL_5;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    v13 = a4 + 24 * a1;
    v14 = *(const char **)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
    v16 = *(unsigned __int8 *)(v13 + 48);
LABEL_5:
    type metadata accessor for ManagedMLModel();
    swift_allocObject();
    return ManagedMLModel.init(modelAt:configuration:name:)(v10, a3, (uint64_t)v14, v15, v16);
  }
  __break(1u);
  return result;
}

uint64_t sub_249ED4784(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!sub_249F1FBEC())
    goto LABEL_8;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_9:
    v3 = MEMORY[0x24BD056B8](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(a1 + 32);
    swift_retain();
LABEL_6:
    v4 = swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BDAC7A8](v4);
    v6 = *(void **)(v3 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
    MEMORY[0x24BDAC7A8](v5);
    sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
    v7 = v6;
    sub_249F1F874();
    swift_release();

    return v9;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_249ED4930(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!sub_249F1FBEC())
    goto LABEL_8;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_9:
    v3 = MEMORY[0x24BD056B8](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(a1 + 32);
    swift_retain();
LABEL_6:
    v4 = swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BDAC7A8](v4);
    v6 = *(void **)(v3 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
    MEMORY[0x24BDAC7A8](v5);
    sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
    v7 = v6;
    sub_249F1F874();
    swift_release();

    return v9;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_249ED4ADC@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  uint64_t result;

  v9 = objc_msgSend(a1, sel_modelDescription);
  v10 = objc_msgSend(v9, sel_inputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v11 = sub_249F1F208();

  v12 = sub_249ECE068(a3, a4, a2);
  if (*(_QWORD *)(v11 + 16) && (v14 = sub_249DB7D8C(v12, v13), (v15 & 1) != 0))
  {
    v16 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v14);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a5 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

void Unet.latentTimeIdShape.getter(uint64_t a1)
{
  sub_249ED4C04(a1, (uint64_t (*)(void))sub_249ED4930);
}

void sub_249ED4C04(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (void *)a2();
  v3 = objc_msgSend(v2, sel_multiArrayConstraint);

  if (!v3)
    goto LABEL_16;
  v4 = objc_msgSend(v3, sel_shape);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v5 = sub_249F1F544();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_249F1FBEC();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_12;
LABEL_4:
  v13 = MEMORY[0x24BEE4AF8];
  sub_249DB677C(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x24BD056B8](i, v5);
      else
        v8 = *(id *)(v5 + 8 * i + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, sel_integerValue);

      v12 = *(_QWORD *)(v13 + 16);
      v11 = *(_QWORD *)(v13 + 24);
      if (v12 >= v11 >> 1)
        sub_249DB677C(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v13 + 16) = v12 + 1;
      *(_QWORD *)(v13 + 8 * v12 + 32) = v10;
    }
    goto LABEL_12;
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

uint64_t sub_249ED4DD8@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  int64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t *v87;
  _QWORD *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[2];
  __int128 v93;
  uint64_t v94;
  _QWORD *v95;

  v78 = a6;
  v89 = a5;
  v91 = a4;
  v77 = a7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE238);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v88 = (uint64_t *)((char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t *)((char *)&v75 - v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE000);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F22C20;
  v86 = a3;
  *(_QWORD *)(inited + 32) = sub_249ECE068(0x656C706D6173uLL, (uint64_t *)0xE600000000000000, a2);
  *(_QWORD *)(inited + 40) = v22;
  v23 = sub_249D9D9F4(0, &qword_2578DDE20);
  v24 = *(int *)(v18 + 48);
  v25 = &v20[v24];
  v26 = (char *)a1 + v24;
  v27 = *a1;
  v90 = v15;
  v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v28(v25, v26, v14);
  v29 = sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v30 = sub_249F1F7FC();
  *(_QWORD *)(inited + 72) = v23;
  *(_QWORD *)(inited + 48) = v30;
  *(_QWORD *)(inited + 80) = sub_249ECE068(0x70657473656D6974uLL, (uint64_t *)0xE800000000000000, a2);
  *(_QWORD *)(inited + 88) = v31;
  *(_QWORD *)(inited + 120) = v23;
  *(_QWORD *)(inited + 96) = v86;
  *(_QWORD *)(inited + 128) = sub_249ECE068(0xD000000000000015, (uint64_t *)0x8000000249F38D30, a2);
  *(_QWORD *)(inited + 136) = v32;
  v82 = (void (*)(uint64_t, uint64_t, uint64_t))v28;
  v28(v17, (char *)v91, v14);
  v86 = v17;
  v91 = v14;
  v84 = v29;
  v33 = sub_249F1F7FC();
  v85 = v23;
  *(_QWORD *)(inited + 168) = v23;
  *(_QWORD *)(inited + 144) = v33;
  v34 = (_QWORD *)sub_249DAE8D4(inited);
  if (v89)
  {
    if ((v27 & 0x8000000000000000) != 0)
    {
LABEL_50:
      __break(1u);
    }
    else if (v27 < *(_QWORD *)(v89 + 16))
    {
      v35 = *(_QWORD *)(v89 + 8 * v27 + 32);
      v36 = *(_QWORD *)(v35 + 64);
      v80 = v35 + 64;
      v37 = 1 << *(_BYTE *)(v35 + 32);
      v38 = -1;
      if (v37 < 64)
        v38 = ~(-1 << v37);
      v39 = v38 & v36;
      v81 = (unint64_t)(v37 + 63) >> 6;
      v76 = v81 - 1;
      v83 = v35;
      swift_bridgeObjectRetain();
      v89 = 0;
      while (1)
      {
        v41 = (uint64_t)v88;
        if (v39)
          break;
        v49 = v89 + 1;
        if (__OFADD__(v89, 1))
          goto LABEL_49;
        if (v49 < v81)
        {
          v50 = *(_QWORD *)(v80 + 8 * v49);
          if (v50)
            goto LABEL_15;
          v51 = v89 + 2;
          ++v89;
          if (v49 + 1 < v81)
          {
            v50 = *(_QWORD *)(v80 + 8 * v51);
            if (v50)
              goto LABEL_18;
            v89 = v49 + 1;
            if (v49 + 2 < v81)
            {
              v50 = *(_QWORD *)(v80 + 8 * (v49 + 2));
              if (v50)
              {
                v49 += 2;
                goto LABEL_15;
              }
              v51 = v49 + 3;
              v89 = v49 + 2;
              if (v49 + 3 < v81)
              {
                v50 = *(_QWORD *)(v80 + 8 * v51);
                if (!v50)
                {
                  while (1)
                  {
                    v49 = v51 + 1;
                    if (__OFADD__(v51, 1))
                      goto LABEL_52;
                    if (v49 >= v81)
                    {
                      v89 = v76;
                      goto LABEL_29;
                    }
                    v50 = *(_QWORD *)(v80 + 8 * v49);
                    ++v51;
                    if (v50)
                      goto LABEL_15;
                  }
                }
LABEL_18:
                v49 = v51;
LABEL_15:
                v39 = (v50 - 1) & v50;
                v43 = __clz(__rbit64(v50)) + (v49 << 6);
                v89 = v49;
LABEL_11:
                v44 = *(_QWORD *)(v83 + 56);
                v45 = (_QWORD *)(*(_QWORD *)(v83 + 48) + 16 * v43);
                v46 = v45[1];
                *v88 = *v45;
                *(_QWORD *)(v41 + 8) = v46;
                v47 = v44 + *(_QWORD *)(v90 + 72) * v43;
                v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE240);
                v82(v41 + *(int *)(v48 + 48), v47, v91);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v41, 0, 1, v48);
                swift_bridgeObjectRetain();
                goto LABEL_30;
              }
            }
          }
        }
LABEL_29:
        v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE240);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v41, 1, 1, v52);
        v39 = 0;
LABEL_30:
        v53 = v87;
        sub_249DCB1B0(v41, (uint64_t)v87, &qword_2578DE238);
        v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE240);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v53, 1, v54) == 1)
        {
          swift_release();
          goto LABEL_43;
        }
        v56 = *v53;
        v55 = v53[1];
        (*(void (**)(id, char *, uint64_t))(v90 + 32))(v86, (char *)v53 + *(int *)(v54 + 48), v91);
        v57 = v85;
        v58 = sub_249F1F7FC();
        v94 = v57;
        *(_QWORD *)&v93 = v58;
        sub_249DCA678(&v93, v92);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v95 = v34;
        v61 = sub_249DB7D8C(v56, v55);
        v62 = v34[2];
        v63 = (v60 & 1) == 0;
        v64 = v62 + v63;
        if (__OFADD__(v62, v63))
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        v65 = v60;
        if (v34[3] >= v64)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v34 = v95;
            if ((v60 & 1) != 0)
              goto LABEL_7;
          }
          else
          {
            sub_249DBD618();
            v34 = v95;
            if ((v65 & 1) != 0)
              goto LABEL_7;
          }
        }
        else
        {
          sub_249DBAF60(v64, isUniquelyReferenced_nonNull_native);
          v66 = sub_249DB7D8C(v56, v55);
          if ((v65 & 1) != (v67 & 1))
            goto LABEL_53;
          v61 = v66;
          v34 = v95;
          if ((v65 & 1) != 0)
          {
LABEL_7:
            v40 = (_OWORD *)(v34[7] + 32 * v61);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
            sub_249DCA678(v92, v40);
            goto LABEL_8;
          }
        }
        v34[(v61 >> 6) + 8] |= 1 << v61;
        v68 = (uint64_t *)(v34[6] + 16 * v61);
        *v68 = v56;
        v68[1] = v55;
        sub_249DCA678(v92, (_OWORD *)(v34[7] + 32 * v61));
        v69 = v34[2];
        v70 = __OFADD__(v69, 1);
        v71 = v69 + 1;
        if (v70)
          goto LABEL_48;
        v34[2] = v71;
        swift_bridgeObjectRetain();
LABEL_8:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v42 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v43 = v42 | (v89 << 6);
      goto LABEL_11;
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    result = sub_249F1FF10();
    __break(1u);
  }
  else
  {
LABEL_43:
    v72 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v73 = v79;
    result = (uint64_t)sub_249EFD4E8();
    if (v73)
      *v78 = v73;
    else
      *v77 = result;
  }
  return result;
}

uint64_t sub_249ED5574(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  int64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v4 = a2;
  v5 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_36;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_37;
LABEL_3:
  v34 = v6;
  v33 = v5;
  v32 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    while (1)
    {
      v8 = MEMORY[0x24BD056B8](0, v4);
LABEL_6:
      v9 = swift_bridgeObjectRelease();
      v10 = MEMORY[0x24BDAC7A8](v9);
      MEMORY[0x24BDAC7A8](v10);
      v12 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFF8);
      sub_249F1F874();
      swift_release();

      if (v3)
        return v8;
      v8 = v35;
      if (v33)
      {
        swift_bridgeObjectRetain();
        v13 = sub_249F1FBEC();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v14 = v34;
      if (v13 == 1)
        return v8;
      ObjectType = swift_getObjectType();
      result = sub_249ED3708(ObjectType);
      if (v34 < 0)
        goto LABEL_42;
      if (v33)
      {
        swift_bridgeObjectRetain();
        result = sub_249F1FBEC();
        if (result < 1)
          goto LABEL_40;
        swift_bridgeObjectRetain();
        v5 = sub_249F1FBEC();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (!v5)
          goto LABEL_40;
      }
      if (v5 < v34)
        goto LABEL_41;
      if (v32 && v34 != 1)
      {
        v5 = type metadata accessor for ManagedMLModel();
        v16 = 1;
        do
        {
          v17 = v16 + 1;
          sub_249F1FAA8();
          v16 = v17;
        }
        while (v34 != v17);
      }
      if (v33)
      {
        swift_bridgeObjectRetain();
        v32 = sub_249F1FBF8();
        v33 = v19;
        v18 = v20;
        v5 = v21;
        swift_bridgeObjectRelease_n();
        v14 = (unint64_t)v5 >> 1;
        if (v18 == (unint64_t)v5 >> 1)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return v8;
        }
      }
      else
      {
        v32 = v4 & 0xFFFFFFFFFFFFFF8;
        v33 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
        v18 = 1;
        if (v34 == 1)
          goto LABEL_26;
      }
      v34 = v14;
      while (v18 < v14)
      {
        v4 = *(_QWORD *)(v33 + 8 * v18);
        v22 = swift_getObjectType();
        swift_retain();
        swift_unknownObjectRetain();
        v23 = sub_249ED3708(v22);
        v24 = swift_unknownObjectRelease();
        MEMORY[0x24BDAC7A8](v24);
        v25 = sub_249ED6F30(v23, (void (*)(uint64_t, uint64_t))sub_249EC5CA4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if (v25 >> 62)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
          sub_249F1FBE0();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_249F1FEC8();
        }
        swift_bridgeObjectRelease();
        v26 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
        v27 = (void *)sub_249F1F538();
        swift_bridgeObjectRelease();
        v28 = objc_msgSend(v26, sel_initWithFeatureProviderArray_, v27);

        v30 = MEMORY[0x24BDAC7A8](v29);
        MEMORY[0x24BDAC7A8](v30);
        v5 = (uint64_t)v31;
        sub_249F1F874();
        ++v18;

        swift_unknownObjectRelease();
        swift_release();

        v8 = v35;
        v14 = v34;
        if (v34 == v18)
          goto LABEL_26;
      }
      __break(1u);
LABEL_36:
      swift_bridgeObjectRetain();
      result = sub_249F1FBEC();
      v6 = result;
      if (result)
        goto LABEL_3;
LABEL_37:
      swift_bridgeObjectRelease();
      __break(1u);
    }
  }
  else
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v8 = *(_QWORD *)(v4 + 32);
      swift_retain();
      goto LABEL_6;
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  return result;
}

unint64_t sub_249ED5B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  unint64_t result;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v53 = a4;
  v54 = a5;
  v52 = a3;
  v55 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC0);
  v58 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v47 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v15 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  v60 = v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v49 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v47 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
  v20 = swift_allocObject();
  v57 = xmmword_249F21910;
  *(_OWORD *)(v20 + 16) = xmmword_249F21910;
  *(float *)(v20 + 32) = (float)a2;
  *(float *)(v20 + 36) = (float)a2;
  v61 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  v56 = v19;
  sub_249F1EFEC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC8);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v57;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    v22 = sub_249F1FBEC();
    *(_QWORD *)&v57 = v13;
    if (v22)
      goto LABEL_5;
    goto LABEL_22;
  }
  *(_DWORD *)(v21 + 32) = a2;
  *(_DWORD *)(v21 + 36) = a2;
  v61 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFD0);
  sub_249DDFC68(&qword_2578DDFD8, &qword_2578DDFD0, MEMORY[0x24BEE12C8]);
  sub_249F1EFEC();
  v50 = v6;
  v51 = v9;
  if (a6 >> 62)
    goto LABEL_21;
  v22 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  *(_QWORD *)&v57 = v13;
  if (v22)
  {
LABEL_5:
    v23 = 4;
    do
    {
      v24 = v23 - 4;
      if ((a6 & 0xC000000000000001) != 0)
      {
        v25 = MEMORY[0x24BD056B8](v23 - 4, a6);
        v13 = (char *)(v23 - 3);
        if (__OFADD__(v24, 1))
          goto LABEL_18;
      }
      else
      {
        v25 = *(_QWORD *)(a6 + 8 * v23);
        swift_retain();
        v13 = (char *)(v23 - 3);
        if (__OFADD__(v24, 1))
        {
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
      }
      v26 = *(void **)(v25 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
      if (v26)
      {
        v27 = objc_msgSend(v26, sel_modelDescription);
        v28 = objc_msgSend(v27, sel_inputDescriptionsByName);

        sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
        v29 = sub_249F1F208();

        if (*(_QWORD *)(v29 + 16))
        {
          sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
          if ((v30 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            sub_249D9D9F4(0, &qword_2578DDE20);
            v31 = v51;
            (*(void (**)(char *, _QWORD, uint64_t))(v58 + 16))(v48, v57, v51);
            sub_249DDFC68(&qword_2578DDFE8, &qword_2578DDFC0, MEMORY[0x24BDBFCD0]);
            v32 = sub_249F1F7FC();
            v33 = (void *)v32;
            v34 = v59;
            v35 = v56;
            goto LABEL_23;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      ++v23;
    }
    while (v13 != (char *)v22);
  }
LABEL_22:
  swift_bridgeObjectRelease();
  sub_249D9D9F4(0, &qword_2578DDE20);
  v34 = v59;
  v35 = v56;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v49, v56, v59);
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v32 = sub_249F1F7FC();
  v33 = (void *)v32;
  v31 = v51;
LABEL_23:
  MEMORY[0x24BDAC7A8](v32);
  *(&v47 - 6) = a6;
  *(&v47 - 5) = (uint64_t)v33;
  v36 = v53;
  *(&v47 - 4) = v52;
  *(&v47 - 3) = v36;
  v37 = v55;
  *(&v47 - 2) = v54;
  swift_bridgeObjectRetain();
  v38 = v50;
  v39 = sub_249ED33CC((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_249ED7058, (uint64_t)(&v47 - 8), v37);
  swift_bridgeObjectRelease();
  if (v38)
  {
    (*(void (**)(_QWORD, uint64_t))(v58 + 8))(v57, v31);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v34);

    return v34;
  }
  swift_bridgeObjectRetain();
  if (v39 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    sub_249F1FBE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_249F1FEC8();
  }
  swift_bridgeObjectRelease();
  v40 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
  v41 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  v42 = objc_msgSend(v40, sel_initWithFeatureProviderArray_, v41);

  v43 = v42;
  v44 = (void *)sub_249ED5574((uint64_t)v43, a6);

  result = (unint64_t)objc_msgSend(v44, sel_count);
  if ((result & 0x8000000000000000) == 0)
  {
    v46 = result;
    swift_unknownObjectRetain();
    v34 = sub_249EC3484(0, v46, v44);

    swift_unknownObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v58 + 8))(v57, v31);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v59);
    swift_unknownObjectRelease();
    return v34;
  }
  __break(1u);
  return result;
}

id sub_249ED6208@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  id result;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v34 = a7;
  v38 = a5;
  v39 = a6;
  v36 = a1;
  v37 = a4;
  v33 = a8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE000);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F22C30;
  v35 = a3;
  *(_QWORD *)(inited + 32) = sub_249ECE068(0x656C706D6173uLL, (uint64_t *)0xE600000000000000, a2);
  *(_QWORD *)(inited + 40) = v18;
  v19 = sub_249D9D9F4(0, &qword_2578DDE20);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20(&v16[*(int *)(v14 + 48)], v36 + *(int *)(v14 + 48), v10);
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v21 = sub_249F1F7FC();
  *(_QWORD *)(inited + 72) = v19;
  *(_QWORD *)(inited + 48) = v21;
  *(_QWORD *)(inited + 80) = sub_249ECE068(0x70657473656D6974uLL, (uint64_t *)0xE800000000000000, a2);
  *(_QWORD *)(inited + 88) = v22;
  *(_QWORD *)(inited + 120) = v19;
  *(_QWORD *)(inited + 96) = v35;
  *(_QWORD *)(inited + 128) = sub_249ECE068(0xD000000000000015, (uint64_t *)0x8000000249F38D30, a2);
  *(_QWORD *)(inited + 136) = v23;
  v20(v13, v37, v10);
  v24 = sub_249F1F7FC();
  *(_QWORD *)(inited + 168) = v19;
  *(_QWORD *)(inited + 144) = v24;
  *(_QWORD *)(inited + 176) = sub_249ECE068(0x626D655F74786574uLL, (uint64_t *)0xEB00000000736465, a2);
  *(_QWORD *)(inited + 184) = v25;
  v20(v13, v38, v10);
  v26 = sub_249F1F7FC();
  *(_QWORD *)(inited + 216) = v19;
  *(_QWORD *)(inited + 192) = v26;
  *(_QWORD *)(inited + 224) = sub_249ECE068(0x7364695F656D6974uLL, (uint64_t *)0xE800000000000000, a2);
  *(_QWORD *)(inited + 232) = v27;
  *(_QWORD *)(inited + 264) = v19;
  v28 = v39;
  *(_QWORD *)(inited + 240) = v39;
  v29 = v28;
  sub_249DAE8D4(inited);
  v30 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
  v31 = v40;
  result = sub_249EFD4E8();
  if (v31)
    *v34 = v31;
  else
    *v33 = result;
  return result;
}

void sub_249ED64DC()
{
  Unet.loadResources()();
}

void sub_249ED64F4()
{
  Unet.unloadResources()();
}

BOOL sub_249ED64FC()
{
  return Unet.usePORParameters()();
}

uint64_t sub_249ED6504(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  void *v8;

  v3 = objc_msgSend(v1, sel_featureNames);
  v4 = sub_249F1F700();

  v7[2] = a1;
  v8 = v1;
  v5 = sub_249ED66A0(MEMORY[0x24BEE4B00], sub_249ED7098, (uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_249ED659C(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  void *v10;
  uint64_t v11;

  v6 = *a2;
  v5 = a2[1];
  swift_bridgeObjectRetain();
  v7 = (void *)sub_249F1F304();
  v8 = objc_msgSend(a3, sel_featureValueForName_, v7);

  if (v8)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *a1;
    *a1 = 0x8000000000000000;
    sub_249ED8D24((uint64_t)v8, v6, v5, isUniquelyReferenced_nonNull_native);
    *a1 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = (void *)sub_249ED68DC(v6, v5, (void (*)(unint64_t, uint64_t))sub_249F06378, (void (*)(void))sub_249F05490);
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_249ED66A0(uint64_t a1, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v22 = a1;
  v7 = a4 + 56;
  v8 = 1 << *(_BYTE *)(a4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a4 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v20 = v19[1];
    v21[0] = *v19;
    v21[1] = v20;
    swift_bridgeObjectRetain();
    a2(&v22, v21);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v11)
      goto LABEL_26;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    if (!v17)
      break;
LABEL_17:
    v10 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v11)
    goto LABEL_26;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 2;
  if (v13 + 2 >= v11)
    goto LABEL_26;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 3;
  if (v13 + 3 >= v11)
    goto LABEL_26;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 4;
  if (v13 + 4 >= v11)
  {
LABEL_26:
    swift_release();
    return v22;
  }
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    v13 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_26;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_249ED6860@<X0>(id a1@<X1>, _QWORD *a2@<X0>, uint64_t *a3@<X8>)
{
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t result;

  v4 = objc_msgSend(a1, sel_featuresAtIndex_, *a2);
  ObjectType = swift_getObjectType();
  v6 = sub_249ED6504(ObjectType);
  result = swift_unknownObjectRelease();
  *a3 = v6;
  return result;
}

uint64_t sub_249ED68C8(uint64_t a1, uint64_t a2)
{
  return sub_249ED68DC(a1, a2, (void (*)(unint64_t, uint64_t))sub_249F06378, (void (*)(void))sub_249F052C8);
}

uint64_t sub_249ED68DC(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t), void (*a4)(void))
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = v4;
  swift_bridgeObjectRetain();
  v10 = sub_249DB7D8C(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v7;
  v16 = *v7;
  *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    v13 = v16;
  }
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v10);
  a3(v10, v13);
  *v7 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_249ED69B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD v11[18];

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_249DB8164(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11[0] = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_249F05C6C();
      v9 = v11[0];
    }
    memmove(a2, (const void *)(*(_QWORD *)(v9 + 56) + 144 * v6), 0x8DuLL);
    sub_249F06A8C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return nullsub_1(a2);
  }
  else
  {
    sub_249ED70DC((uint64_t)v11);
    return sub_249DCB1B0((uint64_t)v11, (uint64_t)a2, &qword_2578DDA40);
  }
}

unint64_t sub_249ED6AA4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, char *);
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19[4];
  uint64_t v20;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v8 = *(_QWORD *)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 56);
    v9 = (void (*)(uint64_t *__return_ptr, char *))v0[5];
    v19[0] = *(_BYTE *)(v8 + v6);
    v10 = *(_QWORD *)(v7 + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v20 = v10;
    v9(&v18, v19);
    return v18 | ((unint64_t)HIDWORD(v18) << 32);
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
    return 8;
  }
  return result;
}

unint64_t sub_249ED6C0C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  void (*v9)(uint64_t *__return_ptr, char *);
  unint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  char v18[4];
  int v19;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v6);
    v8 = *(_DWORD *)(*(_QWORD *)(v1 + 56) + 4 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v9 = (void (*)(uint64_t *__return_ptr, char *))v0[5];
    v18[0] = v7;
    v19 = v8;
    v9(&v17, v18);
    return v17 | ((unint64_t)HIDWORD(v17) << 32);
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v12 = (unint64_t)(v0[2] + 64) >> 6;
    if (v11 < v12)
    {
      v13 = v0[1];
      v14 = *(_QWORD *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        v5 = (v14 - 1) & v14;
        v6 = __clz(__rbit64(v14)) + (v11 << 6);
        v4 = v11;
        goto LABEL_3;
      }
      v15 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * v15);
        if (v14)
        {
LABEL_10:
          v11 = v15;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * (v3 + 3));
          if (v14)
          {
            v11 = v3 + 3;
            goto LABEL_7;
          }
          v15 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v12)
          {
            v14 = *(_QWORD *)(v13 + 8 * v15);
            if (v14)
              goto LABEL_10;
            v11 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v12)
            {
              v14 = *(_QWORD *)(v13 + 8 * v11);
              if (v14)
                goto LABEL_7;
              v4 = v12 - 1;
              v16 = v3 + 6;
              while (v12 != v16)
              {
                v14 = *(_QWORD *)(v13 + 8 * v16++);
                if (v14)
                {
                  v11 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
    return 8;
  }
  return result;
}

void sub_249ED6D6C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

id sub_249ED6EF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;

  v2 = a1[1];
  v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t sub_249ED6F30(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  sub_249F1FB44();
  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
      swift_bridgeObjectRetain();
      a2(v6, v7);
      if (v2)
        break;
      swift_bridgeObjectRelease();
      ++v6;
      sub_249F1FB20();
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
      if (v5 == v6)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return v9;
  }
}

ValueMetadata *type metadata accessor for Unet()
{
  return &type metadata for Unet;
}

id sub_249ED7058@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_249ED6208(a1, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(void **)(v3 + 48), a2, a3);
}

uint64_t sub_249ED707C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_249ED6860(*(id *)(v2 + 24), a1, a2);
}

void sub_249ED7098(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  sub_249ED659C(a1, a2, *(void **)(v2 + 24));
}

uint64_t sub_249ED70B0@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_249ED4ADC(a1, *(_QWORD *)(v2 + 16), 0x7364695F656D6974uLL, (uint64_t *)0xE800000000000000, a2);
}

double sub_249ED70DC(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  return result;
}

uint64_t sub_249ED7100@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_249ED4ADC(a1, *(_QWORD *)(v2 + 16), 0x656C706D6173uLL, (uint64_t *)0xE600000000000000, a2);
}

uint64_t sub_249ED7128@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_249ED4DD8(a1, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a2, a3);
}

Swift::Bool __swiftcall AppleDiffusionPipeline.supportsAdapters()()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 1);
}

uint64_t AppleDiffusionPipeline.adaptedPiplineCopy(mutableUNetWeights:adapter:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  void *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  unsigned __int8 v25;
  _BYTE v26[200];
  _OWORD v27[18];
  char v28;
  uint64_t v29;

  v6 = *(_OWORD *)(v3 + 168);
  v7 = *(_OWORD *)(v3 + 200);
  v27[16] = *(_OWORD *)(v3 + 184);
  v27[17] = v7;
  v28 = *(_BYTE *)(v3 + 216);
  v8 = *(_OWORD *)(v3 + 104);
  v9 = *(_OWORD *)(v3 + 136);
  v27[12] = *(_OWORD *)(v3 + 120);
  v27[13] = v9;
  v27[14] = *(_OWORD *)(v3 + 152);
  v27[15] = v6;
  v10 = *(_OWORD *)(v3 + 40);
  v11 = *(_OWORD *)(v3 + 72);
  v27[8] = *(_OWORD *)(v3 + 56);
  v27[9] = v11;
  v27[10] = *(_OWORD *)(v3 + 88);
  v27[11] = v8;
  v27[6] = *(_OWORD *)(v3 + 24);
  v27[7] = v10;
  result = AppleDiffusionUnet.adaptedCopy(mutableWeights:adapter:)(a1, a2, (uint64_t)v26);
  if (!v4)
  {
    v13 = *(void **)(v3 + 224);
    v14 = *(void **)(v3 + 232);
    v22 = *(_QWORD *)(v3 + 240);
    v15 = *(_QWORD *)(v3 + 256);
    v23 = *(_QWORD *)(v3 + 248);
    v16 = *(_OWORD *)(v3 + 312);
    v27[2] = *(_OWORD *)(v3 + 296);
    v27[3] = v16;
    v17 = *(_OWORD *)(v3 + 344);
    v27[4] = *(_OWORD *)(v3 + 328);
    v27[5] = v17;
    v18 = *(_OWORD *)(v3 + 280);
    v27[0] = *(_OWORD *)(v3 + 264);
    v27[1] = v18;
    v19 = *(_QWORD *)(v3 + 360);
    v29 = *(_QWORD *)(v3 + 368);
    v20 = *(_QWORD *)(v3 + 376);
    v21 = *(_QWORD *)(v3 + 384);
    v25 = *(_BYTE *)(v3 + 392);
    a3[3] = type metadata accessor for AppleDiffusionPipeline(0);
    a3[4] = (uint64_t)&protocol witness table for AppleDiffusionPipeline;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    sub_249EB6EEC(v13, v14);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_249EB6F18((uint64_t)v27);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return AppleDiffusionPipeline.init(unet:encoder:decoder:sketchConditioner:imageConditioner:retoningConditioner:reduceMemory:)((uint64_t)v26, v13, v14, v22, v23, v15, v27, v19, (uint64_t)boxed_opaque_existential_1, v29, v20, v21, v25);
  }
  return result;
}

uint64_t sub_249ED7308@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  return AppleDiffusionPipeline.adaptedPiplineCopy(mutableUNetWeights:adapter:)(a1, a2, a3);
}

uint64_t sub_249ED731C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t _s13DiffusionBase05AppleA8PipelineV16supportsAdaptersSbyFZ_0()
{
  os_unfair_lock_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  int v15;
  _QWORD *v16;
  uint64_t v17[18];
  uint64_t v18[18];
  _QWORD v19[19];
  __int128 v20;
  __int128 v21;

  if (qword_2578DDA28 != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)(qword_2578DEDB0 + 24);
  swift_retain();
  os_unfair_lock_lock(v0);
  sub_249F14298((uint64_t *)&v20);
  os_unfair_lock_unlock(v0);
  v1 = v20;
  swift_release();
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_modelDescription);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_249DB8164(0), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v5 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_13:
    v5 = 0;
    v20 = 0u;
    v21 = 0u;
    goto LABEL_14;
  }
  v7 = objc_msgSend(v6, sel_metadata);
  type metadata accessor for MLModelMetadataKey(0);
  sub_249ED7760();
  v8 = sub_249F1F208();

  if (!*(_QWORD *)(v8 + 16))
  {
    v20 = 0u;
    v21 = 0u;
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v9 = (id)*MEMORY[0x24BDBFF38];
  v10 = sub_249ED85F0((uint64_t)v9);
  if ((v11 & 1) == 0)
  {
    v20 = 0u;
    v21 = 0u;

    goto LABEL_25;
  }
  sub_249DCA7E4(*(_QWORD *)(v8 + 56) + 32 * v10, (uint64_t)&v20);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v21 + 1))
  {
LABEL_14:
    sub_249E36D34((uint64_t)&v20);
    v12 = 0;
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DA078);
  if (swift_dynamicCast())
    v12 = v19[0];
  else
    v12 = 0;
LABEL_15:
  sub_249EF1058(v12, &v20);
  swift_bridgeObjectRelease();
  sub_249ED7644((uint64_t)&v20, (uint64_t)v18);
  sub_249ED7644((uint64_t)v18, (uint64_t)v19);
  v15 = sub_249EB71A8((uint64_t)v19);
  if (v15 == 1)
  {

    sub_249ED768C((uint64_t *)&v20);
  }
  else
  {
    sub_249ED7644((uint64_t)v18, (uint64_t)v17);
    sub_249E93024(v17);
    sub_249ED768C((uint64_t *)&v20);
    v16 = (_QWORD *)v19[16];
    swift_bridgeObjectRetain();
    sub_249ED76FC(v18);
    if (v16)
    {
      v13 = sub_249EAF258(1634889580, 0xE400000000000000, v16);
      swift_bridgeObjectRelease();

      return v13 & 1;
    }

  }
  v13 = 0;
  return v13 & 1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x24BD06618);
  return result;
}

uint64_t sub_249ED7644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_249ED768C(uint64_t *a1)
{
  sub_249EB7298(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_249ED76FC(uint64_t *a1)
{
  sub_249EB7298(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

unint64_t sub_249ED7760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DDE90;
  if (!qword_2578DDE90)
  {
    type metadata accessor for MLModelMetadataKey(255);
    result = MEMORY[0x24BD06528](&unk_249F30B24, v1);
    atomic_store(result, (unint64_t *)&qword_2578DDE90);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionSketchConditioner.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall AppleDiffusionSketchConditioner.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

void AppleDiffusionSketchConditioner.encode(_:scribbleEdgesBuffer:styleAdapter:strength:)(uint64_t a1, void *a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t inited;
  uint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  void *v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  _BYTE *v39;
  id v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  unint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  void *v74;
  id v75;
  unint64_t v76;
  id v77;
  unint64_t v78;
  unint64_t v79;

  v5 = v3;
  v9 = v3[1];
  v8 = v3[2];
  v10 = sub_249F17E20(v5[2], 0, v5[1], 0);
  if (v4)
    return;
  v11 = (void *)v10;
  v74 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  *(_QWORD *)(inited + 32) = sub_249ED83DC();
  *(_QWORD *)(inited + 40) = v13;
  *(_QWORD *)(inited + 48) = v11;
  v77 = v11;
  v78 = sub_249EAF51C(inited);
  v75 = (id)OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue;
  MEMORY[0x24BDAC7A8](v78);
  v76 = v14;
  v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1E0);
  sub_249F1F874();

  if (*(_QWORD *)(v79 + 16))
  {
    v18 = v5[10];
    v17 = v5[11];
    swift_bridgeObjectRetain();
    v73 = v18;
    sub_249DB7D8C(v18, v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    v21 = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      v22 = sub_249EDA3C8(a3);
      v72 = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_249F30B80;
      sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v23 + 32) = sub_249F1F934();
      *(_QWORD *)(v23 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v22 + 16));
      v79 = v23;
      sub_249F1F55C();
      v24 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
      v57 = sub_249E14B58(v23, 65568);
      v71 = (uint64_t)&v71;
      MEMORY[0x24BDAC7A8](v57);
      sub_249F1F7E4();
      swift_bridgeObjectRelease();
      v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_249F21760;
      *(_QWORD *)(v58 + 32) = v57;
      v79 = v58;
      sub_249F1F55C();
      sub_249D9D9F4(0, &qword_2578DDE20);
      v72 = v57;
      v59 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v60 = objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v59, 0, 65552);

      swift_bridgeObjectRetain();
      v61 = v60;
      v62 = v78;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v79 = v62;
      sub_249ED8D38((uint64_t)v61, v73, v17, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_249F052C8, (void (*)(void))sub_249F020F8);
      v64 = v79;

      swift_bridgeObjectRelease();
      v21 = swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  else
  {
    v21 = swift_bridgeObjectRelease();
  }
  v64 = v78;
LABEL_7:
  MEMORY[0x24BDAC7A8](v21);
  v26 = v25;
  sub_249F1F874();

  if (!*(_QWORD *)(v79 + 16))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v27 = v5[6];
  v28 = v5[7];
  swift_bridgeObjectRetain();
  sub_249DB7D8C(v27, v28);
  v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    v31 = v74;
    if (!v74)
    {
      swift_bridgeObjectRelease();
      sub_249EDA384();
      swift_allocError();
      *v39 = 0;
      swift_willThrow();

      return;
    }
    swift_bridgeObjectRetain();
    v32 = v31;
    v51 = sub_249F17E20(v8, 0, v9, 0);
    v52 = swift_isUniquelyReferenced_nonNull_native();
    v79 = v64;
    sub_249ED8D38(v51, v27, v28, v52, (void (*)(void))sub_249F052C8, (void (*)(void))sub_249F020F8);
    v53 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_249F30B80;
    sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
    *(_QWORD *)(v54 + 32) = sub_249F1F934();
    *(_QWORD *)(v54 + 40) = sub_249F1F934();
    v79 = v54;
    sub_249F1F55C();
    v55 = v79;
    v56 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
    v65 = sub_249E14B58(v55, 65568);
    v66 = (void *)sub_249F1F6F4();
    objc_msgSend(v65, sel_fillWithNumber_, v66);

    v68 = v5[8];
    v67 = v5[9];
    swift_bridgeObjectRetain();
    v69 = v65;
    v70 = swift_isUniquelyReferenced_nonNull_native();
    v79 = v53;
    sub_249ED8D38((uint64_t)v69, v68, v67, v70, (void (*)(void))sub_249F052C8, (void (*)(void))sub_249F020F8);
    v64 = v79;

    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_12:
  v33 = swift_bridgeObjectRetain();
  sub_249EFB730(v33);
  swift_bridgeObjectRelease();
  v34 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
  v35 = sub_249EFD4E8();
  v36 = MEMORY[0x24BDAC7A8](v35);
  MEMORY[0x24BDAC7A8](v36);
  v38 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
  sub_249F1F874();
  v75 = v35;
  v78 = v64;

  v40 = (id)v79;
  v41 = objc_msgSend((id)v79, sel_featureNames);
  sub_249F1F700();

  v42 = swift_bridgeObjectRetain();
  v43 = sub_249DBDDCC(v42);
  swift_bridgeObjectRelease();
  v79 = (unint64_t)v43;
  sub_249ED276C((uint64_t *)&v79);
  swift_bridgeObjectRelease();
  v44 = v79;
  v79 = MEMORY[0x24BEE4AF8];
  v76 = v44;
  v45 = *(_QWORD *)(v44 + 16);
  if (v45)
  {
    v46 = v76 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v47 = (void *)sub_249F1F304();
      swift_bridgeObjectRelease();
      v48 = objc_msgSend(v40, sel_featureValueForName_, v47);

      if (!v48)
        break;
      v49 = objc_msgSend(v48, sel_multiArrayValue);

      if (!v49)
        goto LABEL_23;
      v50 = v49;
      MEMORY[0x24BD05130]();
      if (*(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_249F1F568();
      v46 += 16;
      sub_249F1F598();
      sub_249F1F55C();

      if (!--v45)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    __break(1u);

    swift_unexpectedError();
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
LABEL_21:
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();

  }
}

DiffusionBase::AppleDiffusionSketchConditioner::Error_optional __swiftcall AppleDiffusionSketchConditioner.Error.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  DiffusionBase::AppleDiffusionSketchConditioner::Error_optional v2;

  v1 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = DiffusionBase_AppleDiffusionSketchConditioner_Error_unsupportedStyleAdapterForSketchConditioningVector;
  else
    v2.value = DiffusionBase_AppleDiffusionSketchConditioner_Error_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

unint64_t AppleDiffusionSketchConditioner.Error.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000032;
  else
    return 0xD000000000000019;
}

uint64_t sub_249ED827C(char *a1, char *a2)
{
  return sub_249F13744(*a1, *a2);
}

uint64_t sub_249ED8288()
{
  return sub_249EF823C();
}

uint64_t sub_249ED8290()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249ED82F0()
{
  return sub_249EF8460();
}

uint64_t sub_249ED82F8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_249F1FC4C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_249ED8354(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000032;
  else
    v2 = 0xD000000000000019;
  v3 = 0x8000000249F38E10;
  if (*v1)
    v3 = 0x8000000249F38E30;
  *a1 = v2;
  a1[1] = v3;
}

double AppleDiffusionSketchConditioner.init(modelAt:configuration:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[6];

  sub_249EDA590(a1, a2, (uint64_t)v8);
  v4 = v8[3];
  a3[2] = v8[2];
  a3[3] = v4;
  v5 = v8[5];
  a3[4] = v8[4];
  a3[5] = v5;
  result = *(double *)v8;
  v7 = v8[1];
  *a3 = v8[0];
  a3[1] = v7;
  return result;
}

uint64_t sub_249ED83DC()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v1 = *(id *)(*v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1E0);
  sub_249F1F874();

  v2 = swift_bridgeObjectRetain();
  v3 = sub_249ED96F8(v2);
  swift_bridgeObjectRelease();
  v16 = v3;
  sub_249ED276C((uint64_t *)&v16);
  swift_bridgeObjectRelease();
  if (v16[2])
  {
    v5 = v16[4];
    v4 = v16[5];
    swift_bridgeObjectRetain();
    v6 = swift_release();
    MEMORY[0x24BDAC7A8](v6);
    v8 = v7;
    sub_249F1F874();

    v9 = v16;
    if (v16[2])
    {
      v10 = sub_249DB7D8C(v5, v4);
      if ((v11 & 1) != 0)
      {
        v12 = *(id *)(v9[7] + 8 * v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = objc_msgSend(v12, sel_name);

        v14 = sub_249F1F328();
        return v14;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
  }
  swift_release();
  __break(1u);
  swift_unexpectedError();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_249ED85F0(uint64_t a1)
{
  uint64_t v2;

  sub_249F1F328();
  sub_249F1FF64();
  sub_249F1F40C();
  v2 = sub_249F1FFA0();
  swift_bridgeObjectRelease();
  return sub_249DB8C38(a1, v2);
}

unint64_t sub_249ED8670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_249F1FF64();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  v8 = sub_249F1FFA0();
  return sub_249ED871C(a1, a2, a3, a4, v8);
}

unint64_t sub_249ED871C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[2];
      v17 = v15[3];
      v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (sub_249F1FE2C() & 1) != 0)
      {
        v19 = v16 == a3 && v17 == a4;
        if (v19 || (sub_249F1FE2C() & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

uint64_t sub_249ED8818(uint64_t a1, char a2, float a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_249DB81D8(a1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_249F04FB0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(float *)(v16[7] + 4 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a1;
    *(float *)(v16[7] + 4 * v10) = a3;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_249F018D8(result, a2 & 1);
  result = sub_249DB81D8(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249ED893C(uint64_t a1, char a2, float a3, float a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  float *v19;
  char v20;
  float *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_249DB81D8(a1);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_249F0513C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (float *)(v18[7] + 8 * v12);
      *v19 = a3;
      v19[1] = a4;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a1;
    v21 = (float *)(v18[7] + 8 * v12);
    *v21 = a3;
    v21[1] = a4;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_249F01CE8(result, a2 & 1);
  result = sub_249DB81D8(a1);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

void sub_249ED8A6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_249ED8D38(a1, a2, a3, a4, (void (*)(void))sub_249F052C8, (void (*)(void))sub_249F020F8);
}

uint64_t sub_249ED8A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v6;
  v14 = *v6;
  v16 = sub_249ED8670(a2, a3, a4, a5);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= result && (a6 & 1) != 0)
    goto LABEL_7;
  if (v21 >= result && (a6 & 1) == 0)
  {
    result = (uint64_t)sub_249F052D4();
LABEL_7:
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v22[7] + 8 * v16) = a1;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v24 = (uint64_t *)(v22[6] + 32 * v16);
    *v24 = a2;
    v24[1] = a3;
    v24[2] = a4;
    v24[3] = a5;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v22[2] = v27;
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_249F02104(result, a6 & 1);
  result = sub_249ED8670(a2, a3, a4, a5);
  if ((v20 & 1) == (v23 & 1))
  {
    v16 = result;
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249ED8C00(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_249DB7F54(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = sub_249F1E7F4();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_249ED9430(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_249F058A8();
      goto LABEL_7;
    }
    sub_249F02AC4(v13, a3 & 1);
    v20 = sub_249DB7F54(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_249ED9430(v10, a2, a1, v16);
    }
  }
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

void sub_249ED8D24(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_249ED8D38(a1, a2, a3, a4, (void (*)(void))sub_249F05490, (void (*)(void))sub_249F02444);
}

void sub_249ED8D38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v9 = v6;
  v14 = *v6;
  v16 = sub_249DB7D8C(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];

      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = (uint64_t *)(v22[6] + 16 * v16);
    *v26 = a2;
    v26[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  a6();
  v24 = sub_249DB7D8C(a2, a3);
  if ((v20 & 1) == (v25 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_249F1FF10();
  __break(1u);
}

uint64_t sub_249ED8EA8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_249DB8164(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_249F05C60();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_249F03404(result, a3 & 1);
  result = sub_249DB8164(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249ED8FDC(_OWORD *a1, uint64_t a2, char a3)
{
  return sub_249ED9158(a1, a2, a3, sub_249DB8164, (uint64_t (*)(void))sub_249F05C6C, (void (*)(void))sub_249F03878);
}

void sub_249ED9000(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_249DB8164(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_249F05C78();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_249F03E2C(v13, a3 & 1);
  v18 = sub_249DB8164(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_249F1FF10();
  __break(1u);
}

uint64_t sub_249ED9134(_OWORD *a1, uint64_t a2, char a3)
{
  return sub_249ED9158(a1, a2, a3, sub_249DB7F54, (uint64_t (*)(void))sub_249F05FBC, (void (*)(void))sub_249F046CC);
}

uint64_t sub_249ED9158(_OWORD *a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;

  v10 = v6;
  v14 = *v6;
  v16 = a4(a2);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v21 >= result && (a3 & 1) == 0)
  {
    result = a5();
LABEL_7:
    v22 = (_QWORD *)*v10;
    if ((v20 & 1) != 0)
      return sub_249EDAA9C((uint64_t)a1, v22[7] + 144 * v16);
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    *(_BYTE *)(v22[6] + v16) = a2;
    v24 = (_OWORD *)(v22[7] + 144 * v16);
    *v24 = *a1;
    v25 = a1[1];
    v26 = a1[2];
    v27 = a1[4];
    v24[3] = a1[3];
    v24[4] = v27;
    v24[1] = v25;
    v24[2] = v26;
    v28 = a1[5];
    v29 = a1[6];
    v30 = a1[7];
    *(_OWORD *)((char *)v24 + 125) = *(_OWORD *)((char *)a1 + 125);
    v24[6] = v29;
    v24[7] = v30;
    v24[5] = v28;
    v31 = v22[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (!v32)
    {
      v22[2] = v33;
      return result;
    }
    goto LABEL_14;
  }
  a6();
  result = a4(a2);
  if ((v20 & 1) == (v23 & 1))
  {
    v16 = result;
    v22 = (_QWORD *)*v10;
    if ((v20 & 1) != 0)
      return sub_249EDAA9C((uint64_t)a1, v22[7] + 144 * v16);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249ED92F4(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_249DB7FAC(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_249F061D0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_bridgeObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_249F04C50(result, a4 & 1);
  result = sub_249DB7FAC(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249ED9430(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = sub_249F1E7F4();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_249ED94BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE258);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_249ED9F74(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_249D9E18C();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_249ED9590(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

_QWORD *sub_249ED96F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C78);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_249EDA108((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_249D9E18C();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_249ED97DC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[12];

  if (HIDWORD(a1) < a1)
    v2 = -(uint64_t)(a1 - HIDWORD(a1));
  else
    v2 = (HIDWORD(a1) - a1);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  if (v2 <= 0)
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE260);
    v3 = swift_allocObject();
    v4 = _swift_stdlib_malloc_size((const void *)v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 29;
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = 2 * (v5 >> 2);
  }
  result = sub_249ED9B40((uint64_t)v7, (_DWORD *)(v3 + 32), v2, a1);
  if (result == v2)
    return v3;
  __break(1u);
  return result;
}

uint64_t sub_249ED98A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249ED9A70(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1)
    return MEMORY[0x24BEE4AF8];
  v5 = result;
  if (v3 <= 0)
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
    v6 = (_QWORD *)swift_allocObject();
    v7 = _swift_stdlib_malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v6[2] = v3;
    v6[3] = 2 * (v8 >> 3);
  }
  result = sub_249ED9C9C((uint64_t)&v9, (uint64_t)(v6 + 4), v3, v5, a2);
  if (result == v3)
    return (uint64_t)v6;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_249ED9B40(uint64_t result, _DWORD *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int32x4_t v13;
  int32x4_t *v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  _DWORD *v18;
  int v19;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    LODWORD(v4) = a4;
LABEL_7:
    *(_QWORD *)result = a4;
    *(_DWORD *)(result + 8) = v4;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_33;
  if ((_DWORD)a4 == HIDWORD(a4))
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (HIDWORD(a4) < a4)
    goto LABEL_34;
  if (a4 < HIDWORD(a4))
  {
    LODWORD(v4) = a4 + 1;
    *a2 = a4;
    if (a3 == 1)
      goto LABEL_7;
    if ((_DWORD)v4 == HIDWORD(a4))
    {
      a3 = 1;
      v4 = HIDWORD(a4);
      goto LABEL_7;
    }
    v5 = (HIDWORD(a4) - a4 - 2);
    v6 = v5 + 2;
    if (v5 >= a3 - 2)
      v5 = a3 - 2;
    if (v5 >= (HIDWORD(a4) + ~(_DWORD)a4))
      v7 = (HIDWORD(a4) + ~(_DWORD)a4);
    else
      v7 = v5;
    if (v7 >= 8)
    {
      if (((v7 + 1) & 7) != 0)
        v10 = (v7 + 1) & 7;
      else
        v10 = 8;
      v11 = v7 + 1 - v10;
      v12 = v4 + v11;
      v9 = &a2[v11];
      v8 = v11 + 2;
      v13 = vaddq_s32(vdupq_n_s32(v4), (int32x4_t)xmmword_249F31530);
      v14 = (int32x4_t *)(a2 + 5);
      v15 = ~v7 + v10;
      v16.i64[0] = 0x400000004;
      v16.i64[1] = 0x400000004;
      v17.i64[0] = 0x800000008;
      v17.i64[1] = 0x800000008;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v16);
        v13 = vaddq_s32(v13, v17);
        v14 += 2;
        v15 += 8;
      }
      while (v15);
      LODWORD(v4) = v12;
    }
    else
    {
      v8 = 2;
      v9 = a2;
    }
    v18 = v9 + 1;
    while (v4 < HIDWORD(a4))
    {
      v19 = v4 + 1;
      *v18 = v4;
      if (a3 == v8)
      {
        LODWORD(v4) = v4 + 1;
        goto LABEL_7;
      }
      ++v8;
      ++v18;
      LODWORD(v4) = v4 + 1;
      if (HIDWORD(a4) == v19)
      {
        v4 = HIDWORD(a4);
        a3 = v6;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_249ED9C9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if (!a2)
  {
    v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
LABEL_14:
    v8 = a4;
LABEL_15:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v5 = 0;
  v6 = a4;
  while (1)
  {
    v7 = v6 == a5;
    if (v6 != a5)
      break;
    v8 = 0;
LABEL_8:
    *(_QWORD *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5)
      goto LABEL_15;
    ++v5;
    v9 = v6 == a5;
    v6 = v8;
    if (v9)
    {
      v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t *sub_249ED9D28(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v9 = result;
  if (!a2)
    goto LABEL_8;
  v10 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_21;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (!a4)
  {
LABEL_8:
    v11 = 0;
    v10 = 0;
LABEL_21:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = v11;
    return (uint64_t *)v10;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    a2[1] = a6;
    if (a3 == 1)
    {
      v11 = 1;
    }
    else if (a4 == 1)
    {
      v10 = 1;
      v11 = 1;
    }
    else
    {
      a2[2] = a5;
      a2[3] = a6;
      if (a3 == 2)
      {
        v11 = 2;
      }
      else
      {
        v12 = a2 + 5;
        v13 = 2;
        while (a4 != v13)
        {
          swift_bridgeObjectRetain();
          ++v13;
          *(v12 - 1) = a5;
          *v12 = a6;
          v12 += 2;
          if (v10 == v13)
          {
            v11 = v13;
            goto LABEL_19;
          }
        }
        v11 = a4;
        v10 = v13;
      }
LABEL_19:
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t *sub_249ED9E34(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if (!a2)
  {
    v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0)
    goto LABEL_33;
  if (!a4)
  {
    a3 = 0;
    v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      v5 = 1;
LABEL_30:
      *result = a4;
      result[1] = a5;
      result[2] = v5;
      return (uint64_t *)a3;
    }
    v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      v5 = 1;
      goto LABEL_30;
    }
    v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 >= 5)
    {
      v12 = v8 & 3;
      if ((v8 & 3) == 0)
        v12 = 4;
      v13 = v8 - v12;
      v10 = v8 - v12 + 1;
      v11 = &a2[v13];
      v9 = v13 + 2;
      v14 = vdupq_n_s64(a5);
      v15 = (int64x2_t *)(a2 + 3);
      do
      {
        v15[-1] = v14;
        *v15 = v14;
        v15 += 2;
        v13 -= 4;
      }
      while (v13);
    }
    else
    {
      v9 = 2;
      v10 = 1;
      v11 = a2;
    }
    v16 = 0;
    v17 = v10 - a4;
    v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1)
        goto LABEL_32;
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_249ED9F74(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_249EDA108(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_249EDA304(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = (void *)MEMORY[0x24BD05FF4]();
  sub_249EFEA80(a1, a2, a3);
  if (v4)
  {
    objc_autoreleasePoolPop(v9);
  }
  else
  {
    v11 = v10;
    objc_autoreleasePoolPop(v9);
    *a4 = v11;
  }
}

unint64_t sub_249EDA384()
{
  unint64_t result;

  result = qword_2578DE248;
  if (!qword_2578DE248)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionSketchConditioner.Error, &type metadata for AppleDiffusionSketchConditioner.Error);
    atomic_store(result, (unint64_t *)&qword_2578DE248);
  }
  return result;
}

uint64_t sub_249EDA3C8(char a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _BYTE *v7;

  switch(a1)
  {
    case 0:
    case 1:
      result = v1[3];
      break;
    case 4:
    case 5:
      result = v1[5];
      break;
    case 6:
    case 7:
      result = v1[4];
      break;
    case 9:
      goto LABEL_10;
    default:
      if (qword_2578DDA10 != -1)
        swift_once();
      v3 = sub_249F1EF38();
      __swift_project_value_buffer(v3, (uint64_t)qword_2578FF458);
      v4 = sub_249F1EF20();
      v5 = sub_249F1F820();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_249D98000, v4, v5, "unsupported style adapter for sketch conditioning vector request", v6, 2u);
        MEMORY[0x24BD06618](v6, -1, -1);
      }

LABEL_10:
      sub_249EDA384();
      swift_allocError();
      *v7 = 1;
      result = swift_willThrow();
      break;
  }
  return result;
}

__n128 sub_249EDA50C(__n128 *a1)
{
  uint64_t v1;
  __n128 *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int32 *v5;
  unsigned __int32 *v6;
  unint64_t v7;
  unsigned __int32 v8;
  __n128 result;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  __n128 v13;

  v2 = *(__n128 **)(v1 + 16);
  v3 = v2[1].n128_u64[0];
  if (v3)
  {
    if (v3 < 8 || (unint64_t)((char *)a1 - (char *)v2 - 32) < 0x20)
    {
      v4 = 0;
LABEL_5:
      v5 = (unsigned __int32 *)a1 + v4;
      v6 = (unsigned __int32 *)&v2[2] + v4;
      v7 = v3 - v4;
      do
      {
        v8 = *v6++;
        result.n128_u32[0] = v8;
        *v5++ = v8;
        --v7;
      }
      while (v7);
      return result;
    }
    v4 = v3 & 0x7FFFFFFFFFFFFFF8;
    v10 = v2 + 3;
    v11 = a1 + 1;
    v12 = v3 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = v10[-1];
      v13 = *v10;
      v11[-1] = result;
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    if (v3 != v4)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_249EDA590@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = sub_249F1E7F4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v10 = ManagedMLModel.init(modelAt:configuration:name:)(v9, a2, (uint64_t)"local_conditioning_producer_scribble", 36, 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  *(_QWORD *)a3 = v10;
  *(int64x2_t *)(a3 + 8) = vdupq_n_s64(0x200uLL);
  *(_QWORD *)(a3 + 24) = &unk_251B5AFF0;
  *(_QWORD *)(a3 + 32) = &unk_251B5B020;
  *(_QWORD *)(a3 + 40) = &unk_251B5B050;
  strcpy((char *)(a3 + 48), "scribble_edges");
  *(_BYTE *)(a3 + 63) = -18;
  *(_QWORD *)(a3 + 64) = 0xD000000000000011;
  *(_QWORD *)(a3 + 72) = 0x8000000249F39040;
  strcpy((char *)(a3 + 80), "style_vector");
  *(_BYTE *)(a3 + 93) = 0;
  *(_WORD *)(a3 + 94) = -5120;
  return result;
}

unint64_t sub_249EDA6F8()
{
  unint64_t result;

  result = qword_2578DE250;
  if (!qword_2578DE250)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionSketchConditioner.Error, &type metadata for AppleDiffusionSketchConditioner.Error);
    atomic_store(result, (unint64_t *)&qword_2578DE250);
  }
  return result;
}

uint64_t destroy for AppleDiffusionSketchConditioner()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppleDiffusionSketchConditioner(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AppleDiffusionSketchConditioner(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppleDiffusionSketchConditioner(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppleDiffusionSketchConditioner()
{
  return &type metadata for AppleDiffusionSketchConditioner;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionSketchConditioner.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EDAA1C + 4 * byte_249F31557[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EDAA50 + 4 * byte_249F31552[v4]))();
}

uint64_t sub_249EDAA50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EDAA58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EDAA60);
  return result;
}

uint64_t sub_249EDAA6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EDAA74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EDAA78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EDAA80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionSketchConditioner.Error()
{
  return &type metadata for AppleDiffusionSketchConditioner.Error;
}

uint64_t sub_249EDAA9C(uint64_t a1, uint64_t a2)
{
  assignWithTake for AppleDiffusionModelMetadata(a2, a1);
  return a2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Decoder.loadResources()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = v1;
  v3 = v0;
  ManagedMLModel.loadResources()();
  if (!v4)
  {
    if (v3)
    {
      ManagedMLModel.loadResources()();
      if (v5)

    }
    if (v2)
    {
      ManagedMLModel.loadResources()();
      if (v6)

    }
  }
}

Swift::Void __swiftcall Decoder.unloadResources()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1;
  v3 = v0;
  ManagedMLModel.unloadResources()();
  if (v3)
    ManagedMLModel.unloadResources()();
  if (v2)
    ManagedMLModel.unloadResources()();
}

uint64_t Decoder.decode(_:scaleFactor:outputRange:inferAlpha:detectSkin:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  id v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;

  v8 = v7;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v53 = (id)MEMORY[0x24BEE4AF8];
    sub_249F1FB44();
    v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
    v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v16 = *(_QWORD *)(v14 + 72);
    while (1)
    {
      sub_249EDB3C8(a4, (uint64_t)&v51, &v52, a7);
      if (v8)
        break;
      v8 = 0;
      sub_249F1FB20();
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
      v15 += v16;
      if (!--v11)
        goto LABEL_5;
    }
    swift_release();
    return v16;
  }
LABEL_5:
  v17 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
  v18 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_initWithFeatureProviderArray_, v18);

  v21 = MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v16 = a5;
  v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFF8);
  sub_249F1F874();
  if (v8)
  {

    return v16;
  }
  v25 = a6;
  v50 = v16;

  v27 = v53;
  if ((a3 & 1) == 0)
  {
    v32 = 0;
LABEL_13:
    if ((a2 & 1) == 0)
    {
      v37 = 0;
LABEL_17:
      result = (uint64_t)objc_msgSend(v27, sel_count);
      if ((result & 0x8000000000000000) == 0)
      {
        v38 = result;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        sub_249EDD74C(0, v38, v27, v37, v32);
        v16 = v41;

        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return v16;
      }
      __break(1u);
      goto LABEL_27;
    }
    if (v50)
    {
      v48 = v32;
      v33 = MEMORY[0x24BDAC7A8](v26);
      v35 = *(void **)(v50 + *v34);
      MEMORY[0x24BDAC7A8](v33);
      swift_retain();
      v36 = v35;
      sub_249F1F874();

      v44 = v53;
      result = (uint64_t)objc_msgSend(v53, sel_count);
      if (result < 0)
        goto LABEL_28;
      sub_249EDC6A8(0, result, v44);
      v37 = v45;
      swift_release();
      swift_unknownObjectRelease();
      v32 = v48;
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    sub_249EDD8C4();
    swift_allocError();
    v40 = 3;
LABEL_23:
    *(_QWORD *)v39 = v40;
    *(_BYTE *)(v39 + 8) = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    return v16;
  }
  if (!v25)
  {
    sub_249EDD8C4();
    swift_allocError();
    v40 = 4;
    goto LABEL_23;
  }
  v16 = v25;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = *(void **)(v25 + *v29);
  MEMORY[0x24BDAC7A8](v28);
  swift_retain();
  v31 = v30;
  sub_249F1F874();

  v42 = v53;
  result = (uint64_t)objc_msgSend(v53, sel_count);
  if ((result & 0x8000000000000000) == 0)
  {
    sub_249EDC484(0, result, v42);
    v32 = v43;
    swift_release();
    v26 = swift_unknownObjectRelease();
    goto LABEL_13;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_249EDB18C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_249EDB1A4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_249EDB238;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_249E4E2FC;
  v3[3] = &block_descriptor_12;
  v3[4] = v2;
  objc_msgSend(v1, sel_modelDescriptionWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_249EDB238()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_249EDB298()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249EDB2AC()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall Decoder.usePORParameters()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  char v5;
  char v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
  if (v1)
  {
    v2 = objc_msgSend(v1, sel_modelDescription);
    v3 = objc_msgSend(v2, sel_inputDescriptionsByName);

    sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
    v4 = sub_249F1F208();

    if (*(_QWORD *)(v4 + 16))
    {
      sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_249EDB3C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  unint64_t v18;
  uint64_t inited;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v39 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - v10;
  v35 = sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v12 = sub_249F1F07C();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v31 = a3;
    v32 = a2;
    v37 = MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v13, 0);
    v14 = 0;
    v15 = v37;
    v16 = *(_QWORD *)(v37 + 16);
    do
    {
      v17 = *(float *)(v12 + 4 * v14 + 32);
      v37 = v15;
      v18 = *(_QWORD *)(v15 + 24);
      if (v16 >= v18 >> 1)
      {
        sub_249EB5D34(v18 > 1, v16 + 1, 1);
        v15 = v37;
      }
      ++v14;
      *(_QWORD *)(v15 + 16) = v16 + 1;
      *(float *)(v15 + 4 * v16++ + 32) = v17 / a4;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
    a3 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
  }
  v37 = v15;
  sub_249F1EFE0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  sub_249F1EFEC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  MEMORY[0x24BDAC7A8](inited);
  *(&v30 - 4) = v20;
  *(&v30 - 3) = (uint64_t)sub_249EDBDD4;
  *(&v30 - 2) = 0;
  v22 = v21;
  v23 = v34;
  sub_249F1F874();

  if (v23)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v24 = v38;
    *(_QWORD *)(inited + 32) = v37;
    *(_QWORD *)(inited + 40) = v24;
    sub_249D9D9F4(0, &qword_2578DDE20);
    v25 = v39;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v11, v7);
    *(_QWORD *)(inited + 48) = sub_249F1F7FC();
    v26 = sub_249EAF51C(inited);
    sub_249EFB730(v26);
    swift_bridgeObjectRelease();
    v27 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v28 = sub_249EFD4E8();
    result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v11, v7);
    *a3 = v28;
  }
  return result;
}

uint64_t sub_249EDB760@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = sub_249F1E7F4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL, v8);
  sub_249EC5D18((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v17[0] = 0;
  v12 = objc_msgSend(a1, sel_predictionsFromBatch_error_, a3, v17);
  v13 = v17[0];
  if (v12)
  {
    *a4 = v12;
    v14 = v13;
  }
  else
  {
    v15 = v17[0];
    sub_249F1E710();

    swift_willThrow();
  }
  return sub_249EDE3C4(a2);
}

uint64_t sub_249EDB8AC@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_249EDB760(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40), a2);
}

void sub_249EDB8C8(id a1@<X1>, unint64_t *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id *v24;
  id *v25;
  id *v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id *v32;
  __CVBuffer *v33;
  __CVBuffer *v34;
  uint64_t v35;
  __CVBuffer *v36;
  __CVBuffer *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGColorSpaceRef v41;
  CGColorSpaceRef v42;
  char v43;
  id v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v10 = *a2;
  v11 = objc_msgSend(a1, sel_featuresAtIndex_, *a2);
  v12 = objc_msgSend(v11, sel_featureNames);
  v13 = sub_249F1F700();

  sub_249ECFCB8(v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
    goto LABEL_49;
  v47 = a4;
  v16 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v11, sel_featureValueForName_, v16);

  if (!v17)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_11;
  }
  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v18 = *(id *)(a3 + 8 * v10 + 32);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_47;
  }
  v18 = (id)MEMORY[0x24BD056B8](v10, a3);
LABEL_8:
  v19 = v18;
  v20 = objc_msgSend(v18, sel_type);
  if (v20 != objc_msgSend(v17, sel_type))
  {
    sub_249EDD8C4();
    v22 = swift_allocError();
    *(_QWORD *)v21 = 5;
LABEL_23:
    *(_BYTE *)(v21 + 8) = 2;
LABEL_24:
    swift_willThrow();
LABEL_25:
    swift_unknownObjectRelease();

LABEL_26:
    *a5 = v22;
    return;
  }
LABEL_11:
  v23 = objc_msgSend(v17, sel_type);
  if (v23 != (id)4)
  {
    if (v23 != (id)5)
    {
      sub_249EDD8C4();
      v22 = swift_allocError();
      *(_QWORD *)v21 = 0;
      goto LABEL_23;
    }
    v24 = (id *)objc_msgSend(v17, sel_multiArrayValue);
    if (!v24)
      goto LABEL_51;
    v25 = v24;
    v46 = a6;
    if (v19)
    {
      v45 = a5;
      v26 = v24;
      v27 = objc_msgSend(v19, sel_multiArrayValue);
      if (v27)
      {
        v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
        v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = xmmword_249F30B80;
        *(_QWORD *)(v29 + 32) = v28;
        *(_QWORD *)(v29 + 40) = v26;
        sub_249F1F55C();
        v30 = v28;
        v44 = objc_msgSend(v30, sel_dataType);
        sub_249D9D9F4(0, &qword_2578DDE20);
        v31 = sub_249F1F538();
        swift_bridgeObjectRelease();
        v25 = (id *)objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v31, 1, v44);

        v26 = (id *)v31;
      }
      else
      {
        v25 = v26;
      }
      v39 = v48;

      a5 = v45;
    }
    else
    {
      v39 = v48;
    }
    v40 = sub_249EDC8D0(v25);
    v22 = v39;
    if (v39)
    {
      swift_unknownObjectRelease();

      goto LABEL_26;
    }
    v36 = (__CVBuffer *)v40;
LABEL_37:

    v41 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
    if (!v41)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v42 = v41;
    CVBufferSetAttachment(v36, (CFStringRef)*MEMORY[0x24BDC5410], v41, kCVAttachmentMode_ShouldPropagate);
    if (!v47)
    {

      swift_unknownObjectRelease();
      v43 = 2;
      goto LABEL_43;
    }
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 < *(_QWORD *)(v47 + 16))
      {
        v43 = *(_BYTE *)(v47 + v10 + 32);
        swift_unknownObjectRelease();

LABEL_43:
        *(_QWORD *)v46 = v36;
        *(_BYTE *)(v46 + 8) = v43;
        return;
      }
      goto LABEL_48;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v32 = (id *)objc_msgSend(v17, sel_imageBufferValue);
  if (!v32)
  {
    sub_249EDD8C4();
    v22 = swift_allocError();
    *(_QWORD *)v38 = 2;
    *(_BYTE *)(v38 + 8) = 2;
    goto LABEL_24;
  }
  v25 = v32;
  v46 = a6;
  if (v19)
  {
    v33 = (__CVBuffer *)objc_msgSend(v19, sel_imageBufferValue);
    if (v33)
    {
      v34 = v33;
      v35 = sub_249EDCEE0((__CVBuffer *)v25, v33);
      v22 = v48;
      if (!v48)
      {
LABEL_21:
        v36 = (__CVBuffer *)v35;

        CVBufferPropagateAttachments((CVBufferRef)v25, v36);
        goto LABEL_37;
      }
LABEL_29:

      goto LABEL_25;
    }
  }
  v37 = (__CVBuffer *)objc_msgSend(v17, sel_imageBufferValue);
  if (v37)
  {
    v34 = v37;
    v35 = sub_249EDD3E0(v37);
    v22 = v48;
    if (!v48)
      goto LABEL_21;
    goto LABEL_29;
  }
LABEL_53:
  __break(1u);
}

void sub_249EDBDD4(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_inputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v5 = sub_249F1F208();

  v6 = sub_249ECFC30(v5);
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v8)
  {

    *a2 = v6;
    a2[1] = v8;
  }
  else
  {
    __break(1u);
  }
}

void sub_249EDBEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  ManagedMLModel.loadResources()();
  if (!v3)
  {
    if (v1)
    {
      ManagedMLModel.loadResources()();
      if (v4)

    }
    if (v2)
    {
      ManagedMLModel.loadResources()();
      if (v5)

    }
  }
}

void sub_249EDBF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  ManagedMLModel.unloadResources()();
  if (v1)
    ManagedMLModel.unloadResources()();
  if (v2)
    ManagedMLModel.unloadResources()();
}

uint64_t sub_249EDBF58()
{
  uint64_t inited;
  void **v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8B70);
  inited = swift_initStackObject();
  v1 = (void **)MEMORY[0x24BDC5678];
  *(_OWORD *)(inited + 16) = xmmword_249F21910;
  v2 = *v1;
  *(_QWORD *)(inited + 32) = v2;
  v3 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 40) = 1;
  v4 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 64) = v3;
  *(_QWORD *)(inited + 72) = v4;
  v5 = v2;
  v6 = v4;
  v7 = sub_249DADF2C(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(inited + 104) = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8B78);
  *(_QWORD *)(inited + 80) = v7;
  sub_249DAE06C(inited);
  type metadata accessor for CFString(0);
  sub_249DFD230();
  v8 = sub_249F1F1F0();
  result = swift_bridgeObjectRelease();
  qword_2578DE268 = v8;
  return result;
}

uint64_t sub_249EDC044(uint64_t a1, int32x2_t a2, int32x2_t a3, uint64_t a4, uint64_t a5, int64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, const vImage_Buffer *a10)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *data;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int32x4_t *v25;
  const float *i32;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t result;
  uint64_t v37;
  vImage_Buffer alpha;
  vImage_Buffer red;
  vImage_Buffer green;
  vImage_Buffer blue;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(a5 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a6 < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (a6)
  {
    v14 = 4 * a5;
    blue.data = (void *)MEMORY[0x24BEE4AF8];
    sub_249EB5D6C(0, a6, 0);
    v15 = v14;
    v16 = a9;
    v17 = 0;
    data = (unint64_t *)blue.data;
    while (a6 != v17)
    {
      if (!a1)
        goto LABEL_34;
      if ((unsigned __int128)(v17 * (__int128)a7) >> 64 != (v17 * a7) >> 63)
        goto LABEL_26;
      if ((a8 & 0x8000000000000000) != 0 || (v16 & 0x8000000000000000) != 0)
      {
        result = sub_249F1FBC8();
        __break(1u);
        return result;
      }
      blue.data = data;
      v20 = data[2];
      v19 = data[3];
      if (v20 >= v19 >> 1)
      {
        v37 = v15;
        sub_249EB5D6C(v19 > 1, v20 + 1, 1);
        v15 = v37;
        v16 = a9;
        data = (unint64_t *)blue.data;
      }
      data[2] = v20 + 1;
      v21 = &data[4 * v20];
      v21[4] = a1 + 4 * v17 * a7;
      v21[5] = a8;
      ++v17;
      v21[6] = v16;
      v21[7] = v15;
      if (a6 == v17)
        goto LABEL_15;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  data = (unint64_t *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_15:
  v23 = *((_OWORD *)data + 3);
  v22 = (char *)(data + 4);
  *(_OWORD *)&blue.data = *((_OWORD *)data + 2);
  *(_OWORD *)&blue.width = v23;
  v24 = sub_249F1F58C();
  *(_QWORD *)(v24 + 16) = 4;
  *(int32x4_t *)(v24 + 32) = vdupq_lane_s32(a3, 0);
  v25 = (int32x4_t *)sub_249F1F58C();
  v25[1].i64[0] = 4;
  v25[2] = vdupq_lane_s32(a2, 0);
  i32 = (const float *)v25[2].i32;
  v27 = data[2];
  if (v27 == 3)
  {
    if (*(_QWORD *)(v24 + 16) < 4uLL)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    v28 = 0;
    *(_DWORD *)(v24 + 44) = 1065353216;
    v25[2].i32[3] = 1065353216;
  }
  else
  {
    v28 = 1;
  }
  if (v28 >= v27)
    goto LABEL_30;
  v29 = &v22[32 * v28];
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)&green.data = *(_OWORD *)v29;
  *(_OWORD *)&green.width = v30;
  if (v28 + 1 >= v27)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v31 = &v22[32 * v28 + 32];
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)&red.data = *(_OWORD *)v31;
  *(_OWORD *)&red.width = v32;
  v33 = v28 | 2;
  if (v33 >= v27)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v34 = &v22[32 * v33];
  v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)&alpha.data = *(_OWORD *)v34;
  *(_OWORD *)&alpha.width = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  vImageConvert_PlanarFToARGB8888(&alpha, &red, &green, &blue, a10, (const float *)(v24 + 32), i32, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v27 == 4)
    vImagePremultiplyData_RGBA8888(a10, a10, 0);
  return swift_bridgeObjectRelease();
}

void sub_249EDC380(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v9 = (void *)MEMORY[0x24BD05FF4]();
  sub_249EFED4C(a1, a2, a3);
  if (v4)
  {
    objc_autoreleasePoolPop(v9);
  }
  else
  {
    v11 = v10;
    objc_autoreleasePoolPop(v9);
    *a4 = v11;
  }
}

void sub_249EDC400(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = (void *)MEMORY[0x24BD05FF4]();
  sub_249EFF098(a1, a2);
  if (v3)
  {
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v10 = v8;
    v11 = v9;
    objc_autoreleasePoolPop(v7);
    *a3 = v10;
    a3[1] = v11;
  }
}

void sub_249EDC484(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  id v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_20;
  if (v3)
  {
    v5 = a1;
    v19 = MEMORY[0x24BEE4AF8];
    sub_249EB5D18(0, v3 & ~(v3 >> 63), 0);
    if (a2 < v5 || v3 < 0)
      goto LABEL_21;
    while (a2 != v5)
    {
      v6 = objc_msgSend(a3, sel_featuresAtIndex_, v5);
      v7 = (void *)sub_249F1F304();
      v8 = objc_msgSend(v6, sel_featureValueForName_, v7);

      if (v8)
      {
        v9 = objc_msgSend(v8, sel_multiArrayValue);
        if (v9)
        {
          v10 = v9;
          v11 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

        }
        else
        {
          v11 = 0;
        }
        sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
        v13 = (void *)sub_249F1F934();
        if (v11)
        {
          v14 = v11;
          v15 = sub_249F1F940();

        }
        else
        {
          v15 = 0;
        }

        swift_unknownObjectRelease();
        v12 = v15 & 1;
      }
      else
      {
        swift_unknownObjectRelease();
        v12 = 2;
      }
      v17 = *(_QWORD *)(v19 + 16);
      v16 = *(_QWORD *)(v19 + 24);
      if (v17 >= v16 >> 1)
        sub_249EB5D18(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v19 + 16) = v17 + 1;
      *(_BYTE *)(v19 + v17 + 32) = v12;
      if (a2 == ++v5)
        return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
}

void sub_249EDC6A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  void *v16;
  id v17;

  v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!v3)
    return;
  sub_249F1FB44();
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (a2 <= a1)
      v7 = a1;
    else
      v7 = a2;
    v8 = a1;
    while (a2 != v8)
    {
      v9 = objc_msgSend(a3, sel_featuresAtIndex_, v8);
      v10 = objc_msgSend(v9, sel_featureNames);
      v11 = sub_249F1F700();

      v12 = sub_249DFB680(v11);
      if ((v14 & 1) != 0)
        goto LABEL_28;
      if (*(_DWORD *)(v11 + 36) != v13)
        goto LABEL_21;
      v15 = 1 << *(_BYTE *)(v11 + 32);
      if (v12 == v15)
        goto LABEL_29;
      if (v12 < 0 || v12 >= v15)
        goto LABEL_22;
      if (((*(_QWORD *)(v11 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v12) & 1) == 0)
        goto LABEL_23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16 = (void *)sub_249F1F304();
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(v9, sel_featureValueForName_, v16);

      if (!v17)
        goto LABEL_30;
      swift_unknownObjectRelease();
      sub_249F1FB20();
      sub_249F1FB50();
      sub_249F1FB5C();
      sub_249F1FB2C();
      if (a2 < a1)
        goto LABEL_24;
      if (v7 == v8)
        goto LABEL_25;
      if (a2 == ++v8)
        return;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_249EDC8D0(id *a1)
{
  __CVBuffer *v1;
  char **v2;
  size_t v3;
  size_t v4;
  __CVBuffer *v5;
  uint64_t v6;
  const __CFAllocator *p_ivar_lyt;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  id *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  CVPixelBufferRef pixelBufferOut[2];

  v5 = v1;
  v6 = (uint64_t)a1;
  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  p_ivar_lyt = (const __CFAllocator *)&HEDEdgeDetector.ivar_lyt;
  v8 = objc_msgSend(a1, sel_shape);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v9 = sub_249F1F544();

  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)MEMORY[0x24BD056B8](1, v9);
  }
  else
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_36:
      v17 = (id)MEMORY[0x24BD056B8](3, v9);
      goto LABEL_10;
    }
    v10 = *(id *)(v9 + 40);
  }
  v11 = v10;
  swift_bridgeObjectRelease();
  v2 = &selRef_openPhotoLibraryWithWellKnownIdentifier_error_;
  v35 = objc_msgSend(v11, sel_integerValue);

  v12 = objc_msgSend((id)v6, sel_shape);
  v13 = sub_249F1F544();

  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)MEMORY[0x24BD056B8](2, v13);
  }
  else
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
    {
      __break(1u);
LABEL_38:
      swift_once();
      goto LABEL_14;
    }
    v14 = *(id *)(v13 + 48);
  }
  v15 = v14;
  swift_bridgeObjectRelease();
  v3 = (size_t)objc_msgSend(v15, sel_integerValue);

  v16 = objc_msgSend((id)v6, sel_shape);
  v9 = sub_249F1F544();

  if ((v9 & 0xC000000000000001) != 0)
    goto LABEL_36;
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) < 4uLL)
  {
    __break(1u);
    goto LABEL_40;
  }
  v17 = *(id *)(v9 + 56);
LABEL_10:
  v18 = v17;
  swift_bridgeObjectRelease();
  v4 = (size_t)objc_msgSend(v18, v2[90]);

  pixelBufferOut[0] = 0;
  if (v35 == (id)1)
    LODWORD(v13) = 1278226488;
  else
    LODWORD(v13) = 1111970369;
  p_ivar_lyt = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (qword_2578DDA08 != -1)
    goto LABEL_38;
LABEL_14:
  v19 = CVPixelBufferCreate(p_ivar_lyt, v3, v4, v13, (CFDictionaryRef)qword_2578DE268, pixelBufferOut);
  p_ivar_lyt = pixelBufferOut[0];
  if (v19 || !pixelBufferOut[0])
  {
    v21 = v19;
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v22 = v21;
    *(_BYTE *)(v22 + 8) = 0;
    swift_willThrow();
    goto LABEL_19;
  }
  v5 = pixelBufferOut[0];
  if (CVPixelBufferLockBaseAddress(v5, 0) || !CVPixelBufferGetBaseAddress(v5))
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v20 = 1;
    *(_BYTE *)(v20 + 8) = 2;
    swift_willThrow();

LABEL_19:
    return (uint64_t)p_ivar_lyt;
  }
  if ((v4 & 0x8000000000000000) == 0 && (v3 & 0x8000000000000000) == 0)
  {
    CVPixelBufferGetBytesPerRow(v5);
    if (objc_msgSend((id)v6, sel_dataType) == (id)65552)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_249F21760;
      *(_QWORD *)(v24 + 32) = v6;
      sub_249F1F55C();
      sub_249D9D9F4(0, &qword_2578DDE20);
      v25 = (id *)(id)v6;
      v26 = (void *)sub_249F1F538();
      swift_bridgeObjectRelease();
      v9 = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v26, 0, 65568);

    }
    else
    {
      v9 = (uint64_t)(id)v6;
    }
    v27 = objc_msgSend((id)v9, sel_strides);
    v6 = sub_249F1F544();

    if ((v6 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
        goto LABEL_43;
      }
      v28 = *(id *)(v6 + 40);
LABEL_29:
      v29 = v28;
      swift_bridgeObjectRelease();
      objc_msgSend(v29, v2[90]);

      v30 = objc_msgSend((id)v9, sel_strides);
      v31 = sub_249F1F544();

      if ((v31 & 0xC000000000000001) != 0)
      {
        v32 = (id)MEMORY[0x24BD056B8](2, v31);
        goto LABEL_32;
      }
      if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
      {
        v32 = *(id *)(v31 + 48);
LABEL_32:
        v33 = v32;
        swift_bridgeObjectRelease();
        objc_msgSend(v33, v2[90]);

        MEMORY[0x24BDAC7A8](v34);
        sub_249F1F7D8();

        CVPixelBufferUnlockBaseAddress(v5, 0);
        goto LABEL_19;
      }
LABEL_43:
      __break(1u);
    }
LABEL_40:
    v28 = (id)MEMORY[0x24BD056B8](1, v6);
    goto LABEL_29;
  }
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

uint64_t sub_249EDCEE0(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t inited;
  void *v5;
  id v6;
  void *v7;
  size_t Width;
  size_t Height;
  __CVBuffer *v10;
  size_t v11;
  OSType PixelFormatType;
  OSType v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *BaseAddress;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  vImage_Error v28;
  vImage_Error v29;
  uint64_t v30;
  vImage_Buffer dest;
  vImage_Buffer origSrc;
  vImage_Buffer newSrc;
  CVPixelBufferRef pixelBufferOut[3];

  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  pixelBufferOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE290);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  v5 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC5668];
  v6 = v5;
  *(_QWORD *)(inited + 40) = sub_249DADF2C(MEMORY[0x24BEE4AF8]);
  sub_249EAF528(inited);
  type metadata accessor for CFString(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8B78);
  sub_249DFD230();
  v7 = (void *)sub_249F1F1F0();
  swift_bridgeObjectRelease();
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v10 = (__CVBuffer *)CVPixelBufferGetWidth(a2);
  v11 = CVPixelBufferGetHeight(a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v13 = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType != 1111970369 || v13 != 1278226488 || (__CVBuffer *)Width != v10 || Height != v11)
  {
    sub_249EDD8C4();
    swift_allocError();
    v15 = 5;
    goto LABEL_8;
  }
  if (CVPixelBufferIsPlanar(a1))
  {
    sub_249EDD8C4();
    swift_allocError();
    v15 = 6;
LABEL_8:
    *(_QWORD *)v14 = v15;
    *(_BYTE *)(v14 + 8) = 2;
LABEL_9:
    swift_willThrow();
LABEL_10:

    return (uint64_t)v10;
  }
  v17 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, 0x42475241u, (CFDictionaryRef)v7, pixelBufferOut);
  if (v17 || !pixelBufferOut[0])
  {
    v19 = v17;
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v20 = v19;
    *(_BYTE *)(v20 + 8) = 0;
    goto LABEL_9;
  }
  v10 = pixelBufferOut[0];
  if (CVPixelBufferLockBaseAddress(v10, 0) || (BaseAddress = CVPixelBufferGetBaseAddress(v10)) == 0)
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v18 = 1;
    *(_BYTE *)(v18 + 8) = 2;
    swift_willThrow();

    goto LABEL_10;
  }
  v22 = BaseAddress;
  if (CVPixelBufferLockBaseAddress(a1, 1uLL) || (v24 = CVPixelBufferGetBaseAddress(a1)) == 0)
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v23 = 1;
    *(_BYTE *)(v23 + 8) = 2;
    swift_willThrow();
LABEL_30:
    CVPixelBufferUnlockBaseAddress(v10, 0);

    goto LABEL_10;
  }
  v25 = v24;
  if (CVPixelBufferLockBaseAddress(a2, 1uLL) || (v27 = CVPixelBufferGetBaseAddress(a2)) == 0)
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v26 = 1;
    *(_BYTE *)(v26 + 8) = 2;
    swift_willThrow();
LABEL_29:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    goto LABEL_30;
  }
  if ((Height & 0x8000000000000000) == 0 && (Width & 0x8000000000000000) == 0)
  {
    newSrc.data = v27;
    newSrc.height = Height;
    newSrc.width = Width;
    newSrc.rowBytes = CVPixelBufferGetBytesPerRow(a2);
    origSrc.data = v25;
    origSrc.height = Height;
    origSrc.width = Width;
    origSrc.rowBytes = CVPixelBufferGetBytesPerRow(a1);
    dest.data = v22;
    dest.height = Height;
    dest.width = Width;
    dest.rowBytes = CVPixelBufferGetBytesPerRow(v10);
    v28 = vImageOverwriteChannels_ARGB8888(&newSrc, &origSrc, &dest, 1u, 0);
    if (!v28)
    {
      v28 = vImagePremultiplyData_RGBA8888(&dest, &dest, 0);
      if (!v28)
      {
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        CVPixelBufferUnlockBaseAddress(a1, 1uLL);
        CVPixelBufferUnlockBaseAddress(v10, 0);

        return (uint64_t)v10;
      }
    }
    v29 = v28;
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v30 = v29;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
    goto LABEL_29;
  }
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

uint64_t sub_249EDD3E0(__CVBuffer *a1)
{
  const __CFAllocator *v1;
  uint64_t v3;
  OSType PixelFormatType;
  OSType v5;
  size_t Width;
  size_t Height;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *BaseAddress;
  void *v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  void *v18;
  size_t v19;
  vImage_Error v20;
  vImage_Error v21;
  uint64_t v22;
  vImage_Buffer dest;
  vImage_Buffer src;
  CVPixelBufferRef pixelBufferOut[2];

  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  if (CVPixelBufferIsPlanar(a1)
    || (PixelFormatType = CVPixelBufferGetPixelFormatType(a1), v5 = PixelFormatType, PixelFormatType != 1278226488)
    && PixelFormatType != 1111970369)
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 2;
    swift_willThrow();
    return (uint64_t)v1;
  }
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut[0] = 0;
  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (qword_2578DDA08 != -1)
    swift_once();
  v8 = CVPixelBufferCreate(v1, Width, Height, v5, (CFDictionaryRef)qword_2578DE268, pixelBufferOut);
  if (v8)
    v9 = 1;
  else
    v9 = pixelBufferOut[0] == 0;
  if (v9)
  {
    v10 = v8;
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v11 = v10;
    *(_BYTE *)(v11 + 8) = 0;
    swift_willThrow();
LABEL_20:

    return (uint64_t)v1;
  }
  v1 = pixelBufferOut[0];
  if (CVPixelBufferLockBaseAddress(a1, 1uLL) || (BaseAddress = CVPixelBufferGetBaseAddress(a1)) == 0)
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v12 = 1;
    *(_BYTE *)(v12 + 8) = 2;
    swift_willThrow();
LABEL_19:

    goto LABEL_20;
  }
  v14 = BaseAddress;
  if (CVPixelBufferLockBaseAddress(v1, 0) || (v17 = CVPixelBufferGetBaseAddress(v1)) == 0)
  {
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v15 = 1;
    *(_BYTE *)(v15 + 8) = 2;
    swift_willThrow();
LABEL_18:
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    goto LABEL_19;
  }
  if ((Height & 0x8000000000000000) == 0 && (Width & 0x8000000000000000) == 0)
  {
    v18 = v17;
    src.data = v14;
    src.height = Height;
    src.width = Width;
    src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
    dest.data = v18;
    dest.height = Height;
    dest.width = Width;
    dest.rowBytes = CVPixelBufferGetBytesPerRow(v1);
    if (v5 == 1278226488)
      v19 = 1;
    else
      v19 = 4;
    v20 = vImageCopyBuffer(&src, &dest, v19, 0);
    if (!v20)
    {
      CVPixelBufferUnlockBaseAddress(v1, 0);
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);

      return (uint64_t)v1;
    }
    v21 = v20;
    sub_249EDD8C4();
    swift_allocError();
    *(_QWORD *)v22 = v21;
    *(_BYTE *)(v22 + 8) = 1;
    swift_willThrow();
    CVPixelBufferUnlockBaseAddress(v1, 0);
    goto LABEL_18;
  }
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

void sub_249EDD74C(int64_t a1, int64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_21;
  v7 = v5;
  if (v6)
  {
    v26 = MEMORY[0x24BEE4AF8];
    sub_249EB5CFC(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
LABEL_22:
      __break(1u);
      return;
    }
    v10 = v26;
    if (a2 <= a1)
      v11 = a1;
    else
      v11 = a2;
    v18 = v11;
    v12 = a1;
    while (a2 != v12)
    {
      v23 = v12;
      sub_249EDB8C8(a3, &v23, a4, a5, &v22, (uint64_t)&v24);
      if (v7)
      {
        swift_release();
        return;
      }
      v7 = 0;
      v13 = v24;
      v14 = v25;
      v26 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_249EB5CFC(v15 > 1, v16 + 1, 1);
        v10 = v26;
      }
      *(_QWORD *)(v10 + 16) = v16 + 1;
      v17 = v10 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v13;
      *(_BYTE *)(v17 + 40) = v14;
      if (a2 < a1)
        goto LABEL_19;
      if (v18 == v12)
        goto LABEL_20;
      if (a2 == ++v12)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
}

unint64_t sub_249EDD8C4()
{
  unint64_t result;

  result = qword_2578DE270;
  if (!qword_2578DE270)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for Decoder.DecoderError, &type metadata for Decoder.DecoderError);
    atomic_store(result, &qword_2578DE270);
  }
  return result;
}

uint64_t _s13DiffusionBase7DecoderV7modelAt010alphaModelE0012skinPresencegE013configurationAC10Foundation3URLV_AJSgAKSo20MLModelConfigurationCtcfC_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - v10;
  v12 = sub_249F1E7F4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v35 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v33 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v33 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v41 = a1;
  v21((char *)&v33 - v19, a1, v12);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v22 = a4;
  v23 = ManagedMLModel.init(modelAt:configuration:name:)(v20, v22, (uint64_t)"latent color image decoder", 26, 2);
  v40 = a2;
  sub_249EC2668(a2, (uint64_t)v11);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v25 = v24(v11, 1, v12);
  v37 = v22;
  v38 = v23;
  v34 = (void (*)(char *, char *, uint64_t))v21;
  if (v25 == 1)
  {
    swift_retain();
    sub_249DE7F50((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    v21(v20, (uint64_t)v18, v12);
    swift_allocObject();
    v26 = v22;
    swift_retain();
    ManagedMLModel.init(modelAt:configuration:name:)(v20, v26, (uint64_t)"latent alpha image decoder", 26, 2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  v27 = v39;
  v28 = v36;
  sub_249EC2668(v39, v36);
  if (v24((char *)v28, 1, v12) == 1)
  {

    sub_249DE7F50(v27);
    sub_249DE7F50(v40);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v41, v12);
    sub_249DE7F50(v28);
  }
  else
  {
    v30 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v35, v28, v12);
    v34(v20, v30, v12);
    swift_allocObject();
    ManagedMLModel.init(modelAt:configuration:name:)(v20, v37, (uint64_t)"skin presence decoder", 21, 2);
    sub_249DE7F50(v27);
    sub_249DE7F50(v40);
    v31 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v31(v41, v12);
    v31((uint64_t)v30, v12);
  }
  v29 = v38;
  swift_release();
  return v29;
}

uint64_t destroy for Decoder()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *_s13DiffusionBase7DecoderVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Decoder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Decoder(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Decoder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Decoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Decoder()
{
  return &type metadata for Decoder;
}

uint64_t sub_249EDDE34(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_249EDDE4C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Decoder.DecoderError()
{
  return &type metadata for Decoder.DecoderError;
}

void sub_249EDDE74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v3 = sub_249F1E7F4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249D9D9F4(0, &qword_2578DDFA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = sub_249F13D1C((uint64_t)v6);
  if (!v1)
  {
    v8 = v7;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    v10 = v8;
    v11 = (void *)sub_249F13E30((uint64_t)&unk_2578DE280, v9);
    swift_release();
    v12 = objc_msgSend(v11, sel_outputDescriptionsByName);
    sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
    v13 = sub_249F1F208();

    if (!*(_QWORD *)(v13 + 16) || (v14 = sub_249DB7D8C(0x6567616D69, 0xE500000000000000), (v15 & 1) == 0))
    {

      swift_bridgeObjectRelease();
      return;
    }
    v16 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v16, sel_type);
    if (v17 == (id)4)
    {
      v27 = objc_msgSend(v16, sel_imageConstraint);
      if (v27)
      {
        v28 = v27;
        v29 = objc_msgSend(v27, sel_sizeConstraint);

        v30 = objc_msgSend(v29, sel_enumeratedImageSizes);
        sub_249D9D9F4(0, &qword_2578DE288);
        sub_249F1F544();

        return;
      }
      goto LABEL_30;
    }
    if (v17 != (id)5 || (v18 = objc_msgSend(v16, sel_multiArrayConstraint)) == 0)
    {
LABEL_30:

      return;
    }
    v19 = v18;
    v20 = objc_msgSend(v18, sel_shape);

    sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
    v21 = sub_249F1F544();

    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v39 = sub_249F1FBEC();
      swift_bridgeObjectRelease();
      if (v39 == 4)
        goto LABEL_11;
    }
    else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10) == 4)
    {
LABEL_11:
      v22 = v21 & 0xC000000000000001;
      if ((v21 & 0xC000000000000001) != 0)
      {
        v23 = (id)MEMORY[0x24BD056B8](0, v21);
      }
      else
      {
        if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_33;
        }
        v23 = *(id *)(v21 + 32);
      }
      v24 = v23;
      v25 = objc_msgSend(v23, sel_integerValue);

      if (v25 == (id)1)
      {
        if (v22)
        {
          v26 = (id)MEMORY[0x24BD056B8](3, v21);
LABEL_22:
          v31 = v26;
          v32 = objc_msgSend(v26, sel_integerValue);

          if (v22)
          {
            v33 = (id)MEMORY[0x24BD056B8](2, v21);
            goto LABEL_26;
          }
          if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
          {
            v33 = *(id *)(v21 + 48);
LABEL_26:
            v34 = v33;
            swift_bridgeObjectRelease();
            v35 = objc_msgSend(v34, sel_integerValue);

            v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFB8]), sel_initWithPixelsWide_pixelsHigh_, v32, v35);
            if (v36)
            {
              v37 = v36;
              __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
              v38 = swift_allocObject();
              *(_OWORD *)(v38 + 16) = xmmword_249F21760;
              *(_QWORD *)(v38 + 32) = v37;
              v40[1] = v38;
              sub_249F1F55C();

              return;
            }
            goto LABEL_30;
          }
          goto LABEL_34;
        }
        if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
        {
          v26 = *(id *)(v21 + 56);
          goto LABEL_22;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
}

uint64_t sub_249EDE314()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_249EDE338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_249DAFCF8;
  v5[16] = a1;
  v5[17] = v4;
  return swift_task_switch();
}

uint64_t sub_249EDE39C(uint64_t a1, uint64_t a2, int32x2_t a3, int32x2_t a4)
{
  uint64_t v4;

  a3.i32[0] = *(_DWORD *)(v4 + 56);
  a4.i32[0] = *(_DWORD *)(v4 + 60);
  return sub_249EDC044(a1, a3, a4, a2, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(const vImage_Buffer **)(v4 + 64));
}

uint64_t sub_249EDE3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE v12[80];

  v1 = a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL;
  v2 = sub_249F1E7F4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  if (MEMORY[0x24BDFD200])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249F21770;
    *(_QWORD *)(inited + 32) = 0xD000000000000017;
    *(_QWORD *)(inited + 40) = 0x8000000249F38360;
    v7 = sub_249F1E7AC();
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v7;
    *(_QWORD *)(inited + 56) = v8;
    sub_249DAE8D4(inited);
    v9 = (void *)sub_249F1F304();
    v10 = (void *)sub_249F1F1F0();
    swift_bridgeObjectRelease();

  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_249EDE538(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_249EDC400(*(_QWORD *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), a1);
}

uint64_t sub_249EDE554(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;

  if (result != 9)
  {
    v2 = result;
    v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__adapters);
    swift_beginAccess();
    if (!*v3)
    {
      *v3 = MEMORY[0x24BEE4B08];
      swift_bridgeObjectRelease();
    }
    result = swift_beginAccess();
    if (*v3)
    {
      sub_249EDEDC4(&v4, v2);
      return swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_249EDE5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  _QWORD v37[8];
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  uint64_t v42;

  v1 = v0;
  v2 = sub_249F1E890();
  v3 = *(_QWORD *)(v2 - 8);
  result = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2578DDA20 != -1)
    result = swift_once();
  if (qword_2578FF4A0)
  {
    v7 = qword_2578FF4A8;
    sub_249F1E884();
    v8 = *(_QWORD *)(v0 + 16);
    v9 = *(_QWORD *)(v0 + 24);
    v42 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v41 = v8;
    *((_QWORD *)&v41 + 1) = v9;
    sub_249DCA678(&v41, v40);
    swift_bridgeObjectRetain();
    v10 = MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = v10;
    sub_249DD1EC8(v40, 0xD000000000000011, 0x8000000249F38710, isUniquelyReferenced_nonNull_native);
    v12 = v39;
    swift_bridgeObjectRelease();
    v13 = v1 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__startDate;
    v42 = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
    v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
    v15(boxed_opaque_existential_1, v13, v2);
    sub_249DCA678(&v41, v40);
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v39 = v12;
    sub_249DD1EC8(v40, 0x7461447472617473, 0xE900000000000065, v16);
    v17 = v39;
    swift_bridgeObjectRelease();
    v42 = v2;
    v18 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
    v15(v18, (uint64_t)v6, v2);
    sub_249DCA678(&v41, v40);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v39 = v17;
    sub_249DD1EC8(v40, 0x65746144646E65, 0xE700000000000000, v19);
    v20 = v39;
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__inputPixelsCount);
    v22 = MEMORY[0x24BEE1768];
    if (v21 >= 1)
    {
      v42 = MEMORY[0x24BEE1768];
      *(_QWORD *)&v41 = v21;
      sub_249DCA678(&v41, v40);
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v39 = v20;
      sub_249DD1EC8(v40, 0x7869507475706E69, 0xEB00000000736C65, v23);
      v20 = v39;
      swift_bridgeObjectRelease();
    }
    v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__unetIterationsCount);
    if (v24 >= 1)
    {
      v42 = v22;
      *(_QWORD *)&v41 = v24;
      sub_249DCA678(&v41, v40);
      v25 = swift_isUniquelyReferenced_nonNull_native();
      v39 = v20;
      sub_249DD1EC8(v40, 0x7265744974656E75, 0xEE00736E6F697461, v25);
      v20 = v39;
      swift_bridgeObjectRelease();
    }
    v26 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__outputPixelsCount);
    if (v26 >= 1)
    {
      v42 = v22;
      *(_QWORD *)&v41 = v26;
      sub_249DCA678(&v41, v40);
      v27 = swift_isUniquelyReferenced_nonNull_native();
      v39 = v20;
      sub_249DD1EC8(v40, 0x695074757074756FLL, 0xEC000000736C6578, v27);
      v20 = v39;
      swift_bridgeObjectRelease();
    }
    v28 = (_QWORD *)(v1 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__adapters);
    swift_beginAccess();
    if (*v28)
    {
      v37[7] = v7;
      v29 = swift_bridgeObjectRetain();
      v30 = sub_249ED94BC(v29);
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        v37[4] = v6;
        v37[5] = v3;
        v37[6] = v2;
        *(_QWORD *)&v41 = MEMORY[0x24BEE4AF8];
        sub_249DB673C(0, v31, 0);
        __asm { BR              X9 }
      }
      swift_release();
      *(_QWORD *)&v41 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_249ED276C((uint64_t *)&v41);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8E30);
      sub_249E11B3C();
      v32 = sub_249F1F280();
      v34 = v33;
      swift_release();
      v42 = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v41 = v32;
      *((_QWORD *)&v41 + 1) = v34;
      sub_249DCA678(&v41, v40);
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v38 = v20;
      sub_249DD1EC8(v40, 0x7372657470616461, 0xE800000000000000, v35);
      v20 = v38;
      swift_bridgeObjectRelease();
    }
    sub_249EFB36C(v20);
    v36 = (void *)sub_249F1F1F0();
    swift_bridgeObjectRelease();
    PPSSendTelemetry();
    swift_bridgeObjectRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_249EDEC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtCV13DiffusionBase22AppleDiffusionPipeline15PowerLogMetrics__startDate;
  v2 = sub_249F1E890();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_249EDECEC()
{
  return _s15PowerLogMetricsCMa();
}

uint64_t _s15PowerLogMetricsCMa()
{
  uint64_t result;

  result = qword_2578DE2E8;
  if (!qword_2578DE2E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249EDED30()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1E890();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_249EDEDC4(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v8;
  _QWORD v10[9];

  v4 = *v2;
  sub_249F1FF64();
  swift_bridgeObjectRetain();
  sub_249DBFA40((uint64_t)v10, a2);
  v5 = sub_249F1FFA0() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10[0] = *v8;
  *v8 = 0x8000000000000000;
  sub_249F0DD94(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

DiffusionBase::ControlNet __swiftcall ControlNet.init(modelAt:configuration:)(Swift::OpaquePointer modelAt, MLModelConfiguration configuration)
{
  uint64_t v3;

  v3 = sub_249EBB338((uint64_t)modelAt._rawValue, configuration.super.isa);
  swift_bridgeObjectRelease();

  return (DiffusionBase::ControlNet)v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ControlNet.loadResources()()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v3 = v0;
  if (v0 >> 62)
    goto LABEL_27;
  v4 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_249F1FBEC())
  {
    v32 = v4;
    v33 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      while (1)
      {
        v6 = MEMORY[0x24BD056B8](v5, v3);
        if (__OFADD__(v5, 1))
          break;
        v7 = v6;
        v34 = v5 + 1;
        if (qword_2578DDA10 != -1)
          swift_once();
        v8 = sub_249F1EF38();
        __swift_project_value_buffer(v8, (uint64_t)qword_2578FF458);
        swift_retain_n();
        v9 = sub_249F1EF20();
        v10 = sub_249F1F814();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = swift_slowAlloc();
          v12 = swift_slowAlloc();
          v35 = v12;
          *(_DWORD *)v11 = 136446210;
          v13 = sub_249F1FA9C();
          *(_QWORD *)(v11 + 4) = sub_249E68CA8(v13, v14, &v35);
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_249D98000, v9, v10, "Loading resources for %{public}s", (uint8_t *)v11, 0xCu);
          swift_arrayDestroy();
          v15 = v12;
          v3 = v33;
          MEMORY[0x24BD06618](v15, -1, -1);
          v16 = v11;
          v4 = v32;
          MEMORY[0x24BD06618](v16, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        v17 = *(id *)(v7 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        sub_249F1F874();
        swift_unknownObjectRelease();
        if (v2)
          goto LABEL_24;

        ++v5;
        if (v34 == v4)
          goto LABEL_28;
      }
      __break(1u);
    }
    else
    {
      v18 = 0;
      v19 = &qword_2578DCF28[27];
      while (1)
      {
        v20 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        v21 = *(_QWORD *)(v3 + 8 * v18 + 32);
        v22 = v19[322];
        swift_retain();
        if (v22 != -1)
          swift_once();
        v23 = sub_249F1EF38();
        __swift_project_value_buffer(v23, (uint64_t)qword_2578FF458);
        swift_retain_n();
        v24 = sub_249F1EF20();
        v25 = sub_249F1F814();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = swift_slowAlloc();
          v27 = swift_slowAlloc();
          v35 = v27;
          *(_DWORD *)v26 = 136446210;
          v28 = sub_249F1FA9C();
          *(_QWORD *)(v26 + 4) = sub_249E68CA8(v28, v29, &v35);
          swift_release_n();
          v4 = v32;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_249D98000, v24, v25, "Loading resources for %{public}s", (uint8_t *)v26, 0xCu);
          swift_arrayDestroy();
          v30 = v27;
          v3 = v33;
          MEMORY[0x24BD06618](v30, -1, -1);
          v31 = v26;
          v19 = qword_2578DCF28 + 216;
          MEMORY[0x24BD06618](v31, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        v17 = *(id *)(v21 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        sub_249F1F874();
        swift_release();
        if (v2)
        {
LABEL_24:
          swift_bridgeObjectRelease();

          return;
        }

        ++v18;
        if (v20 == v4)
          goto LABEL_28;
      }
    }
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
  }
LABEL_28:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ControlNet.unloadResources()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = v0;
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = sub_249F1FBEC();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x24BD056B8](i, v1);
      else
        swift_retain();
      ManagedMLModel.unloadResources()();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ControlNet.prewarmResources()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  if (v0 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_249F1FBEC();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      do
      {
        v4 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x24BD056B8](v3 - 4, v1);
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
            goto LABEL_14;
        }
        else
        {
          swift_retain();
          v5 = __OFADD__(v4, 1);
          v6 = v3 - 3;
          if (v5)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        ManagedMLModel.loadResources()();
        if (v7)
        {
          swift_release();
          break;
        }
        ManagedMLModel.unloadResources()();
        swift_release();
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_249EDF870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t ObjectType;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  void *v79;
  id v80;
  const float *v81;
  float *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v89;
  void (*v90)(unint64_t, unint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t *v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  void *v105;
  uint64_t result;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  id v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  void (*v125)(char *, unint64_t, uint64_t);
  char *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  void (*v135)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  int64_t v137;
  char *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t *v144;
  uint64_t v145;
  id v146;
  id v147;
  uint64_t v148;

  v6 = v5;
  v116 = a4;
  v132 = a3;
  v119 = a1;
  v148 = *MEMORY[0x24BDAC8D0];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v138 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (unint64_t)&v108 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v127 = (char *)&v108 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v141 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v126 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v131 = (char *)&v108 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v108 - v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_249F21910;
  *(float *)(v23 + 32) = (float)a2;
  *(float *)(v23 + 36) = (float)a2;
  v147 = (id)v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  v133 = v22;
  sub_249F1EFEC();
  v117 = a5;
  if (a5 >> 62)
    goto LABEL_102;
  v24 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v25 = (uint64_t *)MEMORY[0x24BEE4AF8];
  if (!v24)
  {
LABEL_89:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v133, v16);
    return (uint64_t)v25;
  }
  v26 = 0;
  v27 = a5 & 0xC000000000000001;
  v118 = *(_QWORD *)(v119 + 16);
  v110 = a5 & 0xFFFFFFFFFFFFFF8;
  v109 = a5 + 32;
  v130 = xmmword_249F234B0;
  v129 = 0x8000000249F38D30;
  v128 = MEMORY[0x24BEE4AD8] + 8;
  v145 = v16;
  v122 = v14;
  v112 = v24;
  v111 = a5 & 0xC000000000000001;
  while (1)
  {
    v144 = v25;
    if (v27)
    {
      v120 = MEMORY[0x24BD056B8](v26, a5);
      v28 = v141;
      v29 = v118;
      v30 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_101;
    }
    else
    {
      v28 = v141;
      v29 = v118;
      if (v26 >= *(_QWORD *)(v110 + 16))
        goto LABEL_108;
      v120 = *(_QWORD *)(v109 + 8 * v26);
      swift_retain();
      v30 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_101;
    }
    v139 = v26;
    v114 = v30;
    if (v29)
    {
      v147 = (id)MEMORY[0x24BEE4AF8];
      sub_249F1FB44();
      v31 = *(unsigned __int8 *)(v28 + 80);
      v32 = sub_249D9D9F4(0, &qword_2578DDE20);
      if (v139 >= *(_QWORD *)(v116 + 16))
        goto LABEL_104;
      v33 = v32;
      v115 = v6;
      v34 = (v31 + 32) & ~v31;
      v35 = v119 + v34;
      v142 = *(_QWORD *)(v28 + 72);
      v143 = (id)(v116 + v34 + v142 * v139);
      v25 = *(uint64_t **)(v28 + 16);
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v130;
        *(_QWORD *)(inited + 32) = 0x656C706D6173;
        *(_QWORD *)(inited + 40) = 0xE600000000000000;
        v37 = v131;
        v38 = v145;
        ((void (*)(char *, uint64_t, uint64_t))v25)(v131, v35, v145);
        sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
        *(_QWORD *)(inited + 48) = sub_249F1F7FC();
        *(_QWORD *)(inited + 72) = v33;
        *(_QWORD *)(inited + 80) = 0x70657473656D6974;
        *(_QWORD *)(inited + 88) = 0xE800000000000000;
        ((void (*)(char *, char *, uint64_t))v25)(v37, v133, v38);
        *(_QWORD *)(inited + 96) = sub_249F1F7FC();
        *(_QWORD *)(inited + 120) = v33;
        *(_QWORD *)(inited + 128) = 0xD000000000000015;
        *(_QWORD *)(inited + 136) = v129;
        ((void (*)(char *, uint64_t, uint64_t))v25)(v37, v132, v38);
        *(_QWORD *)(inited + 144) = sub_249F1F7FC();
        *(_QWORD *)(inited + 168) = v33;
        *(_QWORD *)(inited + 176) = 0x6E6C6F72746E6F63;
        *(_QWORD *)(inited + 184) = 0xEF646E6F635F7465;
        ((void (*)(char *, id, uint64_t))v25)(v37, v143, v38);
        v39 = sub_249F1F7FC();
        *(_QWORD *)(inited + 216) = v33;
        *(_QWORD *)(inited + 192) = v39;
        sub_249DAE8D4(inited);
        v40 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
        v41 = (void *)sub_249F1F1F0();
        swift_bridgeObjectRelease();
        v146 = 0;
        v42 = objc_msgSend(v40, sel_initWithDictionary_error_, v41, &v146);

        v43 = v146;
        if (!v42)
          break;
        sub_249F1FB20();
        sub_249F1FB50();
        sub_249F1FB5C();
        sub_249F1FB2C();
        v35 += v142;
        if (!--v29)
        {
          v44 = (unint64_t)v147;
          v6 = v115;
          goto LABEL_18;
        }
      }
      v105 = v43;
      sub_249F1E710();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
LABEL_91:
      (*(void (**)(char *, uint64_t))(v141 + 8))(v133, v145);
      swift_bridgeObjectRelease();
      return (uint64_t)v25;
    }
    v44 = MEMORY[0x24BEE4AF8];
LABEL_18:
    v45 = v6;
    swift_bridgeObjectRetain();
    if (v44 >> 62)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
      sub_249F1FBE0();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249F1FEC8();
    }
    swift_bridgeObjectRelease();
    v46 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    v47 = (void *)sub_249F1F538();
    swift_bridgeObjectRelease();
    v48 = objc_msgSend(v46, sel_initWithFeatureProviderArray_, v47);

    v50 = MEMORY[0x24BDAC7A8](v49);
    v25 = &v108;
    v113 = v48;
    MEMORY[0x24BDAC7A8](v50);
    v52 = (uint64_t)v51;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFF8);
    sub_249F1F874();
    v6 = v45;
    if (v45)
      goto LABEL_95;

    v14 = (unint64_t)v147;
    v25 = v144;
    v16 = v145;
    if (!v144[2])
    {
      v53 = objc_msgSend(v147, sel_featuresAtIndex_, 0);
      ObjectType = swift_getObjectType();
      v55 = sub_249ED6504(ObjectType);
      swift_unknownObjectRelease();
      v56 = sub_249EE10BC(v118, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = (uint64_t *)v56;
    }
    v57 = (unint64_t)objc_msgSend((id)v14, sel_count);
    if ((v57 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
    }
    if (v57)
      break;
    swift_release();
LABEL_86:

    swift_unknownObjectRelease();
    v26 = v114;
    a5 = v117;
    v27 = v111;
    if (v114 == v112)
      goto LABEL_89;
  }
  v115 = 0;
  v6 = 0;
  v124 = v14;
  v123 = (char *)v57;
LABEL_27:
  if (v6 == v57)
    goto LABEL_98;
  v134 = (char *)(v6 + 1);
  v143 = objc_msgSend((id)v14, sel_featuresAtIndex_, v6);
  v58 = objc_msgSend(v143, sel_featureNames);
  v52 = sub_249F1F700();

  v59 = 0;
  v60 = *(_QWORD *)(v52 + 56);
  v136 = v52 + 56;
  v142 = v52;
  v61 = 1 << *(_BYTE *)(v52 + 32);
  if (v61 < 64)
    v62 = ~(-1 << v61);
  else
    v62 = -1;
  v63 = v62 & v60;
  v137 = (unint64_t)(v61 + 63) >> 6;
  while (2)
  {
    v140 = v25 + 4;
    v144 = v25;
    if (v63)
    {
LABEL_33:
      v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v65 = v64 | (v59 << 6);
      goto LABEL_48;
    }
    while (1)
    {
      v66 = v59 + 1;
      if (__OFADD__(v59, 1))
        goto LABEL_94;
      if (v66 >= v137)
        goto LABEL_26;
      v67 = *(_QWORD *)(v136 + 8 * v66);
      ++v59;
      if (!v67)
      {
        v59 = v66 + 1;
        if (v66 + 1 >= v137)
          goto LABEL_26;
        v67 = *(_QWORD *)(v136 + 8 * v59);
        if (!v67)
        {
          v59 = v66 + 2;
          if (v66 + 2 >= v137)
            goto LABEL_26;
          v67 = *(_QWORD *)(v136 + 8 * v59);
          if (!v67)
          {
            v68 = v66 + 3;
            if (v68 >= v137)
            {
LABEL_26:
              swift_unknownObjectRelease();
              swift_release();
              v57 = (unint64_t)v123;
              v6 = (unint64_t)v134;
              v14 = v124;
              if (v134 != v123)
                goto LABEL_27;
              swift_release();
              v6 = v115;
              goto LABEL_86;
            }
            v67 = *(_QWORD *)(v136 + 8 * v68);
            if (!v67)
            {
              while (1)
              {
                v59 = v68 + 1;
                if (__OFADD__(v68, 1))
                  break;
                if (v59 >= v137)
                  goto LABEL_26;
                v67 = *(_QWORD *)(v136 + 8 * v59);
                ++v68;
                if (v67)
                  goto LABEL_47;
              }
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              swift_bridgeObjectRetain();
              v107 = sub_249F1FBEC();
              a5 = v117;
              v24 = v107;
              goto LABEL_3;
            }
            v59 = v68;
          }
        }
      }
LABEL_47:
      v63 = (v67 - 1) & v67;
      v65 = __clz(__rbit64(v67)) + (v59 << 6);
LABEL_48:
      v69 = (uint64_t *)(*(_QWORD *)(v142 + 48) + 16 * v65);
      v70 = *v69;
      v71 = v69[1];
      swift_bridgeObjectRetain();
      v72 = (void *)sub_249F1F304();
      v52 = (uint64_t)objc_msgSend(v143, sel_featureValueForName_, v72);

      v16 = v141;
      if (!v52)
        goto LABEL_105;
      v73 = objc_msgSend((id)v52, sel_multiArrayValue);

      if (!v73)
        goto LABEL_106;
      if (!v139)
        break;
      if (v6 >= v25[2])
      {
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_91;
      }
      v74 = v140[v6];
      if (*(_QWORD *)(v74 + 16))
      {
        swift_bridgeObjectRetain();
        v75 = sub_249DB7D8C(v70, v71);
        v76 = v145;
        v78 = v138;
        if ((v77 & 1) != 0)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v138, *(_QWORD *)(v74 + 56) + *(_QWORD *)(v16 + 72) * v75, v145);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v78, 0, 1, v76);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v138, 1, 1, v145);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v78 = v138;
        v76 = v145;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v138, 1, 1, v145);
      }
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v78, 1, v76) == 1)
        goto LABEL_107;
      sub_249D9D9F4(0, &qword_2578DDE20);
      sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
      v79 = (void *)sub_249F1F7FC();
      v52 = (uint64_t)objc_msgSend(v73, sel_count);
      v80 = objc_retainAutorelease(v73);
      v81 = (const float *)objc_msgSend(v80, sel_dataPointer);
      v14 = objc_retainAutorelease(v79);
      v82 = (float *)objc_msgSend((id)v14, sel_dataPointer);
      if (v52 < 0)
      {
        sub_249F1FBC8();
        __break(1u);
        goto LABEL_110;
      }
      vDSP_vadd(v81, 1, v82, 1, v82, 1, v52);

      v16 = v145;
      v25 = v144;
      if (v63)
        goto LABEL_33;
    }
    v83 = v73;
    v14 = (unint64_t)v127;
    sub_249F1F01C();
    v135 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v135(v14, 0, 1, v145);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = sub_249EC94E0(v25);
    if (v6 >= v25[2])
      goto LABEL_97;
    v140 = v83;
    v144 = v25;
    v84 = v25 + 4;
    v85 = v145;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v145) == 1)
    {
      sub_249EC975C(v14);
      v52 = v84[v6];
      swift_bridgeObjectRetain();
      v86 = sub_249DB7D8C(v70, v71);
      v14 = v87;
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        v14 = 8 * v6;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v147 = (id)v84[v6];
        v84[v6] = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
          sub_249F05644();
        v52 = (uint64_t)v147;
        swift_bridgeObjectRelease();
        v89 = *(_QWORD *)(v52 + 56) + *(_QWORD *)(v16 + 72) * v86;
        v90 = *(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32);
        v125 = (void (*)(char *, unint64_t, uint64_t))v86;
        v91 = v122;
        v92 = v145;
        v90(v122, v89, v145);
        sub_249F0637C((unint64_t)v125, v52);
        v84[v6] = v52;
        swift_bridgeObjectRelease();
        v93 = 0;
      }
      else
      {
        v93 = 1;
        v92 = v145;
        v91 = v122;
      }
      v135(v91, v93, 1, v92);
      swift_bridgeObjectRelease();
      sub_249EC975C(v91);
LABEL_83:
      v25 = v144;

      v16 = v145;
      continue;
    }
    break;
  }
  v125 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 32);
  v125(v126, v14, v85);
  v16 = 8 * v6;
  LODWORD(v135) = swift_isUniquelyReferenced_nonNull_native();
  v147 = (id)v84[v6];
  v94 = v147;
  v84[v6] = 0x8000000000000000;
  v14 = sub_249DB7D8C(v70, v71);
  v96 = v94[2];
  v97 = (v95 & 1) == 0;
  v98 = v96 + v97;
  if (__OFADD__(v96, v97))
    goto LABEL_99;
  if (v94[3] >= v98)
  {
    if ((v135 & 1) == 0)
    {
      v121 = v95;
      sub_249F05644();
      LOBYTE(v95) = v121;
    }
LABEL_78:
    v52 = (uint64_t)v147;
    if ((v95 & 1) != 0)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v141 + 40))(*((_QWORD *)v147 + 7) + *(_QWORD *)(v141 + 72) * v14, v126, v145);
    }
    else
    {
      *((_QWORD *)v147 + (v14 >> 6) + 8) |= 1 << v14;
      v101 = (uint64_t *)(*(_QWORD *)(v52 + 48) + 16 * v14);
      *v101 = v70;
      v101[1] = v71;
      v125((char *)(*(_QWORD *)(v52 + 56) + *(_QWORD *)(v141 + 72) * v14), (unint64_t)v126, v145);
      v102 = *(_QWORD *)(v52 + 16);
      v103 = __OFADD__(v102, 1);
      v104 = v102 + 1;
      if (v103)
        goto LABEL_100;
      *(_QWORD *)(v52 + 16) = v104;
      swift_bridgeObjectRetain();
    }
    v84[v6] = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_83;
  }
  v121 = v95;
  sub_249F02758(v98, (int)v135);
  v99 = sub_249DB7D8C(v70, v71);
  v100 = v95 & 1;
  LOBYTE(v95) = v121;
  if ((v121 & 1) == v100)
  {
    v14 = v99;
    goto LABEL_78;
  }
LABEL_110:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t sub_249EE0AD4@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  id v8;
  uint64_t result;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_inputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v5 = sub_249F1F208();

  if (*(_QWORD *)(v5 + 16) && (v6 = sub_249DB7D8C(0x6E6C6F72746E6F63, 0xEF646E6F635F7465), (v7 & 1) != 0))
  {
    v8 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    result = swift_bridgeObjectRelease();
    *a2 = v8;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t ControlNet.inputImageShapes.getter(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_45;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v2)
    {
      v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v3 = &v36;
      sub_249F1FB44();
      if (v2 < 0)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);

        result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      v4 = 0;
      v5 = 0;
      do
      {
        if (v2 == v4)
        {
          __break(1u);
          goto LABEL_43;
        }
        if ((v1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x24BD056B8](v4, v1);
          v7 = v6;
        }
        else
        {
          v7 = *(_QWORD *)(v1 + 8 * v4 + 32);
          v6 = swift_retain();
        }
        v8 = *(void **)(v7 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
        MEMORY[0x24BDAC7A8](v6);
        sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
        v9 = v8;
        sub_249F1F874();
        ++v4;
        swift_release();

        sub_249F1FB20();
        sub_249F1FB50();
        sub_249F1FB5C();
        sub_249F1FB2C();
      }
      while (v2 != v4);
      v10 = (unint64_t)v36;
      swift_bridgeObjectRelease();
      if (v10 >> 62)
        break;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    v5 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    if (MEMORY[0x24BEE4AF8] >> 62)
      break;
LABEL_12:
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
      goto LABEL_40;
LABEL_13:
    v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v3 = &v36;
    sub_249EB5D88(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
      goto LABEL_47;
    v12 = 0;
    v30 = (_QWORD *)v10;
    v31 = v10 & 0xC000000000000001;
    v3 = v36;
    v28 = (_QWORD *)(v10 + 32);
    v29 = v11;
    while (v12 != v11)
    {
      if (v31)
        v13 = (id)MEMORY[0x24BD056B8](v12, v10);
      else
        v13 = (id)v28[v12];
      v1 = (unint64_t)v13;
      v14 = objc_msgSend(v13, sel_multiArrayConstraint);
      if (!v14)
        goto LABEL_48;
      v15 = v14;
      v33 = v3;
      v16 = objc_msgSend(v14, sel_shape);

      sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
      v17 = sub_249F1F544();

      v34 = v5;
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        v18 = sub_249F1FBEC();
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v19 = MEMORY[0x24BEE4AF8];
      if (v18)
      {
        v35 = MEMORY[0x24BEE4AF8];
        sub_249DB677C(0, v18 & ~(v18 >> 63), 0);
        if (v18 < 0)
          goto LABEL_44;
        v32 = v12;
        v20 = 0;
        v19 = v35;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
            v21 = (id)MEMORY[0x24BD056B8](v20, v17);
          else
            v21 = *(id *)(v17 + 8 * v20 + 32);
          v22 = v21;
          v23 = objc_msgSend(v21, sel_integerValue);

          v25 = *(_QWORD *)(v35 + 16);
          v24 = *(_QWORD *)(v35 + 24);
          if (v25 >= v24 >> 1)
            sub_249DB677C(v24 > 1, v25 + 1, 1);
          ++v20;
          *(_QWORD *)(v35 + 16) = v25 + 1;
          *(_QWORD *)(v35 + 8 * v25 + 32) = v23;
        }
        while (v18 != v20);

        swift_bridgeObjectRelease();
        v11 = v29;
        v10 = (unint64_t)v30;
        v12 = v32;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v3 = v33;
      v36 = v33;
      v1 = v33[2];
      v26 = v33[3];
      if (v1 >= v26 >> 1)
      {
        sub_249EB5D88(v26 > 1, v1 + 1, 1);
        v3 = v36;
      }
      ++v12;
      v3[2] = v1 + 1;
      v3[v1 + 4] = v19;
      v5 = v34;
      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v3;
      }
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v2 = sub_249F1FBEC();
  }
  swift_bridgeObjectRetain();
  v11 = sub_249F1FBEC();
  swift_bridgeObjectRelease();
  if (v11)
    goto LABEL_13;
LABEL_40:
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

void sub_249EE108C()
{
  ControlNet.loadResources()();
}

void sub_249EE10A4()
{
  ControlNet.unloadResources()();
}

ValueMetadata *type metadata accessor for ControlNet()
{
  return &type metadata for ControlNet;
}

uint64_t sub_249EE10BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  void *v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  void (*v53)(char *, uint64_t, uint64_t);
  _QWORD *v54;
  int isUniquelyReferenced_nonNull_native;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  id v78;
  unint64_t v79;
  int64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;

  v69 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v75 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v69 - v10;
  v12 = (_QWORD *)sub_249EAF8F0(MEMORY[0x24BEE4AF8]);
  v13 = *(_QWORD *)(a2 + 64);
  v73 = a2 + 64;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v74 = (unint64_t)(v14 + 63) >> 6;
  v77 = a2;
  swift_bridgeObjectRetain();
  v17 = 0;
  v71 = v4;
  v72 = v3;
  v70 = v9;
  v76 = v11;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v20 = (v16 - 1) & v16;
      v80 = v17;
      v21 = v19 | (v17 << 6);
      goto LABEL_23;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_57;
    if (v22 >= v74)
    {
LABEL_54:
      swift_release();
      return sub_249EF88AC((uint64_t)v12, v69);
    }
    v23 = *(_QWORD *)(v73 + 8 * v22);
    v24 = v17 + 1;
    if (!v23)
    {
      v24 = v17 + 2;
      if (v17 + 2 >= v74)
        goto LABEL_54;
      v23 = *(_QWORD *)(v73 + 8 * v24);
      if (!v23)
      {
        v24 = v17 + 3;
        if (v17 + 3 >= v74)
          goto LABEL_54;
        v23 = *(_QWORD *)(v73 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_22:
    v20 = (v23 - 1) & v23;
    v80 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_23:
    v79 = v20;
    v26 = (uint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(void **)(*(_QWORD *)(v77 + 56) + 8 * v21);
    v84 = 0;
    v82 = v27;
    swift_bridgeObjectRetain();
    v30 = v29;
    v31 = objc_msgSend(v30, sel_multiArrayValue, v69);
    if (!v31)
      goto LABEL_60;
    v32 = v31;
    v81 = v12;
    v33 = objc_msgSend(v31, sel_shape);

    sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
    v34 = sub_249F1F544();

    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v35 = sub_249F1FBEC();
      swift_bridgeObjectRelease();
      v78 = v30;
      if (!v35)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
    }
    else
    {
      v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      v78 = v30;
      if (!v35)
        goto LABEL_36;
    }
    v83 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_249DB677C(0, v35 & ~(v35 >> 63), 0);
    if (v35 < 0)
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v36 = 0;
    v37 = v83;
    do
    {
      if ((v34 & 0xC000000000000001) != 0)
        v38 = (id)MEMORY[0x24BD056B8](v36, v34);
      else
        v38 = *(id *)(v34 + 8 * v36 + 32);
      v39 = v38;
      v40 = objc_msgSend(v38, sel_integerValue);

      v83 = v37;
      v42 = v37[2];
      v41 = v37[3];
      if (v42 >= v41 >> 1)
      {
        sub_249DB677C(v41 > 1, v42 + 1, 1);
        v37 = v83;
      }
      ++v36;
      v37[2] = v42 + 1;
      v37[v42 + 4] = v40;
    }
    while (v35 != v36);
    swift_bridgeObjectRelease();
    v4 = v71;
    v3 = v72;
LABEL_37:
    v43 = v28;
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    v44 = (uint64_t)v76;
    sub_249F1F0A0();
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v45(v44, 0, 1, v3);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v44, 1, v3);
    v12 = v81;
    v47 = v82;
    if (v46 != 1)
    {
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v53(v75, v44, v3);
      v54 = v12;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v83 = v54;
      v57 = sub_249DB7D8C(v43, v47);
      v58 = v54[2];
      v59 = (v56 & 1) == 0;
      v60 = v58 + v59;
      if (__OFADD__(v58, v59))
        goto LABEL_56;
      v61 = v56;
      if (v54[3] < v60)
      {
        sub_249F02758(v60, isUniquelyReferenced_nonNull_native);
        v62 = sub_249DB7D8C(v43, v47);
        if ((v61 & 1) != (v63 & 1))
          goto LABEL_61;
        v57 = v62;
        v12 = v83;
        if ((v61 & 1) == 0)
          goto LABEL_51;
LABEL_49:
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 40))(v12[7] + *(_QWORD *)(v4 + 72) * v57, v75, v3);
LABEL_53:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v12 = v83;
        if ((v56 & 1) != 0)
          goto LABEL_49;
      }
      else
      {
        sub_249F05644();
        v12 = v83;
        if ((v61 & 1) != 0)
          goto LABEL_49;
      }
LABEL_51:
      v12[(v57 >> 6) + 8] |= 1 << v57;
      v64 = (uint64_t *)(v12[6] + 16 * v57);
      *v64 = v43;
      v64[1] = v47;
      v53((char *)(v12[7] + *(_QWORD *)(v4 + 72) * v57), (uint64_t)v75, v3);
      v65 = v12[2];
      v66 = __OFADD__(v65, 1);
      v67 = v65 + 1;
      if (v66)
        goto LABEL_58;
      v12[2] = v67;
      swift_bridgeObjectRetain();
      goto LABEL_53;
    }
    sub_249EC975C(v44);
    swift_bridgeObjectRetain();
    v48 = sub_249DB7D8C(v43, v47);
    v50 = v49;
    swift_bridgeObjectRelease();
    v51 = (uint64_t)v70;
    if ((v50 & 1) != 0)
    {
      v52 = swift_isUniquelyReferenced_nonNull_native();
      v83 = v12;
      if (!v52)
      {
        sub_249F05644();
        v12 = v83;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 32))(v51, v12[7] + *(_QWORD *)(v4 + 72) * v48, v3);
      sub_249F0637C(v48, (uint64_t)v12);
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    v45(v51, v18, 1, v3);
    swift_bridgeObjectRelease();
    sub_249EC975C(v51);

LABEL_6:
    v16 = v79;
    v17 = v80;
  }
  v25 = v17 + 4;
  if (v17 + 4 >= v74)
    goto LABEL_54;
  v23 = *(_QWORD *)(v73 + 8 * v25);
  if (v23)
  {
    v24 = v17 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v74)
      goto LABEL_54;
    v23 = *(_QWORD *)(v73 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_22;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  result = sub_249F1FF10();
  __break(1u);
  return result;
}

uint64_t PNDMScheduler.__allocating_init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:)(int64_t a1, int64_t a2, char a3, float a4, float a5)
{
  char v9;
  uint64_t v10;

  v9 = a3 & 1;
  v10 = swift_allocObject();
  PNDMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:)(a1, a2, v9, a4, a5);
  return v10;
}

void sub_249EE17C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  float *v7;
  float *v8;
  int64_t v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v32 = MEMORY[0x24BEE4AF8];
  sub_249EB5D34(0, v6, 0);
  v28 = v5;
  v30 = a2;
  v31 = a1;
  v29 = v4;
  if (v6)
  {
    v7 = (float *)(a1 + 32);
    v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v6;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v10 = *v8;
      v11 = logf(*v7);
      v12 = logf(v10);
      v14 = *(_QWORD *)(v32 + 16);
      v13 = *(_QWORD *)(v32 + 24);
      if (v14 >= v13 >> 1)
        sub_249EB5D34(v13 > 1, v14 + 1, 1);
      --v5;
      *(_QWORD *)(v32 + 16) = v14 + 1;
      *(float *)(v32 + 4 * v14 + 32) = v11 - v12;
      --v4;
      ++v8;
      ++v7;
      if (!--v9)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_13:
    if (v29 <= v28)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v15 = 0;
    if (v6 <= v28)
      v16 = v28;
    else
      v16 = v6;
    v17 = v16 - v6;
    v18 = v29 - v6;
    v19 = v28 - v6;
    v20 = 4 * v6 + 32;
    v21 = v31 + v20;
    v22 = v30 + v20;
    while (v18 != v15)
    {
      if (v19 == v15)
        goto LABEL_24;
      if (v17 == v15)
        goto LABEL_28;
      v23 = *(float *)(v22 + 4 * v15);
      v24 = logf(*(float *)(v21 + 4 * v15));
      v25 = logf(v23);
      v27 = *(_QWORD *)(v32 + 16);
      v26 = *(_QWORD *)(v32 + 24);
      if (v27 >= v26 >> 1)
        sub_249EB5D34(v26 > 1, v27 + 1, 1);
      *(_QWORD *)(v32 + 16) = v27 + 1;
      *(float *)(v32 + 4 * v27 + 32) = v24 - v25;
      if (v18 == ++v15)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t Scheduler.addNoise(originalSample:noise:strength:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), float a5)
{
  uint64_t v5;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  _QWORD v21[5];
  int v22;
  int v23;
  uint64_t v24;

  v11 = a4[2];
  v12 = v11(a3, (uint64_t)a4);
  result = v11(a3, (uint64_t)a4);
  v14 = (float)result * a5;
  if ((~LODWORD(v14) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v14 <= -9.2234e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v14 >= 9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (__OFSUB__(v12, (uint64_t)v14))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v15 = (v12 - (uint64_t)v14) & ~((v12 - (uint64_t)v14) >> 63);
  v16 = v11(a3, (uint64_t)a4);
  if (v15 >= v16)
  {
LABEL_10:
    MEMORY[0x24BDAC7A8](v16);
    v21[2] = a3;
    v21[3] = a4;
    v21[4] = v5;
    v22 = v20;
    v23 = v19;
    v24 = a1;
    return sub_249EB3D38((void (*)(uint64_t))sub_249EE2F18, (uint64_t)v21, a2);
  }
  v17 = a4[7](a3, (uint64_t)a4);
  result = a4[3](a3, (uint64_t)a4);
  if ((unint64_t)v15 >= *(_QWORD *)(result + 16))
    goto LABEL_15;
  v18 = *(_QWORD *)(result + 8 * v15 + 32);
  result = swift_bridgeObjectRelease();
  if ((v18 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v18 < *(_QWORD *)(v17 + 16))
  {
    v16 = swift_bridgeObjectRelease();
    goto LABEL_10;
  }
LABEL_17:
  __break(1u);
  return result;
}

float Scheduler.initNoiseSigma.getter()
{
  return 1.0;
}

uint64_t sub_249EE1BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_249EE1BB0(a1, a2, (uint64_t)sub_249EE4950, a3);
}

uint64_t sub_249EE1BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;

  v26 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v25 - v11;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v15 = *(_QWORD *)(v14 - 8);
  if (!v13)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v12, 1, 1, v14);
    goto LABEL_6;
  }
  v25[0] = a4;
  v25[1] = a3;
  v16 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v17(v12, v16, v14);
  v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
  v18(v12, 0, 1, v14);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  result = v19(v12, 1, v14);
  if ((_DWORD)result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_249EE2F40();
  v21 = sub_249F1F064();
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v12, v14);
  v17(v10, v16, v14);
  v18(v10, 0, 1, v14);
  result = v19(v10, 1, v14);
  if ((_DWORD)result != 1)
  {
    sub_249F1EFE0();
    v23 = ((uint64_t (*)(char *, uint64_t))v22)(v10, v14);
    MEMORY[0x24BDAC7A8](v23);
    v24 = v26;
    v25[-4] = a2;
    v25[-3] = v24;
    v25[-2] = v21;
    return sub_249F1EFB0();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Scheduler.weightedSum(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - v10;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v14 = *(_QWORD *)(v13 - 8);
  if (!v12)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v11, 1, 1, v13);
    goto LABEL_6;
  }
  v25 = a1;
  v26 = a3;
  v15 = a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  v16(v11, v15, v13);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v17(v11, 0, 1, v13);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  result = v18(v11, 1, v13);
  if ((_DWORD)result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_249EE2F40();
  v20 = sub_249F1F064();
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v11, v13);
  v16(v9, v15, v13);
  v17(v9, 0, 1, v13);
  result = v18(v9, 1, v13);
  if ((_DWORD)result != 1)
  {
    sub_249F1EFE0();
    v22 = ((uint64_t (*)(char *, uint64_t))v21)(v9, v13);
    MEMORY[0x24BDAC7A8](v22);
    v23 = v25;
    *(&v24 - 4) = a2;
    *(&v24 - 3) = v23;
    *(&v24 - 2) = v20;
    return sub_249F1EFB0();
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_249EE1FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(void **)a1;
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_11;
    }
    if (v8)
      bzero(v7, 4 * v8);
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9)
    return;
  if (v9 > *(_QWORD *)(a4 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  v10 = a4 + 32;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  do
  {
    v10 += 8;
    MEMORY[0x24BDAC7A8](v11);
    v11 = sub_249F1EFBC();
    v13 += v14;
    --v9;
  }
  while (v9);
}

uint64_t sub_249EE20F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21910;
  *(double *)(inited + 32) = a4;
  *(double *)(inited + 40) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_249F21910;
  v16 = v15 + v14;
  v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16);
  v17(v16, a2, v11);
  v17(v16 + v13, a1, v11);
  Scheduler.weightedSum(_:_:)(inited, v15, a3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_setDeallocating();
}

uint64_t sub_249EE2240(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & 0x100000000) != 0)
  {
    v10 = *(_QWORD *)(v2 + 64);
    swift_bridgeObjectRetain();
    return v10;
  }
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(float *)&a1 * (float)v4;
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = __OFSUB__(v4, (uint64_t)v5);
  v7 = v4 - (uint64_t)v5;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = v7 & ~(v7 >> 63);
  v1 = *(_QWORD *)(v2 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 < v3)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
    v10 = sub_249ED9590(v1, v1 + 32, v3, (2 * v2) | 1);
    swift_bridgeObjectRelease();
    return v10;
  }
  sub_249F1FED4();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (v9 != v2 - v3)
    goto LABEL_19;
  v10 = swift_dynamicCastClass();
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v10;
}

uint64_t sub_249EE239C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((a1 & 0x100000000) != 0)
  {
    v10 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain();
    return v10;
  }
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(float *)&a1 * (float)v4;
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = __OFSUB__(v4, (uint64_t)v5);
  v7 = v4 - (uint64_t)v5;
  if (v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v3 = v7 & ~(v7 >> 63);
  v1 = *(_QWORD *)(v2 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 < v3)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
    v10 = sub_249ED9590(v1, v1 + 32, v3, (2 * v2) | 1);
    swift_bridgeObjectRelease();
    return v10;
  }
  sub_249F1FED4();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (v9 != v2 - v3)
    goto LABEL_19;
  v10 = swift_dynamicCastClass();
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v10;
}

uint64_t Scheduler.calculateTimesteps(strength:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t (*v6)(unint64_t, uint64_t);
  unint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  v4 = a2;
  if ((a1 & 0x100000000) == 0)
  {
    v5 = *(float *)&a1;
    v6 = *(uint64_t (**)(unint64_t, uint64_t))(a3 + 16);
    v7 = v6(a2, a3);
    v8 = v5 * (float)v6(v4, v3);
    if ((~LODWORD(v8) & 0x7F800000) != 0)
    {
      if (v8 > -9.2234e18)
      {
        if (v8 < 9.2234e18)
        {
          if (!__OFSUB__(v7, (uint64_t)v8))
          {
            v7 = (v7 - (uint64_t)v8) & ~((uint64_t)(v7 - (uint64_t)v8) >> 63);
            v9 = (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 24))(v4, v3);
            v4 = *(_QWORD *)(v9 + 16);
            if (v4 >= v7)
            {
              v3 = v9;
              sub_249F1FED4();
              swift_unknownObjectRetain_n();
              v10 = swift_dynamicCastClass();
              if (!v10)
              {
                swift_bridgeObjectRelease();
                v10 = MEMORY[0x24BEE4AF8];
              }
              v11 = *(_QWORD *)(v10 + 16);
              swift_release();
              if (v11 == v4 - v7)
              {
                v12 = swift_dynamicCastClass();
                swift_bridgeObjectRelease();
                if (!v12)
                {
                  swift_bridgeObjectRelease();
                  return MEMORY[0x24BEE4AF8];
                }
                return v12;
              }
LABEL_19:
              swift_bridgeObjectRelease();
              v12 = sub_249ED9590(v3, v3 + 32, v7, (2 * v4) | 1);
              swift_bridgeObjectRelease();
              return v12;
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(a3 + 24))(a2, a3);
}

BOOL static BetaSchedule.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t BetaSchedule.hash(into:)()
{
  return sub_249F1FF70();
}

uint64_t BetaSchedule.hashValue.getter()
{
  sub_249F1FF64();
  sub_249F1FF70();
  return sub_249F1FFA0();
}

uint64_t PNDMScheduler.trainStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PNDMScheduler.inferenceStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PNDMScheduler.betas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.alphas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.alphasCumProd.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.timeSteps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.alpha_t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.sigma_t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.lambda_t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.modelOutputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PNDMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:)(int64_t a1, int64_t a2, char a3, float a4, float a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  float v18;
  float v19;
  float v20;
  int64_t v21;
  int64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BEE4AF8];
  v5[11] = MEMORY[0x24BEE4AF8];
  v15 = (char *)v5 + OBJC_IVAR____TtC13DiffusionBase13PNDMScheduler_currentSample;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v62 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v63 = v16;
  v62(v15, 1, 1);
  v5[2] = a2;
  v5[3] = a1;
  v65 = v5;
  if ((a3 & 1) != 0)
  {
    v18 = fabsf(sqrtf(a4));
    if (a4 == -INFINITY)
      v18 = INFINITY;
    v19 = fabsf(sqrtf(a5));
    if (a5 == -INFINITY)
      v20 = INFINITY;
    else
      v20 = v19;
    v21 = sub_249EE2FA8(a2, v18, v20);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v66[0] = v14;
      sub_249EB5D34(0, v22, 0);
      v14 = 0;
      v17 = v66[0];
      v6 = *(_QWORD *)(v66[0] + 16);
      do
      {
        v23 = *(float *)(v21 + 4 * v14 + 32);
        v66[0] = v17;
        v24 = *(_QWORD *)(v17 + 24);
        if (v6 >= v24 >> 1)
        {
          sub_249EB5D34(v24 > 1, v6 + 1, 1);
          v17 = v66[0];
        }
        ++v14;
        *(_QWORD *)(v17 + 16) = v6 + 1;
        *(float *)(v17 + 4 * v6++ + 32) = v23 * v23;
      }
      while (v22 != v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v17 = sub_249EE2FA8(a2, a4, a5);
  }
  v65[4] = v17;
  v25 = *(_QWORD *)(v17 + 16);
  v26 = MEMORY[0x24BEE4AF8];
  if (v25)
  {
    v66[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_249EB5D34(0, v25, 0);
    v14 = 0;
    v27 = (char *)v66[0];
    v6 = *(_QWORD *)(v66[0] + 16);
    do
    {
      v28 = *(float *)(v17 + 4 * v14 + 32);
      v66[0] = v27;
      v29 = *((_QWORD *)v27 + 3);
      if (v6 >= v29 >> 1)
      {
        sub_249EB5D34(v29 > 1, v6 + 1, 1);
        v27 = (char *)v66[0];
      }
      ++v14;
      *((_QWORD *)v27 + 2) = v6 + 1;
      *(float *)&v27[4 * v6++ + 32] = 1.0 - v28;
    }
    while (v25 != v14);
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v27 = (char *)MEMORY[0x24BEE4AF8];
  }
  v65[5] = v27;
  v30 = *((_QWORD *)v27 + 2);
  v31 = (_QWORD *)(v30 - 1);
  if (v30 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if (!v30)
      goto LABEL_67;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = sub_249EC94CC((uint64_t)v27);
    v32 = 0;
    do
    {
      if (v32 >= *((_QWORD *)v27 + 2))
        goto LABEL_66;
      *(float *)&v27[4 * v32 + 36] = *(float *)&v27[4 * v32 + 32] * *(float *)&v27[4 * v32 + 36];
      ++v32;
    }
    while (v31 != (_QWORD *)v32);
  }
  v65[6] = v27;
  if (!a1)
    goto LABEL_68;
  if (a2 != 0x8000000000000000 || a1 != -1)
  {
    if (a1 < 0)
      goto LABEL_69;
    v33 = (float)(a2 / a1);
    v66[0] = v26;
    swift_bridgeObjectRetain();
    v31 = v66;
    v34 = sub_249DB677C(0, a1, 0);
    v14 = 0;
    a2 = v66[0];
    v6 = 2139095040;
    v25 = 3741319169;
    do
    {
      v35 = roundf(v33 * (float)(uint64_t)v14);
      if ((~LODWORD(v35) & 0x7F800000) == 0)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      if (v35 <= -9.2234e18)
        goto LABEL_61;
      if (v35 >= 9.2234e18)
        goto LABEL_62;
      v36 = (uint64_t)v35 + 1;
      if (__OFADD__((uint64_t)v35, 1))
        goto LABEL_63;
      v66[0] = a2;
      v26 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(a2 + 24);
      if (v26 >= v37 >> 1)
      {
        v31 = v66;
        v34 = sub_249DB677C(v37 > 1, v26 + 1, 1);
        a2 = v66[0];
      }
      ++v14;
      *(_QWORD *)(a2 + 16) = v26 + 1;
      v17 = a2 + 32;
      *(_QWORD *)(a2 + 32 + 8 * v26) = v36;
    }
    while (a1 != v14);
    v66[0] = v27;
    v38 = *((_QWORD *)v27 + 2);
    MEMORY[0x24BDAC7A8](v34);
    *(&v62 - 2) = (void (*)(char *, uint64_t, uint64_t))v66;
    swift_bridgeObjectRetain();
    v39 = sub_249EE4148(v38, (uint64_t (*)(_QWORD *, uint64_t *))sub_249EE439C);
    swift_bridgeObjectRelease();
    v6 = (unint64_t)v65;
    v65[8] = v39;
    v40 = *(_QWORD **)(v6 + 48);
    v41.i32[0] = 1.0;
    v66[0] = sub_249EF87BC(v40[2], v41);
    v67 = v40;
    v42 = *(_QWORD *)(v66[0] + 16);
    MEMORY[0x24BDAC7A8](v66[0]);
    *(&v62 - 2) = (void (*)(char *, uint64_t, uint64_t))v66;
    *(&v62 - 1) = (void (*)(char *, uint64_t, uint64_t))&v67;
    swift_bridgeObjectRetain();
    v43 = sub_249EE4148(v42, (uint64_t (*)(_QWORD *, uint64_t *))sub_249EE43E4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66[0] = v43;
    v44 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v43 + 16));
    *(&v62 - 2) = (void (*)(char *, uint64_t, uint64_t))v66;
    v45 = sub_249EE4148(v44, (uint64_t (*)(_QWORD *, uint64_t *))sub_249EE493C);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 72) = v45;
    v46 = *(_QWORD *)(v6 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_249EE17C8(v46, v45);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 80) = v48;
    v67 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v25 = *(_QWORD *)(a2 + 16);
    v14 = v25 - 1;
    if (v25)
      v49 = v25 - 1;
    else
      v49 = 0;
    v50 = (2 * v49) | 1;
    swift_bridgeObjectRetain();
    sub_249F0F578(a2, a2 + 32, 0, v50);
    swift_bridgeObjectRelease();
    v31 = v67;
    v26 = v67[2];
    if (!v26)
      goto LABEL_70;
    v6 = v67[v26 + 3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_71;
    while (1)
    {
      v26 = v31[2];
      v51 = v31[3];
      v52 = v26 + 1;
      if (v26 >= v51 >> 1)
        v31 = sub_249F0CA88((_QWORD *)(v51 > 1), v26 + 1, 1, v31);
      v31[2] = v52;
      v31[v26 + 4] = v6;
      if (!v25)
        goto LABEL_75;
      v53 = *(_QWORD *)(a2 + 16);
      if (v25 > v53)
      {
        __break(1u);
      }
      else
      {
        v6 = *(_QWORD *)(v17 + 8 * v14);
        swift_bridgeObjectRelease();
        v14 = v31[2];
        v53 = v31[3];
        v52 = v14 + 1;
        if (v14 < v53 >> 1)
          goto LABEL_53;
      }
      v31 = sub_249F0CA88((_QWORD *)(v53 > 1), v52, 1, v31);
LABEL_53:
      v54 = v31 + 4;
      v31[2] = v52;
      v31[v14 + 4] = v6;
      v67 = v31;
      if (!v14)
      {
LABEL_59:
        v59 = (uint64_t)v64;
        v58 = v65;
        v65[7] = v31;
        v58[12] = 0;
        v58[13] = MEMORY[0x24BEE4AF8];
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62)(v59, 1, 1, v63);
        v60 = (uint64_t)v58 + OBJC_IVAR____TtC13DiffusionBase13PNDMScheduler_currentSample;
        swift_beginAccess();
        sub_249EE4430(v59, v60);
        swift_endAccess();
        swift_bridgeObjectRelease();
        return (uint64_t)v58;
      }
      v55 = 0;
      while (1)
      {
        v56 = v31[2];
        if (v55 >= v56)
          break;
        if (v14 >= v56)
          goto LABEL_65;
        v57 = v54[v55];
        v54[v55] = v54[v14];
        v54[v14] = v57;
        if ((uint64_t)++v55 >= (uint64_t)--v14)
        {
          v67 = v31;
          goto LABEL_59;
        }
      }
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      v31 = sub_249F0CA88(0, v26 + 1, 1, v31);
    }
  }
  __break(1u);
LABEL_75:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_249EE2F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_249EE20F0(a1, *(_QWORD *)(v2 + 48), a2, *(float *)(v2 + 40), *(float *)(v2 + 44));
}

unint64_t sub_249EE2F40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578D95F8;
  if (!qword_2578D95F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578D67D8);
    result = MEMORY[0x24BD06528](MEMORY[0x24BDBFCD0], v1);
    atomic_store(result, (unint64_t *)&qword_2578D95F8);
  }
  return result;
}

void sub_249EE2F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_249EE1FC4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

int64_t sub_249EE2FA8(int64_t result, float a2, float a3)
{
  uint64_t v3;
  int64_t v4;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;

  v3 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = result;
  if (result < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v6 = (float)(a3 - a2) / (float)v3;
    v10 = MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v4, 0);
    v7 = 0;
    result = v10;
    v8 = *(_QWORD *)(v10 + 16);
    do
    {
      v11 = result;
      v9 = *(_QWORD *)(result + 24);
      if (v8 >= v9 >> 1)
      {
        sub_249EB5D34(v9 > 1, v8 + 1, 1);
        result = v11;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(float *)(result + 4 * v8++ + 32) = (float)(v6 * (float)v7++) + a2;
    }
    while (v4 != v7);
  }
  return result;
}

uint64_t PNDMScheduler.step(output:timeStep:sample:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t *, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t (*v64)(unint64_t, char *, uint64_t);
  uint64_t result;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(unint64_t, char *, uint64_t);
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  void (*v94)(unint64_t, char *, uint64_t);
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(_QWORD, _QWORD, _QWORD);
  uint64_t v104;
  uint64_t v105;
  char **v106;
  unint64_t v107;
  char *v108;
  char *v109;
  void (*v110)(unint64_t, char *, uint64_t);
  char *v111;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v101 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v100 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v108 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v106 = (char **)((char *)&v100 - v20);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (unint64_t)&v100 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v111 = (char *)&v100 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v100 - v27;
  v30 = v5[3];
  if (!v30)
  {
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v31 = v5[2];
  if (v31 == 0x8000000000000000 && v30 == -1)
    goto LABEL_63;
  v104 = a4;
  a4 = v31 / v30;
  v32 = __OFSUB__(a2, v31 / v30);
  v33 = a2 - v31 / v30;
  if (v32)
    goto LABEL_57;
  v107 = v33;
  v102 = v14;
  v103 = v28;
  v34 = *(void (**)(char *, uint64_t *, uint64_t))(v16 + 16);
  v34((char *)&v100 - v27, a1, v15);
  v110 = (void (*)(unint64_t, char *, uint64_t))v34;
  v34(v111, (uint64_t *)a3, v15);
  v35 = v5[12];
  v109 = v29;
  if (v35 != 1)
  {
LABEL_9:
    a3 = (char **)(v5 + 13);
    swift_beginAccess();
    v29 = (char *)v5[13];
    v36 = *((_QWORD *)v29 + 2);
    if (v36 < 4)
      goto LABEL_16;
    v105 = a2;
    sub_249F1FED4();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    v37 = swift_dynamicCastClass();
    if (!v37)
    {
      swift_bridgeObjectRelease();
      v37 = MEMORY[0x24BEE4AF8];
    }
    v38 = *(_QWORD *)(v37 + 16);
    swift_release();
    if (v38 != 3)
      goto LABEL_69;
    v39 = swift_dynamicCastClass();
    a2 = v105;
    if (!v39)
    {
      swift_bridgeObjectRelease();
      v39 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_15;
  }
  v24 = a2 + a4;
  if (__OFADD__(a2, a4))
  {
    __break(1u);
    goto LABEL_9;
  }
  while (1)
  {
    a3 = (char **)(v5 + 13);
    swift_beginAccess();
    v36 = v5[13];
    v43 = *(_QWORD *)(v36 + 16);
    v107 = v24;
    if (v43 == 3)
      break;
    if (v43 == 2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
      v70 = *(_QWORD *)(v16 + 72);
      v71 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_249F21910;
      v73 = v36 + v70 + v71;
      v74 = v110;
      result = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))v110)(v72 + v71, v73, v15);
      v75 = *((_QWORD *)*a3 + 2);
      v53 = v75 >= 2;
      v76 = v75 - 2;
      if (!v53)
        goto LABEL_70;
      v74(v72 + v71 + v70, &(*a3)[v71 + v76 * v70], v15);
      a4 = (uint64_t)v103;
      sub_249EE1BB0((uint64_t)&unk_251B5A670, v72, (uint64_t)sub_249EE4950, (uint64_t)v103);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v14 = *(char **)(v16 + 8);
      v29 = v109;
      ((void (*)(char *, uint64_t))v14)(v109, v15);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v29, a4, v15);
LABEL_43:
      a3 = v106;
LABEL_44:
      v24 = v107;
LABEL_45:
      sub_249EE2F40();
      a1 = (uint64_t *)v29;
      v77 = sub_249F1F064();
      if ((v24 & 0x8000000000000000) != 0)
      {
LABEL_58:
        __break(1u);
      }
      else
      {
        v78 = v5[8];
        if (v24 < *(_QWORD *)(v78 + 16))
        {
          v79 = v5[9];
          if (v24 < *(_QWORD *)(v79 + 16))
          {
            v80 = v77;
            v81 = *(_DWORD *)(v78 + 4 * v24 + 32);
            v82 = *(_DWORD *)(v79 + 4 * v24 + 32);
            v83 = sub_249F1EFE0();
            MEMORY[0x24BDAC7A8](v83);
            *(&v100 - 4) = v80;
            *(&v100 - 3) = (uint64_t)v29;
            *(&v100 - 2) = (uint64_t)v111;
            *((_DWORD *)&v100 - 2) = v82;
            *((_DWORD *)&v100 - 1) = v81;
            sub_249F1EFB0();
            v110((unint64_t)v108, (char *)a3, v15);
            a1 = v5 + 11;
            swift_beginAccess();
            a4 = v5[11];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v5[11] = a4;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
LABEL_49:
              v86 = *(_QWORD *)(a4 + 16);
              v85 = *(_QWORD *)(a4 + 24);
              v29 = (char *)(v86 + 1);
              if (v86 >= v85 >> 1)
              {
                a4 = sub_249F0CCB4(v85 > 1, v86 + 1, 1, a4);
                *a1 = a4;
              }
              *(_QWORD *)(a4 + 16) = v29;
              (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(a4+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v86, v108, v15);
              swift_endAccess();
              v87 = (uint64_t)v111;
              v24 = (unint64_t)v109;
              a1 = v5;
              sub_249EE3DE4((uint64_t)v111, v107, a2, (uint64_t)v109, v104);
              ((void (*)(char **, uint64_t))v14)(a3, v15);
              ((void (*)(uint64_t, uint64_t))v14)(v87, v15);
              result = ((uint64_t (*)(unint64_t, uint64_t))v14)(v24, v15);
              v88 = v5[12];
              v32 = __OFADD__(v88, 1);
              v89 = v88 + 1;
              if (!v32)
              {
                v5[12] = v89;
                return result;
              }
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              v29 = (char *)sub_249F0CCB4(0, *((_QWORD *)v29 + 2) + 1, 1, (unint64_t)v29);
              *a3 = v29;
              goto LABEL_17;
            }
LABEL_61:
            a4 = sub_249F0CCB4(0, *(_QWORD *)(a4 + 16) + 1, 1, a4);
            *a1 = a4;
            goto LABEL_49;
          }
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
      }
      __break(1u);
      goto LABEL_60;
    }
    v105 = a2;
    v44 = v43 - 1;
    if (v43 == 1)
    {
      v45 = v5[12];
      if (v45 == 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
        v90 = *(_QWORD *)(v16 + 72);
        v91 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v92 = swift_allocObject();
        *(_OWORD *)(v92 + 16) = xmmword_249F21910;
        v93 = a1;
        v94 = v110;
        result = ((uint64_t (*)(unint64_t, uint64_t *, uint64_t))v110)(v92 + v91, v93, v15);
        v95 = *((_QWORD *)*a3 + 2);
        if (!v95)
          goto LABEL_72;
        v94(v92 + v91 + v90, &(*a3)[v91 + (v95 - 1) * v90], v15);
        v96 = v103;
        sub_249EE1BB0((uint64_t)&unk_251B5A640, v92, (uint64_t)sub_249EE4950, (uint64_t)v103);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v14 = *(char **)(v16 + 8);
        v29 = v109;
        ((void (*)(char *, uint64_t))v14)(v109, v15);
        v103 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 32);
        v103(v29, v96, v15);
        v97 = (uint64_t)v5 + OBJC_IVAR____TtC13DiffusionBase13PNDMScheduler_currentSample;
        swift_beginAccess();
        v98 = v101;
        sub_249EE44F0(v97, v101);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v98, 1, v15);
        a2 = v105;
        a3 = v106;
        if ((_DWORD)result == 1)
          goto LABEL_73;
        v99 = (uint64_t)v111;
        ((void (*)(char *, uint64_t))v14)(v111, v15);
        v103(v99, v98, v15);
        a4 = (uint64_t)v102;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v102, 1, 1, v15);
        swift_beginAccess();
        sub_249EE4430(a4, v97);
        swift_endAccess();
        goto LABEL_44;
      }
      if (!v45)
      {
        v14 = *(char **)(v16 + 8);
        ((void (*)(char *, uint64_t))v14)(v29, v15);
        v46 = a1;
        v47 = (void (*)(char *, uint64_t, uint64_t))v110;
        v110((unint64_t)v29, (char *)v46, v15);
        a4 = (uint64_t)v102;
        v47(v102, (uint64_t)v111, v15);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a4, 0, 1, v15);
        v48 = (uint64_t)v5 + OBJC_IVAR____TtC13DiffusionBase13PNDMScheduler_currentSample;
        swift_beginAccess();
        sub_249EE4430(a4, v48);
        swift_endAccess();
        a2 = v105;
        a3 = v106;
        goto LABEL_45;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    a1 = *(uint64_t **)(v16 + 72);
    v24 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_249F234B0;
    if (!v43)
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    v29 = (char *)v49;
    v50 = v49 + v24;
    v51 = v36 + v24 + v44 * (_QWORD)a1;
    v36 = (unint64_t)v110;
    v110(v49 + v24, (char *)v51, v15);
    v52 = *((_QWORD *)*a3 + 2);
    v53 = v52 >= 2;
    v54 = v52 - 2;
    if (!v53)
      goto LABEL_66;
    ((void (*)(char *, char *, uint64_t))v36)((char *)a1 + v50, &(*a3)[v24 + v54 * (_QWORD)a1], v15);
    v55 = *((_QWORD *)*a3 + 2);
    v53 = v55 >= 3;
    v56 = v55 - 3;
    if (!v53)
      goto LABEL_67;
    ((void (*)(unint64_t, char *, uint64_t))v36)(v50 + 2 * (_QWORD)a1, &(*a3)[v24 + v56 * (_QWORD)a1], v15);
    v57 = *((_QWORD *)*a3 + 2);
    v53 = v57 >= 4;
    v58 = v57 - 4;
    if (v53)
    {
      ((void (*)(unint64_t, char *, uint64_t))v36)(v50 + 3 * (_QWORD)a1, &(*a3)[v24 + v58 * (_QWORD)a1], v15);
      a4 = (uint64_t)v103;
      sub_249EE1BB0((uint64_t)&unk_251B5A6D8, (uint64_t)v29, (uint64_t)sub_249EE4950, (uint64_t)v103);
      swift_setDeallocating();
      goto LABEL_39;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    swift_bridgeObjectRelease();
    v39 = sub_249ED98A0((uint64_t)v29, (uint64_t)&v29[(*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)], v36 - 3, (2 * v36) | 1);
    a2 = v105;
LABEL_15:
    swift_bridgeObjectRelease();
    *a3 = (char *)v39;
    swift_bridgeObjectRelease();
LABEL_16:
    v110(v24, (char *)a1, v15);
    swift_beginAccess();
    v29 = *a3;
    v40 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v29;
    if ((v40 & 1) == 0)
      goto LABEL_64;
LABEL_17:
    v42 = *((_QWORD *)v29 + 2);
    v41 = *((_QWORD *)v29 + 3);
    if (v42 >= v41 >> 1)
    {
      v29 = (char *)sub_249F0CCB4(v41 > 1, v42 + 1, 1, (unint64_t)v29);
      *a3 = v29;
    }
    *((_QWORD *)v29 + 2) = v42 + 1;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 32))(&v29[((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v42], v24, v15);
    swift_endAccess();
    v24 = a2;
    a2 = v107;
    v29 = v109;
  }
  v105 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
  v59 = *(_QWORD *)(v16 + 72);
  v60 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_249F22C20;
  v62 = v61 + v60;
  v63 = v36 + 2 * v59 + v60;
  v64 = (uint64_t (*)(unint64_t, char *, uint64_t))v110;
  result = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))v110)(v61 + v60, v63, v15);
  v66 = *((_QWORD *)*a3 + 2);
  v53 = v66 >= 2;
  v67 = v66 - 2;
  if (v53)
  {
    result = v64(v62 + v59, &(*a3)[v60 + v67 * v59], v15);
    v68 = *((_QWORD *)*a3 + 2);
    v53 = v68 >= 3;
    v69 = v68 - 3;
    if (!v53)
      goto LABEL_71;
    v64(v62 + 2 * v59, &(*a3)[v60 + v69 * v59], v15);
    a4 = (uint64_t)v103;
    sub_249EE1BB0((uint64_t)&unk_251B5A6A0, v61, (uint64_t)sub_249EE4950, (uint64_t)v103);
    swift_setDeallocating();
LABEL_39:
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v14 = *(char **)(v16 + 8);
    v29 = v109;
    ((void (*)(char *, uint64_t))v14)(v109, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v29, a4, v15);
    a2 = v105;
    goto LABEL_43;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  void (*v12)(_BYTE *, uint64_t);
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v17[-v9];
  result = sub_249F1F754();
  if (__OFSUB__(0, a1))
  {
    __break(1u);
  }
  else
  {
    sub_249F1F748();
    v12 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v12(v8, AssociatedTypeWitness);
    v13 = (void (*)(_BYTE *, _QWORD))sub_249F1F784();
    v15 = v14;
    v16 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a2, v15, v16);
    v13(v17, 0);
    return ((uint64_t (*)(_BYTE *, uint64_t))v12)(v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_249EE3DE4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, uint64_t, uint64_t);

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v5 + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a3 & ~(a3 >> 63);
  if (v9 < v8)
  {
    v11 = result;
    v12 = v7 + 32;
    v13 = *(float *)(v12 + 4 * a2);
    v14 = *(float *)(v12 + 4 * v9);
    v15 = sqrtf(v14 / v13);
    v16 = (float)-(float)(v14 - v13)
        / (float)((float)(v13 * sqrtf(1.0 - v14)) + sqrtf(v14 * (float)(v13 * (float)(1.0 - v13))));
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD68);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249F21910;
    *(double *)(inited + 32) = v15;
    *(double *)(inited + 40) = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_249F21910;
    v23 = v22 + v21;
    v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16);
    v24(v23, v11, v18);
    v24(v23 + v20, a4, v18);
    sub_249EE1BB0(inited, v22, (uint64_t)sub_249EE4950, a5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    return swift_setDeallocating();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t PNDMScheduler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_249EC975C(v0 + OBJC_IVAR____TtC13DiffusionBase13PNDMScheduler_currentSample);
  return v0;
}

uint64_t PNDMScheduler.__deallocating_deinit()
{
  PNDMScheduler.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_249EE402C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t sub_249EE4038()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 24);
}

uint64_t sub_249EE4044()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_249EE4054()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_249EE4060()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_249EE406C()
{
  return swift_bridgeObjectRetain();
}

float sub_249EE4078()
{
  return 1.0;
}

uint64_t sub_249EE4080()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_249EE40C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  return PNDMScheduler.step(output:timeStep:sample:)(a1, a2, a3, a4);
}

uint64_t sub_249EE40E0(unint64_t a1)
{
  return sub_249EE239C(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_249EE4114(unint64_t a1)
{
  return sub_249EE2240(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_249EE4148(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  if (result)
  {
    v5 = sub_249F1F58C();
    *(_QWORD *)(v5 + 16) = v4;
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  v6 = v5 + 32;
  v7[1] = v4;
  v8 = 0;
  v7[0] = v5 + 32;
  result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(_QWORD *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(_QWORD *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_249EE4240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a2 + 16) != v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)a3)
  {
    vDSP_vsub((const float *)(a2 + 32), 1, (const float *)(a1 + 32), 1, *(float **)a3, 1, v3);
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_249EE4288(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 >> 31)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)a2)
    goto LABEL_7;
  vvsqrtf(*(float **)a2, (const float *)(a1 + 32), &v3);
}

void sub_249EE430C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;

  v5 = *a3;
  sub_249EE4240(*a3, *a4, a1);
  *a2 = *(_QWORD *)(v5 + 16);
}

void sub_249EE4358(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = *a3;
  sub_249EE4288(*a3, a1);
  *a2 = *(_QWORD *)(v4 + 16);
}

void sub_249EE439C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = **(_QWORD **)(v2 + 16);
  sub_249EE4288(v4, a1);
  *a2 = *(_QWORD *)(v4 + 16);
}

void sub_249EE43E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;

  v4 = *(uint64_t **)(v2 + 24);
  v5 = **(_QWORD **)(v2 + 16);
  sub_249EE4240(v5, *v4, a1);
  *a2 = *(_QWORD *)(v5 + 16);
}

uint64_t sub_249EE4430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EE4478()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

uint64_t sub_249EE44F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_249EE453C()
{
  unint64_t result;

  result = qword_2578DE428;
  if (!qword_2578DE428)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for BetaSchedule, &type metadata for BetaSchedule);
    atomic_store(result, (unint64_t *)&qword_2578DE428);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BetaSchedule(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EE45CC + 4 * byte_249F3178D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EE4600 + 4 * asc_249F31788[v4]))();
}

uint64_t sub_249EE4600(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EE4608(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EE4610);
  return result;
}

uint64_t sub_249EE461C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EE4624);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EE4628(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EE4630(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BetaSchedule()
{
  return &type metadata for BetaSchedule;
}

uint64_t sub_249EE464C()
{
  return type metadata accessor for PNDMScheduler();
}

uint64_t type metadata accessor for PNDMScheduler()
{
  uint64_t result;

  result = qword_2578DE458;
  if (!qword_2578DE458)
    return swift_getSingletonMetadata();
  return result;
}

void sub_249EE4690()
{
  unint64_t v0;

  sub_249EE472C();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_249EE472C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2578DE468[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578D67D8);
    v0 = sub_249F1F970();
    if (!v1)
      atomic_store(v0, qword_2578DE468);
  }
}

uint64_t sub_249EE4784()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

float32x4_t *sub_249EE4804(float32x4_t *result, double a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  float32x4_t *v5;
  float v6;
  float32x4_t *v7;
  unint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  unint64_t v20;
  float32x4_t v21;

  v4 = *(_QWORD *)(v3 + 16);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    return result;
  }
  if (v4)
  {
    v5 = *(float32x4_t **)(v3 + 32);
    v6 = *(float *)(v3 + 48);
    LODWORD(a3) = *(_DWORD *)(v3 + 52);
    v7 = **(float32x4_t ***)(v3 + 24);
    if (v4 < 8)
    {
      v8 = 0;
LABEL_5:
      v9 = &v7->f32[v8];
      v10 = &v5->f32[v8];
      v11 = &result->f32[v8];
      v12 = v4 - v8;
      do
      {
        v13 = *v11++;
        v14 = v13;
        v15 = *v10++;
        *v9++ = (float)(v14 - (float)(v6 * v15)) / *(float *)&a3;
        --v12;
      }
      while (v12);
      return result;
    }
    v8 = 0;
    if ((unint64_t)((char *)v7 - (char *)result) < 0x20)
      goto LABEL_5;
    if ((unint64_t)((char *)v7 - (char *)v5) < 0x20)
      goto LABEL_5;
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    v17 = result + 1;
    v18 = v5 + 1;
    v19 = v7 + 1;
    v20 = v4 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v21 = vdivq_f32(vsubq_f32(*v17, vmulq_n_f32(*v18, v6)), v16);
      v19[-1] = vdivq_f32(vsubq_f32(v17[-1], vmulq_n_f32(v18[-1], v6)), v16);
      *v19 = v21;
      v17 += 2;
      v18 += 2;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v4 != v8)
      goto LABEL_5;
  }
  return result;
}

void sub_249EE48DC(const float *__X)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v3 <= 0x7FFFFFFF)
  {
    cblas_saxpy(v3, *(const float *)(v1 + 24), __X, 1, **(float ***)(v1 + 32), 1);
    return;
  }
  __break(1u);
}

void sub_249EE493C(uint64_t a1, _QWORD *a2)
{
  sub_249EE439C(a1, a2);
}

void sub_249EE4950(uint64_t a1, uint64_t a2)
{
  sub_249EE2F8C(a1, a2);
}

uint64_t sub_249EE4964(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1F8);
  MEMORY[0x24BDAC7A8](v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  if (a2 == 1.0)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE5F0);
    v9 = sub_249DDFC68(&qword_2578DE5F8, &qword_2578DE5F0, MEMORY[0x24BDBFE28]);
    v7 = vdupq_n_s64(1uLL);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    sub_249F1F0AC();
    sub_249DDFC68(&qword_2578DE200, &qword_2578DE1F8, MEMORY[0x24BDBFD50]);
    sub_249F1F058();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  }
  v6 = (_QWORD *)sub_249F1EFE0();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v6[2])
    {
LABEL_5:
      v6[4] = 1;
      MEMORY[0x24BDAC7A8](result);
      *((_QWORD *)&v7 - 2) = a1;
      *((float *)&v7 - 2) = a2;
      swift_bridgeObjectRetain();
      sub_249F1EFB0();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    result = (uint64_t)sub_249EC947C(v6);
    v6 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_249EE4B58(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1F8);
  MEMORY[0x24BDAC7A8](v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  if (a2 == 1.0)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE5F0);
    v9 = sub_249DDFC68(&qword_2578DE5F8, &qword_2578DE5F0, MEMORY[0x24BDBFE28]);
    v7 = vdupq_n_s64(1uLL);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    sub_249F1F0AC();
    sub_249DDFC68(&qword_2578DE200, &qword_2578DE1F8, MEMORY[0x24BDBFD50]);
    sub_249F1F058();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  }
  v6 = (_QWORD *)sub_249F1EFE0();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v6[2])
    {
LABEL_5:
      v6[4] = 1;
      MEMORY[0x24BDAC7A8](result);
      *((_QWORD *)&v7 - 2) = a1;
      *((float *)&v7 - 2) = a2;
      swift_bridgeObjectRetain();
      sub_249F1EFB0();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    result = (uint64_t)sub_249EC947C(v6);
    v6 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

void DiffusionBaseXLPipeline.init(textEncoder:textEncoder2:unet:unetRefiner:decoder:encoder:reduceMemory:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  uint64_t v18;

  *(_QWORD *)(a9 + 88) = 0;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  v18 = a9 + 40;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_QWORD *)(a9 + 120) = 0;
  *(_QWORD *)(a9 + 128) = 0;
  *(_BYTE *)(a9 + 136) = 0;
  sub_249EE4E10(a1, a9);
  sub_249EE4E10(a2, v18);
  *(_QWORD *)(a9 + 80) = a3;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a9 + 88) = a4;
  *(_QWORD *)(a9 + 96) = a5;
  *(_QWORD *)(a9 + 104) = a6;
  *(_QWORD *)(a9 + 112) = a7;
  sub_249EB717C(*(_QWORD *)(a9 + 120), *(void **)(a9 + 128));
  *(_QWORD *)(a9 + 120) = a8;
  *(_QWORD *)(a9 + 128) = a10;
  *(_BYTE *)(a9 + 136) = a11;
}

uint64_t sub_249EE4E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DiffusionBaseXLPipeline.loadResources()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = (_QWORD *)v0;
  if (*(_BYTE *)(v0 + 136) == 1)
  {
    DiffusionBaseXLPipeline.prewarmResources()();
    return;
  }
  sub_249DCC274(v0 + 40, (uint64_t)&v31, &qword_2578DE548);
  v3 = v33;
  if (v33)
  {
    v4 = v34;
    __swift_project_boxed_opaque_existential_1(&v31, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    if (v1)
      return;
  }
  else
  {
    sub_249DCC2FC((uint64_t)&v31, &qword_2578DE548);
  }
  Unet.loadResources()();
  if (!v5)
  {
    v6 = v2[13];
    v7 = v2[14];
    ManagedMLModel.loadResources()();
    v9 = v8;
    if (!v8)
    {
      if (v6)
      {
        ManagedMLModel.loadResources()();
        v9 = v10;
        if (v10)
        {

          v9 = 0;
        }
      }
      if (v7)
      {
        ManagedMLModel.loadResources()();
        v9 = v11;
        if (v11)
        {

          v9 = 0;
        }
      }
      sub_249DCC274((uint64_t)v2, (uint64_t)&v31, &qword_2578DE548);
      v12 = v33;
      if (v33)
      {
        v13 = v34;
        __swift_project_boxed_opaque_existential_1(&v31, v33);
        (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 8))(v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
        if (v9)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
          v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = xmmword_249F21770;
          v31 = 0;
          v32 = 0xE000000000000000;
          sub_249F1FA84();
          sub_249F1F460();
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
          sub_249F1FB98();
          v15 = v31;
          v16 = v32;
          *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v14 + 32) = v15;
          *(_QWORD *)(v14 + 40) = v16;
          sub_249F1FF58();
          swift_bridgeObjectRelease();

        }
      }
      else
      {
        sub_249DCC2FC((uint64_t)&v31, &qword_2578DE548);
      }
      v17 = v2[11];
      if (v17)
      {
        if (v17 >> 62)
          goto LABEL_37;
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        for (; v18; v18 = sub_249F1FBEC())
        {
          v19 = 4;
          while (1)
          {
            v20 = v19 - 4;
            if ((v17 & 0xC000000000000001) == 0)
              break;
            MEMORY[0x24BD056B8](v19 - 4, v17);
            v21 = __OFADD__(v20, 1);
            v22 = v19 - 3;
            if (v21)
              goto LABEL_36;
LABEL_29:
            ManagedMLModel.loadResources()();
            if (v23)
            {
              swift_release();
              swift_bridgeObjectRelease();
              __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
              v24 = swift_allocObject();
              *(_OWORD *)(v24 + 16) = xmmword_249F21770;
              v31 = 0;
              v32 = 0xE000000000000000;
              sub_249F1FA84();
              sub_249F1F460();
              __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
              sub_249F1FB98();
              v25 = v31;
              v26 = v32;
              *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
              *(_QWORD *)(v24 + 32) = v25;
              *(_QWORD *)(v24 + 40) = v26;
              sub_249F1FF58();
              swift_bridgeObjectRelease();

              goto LABEL_33;
            }
            ManagedMLModel.unloadResources()();
            swift_release();
            ++v19;
            if (v22 == v18)
              goto LABEL_31;
          }
          swift_retain();
          v21 = __OFADD__(v20, 1);
          v22 = v19 - 3;
          if (!v21)
            goto LABEL_29;
LABEL_36:
          __break(1u);
LABEL_37:
          swift_bridgeObjectRetain();
        }
LABEL_31:
        swift_bridgeObjectRelease();
      }
LABEL_33:
      if (v2[15])
      {
        ManagedMLModel.loadResources()();
        if (v27)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_249F21770;
          v31 = 0;
          v32 = 0xE000000000000000;
          sub_249F1FA84();
          sub_249F1F460();
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
          sub_249F1FB98();
          v29 = v31;
          v30 = v32;
          *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v28 + 32) = v29;
          *(_QWORD *)(v28 + 40) = v30;
          sub_249F1FF58();
          swift_bridgeObjectRelease();

        }
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DiffusionBaseXLPipeline.prewarmResources()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v0;
  sub_249DCC274((uint64_t)(v0 + 5), (uint64_t)&v37, &qword_2578DE548);
  v3 = v39;
  if (v39)
  {
    v4 = v40;
    __swift_project_boxed_opaque_existential_1(&v37, v39);
    sub_249F17DD4(v3, *(_QWORD *)(v4 + 8));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
    if (v1)
      return;
  }
  else
  {
    sub_249DCC2FC((uint64_t)&v37, &qword_2578DE548);
  }
  v5 = v2[10];
  if (v5 >> 62)
    goto LABEL_56;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = sub_249F1FBEC())
  {
    v7 = 4;
    while (1)
    {
      v8 = v7 - 4;
      if ((v5 & 0xC000000000000001) == 0)
        break;
      MEMORY[0x24BD056B8](v7 - 4, v5);
      v9 = __OFADD__(v8, 1);
      v10 = v7 - 3;
      if (v9)
        goto LABEL_54;
LABEL_13:
      ManagedMLModel.loadResources()();
      if (v11)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      ManagedMLModel.unloadResources()();
      swift_release();
      ++v7;
      if (v10 == v6)
        goto LABEL_15;
    }
    swift_retain();
    v9 = __OFADD__(v8, 1);
    v10 = v7 - 3;
    if (!v9)
      goto LABEL_13;
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_bridgeObjectRetain();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v12 = v2[13];
  v13 = v2[14];
  swift_retain();
  swift_retain();
  swift_retain();
  ManagedMLModel.loadResources()();
  v15 = v14;
  if (v14)
  {
    swift_release();
    swift_release();
LABEL_17:
    swift_release();
    return;
  }
  if (v12)
  {
    ManagedMLModel.loadResources()();
    v15 = v16;
    if (v16)
    {

      v15 = 0;
    }
  }
  if (v13)
  {
    ManagedMLModel.loadResources()();
    v15 = v17;
    if (v17)
    {

      v15 = 0;
    }
  }
  ManagedMLModel.unloadResources()();
  if (v12)
    ManagedMLModel.unloadResources()();
  if (v13)
    ManagedMLModel.unloadResources()();
  swift_release();
  swift_release();
  swift_release();
  sub_249DCC274((uint64_t)v2, (uint64_t)&v37, &qword_2578DE548);
  v18 = v39;
  if (v39)
  {
    v19 = v40;
    __swift_project_boxed_opaque_existential_1(&v37, v39);
    sub_249F17DD4(v18, *(_QWORD *)(v19 + 8));
    if (v15)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_249F21770;
      v37 = 0;
      v38 = 0xE000000000000000;
      sub_249F1FA84();
      sub_249F1F460();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
      sub_249F1FB98();
      v21 = v37;
      v22 = v38;
      *(_QWORD *)(v20 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v20 + 32) = v21;
      *(_QWORD *)(v20 + 40) = v22;
      sub_249F1FF58();
      swift_bridgeObjectRelease();

      v5 = v2[11];
      if (!v5)
        goto LABEL_47;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
      v5 = v2[11];
      if (!v5)
        goto LABEL_47;
    }
LABEL_36:
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = sub_249F1FBEC();
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v23 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v23)
      {
LABEL_38:
        v24 = 4;
        while (1)
        {
          v25 = v24 - 4;
          if ((v5 & 0xC000000000000001) != 0)
          {
            MEMORY[0x24BD056B8](v24 - 4, v5);
            v9 = __OFADD__(v25, 1);
            v26 = v24 - 3;
            if (v9)
              goto LABEL_55;
          }
          else
          {
            swift_retain();
            v9 = __OFADD__(v25, 1);
            v26 = v24 - 3;
            if (v9)
              goto LABEL_55;
          }
          ManagedMLModel.loadResources()();
          if (v27)
            break;
          ManagedMLModel.unloadResources()();
          swift_release();
          ++v24;
          if (v26 == v23)
            goto LABEL_46;
        }
        swift_release();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
        v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_249F21770;
        v37 = 0;
        v38 = 0xE000000000000000;
        sub_249F1FA84();
        sub_249F1F460();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
        sub_249F1FB98();
        v35 = v37;
        v36 = v38;
        *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v34 + 32) = v35;
        *(_QWORD *)(v34 + 40) = v36;
        sub_249F1FF58();
        swift_bridgeObjectRelease();

        if (!v2[15])
          return;
        goto LABEL_48;
      }
    }
LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  sub_249DCC2FC((uint64_t)&v37, &qword_2578DE548);
  v5 = v2[11];
  if (v5)
    goto LABEL_36;
LABEL_47:
  if (!v2[15])
    return;
LABEL_48:
  v28 = (void *)v2[16];
  swift_retain();
  v29 = v28;
  ManagedMLModel.loadResources()();
  if (!v30)
  {
    ManagedMLModel.unloadResources()();

    goto LABEL_17;
  }

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_249F21770;
  v37 = 0;
  v38 = 0xE000000000000000;
  sub_249F1FA84();
  sub_249F1F460();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
  sub_249F1FB98();
  v32 = v37;
  v33 = v38;
  *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v33;
  sub_249F1FF58();
  swift_bridgeObjectRelease();

}

Swift::Void __swiftcall DiffusionBaseXLPipeline.unloadResources()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v1 = (_QWORD *)v0;
  sub_249DCC274(v0, (uint64_t)v13, &qword_2578DE548);
  v2 = v14;
  if (v14)
  {
    v3 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 16))(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    sub_249DCC2FC((uint64_t)v13, &qword_2578DE548);
  }
  sub_249DCC274((uint64_t)(v1 + 5), (uint64_t)v13, &qword_2578DE548);
  v4 = v14;
  if (v14)
  {
    v5 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 16))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    sub_249DCC2FC((uint64_t)v13, &qword_2578DE548);
  }
  v6 = v1[10];
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_249F1FBEC();
    if (!v7)
      goto LABEL_16;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_16;
  }
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_26;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      MEMORY[0x24BD056B8](i, v6);
    else
      swift_retain();
    ManagedMLModel.unloadResources()();
    swift_release();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  v6 = v1[11];
  if (v6)
  {
    if (!(v6 >> 62))
    {
      v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_19:
        if (v9 < 1)
        {
          __break(1u);
          return;
        }
        for (j = 0; j != v9; ++j)
        {
          if ((v6 & 0xC000000000000001) != 0)
            MEMORY[0x24BD056B8](j, v6);
          else
            swift_retain();
          ManagedMLModel.unloadResources()();
          swift_release();
        }
      }
LABEL_27:
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    v9 = sub_249F1FBEC();
    if (v9)
      goto LABEL_19;
    goto LABEL_27;
  }
LABEL_28:
  v11 = v1[13];
  v12 = v1[14];
  ManagedMLModel.unloadResources()();
  if (v11)
    ManagedMLModel.unloadResources()();
  if (v12)
    ManagedMLModel.unloadResources()();
  if (v1[15])
    ManagedMLModel.unloadResources()();
}

uint64_t DiffusionBaseXLPipeline.generateImages(configuration:requestIdentifier:progressHandler:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  ValueMetadata *v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  ValueMetadata *v65;
  _UNKNOWN **v66;
  _UNKNOWN **v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  int64_t v78;
  void (**v79)(char *, uint64_t);
  unint64_t v80;
  void (*v81)(char *, unint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  void (**v86)(char *, char *, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  _BOOL4 v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  id v106;
  unint64_t v107;
  ValueMetadata *v108;
  _UNKNOWN **v109;
  uint64_t (*v110)(unint64_t, ValueMetadata *, _UNKNOWN **);
  float v111;
  uint64_t v112;
  void (**v113)(char *, uint64_t);
  char *v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(char *, unint64_t, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  BOOL v127;
  uint64_t v128;
  uint64_t i;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int (*v133)(uint64_t, uint64_t, uint64_t);
  unsigned int v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  char *v150;
  char *v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  void (*v159)(char *, unint64_t, uint64_t);
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  void (*v164)(uint64_t, char *, uint64_t);
  uint64_t v165;
  ValueMetadata *v166;
  _UNKNOWN **v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  char *v174;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  char v185;
  id v186;
  void (*v187)(char *, uint64_t);
  int v188;
  uint64_t v189;
  uint64_t j;
  void (*v191)(char *, uint64_t);
  _BYTE *v192;
  id v193;
  void (*v194)(char *, uint64_t);
  void (*v195)(char *, uint64_t);
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t k;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  void *v204;
  id v205;
  id v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  id v220;
  unint64_t v221;
  id v222;
  uint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  int *v227;
  uint64_t v228;
  uint64_t (*v229)(_QWORD *);
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  void (*v244)(char *, uint64_t);
  uint64_t v245;
  char *v246;
  unint64_t v247;
  void (*v248)(char *, uint64_t);
  void (*v249)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v250;
  char *v251;
  __int128 v252;
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  unint64_t v262;
  void (*v263)(uint64_t, char *, uint64_t);
  uint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  __int128 v270;
  ValueMetadata *v271;
  _UNKNOWN **v272;

  v6 = v5;
  v7 = v4;
  v230 = a4;
  v229 = a3;
  v242 = (_QWORD *)a1;
  v228 = type metadata accessor for PipelineProgress();
  MEMORY[0x24BDAC7A8](v228);
  v9 = (uint64_t)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v251 = (char *)&v212 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v232 = (uint64_t)&v212 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v233 = (uint64_t)&v212 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v224 = (char *)&v212 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v226 = (char *)&v212 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v239 = (uint64_t)&v212 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v235 = (char *)&v212 - v23;
  v257 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v267 = *(char **)(v257 - 8);
  v24 = MEMORY[0x24BDAC7A8](v257);
  v260 = (char *)&v212 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v261 = (char *)&v212 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v237 = (char *)&v212 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v240 = (char *)&v212 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v253 = (char *)&v212 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v255 = (char *)&v212 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v268 = (char *)&v212 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v266 = (char *)&v212 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName(qword_2578DE550);
  v40 = MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v212 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x24BDAC7A8](v40);
  v236 = (char *)&v212 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v47 = (char *)&v212 - v46;
  v48 = MEMORY[0x24BDAC7A8](v45);
  v50 = (char *)&v212 - v49;
  v51 = MEMORY[0x24BDAC7A8](v48);
  v243 = (unint64_t)&v212 - v52;
  MEMORY[0x24BDAC7A8](v51);
  v241 = (uint64_t)&v212 - v53;
  Unet.latentTimeIdShape.getter(*(_QWORD *)(v4 + 80));
  v55 = *(_QWORD *)(v54 + 16);
  if (v55)
  {
    v56 = *(_QWORD *)(v54 + 8 * v55 + 24);
    swift_bridgeObjectRelease();
    v57 = v56 == 5;
  }
  else
  {
    swift_bridgeObjectRelease();
    v57 = 0;
  }
  v58 = type metadata accessor for DiffusionBaseXLPipeline.ModelInputs();
  v259 = *(char **)(v58 - 8);
  v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v259 + 7);
  v59(v241, 1, 1, v58);
  v234 = v58;
  v263 = (void (*)(uint64_t, char *, uint64_t))v59;
  v59(v243, 1, 1, v58);
  sub_249DCC274(v7, (uint64_t)&v270, &qword_2578DE548);
  v60 = v271;
  sub_249DCC2FC((uint64_t)&v270, &qword_2578DE548);
  if (v60)
  {
    sub_249EE7B88((uint64_t)v242, v57, (uint64_t)v50);
    if (v5)
    {
LABEL_25:
      v63 = (unint64_t)qword_2578DE550;
      sub_249DCC2FC(v243, qword_2578DE550);
      v64 = v241;
      goto LABEL_26;
    }
    v61 = v241;
    sub_249DCC2FC(v241, qword_2578DE550);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v263)(v50, 0, 1, v234);
    sub_249DCB1B0((uint64_t)v50, v61, qword_2578DE550);
  }
  if (*(_QWORD *)(v7 + 88))
    v62 = 1;
  else
    v62 = v57;
  v63 = v243;
  if (v62 == 1)
  {
    sub_249EE7B88((uint64_t)v242, 1, (uint64_t)v47);
    sub_249DCC2FC(v63, qword_2578DE550);
    if (v5)
    {
      v64 = v241;
LABEL_26:
      sub_249DCC2FC(v64, qword_2578DE550);
      return v63;
    }
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v263)(v47, 0, 1, v234);
    sub_249DCB1B0((uint64_t)v47, v63, qword_2578DE550);
  }
  if (*(_BYTE *)(v7 + 136) == 1)
  {
    sub_249DCC274(v7, (uint64_t)&v270, &qword_2578DE548);
    v65 = v271;
    if (v271)
    {
      v66 = v272;
      __swift_project_boxed_opaque_existential_1(&v270, (uint64_t)v271);
      (*((void (**)(ValueMetadata *))v66[1] + 2))(v65);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
    }
    else
    {
      sub_249DCC2FC((uint64_t)&v270, &qword_2578DE548);
    }
    sub_249DCC274(v7 + 40, (uint64_t)&v270, &qword_2578DE548);
    v63 = (unint64_t)v271;
    if (v271)
    {
      v67 = v272;
      __swift_project_boxed_opaque_existential_1(&v270, (uint64_t)v271);
      (*((void (**)(unint64_t))v67[1] + 2))(v63);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
    }
    else
    {
      sub_249DCC2FC((uint64_t)&v270, &qword_2578DE548);
    }
  }
  v68 = type metadata accessor for PipelineConfiguration(0);
  v69 = (uint64_t)v242;
  v219 = *(int *)(v68 + 68);
  if ((*(_QWORD *)((char *)v242 + v219) & 0x8000000000000000) != 0)
    goto LABEL_150;
  v70 = (int *)v68;
  MEMORY[0x24BDAC7A8](v68);
  *(&v212 - 2) = v69;
  *(&v212 - 1) = v7;
  v72 = sub_249EB3BEC((uint64_t)sub_249EE8CB4, (uint64_t)(&v212 - 4), 0, v71);
  if (!*(_QWORD *)(v72 + 16))
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v258 = v42;
  v73 = v72 + 32;
  v74 = v72;
  sub_249D9E1E4(v72 + 32, (uint64_t)&v270);
  v75 = sub_249EE847C(v69, &v270);
  if (v5)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
    goto LABEL_25;
  }
  v77 = v75;
  v214 = v73;
  v212 = v74;
  v213 = (_QWORD *)v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
  v78 = *(_QWORD *)(v77 + 16);
  v42 = (char *)MEMORY[0x24BEE4AF8];
  v245 = v7;
  v262 = v77;
  v227 = v70;
  v238 = 0;
  if (v78)
  {
    *(_QWORD *)&v270 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_249EB5C40(0, v78, 0);
    v79 = (void (**)(char *, uint64_t))v267;
    v265 = (v267[80] + 32) & ~(unint64_t)v267[80];
    v80 = v77 + v265;
    v264 = *((_QWORD *)v267 + 9);
    v81 = (void (*)(char *, unint64_t, uint64_t))*((_QWORD *)v267 + 2);
    v42 = (char *)v270;
    v82 = v257;
    do
    {
      v83 = v268;
      v81(v268, v80, v82);
      v81(v255, (unint64_t)v83, v82);
      sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
      sub_249F1F058();
      v79[1](v83, v82);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_249EB5C40(0, *((_QWORD *)v42 + 2) + 1, 1);
        v42 = (char *)v270;
      }
      v85 = *((_QWORD *)v42 + 2);
      v84 = *((_QWORD *)v42 + 3);
      v87 = v266;
      v86 = (void (**)(char *, char *, uint64_t))v267;
      if (v85 >= v84 >> 1)
      {
        sub_249EB5C40(v84 > 1, v85 + 1, 1);
        v86 = (void (**)(char *, char *, uint64_t))v267;
        v42 = (char *)v270;
      }
      *((_QWORD *)v42 + 2) = v85 + 1;
      v88 = v264;
      v79 = (void (**)(char *, uint64_t))v86;
      v82 = v257;
      v86[4](&v42[v265 + v85 * v264], v87, v257);
      v80 += v88;
      --v78;
      v7 = v245;
    }
    while (v78);
    swift_bridgeObjectRelease();
    v6 = v238;
    v70 = v227;
  }
  v89 = v234;
  v9 = (uint64_t)v236;
  if ((*(_BYTE *)(v7 + 136) & 1) != 0 && *(_QWORD *)(v7 + 120))
    ManagedMLModel.unloadResources()();
  if (*((unsigned __int8 *)v242 + v70[13] + 8) == 255)
  {
    v7 = 0;
    v91 = 1;
  }
  else
  {
    v90 = *(float *)((char *)v242 + v70[15]);
    if (v90 < 1.0)
      v7 = LODWORD(v90);
    else
      v7 = 0;
    v91 = v90 >= 1.0;
  }
  v92 = v267;
  v93 = *(_QWORD *)(v245 + 80);
  v94 = (uint64_t)v258;
  sub_249DCC274(v241, (uint64_t)v258, qword_2578DE550);
  v218 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v259 + 6);
  v95 = v218(v94, 1, v89);
  LODWORD(v266) = v91;
  if (v95 == 1)
  {
    sub_249DCC274(v243, v9, qword_2578DE550);
    swift_bridgeObjectRetain();
    sub_249DCC2FC(v94, qword_2578DE550);
  }
  else
  {
    sub_249EE9C6C(v94, v9);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v263)(v9, 0, 1, v89);
    swift_bridgeObjectRetain();
  }
  v96 = v93;
  if (v218(v9, 1, v89))
  {
    v97 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v92 + 7);
    v98 = (uint64_t)v235;
    v99 = 1;
    v100 = v257;
  }
  else
  {
    v101 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v92 + 2);
    v102 = (uint64_t)v235;
    v103 = v257;
    v101(v235, v9, v257);
    v97 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v267 + 7);
    v98 = v102;
    v99 = 0;
    v100 = v103;
    v92 = v267;
  }
  v249 = v97;
  v97(v98, v99, 1, v100);
  v104 = 1;
  v105 = v218;
  if (!v218(v9, 1, v89))
  {
    (*((void (**)(uint64_t, uint64_t, uint64_t))v92 + 2))(v239, v9 + *(int *)(v89 + 20), v257);
    v104 = 0;
  }
  v249(v239, v104, 1, v257);
  if (v105(v9, 1, v89))
  {
    v222 = 0;
  }
  else
  {
    v222 = *(id *)(v9 + *(int *)(v89 + 24));
    v106 = v222;
  }
  v107 = v96;
  sub_249D9E1E4(v214, (uint64_t)&v270);
  v108 = v271;
  v109 = v272;
  __swift_project_boxed_opaque_existential_1(&v270, (uint64_t)v271);
  v110 = (uint64_t (*)(unint64_t, ValueMetadata *, _UNKNOWN **))v109[4];
  LOBYTE(v269) = (_BYTE)v266;
  v63 = v110(v7 | ((unint64_t)v266 << 32), v108, v109);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
  v221 = v63;
  v217 = *(_QWORD *)(v63 + 16);
  v111 = *(float *)((char *)v242 + v227[16]) * (float)v217;
  if ((~LODWORD(v111) & 0x7F800000) == 0)
    goto LABEL_154;
  v7 = v245;
  v63 = v262;
  v112 = v257;
  if (v111 <= -9.2234e18)
  {
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
  v113 = (void (**)(char *, uint64_t))v267;
  if (v111 >= 9.2234e18)
    goto LABEL_156;
  if (v217)
  {
    v216 = (uint64_t)v111;
    v215 = v221 + 32;
    swift_bridgeObjectRetain();
    v114 = 0;
    v252 = xmmword_249F21910;
    while (1)
    {
      if ((unint64_t)v114 >= *(_QWORD *)(v221 + 16))
        goto LABEL_148;
      v259 = v42;
      v250 = *(_QWORD *)(v215 + 8 * (_QWORD)v114);
      v115 = *(_QWORD *)(v63 + 16);
      v262 = v63;
      v225 = v114;
      if (v115)
      {
        v231 = v107;
        *(_QWORD *)&v270 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_249EB5C40(0, v115, 0);
        v116 = v267[80];
        v117 = (v116 + 32) & ~v116;
        v118 = v63 + v117;
        v119 = *((_QWORD *)v267 + 9);
        v120 = (void (*)(char *, unint64_t, uint64_t))*((_QWORD *)v267 + 2);
        v264 = v116 | 7;
        v265 = v117 + 2 * v119;
        v266 = (char *)v117;
        do
        {
          v121 = v268;
          v120(v268, v118, v112);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
          v122 = swift_allocObject();
          *(_OWORD *)(v122 + 16) = v252;
          v123 = v122 + v117;
          v120((char *)v123, (unint64_t)v121, v112);
          v120((char *)(v123 + v119), (unint64_t)v121, v112);
          v269 = v122;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
          sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
          sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
          v113 = (void (**)(char *, uint64_t))v267;
          sub_249F1EFA4();
          v113[1](v121, v112);
          v9 = v270;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_249EB5C40(0, *(_QWORD *)(v9 + 16) + 1, 1);
            v113 = (void (**)(char *, uint64_t))v267;
            v9 = v270;
          }
          v125 = *(_QWORD *)(v9 + 16);
          v124 = *(_QWORD *)(v9 + 24);
          if (v125 >= v124 >> 1)
          {
            sub_249EB5C40(v124 > 1, v125 + 1, 1);
            v113 = (void (**)(char *, uint64_t))v267;
            v9 = v270;
          }
          *(_QWORD *)(v9 + 16) = v125 + 1;
          v117 = (uint64_t)v266;
          v126 = &v266[v9 + v125 * v119];
          v112 = v257;
          ((void (*)(char *, char *, uint64_t))v113[4])(v126, v253, v257);
          v118 += v119;
          --v115;
        }
        while (v115);
        swift_bridgeObjectRelease();
        v7 = v245;
        v107 = v231;
        v114 = v225;
      }
      else
      {
        v9 = MEMORY[0x24BEE4AF8];
      }
      if (*(_QWORD *)(v7 + 88))
        v127 = v114 == (char *)v216;
      else
        v127 = 0;
      v6 = v238;
      v42 = v235;
      if (v127)
      {
        v266 = *(char **)(v7 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v63 = *(_QWORD *)(v7 + 80);
        if (v63 >> 62)
        {
          swift_bridgeObjectRetain();
          v128 = sub_249F1FBEC();
        }
        else
        {
          v128 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        if (v128)
        {
          if (v128 < 1)
            goto LABEL_157;
          for (i = 0; i != v128; ++i)
          {
            if ((v63 & 0xC000000000000001) != 0)
              MEMORY[0x24BD056B8](i, v63);
            else
              swift_retain();
            ManagedMLModel.unloadResources()();
            swift_release();
          }
        }
        v238 = v6;
        swift_bridgeObjectRelease();

        sub_249DCC2FC(v239, &qword_2578DDDD8);
        sub_249DCC2FC((uint64_t)v42, &qword_2578DDDD8);
        v130 = (uint64_t)v236;
        sub_249EE9C24(v243, (uint64_t)v236);
        v131 = 1;
        v132 = v234;
        v133 = v218;
        v134 = v218(v130, 1, v234);
        v112 = v257;
        if (!v134)
        {
          (*((void (**)(char *, uint64_t, uint64_t))v267 + 2))(v226, v130, v257);
          v131 = 0;
        }
        v135 = (uint64_t)v226;
        v136 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v249;
        v249((uint64_t)v226, v131, 1, v112);
        sub_249DCB1B0(v135, (uint64_t)v42, &qword_2578DDDD8);
        if (v133(v130, 1, v132))
        {
          v137 = (uint64_t)v224;
          v138 = v224;
          v139 = 1;
        }
        else
        {
          v137 = (uint64_t)v224;
          (*((void (**)(char *, uint64_t, uint64_t))v267 + 2))(v224, v130 + *(int *)(v132 + 20), v112);
          v138 = (char *)v137;
          v139 = 0;
        }
        v136(v138, v139, 1, v112);
        sub_249DCB1B0(v137, v239, &qword_2578DDDD8);
        if (v218(v130, 1, v132))
        {
          v222 = 0;
        }
        else
        {
          v222 = *(id *)(v130 + *(int *)(v132 + 24));
          v140 = v222;
        }
        v107 = (unint64_t)v266;
        v113 = (void (**)(char *, uint64_t))v267;
      }
      v141 = v233;
      sub_249DCC274((uint64_t)v42, v233, &qword_2578DDDD8);
      v142 = v113[6];
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v142)(v141, 1, v112) == 1)
        break;
      v143 = v113[4];
      ((void (*)(char *, uint64_t, uint64_t))v143)(v240, v141, v112);
      v141 = v232;
      sub_249DCC274(v239, v232, &qword_2578DDDD8);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v142)(v141, 1, v112) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v113[1](v240, v112);
        goto LABEL_138;
      }
      v248 = v142;
      v144 = (uint64_t)v237;
      ((void (*)(char *, uint64_t, uint64_t))v143)(v237, v141, v112);
      if (!v222)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v191 = v113[1];
        v191((char *)v144, v112);
        v191(v240, v112);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v222 = 0;
        goto LABEL_140;
      }
      v7 = (uint64_t)v143;
      v220 = v222;
      v145 = v238;
      v146 = sub_249ED5B28(v9, v250, (uint64_t)v240, v144, (uint64_t)v220, v107);
      v6 = v145;
      if (v145)
      {
        swift_bridgeObjectRelease();
        v193 = v220;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v194 = v113[1];
        v194(v237, v112);
        v194(v240, v112);

        swift_bridgeObjectRelease();
        sub_249DCC2FC(v239, &qword_2578DDDD8);
        sub_249DCC2FC((uint64_t)v235, &qword_2578DDDD8);
        swift_bridgeObjectRelease();
LABEL_142:
        v63 = (unint64_t)qword_2578DE550;
        sub_249DCC2FC(v243, qword_2578DE550);
        sub_249DCC2FC(v241, qword_2578DE550);
        sub_249DCC2FC((uint64_t)v236, qword_2578DE550);
LABEL_197:
        swift_bridgeObjectRelease();
        return v63;
      }
      v63 = v146;
      v147 = swift_bridgeObjectRelease();
      v148 = (uint64_t)v242;
      MEMORY[0x24BDAC7A8](v147);
      *(&v212 - 2) = v245;
      *((_DWORD *)&v212 - 2) = v149;
      v223 = sub_249EB3D38((void (*)(uint64_t))sub_249EE9AC8, (uint64_t)(&v212 - 4), v63);
      swift_bridgeObjectRelease();
      v150 = *(char **)(v148 + v219);
      if (((unint64_t)v150 & 0x8000000000000000) != 0)
        goto LABEL_149;
      v231 = v107;
      v238 = 0;
      if (v150)
      {
        v151 = v268;
        v63 = (unint64_t)v259;
        if ((unint64_t)(v150 - 1) < *(_QWORD *)(v212 + 16))
        {
          if ((unint64_t)(v150 - 1) < *(_QWORD *)(v223 + 16))
          {
            v244 = v143;
            v152 = 0;
            v153 = (v267[80] + 32) & ~(unint64_t)v267[80];
            v247 = v223 + v153;
            v154 = v214;
            v7 = v262;
            v155 = v257;
            v246 = v150;
            v258 = (char *)v153;
            while (1)
            {
              v259 = (char *)v63;
              v265 = v154;
              sub_249D9E1E4(v154, (uint64_t)&v270);
              v63 = (unint64_t)v271;
              v9 = (uint64_t)v272;
              __swift_project_boxed_opaque_existential_1(&v270, (uint64_t)v271);
              v6 = v267;
              v256 = *((_QWORD *)v267 + 9);
              v156 = v151;
              v157 = v256 * (_QWORD)v152;
              v158 = v247 + v256 * (_QWORD)v152;
              v42 = v152;
              v159 = (void (*)(char *, unint64_t, uint64_t))*((_QWORD *)v267 + 2);
              v159(v156, v158, v155);
              v160 = *(_QWORD *)(v7 + 16);
              v266 = v42;
              if ((unint64_t)v42 >= v160)
                break;
              v263 = (void (*)(uint64_t, char *, uint64_t))v159;
              v264 = v157;
              v161 = &v258[v7 + v157];
              v162 = v255;
              v159(v255, (unint64_t)v161, v155);
              (*(void (**)(char *, uint64_t, char *, unint64_t, uint64_t))(v9 + 80))(v268, v250, v162, v63, v9);
              v63 = *((_QWORD *)v6 + 1);
              v163 = v268;
              ((void (*)(char *, uint64_t))v63)(v162, v155);
              ((void (*)(char *, uint64_t))v63)(v163, v155);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v7 = sub_249EC94B8(v7);
              v9 = (uint64_t)v251;
              v164 = v263;
              if ((unint64_t)v266 >= *(_QWORD *)(v7 + 16))
                goto LABEL_145;
              v262 = v7;
              v42 = v258;
              v6 = (char *)*((_QWORD *)v6 + 5);
              v254 = (uint64_t)&v258[v7 + v264];
              ((void (*)(void))v6)();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
              sub_249D9E1E4(v265, (uint64_t)&v270);
              v165 = v155;
              v166 = v271;
              v167 = v272;
              __swift_project_boxed_opaque_existential_1(&v270, (uint64_t)v271);
              v168 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v167[9])(v166, v167);
              v169 = *(_QWORD *)(v168 + 16);
              if (v169)
              {
                v164(v9, &v42[v168 + (v169 - 1) * v256], v165);
                v170 = v9;
                v171 = 0;
              }
              else
              {
                v170 = v9;
                v171 = 1;
              }
              v249(v170, v171, 1, v165);
              v172 = (unint64_t)v259;
              v155 = v165;
              v63 = (unint64_t)v248;
              swift_bridgeObjectRelease();
              v173 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v63)(v9, 1, v155);
              v7 = v262;
              v174 = v266;
              if (v173 == 1)
              {
                if ((unint64_t)v266 >= *(_QWORD *)(v262 + 16))
                  goto LABEL_147;
                v263((uint64_t)v260, (char *)v254, v155);
                sub_249DCC2FC(v9, &qword_2578DDDD8);
              }
              else
              {
                ((void (*)(char *, uint64_t, uint64_t))v244)(v260, v9, v155);
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
              v63 = v172;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v176 = v264;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                v63 = sub_249EC94B8(v172);
              v151 = v268;
              if ((unint64_t)v174 >= *(_QWORD *)(v63 + 16))
                goto LABEL_146;
              v152 = v174 + 1;
              ((void (*)(char *, char *, uint64_t))v6)(&v42[v63 + v176], v260, v155);
              v154 = v265 + 40;
              if (v246 == v152)
                goto LABEL_120;
            }
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
            goto LABEL_151;
          }
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      v7 = v262;
      v63 = (unint64_t)v259;
LABEL_120:
      swift_bridgeObjectRelease();
      v177 = v242;
      v178 = v7;
      v42 = (char *)v63;
      if (!*((_BYTE *)v242 + v227[23]))
        v63 = v7;
      swift_bridgeObjectRetain();
      v271 = &type metadata for DiffusionBaseXLPipeline;
      v272 = &protocol witness table for DiffusionBaseXLPipeline;
      *(_QWORD *)&v270 = swift_allocObject();
      v7 = v245;
      sub_249EE9B70(v245, v270 + 16);
      __swift_project_boxed_opaque_existential_1(v177, v177[3]);
      v179 = sub_249E14D88();
      v181 = v180;
      v182 = v213;
      sub_249EE9BA4((uint64_t)v177, (uint64_t)v213 + *(int *)(v228 + 36));
      sub_249D9E174(&v270, (uint64_t)v182);
      v182[5] = v179;
      v182[6] = v181;
      v183 = v225;
      v184 = v217;
      v182[7] = v225;
      v182[8] = v184;
      v182[9] = v63;
      v185 = v229(v182);
      v186 = v220;

      if ((v185 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_249EE9BE8((uint64_t)v182);
        v195 = (void (*)(char *, uint64_t))*((_QWORD *)v267 + 1);
        v196 = v257;
        v195(v237, v257);
        v195(v240, v196);
        v63 = MEMORY[0x24BEE4AF8];
        v9 = (uint64_t)v236;
        goto LABEL_204;
      }
      v6 = v183 + 1;
      sub_249EE9BE8((uint64_t)v182);
      v113 = (void (**)(char *, uint64_t))v267;
      v187 = (void (*)(char *, uint64_t))*((_QWORD *)v267 + 1);
      v112 = v257;
      v187(v237, v257);
      v187(v240, v112);
      v9 = (uint64_t)v236;
      v63 = v178;
      v107 = v231;
      v114 = v6;
      if (v6 == (char *)v184)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v238;
        goto LABEL_127;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_138:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_249DCC2FC(v141, &qword_2578DDDD8);
LABEL_140:
    sub_249ECB9B0();
    swift_allocError();
    *v192 = 0;
    swift_willThrow();

    sub_249DCC2FC(v239, &qword_2578DDDD8);
    sub_249DCC2FC((uint64_t)v235, &qword_2578DDDD8);
    goto LABEL_142;
  }
  swift_bridgeObjectRelease();
LABEL_127:
  v262 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v188 = *(unsigned __int8 *)(v7 + 136);
  LODWORD(v267) = v188;
  if (v188 == 1)
  {
    v63 = *(_QWORD *)(v7 + 80);
    if (!(v63 >> 62))
    {
      v189 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v189)
      {
LABEL_130:
        if (v189 < 1)
          goto LABEL_206;
        for (j = 0; j != v189; ++j)
        {
          if ((v63 & 0xC000000000000001) != 0)
            MEMORY[0x24BD056B8](j, v63);
          else
            swift_retain();
          ManagedMLModel.unloadResources()();
          swift_release();
        }
      }
LABEL_159:
      swift_bridgeObjectRelease();
      goto LABEL_160;
    }
LABEL_158:
    swift_bridgeObjectRetain();
    result = sub_249F1FBEC();
    v189 = result;
    if (result)
      goto LABEL_130;
    goto LABEL_159;
  }
LABEL_160:
  v197 = *(_QWORD *)(v7 + 88);
  if (v197)
  {
    if (v197 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_249F1FBEC();
      v198 = result;
      if (result)
        goto LABEL_163;
    }
    else
    {
      v198 = *(_QWORD *)((v197 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v198)
      {
LABEL_163:
        if (v198 >= 1)
        {
          for (k = 0; k != v198; ++k)
          {
            if ((v197 & 0xC000000000000001) != 0)
              MEMORY[0x24BD056B8](k, v197);
            else
              swift_retain();
            ManagedMLModel.unloadResources()();
            swift_release();
          }
          goto LABEL_170;
        }
        __break(1u);
LABEL_206:
        __break(1u);
        return result;
      }
    }
LABEL_170:
    swift_bridgeObjectRelease();
  }
  v200 = *(_QWORD *)(v7 + 80);
  if (v200 >> 62)
    goto LABEL_188;
  v201 = *(_QWORD *)((v200 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v201; v201 = sub_249F1FBEC())
  {
    v268 = (char *)(v200 & 0xC000000000000001);
    v7 = 4;
    v202 = v42;
    while (1)
    {
      v203 = v7 - 4;
      if (!v268)
        break;
      v9 = (uint64_t)v6;
      v42 = (char *)MEMORY[0x24BD056B8](v7 - 4, v200);
      v6 = (char *)(v7 - 3);
      if (__OFADD__(v203, 1))
        goto LABEL_187;
LABEL_181:
      v204 = *(void **)&v42[OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel];
      if (v204)
      {
        v205 = objc_msgSend(v204, sel_modelDescription);
        v206 = objc_msgSend(v205, sel_inputDescriptionsByName);

        sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
        v207 = sub_249F1F208();

        if (*(_QWORD *)(v207 + 16))
        {
          sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
          if ((v208 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v6 = (char *)v9;
            v9 = (uint64_t)v236;
            v7 = v245;
            v42 = v202;
            goto LABEL_190;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
      ++v7;
      v127 = v6 == (char *)v201;
      v6 = (char *)v9;
      if (v127)
      {
        v42 = v202;
        swift_bridgeObjectRelease();
        v9 = (uint64_t)v236;
        v7 = v245;
        goto LABEL_190;
      }
    }
    v9 = (uint64_t)v6;
    v42 = *(char **)(v200 + 8 * v7);
    swift_retain();
    v6 = (char *)(v7 - 3);
    if (!__OFADD__(v203, 1))
      goto LABEL_181;
LABEL_187:
    __break(1u);
LABEL_188:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_190:
  v209 = *(_QWORD *)(v7 + 104);
  v210 = *(_QWORD *)(v7 + 112);
  v211 = Decoder.decode(_:scaleFactor:outputRange:inferAlpha:detectSkin:)((uint64_t)v42, 0, 0, *(_QWORD *)(v7 + 96), v209, v210, *(float *)((char *)v242 + v227[27]));
  if (v6)
  {
    if ((v267 & 1) != 0)
    {
      ManagedMLModel.unloadResources()();
      if (v209)
        ManagedMLModel.unloadResources()();
      if (v210)
        ManagedMLModel.unloadResources()();
    }
    swift_bridgeObjectRelease();

    sub_249DCC2FC(v239, &qword_2578DDDD8);
    sub_249DCC2FC((uint64_t)v235, &qword_2578DDDD8);
    v63 = (unint64_t)qword_2578DE550;
    sub_249DCC2FC(v243, qword_2578DE550);
    sub_249DCC2FC(v241, qword_2578DE550);
    sub_249DCC2FC(v9, qword_2578DE550);
    goto LABEL_197;
  }
  v63 = sub_249EB4E00(v211);
  swift_bridgeObjectRelease();
  if ((v267 & 1) != 0)
  {
    ManagedMLModel.unloadResources()();
    if (v209)
      ManagedMLModel.unloadResources()();
    if (v210)
      ManagedMLModel.unloadResources()();
  }
  swift_bridgeObjectRelease();
  v186 = v222;
LABEL_204:

  sub_249DCC2FC(v239, &qword_2578DDDD8);
  sub_249DCC2FC((uint64_t)v235, &qword_2578DDDD8);
  sub_249DCC2FC(v243, qword_2578DE550);
  sub_249DCC2FC(v241, qword_2578DE550);
  sub_249DCC2FC(v9, qword_2578DE550);
  swift_bridgeObjectRelease();
  return v63;
}

uint64_t sub_249EE7B88@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  void (*v88)(uint64_t, char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98[3];
  __int128 v99;
  uint64_t v100;

  v91 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v92 = *(_QWORD *)(v5 - 8);
  v93 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v75 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v75 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v95 = (char *)&v75 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v94 = (char *)&v75 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v75 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v75 - v22;
  v96 = *(_OWORD *)(a1 + 24);
  v24 = v96;
  v25 = __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v96);
  v99 = v96;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v98);
  v27 = v25;
  v28 = a2;
  v29 = v100;
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(boxed_opaque_existential_1, v27, v24);
  v30 = v97;
  sub_249EE8CD0(v23, v21, (uint64_t)v98, v28);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  if (!v30)
  {
    v89 = v11;
    v90 = v8;
    *(_QWORD *)&v96 = v14;
    v97 = *(_OWORD *)(a1 + 64);
    v32 = v97;
    v33 = __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 40), v97);
    v99 = v97;
    v34 = __swift_allocate_boxed_opaque_existential_1(v98);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v34, v33, v32);
    v35 = v94;
    sub_249EE8CD0(v94, v95, (uint64_t)v98, v28 & 1);
    v87 = v28;
    v76 = a1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    v37 = v92;
    v38 = *(_QWORD *)(v92 + 72);
    v39 = *(unsigned __int8 *)(v92 + 80);
    v40 = (v39 + 32) & ~v39;
    v83 = v36;
    v82 = v40 + 2 * v38;
    v81 = v39 | 7;
    v41 = swift_allocObject();
    v79 = xmmword_249F21910;
    *(_OWORD *)(v41 + 16) = xmmword_249F21910;
    v42 = v35;
    v84 = v40;
    v43 = v41 + v40;
    v44 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 16);
    v45 = v41 + v40;
    v46 = v93;
    v44(v45, v42, v93);
    v85 = v38;
    v86 = v23;
    v88 = v44;
    v44(v43 + v38, v23, v46);
    v98[0] = v41;
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
    v48 = sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
    v49 = sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    v80 = v47;
    v78 = v48;
    v77 = v49;
    sub_249F1EFA4();
    v50 = *(_QWORD *)(v29 + 80);
    if (v50 >> 62)
      goto LABEL_18;
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (*(_QWORD *)&v97 = v21; v51; *(_QWORD *)&v97 = v21)
    {
      v52 = 4;
      while (1)
      {
        v53 = v52 - 4;
        if ((v50 & 0xC000000000000001) == 0)
          break;
        v54 = MEMORY[0x24BD056B8](v52 - 4, v50);
        v55 = v52 - 3;
        if (__OFADD__(v53, 1))
          goto LABEL_17;
LABEL_12:
        v56 = *(void **)(v54 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
        if (v56)
        {
          v57 = objc_msgSend(v56, sel_modelDescription);
          v21 = (char *)objc_msgSend(v57, sel_inputDescriptionsByName);

          sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
          v58 = sub_249F1F208();

          if (*(_QWORD *)(v58 + 16))
          {
            sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
            if ((v59 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              v60 = v89;
              v61 = v96;
              v62 = v93;
              v88((uint64_t)v89, (char *)v96, v93);
              v63 = v100;
              goto LABEL_20;
            }
          }
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        ++v52;
        if (v55 == v51)
          goto LABEL_19;
      }
      v54 = *(_QWORD *)(v50 + 8 * v52);
      swift_retain();
      v55 = v52 - 3;
      if (!__OFADD__(v53, 1))
        goto LABEL_12;
LABEL_17:
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      v51 = sub_249F1FBEC();
    }
LABEL_19:
    swift_bridgeObjectRelease();
    v60 = v89;
    v61 = v96;
    v63 = v100;
    sub_249EC85C4();
    v62 = v93;
LABEL_20:
    v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = v79;
    v65 = v64 + v84;
    v66 = v88;
    v88(v64 + v84, v95, v62);
    v66(v65 + v85, (char *)v97, v62);
    v98[0] = v64;
    sub_249F1EFA4();
    v67 = v86;
    if ((v87 & 1) != 0)
      v68 = sub_249EE93FC(v76);
    else
      v68 = (uint64_t)sub_249EE9714(v63, v76);
    v69 = v68;
    v70 = v92;
    v71 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
    v71(v61, v62);
    v71((uint64_t)v95, v62);
    v71((uint64_t)v94, v62);
    v71(v97, v62);
    v71((uint64_t)v67, v62);
    v72 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
    v73 = v91;
    v72(v91, v60, v62);
    v74 = type metadata accessor for DiffusionBaseXLPipeline.ModelInputs();
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v72)(v73 + *(int *)(v74 + 20), v90, v62);
    *(_QWORD *)(v73 + *(int *)(v74 + 24)) = v69;
  }
  return result;
}

uint64_t sub_249EE8208@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int *v4;
  int *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  uint64_t result;
  _UNKNOWN **v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  uint64_t v29;
  int v30;
  ValueMetadata *v31;
  _UNKNOWN **v32;

  v4 = (int *)type metadata accessor for PipelineConfiguration(0);
  v5 = v4;
  v6 = *(unsigned __int16 *)(a1 + v4[24]);
  if (!(v6 >> 14))
  {
    v16 = *(_QWORD *)(a1 + v4[18]);
    v17 = type metadata accessor for DPMSolverMultistepScheduler();
    swift_allocObject();
    result = DPMSolverMultistepScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:timeStepSpacing:predictionType:)(v16, 1000, 1, SBYTE1(v6), v6, 0.00085, 0.012);
    v19 = &protocol witness table for DPMSolverMultistepScheduler;
LABEL_8:
    a2[3] = v17;
    a2[4] = (uint64_t)v19;
    *a2 = result;
    return result;
  }
  if (v6 >> 14 != 1)
  {
    v20 = *(_QWORD *)(a1 + v4[18]);
    v17 = type metadata accessor for PNDMScheduler();
    swift_allocObject();
    result = PNDMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:)(v20, 1000, 1, 0.00085, 0.012);
    v19 = &protocol witness table for PNDMScheduler;
    goto LABEL_8;
  }
  v7 = *(unsigned __int8 *)(a1 + v4[25]);
  v8 = *(unsigned int *)(a1 + v4[19]);
  if (*(_BYTE *)(a1 + v5[25]))
  {
    if (v7 != 1)
    {
      v31 = &type metadata for NvRandomSource;
      v32 = &off_251B5CE18;
      v29 = v8;
      v30 = 0;
      goto LABEL_12;
    }
    v9 = sub_249EBE564(v8);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v31 = &type metadata for TorchRandomSource;
    v32 = &off_251B5C5F0;
  }
  else
  {
    v9 = sub_249EBE564(v8);
    v11 = v21;
    v13 = v22;
    v15 = v23;
    v31 = &type metadata for NumPyRandomSource;
    v32 = &off_251B5C728;
  }
  v24 = swift_allocObject();
  v29 = v24;
  *(_QWORD *)(v24 + 16) = v9;
  *(_QWORD *)(v24 + 24) = v11;
  *(_QWORD *)(v24 + 32) = v13;
  *(_BYTE *)(v24 + 40) = v15 & 1;
LABEL_12:
  v25 = *(_QWORD *)(a1 + v5[18]);
  sub_249D9E1E4((uint64_t)&v29, (uint64_t)v28);
  v26 = type metadata accessor for LCMScheduler();
  swift_allocObject();
  v27 = LCMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:predictionType:generator:)(v25, 1000, 1, 0, (uint64_t)v28, 0.00085, 0.012);
  a2[3] = v26;
  a2[4] = (uint64_t)&protocol witness table for LCMScheduler;
  *a2 = v27;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
}

uint64_t sub_249EE847C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  float v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  _UNKNOWN **v34;
  ValueMetadata *v35;
  void (*v36)(uint64_t, ValueMetadata *, _UNKNOWN **, double, double);
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  float v43;
  void *v44;
  void *v45;
  void *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t (**v53)(uint64_t, uint64_t);
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  ValueMetadata *v68;
  _UNKNOWN **v69;
  uint64_t v70;

  v60 = a1;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDF0);
  MEMORY[0x24BDAC7A8](v63);
  v62 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v64 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v55 - v9;
  v58 = v2;
  Unet.latentSampleShape.getter(*(_QWORD *)(v2 + 80));
  v11 = v10;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v11[2])
      goto LABEL_3;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (uint64_t)sub_249EC947C(v11);
  v11 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 16))
    goto LABEL_25;
LABEL_3:
  v56 = v8;
  v11[4] = 1;
  v13 = a2[3];
  v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v13);
  v15 = (*(float (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
  v16 = (int *)type metadata accessor for PipelineConfiguration(0);
  v17 = v60;
  v18 = *(unsigned __int8 *)(v60 + v16[25]);
  result = *(unsigned int *)(v60 + v16[19]);
  v65 = v11;
  v55 = a2;
  if (!v18)
  {
    v19 = v16;
    v20 = sub_249EBE564(result);
    v22 = v27;
    v24 = v28;
    v26 = v29;
    v68 = &type metadata for NumPyRandomSource;
    v69 = &off_251B5C728;
    goto LABEL_7;
  }
  if (v18 == 1)
  {
    v19 = v16;
    v20 = sub_249EBE564(result);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v68 = &type metadata for TorchRandomSource;
    v69 = &off_251B5C5F0;
LABEL_7:
    result = swift_allocObject();
    v16 = v19;
    v17 = v60;
    v66 = result;
    *(_QWORD *)(result + 16) = v20;
    *(_QWORD *)(result + 24) = v22;
    *(_QWORD *)(result + 32) = v24;
    *(_BYTE *)(result + 40) = v26 & 1;
    goto LABEL_9;
  }
  v68 = &type metadata for NvRandomSource;
  v69 = &off_251B5CE18;
  v66 = result;
  v67 = 0;
LABEL_9:
  v30 = *(_QWORD *)(v17 + v16[17]);
  if (v30 < 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v31 = MEMORY[0x24BEE4AF8];
  if (v30)
  {
    v57 = v16;
    v70 = MEMORY[0x24BEE4AF8];
    sub_249EB5C40(0, v30, 0);
    v31 = v70;
    v32 = v15;
    v33 = MEMORY[0x24BDBFCD0];
    do
    {
      v35 = v68;
      v34 = v69;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v66, (uint64_t)v68);
      v36 = (void (*)(uint64_t, ValueMetadata *, _UNKNOWN **, double, double))v34[2];
      v37 = swift_bridgeObjectRetain();
      v36(v37, v35, v34, 0.0, v32);
      v38 = v61;
      swift_bridgeObjectRelease();
      sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, v33);
      sub_249DDFC68(&qword_2578DDDF8, &qword_2578DDDF0, v33);
      sub_249F1F058();
      v70 = v31;
      v40 = *(_QWORD *)(v31 + 16);
      v39 = *(_QWORD *)(v31 + 24);
      if (v40 >= v39 >> 1)
      {
        sub_249EB5C40(v39 > 1, v40 + 1, 1);
        v31 = v70;
      }
      *(_QWORD *)(v31 + 16) = v40 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v64 + 32))(v31+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v40, v38, v5);
      --v30;
    }
    while (v30);
    v17 = v60;
    v16 = v57;
  }
  v41 = v17 + v16[13];
  v42 = *(_BYTE *)(v41 + 8);
  if ((v42 & 1) == 0)
  {
    v43 = *(float *)(v17 + v16[15]);
    if (v43 < 1.0)
    {
      v44 = *(void **)v41;
      v45 = *(void **)(v58 + 120);
      if (v45)
      {
        v46 = *(void **)(v58 + 128);
        v47 = *(float *)(v17 + v16[26]);
        sub_249ECB9F4(v44, v42);
        sub_249EB6EEC(v45, v46);
        v48 = (uint64_t)v56;
        v49 = v59;
        Encoder.encode(_:scaleFactor:random:)(v44, (uint64_t)&v66, (char *)v45, (uint64_t)v56, v47);
        v59 = v49;
        if (v49)
        {

          swift_release();
          sub_249E92978(v44, v42);
          swift_bridgeObjectRelease();
        }
        else
        {
          v52 = v55[3];
          v53 = (uint64_t (**)(uint64_t, uint64_t))v55[4];
          __swift_project_boxed_opaque_existential_1(v55, v52);
          v54 = Scheduler.addNoise(originalSample:noise:strength:)(v48, v31, v52, v53, v43);

          swift_release();
          sub_249E92978(v44, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v48, v5);
          v31 = v54;
        }
      }
      else
      {
        v50 = v44;
        swift_bridgeObjectRelease();
        sub_249ECB9B0();
        swift_allocError();
        *v51 = 1;
        swift_willThrow();
        sub_249E92978(v44, v42);
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
  swift_bridgeObjectRelease();
  return v31;
}

unint64_t DiffusionBaseXLPipeline.decodeToImages(_:configuration:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *(_QWORD *)(v2 + 80);
  if (v7 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v8 = sub_249F1FBEC();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      v21 = a2;
      v22 = a1;
      v23 = v4;
      v24 = v2;
      a1 = v7 & 0xC000000000000001;
      a2 = 4;
      while (1)
      {
        v2 = a2 - 4;
        if (a1)
        {
          v9 = MEMORY[0x24BD056B8](a2 - 4, v7);
          v4 = a2 - 3;
          if (__OFADD__(v2, 1))
            goto LABEL_18;
        }
        else
        {
          v9 = *(_QWORD *)(v7 + 8 * a2);
          swift_retain();
          v4 = a2 - 3;
          if (__OFADD__(v2, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        v10 = *(void **)(v9 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
        if (v10)
        {
          v11 = objc_msgSend(v10, sel_modelDescription);
          v12 = objc_msgSend(v11, sel_inputDescriptionsByName);

          sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
          v13 = sub_249F1F208();

          if (*(_QWORD *)(v13 + 16))
          {
            sub_249DB7D8C(0x746E6574616CLL, 0xE600000000000000);
            if ((v14 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_17;
            }
          }
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        ++a2;
        if (v4 == v8)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          v4 = v23;
          v2 = v24;
          a2 = v21;
          a1 = v22;
          goto LABEL_21;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  v15 = *(_QWORD *)(v2 + 96);
  v16 = *(_QWORD *)(v2 + 104);
  v17 = *(_QWORD *)(v2 + 112);
  v18 = type metadata accessor for PipelineConfiguration(0);
  v19 = Decoder.decode(_:scaleFactor:outputRange:inferAlpha:detectSkin:)(a1, 0, 0, v15, v16, v17, *(float *)(a2 + *(int *)(v18 + 108)));
  if (v4)
  {
    if (*(_BYTE *)(v2 + 136) == 1)
    {
      ManagedMLModel.unloadResources()();
      if (v16)
        ManagedMLModel.unloadResources()();
      if (v17)
        ManagedMLModel.unloadResources()();
    }
  }
  else
  {
    v7 = sub_249EB4E00(v19);
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v2 + 136) == 1)
    {
      ManagedMLModel.unloadResources()();
      if (v16)
        ManagedMLModel.unloadResources()();
      if (v17)
        ManagedMLModel.unloadResources()();
    }
  }
  return v7;
}

uint64_t type metadata accessor for DiffusionBaseXLPipeline.ModelInputs()
{
  uint64_t result;

  result = qword_2578DE5B0;
  if (!qword_2578DE5B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249EE8CB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_249EE8208(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_249EE8CD0(char *a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  _BYTE *v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(unint64_t, char *, uint64_t);
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v82 = a3;
  LODWORD(v86) = a4;
  v80 = a2;
  v79 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v83 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v75 = (char *)&v71 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v76 = (char *)&v71 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v74 = (char *)&v71 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v72 = (char *)&v71 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v71 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v71 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v77 = (char *)&v71 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v78 = (char *)&v71 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v71 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v71 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v71 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v71 - v34;
  v36 = sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v85 = v35;
  sub_249F1F070();
  v84 = v33;
  v71 = v36;
  sub_249F1F070();
  if ((v86 & 1) == 0)
  {
    v45 = v95;
    sub_249DCC274(v95, (uint64_t)&v89, &qword_2578DE548);
    if (!v90)
    {
      sub_249DCC2FC((uint64_t)&v89, &qword_2578DE548);
      sub_249ECB9B0();
      swift_allocError();
      *v51 = 2;
      swift_willThrow();
      v52 = *(void (**)(char *, uint64_t))(v83 + 8);
      v52(v84, v4);
      return ((uint64_t (*)(char *, uint64_t))v52)(v85, v4);
    }
    sub_249D9E174(&v89, (uint64_t)v92);
    v46 = v93;
    v47 = v94;
    __swift_project_boxed_opaque_existential_1(v92, v93);
    v48 = v81;
    (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v47 + 16))(v20, v17, v82, v46, v47);
    v49 = v83;
    v86 = v48;
    if (v48)
    {
      v50 = *(void (**)(char *, uint64_t))(v83 + 8);
      v50(v84, v4);
      v50(v85, v4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    }
    v53 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
    v54 = v78;
    v53(v78, v20, v4);
    v55 = v77;
    v53(v77, v17, v4);
    sub_249DCC274(v45 + 40, (uint64_t)&v87, &qword_2578DE548);
    if (!v88)
    {
      v61 = *(void (**)(char *, uint64_t))(v49 + 8);
      v61(v84, v4);
      v61(v85, v4);
      sub_249DCC2FC((uint64_t)&v87, &qword_2578DE548);
      v53(v79, v54, v4);
      v53(v80, v55, v4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    }
    sub_249D9E174(&v87, (uint64_t)&v89);
    v56 = v90;
    v57 = v91;
    __swift_project_boxed_opaque_existential_1(&v89, v90);
    v58 = v75;
    v59 = v86;
    (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v57 + 16))(v76, v75, v82, v56, v57);
    v42 = v84;
    if (v59)
    {
      v60 = *(void (**)(char *, uint64_t))(v49 + 8);
      v60(v77, v4);
      v60(v78, v4);
      v60(v42, v4);
      v60(v85, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    }
    v62 = v58;
    v63 = v72;
    v53(v72, v76, v4);
    v53(v74, v62, v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    v64 = *(_QWORD *)(v49 + 72);
    v65 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_249F21910;
    v67 = v66 + v65;
    v86 = 0;
    v68 = *(void (**)(unint64_t, char *, uint64_t))(v49 + 16);
    v68(v67, v78, v4);
    v68(v67 + v64, v63, v4);
    *(_QWORD *)&v87 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
    sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
    v69 = v73;
    sub_249F1EFA4();
    v70 = *(void (**)(char *, uint64_t))(v49 + 8);
    v70(v63, v4);
    v70(v77, v4);
    v70(v78, v4);
    v70(v42, v4);
    v44 = v85;
    v70(v85, v4);
    v53(v44, v69, v4);
    v53(v42, v74, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    goto LABEL_10;
  }
  result = sub_249DCC274(v95 + 40, (uint64_t)v92, &qword_2578DE548);
  v38 = v93;
  if (v93)
  {
    v39 = v94;
    __swift_project_boxed_opaque_existential_1(v92, v93);
    v40 = v81;
    (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v39 + 16))(v30, v27, v82, v38, v39);
    v41 = v83;
    v42 = v84;
    v43 = *(void (**)(char *, uint64_t))(v83 + 8);
    v43(v84, v4);
    v44 = v85;
    v43(v85, v4);
    if (v40)
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    v53 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v53(v44, v30, v4);
    v53(v42, v27, v4);
LABEL_10:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
    v53(v79, v44, v4);
    return ((uint64_t (*)(char *, char *, uint64_t))v53)(v80, v42, v4);
  }
  __break(1u);
  return result;
}

uint64_t sub_249EE93FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v24 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
  v10 = swift_allocObject();
  v24 = xmmword_249F22C30;
  *(_OWORD *)(v10 + 16) = xmmword_249F22C30;
  v11 = (int *)type metadata accessor for PipelineConfiguration(0);
  v12 = *(_DWORD *)(a1 + v11[28]);
  *(_DWORD *)(v10 + 32) = v12;
  *(_DWORD *)(v10 + 36) = v12;
  v13 = *(_DWORD *)(a1 + v11[29]);
  *(_DWORD *)(v10 + 40) = v13;
  *(_DWORD *)(v10 + 44) = v13;
  *(_DWORD *)(v10 + 48) = *(_DWORD *)(a1 + v11[32]);
  v27 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  sub_249F1EFEC();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = v24;
  *(_DWORD *)(v14 + 32) = v12;
  *(_DWORD *)(v14 + 36) = v12;
  *(_DWORD *)(v14 + 40) = v13;
  *(_DWORD *)(v14 + 44) = v13;
  *(_DWORD *)(v14 + 48) = *(_DWORD *)(a1 + v11[31]);
  v27 = v14;
  v15 = v25;
  sub_249F1EFEC();
  sub_249D9D9F4(0, &qword_2578DDE20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
  v16 = *(_QWORD *)(v3 + 72);
  v17 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_249F21910;
  v19 = v18 + v17;
  v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 16);
  v20(v19, v9, v2);
  v20(v19 + v16, v15, v2);
  v27 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
  sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  sub_249F1EFA4();
  v21 = sub_249F1F7FC();
  v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v15, v2);
  v22(v9, v2);
  return v21;
}

id sub_249EE9714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  MEMORY[0x24BDAC7A8](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC0);
  MEMORY[0x24BDAC7A8](v5);
  v6 = *(_QWORD *)(a1 + 80);
  Unet.latentTimeIdShape.getter(v6);
  v8 = sub_249ED1544(v7, qword_251B5B658);
  swift_bridgeObjectRelease();
  if (v8)
  {
    sub_249D9D9F4(0, &qword_2578DDE20);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFD0);
    sub_249DDFC68(&qword_2578DDFD8, &qword_2578DDFD0, MEMORY[0x24BEE12C8]);
    sub_249F1EFEC();
    sub_249DDFC68(&qword_2578DDFE8, &qword_2578DDFC0, MEMORY[0x24BDBFCD0]);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_249F318A0;
    v10 = (int *)type metadata accessor for PipelineConfiguration(0);
    v11 = *(_DWORD *)(a2 + v10[28]);
    *(_DWORD *)(v9 + 32) = v11;
    *(_DWORD *)(v9 + 36) = v11;
    v12 = *(_DWORD *)(a2 + v10[29]);
    *(_DWORD *)(v9 + 40) = v12;
    *(_DWORD *)(v9 + 44) = v12;
    v13 = *(_DWORD *)(a2 + v10[30]);
    *(_DWORD *)(v9 + 48) = v13;
    *(_DWORD *)(v9 + 52) = v13;
    Unet.latentTimeIdShape.getter(v6);
    swift_bridgeObjectRelease();
    sub_249D9D9F4(0, &qword_2578DDE20);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
    sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
    sub_249F1EFEC();
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  }
  v14 = (void *)sub_249F1F7FC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_249F30B80;
  *(_QWORD *)(v15 + 32) = v14;
  *(_QWORD *)(v15 + 40) = v14;
  sub_249F1F55C();
  v16 = v14;
  v17 = objc_msgSend(v16, sel_dataType);
  sub_249D9D9F4(0, &qword_2578DDE20);
  v18 = (void *)sub_249F1F538();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, v18, 0, v17);

  return v19;
}

uint64_t sub_249EE9A88(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  return DiffusionBaseXLPipeline.generateImages(configuration:requestIdentifier:progressHandler:)(a1, a2, a3, a4);
}

unint64_t sub_249EE9A9C(unint64_t a1, uint64_t a2)
{
  return DiffusionBaseXLPipeline.decodeToImages(_:configuration:)(a1, a2);
}

void sub_249EE9AB0()
{
  DiffusionBaseXLPipeline.loadResources()();
}

uint64_t sub_249EE9AC8(uint64_t a1)
{
  uint64_t v1;

  return sub_249EE4B58(a1, *(float *)(v1 + 24));
}

uint64_t sub_249EE9AF8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 136))
  {
    swift_release();

  }
  return swift_deallocObject();
}

uint64_t sub_249EE9B70(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DiffusionBaseXLPipeline(a2, a1);
  return a2;
}

uint64_t sub_249EE9BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PipelineConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EE9BE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PipelineProgress();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249EE9C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2578DE550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EE9C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiffusionBaseXLPipeline.ModelInputs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for DiffusionBaseXLPipeline(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 120))
  {
    swift_release();

  }
}

uint64_t initializeWithCopy for DiffusionBaseXLPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  v14 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v12)
  {
    v15 = *(void **)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(a1 + 128) = v15;
    swift_retain();
    v16 = v15;
  }
  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  }
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t assignWithCopy for DiffusionBaseXLPipeline(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_8:
  v7 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
    goto LABEL_15;
  }
  v8 = *(__int128 *)((char *)a2 + 40);
  v9 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
LABEL_15:
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  swift_retain();
  swift_release();
  v10 = *((_QWORD *)a2 + 15);
  if (!*(_QWORD *)(a1 + 120))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 120) = v10;
      v14 = (void *)*((_QWORD *)a2 + 16);
      *(_QWORD *)(a1 + 128) = v14;
      swift_retain();
      v15 = v14;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    goto LABEL_22;
  }
  if (!v10)
  {
    sub_249EB847C(a1 + 120);
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 120) = v10;
  swift_retain();
  swift_release();
  v11 = (void *)*((_QWORD *)a2 + 16);
  v12 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v11;
  v13 = v11;

LABEL_22:
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for DiffusionBaseXLPipeline(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  void *v7;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  v6 = (_OWORD *)(a2 + 120);
  if (!*(_QWORD *)(a1 + 120))
    goto LABEL_9;
  if (!*(_QWORD *)v6)
  {
    sub_249EB847C(a1 + 120);
LABEL_9:
    *(_OWORD *)(a1 + 120) = *v6;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)v6;
  swift_release();
  v7 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

LABEL_10:
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiffusionBaseXLPipeline(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiffusionBaseXLPipeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiffusionBaseXLPipeline()
{
  return &type metadata for DiffusionBaseXLPipeline;
}

uint64_t *sub_249EEA234(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v10;
    v11 = v10;
  }
  return a1;
}

void sub_249EEA2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

}

uint64_t sub_249EEA348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  id v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = v9;
  return a1;
}

uint64_t sub_249EEA3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v8);
  v10 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v11 = v9;

  return a1;
}

uint64_t sub_249EEA458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_249EEA4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);

  return a1;
}

uint64_t sub_249EEA560()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EEA56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_249EEA5EC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EEA5F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_249EEA674()
{
  unint64_t v0;

  sub_249EB9668();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_249EEA6EC()
{
  return sub_249EC93A8();
}

uint64_t sub_249EEA708()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_249EEA730()
{
  return sub_249EEA6EC();
}

id PipelineConfiguration.InputConditioning.Float16Data.multiArray.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  id result;

  v5 = sub_249E47430(a3);
  v6 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  result = sub_249E14B58(v5, 65552);
  if (!v3)
    __asm { BR              X10 }
  return result;
}

BOOL PipelineConfiguration.mode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for PipelineConfiguration(0);
  return *(unsigned __int8 *)(v0 + *(int *)(v1 + 52) + 8) != 255 && *(float *)(v0 + *(int *)(v1 + 60)) < 1.0;
}

BOOL static PipelineMode.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t PipelineMode.hash(into:)()
{
  return sub_249F1FF70();
}

uint64_t PipelineMode.hashValue.getter()
{
  sub_249F1FF64();
  sub_249F1FF70();
  return sub_249F1FFA0();
}

uint64_t PipelineConfiguration.InputConditioning.hiddenStates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PipelineConfiguration.InputConditioning.pooledStates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PipelineConfiguration.InputConditioning(0) + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PipelineConfiguration.InputConditioning.imageEmbeddingData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for PipelineConfiguration.InputConditioning(0) + 24);
  v2 = *(_QWORD *)v1;
  sub_249EEC894(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  return v2;
}

uint64_t PipelineConfiguration.InputConditioning.imageProvidedPersonalization.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration.InputConditioning(0) + 28));
}

uint64_t PipelineConfiguration.InputConditioning.init(hiddenStates:pooledStates:imageEmbeddingData:imageProvidedPersonalization:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  int *v16;
  uint64_t result;
  _QWORD *v18;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(a7, a1, v14);
  v16 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(a7 + v16[5], a2, v14);
  v18 = (_QWORD *)(a7 + v16[6]);
  *v18 = a3;
  v18[1] = a4;
  v18[2] = a5;
  *(_BYTE *)(a7 + v16[7]) = a6;
  return result;
}

uint64_t PipelineConfiguration.InputConditioning.Float16Data.rawData.getter(uint64_t a1, unint64_t a2)
{
  sub_249DC3928(a1, a2);
  return a1;
}

uint64_t PipelineConfiguration.InputConditioning.Float16Data.dataShape.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_249EEAD00()
{
  _BYTE *v0;

  if (*v0)
    return 0x7061685361746164;
  else
    return 0x61746144776172;
}

uint64_t sub_249EEAD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EEC904(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EEAD64()
{
  sub_249EEC8C0();
  return sub_249F20024();
}

uint64_t sub_249EEAD8C()
{
  sub_249EEC8C0();
  return sub_249F20030();
}

uint64_t PipelineConfiguration.InputConditioning.Float16Data.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v14 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE600);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EEC8C0();
  sub_249F20018();
  v15 = a2;
  v16 = a3;
  v17 = 0;
  sub_249DD4BDC();
  sub_249F1FDCC();
  if (!v4)
  {
    v15 = v14;
    v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD10);
    sub_249EEF4FC(&qword_2578DE610, &qword_2578DDD10, MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
    sub_249F1FDCC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PipelineConfiguration.InputConditioning.Float16Data.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_249EECA00(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_249EEAF54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_249EECA00(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_249EEAF80(_QWORD *a1)
{
  uint64_t *v1;

  return PipelineConfiguration.InputConditioning.Float16Data.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_249EEAF9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249EEAFD4 + 4 * byte_249F31900[*v0]))(0x74536E6564646968, 0xEC00000073657461);
}

uint64_t sub_249EEAFD4()
{
  return 0x745364656C6F6F70;
}

unint64_t sub_249EEAFE8()
{
  return 0xD000000000000012;
}

unint64_t sub_249EEB004()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_249EEB024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EEF32C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EEB048()
{
  sub_249EECC18();
  return sub_249F20024();
}

uint64_t sub_249EEB070()
{
  sub_249EECC18();
  return sub_249F20030();
}

uint64_t PipelineConfiguration.InputConditioning.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE618);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EECC18();
  sub_249F20018();
  LOBYTE(v13) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  sub_249EEF4FC(&qword_2578DE628, &qword_2578D67D8, MEMORY[0x24BEE14F8], MEMORY[0x24BDBFCD8]);
  sub_249F1FDCC();
  if (!v2)
  {
    v9 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
    LOBYTE(v13) = 1;
    sub_249F1FDCC();
    v10 = (__int128 *)(v3 + *(int *)(v9 + 24));
    v11 = *((_QWORD *)v10 + 2);
    v13 = *v10;
    v14 = v11;
    v15 = 2;
    sub_249EECC5C();
    sub_249F1FD84();
    LOBYTE(v13) = 3;
    sub_249F1FD9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PipelineConfiguration.InputConditioning.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  char v35;

  v26 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v31 = (char *)&v23 - v7;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE638);
  v8 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EECC18();
  v29 = v10;
  v14 = (uint64_t)v32;
  sub_249F1FFF4();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = v11;
  v25 = v8;
  v32 = a1;
  LOBYTE(v33) = 0;
  sub_249EEF4FC(&qword_2578DE640, &qword_2578D67D8, MEMORY[0x24BEE1520], MEMORY[0x24BDBFCE8]);
  v15 = v28;
  sub_249F1FD00();
  v16 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v16(v13, v31, v15);
  LOBYTE(v33) = 1;
  v17 = v6;
  sub_249F1FD00();
  v18 = v24;
  v16(&v13[*(int *)(v24 + 20)], v17, v15);
  v35 = 2;
  sub_249EECCA0();
  sub_249F1FCB8();
  v19 = v34;
  v20 = &v13[*(int *)(v18 + 24)];
  *(_OWORD *)v20 = v33;
  *((_QWORD *)v20 + 2) = v19;
  LOBYTE(v33) = 3;
  v21 = sub_249F1FCD0();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v30);
  v13[*(int *)(v18 + 28)] = v21 & 1;
  sub_249EECCE4((uint64_t)v13, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return sub_249EECD28((uint64_t)v13);
}

uint64_t sub_249EEB634@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PipelineConfiguration.InputConditioning.init(from:)(a1, a2);
}

uint64_t sub_249EEB648(_QWORD *a1)
{
  return PipelineConfiguration.InputConditioning.encode(to:)(a1);
}

uint64_t PipelineConfiguration.prompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249D9E1E4(v1, a1);
}

uint64_t PipelineConfiguration.prompt.setter(__int128 *a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(v1);
  return sub_249D9E174(a1, v1);
}

uint64_t (*PipelineConfiguration.prompt.modify())()
{
  return nullsub_1;
}

uint64_t PipelineConfiguration.negativePrompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249D9E1E4(v1 + 40, a1);
}

uint64_t PipelineConfiguration.negativePrompt.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 40;
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_249D9E174(a1, v3);
}

uint64_t (*PipelineConfiguration.negativePrompt.modify())()
{
  return nullsub_1;
}

uint64_t PipelineConfiguration.inferAlpha.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t PipelineConfiguration.inferAlpha.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*PipelineConfiguration.inferAlpha.modify())()
{
  return nullsub_1;
}

uint64_t PipelineConfiguration.detectEmojiSkin.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t PipelineConfiguration.detectEmojiSkin.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*PipelineConfiguration.detectEmojiSkin.modify())()
{
  return nullsub_1;
}

uint64_t PipelineConfiguration.inputConditioning.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 32);
  return sub_249E14D40(v3, a1);
}

uint64_t PipelineConfiguration.inputConditioning.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 32);
  return sub_249E0BB0C(a1, v3);
}

uint64_t (*PipelineConfiguration.inputConditioning.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.imageConditioningScale.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 36));
}

uint64_t PipelineConfiguration.imageConditioningScale.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.imageConditioningScale.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.ipaScaleRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 40));
}

uint64_t PipelineConfiguration.ipaScaleRange.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for PipelineConfiguration(0);
  v6 = v2 + *(int *)(result + 40);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*PipelineConfiguration.ipaScaleRange.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.lastUnmergedPersonalizationStep.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 44));
}

uint64_t PipelineConfiguration.lastUnmergedPersonalizationStep.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for PipelineConfiguration(0);
  v6 = v2 + *(int *)(result + 44);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*PipelineConfiguration.lastUnmergedPersonalizationStep.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

unint64_t PipelineConfiguration.lcmScale.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 48));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t PipelineConfiguration.lcmScale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for PipelineConfiguration(0);
  v4 = v1 + *(int *)(result + 48);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*PipelineConfiguration.lcmScale.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

id PipelineConfiguration.startingImage.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 52);
  v2 = *(id *)v1;
  sub_249ECB9F4(*(id *)v1, *(_BYTE *)(v1 + 8));
  return v2;
}

void PipelineConfiguration.startingImage.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 52);
  sub_249E92978(*(id *)v5, *(_BYTE *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2;
}

uint64_t (*PipelineConfiguration.startingImage.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

void PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleBuffer.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleBuffer.modify())()
{
  return nullsub_1;
}

void *PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleEdgesBuffer.getter(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  return a2;
}

void PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleEdgesBuffer.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleEdgesBuffer.modify())()
{
  return nullsub_1;
}

void PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleStrength.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t (*PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration.scribbleStrength.modify())()
{
  return nullsub_1;
}

void PipelineConfiguration.LocalConditioningInput.RetoningConfiguration.retoningBuffer.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*PipelineConfiguration.LocalConditioningInput.RetoningConfiguration.retoningBuffer.modify())()
{
  return nullsub_1;
}

id PipelineConfiguration.localConditioningInput.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 56);
  v2 = *(id *)v1;
  sub_249E92A18(*(id *)v1, *(void **)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32));
  return v2;
}

void PipelineConfiguration.localConditioningInput.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = v3 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 56);
  sub_249E92994(*(void **)v7, *(void **)(v7 + 8), *(unsigned int *)(v7 + 16) | ((unint64_t)*(unsigned __int8 *)(v7 + 20) << 32));
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 20) = BYTE4(a3);
  *(_DWORD *)(v7 + 16) = a3;
}

uint64_t (*PipelineConfiguration.localConditioningInput.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.strength.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 60));
}

uint64_t PipelineConfiguration.strength.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.strength.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.refinerStart.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 64));
}

uint64_t PipelineConfiguration.refinerStart.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.refinerStart.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.imageCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 68));
}

uint64_t PipelineConfiguration.imageCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_QWORD *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.imageCount.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.stepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 72));
}

uint64_t PipelineConfiguration.stepCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_QWORD *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.stepCount.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.seed.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 76));
}

uint64_t PipelineConfiguration.seed.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_DWORD *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.seed.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.guidanceScale.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 80));
}

uint64_t PipelineConfiguration.guidanceScale.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.guidanceScale.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.controlNetInputs.getter()
{
  type metadata accessor for PipelineConfiguration(0);
  return swift_bridgeObjectRetain();
}

uint64_t PipelineConfiguration.controlNetInputs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PipelineConfiguration(0) + 84);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.controlNetInputs.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.disableSafety.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 88));
}

uint64_t PipelineConfiguration.disableSafety.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 88)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.disableSafety.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.useDenoisedIntermediates.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 92));
}

uint64_t PipelineConfiguration.useDenoisedIntermediates.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.useDenoisedIntermediates.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.schedulerType.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 96));
}

uint64_t PipelineConfiguration.schedulerType.setter(__int16 a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_WORD *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.schedulerType.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.rngType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 100));
}

uint64_t PipelineConfiguration.rngType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 100)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.rngType.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.encoderScaleFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 104));
}

uint64_t PipelineConfiguration.encoderScaleFactor.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 104)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.encoderScaleFactor.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.decoderScaleFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 108));
}

uint64_t PipelineConfiguration.decoderScaleFactor.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 108)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.decoderScaleFactor.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.originalSize.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 112));
}

uint64_t PipelineConfiguration.originalSize.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 112)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.originalSize.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.cropsCoordsTopLeft.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 116));
}

uint64_t PipelineConfiguration.cropsCoordsTopLeft.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 116)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.cropsCoordsTopLeft.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.targetSize.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 120));
}

uint64_t PipelineConfiguration.targetSize.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 120)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.targetSize.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.aestheticScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 124));
}

uint64_t PipelineConfiguration.aestheticScore.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 124)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.aestheticScore.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

float PipelineConfiguration.negativeAestheticScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for PipelineConfiguration(0) + 128));
}

uint64_t PipelineConfiguration.negativeAestheticScore.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PipelineConfiguration(0);
  *(float *)(v1 + *(int *)(result + 128)) = a1;
  return result;
}

uint64_t (*PipelineConfiguration.negativeAestheticScore.modify())(_QWORD)
{
  type metadata accessor for PipelineConfiguration(0);
  return nullsub_1;
}

uint64_t PipelineConfiguration.init(prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = MEMORY[0x24BEE0D00];
  v7 = MEMORY[0x24BEE0D70];
  *(_QWORD *)(a3 + 24) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0xE000000000000000;
  *(_QWORD *)(a3 + 64) = v6;
  *(_QWORD *)(a3 + 72) = v7;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0xE000000000000000;
  *(_WORD *)(a3 + 80) = 0;
  v8 = (int *)type metadata accessor for PipelineConfiguration(0);
  v9 = a3 + v8[8];
  v10 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_DWORD *)(a3 + v8[9]) = 1060320051;
  v11 = a3 + v8[10];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a3 + v8[11];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a3 + v8[12];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a3 + v8[13];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = -1;
  v15 = a3 + v8[14];
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 20) = -1;
  *(_DWORD *)(v15 + 16) = 0;
  *(_DWORD *)(a3 + v8[15]) = 1065353216;
  *(_DWORD *)(a3 + v8[16]) = 1061997773;
  *(_QWORD *)(a3 + v8[17]) = 1;
  *(_QWORD *)(a3 + v8[18]) = 50;
  *(_DWORD *)(a3 + v8[19]) = 0;
  *(_DWORD *)(a3 + v8[20]) = 1089470464;
  *(_QWORD *)(a3 + v8[21]) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a3 + v8[22]) = 0;
  *(_BYTE *)(a3 + v8[23]) = 0;
  *(_WORD *)(a3 + v8[24]) = 0x8000;
  *(_BYTE *)(a3 + v8[25]) = 0;
  *(_DWORD *)(a3 + v8[26]) = 1044022664;
  *(_DWORD *)(a3 + v8[27]) = 1044022664;
  *(_DWORD *)(a3 + v8[28]) = 1149239296;
  *(_DWORD *)(a3 + v8[29]) = 0;
  *(_DWORD *)(a3 + v8[30]) = 1149239296;
  *(_DWORD *)(a3 + v8[31]) = 1086324736;
  *(_DWORD *)(a3 + v8[32]) = 1075838976;
  v18 = v6;
  v19 = v7;
  *(_QWORD *)&v17 = a1;
  *((_QWORD *)&v17 + 1) = a2;
  __swift_destroy_boxed_opaque_existential_1(a3);
  return sub_249D9E174(&v17, a3);
}

uint64_t PipelineConfiguration.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = MEMORY[0x24BEE0D00];
  v3 = MEMORY[0x24BEE0D70];
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_WORD *)(a1 + 80) = 0;
  v4 = (int *)type metadata accessor for PipelineConfiguration(0);
  v5 = a1 + v4[8];
  v6 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_DWORD *)(a1 + v4[9]) = 1060320051;
  v8 = a1 + v4[10];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v4[11];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v4[12];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v4[13];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = -1;
  v12 = a1 + v4[14];
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 20) = -1;
  *(_DWORD *)(v12 + 16) = 0;
  *(_DWORD *)(a1 + v4[15]) = 1065353216;
  *(_DWORD *)(a1 + v4[16]) = 1061997773;
  *(_QWORD *)(a1 + v4[17]) = 1;
  *(_QWORD *)(a1 + v4[18]) = 50;
  *(_DWORD *)(a1 + v4[19]) = 0;
  *(_DWORD *)(a1 + v4[20]) = 1089470464;
  *(_QWORD *)(a1 + v4[21]) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + v4[22]) = 0;
  *(_BYTE *)(a1 + v4[23]) = 0;
  *(_WORD *)(a1 + v4[24]) = 0x8000;
  *(_BYTE *)(a1 + v4[25]) = 0;
  *(_DWORD *)(a1 + v4[26]) = 1044022664;
  *(_DWORD *)(a1 + v4[27]) = 1044022664;
  *(_DWORD *)(a1 + v4[28]) = 1149239296;
  *(_DWORD *)(a1 + v4[29]) = 0;
  *(_DWORD *)(a1 + v4[30]) = 1149239296;
  *(_DWORD *)(a1 + v4[31]) = 1086324736;
  *(_DWORD *)(a1 + v4[32]) = 1075838976;
  return result;
}

uint64_t type metadata accessor for PipelineConfiguration(uint64_t a1)
{
  return sub_249DC74D0(a1, qword_2578DE6B0);
}

uint64_t type metadata accessor for PipelineConfiguration.InputConditioning(uint64_t a1)
{
  return sub_249DC74D0(a1, qword_2578DE7B0);
}

uint64_t sub_249EEC894(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_249DC3928(result, a2);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_249EEC8C0()
{
  unint64_t result;

  result = qword_2578DE608;
  if (!qword_2578DE608)
  {
    result = MEMORY[0x24BD06528](&unk_249F31DB4, &type metadata for PipelineConfiguration.InputConditioning.Float16Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE608);
  }
  return result;
}

uint64_t sub_249EEC904(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61746144776172 && a2 == 0xE700000000000000;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7061685361746164 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_249EECA00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v9;
  _QWORD v10[2];
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE820);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_249EEC8C0();
  sub_249F1FFF4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    sub_249DD4E4C();
    sub_249F1FD00();
    v7 = v10[0];
    v9 = v10[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD10);
    v11 = 1;
    sub_249DC3928(v7, v9);
    sub_249EEF4FC(&qword_2578DE828, &qword_2578DDD10, MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
    sub_249F1FD00();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_249DC3928(v7, v9);
    swift_bridgeObjectRetain();
    sub_249DC3C24(v7, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_249DC3C24(v7, v9);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_249EECC18()
{
  unint64_t result;

  result = qword_2578DE620;
  if (!qword_2578DE620)
  {
    result = MEMORY[0x24BD06528](&unk_249F31D64, &type metadata for PipelineConfiguration.InputConditioning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE620);
  }
  return result;
}

unint64_t sub_249EECC5C()
{
  unint64_t result;

  result = qword_2578DE630;
  if (!qword_2578DE630)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PipelineConfiguration.InputConditioning.Float16Data, &type metadata for PipelineConfiguration.InputConditioning.Float16Data);
    atomic_store(result, (unint64_t *)&qword_2578DE630);
  }
  return result;
}

unint64_t sub_249EECCA0()
{
  unint64_t result;

  result = qword_2578DE648;
  if (!qword_2578DE648)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PipelineConfiguration.InputConditioning.Float16Data, &type metadata for PipelineConfiguration.InputConditioning.Float16Data);
    atomic_store(result, (unint64_t *)&qword_2578DE648);
  }
  return result;
}

uint64_t sub_249EECCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EECD28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_249EECD68()
{
  unint64_t result;

  result = qword_2578DE650;
  if (!qword_2578DE650)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for PipelineMode, &type metadata for PipelineMode);
    atomic_store(result, (unint64_t *)&qword_2578DE650);
  }
  return result;
}

ValueMetadata *type metadata accessor for PipelineMode()
{
  return &type metadata for PipelineMode;
}

uint64_t initializeBufferWithCopyOfBuffer for PipelineConfiguration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  char v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    *(_WORD *)(v4 + 80) = *((_WORD *)a2 + 40);
    v9 = a3[8];
    v10 = (char *)(v4 + v9);
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v10, v11, v16);
      v17(&v10[v12[5]], &v11[v12[5]], v16);
      v18 = v12[6];
      v19 = (uint64_t *)&v10[v18];
      v20 = (uint64_t *)&v11[v18];
      if (*(_QWORD *)&v11[v18 + 16])
      {
        v21 = v20[1];
        v54 = *v20;
        sub_249DC3928(*v20, v21);
        *v19 = v54;
        v19[1] = v21;
        v19[2] = v20[2];
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
        v19[2] = v20[2];
      }
      v10[v12[7]] = v11[v12[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v22 = a3[10];
    *(_DWORD *)(v4 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
    v23 = v4 + v22;
    v24 = (uint64_t)a2 + v22;
    *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v25 = a3[11];
    v26 = a3[12];
    v27 = v4 + v25;
    v28 = (uint64_t)a2 + v25;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v29 = v4 + v26;
    v30 = (uint64_t)a2 + v26;
    *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v31 = a3[13];
    v32 = v4 + v31;
    v33 = (uint64_t *)((char *)a2 + v31);
    v34 = *((unsigned __int8 *)v33 + 8);
    if (v34 == 255)
    {
      *(_QWORD *)v32 = *v33;
      *(_BYTE *)(v32 + 8) = *((_BYTE *)v33 + 8);
    }
    else
    {
      v35 = v34 & 1;
      v36 = *v33;
      v37 = (id)*v33;
      *(_QWORD *)v32 = v36;
      *(_BYTE *)(v32 + 8) = v35;
    }
    v38 = a3[14];
    v39 = v4 + v38;
    v40 = (uint64_t *)((char *)a2 + v38);
    if (*((unsigned __int8 *)v40 + 20) == 255)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *(_QWORD *)(v39 + 13) = *(uint64_t *)((char *)v40 + 13);
    }
    else
    {
      v41 = *((unsigned int *)v40 + 4) | ((unint64_t)*((unsigned __int8 *)v40 + 20) << 32);
      v42 = *v40;
      v43 = (void *)v40[1];
      sub_249E929F0((void *)*v40, v43, v41, BYTE4(v41) & 1);
      *(_QWORD *)v39 = v42;
      *(_QWORD *)(v39 + 8) = v43;
      *(_DWORD *)(v39 + 16) = v41;
      *(_BYTE *)(v39 + 20) = BYTE4(v41) & 1;
    }
    v44 = a3[16];
    *(_DWORD *)(v4 + a3[15]) = *(_DWORD *)((char *)a2 + a3[15]);
    *(_DWORD *)(v4 + v44) = *(_DWORD *)((char *)a2 + v44);
    v45 = a3[18];
    *(_QWORD *)(v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    *(_QWORD *)(v4 + v45) = *(uint64_t *)((char *)a2 + v45);
    v46 = a3[20];
    *(_DWORD *)(v4 + a3[19]) = *(_DWORD *)((char *)a2 + a3[19]);
    *(_DWORD *)(v4 + v46) = *(_DWORD *)((char *)a2 + v46);
    v47 = a3[22];
    *(_QWORD *)(v4 + a3[21]) = *(uint64_t *)((char *)a2 + a3[21]);
    *(_BYTE *)(v4 + v47) = *((_BYTE *)a2 + v47);
    v48 = a3[24];
    *(_BYTE *)(v4 + a3[23]) = *((_BYTE *)a2 + a3[23]);
    *(_WORD *)(v4 + v48) = *(_WORD *)((char *)a2 + v48);
    v49 = a3[26];
    *(_BYTE *)(v4 + a3[25]) = *((_BYTE *)a2 + a3[25]);
    *(_DWORD *)(v4 + v49) = *(_DWORD *)((char *)a2 + v49);
    v50 = a3[28];
    *(_DWORD *)(v4 + a3[27]) = *(_DWORD *)((char *)a2 + a3[27]);
    *(_DWORD *)(v4 + v50) = *(_DWORD *)((char *)a2 + v50);
    v51 = a3[30];
    *(_DWORD *)(v4 + a3[29]) = *(_DWORD *)((char *)a2 + a3[29]);
    *(_DWORD *)(v4 + v51) = *(_DWORD *)((char *)a2 + v51);
    v52 = a3[32];
    *(_DWORD *)(v4 + a3[31]) = *(_DWORD *)((char *)a2 + a3[31]);
    *(_DWORD *)(v4 + v52) = *(_DWORD *)((char *)a2 + v52);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PipelineConfiguration(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  v4 = a1 + a2[8];
  v5 = type metadata accessor for PipelineConfiguration.InputConditioning(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(v4 + *(int *)(v5 + 20), v6);
    v8 = (uint64_t *)(v4 + *(int *)(v5 + 24));
    if (v8[2])
    {
      sub_249DC3C24(*v8, v8[1]);
      swift_bridgeObjectRelease();
    }
  }
  v9 = a1 + a2[13];
  if (*(unsigned __int8 *)(v9 + 8) != 255)

  v10 = a1 + a2[14];
  if (*(unsigned __int8 *)(v10 + 20) != 255)
  {
    v11 = *(unsigned int *)(v10 + 16) | ((unint64_t)*(unsigned __int8 *)(v10 + 20) << 32);
    sub_249E929AC(*(void **)v10, *(void **)(v10 + 8), v11, BYTE4(v11) & 1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PipelineConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  char v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v8 = a3[8];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v9, v10, v14);
    v15(&v9[v11[5]], &v10[v11[5]], v14);
    v16 = v11[6];
    v17 = (uint64_t *)&v9[v16];
    v18 = (uint64_t *)&v10[v16];
    if (*(_QWORD *)&v10[v16 + 16])
    {
      v19 = v18[1];
      v52 = *v18;
      sub_249DC3928(*v18, v19);
      *v17 = v52;
      v17[1] = v19;
      v17[2] = v18[2];
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v17[2] = v18[2];
    }
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v20 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = a3[11];
  v24 = a3[12];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  *(_DWORD *)v27 = *(_DWORD *)v28;
  v29 = a3[13];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  v32 = *((unsigned __int8 *)v31 + 8);
  if (v32 == 255)
  {
    *(_QWORD *)v30 = *v31;
    *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
  }
  else
  {
    v33 = v32 & 1;
    v34 = *v31;
    v35 = (id)*v31;
    *(_QWORD *)v30 = v34;
    *(_BYTE *)(v30 + 8) = v33;
  }
  v36 = a3[14];
  v37 = a1 + v36;
  v38 = (uint64_t *)(a2 + v36);
  if (*((unsigned __int8 *)v38 + 20) == 255)
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *(_QWORD *)(v37 + 13) = *(uint64_t *)((char *)v38 + 13);
  }
  else
  {
    v39 = *((unsigned int *)v38 + 4) | ((unint64_t)*((unsigned __int8 *)v38 + 20) << 32);
    v40 = *v38;
    v41 = (void *)v38[1];
    sub_249E929F0((void *)*v38, v41, v39, BYTE4(v39) & 1);
    *(_QWORD *)v37 = v40;
    *(_QWORD *)(v37 + 8) = v41;
    *(_DWORD *)(v37 + 16) = v39;
    *(_BYTE *)(v37 + 20) = BYTE4(v39) & 1;
  }
  v42 = a3[16];
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  *(_DWORD *)(a1 + v42) = *(_DWORD *)(a2 + v42);
  v43 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v43) = *(_QWORD *)(a2 + v43);
  v44 = a3[20];
  *(_DWORD *)(a1 + a3[19]) = *(_DWORD *)(a2 + a3[19]);
  *(_DWORD *)(a1 + v44) = *(_DWORD *)(a2 + v44);
  v45 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  v46 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_WORD *)(a1 + v46) = *(_WORD *)(a2 + v46);
  v47 = a3[26];
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  *(_DWORD *)(a1 + v47) = *(_DWORD *)(a2 + v47);
  v48 = a3[28];
  *(_DWORD *)(a1 + a3[27]) = *(_DWORD *)(a2 + a3[27]);
  *(_DWORD *)(a1 + v48) = *(_DWORD *)(a2 + v48);
  v49 = a3[30];
  *(_DWORD *)(a1 + a3[29]) = *(_DWORD *)(a2 + a3[29]);
  *(_DWORD *)(a1 + v49) = *(_DWORD *)(a2 + v49);
  v50 = a3[32];
  *(_DWORD *)(a1 + a3[31]) = *(_DWORD *)(a2 + a3[31]);
  *(_DWORD *)(a1 + v50) = *(_DWORD *)(a2 + v50);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PipelineConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, int *);
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  id v56;
  id v57;
  char v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  char v74;
  uint64_t v76;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  v6 = a3[8];
  v7 = (_BYTE *)(a1 + v6);
  v8 = (_BYTE *)(a2 + v6);
  v9 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v7, v8, v14);
      v15(&v7[v9[5]], &v8[v9[5]], v14);
      v16 = v9[6];
      v17 = (uint64_t *)&v7[v16];
      v18 = (uint64_t *)&v8[v16];
      if (*(_QWORD *)&v8[v16 + 16])
      {
        v19 = v18[1];
        v76 = *v18;
        sub_249DC3928(*v18, v19);
        *v17 = v76;
        v17[1] = v19;
        v17[2] = v18[2];
        swift_bridgeObjectRetain();
      }
      else
      {
        v32 = *(_OWORD *)v18;
        v17[2] = v18[2];
        *(_OWORD *)v17 = v32;
      }
      v7[v9[7]] = v8[v9[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_18;
    }
LABEL_7:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_18;
  }
  if (v13)
  {
    sub_249EECD28((uint64_t)v7);
    goto LABEL_7;
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 24);
  v22(v7, v8, v21);
  v22(&v7[v9[5]], &v8[v9[5]], v21);
  v23 = v9[6];
  v24 = (uint64_t *)&v7[v23];
  v25 = (uint64_t *)&v8[v23];
  v26 = *(_QWORD *)&v7[v23 + 16];
  v27 = *(_QWORD *)&v8[v23 + 16];
  if (v26)
  {
    if (v27)
    {
      v28 = *v25;
      v29 = v25[1];
      sub_249DC3928(*v25, v29);
      v30 = *v24;
      v31 = v24[1];
      *v24 = v28;
      v24[1] = v29;
      sub_249DC3C24(v30, v31);
      v24[2] = v25[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249E02528((uint64_t)v24);
      v35 = v25[2];
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[2] = v35;
    }
  }
  else if (v27)
  {
    v33 = *v25;
    v34 = v25[1];
    sub_249DC3928(*v25, v34);
    *v24 = v33;
    v24[1] = v34;
    v24[2] = v25[2];
    swift_bridgeObjectRetain();
  }
  else
  {
    v36 = *(_OWORD *)v25;
    v24[2] = v25[2];
    *(_OWORD *)v24 = v36;
  }
  v7[v9[7]] = v8[v9[7]];
LABEL_18:
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  v37 = a3[10];
  v38 = a1 + v37;
  v39 = (uint64_t *)(a2 + v37);
  v40 = *v39;
  *(_BYTE *)(v38 + 8) = *((_BYTE *)v39 + 8);
  *(_QWORD *)v38 = v40;
  v41 = a3[11];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[12];
  v46 = a1 + v45;
  v47 = a2 + v45;
  LODWORD(v44) = *(_DWORD *)v47;
  *(_BYTE *)(v46 + 4) = *(_BYTE *)(v47 + 4);
  *(_DWORD *)v46 = v44;
  v48 = a3[13];
  v49 = a1 + v48;
  v50 = a2 + v48;
  LODWORD(v46) = *(unsigned __int8 *)(a1 + v48 + 8);
  v51 = *(unsigned __int8 *)(a2 + v48 + 8);
  if ((_DWORD)v46 == 255)
  {
    if (v51 == 255)
    {
      v53 = *(void **)v50;
      *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
      *(_QWORD *)v49 = v53;
    }
    else
    {
      v58 = v51 & 1;
      v59 = *(void **)v50;
      v60 = v59;
      *(_QWORD *)v49 = v59;
      *(_BYTE *)(v49 + 8) = v58;
    }
  }
  else if (v51 == 255)
  {
    sub_249ECAFEC((id *)v49);
    v52 = *(_BYTE *)(v50 + 8);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *(_BYTE *)(v49 + 8) = v52;
  }
  else
  {
    v54 = v51 & 1;
    v55 = *(void **)v50;
    v56 = v55;
    v57 = *(id *)v49;
    *(_QWORD *)v49 = v55;
    *(_BYTE *)(v49 + 8) = v54;

  }
  v61 = a3[14];
  v62 = a1 + v61;
  v63 = (__int128 *)(a2 + v61);
  v64 = *((unsigned int *)v63 + 4) | ((unint64_t)*((unsigned __int8 *)v63 + 20) << 32);
  if (*(unsigned __int8 *)(a1 + v61 + 20) == 255)
  {
    if (BYTE4(v64) == 255)
    {
      v65 = *v63;
      *(_QWORD *)(v62 + 13) = *(_QWORD *)((char *)v63 + 13);
      *(_OWORD *)v62 = v65;
    }
    else
    {
      v67 = *(void **)v63;
      v68 = (void *)*((_QWORD *)v63 + 1);
      sub_249E929F0(v67, v68, v64, BYTE4(v64) & 1);
      *(_QWORD *)v62 = v67;
      *(_QWORD *)(v62 + 8) = v68;
      *(_DWORD *)(v62 + 16) = v64;
      *(_BYTE *)(v62 + 20) = BYTE4(v64) & 1;
    }
  }
  else if (BYTE4(v64) == 255)
  {
    sub_249ECB020(v62);
    v66 = *(_QWORD *)((char *)v63 + 13);
    *(_OWORD *)v62 = *v63;
    *(_QWORD *)(v62 + 13) = v66;
  }
  else
  {
    v69 = *(void **)v63;
    v70 = (void *)*((_QWORD *)v63 + 1);
    sub_249E929F0(v69, v70, v64, BYTE4(v64) & 1);
    v71 = *(void **)v62;
    v72 = *(void **)(v62 + 8);
    v73 = *(unsigned int *)(v62 + 16);
    v74 = *(_BYTE *)(v62 + 20);
    *(_QWORD *)v62 = v69;
    *(_QWORD *)(v62 + 8) = v70;
    *(_DWORD *)(v62 + 16) = v64;
    *(_BYTE *)(v62 + 20) = BYTE4(v64) & 1;
    sub_249E929AC(v71, v72, v73, v74);
  }
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  *(_DWORD *)(a1 + a3[16]) = *(_DWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_DWORD *)(a1 + a3[19]) = *(_DWORD *)(a2 + a3[19]);
  *(_DWORD *)(a1 + a3[20]) = *(_DWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_WORD *)(a1 + a3[24]) = *(_WORD *)(a2 + a3[24]);
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  *(_DWORD *)(a1 + a3[26]) = *(_DWORD *)(a2 + a3[26]);
  *(_DWORD *)(a1 + a3[27]) = *(_DWORD *)(a2 + a3[27]);
  *(_DWORD *)(a1 + a3[28]) = *(_DWORD *)(a2 + a3[28]);
  *(_DWORD *)(a1 + a3[29]) = *(_DWORD *)(a2 + a3[29]);
  *(_DWORD *)(a1 + a3[30]) = *(_DWORD *)(a2 + a3[30]);
  *(_DWORD *)(a1 + a3[31]) = *(_DWORD *)(a2 + a3[31]);
  *(_DWORD *)(a1 + a3[32]) = *(_DWORD *)(a2 + a3[32]);
  return a1;
}

uint64_t initializeWithTake for PipelineConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v8 = a3[8];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 56) = v7;
  v11 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
    v15(v9, v10, v14);
    v15(&v9[v11[5]], &v10[v11[5]], v14);
    v16 = v11[6];
    v17 = &v9[v16];
    v18 = &v10[v16];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v19 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a1 + v29;
  v33 = (__int128 *)(a2 + v29);
  v34 = *v33;
  *(_QWORD *)(v32 + 13) = *(_QWORD *)((char *)v33 + 13);
  *(_OWORD *)v32 = v34;
  v35 = a3[16];
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  *(_DWORD *)(a1 + v35) = *(_DWORD *)(a2 + v35);
  v36 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v36) = *(_QWORD *)(a2 + v36);
  v37 = a3[20];
  *(_DWORD *)(a1 + a3[19]) = *(_DWORD *)(a2 + a3[19]);
  *(_DWORD *)(a1 + v37) = *(_DWORD *)(a2 + v37);
  v38 = a3[22];
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v38) = *(_BYTE *)(a2 + v38);
  v39 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_WORD *)(a1 + v39) = *(_WORD *)(a2 + v39);
  v40 = a3[26];
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  *(_DWORD *)(a1 + v40) = *(_DWORD *)(a2 + v40);
  v41 = a3[28];
  *(_DWORD *)(a1 + a3[27]) = *(_DWORD *)(a2 + a3[27]);
  *(_DWORD *)(a1 + v41) = *(_DWORD *)(a2 + v41);
  v42 = a3[30];
  *(_DWORD *)(a1 + a3[29]) = *(_DWORD *)(a2 + a3[29]);
  *(_DWORD *)(a1 + v42) = *(_DWORD *)(a2 + v42);
  v43 = a3[32];
  *(_DWORD *)(a1 + a3[31]) = *(_DWORD *)(a2 + a3[31]);
  *(_DWORD *)(a1 + v43) = *(_DWORD *)(a2 + v43);
  return a1;
}

uint64_t assignWithTake for PipelineConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  void (*v53)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = a3[8];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  v10 = (int *)type metadata accessor for PipelineConfiguration.InputConditioning(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v8, v9, v15);
      v16(&v8[v10[5]], &v9[v10[5]], v15);
      v17 = v10[6];
      v18 = &v8[v17];
      v19 = &v9[v17];
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_249EECD28((uint64_t)v8);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v53 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v52 - 8) + 40);
  v53(v8, v9, v52);
  v53(&v8[v10[5]], &v9[v10[5]], v52);
  v54 = v10[6];
  v55 = (uint64_t)&v8[v54];
  v56 = &v9[v54];
  if (!*(_QWORD *)&v8[v54 + 16])
    goto LABEL_22;
  if (!*((_QWORD *)v56 + 2))
  {
    sub_249E02528(v55);
LABEL_22:
    *(_OWORD *)v55 = *(_OWORD *)v56;
    *(_QWORD *)(v55 + 16) = *((_QWORD *)v56 + 2);
    goto LABEL_23;
  }
  v57 = *(_QWORD *)v55;
  v58 = *(_QWORD *)(v55 + 8);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  sub_249DC3C24(v57, v58);
  *(_QWORD *)(v55 + 16) = *((_QWORD *)v56 + 2);
  swift_bridgeObjectRelease();
LABEL_23:
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  v21 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = a3[11];
  v25 = a3[12];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = a1 + v25;
  v29 = a2 + v25;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = a3[13];
  v31 = a1 + v30;
  v32 = a2 + v30;
  if (*(unsigned __int8 *)(a1 + v30 + 8) == 255)
  {
LABEL_10:
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
    goto LABEL_12;
  }
  v33 = *(unsigned __int8 *)(v32 + 8);
  if (v33 == 255)
  {
    sub_249ECAFEC((id *)v31);
    goto LABEL_10;
  }
  v34 = *(id *)v31;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = v33 & 1;

LABEL_12:
  v35 = a3[14];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_BYTE *)(a1 + v35 + 20);
  if (v38 != 255)
  {
    v39 = *(unsigned int *)(v37 + 16) | ((unint64_t)*(unsigned __int8 *)(v37 + 20) << 32);
    if (HIDWORD(v39) <= 0xFE)
    {
      v40 = *(unsigned int *)(v36 + 16);
      v41 = *(void **)v36;
      v42 = *(void **)(v36 + 8);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *(_DWORD *)(v36 + 16) = v39;
      *(_BYTE *)(v36 + 20) = BYTE4(v39) & 1;
      sub_249E929AC(v41, v42, v40, v38 & 1);
      goto LABEL_17;
    }
    sub_249ECB020(v36);
  }
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_QWORD *)(v36 + 13) = *(_QWORD *)(v37 + 13);
LABEL_17:
  v43 = a3[16];
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  *(_DWORD *)(a1 + v43) = *(_DWORD *)(a2 + v43);
  v44 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);
  v45 = a3[20];
  *(_DWORD *)(a1 + a3[19]) = *(_DWORD *)(a2 + a3[19]);
  *(_DWORD *)(a1 + v45) = *(_DWORD *)(a2 + v45);
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  swift_bridgeObjectRelease();
  v46 = a3[23];
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_BYTE *)(a1 + v46) = *(_BYTE *)(a2 + v46);
  v47 = a3[25];
  *(_WORD *)(a1 + a3[24]) = *(_WORD *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v47) = *(_BYTE *)(a2 + v47);
  v48 = a3[27];
  *(_DWORD *)(a1 + a3[26]) = *(_DWORD *)(a2 + a3[26]);
  *(_DWORD *)(a1 + v48) = *(_DWORD *)(a2 + v48);
  v49 = a3[29];
  *(_DWORD *)(a1 + a3[28]) = *(_DWORD *)(a2 + a3[28]);
  *(_DWORD *)(a1 + v49) = *(_DWORD *)(a2 + v49);
  v50 = a3[31];
  *(_DWORD *)(a1 + a3[30]) = *(_DWORD *)(a2 + a3[30]);
  *(_DWORD *)(a1 + v50) = *(_DWORD *)(a2 + v50);
  *(_DWORD *)(a1 + a3[32]) = *(_DWORD *)(a2 + a3[32]);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EEE198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PipelineConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EEE224(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67E0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_249EEE29C()
{
  unint64_t v0;

  sub_249E03084();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for PipelineConfiguration.InputConditioning(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    if (*(_QWORD *)((char *)a2 + v9 + 16))
    {
      v12 = *v11;
      v13 = v11[1];
      sub_249DC3928(*v11, v13);
      *v10 = v12;
      v10[1] = v13;
      v10[2] = v11[2];
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      v10[2] = v11[2];
    }
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for PipelineConfiguration.InputConditioning(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v7;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(a2 + 20), v4);
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  if (v7[2])
  {
    sub_249DC3C24(*v7, v7[1]);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PipelineConfiguration.InputConditioning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  if (*(_QWORD *)(a2 + v8 + 16))
  {
    v11 = *v10;
    v12 = v10[1];
    sub_249DC3928(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v9[2] = v10[2];
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[2] = v10[2];
  }
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for PipelineConfiguration.InputConditioning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *(_QWORD *)(a1 + v8 + 16);
  v12 = *(_QWORD *)(a2 + v8 + 16);
  if (v11)
  {
    if (v12)
    {
      v13 = *v10;
      v14 = v10[1];
      sub_249DC3928(*v10, v14);
      v15 = *v9;
      v16 = v9[1];
      *v9 = v13;
      v9[1] = v14;
      sub_249DC3C24(v15, v16);
      v9[2] = v10[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249E02528((uint64_t)v9);
      v19 = v10[2];
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v9[2] = v19;
    }
  }
  else if (v12)
  {
    v17 = *v10;
    v18 = v10[1];
    sub_249DC3928(*v10, v18);
    *v9 = v17;
    v9[1] = v18;
    v9[2] = v10[2];
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_OWORD *)v10;
    v9[2] = v10[2];
    *(_OWORD *)v9 = v20;
  }
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for PipelineConfiguration.InputConditioning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for PipelineConfiguration.InputConditioning(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  if (!*(_QWORD *)(a1 + v8 + 16))
    goto LABEL_5;
  if (!*(_QWORD *)(v10 + 16))
  {
    sub_249E02528(v9);
LABEL_5:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
    goto LABEL_6;
  }
  v11 = *(_QWORD *)v9;
  v12 = *(_QWORD *)(v9 + 8);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  sub_249DC3C24(v11, v12);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineConfiguration.InputConditioning()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EEE8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for PipelineConfiguration.InputConditioning()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249EEE94C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 16) = a2;
  return result;
}

void sub_249EEE9CC()
{
  unint64_t v0;

  sub_249EB9668();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for PipelineConfiguration.InputConditioning.Float16Data(uint64_t a1)
{
  sub_249DC3C24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t *_s13DiffusionBase21PipelineConfigurationV17InputConditioningV11Float16DataVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  sub_249DC3928(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PipelineConfiguration.InputConditioning.Float16Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_249DC3928(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_249DC3C24(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for PipelineConfiguration.InputConditioning.Float16Data(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_249DC3C24(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineConfiguration.InputConditioning.Float16Data(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PipelineConfiguration.InputConditioning.Float16Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.InputConditioning.Float16Data()
{
  return &type metadata for PipelineConfiguration.InputConditioning.Float16Data;
}

uint64_t initializeBufferWithCopyOfBuffer for PipelineConfiguration.LatentInitializer(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  id v5;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(id *)a2;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for PipelineConfiguration.LatentInitializer(id *a1)
{

}

uint64_t assignWithCopy for PipelineConfiguration.LatentInitializer(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  id v5;
  void *v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(id *)a2;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;

  return a1;
}

uint64_t assignWithTake for PipelineConfiguration.LatentInitializer(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.LatentInitializer()
{
  return &type metadata for PipelineConfiguration.LatentInitializer;
}

void destroy for PipelineConfiguration.LocalConditioningInput(uint64_t a1)
{
  sub_249E929AC(*(void **)a1, *(void **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_BYTE *)(a1 + 20));
}

uint64_t _s13DiffusionBase21PipelineConfigurationV22LocalConditioningInputOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 20);
  sub_249E929F0(*(void **)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 20) = v6;
  return a1;
}

uint64_t assignWithCopy for PipelineConfiguration.LocalConditioningInput(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 20);
  sub_249E929F0(*(void **)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 20);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 20) = v6;
  sub_249E929AC(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PipelineConfiguration.LocalConditioningInput(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 20);
  v5 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 20);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 20) = v4;
  sub_249E929AC(v5, v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineConfiguration.LocalConditioningInput(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PipelineConfiguration.LocalConditioningInput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = -(char)a2;
  }
  return result;
}

uint64_t sub_249EEEEC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t sub_249EEEED0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 20) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.LocalConditioningInput()
{
  return &type metadata for PipelineConfiguration.LocalConditioningInput;
}

uint64_t initializeBufferWithCopyOfBuffer for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration()
{
  return &type metadata for PipelineConfiguration.LocalConditioningInput.ScribbleConfiguration;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.LocalConditioningInput.RetoningConfiguration()
{
  return &type metadata for PipelineConfiguration.LocalConditioningInput.RetoningConfiguration;
}

uint64_t storeEnumTagSinglePayload for PipelineConfiguration.InputConditioning.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_249EEF030 + 4 * byte_249F31909[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_249EEF064 + 4 * byte_249F31904[v4]))();
}

uint64_t sub_249EEF064(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EEF06C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EEF074);
  return result;
}

uint64_t sub_249EEF080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EEF088);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_249EEF08C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EEF094(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.InputConditioning.CodingKeys()
{
  return &type metadata for PipelineConfiguration.InputConditioning.CodingKeys;
}

uint64_t _s13DiffusionBase12PipelineModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EEF0FC + 4 * byte_249F31913[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EEF130 + 4 * byte_249F3190E[v4]))();
}

uint64_t sub_249EEF130(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EEF138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EEF140);
  return result;
}

uint64_t sub_249EEF14C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EEF154);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EEF158(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EEF160(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PipelineConfiguration.InputConditioning.Float16Data.CodingKeys()
{
  return &type metadata for PipelineConfiguration.InputConditioning.Float16Data.CodingKeys;
}

unint64_t sub_249EEF180()
{
  unint64_t result;

  result = qword_2578DE7F0;
  if (!qword_2578DE7F0)
  {
    result = MEMORY[0x24BD06528](&unk_249F31C84, &type metadata for PipelineConfiguration.InputConditioning.Float16Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE7F0);
  }
  return result;
}

unint64_t sub_249EEF1C8()
{
  unint64_t result;

  result = qword_2578DE7F8;
  if (!qword_2578DE7F8)
  {
    result = MEMORY[0x24BD06528](&unk_249F31D3C, &type metadata for PipelineConfiguration.InputConditioning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE7F8);
  }
  return result;
}

unint64_t sub_249EEF210()
{
  unint64_t result;

  result = qword_2578DE800;
  if (!qword_2578DE800)
  {
    result = MEMORY[0x24BD06528](&unk_249F31CAC, &type metadata for PipelineConfiguration.InputConditioning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE800);
  }
  return result;
}

unint64_t sub_249EEF258()
{
  unint64_t result;

  result = qword_2578DE808;
  if (!qword_2578DE808)
  {
    result = MEMORY[0x24BD06528](&unk_249F31CD4, &type metadata for PipelineConfiguration.InputConditioning.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE808);
  }
  return result;
}

unint64_t sub_249EEF2A0()
{
  unint64_t result;

  result = qword_2578DE810;
  if (!qword_2578DE810)
  {
    result = MEMORY[0x24BD06528](&unk_249F31BF4, &type metadata for PipelineConfiguration.InputConditioning.Float16Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE810);
  }
  return result;
}

unint64_t sub_249EEF2E8()
{
  unint64_t result;

  result = qword_2578DE818;
  if (!qword_2578DE818)
  {
    result = MEMORY[0x24BD06528](&unk_249F31C1C, &type metadata for PipelineConfiguration.InputConditioning.Float16Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE818);
  }
  return result;
}

uint64_t sub_249EEF32C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74536E6564646968 && a2 == 0xEC00000073657461;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x745364656C6F6F70 && a2 == 0xEC00000073657461 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000249F39840 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000249F39860)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_249EEF4FC(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x24BD06528](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_249EEF560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_249EEF578()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_249EDB238;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_249E4E2FC;
  v3[3] = &block_descriptor_13;
  v3[4] = v2;
  objc_msgSend(v1, sel_modelDescriptionWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_249EEF60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _OWORD v19[11];
  _OWORD v20[10];
  __int128 v21;
  __int128 v22;
  _BYTE v23[168];

  v4 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249EEFA0C((uint64_t)v23);
  sub_249EEFA30();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = sub_249F13D1C((uint64_t)v7);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  v10 = v8;
  v11 = (void *)sub_249F13E30((uint64_t)&unk_2578DE838, v9);
  swift_release();
  v12 = objc_msgSend(v11, sel_metadata);
  type metadata accessor for MLModelMetadataKey(0);
  sub_249ED7760();
  v13 = sub_249F1F208();

  if (*(_QWORD *)(v13 + 16))
  {
    v14 = (id)*MEMORY[0x24BDBFF38];
    v15 = sub_249ED85F0((uint64_t)v14);
    if ((v16 & 1) != 0)
    {
      sub_249DCA7E4(*(_QWORD *)(v13 + 56) + 32 * v15, (uint64_t)&v21);
    }
    else
    {
      v21 = 0u;
      v22 = 0u;
    }

  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v22 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DA078);
    if (swift_dynamicCast())
      v17 = *(_QWORD *)&v20[0];
    else
      v17 = 0;
  }
  else
  {
    sub_249E36D34((uint64_t)&v21);
    v17 = 0;
  }
  sub_249EF1058(v17, v20);

  swift_bridgeObjectRelease();
  v19[6] = v20[6];
  v19[7] = v20[7];
  v19[8] = v20[8];
  v19[9] = v20[9];
  v19[2] = v20[2];
  v19[3] = v20[3];
  v19[4] = v20[4];
  v19[5] = v20[5];
  v19[0] = v20[0];
  v19[1] = v20[1];
  nullsub_1(v19);
  sub_249EEFA6C((uint64_t)v19, (uint64_t)&v21);
  return sub_249EEFA6C((uint64_t)&v21, a2);
}

double sub_249EEFA0C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 1;
  return result;
}

unint64_t sub_249EEFA30()
{
  unint64_t result;

  result = qword_2578DDFA8;
  if (!qword_2578DDFA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_2578DDFA8);
  }
  return result;
}

uint64_t sub_249EEFA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EEFAB4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_249EEFAD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_249DAFCF8;
  v5[16] = a1;
  v5[17] = v4;
  return swift_task_switch();
}

uint64_t TextEncoderXL.init(tokenizer:modelAt:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_249F1E7F4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249D9E1E4(a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v12 = ManagedMLModel.init(modelAt:configuration:name:)(v11, a3, (uint64_t)"TextEncoderXL", 13, 2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  result = __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)(a4 + 40) = v12;
  return result;
}

Swift::Bool __swiftcall TextEncoderXL.usePORParameters()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  char v5;
  char v6;

  v1 = *(void **)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
  if (v1)
  {
    v2 = objc_msgSend(v1, sel_modelDescription);
    v3 = objc_msgSend(v2, sel_outputDescriptionsByName);

    sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
    v4 = sub_249F1F208();

    if (*(_QWORD *)(v4 + 16))
    {
      sub_249DB7D8C(0xD000000000000010, 0x8000000249F38DB0);
      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TextEncoderXL.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall TextEncoderXL.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

uint64_t TextEncoderXL.encode(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v3;
  v9 = sub_249EEFFB4();
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    goto LABEL_11;
  v11 = *(_QWORD *)(v9 + 8 * v10 + 24);
  swift_bridgeObjectRelease();
  v12 = v3[3];
  v13 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 8))(a3, v11, 0, v12, v13);
  if (v4)
    return result;
  v16 = v15;
  v17 = *(_QWORD *)(v15 + 16);
  if (v11 < v17)
  {
    v18 = *(_QWORD *)(result + 16);
    if (__OFSUB__(v18, v11))
    {
      __break(1u);
    }
    else
    {
      v23 = a2;
      v19 = sub_249EBC938(v18 - v11, result);
      if (!__OFSUB__(v17, v11))
      {
        v16 = sub_249EBCB8C(v17 - v11, v16);
        v21 = v5[3];
        v20 = v5[4];
        __swift_project_boxed_opaque_existential_1(v5, v21);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v21, v20);
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6E10);
        v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_249F21770;
        sub_249F1FA84();
        sub_249F1F460();
        __swift_project_boxed_opaque_existential_1(a3, a3[3]);
        sub_249F1FE14();
        sub_249F1F460();
        sub_249F1F460();
        swift_bridgeObjectRelease();
        sub_249F1F460();
        *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 40) = 0xE000000000000000;
        sub_249F1FF58();
        a2 = v23;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_11:
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  sub_249EF026C(a1, a2, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EEFFB4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  v1 = *(id *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1E0);
  sub_249F1F874();

  v2 = sub_249ECE2D8(7562345, 0xE300000000000000);
  if (!*(_QWORD *)(v19 + 16) || (v4 = sub_249DB7D8C(v2, v3), (v5 & 1) == 0))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_20;
  }
  v6 = *(id *)(*(_QWORD *)(v19 + 56) + 8 * v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v6, sel_multiArrayConstraint);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_shape);

    sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
    v9 = sub_249F1F544();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = sub_249F1FBEC();
      swift_bridgeObjectRelease();
      if (v10)
        goto LABEL_6;
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v10)
      {
LABEL_6:
        v20 = MEMORY[0x24BEE4AF8];
        sub_249DB677C(0, v10 & ~(v10 >> 63), 0);
        if ((v10 & 0x8000000000000000) == 0)
        {
          v11 = 0;
          v12 = v20;
          do
          {
            if ((v9 & 0xC000000000000001) != 0)
              v13 = (id)MEMORY[0x24BD056B8](v11, v9);
            else
              v13 = *(id *)(v9 + 8 * v11 + 32);
            v14 = v13;
            v15 = objc_msgSend(v13, sel_integerValue);

            v17 = *(_QWORD *)(v20 + 16);
            v16 = *(_QWORD *)(v20 + 24);
            if (v17 >= v16 >> 1)
              sub_249DB677C(v16 > 1, v17 + 1, 1);
            ++v11;
            *(_QWORD *)(v20 + 16) = v17 + 1;
            *(_QWORD *)(v20 + 8 * v17 + 32) = v15;
          }
          while (v10 != v11);
          swift_bridgeObjectRelease();
          return v12;
        }
        __break(1u);
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
LABEL_20:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_249EF026C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  id v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t inited;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t *v90;
  void *v91;
  id v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(void *@<X0>, uint64_t *@<X8>);
  uint64_t v112;
  uint64_t v113;

  v5 = v3;
  v98 = a1;
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFC0);
  v100 = *(_QWORD *)(v96 - 8);
  v8 = MEMORY[0x24BDAC7A8](v96);
  v95 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v94 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v107 = *(_QWORD *)(v12 - 8);
  v108 = (uint64_t *)v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v103 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v94 - v15;
  v17 = *(void **)(v3[5] + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  v110 = v3[5];
  v111 = sub_249ECEF00;
  v112 = 0;
  v18 = v17;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1E0);
  sub_249F1F874();
  v104 = v4;
  if (v4)
    goto LABEL_45;

  v19 = (uint64_t *)v113;
  v18 = v5;
  v20 = sub_249ECE2D8(7562345, 0xE300000000000000);
  if (!v19[2])
    goto LABEL_38;
  v18 = v19;
  v22 = sub_249DB7D8C(v20, v21);
  if ((v23 & 1) == 0)
    goto LABEL_38;
  v97 = a2;
  v24 = *(id *)(v19[7] + 8 * v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v24, sel_name);

  v101 = sub_249F1F328();
  v102 = v26;

  sub_249EEFFB4();
  v27 = *(_QWORD *)(a3 + 16);
  v28 = MEMORY[0x24BEE4AF8];
  v106 = v16;
  v109 = v11;
  v99 = v27;
  if (v27)
  {
    v29 = v5;
    v113 = MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v27, 0);
    v28 = v113;
    v30 = (uint64_t *)(a3 + 32);
    v31 = *(_QWORD *)(v113 + 16);
    do
    {
      v33 = *v30++;
      v32 = v33;
      v113 = v28;
      v34 = *(_QWORD *)(v28 + 24);
      if (v31 >= v34 >> 1)
      {
        sub_249EB5D34(v34 > 1, v31 + 1, 1);
        v28 = v113;
      }
      *(_QWORD *)(v28 + 16) = v31 + 1;
      *(float *)(v28 + 4 * v31++ + 32) = (float)v32;
      --v27;
    }
    while (v27);
    v16 = v106;
    v5 = v29;
    v11 = v109;
  }
  v113 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
  v35 = sub_249F1EFEC();
  MEMORY[0x24BDAC7A8](v35);
  *(&v94 - 4) = v36;
  *(&v94 - 3) = (uint64_t)sub_249ECEF00;
  *(&v94 - 2) = 0;
  v18 = (uint64_t *)v37;
  v38 = v104;
  sub_249F1F874();
  if (v38)
    goto LABEL_45;

  v39 = v113;
  v40 = sub_249ECE2D8(0x6B73616D5F736469, 0xE800000000000000);
  if (!*(_QWORD *)(v39 + 16) || (sub_249DB7D8C(v40, v41), (v42 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249F21770;
    v66 = v102;
    *(_QWORD *)(inited + 32) = v101;
    *(_QWORD *)(inited + 40) = v66;
    v67 = sub_249D9D9F4(0, &qword_2578DDE20);
    (*(void (**)(char *, char *, uint64_t *))(v107 + 16))(v103, v16, v108);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    v68 = sub_249F1F7FC();
    *(_QWORD *)(inited + 72) = v67;
    *(_QWORD *)(inited + 48) = v68;
    sub_249DAE8D4(inited);
    objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v69 = sub_249EFD4E8();
    v70 = v69;
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  v43 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v43);
  *(&v94 - 4) = v44;
  *(&v94 - 3) = (uint64_t)sub_249ECEF00;
  *(&v94 - 2) = 0;
  v46 = v45;
  sub_249F1F874();
  v105 = 0;

  v47 = (uint64_t *)v113;
  v18 = v5;
  v48 = sub_249ECE2D8(0x6B73616D5F736469, 0xE800000000000000);
  if (!v47[2] || (v18 = v47, v50 = sub_249DB7D8C(v48, v49), (v51 & 1) == 0))
  {
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_40;
  }
  v52 = *(id *)(v47[7] + 8 * v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = (uint64_t *)objc_msgSend(v52, sel_multiArrayConstraint);

  if (!v18)
  {
LABEL_44:
    __break(1u);
LABEL_45:

    swift_unexpectedError();
    __break(1u);
    goto LABEL_46;
  }
  v104 = v5;
  v53 = objc_msgSend(v18, sel_shape);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578D9630);
  v54 = sub_249F1F544();

  v55 = v100;
  if (!(v54 >> 62))
  {
    v56 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
    v57 = v99;
    if (v56)
      goto LABEL_18;
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v56 = sub_249F1FBEC();
  swift_bridgeObjectRelease();
  v57 = v99;
  if (!v56)
    goto LABEL_29;
LABEL_18:
  v113 = MEMORY[0x24BEE4AF8];
  v18 = &v113;
  sub_249DB677C(0, v56 & ~(v56 >> 63), 0);
  if (v56 < 0)
  {
    __break(1u);
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_39;
  }
  v58 = 0;
  v59 = v113;
  do
  {
    if ((v54 & 0xC000000000000001) != 0)
      v60 = (id)MEMORY[0x24BD056B8](v58, v54);
    else
      v60 = *(id *)(v54 + 8 * v58 + 32);
    v61 = v60;
    v62 = objc_msgSend(v60, sel_integerValue);

    v113 = v59;
    v64 = *(_QWORD *)(v59 + 16);
    v63 = *(_QWORD *)(v59 + 24);
    if (v64 >= v63 >> 1)
    {
      sub_249DB677C(v63 > 1, v64 + 1, 1);
      v59 = v113;
    }
    ++v58;
    *(_QWORD *)(v59 + 16) = v64 + 1;
    *(_QWORD *)(v59 + 8 * v64 + 32) = v62;
    v11 = v109;
  }
  while (v56 != v58);
  swift_bridgeObjectRelease();
  v57 = v99;
  v55 = v100;
LABEL_30:
  v113 = sub_249EF899C(1u, v57);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFD0);
  sub_249DDFC68(&qword_2578DDFD8, &qword_2578DDFD0, MEMORY[0x24BEE12C8]);
  sub_249F1EFEC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
  v71 = swift_initStackObject();
  *(_OWORD *)(v71 + 16) = xmmword_249F21910;
  v72 = v102;
  *(_QWORD *)(v71 + 32) = v101;
  *(_QWORD *)(v71 + 40) = v72;
  v73 = sub_249D9D9F4(0, &qword_2578DDE20);
  (*(void (**)(char *, char *, uint64_t *))(v107 + 16))(v103, v106, v108);
  v74 = MEMORY[0x24BDBFCD0];
  sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
  v75 = sub_249F1F7FC();
  *(_QWORD *)(v71 + 72) = v73;
  *(_QWORD *)(v71 + 48) = v75;
  *(_QWORD *)(v71 + 80) = sub_249ECE2D8(0x6B73616D5F736469, 0xE800000000000000);
  *(_QWORD *)(v71 + 88) = v76;
  v77 = v96;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v95, v11, v96);
  sub_249DDFC68(&qword_2578DDFE8, &qword_2578DDFC0, v74);
  v78 = sub_249F1F7FC();
  *(_QWORD *)(v71 + 120) = v73;
  *(_QWORD *)(v71 + 96) = v78;
  sub_249DAE8D4(v71);
  v79 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
  v80 = v105;
  v81 = sub_249EFD4E8();
  if (!v80)
  {
    v70 = v81;
    v69 = (id)(*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v11, v77);
LABEL_32:
    v82 = MEMORY[0x24BDAC7A8](v69);
    *(&v94 - 2) = (uint64_t)v70;
    MEMORY[0x24BDAC7A8](v82);
    *(&v94 - 4) = v83;
    *(&v94 - 3) = (uint64_t)sub_249EBDA9C;
    *(&v94 - 2) = v84;
    v86 = v85;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    sub_249F1F874();

    v87 = (void *)v113;
    sub_249ECE2D8(0x655F6E6564646968, 0xED0000736465626DLL);
    v88 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v89 = objc_msgSend(v87, sel_featureValueForName_, v88);

    sub_249ECE2D8(0x6F5F64656C6F6F70, 0xEE00737475707475);
    v18 = v90;
    v91 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v92 = objc_msgSend(v87, sel_featureValueForName_, v91);

    if (v89)
    {
      if (objc_msgSend(v89, sel_multiArrayValue))
      {
        sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
        v18 = v108;
        sub_249F1F04C();
        if (v92)
        {
          if (objc_msgSend(v92, sel_multiArrayValue))
          {
            v93 = v108;
            sub_249F1F04C();

            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t *))(v107 + 8))(v106, v93);
            return;
          }
          goto LABEL_43;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_46:
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_249EF0E70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return TextEncoderXL.encode(_:)(a1, a2, a3);
}

void sub_249EF0E88()
{
  ManagedMLModel.loadResources()();
}

void sub_249EF0EA8()
{
  ManagedMLModel.unloadResources()();
}

uint64_t destroy for TextEncoderXL(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t initializeWithCopy for TextEncoderXL(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for TextEncoderXL(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TextEncoderXL(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEncoderXL(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextEncoderXL(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextEncoderXL()
{
  return &type metadata for TextEncoderXL;
}

uint64_t sub_249EF1058@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[7];
  _OWORD v27[2];
  _OWORD v28[9];
  __int128 v29;
  _OWORD v30[7];
  _OWORD v31[2];
  _BYTE v32[152];
  uint64_t v33;

  v5 = sub_249F1F37C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16) && (v9 = sub_249DB7D8C(6775156, 0xE300000000000000), (v10 & 1) != 0))
    {
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v9);
      v12 = *v11;
      v13 = v11[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    sub_249ED70DC((uint64_t)v32);
    if (*(_QWORD *)(a1 + 16) && (sub_249DB7D8C(0x6E695F6C65646F6DLL, 0xEB00000000736F66), (v14 & 1) != 0))
    {
      v25 = v13;
      v33 = v12;
      swift_bridgeObjectRetain();
      sub_249F1F364();
      v24 = sub_249F1F334();
      v16 = v15;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if (v16 >> 60 == 15)
      {
        sub_249ED7644((uint64_t)v32, (uint64_t)v30);
        v12 = v33;
        v13 = v25;
      }
      else
      {
        sub_249F1E44C();
        swift_allocObject();
        sub_249F1E440();
        sub_249EF6AF0();
        v23 = v24;
        sub_249F1E428();
        v13 = v25;
        if (v2)
        {

          sub_249DD3B94(v23, v16);
          swift_release();
          sub_249ED7644((uint64_t)v32, (uint64_t)v28);
        }
        else
        {
          sub_249DD3B94(v23, v16);
          swift_release();
          v26[6] = v30[6];
          v27[0] = v31[0];
          *(_OWORD *)((char *)v27 + 13) = *(_OWORD *)((char *)v31 + 13);
          v26[2] = v30[2];
          v26[3] = v30[3];
          v26[4] = v30[4];
          v26[5] = v30[5];
          v26[0] = v30[0];
          v26[1] = v30[1];
          nullsub_1(v26);
          sub_249ED7644((uint64_t)v26, (uint64_t)v28);
        }
        sub_249ED7644((uint64_t)v28, (uint64_t)v30);
        v12 = v33;
      }
    }
    else
    {
      sub_249ED7644((uint64_t)v32, (uint64_t)v30);
    }
    result = sub_249ED7644((uint64_t)v30, (uint64_t)v28);
    *(_QWORD *)&v29 = v12;
    *((_QWORD *)&v29 + 1) = v13;
    v18 = v28[7];
    a2[6] = v28[6];
    a2[7] = v18;
    v19 = v28[3];
    a2[2] = v28[2];
    a2[3] = v19;
    v20 = v28[5];
    a2[4] = v28[4];
    a2[5] = v20;
    v21 = v28[1];
    *a2 = v28[0];
    a2[1] = v21;
    v22 = v29;
    a2[8] = v28[8];
    a2[9] = v22;
  }
  else
  {
    type metadata accessor for AppleDiffusionMetadataError();
    sub_249EF6AA8();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_249EF13A0()
{
  _BYTE *v0;

  if (*v0)
    return 1701667182;
  else
    return 0x6974636964657270;
}

uint64_t sub_249EF13E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EF2724(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EF1404()
{
  sub_249EF6954();
  return sub_249F20024();
}

uint64_t sub_249EF142C()
{
  sub_249EF6954();
  return sub_249F20030();
}

uint64_t sub_249EF1454@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_249EF2828(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

DiffusionBase::AppleDiffusionModelMetadata::ReferenceImageInfo::ConditioningModelVersion_optional __swiftcall AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  DiffusionBase::AppleDiffusionModelMetadata::ReferenceImageInfo::ConditioningModelVersion_optional v2;

  v1 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = DiffusionBase_AppleDiffusionModelMetadata_ReferenceImageInfo_ConditioningModelVersion_MD4;
  else
    v2.value = DiffusionBase_AppleDiffusionModelMetadata_ReferenceImageInfo_ConditioningModelVersion_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 3425357;
  else
    return 3359821;
}

uint64_t sub_249EF14EC(char *a1, char *a2)
{
  return sub_249F13AFC(*a1, *a2);
}

uint64_t sub_249EF14F8()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF1558()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EF158C()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF15E8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_249F1FC4C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_249EF1644(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 3425357;
  else
    v2 = 3359821;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_249EF1668()
{
  sub_249EF6A20();
  return sub_249F1F514();
}

uint64_t AppleDiffusionModelMetadata.ReferenceImageInfo.conditioning_model_version.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_249EF16CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_249EF1704 + 4 * byte_249F31E70[a1]))(0xD00000000000001ALL, 0x8000000249F398B0);
}

uint64_t sub_249EF1704(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_249EF177C()
{
  unsigned __int8 *v0;

  return sub_249EF16CC(*v0);
}

uint64_t sub_249EF1784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EF29D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EF17A8()
{
  sub_249EF6EB0();
  return sub_249F20024();
}

uint64_t sub_249EF17D0()
{
  sub_249EF6EB0();
  return sub_249F20030();
}

double AppleDiffusionModelMetadata.ReferenceImageInfo.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_249EF2D00(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

double sub_249EF1838@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_249EF2D00(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

BOOL AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion.init(rawValue:)()
{
  uint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion.rawValue.getter()
{
  return 3228749;
}

uint64_t sub_249EF18CC()
{
  sub_249F1FF64();
  sub_249F1F40C();
  return sub_249F1FFA0();
}

uint64_t sub_249EF1914()
{
  return sub_249F1F40C();
}

uint64_t sub_249EF1924()
{
  sub_249F1FF64();
  sub_249F1F40C();
  return sub_249F1FFA0();
}

uint64_t sub_249EF1968@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_249F1FC4C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_249EF19B8(_QWORD *a1@<X8>)
{
  *a1 = 3228749;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_249EF19CC()
{
  sub_249EF69DC();
  return sub_249F1F514();
}

uint64_t AppleDiffusionModelMetadata.PromptInfo.template.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t AppleDiffusionModelMetadata.PromptInfo.conditioning_model_version.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t sub_249EF1A60()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001ALL;
  else
    return 0x6574616C706D6574;
}

uint64_t sub_249EF1AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EF31B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EF1AC4()
{
  sub_249EF6E28();
  return sub_249F20024();
}

uint64_t sub_249EF1AEC()
{
  sub_249EF6E28();
  return sub_249F20030();
}

uint64_t AppleDiffusionModelMetadata.PromptInfo.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_249EF32A0(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_249EF1B38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_249EF32A0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t AppleDiffusionModelMetadata.LoraInfo.LoraType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249EF1B98 + 4 * byte_249F31E79[a1]))(1936876912, 0xE400000000000000);
}

uint64_t sub_249EF1B98()
{
  return 0x6F6974616D696E61;
}

uint64_t sub_249EF1BB4()
{
  return 0x7472615F656E696CLL;
}

uint64_t sub_249EF1BCC()
{
  return 0x696A6F6D65;
}

uint64_t sub_249EF1BE0()
{
  return 7168876;
}

uint64_t sub_249EF1BF0()
{
  return 0x61727473756C6C69;
}

uint64_t sub_249EF1C10()
{
  return 0x686374656B73;
}

void sub_249EF1C24(char *a1)
{
  sub_249F13914(*a1);
}

void sub_249EF1C30()
{
  char *v0;

  sub_249EF8368(0, *v0);
}

void sub_249EF1C3C()
{
  __asm { BR              X10 }
}

uint64_t sub_249EF1C70()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

void sub_249EF1D10(uint64_t a1)
{
  char *v1;

  sub_249EF8368(a1, *v1);
}

uint64_t sub_249EF1D18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase05AppleA13ModelMetadataV8LoraInfoV0F4TypeO8rawValueAGSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_249EF1D44()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_249EF1D6C + 4 * byte_249F31E87[*v0]))();
}

void sub_249EF1D6C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6974616D696E61;
  a1[1] = 0xE90000000000006ELL;
}

void sub_249EF1D8C(_QWORD *a1@<X8>)
{
  *a1 = 0x7472615F656E696CLL;
  a1[1] = 0xE800000000000000;
}

void sub_249EF1DA8(_QWORD *a1@<X8>)
{
  *a1 = 0x696A6F6D65;
  a1[1] = 0xE500000000000000;
}

void sub_249EF1DC0(_QWORD *a1@<X8>)
{
  *a1 = 7168876;
  a1[1] = 0xE300000000000000;
}

void sub_249EF1DD4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "illustration");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_249EF1DF8(_QWORD *a1@<X8>)
{
  *a1 = 0x686374656B73;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_249EF1E10()
{
  sub_249EF6998();
  return sub_249F1F514();
}

uint64_t sub_249EF1E70()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1667592307;
  if (*v0 != 1)
    v1 = 0x656C616373;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_249EF1EB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EF3484(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EF1EDC()
{
  sub_249EF6DA0();
  return sub_249F20024();
}

uint64_t sub_249EF1F04()
{
  sub_249EF6DA0();
  return sub_249F20030();
}

uint64_t AppleDiffusionModelMetadata.LoraInfo.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned int v3;

  LODWORD(result) = sub_249EF35B0(a1);
  if (v1)
    return v3;
  else
    return result;
}

uint64_t sub_249EF1F68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_249EF35B0(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = v7;
    *(_BYTE *)(a2 + 28) = BYTE4(v7) & 1;
  }
  return result;
}

uint64_t sub_249EF1FA4()
{
  return 0x65636E6164697567;
}

uint64_t sub_249EF1FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65636E6164697567 && a2 == 0xEE00656C6163735FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_249F1FE2C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_249EF2080()
{
  sub_249EF3790();
  return sub_249F20024();
}

uint64_t sub_249EF20A8()
{
  sub_249EF3790();
  return sub_249F20030();
}

float AppleDiffusionModelMetadata.LCMParameters.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  float v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE840);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF3790();
  sub_249F1FFF4();
  if (!v1)
  {
    sub_249F1FCE8();
    v2 = v8;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

uint64_t sub_249EF21DC@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE840);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF3790();
  sub_249F1FFF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_249F1FCE8();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v10;
  return result;
}

uint64_t AppleDiffusionModelMetadata.reference_image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249EF37D4(v1 + 32, a1);
}

uint64_t AppleDiffusionModelMetadata.loras.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionModelMetadata.prompt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  sub_249E5DA84(v1, *(_QWORD *)(v0 + 112));
  return v1;
}

unint64_t AppleDiffusionModelMetadata.lcm.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 136) | ((unint64_t)*(unsigned __int8 *)(v0 + 140) << 32);
}

uint64_t sub_249EF236C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249EF23A0 + 4 * byte_249F31E8E[*v0]))(0x656C756465686373, 0xE900000000000072);
}

uint64_t sub_249EF23A0()
{
  return 0x636E657265666572;
}

uint64_t sub_249EF23C4()
{
  return 0x7361726F6CLL;
}

uint64_t sub_249EF23D8()
{
  return 0x74706D6F7270;
}

uint64_t sub_249EF23EC()
{
  return 0x5F656C626174756DLL;
}

uint64_t sub_249EF240C()
{
  return 7168876;
}

uint64_t sub_249EF241C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EF381C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EF2440()
{
  sub_249EF6BA4();
  return sub_249F20024();
}

uint64_t sub_249EF2468()
{
  sub_249EF6BA4();
  return sub_249F20030();
}

__n128 AppleDiffusionModelMetadata.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[7];
  _OWORD v9[2];

  sub_249EF3AC4(a1, v8);
  if (!v2)
  {
    v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 125) = *(_OWORD *)((char *)v9 + 13);
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

__n128 sub_249EF24E8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[7];
  _OWORD v9[2];

  sub_249EF3AC4(a1, v8);
  if (!v2)
  {
    v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 125) = *(_OWORD *)((char *)v9 + 13);
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_249EF2540()
{
  _BYTE *v0;

  if (*v0)
    return 6775156;
  else
    return 0x6E695F6C65646F6DLL;
}

uint64_t sub_249EF257C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_249EF4220(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_249EF25A0()
{
  sub_249EF6A64();
  return sub_249F20024();
}

uint64_t sub_249EF25C8()
{
  sub_249EF6A64();
  return sub_249F20030();
}

double CoreMLUserMetadata.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  result = sub_249EF4318(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

double CoreMLUserMetadata.init(tag:model_infos:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _BYTE v13[144];
  _BYTE v14[144];
  _OWORD v15[9];
  __int128 v16;

  sub_249ED7644(a3, (uint64_t)v13);
  sub_249ED7644((uint64_t)v13, (uint64_t)v14);
  sub_249ED7644((uint64_t)v14, (uint64_t)v15);
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  v7 = v15[7];
  a4[6] = v15[6];
  a4[7] = v7;
  v8 = v16;
  a4[8] = v15[8];
  a4[9] = v8;
  v9 = v15[3];
  a4[2] = v15[2];
  a4[3] = v9;
  v10 = v15[5];
  a4[4] = v15[4];
  a4[5] = v10;
  result = *(double *)v15;
  v12 = v15[1];
  *a4 = v15[0];
  a4[1] = v12;
  return result;
}

double sub_249EF26CC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[10];

  result = sub_249EF4318(a1, v10);
  if (!v2)
  {
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    result = *(double *)v10;
    v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_249EF2724(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6974636964657270 && a2 == 0xEF657079745F6E6FLL;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_249EF2828(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE930);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF6954();
  sub_249F1FFF4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = sub_249F1FC7C();
    v10 = 1;
    swift_bridgeObjectRetain();
    sub_249F1FC7C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_249EF29D4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249F398B0 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000249F34760 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000249F346B0 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000249F34730 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000249F34680 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249F398D0 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249F398F0 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249F39910 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249F39930)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v5 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_249EF2D00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE9F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF6EB0();
  sub_249F1FFF4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v32 = 0;
  sub_249EF6EF4();
  sub_249F1FCB8();
  v9 = v30;
  LOBYTE(v30) = 1;
  sub_249F1FCE8();
  v11 = v10;
  v31 = v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
  v32 = 2;
  v13 = sub_249EF6F38(&qword_2578DEA08, &qword_2578DDE10, MEMORY[0x24BEE1520]);
  sub_249F1FD00();
  v29 = v13;
  v14 = v30;
  LOBYTE(v30) = 3;
  swift_bridgeObjectRetain();
  sub_249F1FCE8();
  v16 = v15;
  v28 = v14;
  v32 = 4;
  sub_249F1FD00();
  v27 = v12;
  v17 = v30;
  LOBYTE(v30) = 5;
  swift_bridgeObjectRetain();
  v18 = sub_249F1FCA0();
  v32 = 6;
  sub_249F1FCB8();
  v26 = v18;
  v19 = v30;
  LOBYTE(v30) = 7;
  swift_bridgeObjectRetain();
  v25 = sub_249F1FCA0();
  v32 = 8;
  sub_249F1FCB8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = v30;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v28;
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v31;
  *(_DWORD *)(a2 + 4) = v11;
  *(_QWORD *)(a2 + 8) = v21;
  *(_DWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  v23 = BYTE4(v26);
  *(_DWORD *)(a2 + 32) = v26;
  *(_BYTE *)(a2 + 36) = v23 & 1;
  *(_QWORD *)(a2 + 40) = v19;
  v24 = BYTE4(v25);
  *(_DWORD *)(a2 + 48) = v25;
  *(_BYTE *)(a2 + 52) = v24 & 1;
  *(_QWORD *)(a2 + 56) = v20;
  return result;
}

uint64_t sub_249EF31B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000249F398B0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_249EF32A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE9D8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF6E28();
  sub_249F1FFF4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    v7 = sub_249F1FC7C();
    v9[13] = 1;
    sub_249EF6E6C();
    swift_bridgeObjectRetain();
    sub_249F1FCB8();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t _s13DiffusionBase05AppleA13ModelMetadataV8LoraInfoV0F4TypeO8rawValueAGSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_249EF3484(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1667592307 && a2 == 0xE400000000000000 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_249EF35B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE9C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF6DA0();
  sub_249F1FFF4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v12 = 0;
    sub_249EF6DE4();
    sub_249F1FCB8();
    v7 = v13;
    v11 = 1;
    sub_249F1FC7C();
    v10 = 2;
    swift_bridgeObjectRetain();
    sub_249F1FCA0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_249EF3790()
{
  unint64_t result;

  result = qword_2578DE848;
  if (!qword_2578DE848)
  {
    result = MEMORY[0x24BD06528](&unk_249F3243C, &type metadata for AppleDiffusionModelMetadata.LCMParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE848);
  }
  return result;
}

uint64_t sub_249EF37D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_249EF381C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C756465686373 && a2 == 0xE900000000000072;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEF6567616D695F65 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7361726F6CLL && a2 == 0xE500000000000000 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5F656C626174756DLL && a2 == 0xEC0000007379656BLL || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7168876 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t *sub_249EF3AC4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *result;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  _OWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  int v79;
  char v80;
  int v81;
  char v82;
  char v83;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE978);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_249EF6BA4();
  sub_249F1FFF4();
  if (v2)
    return (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  v51 = a2;
  v52 = v6;
  LOBYTE(v54) = 0;
  sub_249EF6BE8();
  sub_249F1FCB8();
  v10 = v62;
  v11 = v63;
  v12 = v64;
  LOBYTE(v54) = 1;
  sub_249E930E8(v62, v63);
  sub_249EF6C2C();
  sub_249F1FCB8();
  v47 = v10;
  v41 = v12;
  v42 = v11;
  v40 = *((_QWORD *)&v12 + 1);
  v13 = v62;
  v14 = v63;
  v50 = v64;
  v49 = v65;
  v15 = v67;
  v44 = v66;
  v16 = *((_QWORD *)&v67 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE998);
  LOBYTE(v54) = 2;
  v48 = v13;
  v45 = v15;
  v46 = v14;
  v43 = v16;
  sub_249E9311C(v13, v14);
  sub_249EF6C70();
  sub_249F1FCB8();
  v17 = v62;
  LOBYTE(v54) = 3;
  sub_249EF6D18();
  swift_bridgeObjectRetain();
  v38 = 0;
  sub_249F1FCB8();
  v39 = v17;
  v18 = v62;
  v19 = v63;
  LODWORD(v11) = v64;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8E30);
  LOBYTE(v54) = 4;
  sub_249E5DA84(v18, v19);
  sub_249EF6F38(&qword_2578DC548, &qword_2578D8E30, MEMORY[0x24BEE0D38]);
  sub_249F1FCB8();
  v81 = v11;
  v36 = v18;
  v37 = v19;
  v20 = v62;
  v83 = 5;
  sub_249EF6D5C();
  swift_bridgeObjectRetain();
  sub_249F1FCB8();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v8, v5);
  LODWORD(v52) = v79;
  v82 = v80;
  *(_QWORD *)&v54 = v47;
  *((_QWORD *)&v54 + 1) = v42;
  *(_QWORD *)&v55 = v41;
  *((_QWORD *)&v55 + 1) = v40;
  *(_QWORD *)&v56 = v48;
  *((_QWORD *)&v56 + 1) = v46;
  v57 = v50;
  *(_QWORD *)&v58 = v49;
  *((_QWORD *)&v58 + 1) = v44;
  *(_QWORD *)&v59 = v45;
  *((_QWORD *)&v59 + 1) = v43;
  v22 = v36;
  v21 = v37;
  *(_QWORD *)&v60 = v39;
  *((_QWORD *)&v60 + 1) = v36;
  *(_QWORD *)&v61[0] = v37;
  BYTE8(v61[0]) = v11;
  *(_QWORD *)&v61[1] = v20;
  DWORD2(v61[1]) = v79;
  BYTE12(v61[1]) = v80;
  sub_249E93024((uint64_t *)&v54);
  swift_bridgeObjectRelease();
  sub_249DFBBC4(v22, v21);
  swift_bridgeObjectRelease();
  v24 = v45;
  v23 = v46;
  sub_249E93264(v48, v46);
  v25 = v47;
  v26 = v41;
  v27 = v42;
  v28 = v40;
  sub_249E93230(v47, v42);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  v62 = v25;
  v63 = v27;
  *(_QWORD *)&v64 = v26;
  *((_QWORD *)&v64 + 1) = v28;
  v65 = v48;
  v66 = v23;
  v67 = v50;
  v68 = v49;
  v69 = v44;
  v70 = v24;
  v71 = v43;
  v72 = v39;
  v73 = v36;
  v74 = v37;
  v75 = v81;
  v76 = v20;
  v77 = v52;
  v78 = v82;
  result = sub_249E9316C(&v62);
  v30 = v61[0];
  v31 = v51;
  v51[6] = v60;
  v31[7] = v30;
  *(_OWORD *)((char *)v31 + 125) = *(_OWORD *)((char *)v61 + 13);
  v32 = v57;
  v31[2] = v56;
  v31[3] = v32;
  v33 = v59;
  v31[4] = v58;
  v31[5] = v33;
  v34 = v55;
  *v31 = v54;
  v31[1] = v34;
  return result;
}

uint64_t sub_249EF4220(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E695F6C65646F6DLL && a2 == 0xEB00000000736F66;
  if (v2 || (sub_249F1FE2C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6775156 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_249EF4318@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[7];
  _OWORD v36[2];
  _OWORD v37[9];
  __int128 v38;
  _QWORD v39[35];
  _OWORD v40[2];
  _OWORD v41[9];
  __int128 v42;
  uint64_t v43;

  v32 = a2;
  v3 = sub_249F1F37C();
  v4 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  v34 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE958);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249EF6A64();
  v11 = v43;
  sub_249F1FFF4();
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v12 = v6;
    v43 = v8;
    LOBYTE(v39[0]) = 1;
    v13 = v7;
    *(_QWORD *)&v42 = sub_249F1FCC4();
    *((_QWORD *)&v42 + 1) = v15;
    LOBYTE(v39[0]) = 0;
    v16 = v42;
    v17 = v15;
    swift_bridgeObjectRetain();
    sub_249F1FCC4();
    v29 = v16;
    v30 = v10;
    v31 = v17;
    v18 = v12;
    sub_249F1F364();
    v19 = sub_249F1F334();
    v21 = v20;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v33);
    if (v21 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for AppleDiffusionMetadataError();
      sub_249EF6AA8();
      swift_allocError();
      *v22 = 0x6E695F6C65646F6DLL;
      v22[1] = 0xEB00000000736F66;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249F1E44C();
      swift_allocObject();
      sub_249F1E440();
      sub_249EF6AF0();
      sub_249F1E428();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v13);
      swift_release();
      sub_249DD3B94(v19, v21);
      v35[6] = *(_OWORD *)&v39[33];
      v36[0] = v40[0];
      *(_OWORD *)((char *)v36 + 13) = *(_OWORD *)((char *)v40 + 13);
      v35[2] = *(_OWORD *)&v39[25];
      v35[3] = *(_OWORD *)&v39[27];
      v35[4] = *(_OWORD *)&v39[29];
      v35[5] = *(_OWORD *)&v39[31];
      v35[0] = *(_OWORD *)&v39[21];
      v35[1] = *(_OWORD *)&v39[23];
      nullsub_1(v35);
      sub_249ED7644((uint64_t)v35, (uint64_t)v41);
      sub_249ED7644((uint64_t)v35, (uint64_t)v37);
      *(_QWORD *)&v38 = v29;
      *((_QWORD *)&v38 + 1) = v31;
      sub_249EF6B34((uint64_t *)v37);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      *(_OWORD *)&v39[12] = v41[6];
      *(_OWORD *)&v39[14] = v41[7];
      *(_OWORD *)&v39[16] = v41[8];
      *(_OWORD *)&v39[18] = v42;
      *(_OWORD *)&v39[4] = v41[2];
      *(_OWORD *)&v39[6] = v41[3];
      *(_OWORD *)&v39[8] = v41[4];
      *(_OWORD *)&v39[10] = v41[5];
      *(_OWORD *)v39 = v41[0];
      *(_OWORD *)&v39[2] = v41[1];
      sub_249ED768C(v39);
      v23 = v37[7];
      v24 = v32;
      v32[6] = v37[6];
      v24[7] = v23;
      v25 = v38;
      v24[8] = v37[8];
      v24[9] = v25;
      v26 = v37[3];
      v24[2] = v37[2];
      v24[3] = v26;
      v27 = v37[5];
      v24[4] = v37[4];
      v24[5] = v27;
      result = *(double *)v37;
      v28 = v37[1];
      *v24 = v37[0];
      v24[1] = v28;
    }
  }
  return result;
}

unint64_t sub_249EF476C()
{
  unint64_t result;

  result = qword_2578DE858;
  if (!qword_2578DE858)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion);
    atomic_store(result, (unint64_t *)&qword_2578DE858);
  }
  return result;
}

unint64_t sub_249EF47B4()
{
  unint64_t result;

  result = qword_2578DE860;
  if (!qword_2578DE860)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion, &type metadata for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion);
    atomic_store(result, (unint64_t *)&qword_2578DE860);
  }
  return result;
}

unint64_t sub_249EF47FC()
{
  unint64_t result;

  result = qword_2578DE868;
  if (!qword_2578DE868)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.LoraInfo.LoraType, &type metadata for AppleDiffusionModelMetadata.LoraInfo.LoraType);
    atomic_store(result, (unint64_t *)&qword_2578DE868);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppleDiffusionMetadataError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = sub_249F1E7F4();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for AppleDiffusionMetadataError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_249F1E7F4();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for AppleDiffusionMetadataError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = sub_249F1E7F4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for AppleDiffusionMetadataError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_249EF4AF0((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_249F1E7F4();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_249EF4AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleDiffusionMetadataError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AppleDiffusionMetadataError()
{
  uint64_t result;

  result = qword_2578DE8E0;
  if (!qword_2578DE8E0)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for AppleDiffusionMetadataError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_249F1E7F4();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AppleDiffusionMetadataError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_249EF4AF0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_249F1E7F4();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_249EF4C90()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1E7F4();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for AppleDiffusionModelMetadata(_QWORD *a1)
{
  if (a1[1] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[14] != 1)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppleDiffusionModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
    {
LABEL_3:
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_QWORD *)(a1 + 40) = v6;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
      goto LABEL_3;
  }
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
LABEL_6:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v10;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  int v25;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v4 == 1)
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 == 1)
  {
    sub_249EF51F0(a1);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v7 = (_OWORD *)(a1 + 32);
  v8 = (__int128 *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v9)
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10 = *(_DWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
      *(_DWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11 = *(_DWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_249EF5220(a1 + 32);
      v14 = *(_OWORD *)(a2 + 80);
      v16 = *v8;
      v15 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v14;
      *v7 = v16;
      *(_OWORD *)(a1 + 48) = v15;
    }
  }
  else if (v9)
  {
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v12 = *(_DWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
    *(_DWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v13 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
    *(_DWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v8;
    v18 = *(_OWORD *)(a2 + 48);
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *v7 = v17;
    *(_OWORD *)(a1 + 48) = v18;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = (__int128 *)(a1 + 104);
  v21 = (__int128 *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112) == 1)
  {
    if (v22 == 1)
    {
      v23 = *v21;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *v20 = v23;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      swift_bridgeObjectRetain();
    }
  }
  else if (v22 == 1)
  {
    sub_249EF524C(a1 + 104);
    v24 = *(_BYTE *)(a2 + 120);
    *v20 = *v21;
    *(_BYTE *)(a1 + 120) = v24;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v25;
  return a1;
}

uint64_t sub_249EF51F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_249EF5220(uint64_t a1)
{
  destroy for AppleDiffusionModelMetadata.ReferenceImageInfo();
  return a1;
}

uint64_t sub_249EF524C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy141_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for AppleDiffusionModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 8) == 1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    sub_249EF51F0(a1);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_QWORD *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_249EF5220(a1 + 32);
  }
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
LABEL_11:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 112) != 1)
  {
    v10 = *(_QWORD *)(a2 + 112);
    if (v10 != 1)
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v10;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      goto LABEL_16;
    }
    sub_249EF524C(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
LABEL_16:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionModelMetadata(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 141))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 140) = 0;
    *(_DWORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 141) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 141) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata()
{
  return &type metadata for AppleDiffusionModelMetadata;
}

uint64_t destroy for AppleDiffusionModelMetadata.ReferenceImageInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppleDiffusionModelMetadata.ReferenceImageInfo(uint64_t a1, uint64_t a2)
{
  int v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionModelMetadata.ReferenceImageInfo(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppleDiffusionModelMetadata.ReferenceImageInfo(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.ReferenceImageInfo()
{
  return &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion()
{
  return &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionModelMetadata.PromptInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.PromptInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.PromptInfo()
{
  return &type metadata for AppleDiffusionModelMetadata.PromptInfo;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion()
{
  return &type metadata for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion;
}

uint64_t initializeWithCopy for AppleDiffusionModelMetadata.LoraInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionModelMetadata.LoraInfo(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v4;
  return a1;
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AppleDiffusionModelMetadata.LoraInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionModelMetadata.LoraInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 29))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.LoraInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 29) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.LoraInfo()
{
  return &type metadata for AppleDiffusionModelMetadata.LoraInfo;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionModelMetadata.LoraInfo.LoraType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.LoraInfo.LoraType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_249EF5B00 + 4 * byte_249F31E99[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_249EF5B34 + 4 * byte_249F31E94[v4]))();
}

uint64_t sub_249EF5B34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF5B3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EF5B44);
  return result;
}

uint64_t sub_249EF5B50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EF5B58);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_249EF5B5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF5B64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.LoraInfo.LoraType()
{
  return &type metadata for AppleDiffusionModelMetadata.LoraInfo.LoraType;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.LCMParameters()
{
  return &type metadata for AppleDiffusionModelMetadata.LCMParameters;
}

uint64_t destroy for CoreMLUserMetadata(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[5];
  if (v2 != 1)
  {
    if (a1[1] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (a1[14] != 1)
      swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CoreMLUserMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 != 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v9;
    v11 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_5;
LABEL_7:
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    goto LABEL_8;
  }
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  if (!v4)
    goto LABEL_7;
LABEL_5:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  if (v14 == 1)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v14;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  swift_bridgeObjectRetain();
LABEL_12:
  v15 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CoreMLUserMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  int v47;

  v4 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) == 1)
  {
    if (v4 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v7;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      v8 = *(_OWORD *)(a2 + 80);
      v9 = *(_OWORD *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 80) = v8;
      goto LABEL_37;
    }
    if (*(_QWORD *)(a2 + 8) == 1)
    {
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      if (*(_QWORD *)(a2 + 40))
      {
LABEL_8:
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        v18 = *(_DWORD *)(a2 + 64);
        *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
        *(_DWORD *)(a1 + 64) = v18;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        v19 = *(_DWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
        *(_DWORD *)(a1 + 80) = v19;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_14:
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        v25 = *(_QWORD *)(a2 + 112);
        swift_bridgeObjectRetain();
        if (v25 == 1)
        {
          v26 = *(_OWORD *)(a2 + 104);
          *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
          *(_OWORD *)(a1 + 104) = v26;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
          swift_bridgeObjectRetain();
        }
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        v28 = *(_DWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
        *(_DWORD *)(a1 + 136) = v28;
        swift_bridgeObjectRetain();
        goto LABEL_37;
      }
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(a2 + 40))
        goto LABEL_8;
    }
    v22 = *(_OWORD *)(a2 + 32);
    v23 = *(_OWORD *)(a2 + 48);
    v24 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a1 + 48) = v23;
    goto LABEL_14;
  }
  if (v4 == 1)
  {
    sub_249EF62D4((_QWORD *)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v11 = *(_OWORD *)(a2 + 64);
    v13 = *(_OWORD *)(a2 + 16);
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v12;
    v15 = *(_OWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 112);
    v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
    *(_OWORD *)(a1 + 96) = v15;
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 80) = v16;
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(a1 + 8) == 1)
    {
      if (v20 == 1)
      {
        v21 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v21;
      }
      else
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v20 == 1)
    {
      sub_249EF51F0(a1);
      v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v29 = (_OWORD *)(a1 + 32);
    v30 = (__int128 *)(a2 + 32);
    v31 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a1 + 40))
    {
      if (v31)
      {
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v32 = *(_DWORD *)(a2 + 64);
        *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
        *(_DWORD *)(a1 + 64) = v32;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v33 = *(_DWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
        *(_DWORD *)(a1 + 80) = v33;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_249EF5220(a1 + 32);
        v36 = *(_OWORD *)(a2 + 80);
        v38 = *v30;
        v37 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v36;
        *v29 = v38;
        *(_OWORD *)(a1 + 48) = v37;
      }
    }
    else if (v31)
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v34 = *(_DWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
      *(_DWORD *)(a1 + 64) = v34;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v35 = *(_DWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v35;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v39 = *v30;
      v40 = *(_OWORD *)(a2 + 48);
      v41 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v41;
      *v29 = v39;
      *(_OWORD *)(a1 + 48) = v40;
    }
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v42 = (__int128 *)(a1 + 104);
    v43 = (__int128 *)(a2 + 104);
    v44 = *(_QWORD *)(a2 + 112);
    if (*(_QWORD *)(a1 + 112) == 1)
    {
      if (v44 == 1)
      {
        v45 = *v43;
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        *v42 = v45;
      }
      else
      {
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        swift_bridgeObjectRetain();
      }
    }
    else if (v44 == 1)
    {
      sub_249EF524C(a1 + 104);
      v46 = *(_BYTE *)(a2 + 120);
      *v42 = *v43;
      *(_BYTE *)(a1 + 120) = v46;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    }
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v47 = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
    *(_DWORD *)(a1 + 136) = v47;
  }
LABEL_37:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_249EF62D4(_QWORD *a1)
{
  destroy for AppleDiffusionModelMetadata(a1);
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for CoreMLUserMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 40) == 1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 != 1)
  {
    if (*(_QWORD *)(a1 + 8) != 1)
    {
      v9 = *(_QWORD *)(a2 + 8);
      if (v9 != 1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v9;
        swift_bridgeObjectRelease();
        v11 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v11;
        swift_bridgeObjectRelease();
LABEL_10:
        if (*(_QWORD *)(a1 + 40))
        {
          if (v4)
          {
            *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
            *(_QWORD *)(a1 + 40) = v4;
            swift_bridgeObjectRelease();
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
            swift_bridgeObjectRelease();
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
            *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
            swift_bridgeObjectRelease();
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
            *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
            *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
            swift_bridgeObjectRelease();
            goto LABEL_15;
          }
          sub_249EF5220(a1 + 32);
        }
        v12 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v12;
        v13 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v13;
LABEL_15:
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 112) != 1)
        {
          v14 = *(_QWORD *)(a2 + 112);
          if (v14 != 1)
          {
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
            *(_QWORD *)(a1 + 112) = v14;
            swift_bridgeObjectRelease();
            *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
            goto LABEL_20;
          }
          sub_249EF524C(a1 + 104);
        }
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
LABEL_20:
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        swift_bridgeObjectRelease();
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
        goto LABEL_21;
      }
      sub_249EF51F0(a1);
    }
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    goto LABEL_10;
  }
  sub_249EF62D4((_QWORD *)a1);
LABEL_4:
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
LABEL_21:
  v15 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLUserMetadata(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 152);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreMLUserMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 152) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreMLUserMetadata()
{
  return &type metadata for CoreMLUserMetadata;
}

uint64_t destroy for AppleDiffusionModelMetadata.SchedulerInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AppleDiffusionModelMetadata.SchedulerInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AppleDiffusionModelMetadata.SchedulerInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AppleDiffusionModelMetadata.SchedulerInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionModelMetadata.SchedulerInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.SchedulerInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.SchedulerInfo()
{
  return &type metadata for AppleDiffusionModelMetadata.SchedulerInfo;
}

uint64_t _s13DiffusionBase27AppleDiffusionModelMetadataV10PromptInfoV24ConditioningModelVersionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_249EF6820 + 4 * byte_249F31E9E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_249EF6840 + 4 * byte_249F31EA3[v4]))();
}

_BYTE *sub_249EF6820(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_249EF6840(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EF6848(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EF6850(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EF6858(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EF6860(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.LCMParameters.CodingKeys()
{
  return &type metadata for AppleDiffusionModelMetadata.LCMParameters.CodingKeys;
}

unint64_t sub_249EF6880()
{
  unint64_t result;

  result = qword_2578DE918;
  if (!qword_2578DE918)
  {
    result = MEMORY[0x24BD06528](&unk_249F323EC, &type metadata for AppleDiffusionModelMetadata.LCMParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE918);
  }
  return result;
}

unint64_t sub_249EF68C8()
{
  unint64_t result;

  result = qword_2578DE920;
  if (!qword_2578DE920)
  {
    result = MEMORY[0x24BD06528](&unk_249F3235C, &type metadata for AppleDiffusionModelMetadata.LCMParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE920);
  }
  return result;
}

unint64_t sub_249EF6910()
{
  unint64_t result;

  result = qword_2578DE928;
  if (!qword_2578DE928)
  {
    result = MEMORY[0x24BD06528](&unk_249F32384, &type metadata for AppleDiffusionModelMetadata.LCMParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE928);
  }
  return result;
}

unint64_t sub_249EF6954()
{
  unint64_t result;

  result = qword_2578DE938;
  if (!qword_2578DE938)
  {
    result = MEMORY[0x24BD06528](&unk_249F32A6C, &type metadata for AppleDiffusionModelMetadata.SchedulerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE938);
  }
  return result;
}

unint64_t sub_249EF6998()
{
  unint64_t result;

  result = qword_2578DE940;
  if (!qword_2578DE940)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.LoraInfo.LoraType, &type metadata for AppleDiffusionModelMetadata.LoraInfo.LoraType);
    atomic_store(result, (unint64_t *)&qword_2578DE940);
  }
  return result;
}

unint64_t sub_249EF69DC()
{
  unint64_t result;

  result = qword_2578DE948;
  if (!qword_2578DE948)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion, &type metadata for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion);
    atomic_store(result, (unint64_t *)&qword_2578DE948);
  }
  return result;
}

unint64_t sub_249EF6A20()
{
  unint64_t result;

  result = qword_2578DE950;
  if (!qword_2578DE950)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion);
    atomic_store(result, (unint64_t *)&qword_2578DE950);
  }
  return result;
}

unint64_t sub_249EF6A64()
{
  unint64_t result;

  result = qword_2578DE960;
  if (!qword_2578DE960)
  {
    result = MEMORY[0x24BD06528](&unk_249F32A1C, &type metadata for CoreMLUserMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE960);
  }
  return result;
}

unint64_t sub_249EF6AA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DE968;
  if (!qword_2578DE968)
  {
    v1 = type metadata accessor for AppleDiffusionMetadataError();
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionMetadataError, v1);
    atomic_store(result, (unint64_t *)&qword_2578DE968);
  }
  return result;
}

unint64_t sub_249EF6AF0()
{
  unint64_t result;

  result = qword_2578DE970;
  if (!qword_2578DE970)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata, &type metadata for AppleDiffusionModelMetadata);
    atomic_store(result, (unint64_t *)&qword_2578DE970);
  }
  return result;
}

uint64_t *sub_249EF6B34(uint64_t *a1)
{
  sub_249EB7358(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_249EF6BA4()
{
  unint64_t result;

  result = qword_2578DE980;
  if (!qword_2578DE980)
  {
    result = MEMORY[0x24BD06528](&unk_249F329CC, &type metadata for AppleDiffusionModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE980);
  }
  return result;
}

unint64_t sub_249EF6BE8()
{
  unint64_t result;

  result = qword_2578DE988;
  if (!qword_2578DE988)
  {
    result = MEMORY[0x24BD06528](&unk_249F32414, &type metadata for AppleDiffusionModelMetadata.SchedulerInfo);
    atomic_store(result, (unint64_t *)&qword_2578DE988);
  }
  return result;
}

unint64_t sub_249EF6C2C()
{
  unint64_t result;

  result = qword_2578DE990;
  if (!qword_2578DE990)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.ReferenceImageInfo, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo);
    atomic_store(result, (unint64_t *)&qword_2578DE990);
  }
  return result;
}

unint64_t sub_249EF6C70()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2578DE9A0;
  if (!qword_2578DE9A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DE998);
    v2 = sub_249EF6CD4();
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2578DE9A0);
  }
  return result;
}

unint64_t sub_249EF6CD4()
{
  unint64_t result;

  result = qword_2578DE9A8;
  if (!qword_2578DE9A8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.LoraInfo, &type metadata for AppleDiffusionModelMetadata.LoraInfo);
    atomic_store(result, (unint64_t *)&qword_2578DE9A8);
  }
  return result;
}

unint64_t sub_249EF6D18()
{
  unint64_t result;

  result = qword_2578DE9B0;
  if (!qword_2578DE9B0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.PromptInfo, &type metadata for AppleDiffusionModelMetadata.PromptInfo);
    atomic_store(result, (unint64_t *)&qword_2578DE9B0);
  }
  return result;
}

unint64_t sub_249EF6D5C()
{
  unint64_t result;

  result = qword_2578DE9B8;
  if (!qword_2578DE9B8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.LCMParameters, &type metadata for AppleDiffusionModelMetadata.LCMParameters);
    atomic_store(result, (unint64_t *)&qword_2578DE9B8);
  }
  return result;
}

unint64_t sub_249EF6DA0()
{
  unint64_t result;

  result = qword_2578DE9C8;
  if (!qword_2578DE9C8)
  {
    result = MEMORY[0x24BD06528](&unk_249F3297C, &type metadata for AppleDiffusionModelMetadata.LoraInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE9C8);
  }
  return result;
}

unint64_t sub_249EF6DE4()
{
  unint64_t result;

  result = qword_2578DE9D0;
  if (!qword_2578DE9D0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.LoraInfo.LoraType, &type metadata for AppleDiffusionModelMetadata.LoraInfo.LoraType);
    atomic_store(result, (unint64_t *)&qword_2578DE9D0);
  }
  return result;
}

unint64_t sub_249EF6E28()
{
  unint64_t result;

  result = qword_2578DE9E0;
  if (!qword_2578DE9E0)
  {
    result = MEMORY[0x24BD06528](&unk_249F3292C, &type metadata for AppleDiffusionModelMetadata.PromptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE9E0);
  }
  return result;
}

unint64_t sub_249EF6E6C()
{
  unint64_t result;

  result = qword_2578DE9E8;
  if (!qword_2578DE9E8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion, &type metadata for AppleDiffusionModelMetadata.PromptInfo.ConditioningModelVersion);
    atomic_store(result, (unint64_t *)&qword_2578DE9E8);
  }
  return result;
}

unint64_t sub_249EF6EB0()
{
  unint64_t result;

  result = qword_2578DE9F8;
  if (!qword_2578DE9F8)
  {
    result = MEMORY[0x24BD06528](&unk_249F328DC, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DE9F8);
  }
  return result;
}

unint64_t sub_249EF6EF4()
{
  unint64_t result;

  result = qword_2578DEA00;
  if (!qword_2578DEA00)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.ConditioningModelVersion);
    atomic_store(result, (unint64_t *)&qword_2578DEA00);
  }
  return result;
}

uint64_t sub_249EF6F38(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE12D0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_249EF6FD8 + 4 * byte_249F31EAD[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_249EF700C + 4 * byte_249F31EA8[v4]))();
}

uint64_t sub_249EF700C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF7014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EF701CLL);
  return result;
}

uint64_t sub_249EF7028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EF7030);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_249EF7034(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF703C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys()
{
  return &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.PromptInfo.CodingKeys()
{
  return &type metadata for AppleDiffusionModelMetadata.PromptInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.LoraInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249EF70B4 + 4 * byte_249F31EB7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249EF70E8 + 4 * byte_249F31EB2[v4]))();
}

uint64_t sub_249EF70E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF70F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EF70F8);
  return result;
}

uint64_t sub_249EF7104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EF710CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249EF7110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF7118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.LoraInfo.CodingKeys()
{
  return &type metadata for AppleDiffusionModelMetadata.LoraInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionModelMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_249EF7180 + 4 * byte_249F31EC1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_249EF71B4 + 4 * byte_249F31EBC[v4]))();
}

uint64_t sub_249EF71B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF71BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EF71C4);
  return result;
}

uint64_t sub_249EF71D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EF71D8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_249EF71DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF71E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.CodingKeys()
{
  return &type metadata for AppleDiffusionModelMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for CoreMLUserMetadata.CodingKeys()
{
  return &type metadata for CoreMLUserMetadata.CodingKeys;
}

uint64_t _s13DiffusionBase27AppleDiffusionModelMetadataV18ReferenceImageInfoV24ConditioningModelVersionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EF725C + 4 * byte_249F31ECB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EF7290 + 4 * byte_249F31EC6[v4]))();
}

uint64_t sub_249EF7290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF7298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EF72A0);
  return result;
}

uint64_t sub_249EF72AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EF72B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EF72B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EF72C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionModelMetadata.SchedulerInfo.CodingKeys()
{
  return &type metadata for AppleDiffusionModelMetadata.SchedulerInfo.CodingKeys;
}

unint64_t sub_249EF72E0()
{
  unint64_t result;

  result = qword_2578DEA10;
  if (!qword_2578DEA10)
  {
    result = MEMORY[0x24BD06528](&unk_249F3251C, &type metadata for AppleDiffusionModelMetadata.SchedulerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA10);
  }
  return result;
}

unint64_t sub_249EF7328()
{
  unint64_t result;

  result = qword_2578DEA18;
  if (!qword_2578DEA18)
  {
    result = MEMORY[0x24BD06528](&unk_249F325D4, &type metadata for CoreMLUserMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA18);
  }
  return result;
}

unint64_t sub_249EF7370()
{
  unint64_t result;

  result = qword_2578DEA20;
  if (!qword_2578DEA20)
  {
    result = MEMORY[0x24BD06528](&unk_249F3268C, &type metadata for AppleDiffusionModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA20);
  }
  return result;
}

unint64_t sub_249EF73B8()
{
  unint64_t result;

  result = qword_2578DEA28;
  if (!qword_2578DEA28)
  {
    result = MEMORY[0x24BD06528](&unk_249F32744, &type metadata for AppleDiffusionModelMetadata.LoraInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA28);
  }
  return result;
}

unint64_t sub_249EF7400()
{
  unint64_t result;

  result = qword_2578DEA30;
  if (!qword_2578DEA30)
  {
    result = MEMORY[0x24BD06528](&unk_249F327FC, &type metadata for AppleDiffusionModelMetadata.PromptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA30);
  }
  return result;
}

unint64_t sub_249EF7448()
{
  unint64_t result;

  result = qword_2578DEA38;
  if (!qword_2578DEA38)
  {
    result = MEMORY[0x24BD06528](&unk_249F328B4, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA38);
  }
  return result;
}

unint64_t sub_249EF7490()
{
  unint64_t result;

  result = qword_2578DEA40;
  if (!qword_2578DEA40)
  {
    result = MEMORY[0x24BD06528](&unk_249F32824, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA40);
  }
  return result;
}

unint64_t sub_249EF74D8()
{
  unint64_t result;

  result = qword_2578DEA48;
  if (!qword_2578DEA48)
  {
    result = MEMORY[0x24BD06528](&unk_249F3284C, &type metadata for AppleDiffusionModelMetadata.ReferenceImageInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA48);
  }
  return result;
}

unint64_t sub_249EF7520()
{
  unint64_t result;

  result = qword_2578DEA50;
  if (!qword_2578DEA50)
  {
    result = MEMORY[0x24BD06528](&unk_249F3276C, &type metadata for AppleDiffusionModelMetadata.PromptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA50);
  }
  return result;
}

unint64_t sub_249EF7568()
{
  unint64_t result;

  result = qword_2578DEA58;
  if (!qword_2578DEA58)
  {
    result = MEMORY[0x24BD06528](&unk_249F32794, &type metadata for AppleDiffusionModelMetadata.PromptInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA58);
  }
  return result;
}

unint64_t sub_249EF75B0()
{
  unint64_t result;

  result = qword_2578DEA60;
  if (!qword_2578DEA60)
  {
    result = MEMORY[0x24BD06528](&unk_249F326B4, &type metadata for AppleDiffusionModelMetadata.LoraInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA60);
  }
  return result;
}

unint64_t sub_249EF75F8()
{
  unint64_t result;

  result = qword_2578DEA68;
  if (!qword_2578DEA68)
  {
    result = MEMORY[0x24BD06528](&unk_249F326DC, &type metadata for AppleDiffusionModelMetadata.LoraInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA68);
  }
  return result;
}

unint64_t sub_249EF7640()
{
  unint64_t result;

  result = qword_2578DEA70;
  if (!qword_2578DEA70)
  {
    result = MEMORY[0x24BD06528](&unk_249F325FC, &type metadata for AppleDiffusionModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA70);
  }
  return result;
}

unint64_t sub_249EF7688()
{
  unint64_t result;

  result = qword_2578DEA78;
  if (!qword_2578DEA78)
  {
    result = MEMORY[0x24BD06528](&unk_249F32624, &type metadata for AppleDiffusionModelMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA78);
  }
  return result;
}

unint64_t sub_249EF76D0()
{
  unint64_t result;

  result = qword_2578DEA80;
  if (!qword_2578DEA80)
  {
    result = MEMORY[0x24BD06528](&unk_249F32544, &type metadata for CoreMLUserMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA80);
  }
  return result;
}

unint64_t sub_249EF7718()
{
  unint64_t result;

  result = qword_2578DEA88;
  if (!qword_2578DEA88)
  {
    result = MEMORY[0x24BD06528](&unk_249F3256C, &type metadata for CoreMLUserMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA88);
  }
  return result;
}

unint64_t sub_249EF7760()
{
  unint64_t result;

  result = qword_2578DEA90;
  if (!qword_2578DEA90)
  {
    result = MEMORY[0x24BD06528](&unk_249F3248C, &type metadata for AppleDiffusionModelMetadata.SchedulerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA90);
  }
  return result;
}

unint64_t sub_249EF77A8()
{
  unint64_t result;

  result = qword_2578DEA98;
  if (!qword_2578DEA98)
  {
    result = MEMORY[0x24BD06528](&unk_249F324B4, &type metadata for AppleDiffusionModelMetadata.SchedulerInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2578DEA98);
  }
  return result;
}

uint64_t sub_249EF77EC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  char *v7;
  uint64_t result;

  v6 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v6)
    return v6;
  if (v6 > a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!a1)
    return v6;
  v7 = (char *)(a4 + a5);
  if (a4 + a5 >= (unint64_t)&a1[v6] || &v7[v6] <= a1)
  {
    memcpy(a1, v7, (a6 >> 1) - a5);
    return v6;
  }
LABEL_11:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249EF78A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = sub_249F1E86C();
  MEMORY[0x24BDAC7A8](v1);
  result = sub_249F1E800();
  if (!v0)
    __asm { BR              X10 }
  return result;
}

unint64_t sub_249EF7FB0()
{
  unint64_t result;

  result = qword_2578DEAA0;
  if (!qword_2578DEAA0)
  {
    result = MEMORY[0x24BD06528](&unk_249F32ACC, &_s13FileReadErrorON);
    atomic_store(result, (unint64_t *)&qword_2578DEAA0);
  }
  return result;
}

uint64_t sub_249EF7FF4(char *a1, uint64_t a2)
{
  return sub_249EF8008(a1, a2);
}

uint64_t sub_249EF8008(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_249EF77EC(a1, a2, **(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 24));
}

uint64_t _s13FileReadErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s13FileReadErrorOwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *_s13FileReadErrorOMa()
{
  return &_s13FileReadErrorON;
}

uint64_t sub_249EF8080()
{
  uint64_t v0;

  v0 = sub_249F1EF38();
  __swift_allocate_value_buffer(v0, qword_2578FF458);
  __swift_project_value_buffer(v0, (uint64_t)qword_2578FF458);
  return sub_249F1EF2C();
}

void sub_249EF80F8(char a1)
{
  sub_249F1FF64();
  __asm { BR              X10 }
}

uint64_t sub_249EF8150()
{
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF81B8()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF823C()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF82C0()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

void sub_249EF8368(uint64_t a1, char a2)
{
  sub_249F1FF64();
  __asm { BR              X10 }
}

uint64_t sub_249EF83AC()
{
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF8460()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

void sub_249EF84E0(uint64_t a1, char a2)
{
  sub_249F1FF64();
  __asm { BR              X10 }
}

uint64_t sub_249EF8534()
{
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF859C()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF861C()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF86C0(unsigned int a1, unint64_t a2)
{
  return sub_249EF89A8(a1, a2);
}

uint64_t sub_249EF86CC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  if (a2 < 0)
  {
    result = sub_249F1FBC8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_249E4769C();
      v4 = sub_249F1F58C();
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
      *(_QWORD *)(v5 + 16) = a2;
      v11 = v4;
      *(_QWORD *)(v5 + 32) = a1;
      if (a2 != 1)
      {
        *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = (_QWORD *)(v5 + 48);
          do
          {
            *v7++ = a1;
            v8 = a1;
            --v6;
          }
          while (v6);
        }
        v9 = a1;
      }
    }
    else
    {
      v11 = MEMORY[0x24BEE4AF8];

    }
    sub_249F1F55C();
    return v11;
  }
  return result;
}

uint64_t sub_249EF87BC(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_249F1FBC8();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = sub_249F1F58C();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_249EF88AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_249F1FBC8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEAD0);
      v4 = (_QWORD *)sub_249F1F58C();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_249EF899C(unsigned int a1, unint64_t a2)
{
  return sub_249EF89A8(a1, a2);
}

uint64_t sub_249EF89A8(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_249F1FBC8();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_249F1F58C();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

void CGImageRef.planarRGBShapedArray(minValue:maxValue:)(int32x2_t a1, int32x2_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  CGImage *v5;
  size_t Width;
  int64_t v7;
  size_t Height;
  int64_t v9;
  CGImage *v10;
  void *v11;
  vImagePixelCount v12;
  vImagePixelCount v13;
  size_t v14;
  vImagePixelCount v15;
  vImagePixelCount v16;
  size_t v17;
  vImageConverter *v18;
  vImageConverter *v19;
  vImagePixelCount v20;
  vImagePixelCount v21;
  size_t v22;
  vImagePixelCount v23;
  vImagePixelCount v24;
  size_t v25;
  vImagePixelCount v26;
  vImagePixelCount v27;
  size_t v28;
  vImagePixelCount v29;
  vImagePixelCount v30;
  size_t v31;
  uint64_t v32;
  float *data;
  void *v34;
  void *v35;
  void *v36;
  int64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  char *v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v58;
  vImage_Buffer v59;
  vImage_Buffer v60;
  vImage_Buffer v61;
  vImage_Buffer v62;
  vImage_Buffer v63;
  vImage_Buffer v64;
  vImage_CGImageFormat v65;
  vImage_CGImageFormat v66;
  uint64_t v67;
  char v68[40];
  vImage_CGImageFormat v69;
  vImage_CGImageFormat v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v4 = sub_249F1E404();
  MEMORY[0x24BDAC7A8](v4);
  v5 = v2;
  sub_249F1F8C8();
  sub_249EF9010((uint64_t)&v67, (uint64_t)&v70);
  if (v70.colorSpace == (CGColorSpaceRef)1)
    goto LABEL_16;
  v66 = v70;
  if (!CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]))
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_249F1F8D4();
  sub_249EF9010((uint64_t)v68, (uint64_t)&v69);
  if (v69.colorSpace == (CGColorSpaceRef)1
    || (v65 = v69, Width = CGImageGetWidth(v5), (Width & 0x8000000000000000) != 0)
    || (v7 = Width, Height = CGImageGetHeight(v5), (Height & 0x8000000000000000) != 0))
  {
LABEL_16:
    sub_249EF9058();
    swift_allocError();
    v42 = 1;
LABEL_17:
    *v41 = v42;
    swift_willThrow();
    return;
  }
  v9 = Height;
  v10 = v5;
  sub_249F1E3EC();
  v11 = (void *)sub_249F1F838();
  if (v3)
    return;
  v64.data = v11;
  v64.height = v12;
  v64.width = v13;
  v64.rowBytes = v14;
  v63.data = (void *)sub_249F1F844();
  v63.height = v15;
  v63.width = v16;
  v63.rowBytes = v17;
  v18 = vImageConverter_CreateWithCGImageFormat(&v66, &v65, 0, 0x100u, 0);
  if (!v18)
  {
    sub_249EF9058();
    swift_allocError();
    v42 = 2;
    goto LABEL_17;
  }
  v19 = v18;
  vImageConvert_AnyToAny(v18, &v64, &v63, 0, 0x100u);
  v62.data = (void *)sub_249F1F844();
  v62.height = v20;
  v62.width = v21;
  v62.rowBytes = v22;
  v61.data = (void *)sub_249F1F844();
  v61.height = v23;
  v61.width = v24;
  v61.rowBytes = v25;
  v60.data = (void *)sub_249F1F844();
  v60.height = v26;
  v60.width = v27;
  v60.rowBytes = v28;
  v59.data = (void *)sub_249F1F844();
  v59.height = v29;
  v59.width = v30;
  v59.rowBytes = v31;
  v54 = sub_249F1F58C();
  *(_QWORD *)(v54 + 16) = 4;
  *(int32x4_t *)(v54 + 32) = vdupq_lane_s32(a1, 0);
  v32 = sub_249F1F58C();
  *(_QWORD *)(v32 + 16) = 4;
  *(int32x4_t *)(v32 + 32) = vdupq_lane_s32(a2, 0);
  vImageConvert_ARGB8888toPlanarF(&v63, &v62, &v61, &v60, &v59, (const float *)(v32 + 32), (const float *)(v54 + 32), 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  data = (float *)v62.data;
  if (!v62.data)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v34 = v61.data;
  if (!v61.data)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v35 = v60.data;
  if (!v60.data)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v36 = v59.data;
  if (!v59.data)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v37 = v7 * v9;
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
    goto LABEL_25;
  if (v37 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v37)
  {
    v38 = v61.data;
    v39 = v60.data;
    v40 = v59.data;
    do
    {
      if (*data == 0.0)
      {
        *v38 = -1082130432;
        *v39 = -1082130432;
        *v40 = -1082130432;
      }
      ++v40;
      ++v39;
      ++v38;
      ++data;
      --v37;
    }
    while (v37);
  }
  v43 = (uint64_t)v36;
  v58 = sub_249EF9DCC((uint64_t)v34, v61.height, v61.width, v61.rowBytes);
  v45 = v44;
  v46 = sub_249EF9DCC((uint64_t)v35, v60.height, v60.width, v60.rowBytes);
  v52 = v47;
  v53 = v46;
  v48 = v47;
  v51 = sub_249EF9DCC(v43, v59.height, v59.width, v59.rowBytes);
  v56 = v49;
  sub_249DC3928(v58, v45);
  sub_249DC3928(v46, v48);
  sub_249EFA6EC(v46, v48);
  sub_249DC3C24(v46, v48);
  sub_249DC3928(v58, v45);
  sub_249DC3928(v51, v56);
  sub_249EFA6EC(v51, v56);
  sub_249DC3C24(v51, v56);
  sub_249DC3C24(v58, v45);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_249F234B0;
  *(_OWORD *)(v50 + 32) = xmmword_249F21760;
  *(_QWORD *)(v50 + 48) = CGImageGetHeight(v10);
  *(_QWORD *)(v50 + 56) = CGImageGetWidth(v10);
  sub_249F1EFD4();
  sub_249DC3C24(v51, v56);
  sub_249DC3C24(v53, v52);
  sub_249DC3C24(v58, v45);

}

uint64_t sub_249EF9010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEAA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_249EF9058()
{
  unint64_t result;

  result = qword_2578DEAB0;
  if (!qword_2578DEAB0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for CGImageRef.ShapedArrayError, &type metadata for CGImageRef.ShapedArrayError);
    atomic_store(result, (unint64_t *)&qword_2578DEAB0);
  }
  return result;
}

uint64_t static CGImageRef.fromCVPixelBuffer(_:)(__CVBuffer *a1)
{
  return sub_249EFA904(a1);
}

unint64_t CGImageRef.ShapedArrayError.rawValue.getter(char a1)
{
  unint64_t result;

  result = 0xD000000000000015;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000027;
    else
      return 0xD00000000000001DLL;
  }
  return result;
}

uint64_t sub_249EF9114(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_249F130E0(*a1, *a2);
}

uint64_t sub_249EF9120()
{
  return sub_249EF82C0();
}

uint64_t sub_249EF9128()
{
  return sub_249F10FC4();
}

uint64_t sub_249EF9130()
{
  return sub_249EF861C();
}

uint64_t sub_249EF9138@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _sSo10CGImageRefa13DiffusionBaseE16ShapedArrayErrorO8rawValueAESgSS_tcfC_0();
  *a1 = result;
  return result;
}

unint64_t sub_249EF9164@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = CGImageRef.ShapedArrayError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CGImageRef.PixelBufferConversionError.init(rawValue:)()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t CGImageRef.PixelBufferConversionError.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x436567616D496763;
  else
    return 0x616E616C506E6F6ELL;
}

uint64_t sub_249EF922C(char *a1, char *a2)
{
  return sub_249F13024(*a1, *a2);
}

uint64_t sub_249EF9238()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF92D0()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EF9344()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EF93D8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_249F1FC4C();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_249EF9434(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x616E616C506E6F6ELL;
  if (*v1)
    v2 = 0x436567616D496763;
  v3 = 0xEF72656666754272;
  if (*v1)
    v3 = 0xEF6E6F6974616572;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_249EF948C()
{
  uint64_t result;
  uint64_t v1;
  _OWORD v2[2];
  uint64_t v3;

  result = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  if (result)
  {
    sub_249F1F8D4();
    result = sub_249EF9010((uint64_t)&v1, (uint64_t)v2);
    if (*((_QWORD *)&v2[0] + 1) != 1)
    {
      xmmword_2578FF470 = v2[0];
      unk_2578FF480 = v2[1];
      qword_2578FF490 = v3;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

char *static CGImageRef.fromShapedArray(_:_:)(char *a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE218);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v15 = sub_249F1EFE0();
  if (*(_QWORD *)(v15 + 16) < 2uLL)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v33 = v3;
  v16 = *(_QWORD *)(v15 + 40);
  swift_bridgeObjectRelease();
  if (v16 != 3)
  {
    sub_249EF9058();
    swift_allocError();
    *v27 = 0;
    swift_willThrow();
    return a1;
  }
  v17 = sub_249F1EFE0();
  if (*(_QWORD *)(v17 + 16) < 3uLL)
    goto LABEL_14;
  v18 = *(_QWORD *)(v17 + 48);
  swift_bridgeObjectRelease();
  v19 = sub_249F1EFE0();
  if (*(_QWORD *)(v19 + 16) < 4uLL)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v31 = v12;
  v32 = v11;
  v20 = *(_QWORD *)(v19 + 56);
  v21 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v21);
  *(&v30 - 4) = v20;
  *(&v30 - 3) = v18;
  *((float *)&v30 - 4) = a2;
  *((float *)&v30 - 3) = a3;
  *(&v30 - 1) = (uint64_t)a1;
  v22 = sub_249EB415C((void (*)(uint64_t *))sub_249EFACE0, (uint64_t)(&v30 - 6), 0, 3);
  sub_249F1E3BC();
  sub_249F1E35C();
  if (!*(_QWORD *)(v22 + 16))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v23 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v22 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
  MEMORY[0x24BDAC7A8](v23);
  *(&v30 - 2) = v22;
  *(&v30 - 1) = (uint64_t)v14;
  sub_249F1E314();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  if (qword_2578DDA18 != -1)
LABEL_17:
    swift_once();
  v34 = xmmword_2578FF470;
  v35 = unk_2578FF480;
  v36 = qword_2578FF490;
  v24 = v32;
  a1 = v14;
  v25 = sub_249F1E344();
  v26 = v31;
  if (v25)
  {
    a1 = (char *)v25;
  }
  else
  {
    sub_249EFAD1C();
    swift_allocError();
    *v28 = 1;
    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v24);
  return a1;
}

uint64_t sub_249EF9868@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  void (*v19)(char *, uint64_t);
  _QWORD v21[6];
  float v22;
  float v23;
  uint64_t v24;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1F8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v21 - v15;
  sub_249F1E41C();
  sub_249F1E35C();
  if (a5 >= a4)
    v17 = a4;
  else
    v17 = a5;
  v18 = -v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  sub_249F1F010();
  sub_249DDFC68(&qword_2578DE200, &qword_2578DE1F8, MEMORY[0x24BDBFD50]);
  sub_249F1F0C4();
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v16, v10);
  v21[4] = a1;
  v21[5] = a2;
  v22 = 1.0 / vabds_f32(a5, a4);
  v23 = v18;
  v24 = a3;
  sub_249F1F028();
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v10);
}

uint64_t sub_249EF9A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(_QWORD *)(a4 + 16))
    {
      if ((unint64_t)(*(_QWORD *)(a4 + 32) - 0x2000000000000000) >> 62 == 3)
      {
        sub_249F1E41C();
        sub_249F1E350();
        sub_249F1E398();
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_249EF9B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(a2 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
    MEMORY[0x24BDAC7A8](v2);
    return sub_249F1E314();
  }
  return result;
}

uint64_t sub_249EF9C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(a2 + 16) < 3uLL)
  {
    __break(1u);
  }
  else
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
    MEMORY[0x24BDAC7A8](v2);
    return sub_249F1E314();
  }
  return result;
}

vImage_Error sub_249EF9CF4(const vImage_Buffer *a1, const vImage_Buffer *a2, const vImage_Buffer *a3, const vImage_Buffer *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  vImage_Flags v12;
  uint64_t v14;

  v8 = sub_249F1E404();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249F1E3EC();
  v12 = sub_249F1E3F8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return vImageConvert_PlanarFToBGRX8888(a2, a3, a4, 0xFFu, a1, flt_251B5B9D0, flt_251B5B9A0, v12);
}

uint64_t sub_249EF9DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE __dst[14];
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (!a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v5 = a3 * (a4 / a3);
  if ((unsigned __int128)(a3 * (__int128)(a4 / a3)) >> 64 != v5 >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a2 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if ((unsigned __int128)(v5 * (__int128)a2) >> 64 != (v5 * a2) >> 63)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  result = sub_249EFAC04(v5 * a2);
  v17 = result;
  v18 = v9;
  if (!a2)
    return result;
  v10 = 0;
  do
  {
    if (a2 == v10)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (!a1)
      goto LABEL_28;
    if ((unsigned __int128)(v10 * (__int128)a4) >> 64 != (v10 * a4) >> 63)
      goto LABEL_22;
    if (v5)
    {
      if (v5 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v16 = v5;
        memcpy(__dst, (const void *)(a1 + v10 * a4), v5);
        v11 = *(_QWORD *)__dst;
        v12 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v16 << 48);
      }
      else
      {
        sub_249F1E524();
        swift_allocObject();
        v13 = sub_249F1E4E8();
        v14 = v13;
        if ((unint64_t)v5 >= 0x7FFFFFFF)
        {
          sub_249F1E80C();
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)(v11 + 24) = v5;
          v12 = v14 | 0x8000000000000000;
        }
        else
        {
          v12 = v13 | 0x4000000000000000;
          v11 = v5 << 32;
        }
      }
    }
    else
    {
      v11 = 0;
      v12 = 0xC000000000000000;
    }
    ++v10;
    sub_249F1E854();
    sub_249DC3C24(v11, v12);
  }
  while (a2 != v10);
  return v17;
}

uint64_t CGImageRef.toRGBShapedArray(minValue:maxValue:)@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  CGImage *v2;
  CGImage *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  size_t Width;
  uint64_t result;
  size_t v18;
  size_t v19;
  id v20;
  CGContextRef v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int32x2_t v26;
  uint64_t v27;
  int32x2_t v28;
  uint64_t v29;
  int32x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(unint64_t, char *, uint64_t);
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  id v63;
  CGContextRef v64;
  uint64_t v65;
  uint64_t Height;
  int64_t v67;
  uint64_t v68;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v57 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v57 - v14;
  Width = CGImageGetWidth(v3);
  Height = CGImageGetHeight(v3);
  result = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
  if (!result)
    goto LABEL_46;
  if ((Width - 0x2000000000000000) >> 62 != 3)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v18 = 4 * Width;
  v67 = Width;
  v19 = Width;
  v20 = (id)result;
  v21 = CGBitmapContextCreate(0, v19, Height, 8uLL, v18, (CGColorSpaceRef)result, 1u);
  if (!v21)
  {
LABEL_45:

LABEL_46:
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    return sub_249F1F070();
  }
  v62 = v15;
  v63 = v20;
  v64 = v21;
  result = (uint64_t)CGBitmapContextGetData(v21);
  if (!result)
  {

    v20 = v64;
    goto LABEL_45;
  }
  v61 = v13;
  v22 = v67 * Height;
  if ((unsigned __int128)(v67 * (__int128)Height) >> 64 != (v67 * Height) >> 63)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if ((v22 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v23 = result;
  v57 = v10;
  v58 = v7;
  v59 = a1;
  v60 = v6;
  v24 = Height;
  v25 = v67;
  sub_249F1F7C0();
  v26.i32[0] = 0;
  v27 = sub_249EF87BC(v22, v26);
  v28.i32[0] = 0;
  v29 = sub_249EF87BC(v22, v28);
  v30.i32[0] = 0;
  result = sub_249EF87BC(v22, v30);
  if (v24 < 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v31 = result;
  if (!v24)
  {
LABEL_47:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_249F234B0;
    *(int64x2_t *)(v41 + 32) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v41 + 48) = v24;
    *(_QWORD *)(v41 + 56) = v25;
    v68 = v27;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE10);
    sub_249DDFC68(&qword_2578DDE18, &qword_2578DDE10, MEMORY[0x24BEE12C8]);
    sub_249F1EFEC();
    v68 = v29;
    swift_bridgeObjectRetain();
    sub_249F1EFEC();
    v68 = v31;
    v42 = v57;
    sub_249F1EFEC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    v43 = v58;
    v44 = *(_QWORD *)(v58 + 72);
    v45 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
    v46 = 2 * v44;
    v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_249F22C20;
    v48 = v47 + v45;
    v49 = *(void (**)(unint64_t, char *, uint64_t))(v43 + 16);
    v50 = v62;
    v51 = v60;
    v49(v48, v62, v60);
    v52 = v48 + v44;
    v53 = v61;
    v49(v52, v61, v51);
    v54 = v48 + v46;
    v55 = v42;
    v49(v54, v42, v51);
    v68 = v47;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9608);
    sub_249DDFC68(&qword_2578D9610, &qword_2578D9608, MEMORY[0x24BEE12C8]);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    sub_249F1EFA4();

    v56 = *(void (**)(char *, uint64_t))(v43 + 8);
    v56(v55, v51);
    v56(v53, v51);
    return ((uint64_t (*)(char *, uint64_t))v56)(v50, v51);
  }
  if ((v25 & 0x8000000000000000) == 0)
  {
    v32 = 0;
    while (v32 != v24)
    {
      v65 = v32;
      if (v25)
      {
        v33 = v32 * v25;
        if ((unsigned __int128)(v32 * (__int128)v25) >> 64 != (v32 * v25) >> 63)
          goto LABEL_59;
        v34 = 0;
        while (1)
        {
          v35 = v33 + v34;
          if (__OFADD__(v33, v34))
            break;
          if ((v35 - 0x2000000000000000) >> 62 != 3)
            goto LABEL_49;
          v36 = 4 * v35;
          if (*(_BYTE *)(v23 + ((4 * v35) | 3)))
          {
            v37 = *(unsigned __int8 *)(v23 + 4 * v35);
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              if ((v35 & 0x8000000000000000) != 0)
                goto LABEL_51;
            }
            else
            {
              result = (uint64_t)sub_249EC94CC(v27);
              v27 = result;
              if ((v35 & 0x8000000000000000) != 0)
                goto LABEL_51;
            }
            if (v35 >= *(_QWORD *)(v27 + 16))
              goto LABEL_50;
            *(float *)(v27 + 4 * v35 + 32) = (float)((float)v37 / 127.5) + -1.0;
            v38 = *(unsigned __int8 *)(v23 + (v36 | 1));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_249EC94CC(v29);
              v29 = result;
            }
            if (v35 >= *(_QWORD *)(v29 + 16))
              goto LABEL_52;
            *(float *)(v29 + 4 * v35 + 32) = (float)((float)v38 / 127.5) + -1.0;
            v39 = *(unsigned __int8 *)(v23 + (v36 | 2));
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_249EC94CC(v31);
              v31 = result;
            }
            if (v35 >= *(_QWORD *)(v31 + 16))
              goto LABEL_53;
            v40 = (float)((float)v39 / 127.5) + -1.0;
            v25 = v67;
          }
          else
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              if ((v35 & 0x8000000000000000) != 0)
                goto LABEL_56;
            }
            else
            {
              result = (uint64_t)sub_249EC94CC(v27);
              v27 = result;
              if ((v35 & 0x8000000000000000) != 0)
                goto LABEL_56;
            }
            if (v35 >= *(_QWORD *)(v27 + 16))
              goto LABEL_54;
            *(float *)(v27 + 4 * v35 + 32) = a2;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_249EC94CC(v29);
              v29 = result;
            }
            if (v35 >= *(_QWORD *)(v29 + 16))
              goto LABEL_55;
            *(float *)(v29 + 4 * v35 + 32) = a2;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_249EC94CC(v31);
              v31 = result;
            }
            v40 = a2;
            if (v35 >= *(_QWORD *)(v31 + 16))
              goto LABEL_57;
          }
          ++v34;
          *(float *)(v31 + 4 * v35 + 32) = v40;
          if (v25 == v34)
            goto LABEL_11;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        break;
      }
LABEL_11:
      v24 = Height;
      v32 = v65 + 1;
      if (v65 + 1 == Height)
        goto LABEL_47;
    }
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_249EFA65C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_249F1E4F4();
  if (!result || (result = sub_249F1E50C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_249F1E500();
      return sub_249F1E818();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_249EFA6EC(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_249EFA750
     + dword_249EFA8F4[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_249EFA760()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_249DC3928(v1, v0);
  sub_249F1E818();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t sub_249EFA904(__CVBuffer *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  _BYTE *v14;
  uint64_t result;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  __CVBuffer *v20;
  id v21;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE218);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_249F1E404();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CVPixelBufferIsPlanar(a1))
  {
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVImageBuffer_, a1);
    objc_msgSend(v12, sel_extent);
    v13 = objc_msgSend(v11, sel_createCGImage_fromRect_, v12);

    if (v13)
      return (uint64_t)v13;
LABEL_3:
    sub_249EFAD1C();
    swift_allocError();
    *v14 = 1;
    swift_willThrow();
    return (uint64_t)v13;
  }
  v27 = v4;
  type metadata accessor for vImageCVImageFormat(0);
  result = sub_249F1F910();
  if (result)
  {
    v16 = (void *)result;
    result = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
    if (result)
    {
      sub_249F1F8F8();
      sub_249F1F904();
      type metadata accessor for vImageConverter(0);
      v13 = v17;
      if (qword_2578DDA18 != -1)
        swift_once();
      v24 = xmmword_2578FF470;
      v25 = unk_2578FF480;
      v26 = qword_2578FF490;
      sub_249F1E3EC();
      v18 = sub_249F1F8BC();
      if (v1)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

        return (uint64_t)v13;
      }
      v19 = (void *)v18;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      sub_249F1E3BC();
      v20 = a1;
      v21 = v19;
      sub_249F1E320();
      v22[0] = xmmword_2578FF470;
      v22[1] = unk_2578FF480;
      v23 = qword_2578FF490;
      v13 = (id)sub_249F1E344();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
      CVPixelBufferUnlockBaseAddress(v20, 1uLL);

      if (v13)
        return (uint64_t)v13;
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_249EFAC04(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_249F1E524();
      swift_allocObject();
      sub_249F1E518();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_249F1E80C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _sSo10CGImageRefa13DiffusionBaseE16ShapedArrayErrorO8rawValueAESgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_249EFACE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249EF9868(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(float *)(v1 + 32), *(float *)(v1 + 36));
}

uint64_t sub_249EFAD04(uint64_t a1)
{
  uint64_t v1;

  return sub_249EF9B58(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_249EFAD1C()
{
  unint64_t result;

  result = qword_2578DEAB8;
  if (!qword_2578DEAB8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for CGImageRef.PixelBufferConversionError, &type metadata for CGImageRef.PixelBufferConversionError);
    atomic_store(result, (unint64_t *)&qword_2578DEAB8);
  }
  return result;
}

unint64_t sub_249EFAD64()
{
  unint64_t result;

  result = qword_2578DEAC0;
  if (!qword_2578DEAC0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for CGImageRef.ShapedArrayError, &type metadata for CGImageRef.ShapedArrayError);
    atomic_store(result, (unint64_t *)&qword_2578DEAC0);
  }
  return result;
}

unint64_t sub_249EFADAC()
{
  unint64_t result;

  result = qword_2578DEAC8;
  if (!qword_2578DEAC8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for CGImageRef.PixelBufferConversionError, &type metadata for CGImageRef.PixelBufferConversionError);
    atomic_store(result, (unint64_t *)&qword_2578DEAC8);
  }
  return result;
}

uint64_t _s16ShapedArrayErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249EFAE3C + 4 * byte_249F32B2C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249EFAE70 + 4 * byte_249F32B27[v4]))();
}

uint64_t sub_249EFAE70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EFAE78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EFAE80);
  return result;
}

uint64_t sub_249EFAE8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EFAE94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249EFAE98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EFAEA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CGImageRef.ShapedArrayError()
{
  return &type metadata for CGImageRef.ShapedArrayError;
}

uint64_t _s26PixelBufferConversionErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_249EFAF08 + 4 * byte_249F32B36[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_249EFAF3C + 4 * byte_249F32B31[v4]))();
}

uint64_t sub_249EFAF3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EFAF44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EFAF4CLL);
  return result;
}

uint64_t sub_249EFAF58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EFAF60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_249EFAF64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EFAF6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CGImageRef.PixelBufferConversionError()
{
  return &type metadata for CGImageRef.PixelBufferConversionError;
}

uint64_t sub_249EFAF88(uint64_t a1)
{
  uint64_t v1;

  return sub_249EF9C20(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_249EFAFA4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE218);
  return sub_249F1E314();
}

vImage_Error sub_249EFB024(const vImage_Buffer *a1)
{
  const vImage_Buffer **v1;

  return sub_249EF9CF4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_249EFB040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_249EF9A24(a1, a2, a3, a4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionImageConditioner.loadResources()()
{
  ManagedMLModel.loadResources()();
}

Swift::Void __swiftcall AppleDiffusionImageConditioner.unloadResources()()
{
  ManagedMLModel.unloadResources()();
}

MLMultiArray __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDiffusionImageConditioner.encode(_:)(MLMultiArray a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  MLMultiArray result;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  v6 = *(void **)(v3 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v7 = v6;
  sub_249F1F874();
  if (!v2)
  {

    v8 = objc_msgSend(v23, sel_name);
    v9 = sub_249F1F328();
    v11 = v10;

    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 40) = v11;
    *(MLMultiArray *)(inited + 48) = a1;
    v12 = a1.super.isa;
    v13 = sub_249EAF51C(inited);
    sub_249EFBAAC(v13, &qword_2578DDE20);
    swift_bridgeObjectRelease();
    v14 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v15 = sub_249EFD4E8();
    v22 = MEMORY[0x24BDAC7A8](v15);
    MEMORY[0x24BDAC7A8](v22);
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    sub_249F1F874();

    v7 = v23;
    v19 = (void *)sub_249F1F304();
    v20 = objc_msgSend(v23, sel_featureValueForName_, v19);

    if (v20)
    {
      v21 = objc_msgSend(v20, sel_multiArrayValue);

      if (v21)
      {

        swift_unknownObjectRelease();
        return (MLMultiArray)v21;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }

  result.super.isa = (Class)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_249EFB36C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C98);
    v2 = sub_249F1FC1C();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_249DCA7E4(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_249DCA678(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_249DCA678(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_249DCA678(v36, v37);
    sub_249DCA678(v37, &v33);
    result = sub_249F1FA24();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_249DCA678(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_249D9E18C();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_249EFB730(uint64_t a1)
{
  return sub_249EFBAAC(a1, &qword_2578DDE20);
}

unint64_t sub_249EFB744(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  void *v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6CE0);
    v2 = (_QWORD *)sub_249F1FC1C();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v34 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v33 = (unint64_t)(63 - v3) >> 6;
  v6 = &v38;
  v7 = &v40;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v33)
    goto LABEL_32;
  v21 = *(_QWORD *)(v34 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v33)
      goto LABEL_32;
    v21 = *(_QWORD *)(v34 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v33)
        goto LABEL_32;
      v21 = *(_QWORD *)(v34 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v33)
          goto LABEL_32;
        v21 = *(_QWORD *)(v34 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v33)
          {
            v21 = *(_QWORD *)(v34 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v33)
                break;
              v21 = *(_QWORD *)(v34 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_249D9E18C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = v18 | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v25 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v19);
    v36 = *v24;
    v37 = v24[1];
    type metadata accessor for CVBuffer(0);
    swift_bridgeObjectRetain();
    v26 = v25;
    swift_dynamicCast();
    sub_249DCA678(v6, v7);
    sub_249DCA678(v7, v41);
    sub_249DCA678(v41, &v39);
    result = sub_249DB7D8C(v36, v37);
    v27 = result;
    if ((v28 & 1) != 0)
    {
      v35 = v5;
      v11 = v7;
      v12 = v6;
      v13 = v1;
      v14 = i;
      v15 = v10;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v36;
      v16[1] = v37;
      v10 = v15;
      i = v14;
      v1 = v13;
      v6 = v12;
      v7 = v11;
      v5 = v35;
      v17 = (_OWORD *)(v2[7] + 32 * v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      result = (unint64_t)sub_249DCA678(&v39, v17);
      if (!v35)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v29 = (uint64_t *)(v2[6] + 16 * result);
    *v29 = v36;
    v29[1] = v37;
    result = (unint64_t)sub_249DCA678(&v39, (_OWORD *)(v2[7] + 32 * result));
    v30 = v2[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_34;
    v2[2] = v32;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v18 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_249EFBA98(uint64_t a1)
{
  return sub_249EFBAAC(a1, &qword_2578DEAF8);
}

unint64_t sub_249EFBAAC(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t *v25;
  void *v26;
  id v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];

  v2 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6CE0);
    v3 = (_QWORD *)sub_249F1FC1C();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v35 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v34 = (unint64_t)(63 - v4) >> 6;
  v7 = &v40;
  v8 = &v42;
  result = swift_bridgeObjectRetain();
  i = 0;
  v11 = MEMORY[0x24BEE4AD8] + 8;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v34)
    goto LABEL_32;
  v22 = *(_QWORD *)(v35 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v34)
      goto LABEL_32;
    v22 = *(_QWORD *)(v35 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v34)
        goto LABEL_32;
      v22 = *(_QWORD *)(v35 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v34)
          goto LABEL_32;
        v22 = *(_QWORD *)(v35 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v34)
          {
            v22 = *(_QWORD *)(v35 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v34)
                break;
              v22 = *(_QWORD *)(v35 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_249D9E18C();
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v6 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = v19 | (i << 6))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v20);
    v26 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v20);
    v38 = *v25;
    v39 = v25[1];
    sub_249D9D9F4(0, a2);
    swift_bridgeObjectRetain();
    v27 = v26;
    swift_dynamicCast();
    sub_249DCA678(v7, v8);
    sub_249DCA678(v8, v43);
    sub_249DCA678(v43, &v41);
    result = sub_249DB7D8C(v38, v39);
    v28 = result;
    if ((v29 & 1) != 0)
    {
      v36 = v6;
      v12 = v8;
      v13 = v7;
      v14 = v2;
      v15 = i;
      v16 = v11;
      v17 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v38;
      v17[1] = v39;
      v11 = v16;
      i = v15;
      v2 = v14;
      v7 = v13;
      v8 = v12;
      v6 = v36;
      v18 = (_OWORD *)(v3[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      result = (unint64_t)sub_249DCA678(&v41, v18);
      if (!v36)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v30 = (uint64_t *)(v3[6] + 16 * result);
    *v30 = v38;
    v30[1] = v39;
    result = (unint64_t)sub_249DCA678(&v41, (_OWORD *)(v3[7] + 32 * result));
    v31 = v3[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_34;
    v3[2] = v33;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v19 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_249EFBE08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v12;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEAE0);
    v2 = sub_249F1FC1C();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v12 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_24;
  }
  if (v12 > 1)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = 1;
    if (v7)
      goto LABEL_23;
    v8 = 2;
    if (v12 <= 2)
      goto LABEL_25;
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
      goto LABEL_23;
    v8 = 3;
    if (v12 <= 3)
      goto LABEL_25;
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
      goto LABEL_23;
    v8 = 4;
    if (v12 <= 4)
      goto LABEL_25;
    v7 = *(_QWORD *)(a1 + 96);
    if (v7)
    {
LABEL_23:
      v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_24:
      v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEAE8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEAF0);
      swift_dynamicCast();
      sub_249F1FF64();
      __asm { BR              X8 }
    }
    v9 = 5;
    if (v12 > 5)
    {
      v7 = *(_QWORD *)(a1 + 104);
      if (v7)
      {
        v8 = 5;
        goto LABEL_23;
      }
      while (1)
      {
        v8 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          JUMPOUT(0x249EFC2A4);
        }
        if (v8 >= v12)
          break;
        v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
        ++v9;
        if (v7)
          goto LABEL_23;
      }
    }
  }
LABEL_25:
  swift_release();
  sub_249D9E18C();
  return v2;
}

BOOL AppleDiffusionImageConditioner.Error.init(rawValue:)()
{
  uint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

unint64_t AppleDiffusionImageConditioner.Error.rawValue.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_249EFC330()
{
  sub_249F1FF64();
  sub_249F1F40C();
  return sub_249F1FFA0();
}

uint64_t sub_249EFC384()
{
  return sub_249F1F40C();
}

uint64_t sub_249EFC3A0()
{
  sub_249F1FF64();
  sub_249F1F40C();
  return sub_249F1FFA0();
}

uint64_t sub_249EFC3F0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_249F1FC4C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_249EFC440(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x8000000249F38DD0;
}

uint64_t AppleDiffusionImageConditioner.init(modelAt:configuration:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for ManagedMLModel();
  swift_allocObject();
  v8 = ManagedMLModel.init(modelAt:configuration:name:)(v7, a2, (uint64_t)"global_conditioning_producer_reference_image", 44, 2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v8;
}

uint64_t AppleDiffusionImageConditioner.encode(_:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  CVPixelBufferRef v21;
  id v22;
  id v23;
  id v24;
  __CVBuffer *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, _QWORD *);
  char *v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t (*v49)(id *, _QWORD);
  void (*v50)(_BYTE *, _QWORD);
  uint64_t v51;
  void (*v52)(_BYTE *, _QWORD);
  char *v53;
  uint64_t v54;
  void (*v55)(id *, _QWORD);
  void (*v56)(_BYTE *, _QWORD);
  id v57;
  uint64_t inited;
  void *v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  id v73;
  id v74;
  uint64_t result;
  id v76;
  id v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  id v83;
  id v84;
  CVPixelBufferRef v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  CVPixelBufferRef v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  _BYTE v101[32];
  id v102[6];

  v91 = a2;
  v102[4] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v88 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v86 - v7;
  v95 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE0);
  v9 = *(v95 - 1);
  v10 = MEMORY[0x24BDAC7A8](v95);
  v99 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v98 = (char *)&v86 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v97 = (char *)&v86 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v86 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE218);
  v94 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v100 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void *)objc_opt_self();
  v102[0] = 0;
  v21 = a1;
  v22 = objc_msgSend(v20, sel_featureValueWithCGImage_pixelsWide_pixelsHigh_pixelFormatType_options_error_, v21, 512, 512, 1111970369, 0, v102);
  if (!v22)
  {
    v46 = v102[0];
    sub_249F1E710();

    swift_willThrow();
    goto LABEL_17;
  }
  v23 = v22;
  v24 = v102[0];

  v25 = (__CVBuffer *)objc_msgSend(v23, sel_imageBufferValue);
  if (!v25)
    goto LABEL_31;
  CVPixelBufferLockBaseAddress(v25, 1uLL);
  if (!CVPixelBufferGetBaseAddress(v25))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v89 = v18;
  v92 = v8;
  v87 = v4;
  v93 = v3;
  v90 = v25;
  CVPixelBufferGetBytesPerRow(v25);
  sub_249F1E3BC();
  sub_249F1E32C();
  v102[0] = (id)MEMORY[0x24BEE4AF8];
  sub_249EB5DE0(0, 4, 0);
  v26 = v102[0];
  sub_249F1E410();
  sub_249F1E35C();
  v102[0] = v26;
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
  {
    sub_249EB5DE0(v27 > 1, v28 + 1, 1);
    v26 = v102[0];
  }
  v26[2] = v28 + 1;
  v29 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v30 = *(_QWORD *)(v9 + 72);
  v31 = *(void (**)(char *, char *, _QWORD *))(v9 + 32);
  v32 = v17;
  v33 = v95;
  v31((char *)v26 + v29 + v30 * v28, v32, v95);
  v34 = v97;
  sub_249F1E35C();
  v102[0] = v26;
  v36 = v26[2];
  v35 = v26[3];
  if (v36 >= v35 >> 1)
  {
    sub_249EB5DE0(v35 > 1, v36 + 1, 1);
    v34 = v97;
    v26 = v102[0];
  }
  v26[2] = v36 + 1;
  v31((char *)v26 + v29 + v36 * v30, v34, v33);
  v37 = v98;
  sub_249F1E35C();
  v102[0] = v26;
  v39 = v26[2];
  v38 = v26[3];
  if (v39 >= v38 >> 1)
  {
    sub_249EB5DE0(v38 > 1, v39 + 1, 1);
    v37 = v98;
    v26 = v102[0];
  }
  v26[2] = v39 + 1;
  v31((char *)v26 + v29 + v39 * v30, v37, v33);
  v40 = v99;
  sub_249F1E35C();
  v102[0] = v26;
  v42 = v26[2];
  v41 = v26[3];
  if (v42 >= v41 >> 1)
  {
    sub_249EB5DE0(v41 > 1, v42 + 1, 1);
    v40 = v99;
    v26 = v102[0];
  }
  v26[2] = v42 + 1;
  v31((char *)v26 + v29 + v42 * v30, v40, v33);
  v43 = v100;
  sub_249F1E374();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_249F31240;
  *(_QWORD *)(v44 + 32) = sub_249F1F718();
  *(_QWORD *)(v44 + 40) = sub_249F1F718();
  *(_QWORD *)(v44 + 48) = sub_249F1F718();
  *(_QWORD *)(v44 + 56) = sub_249F1F718();
  v102[0] = (id)v44;
  sub_249F1F55C();
  v45 = v102[0];
  v46 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v47 = v96;
  sub_249E14B58((uint64_t)v45, 65568);
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v43, v89);
    swift_release();
    v21 = v90;
    CVPixelBufferUnlockBaseAddress(v90, 1uLL);
LABEL_17:

    return (uint64_t)v46;
  }
  v48 = sub_249F1F01C();
  v99 = (char *)&v86;
  MEMORY[0x24BDAC7A8](v48);
  *(&v86 - 6) = (uint64_t)v26;
  *(&v86 - 5) = (uint64_t)&unk_251B5BA50;
  *((_OWORD *)&v86 - 2) = xmmword_249F32D40;
  *(&v86 - 2) = 512;
  v49 = (uint64_t (*)(id *, _QWORD))sub_249F1F004();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE1F8);
  v98 = (char *)sub_249DDFC68(&qword_2578DE200, &qword_2578DE1F8, MEMORY[0x24BDBFD50]);
  v50 = (void (*)(_BYTE *, _QWORD))sub_249F1F0B8();
  sub_249F1F034();
  v97 = 0;
  v50(v101, 0);
  v51 = v49(v102, 0);
  v96 = &v86;
  MEMORY[0x24BDAC7A8](v51);
  *(&v86 - 6) = (uint64_t)v26;
  *(&v86 - 5) = (uint64_t)&unk_251B5BA50;
  *((_OWORD *)&v86 - 2) = xmmword_249F32D50;
  *(&v86 - 2) = 512;
  v95 = (_QWORD *)sub_249F1F004();
  v52 = (void (*)(_BYTE *, _QWORD))sub_249F1F0B8();
  v53 = v97;
  sub_249F1F034();
  v99 = v53;
  v52(v101, 0);
  v54 = ((uint64_t (*)(id *, _QWORD))v95)(v102, 0);
  v97 = (char *)&v86;
  MEMORY[0x24BDAC7A8](v54);
  *(&v86 - 6) = (uint64_t)v26;
  *(&v86 - 5) = (uint64_t)&unk_251B5BA50;
  *((_OWORD *)&v86 - 2) = xmmword_249F32D60;
  *(&v86 - 2) = 512;
  v55 = (void (*)(id *, _QWORD))sub_249F1F004();
  v56 = (void (*)(_BYTE *, _QWORD))sub_249F1F0B8();
  v57 = v99;
  sub_249F1F034();
  v56(v101, 0);
  v55(v102, 0);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDFE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  v99 = (char *)OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue;
  v59 = *(void **)(v91 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  MEMORY[0x24BDAC7A8](inited);
  *(&v86 - 4) = v60;
  *(&v86 - 3) = (uint64_t)sub_249EBD358;
  *(&v86 - 2) = 0;
  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v23 = v59;
  sub_249F1F874();
  if (!v57)
  {

    v61 = v102[0];
    v62 = objc_msgSend(v102[0], sel_name);

    v63 = sub_249F1F328();
    v65 = v64;

    *(_QWORD *)(inited + 32) = v63;
    *(_QWORD *)(inited + 40) = v65;
    sub_249D9D9F4(0, &qword_2578DDE20);
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v88, v92, v93);
    sub_249DDFC68((unint64_t *)&qword_2578D95F8, &qword_2578D67D8, MEMORY[0x24BDBFCD0]);
    *(_QWORD *)(inited + 48) = sub_249F1F7FC();
    v66 = sub_249EAF51C(inited);
    sub_249EFBAAC(v66, &qword_2578DDE20);
    swift_bridgeObjectRelease();
    objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v67 = sub_249EFD4E8();
    v68 = MEMORY[0x24BDAC7A8](v67);
    *(&v86 - 2) = v68;
    v69 = MEMORY[0x24BDAC7A8](v68);
    *(&v86 - 4) = v70;
    *(&v86 - 3) = (uint64_t)sub_249EBDA9C;
    *(&v86 - 2) = v71;
    v72 = (char *)v69;
    v74 = v73;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
    sub_249F1F874();
    v99 = v72;

    v76 = v102[0];
    v77 = objc_msgSend(v102[0], sel_featureNames);
    sub_249F1F700();

    v78 = swift_bridgeObjectRetain();
    v79 = sub_249DBDDCC(v78);
    swift_bridgeObjectRelease();
    v102[0] = v79;
    sub_249ED276C((uint64_t *)v102);
    swift_bridgeObjectRelease();
    v80 = (char *)v102[0];
    v102[0] = (id)MEMORY[0x24BEE4AF8];
    v81 = *((_QWORD *)v80 + 2);
    if (!v81)
    {
      swift_unknownObjectRelease();

      v46 = (id)MEMORY[0x24BEE4AF8];
LABEL_28:
      swift_release();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v92, v93);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v100, v89);
      v85 = v90;
      CVPixelBufferUnlockBaseAddress(v90, 1uLL);

      return (uint64_t)v46;
    }
    v98 = v80;
    v82 = v80 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v23 = (id)sub_249F1F304();
      swift_bridgeObjectRelease();
      v83 = objc_msgSend(v76, sel_featureValueForName_, v23);

      if (!v83)
        break;
      v23 = objc_msgSend(v83, sel_multiArrayValue);

      if (!v23)
        goto LABEL_30;
      v84 = v23;
      MEMORY[0x24BD05130]();
      if (*(_QWORD *)(((unint64_t)v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v102[0] & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
        sub_249F1F568();
      v82 += 16;
      sub_249F1F598();
      sub_249F1F55C();

      if (!--v81)
      {
        swift_unknownObjectRelease();

        v46 = v102[0];
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_33:

  swift_unexpectedError();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_249EFD318(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;

  v21[0] = a7;
  v21[1] = a8;
  v23 = a1;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE8);
  v12 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCE0);
  v16 = *(_QWORD *)(v15 - 8);
  result = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a5 + 16) <= a6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v20 = *(_QWORD *)(a5 + 8 * a6 + 32);
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v20 >= *(_QWORD *)(a4 + 16))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v16 + 16))(v19, a4+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v20, v15);
  if (*v23)
  {
    if (*(_QWORD *)(a3 + 16))
    {
      if ((unint64_t)(*(_QWORD *)(a3 + 32) - 0x2000000000000000) >> 62 == 3)
      {
        sub_249F1E41C();
        sub_249F1E350();
        sub_249F1E38C();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v22);
        return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      }
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_249EFD4E8()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)sub_249F1F1F0();
  swift_bridgeObjectRelease();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithDictionary_error_, v1, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    sub_249F1E710();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_249EFD5CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_249EFD5E0(a1, a2, a3);
}

uint64_t sub_249EFD5E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_249EFD318(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

unint64_t sub_249EFD604()
{
  unint64_t result;

  result = qword_2578DEAD8;
  if (!qword_2578DEAD8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionImageConditioner.Error, &type metadata for AppleDiffusionImageConditioner.Error);
    atomic_store(result, (unint64_t *)&qword_2578DEAD8);
  }
  return result;
}

uint64_t destroy for AppleDiffusionImageConditioner()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *_s13DiffusionBase30AppleDiffusionImageConditionerVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AppleDiffusionImageConditioner(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AppleDiffusionImageConditioner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppleDiffusionImageConditioner()
{
  return &type metadata for AppleDiffusionImageConditioner;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionImageConditioner.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_249EFD7A8 + 4 * byte_249F32D70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_249EFD7C8 + 4 * byte_249F32D75[v4]))();
}

_BYTE *sub_249EFD7A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_249EFD7C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EFD7D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EFD7D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_249EFD7E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_249EFD7E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionImageConditioner.Error()
{
  return &type metadata for AppleDiffusionImageConditioner.Error;
}

id sub_249EFD804@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_249EBDA9C(a1, a2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MultilingualTextEncoder.loadResources()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6[2];

  v2 = v1;
  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (!v0 || (ManagedMLModel.loadResources()(), !v3))
  {
    v6[0] = 0;
    if (objc_msgSend(v2, sel_loadWithError_, v6))
    {
      v4 = v6[0];
    }
    else
    {
      v5 = v6[0];
      sub_249F1E710();

      swift_willThrow();
    }
  }
}

Swift::Void __swiftcall MultilingualTextEncoder.unloadResources()()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v2 = v1;
  if (v0)
    ManagedMLModel.unloadResources()();
  objc_msgSend(v2, sel_unload);
}

void MultilingualTextEncoder.encode(_:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38[2];

  v38[1] = *(id *)MEMORY[0x24BDAC8D0];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDF0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v31 - v15;
  if (objc_msgSend(a3, sel_hasAvailableAssets))
  {
    v34 = a2;
    v35 = a4;
    v36 = a5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v17 = sub_249E14D88();
    v19 = v18;
    v20 = (void *)sub_249F1F304();
    v38[0] = 0;
    v21 = objc_msgSend(a3, sel_embeddingResultForString_language_error_, v20, 0, v38);

    v22 = v38[0];
    v37 = v21;
    if (v21)
    {
      v32 = v14;
      v33 = v11;
      v38[0] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_249F22C20;
      v24 = v35;
      *(_QWORD *)(v23 + 32) = 1;
      *(_QWORD *)(v23 + 40) = v24;
      v25 = v22;
      *(_QWORD *)(v23 + 48) = objc_msgSend(a3, sel_dimension);
      v31 = sub_249EFF6CC(&qword_2578DDDF8, &qword_2578DDDF0);
      v26 = sub_249F1F0A0();
      MEMORY[0x24BDAC7A8](v26);
      *(&v31 - 6) = (uint64_t)v37;
      *(&v31 - 5) = v17;
      v27 = v34;
      *(&v31 - 4) = v19;
      *(&v31 - 3) = v27;
      *(&v31 - 2) = (uint64_t)a3;
      *(&v31 - 1) = v24;
      sub_249F1EFC8();
      swift_bridgeObjectRelease();
      if (v27)
      {
        sub_249EFDDCC((uint64_t)v16, v27);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v10);

      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
        v30 = v33;
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v16, v10);
        sub_249EFF6CC((unint64_t *)&qword_2578D95F8, &qword_2578D67D8);
        sub_249F1F058();

        (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v10);
      }
    }
    else
    {
      v29 = v38[0];
      swift_bridgeObjectRelease();
      sub_249F1E710();

      swift_willThrow();
    }
  }
  else
  {
    sub_249EFF65C();
    swift_allocError();
    *(_QWORD *)v28 = 0;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t sub_249EFDC7C()
{
  return sub_249F1F91C();
}

uint64_t sub_249EFDD10(uint64_t result, int a2, int a3, uint64_t *a4, _QWORD *a5, int a6, id a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = *(_QWORD *)(result + 16);
  if (v8)
  {
    v11 = 0;
    v12 = result + 32;
    while (1)
    {
      v13 = *a4;
      v14 = *a5;
      result = (uint64_t)objc_msgSend(a7, sel_dimension);
      v15 = v14 * result;
      if ((unsigned __int128)(v14 * (__int128)result) >> 64 != (v14 * result) >> 63)
        break;
      v16 = __OFADD__(v15, v11);
      v17 = v15 + v11;
      if (v16)
        goto LABEL_9;
      *(_QWORD *)(v13 + 8 * v17) = *(_QWORD *)(v12 + 8 * v11++);
      if (v8 == v11)
        goto LABEL_6;
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  else
  {
LABEL_6:
    if (!__OFADD__(*a5, 1))
    {
      ++*a5;
      return 1;
    }
  }
  __break(1u);
  return result;
}

void sub_249EFDDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;

  if (a2)
  {
    v16 = MEMORY[0x24BDAC7A8](a1);
    v4 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue;
    v6 = *(void **)(v5 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
    MEMORY[0x24BDAC7A8](v16);
    sub_249D9D9F4(0, &qword_2578DEB10);
    swift_retain_n();
    v7 = v6;
    sub_249F1F874();
    if (v2)
    {
      swift_release_n();

    }
    else
    {
      swift_release();

      v9 = MEMORY[0x24BDAC7A8](v8);
      MEMORY[0x24BDAC7A8](v9);
      v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDF80);
      sub_249F1F874();

      v13 = MEMORY[0x24BDAC7A8](v12);
      v14 = *(void **)(a2 + v4);
      MEMORY[0x24BDAC7A8](v13);
      swift_retain();
      v15 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      sub_249F1F874();

      swift_unknownObjectRelease();
      swift_release_n();

    }
  }
  else
  {
    sub_249F1FBD4();
    __break(1u);
  }
}

void sub_249EFE0D4(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t inited;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDF0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, sel_modelDescription);
  v12 = objc_msgSend(v11, sel_inputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v13 = sub_249F1F208();

  sub_249ECFC30(v13);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v15)
  {
    v31 = a3;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79D0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249F21770;
    v19 = objc_msgSend(v17, sel_name);
    v20 = sub_249F1F328();
    v32 = v3;
    v21 = v20;
    v23 = v22;

    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(inited + 40) = v23;
    v24 = sub_249D9D9F4(0, &qword_2578DDE20);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
    sub_249EFF6CC(&qword_2578DDDF8, &qword_2578DDDF0);
    v25 = sub_249F1F7FC();
    *(_QWORD *)(inited + 72) = v24;
    *(_QWORD *)(inited + 48) = v25;
    sub_249DAE8D4(inited);
    v26 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v27 = v32;
    v28 = sub_249EFD4E8();

    if (!v27)
      *v31 = v28;
  }
  else
  {
    sub_249EFF65C();
    swift_allocError();
    *(_OWORD *)v29 = xmmword_249F23BD0;
    *(_BYTE *)(v29 + 16) = 2;
    swift_willThrow();
  }
}

void sub_249EFE338(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v3 = objc_msgSend(a1, sel_modelDescription);
  v4 = objc_msgSend(v3, sel_outputDescriptionsByName);

  sub_249D9D9F4(0, (unint64_t *)&qword_2578DDF78);
  v5 = sub_249F1F208();

  sub_249ECFC30(v5);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v9, sel_name);
    if (!v10)
    {
      sub_249F1F328();
      v10 = (id)sub_249F1F304();
      swift_bridgeObjectRelease();
    }
    v11 = objc_msgSend(a2, sel_featureValueForName_, v10);

    if (v11
      && (v12 = objc_msgSend(v11, sel_multiArrayValue), v11, v12))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
      sub_249EFF6CC((unint64_t *)&qword_2578D95F8, &qword_2578D67D8);
      sub_249F1F04C();
    }
    else
    {
      v13 = objc_msgSend(v9, sel_type);
      sub_249EFF65C();
      swift_allocError();
      *(_QWORD *)v14 = 5;
      *(_QWORD *)(v14 + 8) = v13;
      *(_BYTE *)(v14 + 16) = 1;
      swift_willThrow();
    }

  }
  else
  {
    sub_249EFF65C();
    swift_allocError();
    *(_OWORD *)v15 = xmmword_249F23BE0;
    *(_BYTE *)(v15 + 16) = 2;
    swift_willThrow();
  }
}

void sub_249EFE558(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  MultilingualTextEncoder.encode(_:)(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16), a2);
}

void sub_249EFE574()
{
  MultilingualTextEncoder.loadResources()();
}

id sub_249EFE58C()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[1];
  if (*v0)
    ManagedMLModel.unloadResources()();
  return objc_msgSend(v1, sel_unload);
}

unint64_t MultilingualTextEncoder.Error.debugDescription.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unint64_t v4;

  if (a3 > 1u)
  {
    v4 = 0xD000000000000027;
    if (!(a1 ^ 1 | a2))
      v4 = 0xD000000000000026;
    if (a1 | a2)
      return v4;
    else
      return 0xD000000000000080;
  }
  else
  {
    sub_249F1FA84();
    sub_249F1F460();
    type metadata accessor for MLFeatureType(0);
    sub_249F1FB98();
    sub_249F1F460();
    sub_249F1FB98();
    sub_249F1F460();
    return 0;
  }
}

unint64_t sub_249EFE77C()
{
  uint64_t v0;

  return MultilingualTextEncoder.Error.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_249EFE788(uint64_t a1, uint64_t a2)
{
  return _s13DiffusionBase23MultilingualTextEncoderV5ErrorO21__derived_enum_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t Script.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6E6974616CLL;
  if (a1 == 1)
    return 0x63696C6C69727963;
  return 7039587;
}

uint64_t sub_249EFE7F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_249F13284(*a1, *a2);
}

uint64_t sub_249EFE800()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EFE894()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249EFE904()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249EFE994@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase6ScriptO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_249EFE9C0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x63696C6C69727963;
  if (v2 != 1)
  {
    v5 = 7039587;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E6974616CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_249EFEA14(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  void *v8;

  v8 = (void *)MEMORY[0x24BD05FF4]();
  sub_249EFED60(a1, a2, a3, a4);
  objc_autoreleasePoolPop(v8);
}

void sub_249EFEA80(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  uint8_t *v15;
  NSObject *v16;
  os_signpost_type_t v17;
  os_signpost_id_t v18;
  void *v19;
  id v20;
  os_signpost_type_t v21;
  os_signpost_id_t v22;
  _QWORD v23[2];
  void (*v24)(uint64_t *__return_ptr);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;

  sub_249F1B034();
  if (!v3)
  {
    v23[1] = a3;
    v7 = a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_signposter;
    v8 = sub_249F1EED8();
    MEMORY[0x24BDAC7A8](v8);
    v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v28 = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v7, v8);
    v12 = *(const char **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName);
    LOBYTE(v7) = *(_BYTE *)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName + 16);
    v26 = sub_249F1EE9C();
    v27 = v23;
    v25 = *(_QWORD *)(v26 - 8);
    MEMORY[0x24BDAC7A8](v26);
    v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_249F1EEA8();
    v29 = v8;
    v30 = v23;
    v24 = a2;
    if ((v7 & 1) == 0)
    {
      if (v12)
        goto LABEL_9;
      __break(1u);
    }
    if ((unint64_t)v12 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v12 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        return;
      }
      if (v12 >> 16 <= 0x10)
      {
        v12 = &v32;
LABEL_9:
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        v16 = sub_249F1EEC0();
        v17 = sub_249F1F8A4();
        v18 = sub_249F1EE84();
        _os_signpost_emit_with_name_impl(&dword_249D98000, v16, v17, v18, v12, "", v15, 2u);
        v19 = *(void **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
        if (v19)
        {
          v20 = v19;
          v24(&v31);

          v21 = sub_249F1F898();
          v22 = sub_249F1EE84();
          _os_signpost_emit_with_name_impl(&dword_249D98000, v16, v21, v22, v12, "", v15, 2u);

          MEMORY[0x24BD06618](v15, -1, -1);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v26);
          (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v29);
          return;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
}

void sub_249EFED4C(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  sub_249EFEA80(a1, a2, a3);
}

void sub_249EFED60(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  const char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint8_t *v28;
  NSObject *v29;
  os_signpost_type_t v30;
  os_signpost_id_t v31;
  void *v32;
  id v33;
  char *v34;
  os_signpost_id_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char v53;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v39 - v14;
  sub_249F1B034();
  if (!v4)
  {
    v43 = v13;
    v45 = a3;
    v46 = a2;
    v39 = v10;
    v40 = v15;
    v16 = sub_249F1EED8();
    MEMORY[0x24BDAC7A8](v16);
    v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v49 = v20;
    v50 = v19;
    v21 = *(void (**)(void))(v20 + 16);
    v52 = v18;
    v21();
    v22 = *(const char **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName);
    v23 = *(_BYTE *)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName + 16);
    v47 = sub_249F1EE9C();
    v48 = &v39;
    v24 = *(_QWORD *)(v47 - 8);
    MEMORY[0x24BDAC7A8](v47);
    v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_249F1EEA8();
    v41 = v9;
    v42 = a4;
    v51 = &v39;
    v44 = v24;
    if ((v23 & 1) != 0)
    {
      if (!((unint64_t)v22 >> 32))
      {
        if (v22 >> 11 == 27)
        {
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        if (v22 >> 16 <= 0x10)
        {
          v27 = a1;
          v22 = &v53;
LABEL_9:
          v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v28 = 0;
          v29 = sub_249F1EEC0();
          v30 = sub_249F1F8A4();
          v31 = sub_249F1EE84();
          _os_signpost_emit_with_name_impl(&dword_249D98000, v29, v30, v31, v22, "", v28, 2u);
          v32 = *(void **)(v27 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
          if (v32)
          {
            v33 = v32;
            v34 = v43;
            v46();

            LOBYTE(v33) = sub_249F1F898();
            v35 = sub_249F1EE84();
            _os_signpost_emit_with_name_impl(&dword_249D98000, v29, (os_signpost_type_t)v33, v35, v22, "", v28, 2u);

            v36 = v40;
            v37 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
            v38 = v41;
            v37(v40, v34, v41);
            MEMORY[0x24BD06618](v28, -1, -1);
            v37(v42, v36, v38);
            (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v47);
            (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v50);
            return;
          }
LABEL_16:
          __break(1u);
          return;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
      if (v22)
      {
        v27 = a1;
        goto LABEL_9;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
}

void sub_249EFF098(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  uint8_t *v13;
  NSObject *v14;
  os_signpost_type_t v15;
  os_signpost_id_t v16;
  void *v17;
  id v18;
  os_signpost_type_t v19;
  os_signpost_id_t v20;
  char *v21;
  void (*v22)(uint64_t *__return_ptr);
  char **v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  sub_249F1B034();
  if (!v2)
  {
    v22 = a2;
    v5 = a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_signposter;
    v6 = sub_249F1EED8();
    v23 = &v21;
    v7 = *(_QWORD *)(v6 - 8);
    MEMORY[0x24BDAC7A8](v6);
    v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
    v10 = *(const char **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName);
    LOBYTE(v5) = *(_BYTE *)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName + 16);
    v25 = sub_249F1EE9C();
    v26 = &v21;
    v24 = *(_QWORD *)(v25 - 8);
    MEMORY[0x24BDAC7A8](v25);
    v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_249F1EEA8();
    v27 = v7;
    v28 = v6;
    if ((v5 & 1) == 0)
    {
      if (v10)
        goto LABEL_9;
      __break(1u);
    }
    if ((unint64_t)v10 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v10 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        return;
      }
      if (v10 >> 16 <= 0x10)
      {
        v10 = &v30;
LABEL_9:
        v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v13 = 0;
        v21 = v9;
        v14 = sub_249F1EEC0();
        v15 = sub_249F1F8A4();
        v16 = sub_249F1EE84();
        _os_signpost_emit_with_name_impl(&dword_249D98000, v14, v15, v16, v10, "", v13, 2u);
        v17 = *(void **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
        if (v17)
        {
          v18 = v17;
          v22(&v29);

          v19 = sub_249F1F898();
          v20 = sub_249F1EE84();
          _os_signpost_emit_with_name_impl(&dword_249D98000, v14, v19, v20, v10, "", v13, 2u);

          MEMORY[0x24BD06618](v13, -1, -1);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
          return;
        }
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
}

uint64_t _s13DiffusionBase23MultilingualTextEncoderV5ErrorO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1)
        return a1 == a4 && a2 == a5;
      return 0;
    }
    if (a1 | a2)
    {
      if (a1 ^ 1 | a2)
      {
        if (a6 != 2 || a4 != 2)
          return 0;
      }
      else if (a6 != 2 || a4 != 1)
      {
        return 0;
      }
      if (a5)
        return 0;
    }
    else if (a6 != 2 || a5 | a4)
    {
      return 0;
    }
    return 1;
  }
  if (a6)
    return 0;
  return a1 == a4 && a2 == a5;
}

uint64_t _s13DiffusionBase23MultilingualTextEncoderV7modelAt13configuration6scriptAC10Foundation3URLVSg_So20MLModelConfigurationCAA6ScriptOtcfC_0(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t result;
  _BYTE v22[16];
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_249F1E7F4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v22[-v14];
  sub_249EC2668(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_249DE7F50((uint64_t)v8);
    v16 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v15, v8, v9);
    (*(void (**)(char *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
    type metadata accessor for ManagedMLModel();
    swift_allocObject();
    v16 = ManagedMLModel.init(modelAt:configuration:name:)(v13, a2, (uint64_t)"MultilingualTextEncoder", 23, 2);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
  }
  v17 = objc_msgSend((id)objc_opt_self(), sel_contextualEmbeddingWithScript_, **((_QWORD **)&unk_251B5EF58 + a3));
  if (v17)
  {
    v18 = v17;
    aBlock[4] = nullsub_1;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_249E11B88;
    aBlock[3] = &block_descriptor_14;
    v19 = _Block_copy(aBlock);
    v20 = v18;
    objc_msgSend(v20, sel_requestEmbeddingAssetsWithCompletionHandler_, v19);
    _Block_release(v19);

    sub_249DE7F50(a1);
    return v16;
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

unint64_t sub_249EFF65C()
{
  unint64_t result;

  result = qword_2578DEB00;
  if (!qword_2578DEB00)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for MultilingualTextEncoder.Error, &type metadata for MultilingualTextEncoder.Error);
    atomic_store(result, (unint64_t *)&qword_2578DEB00);
  }
  return result;
}

uint64_t sub_249EFF6A0()
{
  return sub_249EFDC7C();
}

uint64_t sub_249EFF6CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD06528](MEMORY[0x24BDBFCD0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s13DiffusionBase6ScriptO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_249EFF75C()
{
  unint64_t result;

  result = qword_2578DEB08;
  if (!qword_2578DEB08)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for Script, &type metadata for Script);
    atomic_store(result, (unint64_t *)&qword_2578DEB08);
  }
  return result;
}

_QWORD *sub_249EFF7A4(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for MultilingualTextEncoder(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for MultilingualTextEncoder(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for MultilingualTextEncoder()
{
  return &type metadata for MultilingualTextEncoder;
}

uint64_t sub_249EFF890(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_249EFF8A8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MultilingualTextEncoder.Error()
{
  return &type metadata for MultilingualTextEncoder.Error;
}

uint64_t storeEnumTagSinglePayload for Script(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249EFF91C + 4 * byte_249F32EB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249EFF950 + 4 * asc_249F32EB0[v4]))();
}

uint64_t sub_249EFF950(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EFF958(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249EFF960);
  return result;
}

uint64_t sub_249EFF96C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249EFF974);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249EFF978(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249EFF980(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Script()
{
  return &type metadata for Script;
}

void sub_249EFF99C(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_249EFE0D4(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_249EFF9B4(void *a1)
{
  uint64_t v1;

  sub_249EFE338(a1, *(void **)(v1 + 16));
}

void sub_249EFF9CC(char *a1@<X8>)
{
  uint64_t v1;

  sub_249EFEA14(*(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_249EFF9E8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  return sub_249EFDD10(a1, a2, a3, *(uint64_t **)(v3 + 16), *(_QWORD **)(v3 + 24), *(_QWORD *)(v3 + 32), *(id *)(v3 + 40));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

void AppleDiffusionPipeline.ResourceURLs.init(resourcesAt:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD);
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD v38[10];
  void (*v39)(unint64_t, char *, uint64_t);
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  void (*v42)(_QWORD, _QWORD);
  unint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v4 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v38[9] = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v46 = sub_249F1E770();
  v49 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_249F1E7F4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v38 - v12;
  v14 = (int *)type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v15 = v14[8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB48);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_249F21910;
  *(_QWORD *)(v16 + 32) = &unk_251B5AB30;
  *(_QWORD *)(v16 + 40) = &unk_251B5AB58;
  *(_QWORD *)&a2[v15] = v16;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17(&a2[v14[5]], a1, v8);
  v40 = v17;
  v17(v13, a1, v8);
  v18 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v19 = swift_allocObject();
  v39 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 32);
  v39(v19 + v18, v13, v8);
  v38[2] = v14;
  v20 = v14[6];
  v38[3] = a2;
  v21 = (uint64_t (**))&a2[v20];
  *v21 = sub_249F00A04;
  v21[1] = (uint64_t (*))v19;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v51[0] = 0xD000000000000024;
  v51[1] = 0x8000000249F39BF0;
  v23 = *MEMORY[0x24BDCD790];
  v24 = v49;
  v25 = v46;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 104);
  v44(v7, v23, v46);
  v43 = sub_249D9E5BC();
  v47 = a1;
  sub_249F1E7E8();
  v26 = *(void (**)(_QWORD, _QWORD))(v24 + 8);
  v45 = v7;
  v42 = v26;
  v26(v7, v25);
  swift_bridgeObjectRelease();
  sub_249F1E7AC();
  v48 = v9;
  v49 = v8;
  v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v38[8] = v13;
  v27(v13, v8);
  v28 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  LODWORD(v25) = objc_msgSend(v22, sel_fileExistsAtPath_, v28);

  if ((_DWORD)v25)
  {
    if (qword_2578DDA10 != -1)
      swift_once();
    v29 = sub_249F1EF38();
    __swift_project_value_buffer(v29, (uint64_t)qword_2578FF458);
    v30 = v41;
    v31 = v49;
    v40(v41, v47, v49);
    v32 = sub_249F1EF20();
    v33 = sub_249F1F820();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v51[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v40 = (void (*)(char *, uint64_t, uint64_t))(v34 + 4);
      sub_249F07004();
      v36 = sub_249F1FE08();
      v50 = sub_249E68CA8(v36, v37, v51);
      sub_249F1F9AC();
      swift_bridgeObjectRelease();
      v27(v30, v31);
      _os_log_impl(&dword_249D98000, v32, v33, "Found an M2 model for local conditioning producer at %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD06618](v35, -1, -1);
      MEMORY[0x24BD06618](v34, -1, -1);
    }
    else
    {
      v27(v30, v31);
    }

  }
  v38[1] = v27;
  sub_249EAFA94(MEMORY[0x24BEE4AF8]);
  LODWORD(v41) = *MEMORY[0x24BDCD798];
  v40 = (void (*)(char *, uint64_t, uint64_t))0x8000000249F39C20;
  v38[6] = "personalized_illustration";
  v38[7] = "personalized_emoji";
  v38[4] = "with negative count";
  v38[5] = "personalized_sketch";
  __asm { BR              X9 }
}

uint64_t type metadata accessor for AppleDiffusionPipeline.ResourceURLs()
{
  uint64_t result;

  result = qword_2578DEB90;
  if (!qword_2578DEB90)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249F0033C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_249F00378 + 4 * byte_249F33091[a1]))(0xD000000000000018, 0x8000000249F39DD0);
}

unint64_t sub_249F00378()
{
  return 0xD00000000000001ELL;
}

void sub_249F0040C()
{
  JUMPOUT(0x249F00418);
}

void *static AppleDiffusionPipeline.ComponentModel.allCases.getter()
{
  return &unk_251B5AB80;
}

uint64_t AppleDiffusionPipeline.ComponentModel.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249F00460 + 4 * byte_249F3309C[a1]))(1952804469, 0xE400000000000000);
}

uint64_t sub_249F00460()
{
  return 0x6E75684374656E75;
}

uint64_t sub_249F0047C()
{
  return 0x6E75684374656E75;
}

uint64_t sub_249F0049C()
{
  return 0x6F636E4570696C63;
}

uint64_t sub_249F004BC()
{
  return 0x7265646F636E65;
}

uint64_t sub_249F004D8()
{
  return 0x7265646F636564;
}

uint64_t sub_249F004F0()
{
  return 0x6365446168706C61;
}

unint64_t sub_249F00510()
{
  return 0xD000000000000011;
}

uint64_t sub_249F00570(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = AppleDiffusionPipeline.ComponentModel.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == AppleDiffusionPipeline.ComponentModel.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_249F005F8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_249F1FF64();
  AppleDiffusionPipeline.ComponentModel.rawValue.getter(v1);
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F00658()
{
  unsigned __int8 *v0;

  AppleDiffusionPipeline.ComponentModel.rawValue.getter(*v0);
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249F00698()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_249F1FF64();
  AppleDiffusionPipeline.ComponentModel.rawValue.getter(v1);
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F006F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase05AppleA8PipelineV14ComponentModelO8rawValueAESgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_249F00720@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AppleDiffusionPipeline.ComponentModel.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_249F00748(_QWORD *a1@<X8>)
{
  *a1 = &unk_251B5AB80;
}

uint64_t AppleDiffusionPipeline.ResourceURLs.catalogVersion.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppleDiffusionPipeline.ResourceURLs.catalogVersion.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AppleDiffusionPipeline.ResourceURLs.catalogVersion.modify())()
{
  return nullsub_1;
}

uint64_t AppleDiffusionPipeline.ResourceURLs.baseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AppleDiffusionPipeline.ResourceURLs() + 20);
  v4 = sub_249F1E7F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AppleDiffusionPipeline.ResourceURLs.urlForComponent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AppleDiffusionPipeline.ResourceURLs() + 24));
  swift_retain();
  return v1;
}

uint64_t AppleDiffusionPipeline.ResourceURLs.urlForAdapter.getter()
{
  type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionPipeline.ResourceURLs.urlForAdapter.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AppleDiffusionPipeline.ResourceURLs() + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AppleDiffusionPipeline.ResourceURLs.urlForAdapter.modify())(_QWORD)
{
  type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  return nullsub_1;
}

uint64_t sub_249F008D0(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = sub_249F1E770();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = sub_249F0033C(a1);
  v8[1] = v6;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
  sub_249D9E5BC();
  sub_249F1E7DC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_249F009A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_249F1E7F4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_249F00A04(unsigned __int8 a1)
{
  sub_249F1E7F4();
  return sub_249F008D0(a1);
}

uint64_t AppleDiffusionPipeline.ResourceURLs.requiredComponentCombinations.getter()
{
  type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  return swift_bridgeObjectRetain();
}

void AppleDiffusionPipeline.ResourceURLs.validate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  id v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;

  v1 = sub_249F1E770();
  v19 = *(_QWORD *)(v1 - 8);
  v20 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v18 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_249F1E7F4();
  v17 = *(_QWORD *)(v23 - 8);
  v3 = MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - v5;
  sub_249EAFD44(MEMORY[0x24BEE4AF8]);
  v7 = v0 + *(int *)(type metadata accessor for AppleDiffusionPipeline.ResourceURLs() + 24);
  v16 = *MEMORY[0x24BDCD798];
  v8 = *(void (**)(_QWORD))v7;
  v15[2] = *(_QWORD *)(v7 + 8);
  v15[3] = v8;
  v15[1] = v6;
  v8(0);
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  sub_249F1E7AC();
  v10 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v9, sel_fileExistsAtPath_isDirectory_, v10, 0);

  v25 = 0x646C6D65726F632FLL;
  v26 = 0xEF6E69622E617461;
  v12 = v18;
  v11 = v19;
  v13 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v18, v16, v20);
  sub_249D9E5BC();
  sub_249F1E7DC();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);
  swift_bridgeObjectRelease();
  sub_249F1E800();
  v21 = &unk_251B5ABA1;
  __asm { BR              X9 }
}

uint64_t AppleDiffusionPipeline.init(resources:configuration:reduceMemory:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void (**v21)(uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t);
  void (*v24)(_QWORD, _QWORD);
  void *v25;
  unsigned int v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void (*v39)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD, _QWORD);
  id v56;
  void *v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  unsigned __int8 v66;
  void (**v67)(uint64_t);
  char *v68;
  void (*v69)(_QWORD, _QWORD);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD, _QWORD);
  id v78;
  void *v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  void (*v90)(_QWORD, _QWORD);
  char *v91;
  char *v92;
  int *v93;
  id v94;
  char *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (**v102)(uint64_t);
  uint64_t v103;
  _BYTE v104[200];
  _OWORD v105[6];
  int v106;

  v106 = a3;
  v97 = a2;
  v88 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v92 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v91 = (char *)&v88 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v100 = (uint64_t)&v88 - v10;
  v11 = (int *)type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  MEMORY[0x24BDAC7A8](v11);
  v99 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_249F1E7F4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v89 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v88 - v17;
  v19 = (void *)objc_opt_self();
  v20 = objc_msgSend(v19, sel_defaultManager);
  v93 = v11;
  v21 = (void (**)(uint64_t))(a1 + v11[6]);
  v22 = a1;
  v23 = *v21;
  v102 = v21;
  v23(1);
  sub_249F1E7B8();
  v101 = v14;
  v24 = *(void (**)(_QWORD, _QWORD))(v14 + 8);
  v103 = v13;
  v24(v18, v13);
  v25 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v20, sel_fileExistsAtPath_, v25);

  v27 = v99;
  v96 = v22;
  sub_249ECE024(v22, v99);
  v94 = v19;
  v95 = v18;
  v90 = v24;
  if (v26)
  {
    v28 = objc_msgSend(v19, sel_defaultManager, v88);
    v29 = v27;
    (*(void (**)(uint64_t))(v27 + v93[6]))(2);
    sub_249F1E7B8();
    v24(v18, v103);
    v30 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v28, (SEL)0x251B66FD7, v30);

    sub_249ECDFE8(v29);
    if ((v31 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD90);
      v32 = v101;
      v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_249F21910;
      v34 = *v102;
      (*v102)(1);
      v35 = v32;
      v36 = 2;
      goto LABEL_6;
    }
  }
  else
  {
    sub_249ECDFE8(v27);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD90);
  v35 = v101;
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_249F21770;
  v34 = *v102;
  v36 = 0;
LABEL_6:
  v34(v36);
  v38 = v97;
  v37 = v98;
  v39 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v35 + 56);
  v40 = v100;
  v41 = v103;
  v39(v100, 1, 1, v103);
  v42 = v38;
  sub_249EC4590(v33, v42, v40, 9, (uint64_t)v104);
  if (!v37)
  {
    v97 = 0;
    v43 = (uint64_t)v95;
    v34(5);
    v44 = v91;
    v34(6);
    v39(v44, 0, 1, v41);
    v45 = (uint64_t)v92;
    v34(10);
    v39(v45, 0, 1, v41);
    v46 = v42;
    v47 = (uint64_t)v44;
    v48 = v46;
    v98 = _s13DiffusionBase7DecoderV7modelAt010alphaModelE0012skinPresencegE013configurationAC10Foundation3URLV_AJSgAKSo20MLModelConfigurationCtcfC_0(v43, v47, v45, v46);
    v99 = v49;
    v100 = v50;
    v34(7);
    v51 = sub_249F1E7B8();
    v53 = v52;
    v54 = v43;
    v55 = v90;
    v90(v54, v41);
    v56 = objc_msgSend(v94, sel_defaultManager);
    v57 = (void *)sub_249F1F304();
    LOBYTE(v45) = objc_msgSend(v56, sel_fileExistsAtPath_, v57);

    if ((v45 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v58 = *v102;
      v59 = (uint64_t)v95;
      (*v102)(7);
      v60 = v48;
      sub_249EDA590(v59, v60, (uint64_t)v105);
      sub_249EB6F18((uint64_t)v105);
      v58(8);
      v61 = sub_249F1E7B8();
      v63 = v62;
      v55(v59, v41);
      v64 = objc_msgSend(v94, sel_defaultManager);
      v65 = (void *)sub_249F1F304();
      v66 = objc_msgSend(v64, sel_fileExistsAtPath_, v65);

      if ((v66 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v67 = v102;
        v68 = v95;
        (*v102)(8);
        v69 = v55;
        v70 = v41;
        v71 = v89;
        v92 = *(char **)(v101 + 16);
        ((void (*)(char *, char *, uint64_t))v92)(v89, v68, v70);
        type metadata accessor for ManagedMLModel();
        swift_allocObject();
        v93 = (int *)v60;
        v72 = ManagedMLModel.init(modelAt:configuration:name:)(v71, v93, (uint64_t)"global_conditioning_producer_reference_image", 44, 2);
        v69(v68, v70);
        v73 = *v67;
        v101 = v72;
        swift_retain();
        v73(9);
        v74 = sub_249F1E7B8();
        v76 = v75;
        v77 = v69;
        v69(v68, v70);
        v78 = objc_msgSend(v94, sel_defaultManager);
        v79 = (void *)sub_249F1F304();
        LOBYTE(v72) = objc_msgSend(v78, sel_fileExistsAtPath_, v79);

        if ((v72 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v80 = v95;
          (*v102)(9);
          v81 = v89;
          ((void (*)(char *, char *, uint64_t))v92)(v89, v80, v70);
          swift_allocObject();
          v82 = v93;
          v83 = ManagedMLModel.init(modelAt:configuration:name:)(v81, v82, (uint64_t)"local_conditioning_producer_skintone_emoji", 42, 2);
          v77(v80, v70);
          swift_retain();
          AppleDiffusionPipeline.init(unet:encoder:decoder:sketchConditioner:imageConditioner:retoningConditioner:reduceMemory:)((uint64_t)v104, 0, 0, v98, v99, v100, v105, v101, v88, 0xD000000000000013, 0x8000000249F38BD0, v83, v106);
          swift_release();
          swift_release();

          sub_249EB70F8((uint64_t)v105);
          return sub_249ECDFE8(v96);
        }
        swift_release();
        sub_249EB70F8((uint64_t)v105);
        sub_249EB6FC0((uint64_t)v104);
        sub_249EB70B4();
        swift_allocError();
        *(_QWORD *)v86 = v74;
        *(_QWORD *)(v86 + 8) = v76;
        *(_BYTE *)(v86 + 16) = 2;
        swift_willThrow();
        swift_release();

      }
      else
      {
        sub_249EB70F8((uint64_t)v105);
        sub_249EB6FC0((uint64_t)v104);
        sub_249EB70B4();
        swift_allocError();
        *(_QWORD *)v85 = v61;
        *(_QWORD *)(v85 + 8) = v63;
        *(_BYTE *)(v85 + 16) = 1;
        swift_willThrow();

      }
      sub_249EB70F8((uint64_t)v105);
      swift_release();
    }
    else
    {
      sub_249EB6FC0((uint64_t)v104);
      sub_249EB70B4();
      swift_allocError();
      *(_QWORD *)v84 = v51;
      *(_QWORD *)(v84 + 8) = v53;
      *(_BYTE *)(v84 + 16) = 0;
      swift_willThrow();
      swift_release();

    }
    swift_release();
    swift_release();
    return sub_249ECDFE8(v96);
  }

  return sub_249ECDFE8(v96);
}

uint64_t AppleDiffusionPipeline.init(resourcesAt:configuration:reduceMemory:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v8 = sub_249F1E7F4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  AppleDiffusionPipeline.ResourceURLs.init(resourcesAt:)((uint64_t)v11, v17);
  sub_249ECE024((uint64_t)v17, (uint64_t)v15);
  AppleDiffusionPipeline.init(resources:configuration:reduceMemory:)((uint64_t)v15, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return sub_249ECDFE8((uint64_t)v17);
}

uint64_t sub_249F018D8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE40);
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v10 <= 1)
  {
    swift_release();
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_17;
  v14 = 2;
  if (v10 <= 2)
    goto LABEL_19;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_17:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_18:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    sub_249F1FF64();
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v10 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x249F01CC8);
      }
      if (v14 >= v10)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_17;
    }
  }
LABEL_19:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_26;
LABEL_22:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F01CE8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE38);
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v10 <= 1)
  {
    swift_release();
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_17;
  v14 = 2;
  if (v10 <= 2)
    goto LABEL_19;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_17:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_18:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    sub_249F1FF64();
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v10 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x249F020D8);
      }
      if (v14 >= v10)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_17;
    }
  }
LABEL_19:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_26;
LABEL_22:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F020F8(uint64_t a1, char a2)
{
  return sub_249F02450(a1, a2, &qword_2578DDDD0);
}

uint64_t sub_249F02104(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t i;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEBE0);
  v38 = a2;
  v6 = sub_249F1FC10();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v35)
          goto LABEL_33;
        v22 = v36[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_33;
          v22 = v36[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v38 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v22 = v36[v13];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v13 = v23;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v20);
      v30 = *v28;
      v29 = v28[1];
      v32 = v28[2];
      v31 = v28[3];
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((v38 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_249F1FF64();
      swift_bridgeObjectRetain();
      sub_249F1F40C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_249F1F40C();
      swift_bridgeObjectRelease();
      result = sub_249F1FFA0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 32 * v17);
      *v18 = v30;
      v18[1] = v29;
      v18[2] = v32;
      v18[3] = v31;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_249F02444(uint64_t a1, char a2)
{
  return sub_249F02450(a1, a2, &qword_2578DEBD8);
}

uint64_t sub_249F02450(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = sub_249F1FC10();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    sub_249F1FF64();
    sub_249F1F40C();
    result = sub_249F1FFA0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_249F02758(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;

  v3 = v2;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v5 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD88);
  v43 = a2;
  v8 = sub_249F1FC10();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v40 = v2;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 64);
    v42 = (_QWORD *)(v7 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v41 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41)
          goto LABEL_34;
        v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v41)
            goto LABEL_34;
          v22 = v42[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              v3 = v40;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v7 + 32);
                if (v38 >= 64)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v7 + 16) = 0;
              }
              break;
            }
            v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v41)
                  goto LABEL_34;
                v22 = v42[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = *(_QWORD *)(v7 + 56);
      v25 = v7;
      v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v5 + 72);
      v30 = v24 + v29 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v30, v45);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v44, v30, v45);
        swift_bridgeObjectRetain();
      }
      sub_249F1FF64();
      sub_249F1F40C();
      result = sub_249F1FFA0();
      v31 = -1 << *(_BYTE *)(v9 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v14 + 8 * v33);
        }
        while (v37 == -1);
        v17 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v28;
      v18[1] = v27;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v9 + 56) + v29 * v17, v44, v45);
      ++*(_QWORD *)(v9 + 16);
      v7 = v25;
    }
  }
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t sub_249F02AC4(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  int64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v32 = sub_249F1E7F4();
  v5 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD60);
  v9 = sub_249F1FC10();
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_28;
  v24 = v2;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = *(_QWORD *)(v8 + 64);
  v30 = (_QWORD *)(v8 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v29 = (unint64_t)(v10 + 63) >> 6;
  swift_retain();
  HIDWORD(v23) = a2;
  v14 = 16;
  if ((a2 & 1) != 0)
    v14 = 32;
  v31 = v14;
  v27 = "personalized_illustration";
  v28 = "personalized_emoji";
  v25 = "with negative count";
  v26 = "personalized_sketch";
  if (v13)
  {
    v15 = __clz(__rbit64(v13));
    goto LABEL_20;
  }
  if (v29 <= 1)
  {
    swift_release();
    v3 = v24;
    v16 = v30;
    if ((v23 & 0x100000000) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v16 = v30;
  v17 = v30[1];
  v18 = 1;
  if (v17)
    goto LABEL_19;
  v18 = 2;
  if (v29 <= 2)
    goto LABEL_21;
  v17 = v30[2];
  if (v17)
  {
LABEL_19:
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_20:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + v15);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + v31))(v7, *(_QWORD *)(v8 + 56) + *(_QWORD *)(v5 + 72) * v15, v32);
    sub_249F1FF64();
    __asm { BR              X8 }
  }
  v19 = 3;
  if (v29 > 3)
  {
    v17 = v30[3];
    if (v17)
    {
      v18 = 3;
      goto LABEL_19;
    }
    while (1)
    {
      v18 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        JUMPOUT(0x249F02F5CLL);
      }
      if (v18 >= v29)
        break;
      v17 = v30[v18];
      ++v19;
      if (v17)
        goto LABEL_19;
    }
  }
LABEL_21:
  swift_release();
  v3 = v24;
  if ((v23 & 0x100000000) == 0)
    goto LABEL_28;
LABEL_24:
  v21 = 1 << *(_BYTE *)(v8 + 32);
  if (v21 >= 64)
    bzero(v16, ((unint64_t)(v21 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v16 = -1 << v21;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t sub_249F02F80(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  int64_t v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCD0);
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v18 = a2;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v19 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v19 <= 2)
    goto LABEL_19;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    sub_249F1FF64();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v19 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x249F033D8);
      }
      if (v13 >= v19)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_19:
  swift_release();
  if ((v18 & 1) == 0)
    goto LABEL_26;
LABEL_22:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F03404(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD18);
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v18 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_249F1FF64();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v18 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x249F0384CLL);
      }
      if (v13 >= v18)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F03878(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  char v26;
  _OWORD v27[7];
  _BYTE v28[29];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD20);
  v26 = a2;
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v25 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    if ((v26 & 1) != 0)
    {
LABEL_7:
      v11 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
      goto LABEL_20;
    }
LABEL_19:
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    v16 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 144 * v10);
    v27[0] = *v16;
    v17 = v16[4];
    v19 = v16[1];
    v18 = v16[2];
    v27[3] = v16[3];
    v27[4] = v17;
    v27[1] = v19;
    v27[2] = v18;
    v21 = v16[6];
    v20 = v16[7];
    v22 = v16[5];
    *(_OWORD *)&v28[13] = *(_OWORD *)((char *)v16 + 125);
    v27[6] = v21;
    *(_OWORD *)v28 = v20;
    v27[5] = v22;
    sub_249E93024((uint64_t *)v27);
LABEL_20:
    sub_249F1FF64();
    __asm { BR              X9 }
  }
  if (v25 <= 1)
  {
    swift_release();
    v12 = (_QWORD *)(v5 + 64);
    if ((v26 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_18;
  v14 = 2;
  if (v25 > 2)
  {
    v13 = *(_QWORD *)(v5 + 80);
    if (v13)
      goto LABEL_18;
    v15 = 3;
    if (v25 > 3)
    {
      v13 = *(_QWORD *)(v5 + 88);
      if (v13)
      {
        v14 = 3;
LABEL_18:
        v10 = __clz(__rbit64(v13)) + (v14 << 6);
        if ((v26 & 1) != 0)
          goto LABEL_7;
        goto LABEL_19;
      }
      while (1)
      {
        v14 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          JUMPOUT(0x249F03E00);
        }
        if (v14 >= v25)
          break;
        v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
        ++v15;
        if (v13)
          goto LABEL_18;
      }
    }
  }
  swift_release();
  if ((v26 & 1) != 0)
  {
LABEL_24:
    v23 = 1 << *(_BYTE *)(v5 + 32);
    if (v23 >= 64)
      bzero(v12, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v12 = -1 << v23;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F03E2C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  _QWORD *v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD28);
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v19 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 > 1)
  {
    v11 = *(_QWORD *)(v5 + 72);
    v12 = 1;
    if (v11)
      goto LABEL_17;
    v12 = 2;
    if (v18 > 2)
    {
      v11 = *(_QWORD *)(v5 + 80);
      if (!v11)
      {
        v13 = 3;
        if (v18 > 3)
        {
          v11 = *(_QWORD *)(v5 + 88);
          if (v11)
          {
            v12 = 3;
            goto LABEL_17;
          }
          while (1)
          {
            v12 = v13 + 1;
            if (__OFADD__(v13, 1))
            {
              __break(1u);
              JUMPOUT(0x249F0425CLL);
            }
            if (v12 >= v18)
              break;
            v11 = v19[v12];
            ++v13;
            if (v11)
              goto LABEL_17;
          }
        }
        goto LABEL_21;
      }
LABEL_17:
      v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_18:
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
      if ((a2 & 1) == 0)
        v15 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v10);
      sub_249F1FF64();
      __asm { BR              X8 }
    }
  }
LABEL_21:
  swift_release();
  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v16 = 1 << *(_BYTE *)(v5 + 32);
    if (v16 >= 64)
      bzero(v19, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v19 = -1 << v16;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F04288(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD40);
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v18 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_249F1FF64();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v18 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x249F046A8);
      }
      if (v13 >= v18)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F046CC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  char v26;
  _OWORD v27[7];
  _BYTE v28[29];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD38);
  v26 = a2;
  v6 = sub_249F1FC10();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v25 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    if ((v26 & 1) != 0)
    {
LABEL_7:
      v11 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
      goto LABEL_20;
    }
LABEL_19:
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    v16 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 144 * v10);
    v27[0] = *v16;
    v17 = v16[4];
    v19 = v16[1];
    v18 = v16[2];
    v27[3] = v16[3];
    v27[4] = v17;
    v27[1] = v19;
    v27[2] = v18;
    v21 = v16[6];
    v20 = v16[7];
    v22 = v16[5];
    *(_OWORD *)&v28[13] = *(_OWORD *)((char *)v16 + 125);
    v27[6] = v21;
    *(_OWORD *)v28 = v20;
    v27[5] = v22;
    sub_249E93024((uint64_t *)v27);
LABEL_20:
    sub_249F1FF64();
    __asm { BR              X9 }
  }
  if (v25 <= 1)
  {
    swift_release();
    v12 = (_QWORD *)(v5 + 64);
    if ((v26 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_18;
  v14 = 2;
  if (v25 > 2)
  {
    v13 = *(_QWORD *)(v5 + 80);
    if (v13)
      goto LABEL_18;
    v15 = 3;
    if (v25 > 3)
    {
      v13 = *(_QWORD *)(v5 + 88);
      if (v13)
      {
        v14 = 3;
LABEL_18:
        v10 = __clz(__rbit64(v13)) + (v14 << 6);
        if ((v26 & 1) != 0)
          goto LABEL_7;
        goto LABEL_19;
      }
      while (1)
      {
        v14 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          JUMPOUT(0x249F04C2CLL);
        }
        if (v14 >= v25)
          break;
        v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
        ++v15;
        if (v13)
          goto LABEL_18;
      }
    }
  }
  swift_release();
  if ((v26 & 1) != 0)
  {
LABEL_24:
    v23 = 1 << *(_BYTE *)(v5 + 32);
    if (v23 >= 64)
      bzero(v12, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v12 = -1 << v23;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_249F04C50(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD30);
  v37 = a2;
  v6 = sub_249F1FC10();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_33;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_249F1FF64();
    sub_249F1F40C();
    swift_bridgeObjectRelease();
    result = sub_249F1FFA0();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v22;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14);
    *v15 = v25;
    v15[1] = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_249F04FB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE40);
  v2 = *v0;
  v3 = sub_249F1FC04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + 4 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + 4 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F0513C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDE38);
  v2 = *v0;
  v3 = sub_249F1FC04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_249F052C8()
{
  return sub_249F0549C(&qword_2578DDDD0);
}

void *sub_249F052D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEBE0);
  v2 = *v0;
  v3 = sub_249F1FC04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = 8 * v15;
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v22);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = v19;
    v24[1] = v18;
    v24[2] = v20;
    v24[3] = v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v22) = v23;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_249F05490()
{
  return sub_249F0549C(&qword_2578DEBD8);
}

id sub_249F0549C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_249F1FC04();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F05644()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v1 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD88);
  v30 = v0;
  v4 = *v0;
  v5 = sub_249F1FC04();
  v6 = *(_QWORD *)(v4 + 16);
  v34 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v28 = v34;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v34;
  }
  v31 = v4 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v11 = 1 << *(_BYTE *)(v4 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v4 + 64);
  v32 = (unint64_t)(v11 + 63) >> 6;
  v14 = v33;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_22:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v21, v14);
    v22 = v34;
    v23 = (_QWORD *)(*(_QWORD *)(v34 + 48) + v17);
    *v23 = v20;
    v23[1] = v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v22 + 56) + v21, v3, v14);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release();
    v27 = v30;
    v28 = v34;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_249F058A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = sub_249F1E7F4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD60);
  v23 = v0;
  v5 = *v0;
  v6 = sub_249F1FC04();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v18, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v18, v4, v1);
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F05AC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char v17;
  _BYTE *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDCD0);
  v2 = *v0;
  v3 = sub_249F1FC04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v12 = (v20 - 1) & v20;
    v15 = v22 + (v9 << 6);
LABEL_12:
    v16 = (char *)(*(_QWORD *)(v2 + 56) + 2 * v15);
    v17 = *v16;
    LOBYTE(v16) = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v18 = (_BYTE *)(*(_QWORD *)(v4 + 56) + 2 * v15);
    *v18 = v17;
    v18[1] = (_BYTE)v16;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F05C60()
{
  return sub_249F05E24(&qword_2578DDD18);
}

void *sub_249F05C6C()
{
  return sub_249F05FC8(&qword_2578DDD20);
}

id sub_249F05C78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD28);
  v2 = *v0;
  v3 = sub_249F1FC04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F05E18()
{
  return sub_249F05E24(&qword_2578DDD40);
}

void *sub_249F05E24(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_249F1FC04();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F05FBC()
{
  return sub_249F05FC8(&qword_2578DDD38);
}

void *sub_249F05FC8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[29];

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_249F1FC04();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v32 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v14)
      goto LABEL_26;
    v33 = *(_QWORD *)(v7 + 8 * v32);
    ++v10;
    if (!v33)
    {
      v10 = v32 + 1;
      if (v32 + 1 >= v14)
        goto LABEL_26;
      v33 = *(_QWORD *)(v7 + 8 * v10);
      if (!v33)
        break;
    }
LABEL_25:
    v13 = (v33 - 1) & v33;
    v16 = __clz(__rbit64(v33)) + (v10 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    v18 = (__int128 *)(*(_QWORD *)(v3 + 56) + 144 * v16);
    v20 = v18[1];
    v19 = v18[2];
    v21 = v18[4];
    v38 = v18[3];
    v39 = v21;
    v23 = v18[6];
    v22 = v18[7];
    v24 = v18[5];
    *(_OWORD *)&v42[13] = *(__int128 *)((char *)v18 + 125);
    v41 = v23;
    *(_OWORD *)v42 = v22;
    v40 = v24;
    v35 = *v18;
    v36 = v20;
    v37 = v19;
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = v17;
    v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 144 * v16);
    *v25 = v35;
    v26 = v36;
    v27 = v37;
    v28 = v39;
    v25[3] = v38;
    v25[4] = v28;
    v25[1] = v26;
    v25[2] = v27;
    v29 = v40;
    v30 = v41;
    v31 = *(_OWORD *)v42;
    *(_OWORD *)((char *)v25 + 125) = *(_OWORD *)&v42[13];
    v25[6] = v30;
    v25[7] = v31;
    v25[5] = v29;
    result = sub_249E93024((uint64_t *)&v35);
  }
  v34 = v32 + 2;
  if (v34 >= v14)
    goto LABEL_26;
  v33 = *(_QWORD *)(v7 + 8 * v34);
  if (v33)
  {
    v10 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v33 = *(_QWORD *)(v7 + 8 * v10);
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_249F061D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD30);
  v2 = *v0;
  v3 = sub_249F1FC04();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_249F0637C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_249F1FA18();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_249F1FF64();
        swift_bridgeObjectRetain();
        sub_249F1F40C();
        v9 = sub_249F1FFA0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_249F06588(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = result;
  v4 = a2 + 64;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(a2 + 32));
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    result = sub_249F1FA18();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v5);
      sub_249F1FF64();
      __asm { BR              X8 }
    }
    v7 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v8 = *v7;
    v9 = (-1 << v3) - 1;
  }
  else
  {
    v7 = (uint64_t *)(v4 + 8 * (result >> 6));
    v9 = *v7;
    v8 = (-1 << result) - 1;
  }
  *v7 = v9 & v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x249F06894);
  }
  *(_QWORD *)(a2 + 16) = v12;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_249F068B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_249F1FA18();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_249F1FF64();
        swift_bridgeObjectRetain();
        sub_249F1F40C();
        v9 = sub_249F1FFA0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_249F06A8C(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = result;
  v4 = a2 + 64;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(a2 + 32));
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    result = sub_249F1FA18();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v5);
      sub_249F1FF64();
      __asm { BR              X8 }
    }
    v7 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v8 = *v7;
    v9 = (-1 << v3) - 1;
  }
  else
  {
    v7 = (uint64_t *)(v4 + 8 * (result >> 6));
    v9 = *v7;
    v8 = (-1 << result) - 1;
  }
  *v7 = v9 & v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x249F06DC0);
  }
  *(_QWORD *)(a2 + 16) = v12;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_249F06DEC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_249F1FA18();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_249F1FF64();
        sub_249F1F40C();
        swift_bridgeObjectRelease();
        result = sub_249F1FFA0();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_249F07004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DEB18;
  if (!qword_2578DEB18)
  {
    v1 = sub_249F1E7F4();
    result = MEMORY[0x24BD06528](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&qword_2578DEB18);
  }
  return result;
}

uint64_t _s13DiffusionBase05AppleA8PipelineV14ComponentModelO8rawValueAESgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

unint64_t sub_249F07098()
{
  unint64_t result;

  result = qword_2578DEB20;
  if (!qword_2578DEB20)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionPipeline.ComponentModel, &type metadata for AppleDiffusionPipeline.ComponentModel);
    atomic_store(result, (unint64_t *)&qword_2578DEB20);
  }
  return result;
}

unint64_t sub_249F070E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DEB28;
  if (!qword_2578DEB28)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DEB30);
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2578DEB28);
  }
  return result;
}

uint64_t _s14ComponentModelOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14ComponentModelOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_249F07208 + 4 * byte_249F330AC[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_249F0723C + 4 * byte_249F330A7[v4]))();
}

uint64_t sub_249F0723C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F07244(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249F0724CLL);
  return result;
}

uint64_t sub_249F07258(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249F07260);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_249F07264(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F0726C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionPipeline.ComponentModel()
{
  return &type metadata for AppleDiffusionPipeline.ComponentModel;
}

uint64_t *_s12ResourceURLsVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_249F1E7F4();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s12ResourceURLsVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_249F1E7F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s12ResourceURLsVwcp(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_249F1E7F4();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s12ResourceURLsVwca(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_249F1E7F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s12ResourceURLsVwtk(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_249F1E7F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *_s12ResourceURLsVwta(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_249F1E7F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s12ResourceURLsVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249F076D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_249F1E7F4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s12ResourceURLsVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249F0775C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_249F1E7F4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_249F077D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1E7F4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DPMSolverMultistepScheduler.__allocating_init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:timeStepSpacing:predictionType:)(int64_t a1, int64_t a2, char a3, char a4, char a5, float a6, float a7)
{
  char v13;
  uint64_t v14;

  v13 = a3 & 1;
  v14 = swift_allocObject();
  DPMSolverMultistepScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:timeStepSpacing:predictionType:)(a1, a2, v13, a4, a5, a6, a7);
  return v14;
}

BOOL static SchedulerPredictionType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t SchedulerPredictionType.hash(into:)()
{
  return sub_249F1FF70();
}

uint64_t _s13DiffusionBase24SchedulerTimeStepSpacingO9hashValueSivg_0()
{
  sub_249F1FF64();
  sub_249F1FF70();
  return sub_249F1FFA0();
}

uint64_t DPMSolverMultistepScheduler.trainStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DPMSolverMultistepScheduler.inferenceStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t DPMSolverMultistepScheduler.betas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.alphas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.alphasCumProd.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.timeSteps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.alpha_t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.sigma_t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.lambda_t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.solverOrder.getter()
{
  return 2;
}

uint64_t DPMSolverMultistepScheduler.useLowerOrderFinal.getter()
{
  return 1;
}

uint64_t DPMSolverMultistepScheduler.modelOutputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DPMSolverMultistepScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:timeStepSpacing:predictionType:)(int64_t a1, int64_t a2, char a3, char a4, char a5, float a6, float a7)
{
  uint64_t v7;
  float v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int32x2_t v50;
  uint64_t v51;
  uint64_t v52;
  int32x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  unint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  int64_t v66;
  float v67;
  int64_t v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  unint64_t v73;
  float v74;
  unint64_t v75;
  float v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int32x2_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int32x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t result;
  uint64_t v113;

  v9 = v7;
  LOBYTE(v10) = a4;
  v11 = a1;
  *(_OWORD *)(v7 + 88) = xmmword_249F23BE0;
  *(_BYTE *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 106) = 1;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v9 + 112) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v9 + 105) = a5;
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a1;
  if ((a3 & 1) != 0)
  {
    v14 = fabsf(sqrtf(a6));
    if (a6 == -INFINITY)
      v15 = INFINITY;
    else
      v15 = v14;
    v16 = fabsf(sqrtf(a7));
    if (a7 == -INFINITY)
      v17 = INFINITY;
    else
      v17 = v16;
    v18 = sub_249EE2FA8(a2, v15, v17);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v113 = v12;
      sub_249EB5D34(0, v19, 0);
      v20 = 0;
      v13 = v12;
      v21 = *(_QWORD *)(v12 + 16);
      do
      {
        v8 = *(float *)(v18 + 4 * v20 + 32);
        v113 = v13;
        v22 = *(_QWORD *)(v13 + 24);
        if (v21 >= v22 >> 1)
        {
          sub_249EB5D34(v22 > 1, v21 + 1, 1);
          v13 = v113;
        }
        ++v20;
        *(_QWORD *)(v13 + 16) = v21 + 1;
        *(float *)(v13 + 4 * v21++ + 32) = v8 * v8;
      }
      while (v19 != v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v13 = sub_249EE2FA8(a2, a6, a7);
  }
  *(_QWORD *)(v9 + 32) = v13;
  v23 = *(_QWORD *)(v13 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  if (v23)
  {
    v113 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_249EB5D34(0, v23, 0);
    v25 = 0;
    v26 = (char *)v113;
    v27 = *(_QWORD *)(v113 + 16);
    v8 = 1.0;
    do
    {
      v28 = *(float *)(v13 + 4 * v25 + 32);
      v113 = (uint64_t)v26;
      v29 = *((_QWORD *)v26 + 3);
      if (v27 >= v29 >> 1)
      {
        sub_249EB5D34(v29 > 1, v27 + 1, 1);
        v26 = (char *)v113;
      }
      ++v25;
      *((_QWORD *)v26 + 2) = v27 + 1;
      *(float *)&v26[4 * v27++ + 32] = 1.0 - v28;
    }
    while (v23 != v25);
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v26 = (char *)MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v9 + 40) = v26;
  v30 = *((_QWORD *)v26 + 2);
  v31 = (uint64_t *)(v30 - 1);
  if (v30 != 1)
  {
    if (!v30)
      goto LABEL_97;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_98;
    while (1)
    {
      v32 = 0;
      while (v32 < *((_QWORD *)v26 + 2))
      {
        *(float *)&v26[4 * v32 + 36] = *(float *)&v26[4 * v32 + 32] * *(float *)&v26[4 * v32 + 36];
        if (v31 == (uint64_t *)++v32)
          goto LABEL_31;
      }
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      v26 = sub_249EC94CC((uint64_t)v26);
    }
  }
  swift_bridgeObjectRetain();
LABEL_31:
  *(_QWORD *)(v9 + 48) = v26;
  if (!(_BYTE)v10)
  {
    v43 = *(_QWORD *)(v9 + 16);
    v42 = __OFSUB__(v43, 1);
    v44 = v43 - 1;
    if (!v42)
    {
      if (__OFADD__(v11, 1))
        goto LABEL_103;
      v45 = (float)v44;
      swift_bridgeObjectRetain();
      v10 = sub_249EE2FA8(v11 + 1, 0.0, v45);
      v46 = *(_QWORD *)(v10 + 16);
      v47 = v46 != 0;
      v11 = v46 - v47;
      if (v46 != v47)
      {
        v113 = v24;
        sub_249DB677C(0, v11 & ~(v11 >> 63), 0);
        if ((v11 & 0x8000000000000000) == 0)
        {
          v31 = (uint64_t *)v113;
          v8 = 9.2234e18;
          while (v46 > v47)
          {
            v84 = roundf(*(float *)(v10 + 4 * v46 + 28));
            if ((~LODWORD(v84) & 0x7F800000) == 0)
              goto LABEL_94;
            if (v84 <= -9.2234e18)
              goto LABEL_95;
            if (v84 >= 9.2234e18)
              goto LABEL_96;
            v113 = (uint64_t)v31;
            v24 = v31[2];
            v85 = v31[3];
            v11 = v24 + 1;
            if (v24 >= v85 >> 1)
            {
              sub_249DB677C(v85 > 1, v24 + 1, 1);
              v31 = (uint64_t *)v113;
            }
            --v46;
            v31[2] = v11;
            v31[v24 + 4] = (uint64_t)v84;
            if (v47 == v46)
            {
              v48 = swift_bridgeObjectRelease();
              goto LABEL_80;
            }
          }
          goto LABEL_93;
        }
        goto LABEL_107;
      }
      v48 = swift_bridgeObjectRelease();
      v31 = (uint64_t *)MEMORY[0x24BEE4AF8];
LABEL_80:
      *(_QWORD *)(v9 + 56) = v31;
      v113 = *(_QWORD *)(v9 + 48);
      v86 = *(_QWORD *)(v113 + 16);
      MEMORY[0x24BDAC7A8](v48);
      swift_bridgeObjectRetain();
      v87 = sub_249EE4148(v86, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A680);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 64) = v87;
      v88.i32[0] = 1.0;
      v113 = sub_249EF87BC(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16), v88);
      v89 = *(_QWORD *)(v113 + 16);
      MEMORY[0x24BDAC7A8](v113);
      swift_bridgeObjectRetain();
      v90 = sub_249EE4148(v89, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A66C);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v113 = v90;
      v83 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v90 + 16));
LABEL_81:
      v91 = sub_249EE4148(v83, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A680);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 72) = v91;
LABEL_87:
      v108 = *(_QWORD *)(v9 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_249EE17C8(v108, v91);
      v110 = v109;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 80) = v110;
      swift_bridgeObjectRelease();
      return v9;
    }
    goto LABEL_100;
  }
  if (v10 == 1)
  {
    if (!__OFSUB__(a2, 1))
    {
      v33 = v11 + 1;
      if (!__OFADD__(v11, 1))
      {
        if (v11 != -1)
        {
          if (a2 == 0x8000000000000001 && v11 == -2)
          {
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }
          if ((v11 & 0x8000000000000000) == 0)
          {
            v113 = v24;
            v10 = v33 & ~(v33 >> 63);
            swift_bridgeObjectRetain();
            v31 = &v113;
            sub_249DB677C(0, v10, 0);
            if ((v33 & 0x8000000000000000) == 0)
            {
              v34 = 0;
              v35 = 0;
              v36 = -1;
              v37 = v113;
              v38 = (a2 - 1) / v33;
              while (v11 != v36)
              {
                if (v35)
                  goto LABEL_109;
                v39 = v34 * v38;
                if ((unsigned __int128)(v34 * (__int128)v38) >> 64 != (v34 * v38) >> 63)
                  goto LABEL_90;
                v40 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_91;
                v113 = v37;
                v24 = *(_QWORD *)(v37 + 16);
                v41 = *(_QWORD *)(v37 + 24);
                v10 = v24 + 1;
                if (v24 >= v41 >> 1)
                {
                  v31 = &v113;
                  sub_249DB677C(v41 > 1, v24 + 1, 1);
                  v37 = v113;
                }
                *(_QWORD *)(v37 + 16) = v10;
                *(_QWORD *)(v37 + 32 + 8 * v24) = v40;
                v35 = v34 == v11;
                if (v34 == v11)
                {
                  v34 = 0;
                }
                else
                {
                  v42 = __OFADD__(v34++, 1);
                  if (v42)
                    goto LABEL_92;
                }
                if (v11 == ++v36)
                {
                  v77 = sub_249F08710(v37, v37 + 32, 1, (2 * v10) | 1);
                  *(_QWORD *)(v9 + 56) = v77;
                  v113 = (uint64_t)v26;
                  v78 = *((_QWORD *)v26 + 2);
                  MEMORY[0x24BDAC7A8](v77);
                  swift_bridgeObjectRetain();
                  v79 = sub_249EE4148(v78, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A680);
                  swift_bridgeObjectRelease();
                  *(_QWORD *)(v9 + 64) = v79;
                  v80.i32[0] = 1.0;
                  v113 = sub_249EF87BC(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16), v80);
                  v81 = *(_QWORD *)(v113 + 16);
                  MEMORY[0x24BDAC7A8](v113);
                  swift_bridgeObjectRetain();
                  v82 = sub_249EE4148(v81, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A370);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v113 = v82;
                  v83 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v82 + 16));
                  goto LABEL_81;
                }
              }
              goto LABEL_89;
            }
            goto LABEL_106;
          }
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_249F0D0FC(0, v31[2] + 1, 1, (char *)v31);
    v31 = (uint64_t *)isUniquelyReferenced_nonNull_native;
LABEL_84:
    v97 = v31[2];
    v96 = v31[3];
    v98 = v97 + 1;
    if (v97 >= v96 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_249F0D0FC((char *)(v96 > 1), v97 + 1, 1, (char *)v31);
      v31 = (uint64_t *)isUniquelyReferenced_nonNull_native;
    }
    v31[2] = v98;
    *((float *)v31 + v97 + 8) = v8;
    v113 = (uint64_t)v31;
    MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRetain();
    v99 = sub_249EE4148(v98, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A2A0);
    swift_bridgeObjectRelease();
    v113 = v99;
    v100 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v99 + 16));
    v101 = sub_249EE4148(v100, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A2BC);
    swift_bridgeObjectRelease();
    v113 = v101;
    v102 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v101 + 16));
    v103 = sub_249EE4148(v102, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A680);
    swift_bridgeObjectRelease();
    v113 = v103;
    v104 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v103 + 16));
    v105 = sub_249EE4148(v104, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F09FE4);
    v106 = swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 64) = v105;
    v113 = (uint64_t)v31;
    v107 = v31[2];
    MEMORY[0x24BDAC7A8](v106);
    swift_bridgeObjectRetain();
    v91 = sub_249EE4148(v107, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A324);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 72) = v91;
    *(_BYTE *)(v9 + 104) = 1;
    goto LABEL_87;
  }
  v49 = *((_QWORD *)v26 + 2);
  swift_bridgeObjectRetain();
  v50.i32[0] = 1.0;
  v51 = sub_249EF87BC(v49, v50);
  v113 = (uint64_t)v26;
  v52 = *((_QWORD *)v26 + 2);
  MEMORY[0x24BDAC7A8](v51);
  swift_bridgeObjectRetain();
  sub_249EE4148(v52, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F09FE4);
  v53.i32[0] = 0;
  sub_249EF87BC(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16), v53);
  v54 = sub_249F08934(v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v113 = v54;
  v55 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v54 + 16));
  v56 = sub_249EE4148(v55, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A000);
  swift_bridgeObjectRelease();
  v57 = *(_QWORD *)(v56 + 16);
  if (v57)
  {
    v113 = v24;
    sub_249EB5D34(0, v57, 0);
    v58 = 0;
    v59 = v113;
    v60 = *(_QWORD *)(v113 + 16);
    do
    {
      v61 = logf(*(float *)(v56 + 4 * v58 + 32));
      v113 = v59;
      v62 = *(_QWORD *)(v59 + 24);
      if (v60 >= v62 >> 1)
      {
        sub_249EB5D34(v62 > 1, v60 + 1, 1);
        v59 = v113;
      }
      ++v58;
      *(_QWORD *)(v59 + 16) = v60 + 1;
      *(float *)(v59 + 4 * v60++ + 32) = v61;
    }
    while (v57 != v58);
    v63 = *(_QWORD *)(v56 + 16);
    v31 = (uint64_t *)MEMORY[0x24BEE4AF8];
    if (v63)
    {
      v64 = *(float *)(v56 + 32);
      v65 = *(float *)(v56 + 32 + 4 * v63 - 4);
      swift_bridgeObjectRelease();
      v66 = sub_249EE2FA8(v11, 0.0, 1.0);
      v67 = powf(v65, 0.14286);
      v68 = *(_QWORD *)(v66 + 16);
      if (v68)
      {
        v69 = v67;
        v70 = powf(v64, 0.14286);
        v113 = (uint64_t)v31;
        sub_249EB5D34(0, v68, 0);
        v71 = 0;
        v72 = v70 - v69;
        v31 = (uint64_t *)v113;
        v73 = *(_QWORD *)(v113 + 16);
        do
        {
          v74 = *(float *)(v66 + 4 * v71 + 32);
          v113 = (uint64_t)v31;
          v75 = v31[3];
          if (v73 >= v75 >> 1)
          {
            sub_249EB5D34(v75 > 1, v73 + 1, 1);
            v31 = (uint64_t *)v113;
          }
          ++v71;
          v76 = powf(v69 + (float)(v72 * v74), 7.0);
          v31[2] = v73 + 1;
          *((float *)v31 + v73++ + 8) = v76;
        }
        while (v68 != v71);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v92 = swift_bridgeObjectRetain();
      v93 = sub_249F0A1C4(v92, v59);
      swift_bridgeObjectRelease_n();
      *(_QWORD *)(v9 + 56) = v93;
      v94 = v31[2];
      if (!v94)
        goto LABEL_111;
      v8 = *((float *)v31 + v94 + 7);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_84;
      goto LABEL_101;
    }
  }
LABEL_110:
  __break(1u);
LABEL_111:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

unint64_t sub_249F08710(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  if ((a4 & 1) == 0)
    goto LABEL_2;
  sub_249F1FED4();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (__OFSUB__(v4 >> 1, a3))
    goto LABEL_21;
  if (v9 != (v4 >> 1) - a3)
  {
LABEL_22:
    swift_unknownObjectRelease();
LABEL_2:
    v4 = sub_249ED9590(a1, a2, a3, v4);
    goto LABEL_9;
  }
  v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  v10 = *(_QWORD *)(v4 + 16);
  swift_unknownObjectRelease();
  if (v10 >= 2)
  {
    a1 = 0;
    a3 = v10 >> 1;
    a2 = v10 + 3;
    do
    {
      if (a1 != a2 - 4)
      {
        v12 = *(_QWORD *)(v4 + 16);
        if (a1 >= v12)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        if (a2 - 4 >= v12)
          goto LABEL_20;
        v13 = *(_QWORD *)(v4 + 8 * a1 + 32);
        v14 = *(_QWORD *)(v4 + 8 * a2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = (unint64_t)sub_249EC947C((_QWORD *)v4);
        *(_QWORD *)(v4 + 8 * a1 + 32) = v14;
        *(_QWORD *)(v4 + 8 * a2) = v13;
      }
      ++a1;
      --a2;
    }
    while (a3 != a1);
  }
  return v4;
}

uint64_t sub_249F0887C(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = v1[2];
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = v1[v3 + 4];
    v8 = v1[i];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_249EC947C(v1);
      v1 = (_QWORD *)result;
    }
    v1[v3 + 4] = v8;
    v1[i] = v7;
LABEL_5:
    if (v4 == ++v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_249F08934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = sub_249EE4148(v1, (uint64_t (*)(_QWORD *, uint64_t *))sub_249F0A64C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_249F089DC(uint64_t a1, float a2)
{
  float v3;
  unint64_t v4;
  uint64_t v5;
  float *v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v3 = logf(a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_249EB5D34(0, v4, 0);
    v5 = v22;
    v6 = (float *)(a1 + 32);
    v7 = *(_QWORD *)(v22 + 16);
    v8 = v4;
    do
    {
      v9 = *v6;
      v23 = v5;
      v10 = *(_QWORD *)(v5 + 24);
      v11 = v7 + 1;
      if (v7 >= v10 >> 1)
      {
        sub_249EB5D34(v10 > 1, v7 + 1, 1);
        v5 = v23;
      }
      *(_QWORD *)(v5 + 16) = v11;
      *(float *)(v5 + 4 * v7 + 32) = v3 - v9;
      ++v6;
      ++v7;
      --v8;
    }
    while (v8);
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v11)
    {
LABEL_33:
      result = swift_bridgeObjectRelease();
      goto LABEL_34;
    }
  }
  v12 = 0;
  v13 = -1;
  do
  {
    v14 = *(float *)(v5 + 4 * v12 + 32) >= 0.0 && v13 < (uint64_t)(v11 - 2);
    if (v14)
      ++v13;
    ++v12;
  }
  while (v11 != v12);
  result = swift_bridgeObjectRelease();
  v16 = v13 & ~(v13 >> 63);
  v17 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v16 < v4)
  {
    if (v17 < v4)
    {
      v18 = (float)(*(float *)(a1 + 32 + 4 * v16) - v3)
          / (float)(*(float *)(a1 + 32 + 4 * v16) - *(float *)(a1 + 32 + 4 * v17));
      if (v18 <= 1.0)
        v19 = (float)(*(float *)(a1 + 32 + 4 * v16) - v3)
            / (float)(*(float *)(a1 + 32 + 4 * v16) - *(float *)(a1 + 32 + 4 * v17));
      else
        v19 = 1.0;
      v14 = v18 > 0.0;
      v20 = 0.0;
      if (v14)
        v20 = v19;
      v21 = roundf((float)(v20 * (float)v17) + (float)((float)(1.0 - v20) * (float)v16));
      if ((~LODWORD(v21) & 0x7F800000) != 0)
      {
        if (v21 > -9.2234e18)
        {
          if (v21 < 9.2234e18)
            return (uint64_t)v21;
          goto LABEL_32;
        }
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_249F08BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_QWORD *)(a2 + 40 + 8 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

float *sub_249F08C18(float *result, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float *a9, uint64_t a10, float **a11)
{
  float *v11;
  int v12;
  float v13;

  if (a7 < 0)
  {
    __break(1u);
  }
  else if (a7)
  {
    v11 = *a11;
    v12 = *(unsigned __int8 *)(a8 + 105);
    do
    {
      if (v12)
      {
        if (v12 == 1)
          v13 = *a9;
        else
          v13 = (float)(*result * a3) - (float)(*a9 * a2);
      }
      else
      {
        v13 = (float)(*result - (float)(*a9 * a2)) / a3;
      }
      *v11++ = v13;
      ++a9;
      ++result;
      --a7;
    }
    while (a7);
  }
  return result;
}

uint64_t sub_249F08C8C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(unint64_t, uint64_t, uint64_t);

  v7 = result;
  if (*(_BYTE *)(v5 + 104) != 1)
  {
    if ((a3 & 0x8000000000000000) == 0)
      goto LABEL_17;
    __break(1u);
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v5 + 56);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
LABEL_7:
    a3 = 0;
    a2 = 0;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v9 + 32) != a3)
  {
    v11 = 0;
    while (v10 - 1 != v11)
    {
      v12 = *(_QWORD *)(v9 + 40 + 8 * v11++);
      if (v12 == a3)
        goto LABEL_11;
    }
  }
  v11 = 0;
LABEL_11:
  if (*(_QWORD *)(v9 + 32) != a2)
  {
    v13 = 0;
    v14 = v9 + 40;
    v15 = v10 - 1;
    while (v15 != v13)
    {
      v16 = *(_QWORD *)(v14 + 8 * v13++);
      if (v16 == a2)
      {
        a3 = v11;
        a2 = v13;
        goto LABEL_17;
      }
    }
  }
  a2 = 0;
  a3 = v11;
LABEL_17:
  v17 = *(_QWORD *)(v5 + 80);
  v18 = *(_QWORD *)(v17 + 16);
  if (a3 >= (uint64_t)v18)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (a2 >= v18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v19 = *(_QWORD *)(v5 + 64);
  if (a3 >= *(_QWORD *)(v19 + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = *(_QWORD *)(v5 + 72);
  v21 = *(_QWORD *)(v20 + 16);
  if (a3 >= (uint64_t)v21)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a2 < v21)
  {
    v22 = *(float *)(v20 + 32 + 4 * a3);
    v23 = *(float *)(v19 + 4 * a3 + 32);
    v24 = *(float *)(v20 + 32 + 4 * a2);
    v25 = *(float *)(v17 + 32 + 4 * a3) - *(float *)(v17 + 32 + 4 * a2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD68);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_249F21910;
    *(double *)(inited + 32) = v22 / v24;
    *(long double *)(inited + 40) = -(v23 * (exp(-v25) + -1.0));
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(_QWORD *)(v28 + 72);
    v30 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_249F21910;
    v32 = v31 + v30;
    v33 = *(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 16);
    v33(v32, a4, v27);
    v33(v32 + v29, v7, v27);
    sub_249EE1BA4(inited, v31, a5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    return swift_setDeallocating();
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_249F08F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  __int128 v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  float *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  float *v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t inited;
  float64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  long double v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v95 = (char *)&v86 - v17;
  MEMORY[0x24BDAC7A8](v16);
  result = (char *)&v86 - v18;
  v20 = *(_QWORD *)(a2 + 16);
  if (!v20)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v20 == 1)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v91 = a4;
  v92 = a5;
  v94 = v15;
  v22 = a2 + 32 + 8 * v20;
  v24 = *(_QWORD *)(v22 - 16);
  v23 = *(_QWORD *)(v22 - 8);
  v89 = *(unsigned __int8 *)(v12 + 80);
  v90 = (v89 + 32) & ~v89;
  v25 = a1 + v90;
  v26 = *(_QWORD *)(v12 + 72);
  v27 = *(uint64_t (**)(void))(v12 + 16);
  v93 = (char *)&v86 - v18;
  result = (char *)v27();
  if (v21 == 1)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  result = (char *)((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v95, v25 + v26 * (v21 - 2), v11);
  v29 = *(_QWORD *)(v5 + 80);
  v30 = v27;
  if (*(_BYTE *)(v5 + 104) == 1)
  {
    v31 = *(_QWORD *)(v5 + 56);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      if (*(_QWORD *)(v31 + 32) == a3)
      {
        v33 = *(_QWORD *)(v29 + 16);
        if (v33)
        {
          v34 = (_DWORD *)(v29 + 32);
          v35 = (float *)(v29 + 32);
LABEL_23:
          if (*(_QWORD *)(v31 + 32) != v23)
          {
            v41 = 0;
            v42 = v31 + 40;
            v43 = v32 - 1;
            while (v43 != v41)
            {
              v44 = *(_QWORD *)(v42 + 8 * v41++);
              if (v44 == v23)
                goto LABEL_28;
            }
          }
          v41 = 0;
LABEL_28:
          if (v41 >= v33)
            goto LABEL_86;
          LODWORD(v28) = *v34;
          v38 = *(float *)(v29 + 4 * v41 + 32);
          goto LABEL_30;
        }
      }
      else
      {
        v39 = 0;
        while (v32 - 1 != v39)
        {
          v40 = *(_QWORD *)(v31 + 40 + 8 * v39++);
          if (v40 == a3)
            goto LABEL_21;
        }
        v39 = 0;
LABEL_21:
        v33 = *(_QWORD *)(v29 + 16);
        if (v39 < (uint64_t)v33)
        {
          v35 = (float *)(v29 + 32);
          v34 = (_DWORD *)(v29 + 32 + 4 * v39);
          goto LABEL_23;
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)(v29 + 16);
      if (v33)
      {
        v38 = *(float *)(v29 + 32);
        *(float *)&v28 = v38;
        v35 = (float *)(v29 + 32);
LABEL_30:
        v45 = *(_QWORD *)(v5 + 56);
        v46 = *(_QWORD *)(v45 + 16);
        if (v46)
        {
          if (*(_QWORD *)(v45 + 32) != v24)
          {
            v47 = 0;
            while (v46 - 1 != v47)
            {
              v48 = *(_QWORD *)(v45 + 40 + 8 * v47++);
              if (v48 == v24)
                goto LABEL_44;
            }
            v47 = 0;
LABEL_44:
            if (v47 >= v33)
              goto LABEL_87;
            v35 += v47;
          }
          v52 = *v35;
          v59 = *(_QWORD *)(v5 + 64);
          if (*(_QWORD *)(v45 + 32) == a3)
          {
            if (*(_QWORD *)(v59 + 16))
            {
              v53 = *(float *)(v59 + 32);
              v60 = *(_QWORD *)(v5 + 72);
              goto LABEL_56;
            }
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          v58 = 0;
          while (v46 - 1 != v58)
          {
            v61 = *(_QWORD *)(v45 + 40 + 8 * v58++);
            if (v61 == a3)
              goto LABEL_54;
          }
          v58 = 0;
        }
        else
        {
          v58 = 0;
          v52 = *v35;
          v59 = *(_QWORD *)(v5 + 64);
        }
LABEL_54:
        if (v58 >= *(_QWORD *)(v59 + 16))
          goto LABEL_83;
        v53 = *(float *)(v59 + 4 * v58 + 32);
        v60 = *(_QWORD *)(v5 + 72);
        if (v46)
        {
LABEL_56:
          if (*(_QWORD *)(v45 + 32) == a3)
          {
            v51 = *(_QWORD *)(v60 + 16);
            if (v51)
            {
              v62 = *(float *)(v60 + 32);
              v54 = v60 + 32;
              v56 = v62;
LABEL_68:
              if (*(_QWORD *)(v45 + 32) != v23)
              {
                v57 = 0;
                v83 = v45 + 40;
                v84 = v46 - 1;
                while (v84 != v57)
                {
                  v85 = *(_QWORD *)(v83 + 8 * v57++);
                  if (v85 == v23)
                    goto LABEL_70;
                }
              }
              v57 = 0;
LABEL_70:
              if (v57 < v51)
              {
                v65 = v56;
                v66 = v53;
                v67 = v38;
                v68 = *(float *)(v54 + 4 * v57);
                v69 = *(float *)&v28 - v67;
                *(double *)&v28 = (v67 - v52) / v69;
                v87 = v28;
                __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD68);
                v88 = v12;
                v70 = v26;
                inited = swift_initStackObject();
                v86 = xmmword_249F21910;
                v72 = vdivq_f64((float64x2_t)xmmword_249F331D0, (float64x2_t)vdupq_lane_s64(v87, 0));
                *(_OWORD *)(inited + 16) = xmmword_249F21910;
                *(float64x2_t *)(inited + 32) = v72;
                *(_QWORD *)&v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
                v73 = 2 * v26;
                v74 = v90;
                v89 |= 7uLL;
                v75 = swift_allocObject();
                *(_OWORD *)(v75 + 16) = v86;
                ((void (*)(uint64_t, char *, uint64_t))v30)(v75 + v74, v93, v11);
                ((void (*)(uint64_t, char *, uint64_t))v30)(v75 + v74 + v26, v95, v11);
                sub_249EE1BA4(inited, v75, (uint64_t)v94);
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                swift_setDeallocating();
                v76 = swift_initStackObject();
                v86 = xmmword_249F22C20;
                *(_OWORD *)(v76 + 16) = xmmword_249F22C20;
                *(double *)(v76 + 32) = v65 / v68;
                v77 = exp(-v69) + -1.0;
                *(long double *)(v76 + 40) = -(v66 * v77);
                *(long double *)(v76 + 48) = v77 * (v66 * -0.5);
                v78 = swift_allocObject();
                *(_OWORD *)(v78 + 16) = v86;
                ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v78 + v74, v91, v11);
                v79 = v78 + v74 + v70;
                v80 = v93;
                ((void (*)(uint64_t, char *, uint64_t))v30)(v79, v93, v11);
                v81 = (uint64_t)v94;
                ((void (*)(uint64_t, char *, uint64_t))v30)(v78 + v74 + v73, v94, v11);
                sub_249EE1BA4(v76, v78, v92);
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                swift_setDeallocating();
                v82 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
                v82(v81, v11);
                v82((uint64_t)v95, v11);
                return (char *)((uint64_t (*)(char *, uint64_t))v82)(v80, v11);
              }
              goto LABEL_85;
            }
          }
          else
          {
            v63 = 0;
            while (v46 - 1 != v63)
            {
              v64 = *(_QWORD *)(v45 + 40 + 8 * v63++);
              if (v64 == a3)
                goto LABEL_66;
            }
            v63 = 0;
LABEL_66:
            v51 = *(_QWORD *)(v60 + 16);
            if (v63 < (uint64_t)v51)
            {
              v54 = v60 + 32;
              v56 = *(float *)(v54 + 4 * v63);
              goto LABEL_68;
            }
          }
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
        v51 = *(_QWORD *)(v60 + 16);
        if (!v51)
          goto LABEL_84;
        v23 = 0;
        v55 = (float *)(v60 + 32);
        v54 = v60 + 32;
LABEL_41:
        v56 = *v55;
        v57 = v23;
        goto LABEL_70;
      }
    }
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v36 = *(_QWORD *)(v29 + 16);
  if (v36 <= a3)
    goto LABEL_82;
  if (v23 < v36)
  {
    v37 = v29 + 32;
    LODWORD(v28) = *(_DWORD *)(v29 + 32 + 4 * a3);
    v38 = *(float *)(v29 + 32 + 4 * v23);
    if (v24 >= v36)
      goto LABEL_87;
    if ((a3 & 0x8000000000000000) == 0)
    {
      v49 = *(_QWORD *)(v5 + 64);
      if (*(_QWORD *)(v49 + 16) <= a3)
        goto LABEL_83;
      v50 = *(_QWORD *)(v5 + 72);
      v51 = *(_QWORD *)(v50 + 16);
      if (v51 <= a3)
        goto LABEL_84;
      v52 = *(float *)(v37 + 4 * v24);
      v53 = *(float *)(v49 + 4 * a3 + 32);
      v54 = v50 + 32;
      v55 = (float *)(v50 + 32 + 4 * a3);
      goto LABEL_41;
    }
    __break(1u);
    goto LABEL_77;
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
  return result;
}

uint64_t DPMSolverMultistepScheduler.step(output:timeStep:sample:)@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v5 = v4;
  v50 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v46 - v14;
  result = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v46 - v17;
  v19 = *(_QWORD *)(v5 + 56);
  v20 = *(_QWORD *)(v19 + 16);
  v49 = v19;
  if (!v20)
  {
LABEL_9:
    v47 = 0;
    v22 = v20 - 1;
    v24 = 1;
    goto LABEL_13;
  }
  v21 = v19 + 32;
  if (*(_QWORD *)(v19 + 32) != a2)
  {
    v22 = 0;
    while (v20 - 1 != v22)
    {
      v23 = *(_QWORD *)(v19 + 40 + 8 * v22++);
      if (v23 == a2)
        goto LABEL_7;
    }
    goto LABEL_9;
  }
  v22 = 0;
LABEL_7:
  if (v22 == v20 - 1)
  {
    v47 = 0;
    v24 = 1;
  }
  else
  {
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v25 >= v20)
    {
LABEL_53:
      __break(1u);
      return result;
    }
    v24 = 0;
    v47 = *(_QWORD *)(v21 + 8 * v25);
  }
LABEL_13:
  if (v22 == v20 - 2)
    v24 = 1;
  if (v20 < 0xF)
    v26 = v24;
  else
    v26 = 0;
  if (*(uint64_t *)(v5 + 96) < 1)
    v26 = 1;
  v48 = v26;
  sub_249EE2F40();
  v27 = sub_249F1F064();
  if (*(_BYTE *)(v5 + 104) == 1)
  {
    v28 = *(_QWORD *)(v49 + 16);
    if (v28 && *(_QWORD *)(v49 + 32) != a2)
    {
      v29 = 0;
      v44 = v28 - 1;
      while (v44 != v29)
      {
        v45 = *(_QWORD *)(v49 + 40 + 8 * v29++);
        if (v45 == a2)
          goto LABEL_25;
      }
    }
    v29 = 0;
  }
  else
  {
    v29 = a2;
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_46;
    }
  }
LABEL_25:
  v30 = *(_QWORD *)(v5 + 64);
  if (v29 >= *(_QWORD *)(v30 + 16))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v31 = *(_QWORD *)(v5 + 72);
  if (v29 >= *(_QWORD *)(v31 + 16))
  {
LABEL_47:
    __break(1u);
LABEL_48:
    v27 = sub_249F0CCB4(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
    *a1 = v27;
    goto LABEL_30;
  }
  v46 = a4;
  v32 = 4 * v29;
  v33 = *(_DWORD *)(v30 + v32 + 32);
  v34 = *(_DWORD *)(v31 + v32 + 32);
  v35 = sub_249F1EFE0();
  MEMORY[0x24BDAC7A8](v35);
  *(&v46 - 6) = v27;
  *(&v46 - 5) = (uint64_t)a1;
  *(&v46 - 4) = v50;
  *(&v46 - 3) = v5;
  *((_DWORD *)&v46 - 4) = v34;
  *((_DWORD *)&v46 - 3) = v33;
  sub_249F1EFB0();
  a1 = (unint64_t *)(v5 + 112);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v5 + 112) + 16) == 2)
  {
    swift_beginAccess();
    sub_249F09AA0((uint64_t)v15);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v18, v9);
  swift_beginAccess();
  v27 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v27;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_48;
LABEL_30:
  v38 = *(_QWORD *)(v27 + 16);
  v37 = *(_QWORD *)(v27 + 24);
  if (v38 >= v37 >> 1)
  {
    v27 = sub_249F0CCB4(v37 > 1, v38 + 1, 1, v27);
    *a1 = v27;
  }
  *(_QWORD *)(v27 + 16) = v38 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v27+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v38, v51, v9);
  swift_endAccess();
  if (v48)
  {
    sub_249F08C8C((uint64_t)v18, a2, v47, v50, v46);
    goto LABEL_38;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
  result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_249F21910;
  v39 = v22 - 1;
  v40 = v46;
  if (__OFSUB__(v22, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if ((v39 & 0x8000000000000000) != 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v39 >= *(_QWORD *)(v49 + 16))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v41 = result;
  *(_QWORD *)(result + 32) = *(_QWORD *)(v49 + 8 * v39 + 32);
  *(_QWORD *)(result + 40) = a2;
  v42 = swift_bridgeObjectRetain();
  sub_249F08F1C(v42, v41, v47, v50, v40);
  swift_setDeallocating();
  swift_bridgeObjectRelease();
LABEL_38:
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  v43 = *(_QWORD *)(v5 + 96);
  if (v43 <= 1)
    *(_QWORD *)(v5 + 96) = v43 + 1;
  return result;
}

uint64_t sub_249F09AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDD8);
  result = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v6, v7 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if ((_DWORD)result != 1)
  {
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v6, v8);
    if (*(_QWORD *)(v7 + 16))
      return sub_249F0A018(0, 1);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t DPMSolverMultistepScheduler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DPMSolverMultistepScheduler.__deallocating_deinit()
{
  DPMSolverMultistepScheduler.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_249F09C24()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_249F09C64@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return DPMSolverMultistepScheduler.step(output:timeStep:sample:)(a1, a2, a3, a4);
}

void sub_249F09C84(uint64_t a1, vDSP_Length *a2, uint64_t a3)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3 == *(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)a1)
    {
      vDSP_vsq((const float *)(a3 + 32), 1, *(float **)a1, 1, v3);
      *a2 = v3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_249F09CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a2 + 16) != v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)a3)
  {
    vDSP_vmul((const float *)(a1 + 32), 1, (const float *)(a2 + 32), 1, *(float **)a3, 1, v3);
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_249F09D34(uint64_t a1, uint64_t a2, float a3)
{
  vDSP_Length v3;
  float __B;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __B = a3;
  if (!*(_QWORD *)a2)
    goto LABEL_5;
  vDSP_vsadd((const float *)(a1 + 32), 1, &__B, *(float **)a2, 1, v3);
}

uint64_t sub_249F09DB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  vDSP_Length v5;
  float *__E;
  const float *v10;

  v5 = *(_QWORD *)(a5 + 8);
  if (*(_QWORD *)(result + 16) != v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a2 + 16) != v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(_QWORD *)(a3 + 16) != v5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a4 + 16) != v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  __E = *(float **)a5;
  if (*(_QWORD *)a5)
  {
    v10 = (const float *)(result + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    vDSP_vsbsbm(v10, 1, (const float *)(a2 + 32), 1, (const float *)(a3 + 32), 1, (const float *)(a4 + 32), 1, __E, 1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_249F09EC8(uint64_t a1, uint64_t a2, float a3)
{
  vDSP_Length v3;
  float __A;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __A = a3;
  if (!*(_QWORD *)a2)
    goto LABEL_5;
  vDSP_svdiv(&__A, (const float *)(a1 + 32), 1, *(float **)a2, 1, v3);
}

uint64_t sub_249F09F44(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *a3;
  v7 = a3[1];
  v8 = *a4;
  v9 = a4[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_249F09DB0(v6, v7, v8, v9, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = *(_QWORD *)(v6 + 16);
  return result;
}

uint64_t sub_249F09FE4(uint64_t a1, _QWORD *a2)
{
  return sub_249F0A2D8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, float))sub_249F09EC8);
}

void sub_249F0A000(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  sub_249EE4358(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_249F0A018(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_249F0CCB4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0A1C4(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_249DB677C(0, v2, 0);
    v3 = v11;
    v6 = (float *)(a1 + 32);
    do
    {
      v7 = sub_249F089DC(a2, *v6);
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_249DB677C(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void sub_249F0A2A0(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  sub_249F09C84(a1, a2, **(_QWORD **)(v2 + 16));
}

uint64_t sub_249F0A2BC(uint64_t a1, _QWORD *a2)
{
  return sub_249F0A2D8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, float))sub_249F09D34);
}

uint64_t sub_249F0A2D8(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t, float))
{
  uint64_t v3;
  float v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(float *)(v3 + 16);
  v6 = **(_QWORD **)(v3 + 24);
  result = a3(v6, a1, v5);
  *a2 = *(_QWORD *)(v6 + 16);
  return result;
}

void sub_249F0A324(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;

  v4 = *(uint64_t **)(v2 + 24);
  v5 = **(_QWORD **)(v2 + 16);
  sub_249F09CEC(v5, *v4, a1);
  *a2 = *(_QWORD *)(v5 + 16);
}

void sub_249F0A370(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  sub_249EE430C(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_249F0A388()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

unint64_t sub_249F0A408()
{
  unint64_t result;

  result = qword_2578DEBE8;
  if (!qword_2578DEBE8)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for SchedulerTimeStepSpacing, &type metadata for SchedulerTimeStepSpacing);
    atomic_store(result, (unint64_t *)&qword_2578DEBE8);
  }
  return result;
}

unint64_t sub_249F0A450()
{
  unint64_t result;

  result = qword_2578DEBF0;
  if (!qword_2578DEBF0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for SchedulerPredictionType, &type metadata for SchedulerPredictionType);
    atomic_store(result, (unint64_t *)&qword_2578DEBF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SchedulerTimeStepSpacing()
{
  return &type metadata for SchedulerTimeStepSpacing;
}

uint64_t _s13DiffusionBase23SchedulerPredictionTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249F0A4F4 + 4 * byte_249F331E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249F0A528 + 4 * byte_249F331E0[v4]))();
}

uint64_t sub_249F0A528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F0A530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249F0A538);
  return result;
}

uint64_t sub_249F0A544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249F0A54CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249F0A550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F0A558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SchedulerPredictionType()
{
  return &type metadata for SchedulerPredictionType;
}

uint64_t type metadata accessor for DPMSolverMultistepScheduler()
{
  return objc_opt_self();
}

uint64_t sub_249F0A594()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

float *sub_249F0A61C(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_249F08C18(a1, *(float *)(v4 + 48), *(float *)(v4 + 52), a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(float **)(v4 + 32), *(_QWORD *)(v4 + 40), *(float ***)(v4 + 56));
}

uint64_t sub_249F0A64C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_249F09F44(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t **)(v2 + 24));
}

void sub_249F0A66C(uint64_t a1, _QWORD *a2)
{
  sub_249F0A370(a1, a2);
}

void sub_249F0A680(uint64_t a1, _QWORD *a2)
{
  sub_249F0A000(a1, a2);
}

__n128 BPETokenizer.init(mergesAt:vocabularyAt:padToken:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  __n128 result;
  __int128 v8;
  _OWORD v9[5];

  sub_249F0F814(a1, a2, a3, a4, (uint64_t)v9);
  if (!v5)
  {
    v8 = v9[3];
    *(_OWORD *)(a5 + 32) = v9[2];
    *(_OWORD *)(a5 + 48) = v8;
    *(_OWORD *)(a5 + 64) = v9[4];
    result = (__n128)v9[1];
    *(_OWORD *)a5 = v9[0];
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

uint64_t BPETokenizer.tokenize(input:minCount:)(_QWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v4 = v3;
  v9 = v4[4];
  v8 = v4[5];
  swift_bridgeObjectRetain();
  v10 = sub_249F0CBA8(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_249F0CBA8((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[2 * v12];
  v13[4] = v9;
  v13[5] = v8;
  v29 = v10;
  v14 = sub_249F0B220(a1);
  sub_249F0AA48(v14);
  v16 = v4[6];
  v15 = v4[7];
  v17 = v29;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_249F0CBA8(0, v29[2] + 1, 1, v29);
    v17 = (_QWORD *)result;
  }
  v20 = v17[2];
  v19 = v17[3];
  v21 = v20 + 1;
  if (v20 >= v19 >> 1)
  {
    result = (uint64_t)sub_249F0CBA8((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    v17 = (_QWORD *)result;
  }
  v17[2] = v21;
  v22 = &v17[2 * v20];
  v22[4] = v16;
  v22[5] = v15;
  if ((a3 & 1) != 0)
    goto LABEL_11;
  v23 = a2 - v21 < 0;
  v24 = a2 <= v21;
  v25 = a2 - v21;
  if (v24)
    goto LABEL_11;
  if (!v23)
  {
    v27 = v4[2];
    v26 = v4[3];
    swift_bridgeObjectRetain();
    sub_249F0AB98(v25, v27, v26);
LABEL_11:
    sub_249F0FA70((uint64_t)v4);
    v28 = swift_bridgeObjectRetain();
    sub_249F0F3FC(v28, v4);
    sub_249F0FAE4((uint64_t)v4);
    swift_bridgeObjectRelease();
    return (uint64_t)v17;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall BPETokenizer.decode(tokens:)(Swift::OpaquePointer tokens)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8E30);
  sub_249E11B3C();
  sub_249F1F280();
  sub_249F1F4CC();
  sub_249D9E5BC();
  sub_249F1F9DC();
  swift_bridgeObjectRelease();
  sub_249F1F9DC();
  swift_bridgeObjectRelease();
  v1 = sub_249F1F9DC();
  v3 = v2;
  swift_bridgeObjectRelease();
  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

DiffusionBase::MockedTokenizer __swiftcall MockedTokenizer.init()()
{
  Swift::Int v0;
  uint64_t v1;
  void *v2;
  DiffusionBase::MockedTokenizer result;

  v0 = 0;
  v1 = 0;
  v2 = (void *)0xE000000000000000;
  result.padToken._object = v2;
  result.padToken._countAndFlagsBits = v1;
  result.padId = v0;
  return result;
}

uint64_t sub_249F0AA48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_249F0CBA8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0AB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t (*v23)();
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t (*v36)();
  uint64_t *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v6 = v5 + a1;
  if (__OFADD__(v5, a1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v9 = a1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v11 = v4[3] >> 1, v11 < v6))
  {
    if (v5 <= v6)
      v12 = v6;
    else
      v12 = v5;
    v4 = sub_249F0CBA8(isUniquelyReferenced_nonNull_native, v12, 1, v4);
    v11 = v4[3] >> 1;
  }
  v13 = v4[2];
  v14 = (uint64_t *)(v11 - v13);
  v15 = sub_249ED9D28(&v45, &v4[2 * v13 + 4], v11 - v13, v9, a2, a3);
  if ((uint64_t)v15 < v9)
    goto LABEL_15;
  if ((uint64_t)v15 >= 1)
  {
    v16 = v4[2];
    v17 = __OFADD__(v16, v15);
    v18 = (char *)v15 + v16;
    if (v17)
    {
      __break(1u);
LABEL_34:
      v32 = v38 + v9 + 1;
      goto LABEL_35;
    }
    v4[2] = v18;
  }
  if (v15 != v14)
  {
LABEL_13:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v3 = v4;
    return result;
  }
LABEL_16:
  v20 = v48;
  v21 = v45;
  if (v48 == v45)
    goto LABEL_13;
  v22 = v4[2];
  v41 = v46;
  v42 = v47;
  v43 = v45;
  v23 = sub_249F0F0A0((uint64_t (*)())v44, v48, v45, v46, v47);
  v26 = *v24;
  v25 = v24[1];
  swift_bridgeObjectRetain();
  result = ((uint64_t (*)(_BYTE *, _QWORD))v23)(v44, 0);
  v27 = v21;
  if (v20 < 0 || v20 >= v21)
    goto LABEL_37;
  v28 = v20 + 1;
  v29 = -v21;
LABEL_21:
  while (1)
  {
    v30 = v4[3];
    v31 = v30 >> 1;
    v32 = v22 + 1;
    if ((uint64_t)(v30 >> 1) < v22 + 1)
      break;
    if (v22 < v31)
      goto LABEL_23;
LABEL_20:
    v4[2] = v22;
  }
  v4 = sub_249F0CBA8((_QWORD *)(v30 > 1), v22 + 1, 1, v4);
  v31 = v4[3] >> 1;
  if (v22 >= v31)
    goto LABEL_20;
LABEL_23:
  v39 = v31;
  v33 = &v4[2 * v22];
  v33[4] = v26;
  v33[5] = v25;
  if (v28 == v27)
  {
LABEL_35:
    v4[2] = v32;
    goto LABEL_13;
  }
  v9 = 0;
  v40 = v29 + v28;
  v38 = v22;
  v34 = ~v22 + v31;
  v35 = v33 + 7;
  while (1)
  {
    v36 = sub_249F0F0A0((uint64_t (*)())v44, v28 + v9, v27, v41, v42);
    v26 = *v37;
    v25 = v37[1];
    swift_bridgeObjectRetain();
    result = ((uint64_t (*)(_BYTE *, _QWORD))v36)(v44, 0);
    v27 = v43;
    if (v28 < 0 || v28 + v9 >= v43)
      break;
    if (v34 == v9)
    {
      v28 += v9 + 1;
      v22 = v39;
      v29 = -v43;
      v4[2] = v39;
      goto LABEL_21;
    }
    *(v35 - 1) = v26;
    *v35 = v25;
    ++v9;
    v35 += 2;
    if (!(v40 + v9))
      goto LABEL_34;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_249F0AE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_249F0CA88(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0AF74(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v8;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t (*v20)();
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t (*v32)();
  uint64_t *v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  _BYTE v37[32];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v10 = v4[3] >> 1, v10 < v6))
  {
    if (v5 <= v6)
      v11 = v6;
    else
      v11 = v5;
    v4 = sub_249F0CA88(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v10 = v4[3] >> 1;
  }
  v12 = v4[2];
  v13 = v10 - v12;
  result = (uint64_t)sub_249ED9E34(&v38, &v4[v12 + 4], v10 - v12, v8, a2);
  if (result < v8)
    goto LABEL_15;
  if (result >= 1)
  {
    v14 = v4[2];
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      v27 = v34 + v3 + 1;
      goto LABEL_35;
    }
    v4[2] = v16;
  }
  if (result != v13)
  {
LABEL_13:
    *(_QWORD *)v2 = v4;
    return result;
  }
LABEL_16:
  v17 = v40;
  v18 = v38;
  if (v40 == v38)
    goto LABEL_13;
  v19 = v4[2];
  v36 = v39;
  v20 = sub_249F0F0E8((uint64_t (*)())v37, v40, v38, v39);
  v22 = *v21;
  result = ((uint64_t (*)(_BYTE *, _QWORD))v20)(v37, 0);
  if (v17 < 0 || v17 >= v18)
    goto LABEL_37;
  v23 = v17 + 1;
  v24 = -v18;
LABEL_21:
  while (1)
  {
    v25 = v4[3];
    v26 = v25 >> 1;
    v27 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1)
      break;
    if (v19 < v26)
      goto LABEL_23;
LABEL_20:
    v4[2] = v19;
  }
  result = (uint64_t)sub_249F0CA88((_QWORD *)(v25 > 1), v19 + 1, 1, v4);
  v4 = (_QWORD *)result;
  v26 = *(_QWORD *)(result + 24) >> 1;
  if (v19 >= v26)
    goto LABEL_20;
LABEL_23:
  v28 = &v4[v19];
  v28[4] = v22;
  if (v23 == v18)
  {
LABEL_35:
    v4[2] = v27;
    goto LABEL_13;
  }
  v3 = 0;
  v29 = v24 + v23;
  v34 = v19;
  v35 = v26;
  v30 = ~v19 + v26;
  v31 = v28 + 5;
  while (1)
  {
    v32 = sub_249F0F0E8((uint64_t (*)())v37, v23 + v3, v18, v36);
    v22 = *v33;
    result = ((uint64_t (*)(_BYTE *, _QWORD))v32)(v37, 0);
    if (v23 < 0 || v23 + v3 >= v18)
      break;
    if (v30 == v3)
    {
      v23 += v3 + 1;
      v19 = v35;
      v24 = -v18;
      v4[2] = v35;
      goto LABEL_21;
    }
    v31[v3++] = v22;
    if (!(v29 + v3))
      goto LABEL_34;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void __swiftcall BPETokenizer.init(merges:vocabulary:padToken:)(DiffusionBase::BPETokenizer *__return_ptr retstr, Swift::OpaquePointer merges, Swift::OpaquePointer vocabulary, Swift::String padToken)
{
  retstr->merges = merges;
  retstr->vocabulary = vocabulary;
  retstr->padToken = padToken;
  retstr->startToken._countAndFlagsBits = 0x6F74726174737C3CLL;
  retstr->startToken._object = (void *)0xEF3E7C7478657466;
  strcpy((char *)&retstr->endToken, "<|endoftext|>");
  HIWORD(retstr->endToken._object) = -4864;
  strcpy((char *)&retstr->unknownToken, "<|endoftext|>");
  HIWORD(retstr->unknownToken._object) = -4864;
}

uint64_t sub_249F0B220(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  size_t v64;
  uint64_t isStackAllocationSafe;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t result;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE v86[16];
  uint64_t *v87;
  uint64_t v88;

  v2 = v1;
  v88 = *MEMORY[0x24BDAC8D0];
  v4 = sub_249F1E4DC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v83 = sub_249E14D88();
  v84 = v8;
  sub_249F1E4D0();
  sub_249D9E5BC();
  sub_249F1F9C4();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  v9 = sub_249F1F3B8();
  v11 = v10;
  swift_bridgeObjectRelease();
  v83 = 32;
  v84 = 0xE100000000000000;
  v87 = &v83;
  swift_bridgeObjectRetain();
  v12 = 0;
  v13 = sub_249F0C388(0x7FFFFFFFFFFFFFFFLL, 1, sub_249F10EF4, (uint64_t)v86, v9, v11);
  swift_bridgeObjectRelease();
  v85 = MEMORY[0x24BEE4AF8];
  v73 = *(_QWORD *)(v13 + 16);
  if (!v73)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v72 = v13 + 32;
  v71[1] = v13;
  swift_bridgeObjectRetain();
  v14 = 0;
  v76 = v1;
LABEL_3:
  v74 = v14;
  v75 = *(_QWORD *)(v72 + 32 * v14 + 24);
  swift_bridgeObjectRetain();
  v15 = sub_249F1F988();
  if (!v15)
  {
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v24 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v24)
      goto LABEL_18;
LABEL_12:
    v25 = &v17[2 * v24 - 2];
    v26 = v25[5];
    v83 = v25[4];
    v84 = v26;
    swift_bridgeObjectRetain_n();
    sub_249F1F460();
    swift_bridgeObjectRelease();
    v27 = v83;
    v28 = v84;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_249EC94F4(v17);
    if (v24 <= v17[2])
    {
      v29 = &v17[2 * v24 - 2];
      v29[4] = v27;
      v29[5] = v28;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  v16 = v15;
  v83 = MEMORY[0x24BEE4AF8];
  sub_249DB673C(0, v15 & ~(v15 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  v78 = 0;
  v17 = (_QWORD *)v83;
  do
  {
    v19 = sub_249F1F994();
    v83 = (uint64_t)v17;
    v21 = v17[2];
    v20 = v17[3];
    if (v21 >= v20 >> 1)
    {
      v23 = v18;
      sub_249DB673C(v20 > 1, v21 + 1, 1);
      v18 = v23;
      v17 = (_QWORD *)v83;
    }
    v17[2] = v21 + 1;
    v22 = &v17[2 * v21];
    v22[4] = v19;
    v22[5] = v18;
    sub_249F1F97C();
    --v16;
  }
  while (v16);
  v12 = v78;
  v2 = v76;
  v24 = v17[2];
  if (v24)
    goto LABEL_12;
  while (1)
  {
LABEL_18:
    v39 = v17[2];
    if (v39 < 2)
    {
      v40 = MEMORY[0x24BEE4B08];
    }
    else
    {
      v78 = v12;
      sub_249F10F48();
      swift_bridgeObjectRetain();
      v40 = sub_249F1F70C();
      v41 = v17[4];
      v79 = v17 + 4;
      v42 = v17[5];
      v77 = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = 1;
      v80 = v39;
      do
      {
        v46 = v40 + 56;
        v47 = v41;
        v48 = v42;
        v81 = v40;
        while (1)
        {
          v49 = &v79[2 * v43];
          v41 = *v49;
          v42 = v49[1];
          v82 = v43 + 1;
          sub_249F1FF64();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_249F1F40C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_249F1F40C();
          swift_bridgeObjectRelease();
          v50 = sub_249F1FFA0();
          v51 = -1 << *(_BYTE *)(v40 + 32);
          v52 = v50 & ~v51;
          if (((*(_QWORD *)(v46 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
            break;
          v53 = ~v51;
          v54 = *(_QWORD *)(v40 + 48);
          while (1)
          {
            v55 = (_QWORD *)(v54 + 32 * v52);
            v57 = v55[2];
            v56 = v55[3];
            v58 = *v55 == v47 && v55[1] == v48;
            if (v58 || (sub_249F1FE2C() & 1) != 0)
            {
              v59 = v57 == v41 && v56 == v42;
              if (v59 || (sub_249F1FE2C() & 1) != 0)
                break;
            }
            v52 = (v52 + 1) & v53;
            if (((*(_QWORD *)(v46 + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
              goto LABEL_20;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40 = v81;
          swift_bridgeObjectRelease();
          v47 = v41;
          v48 = v42;
          v43 = v82;
          if (v82 == v80)
            goto LABEL_36;
        }
LABEL_20:
        v44 = v81;
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v83 = v44;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_249F0E1B4(v47, v48, v41, v42, v52, isUniquelyReferenced_nonNull_native);
        v40 = v83;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = v82;
      }
      while (v82 != v80);
LABEL_36:
      swift_bridgeObjectRelease();
      v17 = v77;
      swift_bridgeObjectRelease_n();
      v2 = v76;
      v12 = v78;
    }
    v60 = v40;
    v61 = *(_BYTE *)(v40 + 32);
    v62 = v61 & 0x3F;
    v63 = (unint64_t)((1 << v61) + 63) >> 6;
    v64 = 8 * v63;
    sub_249F0FA70((uint64_t)v2);
    sub_249F0FA70((uint64_t)v2);
    isStackAllocationSafe = sub_249F0FA70((uint64_t)v2);
    if (v62 > 0xD)
    {
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) == 0)
        break;
    }
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v71 - ((v64 + 15) & 0x3FFFFFFFFFFFFFF0), v64);
    sub_249F0FA70((uint64_t)v2);
    v66 = sub_249F10218((uint64_t)v71 - ((v64 + 15) & 0x3FFFFFFFFFFFFFF0), v63, v60, (uint64_t)v2);
    if (v12)
    {
      sub_249F0FAE4((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_willThrow();
      goto LABEL_53;
    }
    v67 = v66;
    sub_249F0FAE4((uint64_t)v2);
    swift_bridgeObjectRelease();
LABEL_44:
    sub_249F0FAE4((uint64_t)v2);
    sub_249F0FAE4((uint64_t)v2);
    sub_249F0FAE4((uint64_t)v2);
    if (!*(_QWORD *)(v67 + 16))
    {
      swift_bridgeObjectRelease();
      swift_release();
      v14 = v74 + 1;
      sub_249F0AA48((uint64_t)v17);
      if (v14 == v73)
      {
        swift_bridgeObjectRelease_n();
        return v85;
      }
      goto LABEL_3;
    }
    sub_249F0FA70((uint64_t)v2);
    v30 = sub_249F10418(v67, v2);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    sub_249F0FAE4((uint64_t)v2);
    swift_release();
    if (!v32)
      goto LABEL_50;
    v37 = swift_bridgeObjectRetain();
    v38 = sub_249F1099C(v37, v30, v32, v34, v36);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)v38;
  }
  v68 = (void *)swift_slowAlloc();
  bzero(v68, v64);
  sub_249F0FA70((uint64_t)v2);
  v69 = sub_249F10218((uint64_t)v68, v63, v60, (uint64_t)v2);
  if (!v12)
  {
    v67 = v69;
    sub_249F0FAE4((uint64_t)v2);
    swift_bridgeObjectRelease();
    MEMORY[0x24BD06618](v68, -1, -1);
    goto LABEL_44;
  }
  sub_249F0FAE4((uint64_t)v2);
  swift_bridgeObjectRelease();
  MEMORY[0x24BD06618](v68, -1, -1);
LABEL_53:
  result = sub_249F0FAE4((uint64_t)v2);
  __break(1u);
  return result;
}

Swift::Int_optional __swiftcall BPETokenizer.tokenID(for:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v5;
  char v6;
  Swift::Int v7;
  char v8;
  Swift::Bool v9;
  Swift::Int v10;
  Swift::Int_optional result;

  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v2 + 16))
  {
    object = a1._object;
    countAndFlagsBits = a1._countAndFlagsBits;
    swift_bridgeObjectRetain();
    v5 = sub_249DB7D8C(countAndFlagsBits, (uint64_t)object);
    if ((v6 & 1) != 0)
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
    else
      v7 = 0;
    v8 = v6 ^ 1;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = v8 & 1;
  v10 = v7;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

Swift::String_optional __swiftcall BPETokenizer.token(id:)(Swift::Int id)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int *v14;
  Swift::Int v15;
  void *v16;
  void *v17;
  Swift::String_optional result;

  v2 = 0;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v3 + 64;
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v2 << 6);
      goto LABEL_5;
    }
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v11 >= v8)
      goto LABEL_26;
    v12 = *(_QWORD *)(v6 + 8 * v11);
    ++v2;
    if (!v12)
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_26;
      v12 = *(_QWORD *)(v6 + 8 * v2);
      if (!v12)
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_26;
        v12 = *(_QWORD *)(v6 + 8 * v2);
        if (!v12)
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_26;
          v12 = *(_QWORD *)(v6 + 8 * v2);
          if (!v12)
          {
            v2 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_26;
            v12 = *(_QWORD *)(v6 + 8 * v2);
            if (!v12)
            {
              v13 = v11 + 5;
              if (v13 >= v8)
              {
LABEL_26:
                v15 = 0;
                v16 = 0;
                goto LABEL_27;
              }
              v12 = *(_QWORD *)(v6 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v2 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_29;
                  if (v2 >= v8)
                    goto LABEL_26;
                  v12 = *(_QWORD *)(v6 + 8 * v2);
                  ++v13;
                  if (v12)
                    goto LABEL_24;
                }
              }
              v2 = v13;
            }
          }
        }
      }
    }
LABEL_24:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v2 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10) == id)
    {
      v14 = (Swift::Int *)(*(_QWORD *)(v3 + 48) + 16 * v10);
      v15 = *v14;
      v16 = (void *)v14[1];
      swift_bridgeObjectRetain();
LABEL_27:
      id = v15;
      v17 = v16;
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  result.value._object = v17;
  result.value._countAndFlagsBits = id;
  return result;
}

uint64_t sub_249F0BC70(_QWORD *a1, uint64_t a2, char a3)
{
  return BPETokenizer.tokenize(input:minCount:)(a1, a2, a3 & 1);
}

uint64_t BPETokenizer.TokenPair.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t static BPETokenizer.TokenPair.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6 || (v12 = sub_249F1FE2C(), result = 0, (v12 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return sub_249F1FE2C();
  }
  return result;
}

uint64_t BPETokenizer.TokenPair.hashValue.getter()
{
  sub_249F1FF64();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F0BE58()
{
  sub_249F1FF64();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F0BEDC()
{
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249F0BF4C()
{
  sub_249F1FF64();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F0BFCC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_249F1FE2C(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_249F1FE2C();
  }
  return result;
}

uint64_t MockedTokenizer.tokenize(input:minCount:)(_QWORD *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v25;
  uint64_t v26;

  v26 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED08);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F333A0;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = 0xE000000000000000;
  *(_QWORD *)(inited + 48) = &unk_251B5B110;
  *(_QWORD *)(inited + 56) = 0xD000000000000014;
  *(_QWORD *)(inited + 64) = 0x8000000249F39EA0;
  *(_QWORD *)(inited + 72) = &unk_251B5B140;
  *(_QWORD *)(inited + 80) = 0xD000000000000015;
  *(_QWORD *)(inited + 88) = 0x8000000249F39EC0;
  *(_QWORD *)(inited + 96) = &unk_251B5B1B0;
  *(_QWORD *)(inited + 104) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 112) = 0x8000000249F39EE0;
  *(_QWORD *)(inited + 120) = &unk_251B5B218;
  *(_QWORD *)(inited + 128) = 0xD00000000000002FLL;
  *(_QWORD *)(inited + 136) = 0x8000000249F39F00;
  *(_QWORD *)(inited + 144) = &unk_251B5B288;
  *(_QWORD *)(inited + 152) = 0xD000000000000018;
  *(_QWORD *)(inited + 160) = 0x8000000249F39F30;
  *(_QWORD *)(inited + 168) = &unk_251B5B310;
  *(_QWORD *)(inited + 176) = 0xD000000000000020;
  *(_QWORD *)(inited + 184) = 0x8000000249F39F50;
  *(_QWORD *)(inited + 192) = &unk_251B5B378;
  *(_QWORD *)(inited + 200) = 0xD000000000000030;
  *(_QWORD *)(inited + 208) = 0x8000000249F39F80;
  *(_QWORD *)(inited + 216) = &unk_251B5B440;
  *(_QWORD *)(inited + 224) = 0xD000000000000034;
  *(_QWORD *)(inited + 232) = 0x8000000249F39FC0;
  *(_QWORD *)(inited + 240) = &unk_251B5B4E0;
  *(_QWORD *)(inited + 248) = 0xD000000000000023;
  *(_QWORD *)(inited + 256) = 0x8000000249F3A000;
  *(_QWORD *)(inited + 264) = &unk_251B5B580;
  v11 = sub_249EAFC2C(inited);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_249E14D88();
  v12 = sub_249F1F3B8();
  v14 = v13;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v11 + 16) && (v15 = sub_249DB7D8C(v12, v14), (v16 & 1) != 0))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_249F0AE30(v17);
    v18 = v26;
    if ((a3 & 1) != 0)
      goto LABEL_7;
    v19 = *(_QWORD *)(v26 + 16);
    result = a2 - v19;
    if (a2 <= v19)
      goto LABEL_7;
    if (a2 - v19 >= 0)
    {
      sub_249F0AF74(result, a4);
      v18 = v26;
LABEL_7:
      v21 = *(_QWORD *)(v18 + 16);
      swift_bridgeObjectRetain();
      sub_249F0AB98(v21, a5, a6);
      return v25;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_249F0FB54();
    swift_allocError();
    *v22 = 0xD000000000000047;
    v22[1] = 0x8000000249F3A030;
    return swift_willThrow();
  }
  return result;
}

Swift::String __swiftcall MockedTokenizer.decode(tokens:)(Swift::OpaquePointer tokens)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = 0;
  v2 = (void *)0xE000000000000000;
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_249F0C368(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return MockedTokenizer.tokenize(input:minCount:)(a1, a2, a3 & 1, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
}

uint64_t sub_249F0C388(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_249F0C824(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_249F1F4B4();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_249F1F430();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_249F1F430();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_249F1F4D8();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_249F0D40C(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_249F0D40C((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_249F1F430();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_249F1F4D8();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_249F0D40C(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_249F0D40C((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_249F1FBC8();
  __break(1u);
LABEL_42:
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

uint64_t sub_249F0C824(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_249F1F4D8();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_249F0D40C(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_249F0D40C((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

char *sub_249F0C97C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE260);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_249F0F1F8(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_249F0CA88(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C18);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_249F0F110(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_249F0CB94(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_249F0CED8(a1, a2, a3, a4, &qword_2578DDDE0, &qword_2578DDDE8);
}

_QWORD *sub_249F0CBA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D6C78);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_249F10038(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_249F0CCB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D9600);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_249F1FBC8();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_249F0F2E0(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_249F0CEC4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_249F0CED8(a1, a2, a3, a4, &qword_2578DE0C8, &qword_2578DED58);
}

_QWORD *sub_249F0CED8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_249F10CE4(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_249F0CFF0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD68);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_249F0F110(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_249F0D0FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD70);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_249F0F1F8(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_249F0D208(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED40);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_249F0F70C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_249F0D314(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DC128);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_249DC0CF8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_249F0D40C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED38);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_249F10128(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_249F0D518(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_249F0CED8(a1, a2, a3, a4, &qword_2578DED20, &qword_2578DEAD0);
}

_QWORD *sub_249F0D52C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD48);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_249F10DE8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_249F0D64C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED50);
  v3 = sub_249F1FA54();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x249F0DA38);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_249F1FF64();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_249F0DA5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED30);
  v3 = sub_249F1FA54();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_33;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_33;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_33;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v10 >= v32)
                    goto LABEL_33;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = v2;
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      sub_249F1FF64();
      swift_bridgeObjectRetain();
      sub_249F1F40C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_249F1F40C();
      swift_bridgeObjectRelease();
      result = sub_249F1FFA0();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
      *v12 = v20;
      v12[1] = v21;
      v12[2] = v22;
      v12[3] = v23;
      ++*(_QWORD *)(v4 + 16);
      v2 = v18;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_249F0DD94(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  _BYTE v15[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_249F0D64C();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_249F0E398();
        goto LABEL_10;
      }
      sub_249F0E6E8();
    }
    v8 = *v3;
    sub_249F1FF64();
    sub_249DBFA40((uint64_t)v15, v5);
    result = sub_249F1FFA0();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x249F0E150);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

uint64_t sub_249F0E1B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_22;
  if ((a6 & 1) != 0)
  {
    sub_249F0DA5C();
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_249F0E528();
      goto LABEL_22;
    }
    sub_249F0EAC4();
  }
  v14 = *v6;
  sub_249F1FF64();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  result = sub_249F1FFA0();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a5 = result & ~v15;
  v16 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v14 + 48);
    while (1)
    {
      v19 = (_QWORD *)(v18 + 32 * a5);
      v20 = v19[2];
      v21 = v19[3];
      v22 = *v19 == v11 && v19[1] == a2;
      if (v22 || (result = sub_249F1FE2C(), (result & 1) != 0))
      {
        if (v20 == a3 && v21 == a4)
          break;
        result = sub_249F1FE2C();
        if ((result & 1) != 0)
          break;
      }
      a5 = (a5 + 1) & v17;
      if (((*(_QWORD *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
        goto LABEL_22;
    }
    result = sub_249F1FF04();
    __break(1u);
  }
LABEL_22:
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v25 = (uint64_t *)(*(_QWORD *)(v24 + 48) + 32 * a5);
  *v25 = v11;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
  return result;
}

void *sub_249F0E398()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED50);
  v2 = *v0;
  v3 = sub_249F1FA48();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_249F0E528()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED30);
  v2 = *v0;
  v3 = sub_249F1FA48();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = v17[2];
    v20 = v17[3];
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    v21[2] = v19;
    v21[3] = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_249F0E6E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED50);
  v3 = sub_249F1FA54();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x249F0EAA0);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_249F1FF64();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

uint64_t sub_249F0EAC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED30);
  v3 = sub_249F1FA54();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v31)
      goto LABEL_33;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_33;
      v16 = *(_QWORD *)(v30 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_33;
        v16 = *(_QWORD *)(v30 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    sub_249F1FF64();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_249F1F40C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_249F1F40C();
    swift_bridgeObjectRelease();
    result = sub_249F1FFA0();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v11);
    *v12 = v19;
    v12[1] = v20;
    v12[2] = v21;
    v12[3] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v30 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v31)
      goto LABEL_33;
    v16 = *(_QWORD *)(v30 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_249F0EDC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v34;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED30);
  result = sub_249F1FA60();
  v8 = result;
  v32 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  v34 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v32)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v32)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v32)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    sub_249F1FF64();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_249F1F40C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_249F1F40C();
    swift_bridgeObjectRelease();
    result = sub_249F1FFA0();
    v22 = -1 << *(_BYTE *)(v8 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 32 * v25);
    *v30 = v18;
    v30[1] = v19;
    v30[2] = v20;
    v30[3] = v21;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v4 = v34;
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v32)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v32)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t (*sub_249F0F0A0(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = a4;
    *((_QWORD *)result + 1) = a5;
    swift_bridgeObjectRetain();
    return destroy for ClientIdentity;
  }
  return result;
}

uint64_t (*sub_249F0F0E8(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = a4;
    return nullsub_1;
  }
  return result;
}

char *sub_249F0F110(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_249F1FC28();
  __break(1u);
  return result;
}

char *sub_249F0F1F8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0F2E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0F3FC(uint64_t a1, _QWORD *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_249DB677C(0, v2, 0);
    v3 = v20;
    v6 = a2[1];
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v8 = *i;
      if (!*(_QWORD *)(v6 + 16))
        break;
      v9 = *(i - 1);
      swift_bridgeObjectRetain();
      v10 = sub_249DB7D8C(v9, v8);
      if ((v11 & 1) == 0)
      {
        if (*(_QWORD *)(v6 + 16))
        {
          v13 = a2[8];
          v14 = a2[9];
          swift_bridgeObjectRetain();
          v15 = sub_249DB7D8C(v13, v14);
          if ((v16 & 1) != 0)
          {
            v12 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v12 = 0;
          }
          goto LABEL_11;
        }
        goto LABEL_10;
      }
      v12 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v10);
LABEL_11:
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(v20 + 16);
      v17 = *(_QWORD *)(v20 + 24);
      if (v18 >= v17 >> 1)
        sub_249DB677C(v17 > 1, v18 + 1, 1);
      *(_QWORD *)(v20 + 16) = v18 + 1;
      *(_QWORD *)(v20 + 8 * v18 + 32) = v12;
      if (!--v2)
        return v3;
    }
    swift_bridgeObjectRetain();
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  return v3;
}

_QWORD *sub_249F0F578(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_249F0CA88(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)&v7[v14 + 4];
  v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6])
    goto LABEL_27;
  result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0F70C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED48);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F0F814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  unint64_t v21;
  uint64_t v22;

  v11 = sub_249EF78A8();
  if (v5)
  {
    swift_bridgeObjectRelease();
    v12 = sub_249F1E7F4();
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
    v13(a2, v12);
    v13(a1, v12);
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v11;
    swift_bridgeObjectRetain();
    v16 = sub_249F1E800();
    v21 = v17;
    v18 = v16;
    sub_249F1E44C();
    swift_allocObject();
    sub_249F1E440();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDEA0);
    sub_249EBB4D0();
    sub_249F1E428();
    sub_249DC3C24(v18, v21);
    swift_release();
    v19 = sub_249F1E7F4();
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
    v20(a2, v19);
    v20(a1, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a5 = v15;
    *(_QWORD *)(a5 + 8) = v22;
    *(_QWORD *)(a5 + 16) = a3;
    *(_QWORD *)(a5 + 24) = a4;
    *(_QWORD *)(a5 + 32) = 0x6F74726174737C3CLL;
    *(_QWORD *)(a5 + 40) = 0xEF3E7C7478657466;
    strcpy((char *)(a5 + 48), "<|endoftext|>");
    *(_WORD *)(a5 + 62) = -4864;
    strcpy((char *)(a5 + 64), "<|endoftext|>");
    *(_WORD *)(a5 + 78) = -4864;
  }
  return result;
}

uint64_t sub_249F0FA70(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_249F0FAE4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_249F0FB54()
{
  unint64_t result;

  result = qword_2578DED10;
  if (!qword_2578DED10)
  {
    result = MEMORY[0x24BD06528](&unk_249F33480, &type metadata for TokenizerError);
    atomic_store(result, (unint64_t *)&qword_2578DED10);
  }
  return result;
}

unint64_t sub_249F0FB9C()
{
  unint64_t result;

  result = qword_2578DED18;
  if (!qword_2578DED18)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for BPETokenizer.TokenPair, &type metadata for BPETokenizer.TokenPair);
    atomic_store(result, (unint64_t *)&qword_2578DED18);
  }
  return result;
}

uint64_t destroy for BPETokenizer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for BPETokenizer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BPETokenizer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for BPETokenizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BPETokenizer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BPETokenizer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BPETokenizer()
{
  return &type metadata for BPETokenizer;
}

uint64_t getEnumTagSinglePayload for BPETokenizer.TokenPair(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BPETokenizer.TokenPair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BPETokenizer.TokenPair()
{
  return &type metadata for BPETokenizer.TokenPair;
}

uint64_t initializeBufferWithCopyOfBuffer for MockedTokenizer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MockedTokenizer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MockedTokenizer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MockedTokenizer()
{
  return &type metadata for MockedTokenizer;
}

ValueMetadata *type metadata accessor for TokenizerError()
{
  return &type metadata for TokenizerError;
}

uint64_t sub_249F10038(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F10128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F10218(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t *v23;
  uint64_t v24;
  int64_t v26;

  v23 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v26 = (unint64_t)(v8 + 63) >> 6;
LABEL_4:
  v24 = v5;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v6++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v6 >= v26)
      goto LABEL_28;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    if (!v14)
      break;
LABEL_17:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_18:
    if (*(_QWORD *)(*(_QWORD *)a4 + 16))
    {
      v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 32 * v12);
      v17 = v16[2];
      v18 = v16[3];
      v19 = *v16;
      v20 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_249ED8670(v19, v20, v17, v18);
      LOBYTE(v19) = v21;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
      {
        *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        v5 = v24 + 1;
        if (!__OFADD__(v24, 1))
          goto LABEL_4;
        __break(1u);
LABEL_28:
        swift_retain();
        return sub_249F0EDC8(v23, a2, v24, a3);
      }
    }
  }
  v15 = v6 + 1;
  if (v6 + 1 >= v26)
    goto LABEL_28;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v6 + 2;
  if (v6 + 2 >= v26)
    goto LABEL_28;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v6 + 3;
  if (v6 + 3 >= v26)
    goto LABEL_28;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v6 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v26)
      goto LABEL_28;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_249F10418(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int64_t v36;
  _QWORD *i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = (_QWORD *)a1;
  v35 = a1 + 56;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v36 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    v13 = v3 & 0x3F;
    if (v13 <= 6)
      return 0;
    v36 = (unint64_t)(v4 + 63) >> 6;
    v30 = *(_QWORD *)(a1 + 64);
    if (v30)
    {
      v7 = 1;
    }
    else
    {
      if (v13 < 8)
        return 0;
      v30 = *(_QWORD *)(a1 + 72);
      if (v30)
      {
        v7 = 2;
      }
      else
      {
LABEL_41:
        v30 = v2[10];
        if (v30)
        {
          v7 = 3;
        }
        else
        {
LABEL_44:
          if (v13 < 9)
            return 0;
          v30 = v2[11];
          if (v30)
          {
            v7 = 4;
          }
          else
          {
            v30 = v2[12];
            if (!v30)
              goto LABEL_50;
            v7 = 5;
          }
        }
      }
    }
LABEL_35:
    v9 = (v30 - 1) & v30;
    v8 = __clz(__rbit64(v30)) + (v7 << 6);
  }
  v10 = (uint64_t *)(v2[6] + 32 * v8);
  v11 = v10[1];
  v12 = v10[3];
  v39 = v10[2];
  v40 = *v10;
  swift_bridgeObjectRetain();
  v42 = v11;
  swift_bridgeObjectRetain();
  v41 = v12;
  swift_bridgeObjectRetain();
  for (i = v2; ; v2 = i)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_25;
    }
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v16 >= v36)
      goto LABEL_31;
    v17 = *(_QWORD *)(v35 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v36)
        goto LABEL_31;
      v17 = *(_QWORD *)(v35 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v36)
          goto LABEL_31;
        v17 = *(_QWORD *)(v35 + 8 * v7);
        if (!v17)
        {
          v7 = v16 + 3;
          if (v16 + 3 >= v36)
            goto LABEL_31;
          v17 = *(_QWORD *)(v35 + 8 * v7);
          if (!v17)
            break;
        }
      }
    }
LABEL_24:
    v13 = v17 - 1;
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_25:
    v19 = *a2;
    if (!*(_QWORD *)(*a2 + 16))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v20 = (uint64_t *)(v2[6] + 32 * v15);
    v21 = *v20;
    v22 = v20[1];
    v24 = v20[2];
    v23 = v20[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v25 = sub_249ED8670(v21, v22, v24, v23);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_59:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    v2 = *(_QWORD **)(*(_QWORD *)(v19 + 56) + 8 * v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v19 + 16))
      goto LABEL_40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = sub_249ED8670(v40, v42, v39, v41);
    if ((v28 & 1) == 0)
      goto LABEL_59;
    v29 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((uint64_t)v2 < v29)
    {
      v41 = v23;
      v42 = v22;
      v39 = v24;
      v40 = v21;
    }
  }
  v18 = v16 + 4;
  if (v18 >= v36)
  {
LABEL_31:
    swift_release();
    return v40;
  }
  v17 = *(_QWORD *)(v35 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v36)
      goto LABEL_31;
    v17 = *(_QWORD *)(v35 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
  __break(1u);
LABEL_50:
  v31 = 0;
  v32 = 6;
  if (v36 > 6)
    v32 = v36;
  v33 = v32 - 6;
  while (v33 != v31)
  {
    v30 = v2[v31++ + 13];
    if (v30)
    {
      v7 = v31 + 5;
      goto LABEL_35;
    }
  }
  return 0;
}

_QWORD *sub_249F107FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_249F0CBA8(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (unint64_t)&v7[2 * v14 + 4];
  v16 = a2 + 16 * a3;
  if (v16 < v15 + 16 * v6 && v15 < v16 + 16 * v6)
    goto LABEL_27;
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F1099C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  BOOL v16;
  int64_t v17;
  uint64_t *v18;
  int64_t v20;
  uint64_t *v21;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 < 2)
  {
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    v10 = 0;
    v35 = sub_249F0CBA8(0, v5 - 1, 0, MEMORY[0x24BEE4AF8]);
    v11 = a1 + 32;
    v33 = a5;
    while (1)
    {
      v14 = (uint64_t *)(v11 + 16 * v10);
      result = *v14;
      v16 = *v14 == a2 && v14[1] == a3;
      v17 = v10;
      if (!v16)
      {
        result = sub_249F1FE2C();
        v17 = v10;
        if ((result & 1) == 0)
        {
          v17 = v10 + 1;
          if (v10 + 1 == v5)
          {
LABEL_45:
            v32 = swift_bridgeObjectRetain();
            sub_249F107FC(v32, v11, v10, (2 * v5) | 1);
            swift_unknownObjectRelease();
            return (uint64_t)v35;
          }
          if (v10 + 1 >= v5)
            goto LABEL_53;
          v18 = (uint64_t *)(v11 + 16 * v17);
          result = *v18;
          if (*v18 != a2 || v18[1] != a3)
          {
            result = sub_249F1FE2C();
            if ((result & 1) == 0)
              break;
          }
        }
      }
LABEL_26:
      if (v5 < v17)
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if (v17 < 0)
        goto LABEL_49;
      v23 = swift_bridgeObjectRetain();
      result = (uint64_t)sub_249F107FC(v23, v11, v10, (2 * v17) | 1);
      if (v10 >= v5 - 1)
        goto LABEL_40;
      if (v17 + 1 >= v5)
        goto LABEL_52;
      v24 = (_QWORD *)(v11 + 16 * (v17 + 1));
      v25 = *v24 == a4 && v24[1] == a5;
      if (v25 || (sub_249F1FE2C() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        sub_249F1F460();
        v26 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = sub_249F0CBA8(0, v35[2] + 1, 1, v35);
        v28 = v26[2];
        v27 = v26[3];
        if (v28 >= v27 >> 1)
          v26 = sub_249F0CBA8((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
        v26[2] = v28 + 1;
        v29 = &v26[2 * v28];
        v29[4] = a2;
        v29[5] = a3;
        swift_bridgeObjectRelease();
        v13 = 2;
      }
      else
      {
LABEL_40:
        v26 = v35;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = sub_249F0CBA8(0, v35[2] + 1, 1, v35);
        v31 = v26[2];
        v30 = v26[3];
        if (v31 >= v30 >> 1)
          v26 = sub_249F0CBA8((_QWORD *)(v30 > 1), v31 + 1, 1, v26);
        v26[2] = v31 + 1;
        v12 = &v26[2 * v31];
        v12[4] = a2;
        v12[5] = a3;
        swift_bridgeObjectRelease();
        v13 = 1;
      }
      v35 = v26;
      v10 = v17 + v13;
      a5 = v33;
      if (v17 + v13 >= v5)
        return (uint64_t)v26;
    }
    while (1)
    {
      v20 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v20 == v5)
        goto LABEL_45;
      if (v20 >= v5)
        goto LABEL_51;
      v21 = (uint64_t *)(v11 + 16 * v20);
      result = *v21;
      if (*v21 != a2 || v21[1] != a3)
      {
        result = sub_249F1FE2C();
        ++v17;
        if ((result & 1) == 0)
          continue;
      }
      v17 = v20;
      if (v20 >= v10)
        goto LABEL_26;
      __break(1u);
      goto LABEL_48;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
  }
  return result;
}

uint64_t sub_249F10CE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F10DE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDD50);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_249F1FC28();
  __break(1u);
  return result;
}

uint64_t sub_249F10EF4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_249F1FE2C() & 1;
}

unint64_t sub_249F10F48()
{
  unint64_t result;

  result = qword_2578DED28;
  if (!qword_2578DED28)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for BPETokenizer.TokenPair, &type metadata for BPETokenizer.TokenPair);
    atomic_store(result, (unint64_t *)&qword_2578DED28);
  }
  return result;
}

uint64_t sub_249F10F8C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_249F10FB0()
{
  return swift_deallocObject();
}

uint64_t sub_249F10FC4()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

void sub_249F11044(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_249F11088()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

void sub_249F110D4(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_249F1111C()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t AppleDiffusionAdapter.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_249F111DC + 4 * byte_249F33545[a1]))(0x6F6974616D696E61, 0xE90000000000006ELL);
}

unint64_t sub_249F111DC()
{
  return 0xD000000000000016;
}

uint64_t sub_249F11290()
{
  return 0x656E6F746E696B73;
}

void *static AppleDiffusionAdapter.allCases.getter()
{
  return &unk_251B5AB00;
}

void sub_249F112C0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_249F11308()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  v1 = sub_249F1F4CC();
  sub_249F1F454();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_249F11468(char *a1)
{
  sub_249F134AC(*a1);
}

uint64_t sub_249F11474()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_249F1FF64();
  sub_249DBFA40((uint64_t)v3, v1);
  return sub_249F1FFA0();
}

void sub_249F114B8(uint64_t a1)
{
  char *v1;

  sub_249DBFA40(a1, *v1);
}

uint64_t sub_249F114C0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_249F1FF64();
  sub_249DBFA40((uint64_t)v3, v1);
  return sub_249F1FFA0();
}

uint64_t sub_249F11500@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase05AppleA7AdapterO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_249F1152C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AppleDiffusionAdapter.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_249F11554(_QWORD *a1@<X8>)
{
  *a1 = &unk_251B5AB00;
}

DiffusionBase::AppleDiffusionAdapter_optional __swiftcall AppleDiffusionAdapter.init(modelCatalogInferenceAssetIdentifier:)(Swift::String modelCatalogInferenceAssetIdentifier)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  DiffusionBase::AppleDiffusionAdapter_optional v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  object = modelCatalogInferenceAssetIdentifier._object;
  countAndFlagsBits = modelCatalogInferenceAssetIdentifier._countAndFlagsBits;
  sub_249F1EA4C();
  v4 = v45;
  v3 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v4, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) == countAndFlagsBits && v5 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_20;
  }
  v7 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v7 & 1) != 0)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_249F1EA1C();
  v9 = v45;
  v8 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v9, *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8)) == countAndFlagsBits && v10 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_23;
  }
  v12 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v12 & 1) != 0)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)1;
  }
  sub_249F1EA34();
  v14 = v45;
  v13 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v14, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8)) == countAndFlagsBits && v15 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_25;
  }
  v17 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v17 & 1) != 0)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)2;
  }
  sub_249F1EA04();
  v19 = v45;
  v18 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v19, *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8)) == countAndFlagsBits && v20 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
LABEL_27:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)3;
  }
  v23 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v23 & 1) != 0)
    goto LABEL_27;
  sub_249F1E9EC();
  v25 = v45;
  v24 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v25, *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8)) == countAndFlagsBits && v26 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
LABEL_32:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)4;
  }
  v27 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v27 & 1) != 0)
    goto LABEL_32;
  sub_249F1EA28();
  v29 = v45;
  v28 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v29, *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8)) == countAndFlagsBits && v30 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
LABEL_37:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)5;
  }
  v31 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v31 & 1) != 0)
    goto LABEL_37;
  sub_249F1EA40();
  v33 = v45;
  v32 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v33, *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8)) == countAndFlagsBits && v34 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
LABEL_42:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)6;
  }
  v35 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v35 & 1) != 0)
    goto LABEL_42;
  sub_249F1EA10();
  v37 = v45;
  v36 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v37, *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8)) == countAndFlagsBits && v38 == object)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
LABEL_47:
    swift_bridgeObjectRelease();
    return (DiffusionBase::AppleDiffusionAdapter_optional)7;
  }
  v39 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  if ((v39 & 1) != 0)
    goto LABEL_47;
  sub_249F1E9F8();
  v41 = v45;
  v40 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  if (MEMORY[0x24BD04698](v41, *(_QWORD *)(*(_QWORD *)(v40 + 8) + 8)) == countAndFlagsBits && v42 == object)
  {
    swift_bridgeObjectRelease_n();
    v21.value = DiffusionBase_AppleDiffusionAdapter_skintone_emoji;
  }
  else
  {
    v43 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0)
      v21.value = DiffusionBase_AppleDiffusionAdapter_skintone_emoji;
    else
      v21.value = DiffusionBase_AppleDiffusionAdapter_unknownDefault;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v21;
}

void AppleDiffusionAdapter.modelCatalogResourceBundleIdentifier.getter(char a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED60);
  MEMORY[0x24BDAC7A8](v2);
  __asm { BR              X10 }
}

uint64_t sub_249F11AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_249F1E95C();
  v3 = sub_249F1EADC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return v3;
}

void AppleDiffusionAdapter.modelCatalogInferenceAssetIdentifier.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_249F11BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_249F1EA4C();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = MEMORY[0x24BD04698](v0, *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

void sub_249F11C80(char a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED60);
  MEMORY[0x24BDAC7A8](v2);
  __asm { BR              X10 }
}

uint64_t sub_249F11CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  sub_249F1E95C();
  sub_249F1EA88();
  swift_allocObject();
  sub_249F1EA7C();
  sub_249F1EADC();
  sub_249F1EA70();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_249F12D68(v4 - 112, v4 - 160);
  if (*(_QWORD *)(v4 - 136))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED88);
    v5 = sub_249F1EAF4();
    v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v0, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_249DCC2FC(v4 - 160, &qword_2578DED80);
    v8 = sub_249F1EAF4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v0, 1, 1, v8);
  }
}

uint64_t sub_249F11EB4@<X0>(void (*a1)(char *, uint64_t)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[4];

  v42 = a1;
  v5 = sub_249F1E7F4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_249F1EB0C();
  v37 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED90);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED98);
  v43 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v38 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEDA0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_249F1EAF4();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249F11C80(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_249DCC2FC((uint64_t)v16, &qword_2578DEDA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, 1, 1, v5);
  }
  v35 = a3;
  v36 = v6;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  sub_249F1EAE8();
  if (v45)
  {
    v34 = v5;
    sub_249D9E174(&v44, (uint64_t)v46);
    __swift_project_boxed_opaque_existential_1(v46, v46[3]);
    sub_249F1EAB8();
    v23 = v43;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v11, 0, 1, v12);
    v24 = v38;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v38, v11, v12);
    v25 = v40;
    v26 = sub_249F1EA64();
    v27 = v39;
    MEMORY[0x24BD04704](v26);
    v28 = v41;
    v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v42(v25, v41);
    v29 = sub_249F1E764();
    v30 = v36;
    v31 = v27;
    v5 = v34;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v34);
    if ((v29 & 1) != 0)
    {
      v32 = sub_249F1EA64();
      v33 = v35;
      MEMORY[0x24BD04704](v32);
      v42(v25, v28);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v5);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v12);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    v22 = v35;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    sub_249DCC2FC((uint64_t)&v44, &qword_2578DEDA8);
    v22 = v35;
    v30 = v36;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v22, 1, 1, v5);
}

uint64_t sub_249F122F0@<X0>(void (*a1)(char *, uint64_t)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = sub_249F1E770();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249F11EB4(a1, a2, (uint64_t)v12);
  v13 = sub_249F1E7F4();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_249DCC2FC((uint64_t)v12, &qword_2578D7E10);
    v15 = 1;
  }
  else
  {
    sub_249F112C0(a2);
    v22 = a3;
    v25 = v16;
    v26 = v17;
    v23 = 0x2F61726F6CLL;
    v24 = 0xE500000000000000;
    v23 = sub_249F1F4CC();
    v24 = v18;
    sub_249F1F454();
    swift_bridgeObjectRelease();
    v25 = v23;
    v26 = v24;
    v23 = 0xD00000000000001BLL;
    v24 = 0x8000000249F39C20;
    v23 = sub_249F1F4CC();
    v24 = v19;
    sub_249F1F454();
    a3 = v22;
    swift_bridgeObjectRelease();
    v25 = v23;
    v26 = v24;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDCD798], v6);
    sub_249D9E5BC();
    sub_249F1E7DC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a3, v15, 1, v13);
}

uint64_t sub_249F12550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase05AppleA7AdapterO36modelCatalogResourceBundleIdentifierACSgSS_tcfC_0(a1, a2);
  *a3 = result;
  return result;
}

void sub_249F12574()
{
  char *v0;

  AppleDiffusionAdapter.modelCatalogResourceBundleIdentifier.getter(*v0);
}

uint64_t _s13DiffusionBase05AppleA7AdapterO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t _s13DiffusionBase05AppleA7AdapterO36modelCatalogResourceBundleIdentifierACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED60);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v78 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v79 = (char *)&v77 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v80 = (char *)&v77 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v81 = (char *)&v77 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v82 = (char *)&v77 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v77 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v77 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v77 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v77 - v25;
  sub_249F1E95C();
  v27 = sub_249F1EADC();
  v29 = v28;
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31 = a1;
  v32 = a2;
  v33 = v30;
  v30(v26, v4);
  if (v27 == v31 && v29 == v32)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  v35 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_249F1E998();
  v38 = sub_249F1EADC();
  v40 = v39;
  v33(v24, v4);
  if (v38 == v31 && v40 == v32)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    v42 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      sub_249F1E9B0();
      v43 = sub_249F1EADC();
      v45 = v44;
      v33(v21, v4);
      if (v43 == v31 && v45 == v32)
      {
        v36 = 2;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v46 = sub_249F1FE2C();
        swift_bridgeObjectRelease();
        if ((v46 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 2;
        }
        else
        {
          sub_249F1E980();
          v47 = sub_249F1EADC();
          v49 = v48;
          v33(v18, v4);
          if (v47 == v31 && v49 == v32)
          {
            swift_bridgeObjectRelease_n();
            return 3;
          }
          else
          {
            v50 = sub_249F1FE2C();
            swift_bridgeObjectRelease();
            if ((v50 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 3;
            }
            else
            {
              v51 = v82;
              sub_249F1E968();
              v52 = sub_249F1EADC();
              v54 = v53;
              v33(v51, v4);
              if (v52 == v31 && v54 == v32)
              {
                swift_bridgeObjectRelease_n();
                return 4;
              }
              else
              {
                v55 = sub_249F1FE2C();
                swift_bridgeObjectRelease();
                if ((v55 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 4;
                }
                else
                {
                  v56 = v81;
                  sub_249F1E9A4();
                  v57 = sub_249F1EADC();
                  v59 = v58;
                  v33(v56, v4);
                  if (v57 == v31 && v59 == v32)
                  {
                    swift_bridgeObjectRelease_n();
                    return 5;
                  }
                  else
                  {
                    v60 = sub_249F1FE2C();
                    swift_bridgeObjectRelease();
                    if ((v60 & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 5;
                    }
                    else
                    {
                      v61 = v80;
                      sub_249F1E9BC();
                      v62 = sub_249F1EADC();
                      v64 = v63;
                      v33(v61, v4);
                      if (v62 == v31 && v64 == v32)
                      {
                        swift_bridgeObjectRelease_n();
                        return 6;
                      }
                      else
                      {
                        v65 = v32;
                        v66 = sub_249F1FE2C();
                        swift_bridgeObjectRelease();
                        if ((v66 & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 6;
                        }
                        else
                        {
                          v67 = v79;
                          sub_249F1E98C();
                          v68 = sub_249F1EADC();
                          v70 = v69;
                          v33(v67, v4);
                          if (v68 == v31 && v70 == v65)
                          {
                            swift_bridgeObjectRelease_n();
                            return 7;
                          }
                          else
                          {
                            v71 = sub_249F1FE2C();
                            swift_bridgeObjectRelease();
                            if ((v71 & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 7;
                            }
                            else
                            {
                              v72 = v78;
                              sub_249F1E974();
                              v73 = sub_249F1EADC();
                              v75 = v74;
                              v33(v72, v4);
                              if (v73 == v31 && v75 == v65)
                              {
                                swift_bridgeObjectRelease_n();
                                return 8;
                              }
                              else
                              {
                                v76 = sub_249F1FE2C();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((v76 & 1) != 0)
                                  return 8;
                                else
                                  return 9;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v36;
}

unint64_t sub_249F12C08()
{
  unint64_t result;

  result = qword_2578DED68;
  if (!qword_2578DED68)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionAdapter, &type metadata for AppleDiffusionAdapter);
    atomic_store(result, (unint64_t *)&qword_2578DED68);
  }
  return result;
}

unint64_t sub_249F12C50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DED70;
  if (!qword_2578DED70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578DED78);
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2578DED70);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionAdapter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_249F12CE8 + 4 * byte_249F33577[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_249F12D1C + 4 * byte_249F33572[v4]))();
}

uint64_t sub_249F12D1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F12D24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249F12D2CLL);
  return result;
}

uint64_t sub_249F12D38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249F12D40);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_249F12D44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F12D4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionAdapter()
{
  return &type metadata for AppleDiffusionAdapter;
}

uint64_t sub_249F12D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249F12DB0()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = sub_249F12DF4(0x666944656C707061, 0xEE006E6F69737566);
  qword_2578FF498 = result;
  qword_2578FF4A0 = v1;
  qword_2578FF4A8 = v2;
  return result;
}

uint64_t sub_249F12DF4(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = (void *)sub_249F1F304();
  v5 = (void *)sub_249F1F304();
  v6 = PPSCreateTelemetryIdentifier();

  if (!v6)
  {
    if (qword_2578DDA10 != -1)
      swift_once();
    v7 = sub_249F1EF38();
    __swift_project_value_buffer(v7, (uint64_t)qword_2578FF458);
    swift_bridgeObjectRetain();
    v8 = sub_249F1EF20();
    v9 = sub_249F1F820();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315394;
      sub_249E68CA8(0xD000000000000019, 0x8000000249F3A0C0, &v13);
      sub_249F1F9AC();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_249E68CA8(a1, a2, &v13);
      sub_249F1F9AC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_249D98000, v8, v9, "Unable to create a telemetry identifier for (%s, %s)", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24BD06618](v11, -1, -1);
      MEMORY[0x24BD06618](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return a1;
}

uint64_t sub_249F13024(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x436567616D496763;
  else
    v3 = 0x616E616C506E6F6ELL;
  if (v2)
    v4 = 0xEF72656666754272;
  else
    v4 = 0xEF6E6F6974616572;
  if ((a2 & 1) != 0)
    v5 = 0x436567616D496763;
  else
    v5 = 0x616E616C506E6F6ELL;
  if ((a2 & 1) != 0)
    v6 = 0xEF6E6F6974616572;
  else
    v6 = 0xEF72656666754272;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_249F130E0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000015;
  v3 = 0x8000000249F38EA0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000027;
    else
      v5 = 0xD00000000000001DLL;
    if (v4 == 1)
      v6 = 0x8000000249F38EC0;
    else
      v6 = 0x8000000249F38EF0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000015;
  v6 = 0x8000000249F38EA0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000027;
    else
      v2 = 0xD00000000000001DLL;
    if (v7 == 1)
      v3 = 0x8000000249F38EC0;
    else
      v3 = 0x8000000249F38EF0;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_249F131DC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000016;
  else
    v3 = 0xD00000000000001ALL;
  if (v2)
    v4 = 0x8000000249F38DD0;
  else
    v4 = 0x8000000249F38DF0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000016;
  else
    v5 = 0xD00000000000001ALL;
  if ((a2 & 1) != 0)
    v6 = 0x8000000249F38DF0;
  else
    v6 = 0x8000000249F38DD0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_249F13284(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x63696C6C69727963;
    else
      v3 = 7039587;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE300000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x63696C6C69727963;
      else
        v6 = 7039587;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE300000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6E6974616CLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6E6974616CLL)
  {
LABEL_21:
    v8 = sub_249F1FE2C();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_249F13384(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_249F133D0(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_249F13424 + 4 * byte_249F336C4[a2]))(a3 + 18);
}

uint64_t sub_249F13424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 18 && v3 == 0x8000000249F38CB0)
    v4 = 1;
  else
    v4 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_249F134AC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_249F13508(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_249F135F8 + 4 * byte_249F336D1[a2]))(0xD000000000000016);
}

uint64_t sub_249F135F8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000016 && v1 == 0x8000000249F34580)
    v2 = 1;
  else
    v2 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_249F13744(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000032;
  else
    v3 = 0xD000000000000019;
  if (v2)
    v4 = 0x8000000249F38E10;
  else
    v4 = 0x8000000249F38E30;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000032;
  else
    v5 = 0xD000000000000019;
  if ((a2 & 1) != 0)
    v6 = 0x8000000249F38E30;
  else
    v6 = 0x8000000249F38E10;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_249F137EC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x676E696E69617274;
    else
      v3 = 0x6365705361726F6CLL;
    if (v2 == 1)
      v4 = 0xEB00000000676154;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x676E696E69617274;
      else
        v6 = 0x6365705361726F6CLL;
      if (v5 == 1)
        v7 = 0xEB00000000676154;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x676F6C61746163;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x676F6C61746163)
  {
LABEL_21:
    v8 = sub_249F1FE2C();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_249F13914(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_249F13954(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_249F139FC + 4 * byte_249F336E1[a2]))(0x6F6974616D696E61);
}

uint64_t sub_249F139FC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F6974616D696E61 && v1 == 0xE90000000000006ELL)
    v2 = 1;
  else
    v2 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_249F13AFC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 3425357;
  else
    v2 = 3359821;
  if ((a2 & 1) != 0)
    v3 = 3425357;
  else
    v3 = 3359821;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_249F1FE2C();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_249F13B64(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_249F13BB4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_249F13C50 + 4 * byte_249F336F0[a2]))(v2 - 1);
}

uint64_t sub_249F13C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == v1 - 1 && v2 == 0x8000000249F34730)
    v3 = 1;
  else
    v3 = sub_249F1FE2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

id sub_249F13D1C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  id v8;
  uint64_t v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_249F1E788();
  v11[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelAssetWithURL_error_, v2, v11);

  v4 = v11[0];
  if (v3)
  {
    v5 = sub_249F1E7F4();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = v4;
    v6(a1, v5);
  }
  else
  {
    v8 = v11[0];
    sub_249F1E710();

    swift_willThrow();
    v9 = sub_249F1E7F4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t sub_249F13E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t result;
  int v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D62B8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF008);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = -1;
  v8 = dispatch_semaphore_create(0);
  v9 = sub_249F1F604();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = v7;
  v10[7] = v8;
  swift_retain();
  swift_retain();
  v11 = v8;
  sub_249DA85E4((uint64_t)v6, (uint64_t)&unk_2578DF028, (uint64_t)v10);
  swift_release();
  result = sub_249F1F8E0();
  v13 = *(unsigned __int8 *)(v7 + 24);
  if (v13 == 255)
  {
    __break(1u);
  }
  else
  {
    v14 = *(void **)(v7 + 16);
    if ((v13 & 1) != 0)
    {
      v17[1] = *(_QWORD *)(v7 + 16);
      v16 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
      swift_willThrowTypedImpl();
    }
    else
    {
      v15 = v14;
    }
    swift_release();

    return (uint64_t)v14;
  }
  return result;
}

uint64_t sub_249F13FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  dispatch_semaphore_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t result;
  int v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D62B8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF038);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = -1;
  v8 = dispatch_semaphore_create(0);
  v9 = sub_249F1F604();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = v7;
  v10[7] = v8;
  swift_retain();
  swift_retain();
  v11 = v8;
  sub_249DA85E4((uint64_t)v6, (uint64_t)&unk_2578DF048, (uint64_t)v10);
  swift_release();
  result = sub_249F1F8E0();
  v13 = *(unsigned __int8 *)(v7 + 24);
  if (v13 == 255)
  {
    __break(1u);
  }
  else
  {
    v14 = *(void **)(v7 + 16);
    if ((v13 & 1) != 0)
    {
      v17[1] = *(_QWORD *)(v7 + 16);
      v16 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D64D0);
      swift_willThrowTypedImpl();
    }
    else
    {
      v15 = v14;
    }
    swift_release();

    return (uint64_t)v14;
  }
  return result;
}

uint64_t static AppleDiffusionResourceFactory.shared()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v4;

  v1 = v0;
  if (qword_2578DDA28 != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)(qword_2578DEDB0 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_249F14298(&v4);
  os_unfair_lock_unlock(v2);
  if (!v0)
    v1 = v4;
  swift_release();
  return v1;
}

uint64_t sub_249F14210()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t sub_249F14234()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for AppleDiffusionResourceFactory.WeakContainer();
  v0 = swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF030);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  qword_2578DEDB0 = result;
  return result;
}

void sub_249F14298(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = Strong;
LABEL_3:
    *a1 = v4;
    return;
  }
  type metadata accessor for AppleDiffusionResourceFactory(0);
  swift_allocObject();
  sub_249F14840();
  if (!v1)
  {
    v4 = v5;
    swift_weakAssign();
    goto LABEL_3;
  }
}

uint64_t AppleDiffusionResourceFactory.resourceURLs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_249ECE024(v1 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_resourceURLs, a1);
}

uint64_t AppleDiffusionResourceFactory.modelDescription.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionResourceFactory.adapterMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionResourceFactory.baseModelComponentMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionResourceFactory.Versioner.rawValue.getter(char a1)
{
  if (!a1)
    return 0x676F6C61746163;
  if (a1 == 1)
    return 0x676E696E69617274;
  return 0x6365705361726F6CLL;
}

uint64_t sub_249F143C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_249F137EC(*a1, *a2);
}

uint64_t sub_249F143D0()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F14478()
{
  sub_249F1F40C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_249F144FC()
{
  sub_249F1FF64();
  sub_249F1F40C();
  swift_bridgeObjectRelease();
  return sub_249F1FFA0();
}

uint64_t sub_249F145A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13DiffusionBase05AppleA15ResourceFactoryC9VersionerO8rawValueAESgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_249F145CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xEB00000000676154;
  v5 = 0x676E696E69617274;
  if (v2 != 1)
  {
    v5 = 0x6365705361726F6CLL;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x676F6C61746163;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t AppleDiffusionResourceFactory.adapterVersions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionResourceFactory.baseModelComponentVersions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppleDiffusionResourceFactory.catalogAssetLock()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;

  v3 = sub_249F1EB24();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  result = sub_249F1EB18();
  if (!v1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v6, v3);
  return result;
}

uint64_t AppleDiffusionResourceFactory.hedEdgeDetectorModelURL(with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  v11[1] = a1;
  v12 = sub_249F1EAD0();
  v11[0] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEDC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_hedModel), *(_QWORD *)(v1 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_hedModel + 24));
  result = sub_249F1EAB8();
  if (!v2)
  {
    v10 = sub_249F1EA64();
    MEMORY[0x24BD046C8](v10);
    (*(void (**)(char *, uint64_t))(v11[0] + 8))(v4, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

void sub_249F14840()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(_QWORD, _QWORD, _QWORD, _QWORD);
  int v57;
  void (*v58)(_QWORD);
  _QWORD v59[14];
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(_QWORD);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100[28];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v95 = *v0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D62B8);
  MEMORY[0x24BDAC7A8](v1);
  v61 = (char *)v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_249F1EAAC();
  v59[12] = *(_QWORD *)(v3 - 8);
  v59[13] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v59[11] = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED98);
  v59[9] = *(_QWORD *)(v5 - 8);
  v59[10] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v75 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEDA0);
  MEMORY[0x24BDAC7A8](v7);
  v70 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_249F1EAF4();
  v71 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v69 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEFF0);
  MEMORY[0x24BDAC7A8](v74);
  v90 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_249F1EB24();
  v63 = *(_QWORD *)(v11 - 8);
  v64 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v93 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v82 = (char *)v59 - v14;
  v15 = sub_249F1E770();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v76 = (char *)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v68 = (char *)v59 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v66 = (char *)v59 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v81 = (char *)v59 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v85 = (char *)v59 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v87 = (char *)v59 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v84 = (char *)v59 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)v59 - v34;
  v36 = sub_249F1E7F4();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v59[8] = (char *)v59 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v92 = (char *)v59 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v94 = (char *)v59 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v83 = (char *)v59 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v65 = (char *)v59 - v47;
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)v59 - v48;
  v60 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  v50 = MEMORY[0x24BDAC7A8](v60);
  v89 = (char *)v59 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x24BDAC7A8](v50);
  v91 = (char *)v59 - v53;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v59 - v54;
  sub_249F1E9C8();
  v97 = v88 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_hedModel;
  sub_249D9E174(v100, v88 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_hedModel);
  v98 = v37;
  v56 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v37 + 56);
  v72 = v36;
  v96 = v56;
  v56(v35, 1, 1, v36);
  v57 = *MEMORY[0x24BDCD7A0];
  v79 = v16;
  v80 = v15;
  v58 = *(void (**)(_QWORD))(v16 + 104);
  v62 = v57;
  v77 = v58;
  v58(v18);
  v78 = v18;
  sub_249F1E7C4();
  v86 = v55;
  v67 = v49;
  AppleDiffusionPipeline.ResourceURLs.init(resourcesAt:)((uint64_t)v49, v55);
  v99 = MEMORY[0x24BEE4AF8];
  sub_249EB5E0C(0, 9, 0);
  JUMPOUT(0x249F14DF8);
}

uint64_t sub_249F16F64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_249F16F7C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_249EDB238;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_249E4E2FC;
  v3[3] = &block_descriptor_15;
  v3[4] = v2;
  objc_msgSend(v1, sel_modelDescriptionWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t AppleDiffusionResourceFactory.imageClipEncoderVersion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_baseModelComponentMetadata);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = sub_249DB8164(0);
  result = 0;
  if ((v4 & 1) == 0)
    return result;
  v5 = *(_QWORD *)(v1 + 56) + 144 * v2;
  if (*(_QWORD *)(v5 + 40))
    return *(_BYTE *)(v5 + 32) & 1;
  else
    return 0;
}

uint64_t AppleDiffusionResourceFactory.madPersonalizedEmbeddingRevision.getter()
{
  char v1;

  if (AppleDiffusionResourceFactory.imageClipEncoderVersion.getter())
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v1 = sub_249F1FE2C();
    swift_bridgeObjectRelease();
    if ((v1 & 1) != 0)
      return 5;
    else
      return 3;
  }
}

uint64_t AppleDiffusionResourceFactory.deinit()
{
  uint64_t v0;

  sub_249ECDFE8(v0 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_resourceURLs);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC13DiffusionBase29AppleDiffusionResourceFactory_hedModel);
  return v0;
}

uint64_t AppleDiffusionResourceFactory.__deallocating_deinit()
{
  AppleDiffusionResourceFactory.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_249F171A0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(_QWORD *);

  v7[3] = a6;
  v7[4] = a7;
  v10 = (uint64_t (*)(_QWORD *))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[5] = v8;
  *v8 = v7;
  v8[1] = sub_249F17208;
  return v10(v7 + 2);
}

uint64_t sub_249F17208()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_249F1726C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 0;
  sub_249F17B10(v2, v3);
  sub_249F1F8EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249F172B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 1;
  sub_249F17B10(v2, v3);
  sub_249F1F8EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_249F17304(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_249D9E174(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_249F1737C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_249D9E174(&v12, v10 + 40 * a1 + 32);
}

uint64_t _s13DiffusionBase05AppleA15ResourceFactoryC9VersionerO8rawValueAESgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_249F1FC4C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_249F17440()
{
  unint64_t result;

  result = qword_2578DEDD0;
  if (!qword_2578DEDD0)
  {
    result = MEMORY[0x24BD06528](&protocol conformance descriptor for AppleDiffusionResourceFactory.Versioner, &type metadata for AppleDiffusionResourceFactory.Versioner);
    atomic_store(result, (unint64_t *)&qword_2578DEDD0);
  }
  return result;
}

uint64_t sub_249F17484()
{
  return type metadata accessor for AppleDiffusionResourceFactory(0);
}

uint64_t type metadata accessor for AppleDiffusionResourceFactory(uint64_t a1)
{
  return sub_249DC74D0(a1, qword_2578DEE00);
}

uint64_t sub_249F174A0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_249F1EB24();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDiffusionResourceFactory.AppleDiffusionAssetLock()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_249F176B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionResourceFactory.AppleDiffusionAssetLock()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_249F17700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_249F1EB24();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AppleDiffusionResourceFactory.AppleDiffusionAssetLock(uint64_t a1)
{
  return sub_249DC74D0(a1, qword_2578DEF18);
}

uint64_t sub_249F17754()
{
  uint64_t result;
  unint64_t v1;

  result = sub_249F1EB24();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AppleDiffusionResourceFactory.WeakContainer()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for AppleDiffusionResourceFactory.Versioner(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_249F17828 + 4 * byte_249F336FD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_249F1785C + 4 * byte_249F336F8[v4]))();
}

uint64_t sub_249F1785C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F17864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x249F1786CLL);
  return result;
}

uint64_t sub_249F17878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x249F17880);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_249F17884(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_249F1788C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppleDiffusionResourceFactory.Versioner()
{
  return &type metadata for AppleDiffusionResourceFactory.Versioner;
}

uint64_t sub_249F178A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249F178EC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_249F17910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_249DAFCF8;
  v5[16] = a1;
  v5[17] = v4;
  return swift_task_switch();
}

uint64_t sub_249F17978()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2 = *(int **)(v0 + 32);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_249DCC420;
  *(_OWORD *)(v3 + 24) = v4;
  v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 40) = v5;
  *v5 = v3;
  v5[1] = sub_249F17208;
  return v7(v3 + 16);
}

uint64_t sub_249F17A14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_249F17A78()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2 = *(int **)(v0 + 32);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_249DAFCF8;
  *(_OWORD *)(v3 + 24) = v4;
  v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 40) = v5;
  *v5 = v3;
  v5[1] = sub_249F17208;
  return v7(v3 + 16);
}

void sub_249F17B10(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_249F17B28(a1);
}

void sub_249F17B28(id a1)
{

}

uint64_t sub_249F17B38()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578D64D0);
  sub_249F1FFD0();
  result = sub_249F1F970();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_249F17BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2578D64D0);
  sub_249F1FFD0();
  v2 = sub_249F1F970();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_249F17C44()
{
  sub_249F17BD0();
  return swift_deallocClassInstance();
}

uint64_t DiffusionImageResult.emojiSkinDetected.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for DiffusionImageResult(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for DiffusionImageResult(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for DiffusionImageResult(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiffusionImageResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiffusionImageResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiffusionImageResult()
{
  return &type metadata for DiffusionImageResult;
}

uint64_t sub_249F17DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  return result;
}

uint64_t sub_249F17E20(uint64_t a1, char a2, uint64_t a3, char a4)
{
  __CVBuffer *v4;
  uint64_t v5;
  __CVBuffer *v6;
  void *PixelFormatType;
  id v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  size_t BytesPerRow;

  v6 = v4;
  PixelFormatType = (void *)CVPixelBufferGetPixelFormatType(v4);
  v10 = PixelFormatType;
  if ((_DWORD)PixelFormatType != 1278226488 && (_DWORD)PixelFormatType != 1111970369)
  {
    sub_249F18948();
    swift_allocError();
    *(_QWORD *)v14 = 0xD000000000000059;
    *(_QWORD *)(v14 + 8) = 0x8000000249F3A2C0;
    *(_BYTE *)(v14 + 16) = 2;
    goto LABEL_6;
  }
  v11 = CVPixelBufferLockBaseAddress(v6, 1uLL);
  if (v11)
  {
    v12 = v11;
    sub_249F18948();
    swift_allocError();
    *(_QWORD *)v13 = v12;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 1;
LABEL_6:
    swift_willThrow();
    return (uint64_t)v10;
  }
  if ((a2 & 1) != 0)
    CVPixelBufferGetHeight(v6);
  if ((a4 & 1) != 0)
    CVPixelBufferGetWidth(v6);
  if ((_DWORD)v10 != 1278226488)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_249F31240;
    *(_QWORD *)(v20 + 32) = sub_249F1F718();
    *(_QWORD *)(v20 + 40) = sub_249F1F718();
    *(_QWORD *)(v20 + 48) = sub_249F1F718();
    *(_QWORD *)(v20 + 56) = sub_249F1F718();
    sub_249F1F55C();
    v21 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
    v22 = v20;
    v10 = v21;
    v23 = sub_249E14B58(v22, 65568);
    if (!v5)
    {
      v10 = v23;
      CVPixelBufferGetBaseAddress(v6);
      if ((CVPixelBufferGetHeight(v6) & 0x8000000000000000) != 0
        || (CVPixelBufferGetWidth(v6) & 0x8000000000000000) != 0)
      {
        goto LABEL_25;
      }
      BytesPerRow = CVPixelBufferGetBytesPerRow(v6);
      MEMORY[0x24BDAC7A8](BytesPerRow);
      sub_249F1F7CC();

    }
LABEL_23:
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    return (uint64_t)v10;
  }
  if (CVPixelBufferGetBaseAddress(v6))
  {
    if ((CVPixelBufferGetHeight(v6) & 0x8000000000000000) == 0
      && (CVPixelBufferGetWidth(v6) & 0x8000000000000000) == 0)
    {
      CVPixelBufferGetBytesPerRow(v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2578D60E0);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_249F31240;
      *(_QWORD *)(v16 + 32) = sub_249F1F718();
      *(_QWORD *)(v16 + 40) = sub_249F1F718();
      *(_QWORD *)(v16 + 48) = sub_249F1F718();
      *(_QWORD *)(v16 + 56) = sub_249F1F718();
      sub_249F1F55C();
      v17 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
      v18 = v16;
      v10 = v17;
      v19 = sub_249E14B58(v18, 65568);
      if (!v5)
      {
        v10 = (id)MEMORY[0x24BDAC7A8](v19);
        sub_249F1F7CC();

      }
      goto LABEL_23;
    }
  }
  else
  {
    __break(1u);
  }
LABEL_25:
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

uint64_t sub_249F182A4()
{
  __CVBuffer *v0;
  __CVBuffer *v1;
  __CVBuffer *v2;
  __CVBuffer *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  vImagePixelCount Width;
  vImagePixelCount Height;
  void *BaseAddress;
  void *v22;
  size_t BytesPerRow;
  __CVBuffer *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  vImage_Error v29;
  vImage_Error v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void (*v44)(char *, uint64_t);
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint8_t *v49;
  NSObject *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t rgbaBackgroundColorPtr[4];
  vImage_Buffer rgbaDst;
  vImage_Buffer rgbaSrc;
  uint64_t v57;

  v2 = v1;
  v3 = v0;
  v57 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF0D0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_249F1E3E0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v48 - v12;
  if (CVPixelBufferGetPixelFormatType(v0) != 1111970369)
  {
    sub_249F18948();
    swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000035;
    *(_QWORD *)(v17 + 8) = 0x8000000249F3A280;
    *(_BYTE *)(v17 + 16) = 2;
    goto LABEL_5;
  }
  v14 = CVPixelBufferLockBaseAddress(v0, 1uLL);
  if (v14)
  {
    v15 = v14;
    sub_249F18948();
    swift_allocError();
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 1;
LABEL_5:
    swift_willThrow();
    return (uint64_t)v2;
  }
  v52 = v7;
  Width = CVPixelBufferGetWidth(v0);
  Height = CVPixelBufferGetHeight(v0);
  BaseAddress = CVPixelBufferGetBaseAddress(v0);
  if (BaseAddress)
  {
    if ((Height & 0x8000000000000000) != 0 || (Width & 0x8000000000000000) != 0)
      goto LABEL_33;
    v22 = BaseAddress;
    BytesPerRow = CVPixelBufferGetBytesPerRow(v3);
    rgbaSrc.data = v22;
    rgbaSrc.height = Height;
    rgbaSrc.width = Width;
    rgbaSrc.rowBytes = BytesPerRow;
    sub_249F18E08(Width, Height, 0x42475241u);
    if (v1)
    {
LABEL_30:
      CVPixelBufferUnlockBaseAddress(v3, 1uLL);
      return (uint64_t)v2;
    }
    v2 = v24;
    v25 = CVPixelBufferLockBaseAddress(v24, 0);
    if (v25)
    {
      v26 = v25;
      sub_249F18948();
      swift_allocError();
      *(_QWORD *)v27 = v26;
      *(_QWORD *)(v27 + 8) = 0;
      *(_BYTE *)(v27 + 16) = 1;
      swift_willThrow();
LABEL_29:

      goto LABEL_30;
    }
    v51 = CVPixelBufferGetBaseAddress(v2);
    if (v51)
    {
      v28 = CVPixelBufferGetBytesPerRow(v2);
      rgbaDst.data = v51;
      rgbaDst.height = Height;
      rgbaDst.width = Width;
      rgbaDst.rowBytes = v28;
      *(_DWORD *)rgbaBackgroundColorPtr = -1;
      v29 = vImageFlatten_RGBA8888(&rgbaSrc, &rgbaDst, rgbaBackgroundColorPtr, 1, 0);
      if (!v29)
      {
        CVPixelBufferUnlockBaseAddress(v2, 0);
        CVPixelBufferUnlockBaseAddress(v3, 1uLL);
        return (uint64_t)v2;
      }
      v30 = v29;
      sub_249F1E3D4();
      v31 = v52;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v52) == 1)
      {
        sub_249F18FB0((uint64_t)v6);
        if (qword_2578DDA10 != -1)
          swift_once();
        v32 = sub_249F1EF38();
        __swift_project_value_buffer(v32, (uint64_t)qword_2578FF458);
        v33 = sub_249F1EF20();
        v34 = sub_249F1F820();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v35 = 134217984;
          v53 = v30;
          sub_249F1F9AC();
          _os_log_impl(&dword_249D98000, v33, v34, "vImageFlatten_RGBA8888 returned unusual error code %ld", v35, 0xCu);
          MEMORY[0x24BD06618](v35, -1, -1);
        }

        sub_249F18948();
        swift_allocError();
        *(_QWORD *)v36 = v30;
        *(_QWORD *)(v36 + 8) = 0;
        *(_BYTE *)(v36 + 16) = 0;
        swift_willThrow();
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v31);
        if (qword_2578DDA10 != -1)
          swift_once();
        v37 = sub_249F1EF38();
        __swift_project_value_buffer(v37, (uint64_t)qword_2578FF458);
        v51 = *(void **)(v8 + 16);
        ((void (*)(char *, char *, uint64_t))v51)(v11, v13, v31);
        v38 = sub_249F1EF20();
        v39 = sub_249F1F820();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc();
          v48 = (_QWORD *)swift_slowAlloc();
          v49 = v40;
          v50 = v38;
          *(_DWORD *)v40 = 138412290;
          sub_249D9BBEC(&qword_2578DF0E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEDFC90], MEMORY[0x24BEDFCA0]);
          swift_allocError();
          ((void (*)(uint64_t, char *, uint64_t))v51)(v41, v11, v52);
          v42 = _swift_stdlib_bridgeErrorToNSError();
          v53 = v42;
          v38 = v50;
          sub_249F1F9AC();
          v43 = v48;
          *v48 = v42;
          v31 = v52;
          v44 = *(void (**)(char *, uint64_t))(v8 + 8);
          v44(v11, v52);
          v45 = v39;
          v46 = v49;
          _os_log_impl(&dword_249D98000, v38, v45, "vImageFlatten_RGBA8888 returned error %@", v49, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2578D79B8);
          swift_arrayDestroy();
          MEMORY[0x24BD06618](v43, -1, -1);
          MEMORY[0x24BD06618](v46, -1, -1);
        }
        else
        {
          v44 = *(void (**)(char *, uint64_t))(v8 + 8);
          v44(v11, v31);
        }

        sub_249D9BBEC(&qword_2578DF0E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEDFC90], MEMORY[0x24BEDFCA0]);
        swift_allocError();
        ((void (*)(uint64_t, char *, uint64_t))v51)(v47, v13, v31);
        swift_willThrow();
        v44(v13, v31);
      }
      CVPixelBufferUnlockBaseAddress(v2, 0);
      goto LABEL_29;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_33:
  result = sub_249F1FBC8();
  __break(1u);
  return result;
}

unint64_t sub_249F18948()
{
  unint64_t result;

  result = qword_2578DF0D8;
  if (!qword_2578DF0D8)
  {
    result = MEMORY[0x24BD06528](&unk_249F338A8, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_2578DF0D8);
  }
  return result;
}

uint64_t sub_249F1898C(void *a1, Pixel_F a2, Pixel_F a3, uint64_t a4, uint64_t a5, vImagePixelCount a6, vImagePixelCount a7, const vImage_Buffer *a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  vImage_Buffer dest;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF0D0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_249F1E3E0();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
LABEL_13:
    __break(1u);
  if ((a6 & 0x8000000000000000) != 0 || (a7 & 0x8000000000000000) != 0)
  {
    result = sub_249F1FBC8();
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a5 + 16) < 3uLL)
  {
    __break(1u);
    goto LABEL_12;
  }
  v22 = *(_QWORD *)(a5 + 48);
  if ((unint64_t)(v22 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  dest.data = a1;
  dest.height = a6;
  dest.width = a7;
  dest.rowBytes = 4 * v22;
  result = vImageConvert_Planar8toPlanarF(a8, &dest, a3, a2, 0);
  if (result)
  {
    v24 = result;
    sub_249F1E3D4();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      sub_249F18FB0((uint64_t)v17);
      sub_249F18948();
      swift_allocError();
      *(_QWORD *)v25 = v24;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      return swift_willThrow();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
      sub_249D9BBEC(&qword_2578DF0E0, (uint64_t (*)(uint64_t))MEMORY[0x24BEDFC90], MEMORY[0x24BEDFCA0]);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v26, v21, v18);
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    }
  }
  return result;
}

uint64_t sub_249F18C28(char *a1, int32x2_t a2, int32x2_t a3, uint64_t a4, _QWORD *a5, vImagePixelCount a6, vImagePixelCount a7, const vImage_Buffer *a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t *v12;
  const float *i32;
  uint64_t v14;
  uint64_t result;
  vImage_Buffer blue;
  vImage_Buffer alpha;
  vImage_Buffer red;
  vImage_Buffer green;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = a5[2];
  if (v8 < 2)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v8 == 2)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v9 = a5[6];
  if ((unint64_t)(v9 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a1)
    goto LABEL_15;
  v10 = a5[5];
  if (v10 + 0x4000000000000000 < 0)
    goto LABEL_13;
  if ((unsigned __int128)(v10 * (__int128)3) >> 64 != (3 * v10) >> 63)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if ((a6 & 0x8000000000000000) != 0 || (a7 & 0x8000000000000000) != 0)
  {
    result = sub_249F1FBC8();
    __break(1u);
  }
  else
  {
    green.data = a1;
    green.height = a6;
    green.width = a7;
    green.rowBytes = 4 * v9;
    red.data = &a1[4 * v10];
    red.height = a6;
    red.width = a7;
    red.rowBytes = 4 * v9;
    alpha.data = &a1[8 * v10];
    alpha.height = a6;
    alpha.width = a7;
    alpha.rowBytes = 4 * v9;
    blue.data = &a1[12 * v10];
    blue.height = a6;
    blue.width = a7;
    blue.rowBytes = 4 * v9;
    v12 = (int32x4_t *)sub_249F1F58C();
    v12[1].i64[0] = 4;
    v12[2] = vdupq_lane_s32(a3, 0);
    i32 = (const float *)v12[2].i32;
    v14 = sub_249F1F58C();
    *(_QWORD *)(v14 + 16) = 4;
    *(int32x4_t *)(v14 + 32) = vdupq_lane_s32(a2, 0);
    vImageConvert_ARGB8888toPlanarF(a8, &alpha, &red, &green, &blue, i32, (const float *)(v14 + 32), 0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_249F18E08(size_t a1, size_t a2, OSType a3)
{
  uint64_t inited;
  void *v7;
  id v8;
  const __CFDictionary *v9;
  unsigned int v10;
  uint64_t v11;
  CVPixelBufferRef v12[8];

  v12[7] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DE290);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_249F21770;
  v7 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC5668];
  v8 = v7;
  *(_QWORD *)(inited + 40) = sub_249DADF2C(MEMORY[0x24BEE4AF8]);
  sub_249EAF528(inited);
  v12[0] = 0;
  type metadata accessor for CFString(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D8B78);
  sub_249D9BBEC((unint64_t *)&qword_2578D5F48, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_249F30AE0);
  v9 = (const __CFDictionary *)sub_249F1F1F0();
  swift_bridgeObjectRelease();
  v10 = CVPixelBufferCreate(0, a1, a2, a3, v9, v12);

  if (v10)
  {
    sub_249F18948();
    swift_allocError();
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = 1;
    swift_willThrow();

  }
  else if (!v12[0])
  {
    __break(1u);
  }
}

uint64_t sub_249F18FB0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF0D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_249F18FF0(char *a1, uint64_t a2, _QWORD *a3, int32x2_t a4, int32x2_t a5)
{
  uint64_t v5;

  a4.i32[0] = *(_DWORD *)(v5 + 32);
  a5.i32[0] = *(_DWORD *)(v5 + 36);
  return sub_249F18C28(a1, a4, a5, a2, a3, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(const vImage_Buffer **)(v5 + 40));
}

uint64_t sub_249F19010(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_249F1898C(a1, *(Pixel_F *)(v3 + 40), *(Pixel_F *)(v3 + 44), a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(const vImage_Buffer **)(v3 + 32));
}

uint64_t sub_249F19034(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t _s5ErrorOwxx(uint64_t a1)
{
  return sub_249F1905C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_249F1905C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_249F19034(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s5ErrorOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_249F19034(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_249F1905C(v6, v7, v8);
  return a1;
}

uint64_t _s5ErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_249F1905C(v4, v5, v6);
  return a1;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

uint64_t LCMScheduler.__allocating_init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:predictionType:generator:)(uint64_t a1, int64_t a2, char a3, char a4, uint64_t a5, float a6, float a7)
{
  char v13;
  uint64_t v14;

  v13 = a3 & 1;
  v14 = swift_allocObject();
  LCMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:predictionType:generator:)(a1, a2, v13, a4, a5, a6, a7);
  return v14;
}

uint64_t LCMScheduler.trainStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LCMScheduler.inferenceStepCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t LCMScheduler.betas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LCMScheduler.alphas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LCMScheduler.alphasCumProd.getter()
{
  return swift_bridgeObjectRetain();
}

float LCMScheduler.finalAlphasCumProd.getter()
{
  return 1.0;
}

uint64_t LCMScheduler.timeSteps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LCMScheduler.generator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return sub_249D9E1E4(v1 + 72, a1);
}

uint64_t LCMScheduler.predictionType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t LCMScheduler.modelOutputs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

float LCMScheduler.timeStepScaling.getter()
{
  return 10.0;
}

uint64_t LCMScheduler.init(stepCount:trainStepCount:betaSchedule:betaStart:betaEnd:predictionType:generator:)(uint64_t a1, int64_t a2, char a3, char a4, uint64_t a5, float a6, float a7)
{
  uint64_t v7;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  float v15;
  float v16;
  float v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  unint64_t v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v46;
  float v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v11 = a2;
  v12 = a1;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v7 + 120) = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(v7 + 128) = 1092616192;
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a1;
  *(_BYTE *)(v7 + 112) = a4;
  sub_249D9E1E4(a5, v7 + 72);
  if ((a3 & 1) != 0)
  {
    v15 = fabsf(sqrtf(a6));
    if (a6 == -INFINITY)
      v15 = INFINITY;
    v16 = fabsf(sqrtf(a7));
    if (a7 == -INFINITY)
      v17 = INFINITY;
    else
      v17 = v16;
    v18 = sub_249EE2FA8(v11, v15, v17);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v60 = v13;
      sub_249EB5D34(0, v19, 0);
      v20 = 0;
      v14 = v60;
      v21 = *(_QWORD *)(v60 + 16);
      do
      {
        v22 = *(float *)(v18 + 4 * v20 + 32);
        v23 = *(_QWORD *)(v60 + 24);
        if (v21 >= v23 >> 1)
          sub_249EB5D34(v23 > 1, v21 + 1, 1);
        ++v20;
        *(_QWORD *)(v60 + 16) = v21 + 1;
        *(float *)(v60 + 4 * v21++ + 32) = v22 * v22;
      }
      while (v19 != v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v14 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v14 = sub_249EE2FA8(v11, a6, a7);
  }
  *(_QWORD *)(v59 + 32) = v14;
  v24 = *(_QWORD *)(v14 + 16);
  v25 = (char *)MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v61 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_249EB5D34(0, v24, 0);
    v26 = 0;
    v25 = (char *)v61;
    v27 = *(_QWORD *)(v61 + 16);
    do
    {
      v28 = *(float *)(v14 + 4 * v26 + 32);
      v29 = *(_QWORD *)(v61 + 24);
      if (v27 >= v29 >> 1)
        sub_249EB5D34(v29 > 1, v27 + 1, 1);
      ++v26;
      *(_QWORD *)(v61 + 16) = v27 + 1;
      *(float *)(v61 + 4 * v27++ + 32) = 1.0 - v28;
    }
    while (v24 != v26);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v59 + 40) = v25;
  v30 = *((_QWORD *)v25 + 2);
  v31 = v30 - 1;
  if (v30 != 1)
  {
    if (!v30)
      goto LABEL_68;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_70;
    while (1)
    {
      v32 = 0;
      while (v32 < *((_QWORD *)v25 + 2))
      {
        *(float *)&v25[4 * v32 + 36] = *(float *)&v25[4 * v32 + 32] * *(float *)&v25[4 * v32 + 36];
        if (v31 == ++v32)
          goto LABEL_29;
      }
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      v25 = sub_249EC94CC((uint64_t)v25);
    }
  }
  swift_bridgeObjectRetain();
LABEL_29:
  *(_QWORD *)(v59 + 48) = v25;
  *(_DWORD *)(v59 + 56) = 1065353216;
  v33 = sub_249ED9A70(1, 50);
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v35 = v11 / 50;
    v62 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_249DB677C(0, v34, 0);
    v31 = 0;
    v36 = v62;
    while (1)
    {
      v37 = *(_QWORD *)(v33 + 8 * v31 + 32);
      v38 = v37 * v35;
      if ((unsigned __int128)(v37 * (__int128)v35) >> 64 != (v37 * v35) >> 63)
        break;
      v39 = v38 - 1;
      if (__OFSUB__(v38, 1))
        goto LABEL_61;
      v41 = *(_QWORD *)(v62 + 16);
      v40 = *(_QWORD *)(v62 + 24);
      v11 = v41 + 1;
      if (v41 >= v40 >> 1)
        sub_249DB677C(v40 > 1, v41 + 1, 1);
      ++v31;
      *(_QWORD *)(v62 + 16) = v11;
      *(_QWORD *)(v62 + 8 * v41 + 32) = v39;
      if (v34 == v31)
      {
        swift_release();
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  swift_release();
  v36 = MEMORY[0x24BEE4AF8];
LABEL_38:
  v11 = sub_249F0887C(v36);
  if (__OFADD__(v12, 1))
    goto LABEL_69;
  v42 = sub_249EE2FA8(v12 + 1, 0.0, (float)*(uint64_t *)(v11 + 16));
  v43 = *(_QWORD *)(v42 + 16);
  v44 = (v43 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v43 >= 2 && v44 != 0)
  {
    v63 = MEMORY[0x24BEE4AF8];
    sub_249DB677C(0, v44, 0);
    v46 = 0;
    v12 = v63;
    v31 = 3741319169;
    while (1)
    {
      v47 = floorf(*(float *)(v42 + 4 * v46 + 32));
      if ((~LODWORD(v47) & 0x7F800000) == 0)
        goto LABEL_65;
      if (v47 <= -9.2234e18)
        goto LABEL_66;
      if (v47 >= 9.2234e18)
        goto LABEL_67;
      v49 = *(_QWORD *)(v63 + 16);
      v48 = *(_QWORD *)(v63 + 24);
      if (v49 >= v48 >> 1)
        sub_249DB677C(v48 > 1, v49 + 1, 1);
      *(_QWORD *)(v63 + 16) = v49 + 1;
      *(_QWORD *)(v63 + 8 * v49 + 32) = (uint64_t)v47;
      if (v44 == ++v46)
      {
        swift_unknownObjectRelease();
        goto LABEL_52;
      }
    }
  }
  swift_unknownObjectRelease();
  v12 = MEMORY[0x24BEE4AF8];
LABEL_52:
  v50 = *(_QWORD *)(v12 + 16);
  v51 = MEMORY[0x24BEE4AF8];
  if (v50)
  {
    v64 = MEMORY[0x24BEE4AF8];
    sub_249DB677C(0, v50, 0);
    v51 = v64;
    v31 = v12 + 32;
    while (1)
    {
      v53 = *(_QWORD *)v31;
      v31 += 8;
      v52 = v53;
      if ((v53 & 0x8000000000000000) != 0)
        break;
      if (v52 >= *(_QWORD *)(v11 + 16))
        goto LABEL_63;
      v54 = *(_QWORD *)(v11 + 32 + 8 * v52);
      v56 = *(_QWORD *)(v64 + 16);
      v55 = *(_QWORD *)(v64 + 24);
      if (v56 >= v55 >> 1)
        sub_249DB677C(v55 > 1, v56 + 1, 1);
      *(_QWORD *)(v64 + 16) = v56 + 1;
      *(_QWORD *)(v64 + 8 * v56 + 32) = v54;
      if (!--v50)
        goto LABEL_59;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_59:
  __swift_destroy_boxed_opaque_existential_1(a5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v59 + 64) = v51;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v59;
}

uint64_t LCMScheduler.step(output:timeStep:sample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  float v36;
  uint64_t v37;
  void *v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = v4;
  v61 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDDF0);
  v60 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v54 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  v59 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v57 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v54 - v17;
  v19 = *(_QWORD *)(v5 + 64);
  result = sub_249F08BB4(a2, v19);
  if ((v21 & 1) != 0)
    v22 = *(_QWORD *)(v19 + 16) - 1;
  else
    v22 = result;
  v23 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v24 = a2;
  if (v23 < *(_QWORD *)(v19 + 16))
  {
    if (v23 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    v24 = *(_QWORD *)(v19 + 8 * v23 + 32);
  }
  if (a2 < 0)
    goto LABEL_24;
  v25 = *(_QWORD *)(v5 + 48);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26 <= a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v27 = v25 + 32;
  v28 = *(float *)(v27 + 4 * a2);
  v29 = 1.0;
  if ((v24 & 0x8000000000000000) == 0)
  {
    if (v24 >= v26)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v29 = *(float *)(v27 + 4 * v24);
  }
  v30 = sqrtf(v28);
  v31 = sqrtf(1.0 - v28);
  v32 = (float)a2 * 10.0;
  v33 = (float)(v32 * v32) + 0.25;
  v34 = 0.25 / v33;
  v35 = *(unsigned __int8 *)(v5 + 112);
  v36 = v32 / fabsf(sqrtf(v33));
  v55 = v9;
  v58 = a4;
  if (v35)
  {
    if (v35 == 1)
    {
      v37 = 0;
      v38 = sub_249F19D24;
      goto LABEL_19;
    }
    v38 = sub_249F1A024;
    v39 = v30;
    v30 = v31;
  }
  else
  {
    v38 = sub_249F1A048;
    v39 = v31;
  }
  result = swift_allocObject();
  v37 = result;
  *(float *)(result + 16) = v39;
  *(float *)(result + 20) = v30;
LABEL_19:
  MEMORY[0x24BDAC7A8](result);
  *(&v54 - 4) = (uint64_t)v38;
  *(&v54 - 3) = v37;
  *((float *)&v54 - 4) = v36;
  *((float *)&v54 - 3) = v34;
  v40 = sub_249F1EFE0();
  MEMORY[0x24BDAC7A8](v40);
  v41 = v61;
  *(&v54 - 4) = a3;
  *(&v54 - 3) = v41;
  *(&v54 - 2) = (uint64_t)sub_249F19F14;
  *(&v54 - 1) = (uint64_t)(&v54 - 6);
  result = sub_249F1EFB0();
  v42 = *(_QWORD *)(v5 + 24);
  v43 = __OFSUB__(v42, 1);
  v44 = v42 - 1;
  if (v43)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v22 == v44)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v59 + 32))(v58, v18, v14);
  }
  else
  {
    v45 = sub_249F1EFE0();
    v46 = v5 + 72;
    swift_beginAccess();
    v47 = *(_QWORD *)(v5 + 96);
    v48 = *(_QWORD *)(v5 + 104);
    __swift_mutable_project_boxed_opaque_existential_1(v46, v47);
    (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v48 + 16))(v45, v47, v48, 0.0, 1.0);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v49 = v55;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v56, v13, v55);
    sub_249EFF6CC((unint64_t *)&qword_2578D95F8, &qword_2578D67D8);
    sub_249EFF6CC(&qword_2578DDDF8, &qword_2578DDDF0);
    v50 = v57;
    v51 = sub_249F1F058();
    MEMORY[0x24BDAC7A8](v51);
    *((float *)&v54 - 4) = sqrtf(v29);
    *((float *)&v54 - 3) = sqrtf(1.0 - v29);
    v52 = sub_249F1EFE0();
    MEMORY[0x24BDAC7A8](v52);
    *(&v54 - 4) = (uint64_t)v18;
    *(&v54 - 3) = (uint64_t)v50;
    *(&v54 - 2) = (uint64_t)sub_249F19F80;
    *(&v54 - 1) = (uint64_t)(&v54 - 4);
    sub_249F1EFB0();
    swift_release();
    v53 = *(void (**)(char *, uint64_t))(v59 + 8);
    v53(v50, v14);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v49);
    return ((uint64_t (*)(char *, uint64_t))v53)(v18, v14);
  }
}

float sub_249F19D24(double a1, float a2)
{
  return a2;
}

uint64_t sub_249F19D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *(*a7)(uint64_t *__return_ptr, int *, int *), uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  sub_249EFF6CC((unint64_t *)&qword_2578D95F8, &qword_2578D67D8);
  result = sub_249F1F064();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v13 = result;
    if (result)
    {
      v14 = 0;
      do
      {
        v15 = v14 + 1;
        v16 = *a6;
        v17 = 4 * v14;
        v19 = *(_DWORD *)(a9 + 4 * v14);
        v18 = *(_DWORD *)(a1 + 4 * v14);
        result = (uint64_t)a7(&v20, &v19, &v18);
        *(_DWORD *)(v16 + v17) = v20;
        v14 = v15;
      }
      while (v13 != v15);
    }
  }
  return result;
}

uint64_t LCMScheduler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LCMScheduler.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_249F19EA8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_249F19EB4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_249F19EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LCMScheduler.step(output:timeStep:sample:)(a1, a2, a3, a4);
}

float sub_249F19F14@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  uint64_t v3;
  float v5;
  float v6;
  float v7;
  float result;

  v5 = *(float *)(v3 + 32);
  v6 = *(float *)(v3 + 36);
  v7 = *a1;
  result = (float)(v6 * v7) + (float)(v5 * (*(float (**)(float, float))(v3 + 16))(*a1, *a2));
  *a3 = result;
  return result;
}

uint64_t sub_249F19F6C()
{
  return sub_249F19FA0();
}

float sub_249F19F80@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  uint64_t v3;
  float result;

  result = (float)(*(float *)(v3 + 16) * *a1) + (float)(*(float *)(v3 + 20) * *a2);
  *a3 = result;
  return result;
}

uint64_t sub_249F19FA0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

uint64_t sub_249F1A014()
{
  return swift_deallocObject();
}

float sub_249F1A024(float a1, float a2)
{
  uint64_t v2;

  return (float)(*(float *)(v2 + 16) * a1) - (float)(*(float *)(v2 + 20) * a2);
}

uint64_t sub_249F1A038()
{
  return swift_deallocObject();
}

float sub_249F1A048(float a1, float a2)
{
  uint64_t v2;

  return (float)(a1 - (float)(*(float *)(v2 + 16) * a2)) / *(float *)(v2 + 20);
}

uint64_t type metadata accessor for LCMScheduler()
{
  return objc_opt_self();
}

uint64_t sub_249F1A07C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578D67D8);
  return sub_249F1EFBC();
}

uint64_t sub_249F1A0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_249F19D2C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(uint64_t **)(v4 + 24), *(_QWORD *(**)(uint64_t *__return_ptr, int *, int *))(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48));
}

uint64_t ManagedMLModel.__allocating_init(modelAt:configuration:name:)(char *a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  ManagedMLModel.init(modelAt:configuration:name:)(a1, a2, a3, a4, a5 & 0x1FF);
  return v10;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ManagedMLModel.loadResources()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;

  v1 = v0;
  if (qword_2578DDA10 != -1)
    swift_once();
  v2 = sub_249F1EF38();
  __swift_project_value_buffer(v2, (uint64_t)qword_2578FF458);
  swift_retain_n();
  v3 = sub_249F1EF20();
  v4 = sub_249F1F814();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_249F1FA9C();
    sub_249E68CA8(v7, v8, &v10);
    sub_249F1F9AC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v3, v4, "Loading resources for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v6, -1, -1);
    MEMORY[0x24BD06618](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v9 = *(id *)(v1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  sub_249F1F874();

}

Swift::Void __swiftcall ManagedMLModel.unloadResources()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = sub_249F1F1C0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_249F1F1D8();
  v25 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2578DDA10 != -1)
    swift_once();
  v8 = sub_249F1EF38();
  __swift_project_value_buffer(v8, (uint64_t)qword_2578FF458);
  swift_retain_n();
  v9 = sub_249F1EF20();
  v10 = sub_249F1F814();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v23 = v2;
    v13 = v12;
    aBlock[0] = v12;
    v22 = v6;
    *(_DWORD *)v11 = 136446210;
    v14 = sub_249F1FA9C();
    v26 = sub_249E68CA8(v14, v15, aBlock);
    v6 = v22;
    sub_249F1F9AC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v9, v10, "Unloading resources for %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    v16 = v13;
    v2 = v23;
    MEMORY[0x24BD06618](v16, -1, -1);
    MEMORY[0x24BD06618](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v17 = *(void **)(v1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  aBlock[4] = (uint64_t)sub_249F1BB24;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_249F1B540;
  aBlock[3] = (uint64_t)&block_descriptor_16;
  v18 = _Block_copy(aBlock);
  swift_retain();
  v19 = v17;
  v20 = v24;
  sub_249F1F1CC();
  v26 = MEMORY[0x24BEE4AF8];
  sub_249D9BBEC(&qword_2578DF1D8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF1E0);
  sub_249F1BB60(&qword_2578DF1E8, &qword_2578DF1E0);
  sub_249F1FA0C();
  MEMORY[0x24BD05484](0, v20, v5, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v6);
  swift_release();
}

void ManagedMLModel.perform<A>(_:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue);
  sub_249F1F874();

}

uint64_t ManagedMLModel.init(modelAt:configuration:name:)(char *a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void *v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  id v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  v6 = v5;
  v57 = a5;
  v51 = a4;
  v50 = a3;
  v9 = sub_249F1E770();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v58 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_249F1E7F4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v65 = (char *)&v49 - v15;
  v66 = sub_249F1F868();
  v56 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v55 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_249F1F85C();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v54);
  v18 = sub_249F1F1D8();
  MEMORY[0x24BDAC7A8](v18);
  v19 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel) = 0;
  v20 = v6 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName;
  *(_QWORD *)v20 = "ManagedMLModel";
  *(_QWORD *)(v20 + 8) = 14;
  *(_BYTE *)(v20 + 16) = 2;
  sub_249F1EECC();
  v61 = v12;
  v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v63 = v11;
  v52 = v21;
  v21((char *)(v6 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL), a1, v11);
  v62 = a2;
  objc_msgSend(a2, sel_copy);
  sub_249F1F9F4();
  swift_unknownObjectRelease();
  sub_249D9D9F4(0, &qword_2578DDF98);
  swift_dynamicCast();
  v49 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_configuration;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_configuration) = v67;
  v22 = *(void **)(v6 + v19);
  *(_QWORD *)(v6 + v19) = 0;

  sub_249D9D9F4(0, &qword_2578DDB28);
  v68 = 0x2E646567616E616DLL;
  v69 = 0xE800000000000000;
  v64 = a1;
  sub_249F1E77C();
  sub_249F1F460();
  swift_bridgeObjectRelease();
  sub_249F1F1CC();
  v68 = MEMORY[0x24BEE4AF8];
  sub_249D9BBEC((unint64_t *)&qword_2578DDB30, v17, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB38);
  sub_249F1BB60(&qword_2578DDB40, &qword_2578DDB38);
  sub_249F1FA0C();
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, *MEMORY[0x24BEE5750], v66);
  v23 = sub_249F1F88C();
  v24 = v57;
  v66 = v6;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_queue) = v23;
  if ((v24 & 0x100) == 0)
  {
    v25 = v24;
    v26 = v51;
    *(_QWORD *)v20 = v50;
    *(_QWORD *)(v20 + 8) = v26;
    *(_BYTE *)(v20 + 16) = v25;
  }
  v68 = 0xD00000000000001BLL;
  v69 = 0x8000000249F3A3B0;
  v28 = v58;
  v27 = v59;
  v29 = v60;
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, *MEMORY[0x24BDCD7A0], v60);
  sub_249D9E5BC();
  v31 = v64;
  v30 = v65;
  sub_249F1E7DC();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  swift_bridgeObjectRelease();
  v32 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_249F1E7B8();
  v33 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v32, sel_fileExistsAtPath_, v33);

  if (v34)
  {
    objc_msgSend(*(id *)(v66 + v49), sel_setUsePrecompiledE5Bundle_, 1);
    v35 = v63;
    if (qword_2578DDA10 != -1)
      swift_once();
    v36 = sub_249F1EF38();
    __swift_project_value_buffer(v36, (uint64_t)qword_2578FF458);
    v37 = v53;
    v52(v53, v30, v35);
    v38 = sub_249F1EF20();
    v39 = sub_249F1F808();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v68 = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = sub_249F1E7B8();
      v67 = sub_249E68CA8(v42, v43, &v68);
      sub_249F1F9AC();
      swift_bridgeObjectRelease();
      v44 = *(void (**)(char *, uint64_t))(v61 + 8);
      v44(v37, v35);
      _os_log_impl(&dword_249D98000, v38, v39, "Will use specialized/pre-compiled: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD06618](v41, -1, -1);
      MEMORY[0x24BD06618](v40, -1, -1);

      v44(v31, v35);
      v45 = v65;
    }
    else
    {

      v44 = *(void (**)(char *, uint64_t))(v61 + 8);
      v44(v37, v35);
      v44(v31, v35);
      v45 = v30;
    }
    v47 = v35;
  }
  else
  {

    v44 = *(void (**)(char *, uint64_t))(v61 + 8);
    v46 = v63;
    v44(v31, v63);
    v45 = v30;
    v47 = v46;
  }
  v44(v45, v47);
  return v66;
}

void sub_249F1AE6C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  sub_249F1B034();
  if (!v0)
  {
    if (qword_2578DDA10 != -1)
      swift_once();
    v1 = sub_249F1EF38();
    __swift_project_value_buffer(v1, (uint64_t)qword_2578FF458);
    swift_retain_n();
    v2 = sub_249F1EF20();
    v3 = sub_249F1F814();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v8 = v5;
      *(_DWORD *)v4 = 136446210;
      v6 = sub_249F1FA9C();
      sub_249E68CA8(v6, v7, &v8);
      sub_249F1F9AC();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_249D98000, v2, v3, "Loaded resources for %{public}s", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD06618](v5, -1, -1);
      MEMORY[0x24BD06618](v4, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

void sub_249F1B034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(void);
  char *v13;
  char v14;
  uint64_t v15;
  uint8_t *v16;
  NSObject *v17;
  os_signpost_type_t v18;
  os_signpost_id_t v19;
  id v20;
  id v21;
  id v22;
  os_signpost_type_t v23;
  char *v24;
  os_signpost_id_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  char *v37;

  v2 = v0;
  v3 = sub_249F1E7F4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel))
  {
    v8 = sub_249F1EED8();
    v34 = &v27;
    MEMORY[0x24BDAC7A8](v8);
    v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v32 = v11;
    v12 = *(void (**)(void))(v11 + 16);
    v37 = v10;
    v12();
    v13 = *(char **)(v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName);
    v14 = *(_BYTE *)(v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName + 16);
    v30 = sub_249F1EE9C();
    v31 = &v27;
    v29 = *(_QWORD *)(v30 - 8);
    MEMORY[0x24BDAC7A8](v30);
    v36 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_249F1EEA8();
    v33 = v8;
    v28 = v7;
    if ((v14 & 1) != 0)
    {
      if (!((unint64_t)v13 >> 32))
      {
        if (v13 >> 11 == 27)
        {
LABEL_16:
          __break(1u);
          return;
        }
        if (v13 >> 16 <= 0x10)
        {
          v35 = sub_249E14C50();
LABEL_9:
          v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v16 = 0;
          v17 = sub_249F1EEC0();
          v18 = sub_249F1F8A4();
          v19 = sub_249F1EE84();
          _os_signpost_emit_with_name_impl(&dword_249D98000, v17, v18, v19, v35, "", v16, 2u);
          sub_249D9D9F4(0, &qword_2578DD950);
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL, v3);
          v20 = *(id *)(v2 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_configuration);
          v21 = sub_249EACD44((uint64_t)v6, (uint64_t)v20);
          if (v1)
          {

            (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v30);
            (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v33);
          }
          else
          {
            v22 = v21;

            v23 = sub_249F1F898();
            v24 = v36;
            v25 = sub_249F1EE84();
            _os_signpost_emit_with_name_impl(&dword_249D98000, v17, v23, v25, v35, "", v16, 2u);

            MEMORY[0x24BD06618](v16, -1, -1);
            (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v30);
            (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v33);
            v26 = *(void **)(v2 + v28);
            *(_QWORD *)(v2 + v28) = v22;

          }
          return;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
      if (v13)
      {
        v35 = v13;
        goto LABEL_9;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
}

void sub_249F1B380(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel) = 0;

  if (qword_2578DDA10 != -1)
    swift_once();
  v2 = sub_249F1EF38();
  __swift_project_value_buffer(v2, (uint64_t)qword_2578FF458);
  swift_retain_n();
  v3 = sub_249F1EF20();
  v4 = sub_249F1F814();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_249F1FA9C();
    sub_249E68CA8(v7, v8, &v9);
    sub_249F1F9AC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v3, v4, "Unloaded resources for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v6, -1, -1);
    MEMORY[0x24BD06618](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_249F1B540(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_249F1B56C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v10;

  v10 = (void *)MEMORY[0x24BD05FF4]();
  sub_249F1B5E8(a1, a2, a3, a4, a5);
  objc_autoreleasePoolPop(v10);
}

void sub_249F1B5E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;

  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249F1B034();
  if (!v5)
  {
    v28 = v11;
    v29 = a5;
    v14 = sub_249F1EED8();
    v35 = &v28;
    MEMORY[0x24BDAC7A8](v14);
    v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    v33 = v18;
    v34 = v17;
    v19 = *(void (**)(void))(v18 + 16);
    v36 = v16;
    v19();
    v20 = *(char **)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName);
    v21 = *(_BYTE *)(a1 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelName + 16);
    v31 = sub_249F1EE9C();
    v32 = &v28;
    v30 = *(_QWORD *)(v31 - 8);
    MEMORY[0x24BDAC7A8](v31);
    v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_249F1EEA8();
    MEMORY[0x24BDAC7A8](&v28);
    *(&v28 - 4) = a4;
    *(&v28 - 3) = a2;
    v26 = a3;
    v27 = a1;
    if ((v21 & 1) != 0)
    {
      if (!((unint64_t)v20 >> 32))
      {
        v24 = (uint64_t)v36;
        if (v20 >> 11 == 27)
        {
LABEL_14:
          __break(1u);
          return;
        }
        if (v20 >> 16 <= 0x10)
        {
          v20 = sub_249E14C50();
          goto LABEL_9;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    else
    {
      if (v20)
      {
        v24 = (uint64_t)v36;
LABEL_9:
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        v26 = a4;
        sub_249F1BA28(v25, 2u, v24, (uint64_t)v23, v20, "", sub_249F1BC90);
        MEMORY[0x24BD06618](v25, -1, -1);
        (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v29, v13, a4);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v24, v34);
        return;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
}

void sub_249F1B878(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  void *v3;
  id v5;

  v3 = *(void **)(a3 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_loadedModel);
  if (v3)
  {
    v5 = v3;
    a1();

  }
  else
  {
    __break(1u);
  }
}

uint64_t ManagedMLModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL;
  v2 = sub_249F1E7F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_signposter;
  v4 = sub_249F1EED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t ManagedMLModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_modelURL;
  v2 = sub_249F1E7F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC13DiffusionBase14ManagedMLModel_signposter;
  v4 = sub_249F1EED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

void sub_249F1BA28(uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, void (*a7)(void))
{
  NSObject *v11;
  os_signpost_type_t v12;
  os_signpost_id_t v13;
  os_signpost_type_t v14;
  os_signpost_id_t v15;
  const char *v16;
  uint64_t v18;

  v11 = sub_249F1EEC0();
  v12 = sub_249F1F8A4();
  v13 = sub_249F1EE84();
  v16 = a5;
  _os_signpost_emit_with_name_impl(&dword_249D98000, v11, v12, v13, a5, a6, a1, a2);
  a7();
  if (!v18)
  {
    v14 = sub_249F1F898();
    v15 = sub_249F1EE84();
    _os_signpost_emit_with_name_impl(&dword_249D98000, v11, v14, v15, v16, a6, a1, a2);
  }

}

void sub_249F1BB24()
{
  uint64_t v0;

  sub_249F1B380(v0);
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void sub_249F1BB44(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_249F1B56C(v1[3], v1[4], v1[5], v1[2], a1);
}

uint64_t sub_249F1BB60(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD06528](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_249F1BBA0()
{
  return type metadata accessor for ManagedMLModel();
}

uint64_t type metadata accessor for ManagedMLModel()
{
  uint64_t result;

  result = qword_2578DF218;
  if (!qword_2578DF218)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_249F1BBE4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_249F1E7F4();
  if (v1 <= 0x3F)
  {
    result = sub_249F1EED8();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void sub_249F1BC90()
{
  uint64_t v0;

  sub_249F1B878(*(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_249F1BCAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t result;
  uint64_t v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  id v59;
  void *v60;
  unsigned int v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  void (*v69)(uint64_t);
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  char *v89;
  void (**v90)(_QWORD);
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void (*v97)(_QWORD);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  id v107;
  void *v108;
  unsigned int v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  const char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  unsigned __int8 *v142;
  char *v143;
  uint64_t v144;
  const char *v145;
  char *v146;
  const char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  void (*v151)(_QWORD, _QWORD, _QWORD);
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v138 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v139 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v141 = (char *)&v122 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF2C8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v143 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v142 = (unsigned __int8 *)&v122 - v12;
  v149 = sub_249F1E7F4();
  v153 = *(_QWORD *)(v149 - 8);
  v13 = MEMORY[0x24BDAC7A8](v149);
  v140 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v155 = (char *)&v122 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v150 = (char *)&v122 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v148 = (char *)&v122 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v154 = (char *)&v122 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v152 = (uint64_t)&v122 - v23;
  v24 = sub_249F1EB24();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  v146 = *(char **)(v28 - 8);
  v29 = *((_QWORD *)v146 + 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v136 = (char *)&v122 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v137 = (char *)&v122 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v147 = (char *)&v122 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v145 = (char *)&v122 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v122 - v38;
  *a3 = 0;
  a3[1] = 0;
  v40 = *(int *)(v37 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2578DDB48);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_249F21910;
  *(_QWORD *)(v41 + 32) = &unk_251B5ABB0;
  *(_QWORD *)(v41 + 40) = &unk_251B5ABD8;
  *(_QWORD *)((char *)a3 + v40) = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, a1, v24);
  v42 = v151;
  sub_249F1D0B8((uint64_t)v27, v39);
  if (v42)
  {
    sub_249ECDFE8(v138);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a1, v24);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v128 = a1;
  v126 = v25;
  v127 = v24;
  v44 = *(int *)(v28 + 20);
  v151 = *(void (**)(_QWORD, _QWORD, _QWORD))(v153 + 16);
  v151((char *)a3 + v44, &v39[v44], v149);
  v45 = v145;
  sub_249ECE024(v138, (uint64_t)v145);
  v46 = v147;
  sub_249ECE024((uint64_t)v39, (uint64_t)v147);
  sub_249ECE024((uint64_t)v45, (uint64_t)v137);
  sub_249ECE024((uint64_t)v46, (uint64_t)v136);
  v47 = v146[80];
  v48 = (v47 + 16) & ~v47;
  v49 = (v29 + v47 + v48) & ~v47;
  v50 = swift_allocObject();
  sub_249F178A8((uint64_t)v45, v50 + v48);
  sub_249F178A8((uint64_t)v46, v50 + v49);
  v51 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)a3 + *(int *)(v28 + 24));
  *v51 = sub_249F1E20C;
  v51[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v50;
  v160 = MEMORY[0x24BEE4AF8];
  v135 = v28;
  v52 = v39;
  v134 = v39;
  v133 = a3;
  v125 = 0;
  v124 = 0;
  v53 = 0;
  v54 = *(int *)(v28 + 24);
  v147 = &v137[v54];
  v145 = &v52[v54];
  v146 = &v136[v54];
  v123 = 10;
  v132 = "imageConditioner";
  v131 = "retoningConditioner";
  v130 = "skinPresenceDecoder";
  v129 = "personalized_animation";
  v55 = (_QWORD *)v153;
  v144 = 11;
  do
  {
    if (v53 >= 0xB)
    {
      __break(1u);
LABEL_48:
      __break(1u);
      JUMPOUT(0x249F1D034);
    }
    v56 = *((unsigned __int8 *)&unk_251B5AB80 + v53 + 32);
    v57 = v53 + 1;
    (*(void (**)(uint64_t))v147)(v56);
    v58 = v148;
    (*(void (**)(uint64_t))v146)(v56);
    v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
    sub_249F1E7AC();
    v60 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v61 = objc_msgSend(v59, sel_fileExistsAtPath_isDirectory_, v60, 0);

    if (v61)
      v62 = v154;
    else
      v62 = v58;
    v63 = v53;
    v64 = v149;
    v65 = v150;
    v151(v152, v62, v149);
    v66 = (void (*)(char *, uint64_t))v55[1];
    v67 = v58;
    v68 = v154;
    v66(v67, v64);
    v66(v68, v64);
    v69 = *(void (**)(uint64_t))v145;
    swift_retain();
    v69(v56);
    swift_release();
    sub_249F1E26C();
    v70 = sub_249F1F298();
    v66(v65, v64);
    v66((char *)v152, v64);
    if ((v70 & 1) == 0)
      __asm { BR              X8 }
    v124 = 1;
    v53 = v57;
  }
  while (v123 != v63);
  sub_249ECDFE8((uint64_t)v136);
  sub_249ECDFE8((uint64_t)v137);
  v119 = v133;
  v120 = v135;
  v121 = v134;
  v72 = *(_QWORD *)v134;
  v71 = *((_QWORD *)v134 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *v119 = v72;
  v119[1] = v71;
  v73 = v149;
  if (qword_2578DDA10 != -1)
    swift_once();
  v74 = sub_249F1EF38();
  v132 = (const char *)__swift_project_value_buffer(v74, (uint64_t)qword_2578FF458);
  v75 = sub_249F1EF20();
  v76 = sub_249F1F820();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = swift_slowAlloc();
    v157 = v78;
    *(_DWORD *)v77 = 136315138;
    v154 = (char *)(v77 + 4);
    swift_beginAccess();
    v79 = swift_bridgeObjectRetain();
    v80 = MEMORY[0x24BD05154](v79, MEMORY[0x24BEE0D00]);
    v82 = v81;
    swift_bridgeObjectRelease();
    v159 = sub_249E68CA8(v80, v82, &v157);
    sub_249F1F9AC();
    v121 = v134;
    v120 = v135;
    v83 = v76;
    v84 = v138;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v75, v83, "Overriding base model components: %s with side-loaded models", v77, 0xCu);
    swift_arrayDestroy();
    v85 = v78;
    v55 = (_QWORD *)v153;
    MEMORY[0x24BD06618](v85, -1, -1);
    MEMORY[0x24BD06618](v77, -1, -1);

    v86 = v143;
  }
  else
  {

    v86 = v143;
    v84 = v138;
  }
  v87 = v142;
  v88 = *(int *)(v120 + 28);
  v89 = *(char **)((char *)v121 + v88);
  v90 = *(void (***)(_QWORD))(v84 + v88);
  v91 = (unint64_t)v90[8];
  v146 = (char *)(v90 + 8);
  v159 = MEMORY[0x24BEE4AF8];
  v92 = 1 << *((_BYTE *)v90 + 32);
  v93 = -1;
  if (v92 < 64)
    v93 = ~(-1 << v92);
  v94 = v93 & v91;
  v148 = (char *)((unint64_t)(v92 + 63) >> 6);
  v131 = v148 - 1;
  v150 = v89;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v152 = 0;
  v144 = (uint64_t)"personalized_illustration";
  v145 = "personalized_emoji";
  v137 = "personalized_sketch";
  v136 = "with negative count";
  v147 = (const char *)v90;
  while (1)
  {
    if (v94)
    {
      v95 = __clz(__rbit64(v94));
      v94 &= v94 - 1;
      v96 = v95 | (v152 << 6);
LABEL_22:
      v97 = v90[7];
      *v86 = *((_BYTE *)v90[6] + v96);
      v98 = (char *)v97 + v55[9] * v96;
      v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF2D0);
      v151(&v86[*(int *)(v99 + 48)], v98, v73);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v86, 0, 1, v99);
      goto LABEL_41;
    }
    v100 = v152 + 1;
    if (__OFADD__(v152, 1))
      goto LABEL_48;
    if (v100 < (uint64_t)v148)
    {
      v101 = *(_QWORD *)&v146[8 * v100];
      if (v101)
        goto LABEL_26;
      v102 = v152 + 2;
      ++v152;
      if (v100 + 1 < (uint64_t)v148)
      {
        v101 = *(_QWORD *)&v146[8 * v102];
        if (v101)
          goto LABEL_29;
        v152 = v100 + 1;
        if (v100 + 2 < (uint64_t)v148)
        {
          v101 = *(_QWORD *)&v146[8 * v100 + 16];
          if (v101)
          {
            v100 += 2;
            goto LABEL_26;
          }
          v102 = v100 + 3;
          v152 = v100 + 2;
          if (v100 + 3 < (uint64_t)v148)
          {
            v101 = *(_QWORD *)&v146[8 * v102];
            if (v101)
            {
LABEL_29:
              v100 = v102;
LABEL_26:
              v94 = (v101 - 1) & v101;
              v96 = __clz(__rbit64(v101)) + (v100 << 6);
              v152 = v100;
              goto LABEL_22;
            }
            while (1)
            {
              v100 = v102 + 1;
              if (__OFADD__(v102, 1))
              {
                __break(1u);
                JUMPOUT(0x249F1D058);
              }
              if (v100 >= (uint64_t)v148)
                break;
              v101 = *(_QWORD *)&v146[8 * v100];
              ++v102;
              if (v101)
                goto LABEL_26;
            }
            v152 = (uint64_t)v131;
          }
        }
      }
    }
    v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF2D0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v86, 1, 1, v103);
    v94 = 0;
LABEL_41:
    sub_249F1E2B4((uint64_t)v86, (uint64_t)v87);
    v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF2D0);
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v87, 1, v104) == 1)break;
    v105 = *v87;
    v106 = &v87[*(int *)(v104 + 48)];
    v154 = (char *)v55[4];
    ((void (*)(char *, unsigned __int8 *, uint64_t))v154)(v155, v106, v73);
    v107 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
    sub_249F1E7AC();
    v108 = (void *)sub_249F1F304();
    swift_bridgeObjectRelease();
    v109 = objc_msgSend(v107, sel_fileExistsAtPath_isDirectory_, v108, 0);

    if (v109)
      __asm { BR              X8 }
    v55 = (_QWORD *)v153;
    (*(void (**)(char *, uint64_t))(v153 + 8))(v155, v73);
  }
  swift_release();
  v110 = sub_249F1EF20();
  v111 = sub_249F1F820();
  if (os_log_type_enabled(v110, v111))
  {
    v112 = (uint8_t *)swift_slowAlloc();
    v113 = swift_slowAlloc();
    v158 = v113;
    *(_DWORD *)v112 = 136315138;
    swift_beginAccess();
    v114 = swift_bridgeObjectRetain();
    v115 = MEMORY[0x24BD05154](v114, MEMORY[0x24BEE0D00]);
    v117 = v116;
    swift_bridgeObjectRelease();
    v156 = sub_249E68CA8(v115, v117, &v158);
    sub_249F1F9AC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_249D98000, v110, v111, "Overriding adapters: %s with side-loaded weights", v112, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD06618](v113, -1, -1);
    MEMORY[0x24BD06618](v112, -1, -1);
  }

  sub_249ECDFE8(v138);
  (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v128, v127);
  sub_249ECDFE8((uint64_t)v134);
  v118 = v135;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v133 + *(int *)(v118 + 28)) = v150;
  return result;
}

uint64_t sub_249F1D0B8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD v71[5];
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  _QWORD v107[4];
  _QWORD v108[4];
  char *v109;

  v98 = a1;
  v75 = a2;
  v90 = sub_249F1E770();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v88 = (char *)v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_249F1EB0C();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v77 = (char *)v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED90);
  MEMORY[0x24BDAC7A8](v4);
  v92 = (char *)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DED98);
  v94 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v76 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DEDA0);
  MEMORY[0x24BDAC7A8](v7);
  v84 = (char *)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_249F1EAF4();
  v99 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v104 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578D7E10);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v74 = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v80 = (char *)v71 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v101 = (char *)v71 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v102 = (char *)v71 - v17;
  v100 = sub_249F1EAAC();
  v95 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v93 = (char *)v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_249F1E7F4();
  v103 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v87 = (char *)v71 - v23;
  v86 = sub_249F1E950();
  v82 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v25 = (char *)v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF2D8);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_249F1E9E0();
  __swift_project_boxed_opaque_existential_1(v108, v108[3]);
  v30 = v98;
  v31 = v109;
  sub_249F1EAB8();
  if (v31)
  {
    v32 = sub_249F1EB24();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v30, v32);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
  }
  v96 = 0;
  v73 = v27;
  v85 = v22;
  v34 = sub_249F1EA64();
  v35 = (uint64_t)v87;
  MEMORY[0x24BD04548](v34);
  (*(void (**)(char *, unint64_t))(v82 + 8))(v25, v86);
  v36 = v75;
  AppleDiffusionPipeline.ResourceURLs.init(resourcesAt:)(v35, v75);
  v37 = v93;
  v72 = v29;
  sub_249F1EA58();
  v38 = sub_249F1EAA0();
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v37, v100);
  swift_bridgeObjectRelease();
  *(_QWORD *)v36 = v38;
  *((_QWORD *)v36 + 1) = v40;
  v86 = sub_249EAFA94(MEMORY[0x24BEE4AF8]);
  v41 = 9;
  v42 = v26;
  v43 = &byte_251B5AB20;
  LODWORD(v82) = *MEMORY[0x24BDCD798];
  v81 = 0x8000000249F39C20;
  v71[4] = "personalized_emoji";
  v71[3] = "personalized_illustration";
  v71[2] = "personalized_sketch";
  v71[1] = "with negative count";
  v44 = (uint64_t)v84;
  v45 = v97;
  v46 = v99;
  v47 = v104;
  v48 = (uint64_t)v101;
  v100 = v42;
  v83 = v19;
  do
  {
    v53 = *v43;
    v52 = *v43;
    v109 = v43 + 1;
    sub_249F11C80(v53);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
    {
      sub_249DCC2FC(v44, &qword_2578DEDA0);
      v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56);
      v49(v48, 1, 1, v19);
      goto LABEL_5;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v47, v44, v45);
    sub_249F1EAE8();
    if (!v106)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
      sub_249DCC2FC((uint64_t)&v105, &qword_2578DEDA8);
      goto LABEL_14;
    }
    sub_249D9E174(&v105, (uint64_t)v107);
    __swift_project_boxed_opaque_existential_1(v107, v107[3]);
    v54 = (uint64_t)v92;
    v55 = v96;
    sub_249F1EAB8();
    if (v55)
    {

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v54, 1, 1, v91);
      v45 = v97;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v97);
      sub_249DCC2FC(v54, &qword_2578DED90);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
      v96 = 0;
      v30 = v98;
LABEL_14:
      v64 = v103;
      v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56);
      v48 = (uint64_t)v101;
      v49((uint64_t)v101, 1, 1, v19);
      goto LABEL_15;
    }
    v95 = v52;
    v96 = 0;
    v56 = v94;
    v57 = v91;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v94 + 56))(v54, 0, 1, v91);
    v58 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v76, v54, v57);
    v59 = v77;
    v60 = sub_249F1EA64();
    v61 = v87;
    MEMORY[0x24BD04704](v60);
    v62 = v79;
    v93 = *(char **)(v78 + 8);
    ((void (*)(char *, uint64_t))v93)(v59, v79);
    LOBYTE(v56) = sub_249F1E764();
    v63 = v103;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v61, v19);
    if ((v56 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v94 + 8))(v58, v57);
      v45 = v97;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v97);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
      v30 = v98;
      v44 = (uint64_t)v84;
      v52 = v95;
      goto LABEL_14;
    }
    v64 = v63;
    v65 = sub_249F1EA64();
    v66 = v101;
    MEMORY[0x24BD04704](v65);
    v48 = (uint64_t)v66;
    ((void (*)(char *, uint64_t))v93)(v59, v62);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v58, v57);
    v45 = v97;
    (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v97);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
    v49((uint64_t)v66, 0, 1, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
    v30 = v98;
    v44 = (uint64_t)v84;
    v52 = v95;
LABEL_15:
    v67 = *(char **)(v64 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v48, 1, v19) != 1)
    {
      v93 = v67;
      v95 = v52;
      __asm { BR              X9 }
    }
    v46 = v99;
LABEL_5:
    sub_249DCC2FC(v48, &qword_2578D7E10);
    v50 = (uint64_t)v102;
    v49((uint64_t)v102, 1, 1, v19);
    sub_249DCC2FC(v50, &qword_2578D7E10);
    v47 = v104;
    v51 = v100;
    --v41;
    v43 = v109;
  }
  while (v41);
  v68 = sub_249F1EB24();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v30, v68);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v51);
  v69 = *(int *)(type metadata accessor for AppleDiffusionPipeline.ResourceURLs() + 28);
  v70 = v75;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v70[v69] = v86;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v108);
}

uint64_t sub_249F1DF84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v8 = sub_249F1E7F4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - v13;
  v15 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  (*(void (**)(uint64_t))(a2 + *(int *)(v15 + 24)))(a1);
  (*(void (**)(uint64_t))(a3 + *(int *)(v15 + 24)))(a1);
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  sub_249F1E7AC();
  v17 = (void *)sub_249F1F304();
  swift_bridgeObjectRelease();
  LODWORD(a2) = objc_msgSend(v16, sel_fileExistsAtPath_isDirectory_, v17, 0);

  if ((_DWORD)a2)
    v18 = v14;
  else
    v18 = v12;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4, v18, v8);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, v8);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v8);
}

uint64_t sub_249F1E0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AppleDiffusionPipeline.ResourceURLs();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  v6 = v0 + v4;
  swift_bridgeObjectRelease();
  v7 = v6 + *(int *)(v1 + 20);
  v8 = sub_249F1E7F4();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v0 + v5 + *(int *)(v1 + 20), v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_249F1E20C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for AppleDiffusionPipeline.ResourceURLs() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  return sub_249F1DF84(a1, v2 + ((v6 + 16) & ~v6), v2 + ((*(_QWORD *)(v5 + 64) + v6 + ((v6 + 16) & ~v6)) & ~v6), a2);
}

unint64_t sub_249F1E26C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2578DF020;
  if (!qword_2578DF020)
  {
    v1 = sub_249F1E7F4();
    result = MEMORY[0x24BD06528](MEMORY[0x24BDCDB00], v1);
    atomic_store(result, (unint64_t *)&qword_2578DF020);
  }
  return result;
}

uint64_t sub_249F1E2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2578DF2C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_249F1E2FC()
{
  return MEMORY[0x24BEDFB90]();
}

uint64_t sub_249F1E308()
{
  return MEMORY[0x24BEDFB98]();
}

uint64_t sub_249F1E314()
{
  return MEMORY[0x24BEDFBA0]();
}

uint64_t sub_249F1E320()
{
  return MEMORY[0x24BEDFBA8]();
}

uint64_t sub_249F1E32C()
{
  return MEMORY[0x24BEDFBB0]();
}

uint64_t sub_249F1E338()
{
  return MEMORY[0x24BEDFBB8]();
}

uint64_t sub_249F1E344()
{
  return MEMORY[0x24BEDFBC0]();
}

uint64_t sub_249F1E350()
{
  return MEMORY[0x24BEDFBC8]();
}

uint64_t sub_249F1E35C()
{
  return MEMORY[0x24BEDFBE0]();
}

uint64_t sub_249F1E368()
{
  return MEMORY[0x24BEDFBE8]();
}

uint64_t sub_249F1E374()
{
  return MEMORY[0x24BEDFBF0]();
}

uint64_t sub_249F1E380()
{
  return MEMORY[0x24BEDFBF8]();
}

uint64_t sub_249F1E38C()
{
  return MEMORY[0x24BEDFC00]();
}

uint64_t sub_249F1E398()
{
  return MEMORY[0x24BEDFC10]();
}

uint64_t sub_249F1E3A4()
{
  return MEMORY[0x24BEDFC20]();
}

uint64_t sub_249F1E3B0()
{
  return MEMORY[0x24BEDFC38]();
}

uint64_t sub_249F1E3BC()
{
  return MEMORY[0x24BEDFC60]();
}

uint64_t sub_249F1E3C8()
{
  return MEMORY[0x24BEDFC78]();
}

uint64_t sub_249F1E3D4()
{
  return MEMORY[0x24BEDFC88]();
}

uint64_t sub_249F1E3E0()
{
  return MEMORY[0x24BEDFC90]();
}

uint64_t sub_249F1E3EC()
{
  return MEMORY[0x24BEDFCA8]();
}

uint64_t sub_249F1E3F8()
{
  return MEMORY[0x24BEDFCB0]();
}

uint64_t sub_249F1E404()
{
  return MEMORY[0x24BEDFCB8]();
}

uint64_t sub_249F1E410()
{
  return MEMORY[0x24BEDFCC8]();
}

uint64_t sub_249F1E41C()
{
  return MEMORY[0x24BEDFCE8]();
}

uint64_t sub_249F1E428()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_249F1E434()
{
  return MEMORY[0x24BDCB238]();
}

uint64_t sub_249F1E440()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_249F1E44C()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_249F1E458()
{
  return MEMORY[0x24BDCB288]();
}

uint64_t sub_249F1E464()
{
  return MEMORY[0x24BDCB290]();
}

uint64_t sub_249F1E470()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t sub_249F1E47C()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t sub_249F1E488()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_249F1E494()
{
  return MEMORY[0x24BDCB3D0]();
}

uint64_t sub_249F1E4A0()
{
  return MEMORY[0x24BDCB3D8]();
}

uint64_t sub_249F1E4AC()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_249F1E4B8()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_249F1E4C4()
{
  return MEMORY[0x24BDCB680]();
}

uint64_t sub_249F1E4D0()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t sub_249F1E4DC()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_249F1E4E8()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_249F1E4F4()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_249F1E500()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_249F1E50C()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_249F1E518()
{
  return MEMORY[0x24BDCBBF8]();
}

uint64_t sub_249F1E524()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_249F1E530()
{
  return MEMORY[0x24BDCBE48]();
}

uint64_t sub_249F1E53C()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_249F1E548()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t sub_249F1E554()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t sub_249F1E560()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_249F1E56C()
{
  return MEMORY[0x24BDCC268]();
}

uint64_t sub_249F1E578()
{
  return MEMORY[0x24BDCC270]();
}

uint64_t sub_249F1E584()
{
  return MEMORY[0x24BDCC290]();
}

uint64_t sub_249F1E590()
{
  return MEMORY[0x24BDCC2C8]();
}

uint64_t sub_249F1E59C()
{
  return MEMORY[0x24BDCC300]();
}

uint64_t sub_249F1E5A8()
{
  return MEMORY[0x24BDCC318]();
}

uint64_t sub_249F1E5B4()
{
  return MEMORY[0x24BDCC378]();
}

uint64_t sub_249F1E5C0()
{
  return MEMORY[0x24BDCC3F8]();
}

uint64_t sub_249F1E5CC()
{
  return MEMORY[0x24BDCC460]();
}

uint64_t sub_249F1E5D8()
{
  return MEMORY[0x24BDCC478]();
}

uint64_t sub_249F1E5E4()
{
  return MEMORY[0x24BDCC480]();
}

uint64_t sub_249F1E5F0()
{
  return MEMORY[0x24BDCC498]();
}

uint64_t sub_249F1E5FC()
{
  return MEMORY[0x24BDCC4A8]();
}

uint64_t sub_249F1E608()
{
  return MEMORY[0x24BDCC4E0]();
}

uint64_t sub_249F1E614()
{
  return MEMORY[0x24BDCC4E8]();
}

uint64_t sub_249F1E620()
{
  return MEMORY[0x24BDCC4F0]();
}

uint64_t sub_249F1E62C()
{
  return MEMORY[0x24BDCC518]();
}

uint64_t sub_249F1E638()
{
  return MEMORY[0x24BDCC520]();
}

uint64_t sub_249F1E644()
{
  return MEMORY[0x24BDCC528]();
}

uint64_t sub_249F1E650()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t sub_249F1E65C()
{
  return MEMORY[0x24BDCC5D8]();
}

uint64_t sub_249F1E668()
{
  return MEMORY[0x24BDCC5E8]();
}

uint64_t sub_249F1E674()
{
  return MEMORY[0x24BDCC608]();
}

uint64_t sub_249F1E680()
{
  return MEMORY[0x24BDCC610]();
}

uint64_t sub_249F1E68C()
{
  return MEMORY[0x24BDCC620]();
}

uint64_t sub_249F1E698()
{
  return MEMORY[0x24BDCC6D8]();
}

uint64_t sub_249F1E6A4()
{
  return MEMORY[0x24BDCC890]();
}

uint64_t sub_249F1E6B0()
{
  return MEMORY[0x24BDCC898]();
}

uint64_t sub_249F1E6BC()
{
  return MEMORY[0x24BDCC8A8]();
}

uint64_t sub_249F1E6C8()
{
  return MEMORY[0x24BDCC8B0]();
}

uint64_t sub_249F1E6D4()
{
  return MEMORY[0x24BDCC948]();
}

uint64_t sub_249F1E6E0()
{
  return MEMORY[0x24BDCC950]();
}

uint64_t sub_249F1E6EC()
{
  return MEMORY[0x24BDCC958]();
}

uint64_t sub_249F1E6F8()
{
  return MEMORY[0x24BDCC988]();
}

uint64_t sub_249F1E704()
{
  return MEMORY[0x24BDCC9A8]();
}

uint64_t sub_249F1E710()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_249F1E71C()
{
  return MEMORY[0x24BDCD320]();
}

uint64_t sub_249F1E728()
{
  return MEMORY[0x24BDCD348]();
}

uint64_t sub_249F1E734()
{
  return MEMORY[0x24BDCD380]();
}

uint64_t sub_249F1E740()
{
  return MEMORY[0x24BDCD3C0]();
}

uint64_t sub_249F1E74C()
{
  return MEMORY[0x24BDCD3C8]();
}

uint64_t sub_249F1E758()
{
  return MEMORY[0x24BDCD3F0]();
}

uint64_t sub_249F1E764()
{
  return MEMORY[0x24BDCD748]();
}

uint64_t sub_249F1E770()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_249F1E77C()
{
  return MEMORY[0x24BDCD898]();
}

uint64_t sub_249F1E788()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_249F1E794()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t sub_249F1E7A0()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_249F1E7AC()
{
  return MEMORY[0x24BDCD9E8]();
}

uint64_t sub_249F1E7B8()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_249F1E7C4()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t sub_249F1E7D0()
{
  return MEMORY[0x24BDCDA88]();
}

uint64_t sub_249F1E7DC()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t sub_249F1E7E8()
{
  return MEMORY[0x24BDCDAA8]();
}

uint64_t sub_249F1E7F4()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_249F1E800()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t sub_249F1E80C()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_249F1E818()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_249F1E824()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_249F1E830()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_249F1E83C()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_249F1E848()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_249F1E854()
{
  return MEMORY[0x24BDCDD40]();
}

uint64_t sub_249F1E860()
{
  return MEMORY[0x24BDCDD70]();
}

uint64_t sub_249F1E86C()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t sub_249F1E878()
{
  return MEMORY[0x24BDCDD88]();
}

uint64_t sub_249F1E884()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_249F1E890()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_249F1E89C()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_249F1E8A8()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_249F1E8B4()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_249F1E8C0()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_249F1E8CC()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_249F1E8D8()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_249F1E8E4()
{
  return MEMORY[0x24BDCEB58]();
}

uint64_t sub_249F1E8F0()
{
  return MEMORY[0x24BDCEB60]();
}

uint64_t sub_249F1E8FC()
{
  return MEMORY[0x24BDCEB98]();
}

uint64_t sub_249F1E908()
{
  return MEMORY[0x24BDCED08]();
}

uint64_t sub_249F1E914()
{
  return MEMORY[0x24BDCED40]();
}

uint64_t sub_249F1E920()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_249F1E92C()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_249F1E938()
{
  return MEMORY[0x24BDCF760]();
}

uint64_t sub_249F1E944()
{
  return MEMORY[0x24BE67F10]();
}

uint64_t sub_249F1E950()
{
  return MEMORY[0x24BE67F20]();
}

uint64_t sub_249F1E95C()
{
  return MEMORY[0x24BE67FB8]();
}

uint64_t sub_249F1E968()
{
  return MEMORY[0x24BE67FC0]();
}

uint64_t sub_249F1E974()
{
  return MEMORY[0x24BE67FC8]();
}

uint64_t sub_249F1E980()
{
  return MEMORY[0x24BE67FD0]();
}

uint64_t sub_249F1E98C()
{
  return MEMORY[0x24BE67FD8]();
}

uint64_t sub_249F1E998()
{
  return MEMORY[0x24BE67FE0]();
}

uint64_t sub_249F1E9A4()
{
  return MEMORY[0x24BE67FE8]();
}

uint64_t sub_249F1E9B0()
{
  return MEMORY[0x24BE67FF0]();
}

uint64_t sub_249F1E9BC()
{
  return MEMORY[0x24BE67FF8]();
}

uint64_t sub_249F1E9C8()
{
  return MEMORY[0x24BE68030]();
}

uint64_t sub_249F1E9D4()
{
  return MEMORY[0x24BE68050]();
}

uint64_t sub_249F1E9E0()
{
  return MEMORY[0x24BE68158]();
}

uint64_t sub_249F1E9EC()
{
  return MEMORY[0x24BE68160]();
}

uint64_t sub_249F1E9F8()
{
  return MEMORY[0x24BE68168]();
}

uint64_t sub_249F1EA04()
{
  return MEMORY[0x24BE68170]();
}

uint64_t sub_249F1EA10()
{
  return MEMORY[0x24BE68178]();
}

uint64_t sub_249F1EA1C()
{
  return MEMORY[0x24BE68180]();
}

uint64_t sub_249F1EA28()
{
  return MEMORY[0x24BE68188]();
}

uint64_t sub_249F1EA34()
{
  return MEMORY[0x24BE68190]();
}

uint64_t sub_249F1EA40()
{
  return MEMORY[0x24BE68198]();
}

uint64_t sub_249F1EA4C()
{
  return MEMORY[0x24BE681A0]();
}

uint64_t sub_249F1EA58()
{
  return MEMORY[0x24BE68218]();
}

uint64_t sub_249F1EA64()
{
  return MEMORY[0x24BE68220]();
}

uint64_t sub_249F1EA70()
{
  return MEMORY[0x24BE68280]();
}

uint64_t sub_249F1EA7C()
{
  return MEMORY[0x24BE682B0]();
}

uint64_t sub_249F1EA88()
{
  return MEMORY[0x24BE682B8]();
}

uint64_t sub_249F1EA94()
{
  return MEMORY[0x24BE68320]();
}

uint64_t sub_249F1EAA0()
{
  return MEMORY[0x24BE68388]();
}

uint64_t sub_249F1EAAC()
{
  return MEMORY[0x24BE68390]();
}

uint64_t sub_249F1EAB8()
{
  return MEMORY[0x24BE68500]();
}

uint64_t sub_249F1EAC4()
{
  return MEMORY[0x24BE68668]();
}

uint64_t sub_249F1EAD0()
{
  return MEMORY[0x24BE68670]();
}

uint64_t sub_249F1EADC()
{
  return MEMORY[0x24BE68698]();
}

uint64_t sub_249F1EAE8()
{
  return MEMORY[0x24BE686D0]();
}

uint64_t sub_249F1EAF4()
{
  return MEMORY[0x24BE686D8]();
}

uint64_t sub_249F1EB00()
{
  return MEMORY[0x24BE68720]();
}

uint64_t sub_249F1EB0C()
{
  return MEMORY[0x24BE68728]();
}

uint64_t sub_249F1EB18()
{
  return MEMORY[0x24BE68808]();
}

uint64_t sub_249F1EB24()
{
  return MEMORY[0x24BE68820]();
}

uint64_t sub_249F1EB30()
{
  return MEMORY[0x24BEE5110]();
}

uint64_t sub_249F1EB3C()
{
  return MEMORY[0x24BEE5128]();
}

uint64_t sub_249F1EB48()
{
  return MEMORY[0x24BEE5138]();
}

uint64_t sub_249F1EB54()
{
  return MEMORY[0x24BE3BE00]();
}

uint64_t sub_249F1EB60()
{
  return MEMORY[0x24BE3BE28]();
}

uint64_t sub_249F1EB6C()
{
  return MEMORY[0x24BE3BE60]();
}

uint64_t sub_249F1EB78()
{
  return MEMORY[0x24BE3BE70]();
}

uint64_t sub_249F1EB84()
{
  return MEMORY[0x24BE3BEB0]();
}

uint64_t sub_249F1EB90()
{
  return MEMORY[0x24BE3BF80]();
}

uint64_t sub_249F1EB9C()
{
  return MEMORY[0x24BE3BFD8]();
}

uint64_t sub_249F1EBA8()
{
  return MEMORY[0x24BE3BFE8]();
}

uint64_t sub_249F1EBB4()
{
  return MEMORY[0x24BE3C008]();
}

uint64_t sub_249F1EBC0()
{
  return MEMORY[0x24BE3C020]();
}

uint64_t sub_249F1EBCC()
{
  return MEMORY[0x24BE3C058]();
}

uint64_t sub_249F1EBD8()
{
  return MEMORY[0x24BE3C068]();
}

uint64_t sub_249F1EBE4()
{
  return MEMORY[0x24BE3C090]();
}

uint64_t sub_249F1EBF0()
{
  return MEMORY[0x24BE3C118]();
}

uint64_t sub_249F1EBFC()
{
  return MEMORY[0x24BE3C138]();
}

uint64_t sub_249F1EC08()
{
  return MEMORY[0x24BE3C3F8]();
}

uint64_t sub_249F1EC14()
{
  return MEMORY[0x24BE3C260]();
}

uint64_t sub_249F1EC20()
{
  return MEMORY[0x24BE3C400]();
}

uint64_t sub_249F1EC2C()
{
  return MEMORY[0x24BE3C430]();
}

uint64_t sub_249F1EC38()
{
  return MEMORY[0x24BE3C288]();
}

uint64_t sub_249F1EC44()
{
  return MEMORY[0x24BE3C438]();
}

uint64_t sub_249F1EC50()
{
  return MEMORY[0x24BEC0B98]();
}

uint64_t sub_249F1EC5C()
{
  return MEMORY[0x24BEC0BA8]();
}

uint64_t sub_249F1EC68()
{
  return MEMORY[0x24BEC0BB0]();
}

uint64_t sub_249F1EC74()
{
  return MEMORY[0x24BEC0BC8]();
}

uint64_t sub_249F1EC80()
{
  return MEMORY[0x24BEC0BF8]();
}

uint64_t sub_249F1EC8C()
{
  return MEMORY[0x24BE68900]();
}

uint64_t sub_249F1EC98()
{
  return MEMORY[0x24BE68908]();
}

uint64_t sub_249F1ECA4()
{
  return MEMORY[0x24BE68910]();
}

uint64_t sub_249F1ECB0()
{
  return MEMORY[0x24BE68918]();
}

uint64_t sub_249F1ECBC()
{
  return MEMORY[0x24BE68920]();
}

uint64_t sub_249F1ECC8()
{
  return MEMORY[0x24BE689A8]();
}

uint64_t sub_249F1ECD4()
{
  return MEMORY[0x24BE689C8]();
}

uint64_t sub_249F1ECE0()
{
  return MEMORY[0x24BE689F0]();
}

uint64_t sub_249F1ECEC()
{
  return MEMORY[0x24BE68A10]();
}

uint64_t sub_249F1ECF8()
{
  return MEMORY[0x24BE68A20]();
}

uint64_t sub_249F1ED04()
{
  return MEMORY[0x24BE68A28]();
}

uint64_t sub_249F1ED10()
{
  return MEMORY[0x24BE68A40]();
}

uint64_t sub_249F1ED1C()
{
  return MEMORY[0x24BE68A50]();
}

uint64_t sub_249F1ED28()
{
  return MEMORY[0x24BE68A58]();
}

uint64_t sub_249F1ED34()
{
  return MEMORY[0x24BE68A60]();
}

uint64_t sub_249F1ED40()
{
  return MEMORY[0x24BE68A68]();
}

uint64_t sub_249F1ED4C()
{
  return MEMORY[0x24BE68A70]();
}

uint64_t sub_249F1ED58()
{
  return MEMORY[0x24BE68A78]();
}

uint64_t sub_249F1ED64()
{
  return MEMORY[0x24BE68A80]();
}

uint64_t sub_249F1ED70()
{
  return MEMORY[0x24BE68AD8]();
}

uint64_t sub_249F1ED7C()
{
  return MEMORY[0x24BE68AE8]();
}

uint64_t sub_249F1ED88()
{
  return MEMORY[0x24BE68B18]();
}

uint64_t sub_249F1ED94()
{
  return MEMORY[0x24BE68B28]();
}

uint64_t sub_249F1EDA0()
{
  return MEMORY[0x24BE68B88]();
}

uint64_t sub_249F1EDAC()
{
  return MEMORY[0x24BE68C30]();
}

uint64_t sub_249F1EDB8()
{
  return MEMORY[0x24BE68C38]();
}

uint64_t sub_249F1EDC4()
{
  return MEMORY[0x24BE68C48]();
}

uint64_t sub_249F1EDD0()
{
  return MEMORY[0x24BE68C58]();
}

uint64_t sub_249F1EDDC()
{
  return MEMORY[0x24BE68C60]();
}

uint64_t sub_249F1EDE8()
{
  return MEMORY[0x24BE68CA0]();
}

uint64_t sub_249F1EDF4()
{
  return MEMORY[0x24BEE6190]();
}

uint64_t sub_249F1EE00()
{
  return MEMORY[0x24BEE6278]();
}

uint64_t sub_249F1EE0C()
{
  return MEMORY[0x24BEE63B8]();
}

uint64_t sub_249F1EE18()
{
  return MEMORY[0x24BE3C690]();
}

uint64_t sub_249F1EE24()
{
  return MEMORY[0x24BE3B2D0]();
}

uint64_t sub_249F1EE30()
{
  return MEMORY[0x24BE3B338]();
}

uint64_t sub_249F1EE3C()
{
  return MEMORY[0x24BE3B340]();
}

uint64_t sub_249F1EE48()
{
  return MEMORY[0x24BE3B348]();
}

uint64_t sub_249F1EE54()
{
  return MEMORY[0x24BE3B450]();
}

uint64_t sub_249F1EE60()
{
  return MEMORY[0x24BE3B460]();
}

uint64_t sub_249F1EE6C()
{
  return MEMORY[0x24BE3B470]();
}

uint64_t sub_249F1EE78()
{
  return MEMORY[0x24BEE7720]();
}

uint64_t sub_249F1EE84()
{
  return MEMORY[0x24BEE7740]();
}

uint64_t sub_249F1EE90()
{
  return MEMORY[0x24BEE7750]();
}

uint64_t sub_249F1EE9C()
{
  return MEMORY[0x24BEE7760]();
}

uint64_t sub_249F1EEA8()
{
  return MEMORY[0x24BEE7778]();
}

uint64_t sub_249F1EEB4()
{
  return MEMORY[0x24BEE7798]();
}

uint64_t sub_249F1EEC0()
{
  return MEMORY[0x24BEE77B8]();
}

uint64_t sub_249F1EECC()
{
  return MEMORY[0x24BEE77D0]();
}

uint64_t sub_249F1EED8()
{
  return MEMORY[0x24BEE77E8]();
}

uint64_t sub_249F1EEE4()
{
  return MEMORY[0x24BEE7820]();
}

uint64_t sub_249F1EEF0()
{
  return MEMORY[0x24BEE7850]();
}

uint64_t sub_249F1EEFC()
{
  return MEMORY[0x24BEE7860]();
}

uint64_t sub_249F1EF08()
{
  return MEMORY[0x24BEE7878]();
}

uint64_t sub_249F1EF14()
{
  return MEMORY[0x24BEE7898]();
}

uint64_t sub_249F1EF20()
{
  return MEMORY[0x24BEE78B0]();
}

uint64_t sub_249F1EF2C()
{
  return MEMORY[0x24BEE78B8]();
}

uint64_t sub_249F1EF38()
{
  return MEMORY[0x24BEE78D0]();
}

uint64_t sub_249F1EF44()
{
  return MEMORY[0x24BEE64B8]();
}

uint64_t sub_249F1EF50()
{
  return MEMORY[0x24BEE6690]();
}

uint64_t sub_249F1EF5C()
{
  return MEMORY[0x24BEE66A0]();
}

uint64_t sub_249F1EF68()
{
  return MEMORY[0x24BEE66A8]();
}

uint64_t sub_249F1EF74()
{
  return MEMORY[0x24BEE66C8]();
}

uint64_t sub_249F1EF80()
{
  return MEMORY[0x24BEE66F0]();
}

uint64_t sub_249F1EF8C()
{
  return MEMORY[0x24BEE66F8]();
}

uint64_t sub_249F1EF98()
{
  return MEMORY[0x24BEE6700]();
}

uint64_t sub_249F1EFA4()
{
  return MEMORY[0x24BDBFC10]();
}

uint64_t sub_249F1EFB0()
{
  return MEMORY[0x24BDBFC18]();
}

uint64_t sub_249F1EFBC()
{
  return MEMORY[0x24BDBFC20]();
}

uint64_t sub_249F1EFC8()
{
  return MEMORY[0x24BDBFC28]();
}

uint64_t sub_249F1EFD4()
{
  return MEMORY[0x24BDBFC38]();
}

uint64_t sub_249F1EFE0()
{
  return MEMORY[0x24BDBFC40]();
}

uint64_t sub_249F1EFEC()
{
  return MEMORY[0x24BDBFC50]();
}

uint64_t sub_249F1EFF8()
{
  return MEMORY[0x24BDBFC88]();
}

uint64_t sub_249F1F004()
{
  return MEMORY[0x24BDBFCA0]();
}

uint64_t sub_249F1F010()
{
  return MEMORY[0x24BDBFCA8]();
}

uint64_t sub_249F1F01C()
{
  return MEMORY[0x24BDBFCC0]();
}

uint64_t sub_249F1F028()
{
  return MEMORY[0x24BDBFD18]();
}

uint64_t sub_249F1F034()
{
  return MEMORY[0x24BDBFD20]();
}

uint64_t sub_249F1F040()
{
  return MEMORY[0x24BDBFD28]();
}

uint64_t sub_249F1F04C()
{
  return MEMORY[0x24BDBFD80]();
}

uint64_t sub_249F1F058()
{
  return MEMORY[0x24BDBFD88]();
}

uint64_t sub_249F1F064()
{
  return MEMORY[0x24BDBFD90]();
}

uint64_t sub_249F1F070()
{
  return MEMORY[0x24BDBFD98]();
}

uint64_t sub_249F1F07C()
{
  return MEMORY[0x24BDBFDB0]();
}

uint64_t sub_249F1F088()
{
  return MEMORY[0x24BDBFDB8]();
}

uint64_t sub_249F1F094()
{
  return MEMORY[0x24BDBFDC0]();
}

uint64_t sub_249F1F0A0()
{
  return MEMORY[0x24BDBFDC8]();
}

uint64_t sub_249F1F0AC()
{
  return MEMORY[0x24BDBFDD0]();
}

uint64_t sub_249F1F0B8()
{
  return MEMORY[0x24BDBFDE8]();
}

uint64_t sub_249F1F0C4()
{
  return MEMORY[0x24BDBFDF0]();
}

uint64_t sub_249F1F0D0()
{
  return MEMORY[0x24BDBFE08]();
}

uint64_t sub_249F1F0DC()
{
  return MEMORY[0x24BEE5370]();
}

uint64_t sub_249F1F0E8()
{
  return MEMORY[0x24BEE5FC0]();
}

uint64_t sub_249F1F0F4()
{
  return MEMORY[0x24BEE5FC8]();
}

uint64_t sub_249F1F100()
{
  return MEMORY[0x24BEE5FD0]();
}

uint64_t sub_249F1F10C()
{
  return MEMORY[0x24BDF99D8]();
}

uint64_t sub_249F1F118()
{
  return MEMORY[0x24BDF99E0]();
}

uint64_t sub_249F1F124()
{
  return MEMORY[0x24BDF99E8]();
}

uint64_t sub_249F1F130()
{
  return MEMORY[0x24BDF99F0]();
}

uint64_t sub_249F1F13C()
{
  return MEMORY[0x24BDF9A18]();
}

uint64_t sub_249F1F148()
{
  return MEMORY[0x24BDF9A38]();
}

uint64_t sub_249F1F154()
{
  return MEMORY[0x24BDF9A48]();
}

uint64_t sub_249F1F160()
{
  return MEMORY[0x24BDF9A50]();
}

uint64_t sub_249F1F16C()
{
  return MEMORY[0x24BDF9A58]();
}

uint64_t sub_249F1F178()
{
  return MEMORY[0x24BDF9A60]();
}

uint64_t sub_249F1F184()
{
  return MEMORY[0x24BDF9A70]();
}

uint64_t sub_249F1F190()
{
  return MEMORY[0x24BDF9A90]();
}

uint64_t sub_249F1F19C()
{
  return MEMORY[0x24BDF9AA0]();
}

uint64_t sub_249F1F1A8()
{
  return MEMORY[0x24BDF9AA8]();
}

uint64_t sub_249F1F1B4()
{
  return MEMORY[0x24BDF9AB0]();
}

uint64_t sub_249F1F1C0()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_249F1F1CC()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_249F1F1D8()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_249F1F1E4()
{
  return MEMORY[0x24BEE67F8]();
}

uint64_t sub_249F1F1F0()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_249F1F1FC()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t sub_249F1F208()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_249F1F214()
{
  return MEMORY[0x24BEE0600]();
}

uint64_t sub_249F1F220()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_249F1F22C()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_249F1F238()
{
  return MEMORY[0x24BEE06A0]();
}

uint64_t sub_249F1F244()
{
  return MEMORY[0x24BEE06C0]();
}

uint64_t sub_249F1F250()
{
  return MEMORY[0x24BEE06E8]();
}

uint64_t sub_249F1F25C()
{
  return MEMORY[0x24BEE06F0]();
}

uint64_t sub_249F1F268()
{
  return MEMORY[0x24BEE06F8]();
}

uint64_t sub_249F1F274()
{
  return MEMORY[0x24BEE0760]();
}

uint64_t sub_249F1F280()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_249F1F28C()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_249F1F298()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_249F1F2A4()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_249F1F2B0()
{
  return MEMORY[0x24BDCF908]();
}

uint64_t sub_249F1F2BC()
{
  return MEMORY[0x24BDCF910]();
}

uint64_t sub_249F1F2C8()
{
  return MEMORY[0x24BDCF930]();
}

uint64_t sub_249F1F2D4()
{
  return MEMORY[0x24BDCF938]();
}

uint64_t sub_249F1F2E0()
{
  return MEMORY[0x24BDCF948]();
}

uint64_t sub_249F1F2EC()
{
  return MEMORY[0x24BDCF968]();
}

uint64_t sub_249F1F2F8()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_249F1F304()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_249F1F310()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_249F1F31C()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_249F1F328()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_249F1F334()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_249F1F340()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_249F1F34C()
{
  return MEMORY[0x24BDCFA50]();
}

uint64_t sub_249F1F358()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_249F1F364()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_249F1F370()
{
  return MEMORY[0x24BDCFAD8]();
}

uint64_t sub_249F1F37C()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_249F1F388()
{
  return MEMORY[0x24BDCFB20]();
}

uint64_t sub_249F1F394()
{
  return MEMORY[0x24BDCFB28]();
}

uint64_t sub_249F1F3A0()
{
  return MEMORY[0x24BDCFB38]();
}

uint64_t sub_249F1F3AC()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_249F1F3B8()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_249F1F3C4()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_249F1F3D0()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_249F1F3DC()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_249F1F3E8()
{
  return MEMORY[0x24BEE0A68]();
}

uint64_t sub_249F1F3F4()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_249F1F400()
{
  return MEMORY[0x24BEE0B00]();
}

uint64_t sub_249F1F40C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_249F1F418()
{
  return MEMORY[0x24BEE0B30]();
}

uint64_t sub_249F1F424()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_249F1F430()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_249F1F43C()
{
  return MEMORY[0x24BEE0B78]();
}

uint64_t sub_249F1F448()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_249F1F454()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_249F1F460()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_249F1F46C()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_249F1F478()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_249F1F484()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_249F1F490()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_249F1F49C()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_249F1F4A8()
{
  return MEMORY[0x24BEE0CD8]();
}

uint64_t sub_249F1F4B4()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_249F1F4C0()
{
  return MEMORY[0x24BEE0DC8]();
}

uint64_t sub_249F1F4CC()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_249F1F4D8()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_249F1F4E4()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_249F1F4F0()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_249F1F4FC()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_249F1F508()
{
  return MEMORY[0x24BEE1058]();
}

uint64_t sub_249F1F514()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_249F1F520()
{
  return MEMORY[0x24BEE10D8]();
}

uint64_t sub_249F1F52C()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_249F1F538()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_249F1F544()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_249F1F550()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_249F1F55C()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_249F1F568()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_249F1F574()
{
  return MEMORY[0x24BEE1168]();
}

uint64_t sub_249F1F580()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_249F1F58C()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_249F1F598()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_249F1F5A4()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_249F1F5B0()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_249F1F5BC()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_249F1F5C8()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_249F1F5D4()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t sub_249F1F5E0()
{
  return MEMORY[0x24BEE6860]();
}

uint64_t sub_249F1F5EC()
{
  return MEMORY[0x24BEE6888]();
}

uint64_t sub_249F1F5F8()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_249F1F604()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_249F1F610()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t sub_249F1F61C()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_249F1F628()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_249F1F634()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_249F1F640()
{
  return MEMORY[0x24BEE6A68]();
}

uint64_t sub_249F1F64C()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t sub_249F1F658()
{
  return MEMORY[0x24BEE6AC0]();
}

uint64_t sub_249F1F664()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_249F1F670()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_249F1F67C()
{
  return MEMORY[0x24BEE6B98]();
}

uint64_t sub_249F1F688()
{
  return MEMORY[0x24BEE6BA0]();
}

uint64_t sub_249F1F694()
{
  return MEMORY[0x24BEE6BB8]();
}

uint64_t sub_249F1F6A0()
{
  return MEMORY[0x24BEE6CC0]();
}

uint64_t sub_249F1F6AC()
{
  return MEMORY[0x24BEE6CC8]();
}

uint64_t sub_249F1F6B8()
{
  return MEMORY[0x24BEE6CD0]();
}

uint64_t sub_249F1F6C4()
{
  return MEMORY[0x24BEE6CE0]();
}

uint64_t sub_249F1F6D0()
{
  return MEMORY[0x24BEE6CF8]();
}

uint64_t sub_249F1F6DC()
{
  return MEMORY[0x24BEE6D30]();
}

uint64_t sub_249F1F6E8()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_249F1F6F4()
{
  return MEMORY[0x24BDCFC80]();
}

uint64_t sub_249F1F700()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t sub_249F1F70C()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_249F1F718()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_249F1F724()
{
  return MEMORY[0x24BDCFD38]();
}

uint64_t sub_249F1F730()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_249F1F73C()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_249F1F748()
{
  return MEMORY[0x24BEE18E8]();
}

uint64_t sub_249F1F754()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_249F1F760()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_249F1F76C()
{
  return MEMORY[0x24BEE19E8]();
}

uint64_t sub_249F1F778()
{
  return MEMORY[0x24BEE1A20]();
}

uint64_t sub_249F1F784()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_249F1F790()
{
  return MEMORY[0x24BDCFD58]();
}

uint64_t sub_249F1F79C()
{
  return MEMORY[0x24BDCFD70]();
}

uint64_t sub_249F1F7A8()
{
  return MEMORY[0x24BEE5B28]();
}

uint64_t sub_249F1F7B4()
{
  return MEMORY[0x24BEE5B30]();
}

uint64_t sub_249F1F7C0()
{
  return MEMORY[0x24BDBD780]();
}

uint64_t sub_249F1F7CC()
{
  return MEMORY[0x24BDBFE60]();
}

uint64_t sub_249F1F7D8()
{
  return MEMORY[0x24BDBFE68]();
}

uint64_t sub_249F1F7E4()
{
  return MEMORY[0x24BDBFE70]();
}

uint64_t sub_249F1F7F0()
{
  return MEMORY[0x24BDBFE78]();
}

uint64_t sub_249F1F7FC()
{
  return MEMORY[0x24BDBFE88]();
}

uint64_t sub_249F1F808()
{
  return MEMORY[0x24BEE78F8]();
}

uint64_t sub_249F1F814()
{
  return MEMORY[0x24BEE7900]();
}

uint64_t sub_249F1F820()
{
  return MEMORY[0x24BEE7918]();
}

uint64_t sub_249F1F82C()
{
  return MEMORY[0x24BEE7930]();
}

uint64_t sub_249F1F838()
{
  return MEMORY[0x24BEDFD78]();
}

uint64_t sub_249F1F844()
{
  return MEMORY[0x24BEDFD90]();
}

uint64_t sub_249F1F850()
{
  return MEMORY[0x24BDBD7F0]();
}

uint64_t sub_249F1F85C()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_249F1F868()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_249F1F874()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t sub_249F1F880()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_249F1F88C()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_249F1F898()
{
  return MEMORY[0x24BEE7938]();
}

uint64_t sub_249F1F8A4()
{
  return MEMORY[0x24BEE7950]();
}

uint64_t sub_249F1F8B0()
{
  return MEMORY[0x24BEE7960]();
}

uint64_t sub_249F1F8BC()
{
  return MEMORY[0x24BEDFDA8]();
}

uint64_t sub_249F1F8C8()
{
  return MEMORY[0x24BEDFDC8]();
}

uint64_t sub_249F1F8D4()
{
  return MEMORY[0x24BEDFDD0]();
}

uint64_t sub_249F1F8E0()
{
  return MEMORY[0x24BEE5920]();
}

uint64_t sub_249F1F8EC()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t sub_249F1F8F8()
{
  return MEMORY[0x24BEDFDF8]();
}

uint64_t sub_249F1F904()
{
  return MEMORY[0x24BEDFE00]();
}

uint64_t sub_249F1F910()
{
  return MEMORY[0x24BEDFE08]();
}

uint64_t sub_249F1F91C()
{
  return MEMORY[0x24BEE5B40]();
}

uint64_t sub_249F1F928()
{
  return MEMORY[0x24BEE5B58]();
}

uint64_t sub_249F1F934()
{
  return MEMORY[0x24BDD01F8]();
}

uint64_t sub_249F1F940()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_249F1F94C()
{
  return MEMORY[0x24BDD0278]();
}

uint64_t sub_249F1F958()
{
  return MEMORY[0x24BEE7970]();
}

uint64_t sub_249F1F964()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t sub_249F1F970()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_249F1F97C()
{
  return MEMORY[0x24BEE1DA8]();
}

uint64_t sub_249F1F988()
{
  return MEMORY[0x24BEE1DF0]();
}

uint64_t sub_249F1F994()
{
  return MEMORY[0x24BEE1E50]();
}

uint64_t sub_249F1F9A0()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_249F1F9AC()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_249F1F9B8()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_249F1F9C4()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_249F1F9D0()
{
  return MEMORY[0x24BDD0550]();
}

uint64_t sub_249F1F9DC()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_249F1F9E8()
{
  return MEMORY[0x24BEE5E68]();
}

uint64_t sub_249F1F9F4()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_249F1FA00()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_249F1FA0C()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_249F1FA18()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_249F1FA24()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_249F1FA30()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_249F1FA3C()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_249F1FA48()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_249F1FA54()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_249F1FA60()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_249F1FA6C()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t sub_249F1FA78()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_249F1FA84()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_249F1FA90()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_249F1FA9C()
{
  return MEMORY[0x24BEE25B8]();
}

uint64_t sub_249F1FAA8()
{
  return MEMORY[0x24BEE2648]();
}

uint64_t sub_249F1FAB4()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_249F1FAC0()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_249F1FACC()
{
  return MEMORY[0x24BEE26C0]();
}

uint64_t sub_249F1FAD8()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_249F1FAE4()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_249F1FAF0()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_249F1FAFC()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_249F1FB08()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t sub_249F1FB14()
{
  return MEMORY[0x24BEE6D68]();
}

uint64_t sub_249F1FB20()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_249F1FB2C()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_249F1FB38()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_249F1FB44()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_249F1FB50()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_249F1FB5C()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_249F1FB68()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_249F1FB74()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_249F1FB80()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_249F1FB8C()
{
  return MEMORY[0x24BEE2B80]();
}

uint64_t sub_249F1FB98()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_249F1FBA4()
{
  return MEMORY[0x24BEE2C38]();
}

uint64_t sub_249F1FBB0()
{
  return MEMORY[0x24BEE2CB8]();
}

uint64_t sub_249F1FBBC()
{
  return MEMORY[0x24BEE2CC8]();
}

uint64_t sub_249F1FBC8()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_249F1FBD4()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_249F1FBE0()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t sub_249F1FBEC()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_249F1FBF8()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t sub_249F1FC04()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_249F1FC10()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_249F1FC1C()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_249F1FC28()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_249F1FC34()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t sub_249F1FC40()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_249F1FC4C()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_249F1FC58()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t sub_249F1FC64()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_249F1FC70()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_249F1FC7C()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_249F1FC88()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_249F1FC94()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t sub_249F1FCA0()
{
  return MEMORY[0x24BEE32F0]();
}

uint64_t sub_249F1FCAC()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_249F1FCB8()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_249F1FCC4()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_249F1FCD0()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_249F1FCDC()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_249F1FCE8()
{
  return MEMORY[0x24BEE3368]();
}

uint64_t sub_249F1FCF4()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_249F1FD00()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_249F1FD0C()
{
  return MEMORY[0x24BEE3398]();
}

uint64_t sub_249F1FD18()
{
  return MEMORY[0x24BEE33B8]();
}

uint64_t sub_249F1FD24()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_249F1FD30()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_249F1FD3C()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_249F1FD48()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_249F1FD54()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_249F1FD60()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t sub_249F1FD6C()
{
  return MEMORY[0x24BEE3440]();
}

uint64_t sub_249F1FD78()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_249F1FD84()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_249F1FD90()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_249F1FD9C()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_249F1FDA8()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_249F1FDB4()
{
  return MEMORY[0x24BEE34B8]();
}

uint64_t sub_249F1FDC0()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_249F1FDCC()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_249F1FDD8()
{
  return MEMORY[0x24BEE34E8]();
}

uint64_t sub_249F1FDE4()
{
  return MEMORY[0x24BEE3508]();
}

uint64_t sub_249F1FDF0()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_249F1FDFC()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_249F1FE08()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_249F1FE14()
{
  return MEMORY[0x24BEE3938]();
}

uint64_t sub_249F1FE20()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_249F1FE2C()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_249F1FE38()
{
  return MEMORY[0x24BEE7098]();
}

uint64_t sub_249F1FE44()
{
  return MEMORY[0x24BEE3A50]();
}

uint64_t sub_249F1FE50()
{
  return MEMORY[0x24BEE3A58]();
}

uint64_t sub_249F1FE5C()
{
  return MEMORY[0x24BEE3A60]();
}

uint64_t sub_249F1FE68()
{
  return MEMORY[0x24BEE3A68]();
}

uint64_t sub_249F1FE74()
{
  return MEMORY[0x24BEE3A78]();
}

uint64_t sub_249F1FE80()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t sub_249F1FE8C()
{
  return MEMORY[0x24BEE3AF0]();
}

uint64_t sub_249F1FE98()
{
  return MEMORY[0x24BEE3AF8]();
}

uint64_t sub_249F1FEA4()
{
  return MEMORY[0x24BEE3B00]();
}

uint64_t sub_249F1FEB0()
{
  return MEMORY[0x24BEE3B10]();
}

uint64_t sub_249F1FEBC()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t sub_249F1FEC8()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t sub_249F1FED4()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_249F1FEE0()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t sub_249F1FEEC()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_249F1FEF8()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_249F1FF04()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_249F1FF10()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_249F1FF1C()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_249F1FF28()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_249F1FF34()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_249F1FF40()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_249F1FF4C()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_249F1FF58()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_249F1FF64()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_249F1FF70()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_249F1FF7C()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_249F1FF88()
{
  return MEMORY[0x24BEE4310]();
}

uint64_t sub_249F1FF94()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_249F1FFA0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_249F1FFAC()
{
  return MEMORY[0x24BEE4358]();
}

uint64_t sub_249F1FFB8()
{
  return MEMORY[0x24BEE43D0]();
}

uint64_t sub_249F1FFC4()
{
  return MEMORY[0x24BEE43D8]();
}

uint64_t sub_249F1FFD0()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_249F1FFDC()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t sub_249F1FFE8()
{
  return MEMORY[0x24BEE4600]();
}

uint64_t sub_249F1FFF4()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_249F20000()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_249F2000C()
{
  return MEMORY[0x24BEE4630]();
}

uint64_t sub_249F20018()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_249F20024()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_249F20030()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_249F2003C()
{
  return MEMORY[0x24BEE4A98]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E8](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x24BDBD918](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x24BDBD920](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x24BDBD968](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x24BDBD970](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x24BDBD978](context);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDA90](color, alpha);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x24BDBDAA8](red, green, blue, alpha);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDBB8](name);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x24BDBDF58](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x24BDBDF70](c);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x24BDBE018](c, *(_QWORD *)&quality);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE180](data);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9078](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x24BDD90C8]();
}

BOOL CGImageMetadataSetValueMatchingImageProperty(CGMutableImageMetadataRef metadata, CFStringRef dictionaryName, CFStringRef propertyName, CFTypeRef value)
{
  return MEMORY[0x24BDD9100](metadata, dictionaryName, propertyName, value);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9178](provider, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x24BDD9190](isrc);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x24BDBEE80]();
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x24BDBEFC0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFC8]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF040]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CTFontRef CTFontCreateForString(CTFontRef currentFont, CFStringRef string, CFRange range)
{
  return (CTFontRef)MEMORY[0x24BDC4798](currentFont, string, range.location, range.length);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x24BDC47C8](name, matrix, size);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x24BDC49C0](frame, context);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x24BDC49F8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x24BDC4A00](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x24BDC4A08](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  MEMORY[0x24BDC5160](sourceBuffer, destinationBuffer);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x24BDC5180](buffer, key, value, *(_QWORD *)&attachmentMode);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x24BDC51F8](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x24BDC5200](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x24BDC5210](image);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5258](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52F8](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x24BDD8B60](aSurface);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C68](buffer);
}

IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)
{
  return (IOSurfaceRef)MEMORY[0x24BDD8D28](xobj);
}

uint64_t IOSurfaceSetOwnershipIdentity()
{
  return MEMORY[0x24BDD8DA8]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x24BE74F78]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x24BE74F80]();
}

uint64_t QPQueryParserCopyDefaultOptionsForContext()
{
  return MEMORY[0x24BE7BEA0]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x24BDF9170](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x24BDBCFB0]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void cblas_saxpy(const int __N, const float __alpha, const float *__X, const int __incX, float *__Y, const int __incY)
{
  MEMORY[0x24BDB2B98](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY, __alpha);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

uid_t geteuid(void)
{
  return MEMORY[0x24BDAE5F8]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x24BDAEBB0](*(_QWORD *)&task, *(_QWORD *)&name);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

uint64_t sendAneSessionSignal()
{
  return MEMORY[0x24BDFD200]();
}

uint64_t sendAneSignal()
{
  return MEMORY[0x24BDFD208]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x24BEE4E60]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

kern_return_t task_create_identity_token(task_t task, task_id_token_t *token)
{
  return MEMORY[0x24BDB0158](*(_QWORD *)&task, token);
}

int uname(utsname *a1)
{
  return MEMORY[0x24BDB02A8](a1);
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB32C8](__A, __B, __IB, __C, __IC, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3308](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3430](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsbsbm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, const float *__D, vDSP_Stride __ID, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
  MEMORY[0x24BDB34B0](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3528](__A, __IA, __C, __IC, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3530](__B, __IB, __A, __IA, __C, __IC, __N);
}

vImage_Error vImageConvert_ARGB8888toPlanarF(const vImage_Buffer *src, const vImage_Buffer *alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB36B8](src, alpha, red, green, blue, maxFloat, minFloat, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB36F8](converter, srcs, dests, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3730](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37A0](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFToARGB8888(const vImage_Buffer *alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37B8](alpha, red, green, blue, dest, maxFloat, minFloat, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x24BDB37C8](blue, green, red, alpha, dest, maxFloat, minFloat, *(_QWORD *)&flags);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x24BDB3860](srcFormat, destFormat, backgroundColor, *(_QWORD *)&flags, error);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x24BDB38A8](src, dest, pixelSize, *(_QWORD *)&flags);
}

vImage_Error vImageFlatten_RGBA8888(const vImage_Buffer *rgbaSrc, const vImage_Buffer *rgbaDst, const Pixel_8888 rgbaBackgroundColorPtr, BOOL isImagePremultiplied, vImage_Flags flags)
{
  return MEMORY[0x24BDB38D8](rgbaSrc, rgbaDst, rgbaBackgroundColorPtr, isImagePremultiplied, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannels_ARGB8888(const vImage_Buffer *newSrc, const vImage_Buffer *origSrc, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x24BDB3940](newSrc, origSrc, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImagePremultiplyData_RGBA8888(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x24BDB3968](src, dest, *(_QWORD *)&flags);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B90](a1, a2, a3);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x24BDB0868](bytes, length);
}

uint64_t xpc_dictionary_copy_mach_send()
{
  return MEMORY[0x24BDB08B8]();
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x24BDB0918](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x24BDB0968](xdict, key);
}

uint64_t xpc_dictionary_set_mach_send()
{
  return MEMORY[0x24BDB09B8]();
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

