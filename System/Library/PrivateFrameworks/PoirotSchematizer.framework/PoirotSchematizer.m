uint64_t _s17PoirotSchematizer12AnyValueImplOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 0xB)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

ValueMetadata *type metadata accessor for TypeSchema()
{
  return &type metadata for TypeSchema;
}

uint64_t destroy for AnyValue(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 57);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return result;
      case 7:
        __swift_destroy_boxed_opaque_existential_1(result);
        return sub_24457ED14(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
      case 8:
        return swift_bridgeObjectRelease();
      case 9:
        v3 = *(_QWORD *)result;
        v4 = *(_QWORD *)(v1 + 8);
        return sub_2445747FC(v3, v4);
      case 10:
        __swift_destroy_boxed_opaque_existential_1(result);
        v3 = *(_QWORD *)(v1 + 40);
        v4 = *(_QWORD *)(v1 + 48);
        return sub_2445747FC(v3, v4);
      default:
        v2 = *(_DWORD *)result + 11;
        continue;
    }
  }
}

uint64_t _s17PoirotSchematizer12AnyValueImplOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnumValue()
{
  return &type metadata for EnumValue;
}

ValueMetadata *type metadata accessor for AnyValue()
{
  return &type metadata for AnyValue;
}

ValueMetadata *type metadata accessor for SchematizedData()
{
  return &type metadata for SchematizedData;
}

uint64_t _s17PoirotSchematizer21TypeSchemaDescriptionOwxx_0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 <= 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t sub_2445726B4(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

void *sub_2445726DC(void *a1, int64_t a2)
{
  uint64_t v2;

  return sub_2445726F8(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void *sub_2445726F8(void *result, int64_t a2, void *__src, unint64_t a4, uint64_t a5)
{
  size_t v6;

  if (!__src || !a4 || (unint64_t)__src >= a4 || !a2)
    return (void *)a5;
  v6 = a4 - (_QWORD)__src;
  if ((uint64_t)(a4 - (_QWORD)__src) >= a2)
    v6 = a2;
  if ((v6 & 0x8000000000000000) == 0)
  {
    memmove(result, __src, v6);
    return (void *)a5;
  }
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for AnyValue(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = *((unsigned __int8 *)a2 + 57);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 57) = 0;
        return a1;
      case 1:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v5 = 1;
        goto LABEL_14;
      case 2:
        *(_QWORD *)a1 = *a2;
        v5 = 2;
        goto LABEL_14;
      case 3:
        *(_QWORD *)a1 = *a2;
        v5 = 3;
        goto LABEL_14;
      case 4:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v5 = 4;
        goto LABEL_14;
      case 5:
        *(_QWORD *)a1 = *a2;
        v5 = 5;
        goto LABEL_14;
      case 6:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v5 = 6;
        goto LABEL_14;
      case 7:
        v6 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
        v7 = a2[5];
        v8 = a2[6];
        v9 = *((_BYTE *)a2 + 56);
        sub_24457F1E0(v7, v8, v9);
        *(_QWORD *)(a1 + 40) = v7;
        *(_QWORD *)(a1 + 48) = v8;
        *(_BYTE *)(a1 + 56) = v9;
        v5 = 7;
        goto LABEL_14;
      case 8:
        v16 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v16;
        *(_BYTE *)(a1 + 57) = 8;
        swift_bridgeObjectRetain();
        return a1;
      case 9:
        v11 = *a2;
        v10 = a2[1];
        sub_244574770(*a2, v10);
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v10;
        v5 = 9;
        goto LABEL_14;
      case 10:
        v12 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v12;
        (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
        v14 = a2[5];
        v13 = a2[6];
        sub_244574770(v14, v13);
        *(_QWORD *)(a1 + 40) = v14;
        *(_QWORD *)(a1 + 48) = v13;
        v5 = 10;
LABEL_14:
        *(_BYTE *)(a1 + 57) = v5;
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 11;
        continue;
    }
  }
}

void static Schematizer.searchValue(in:withFieldNumber:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(qword_2543F6F48);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2445C6170;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  __asm { BR              X10 }
}

uint64_t sub_24457296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v2;
  v7 = v4;
  v8 = BYTE2(v4);
  v9 = BYTE3(v4);
  v10 = BYTE4(v4);
  v11 = BYTE5(v4);
  sub_244572B78((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v4), v0, v1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_244572B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v8 = a2 - a1;
  v15 = a1;
  v16 = a2;
  if (!a1)
    v8 = 0;
  v18 = 0;
  v19 = 0;
  v17 = v8;
  v20 = 1;
  sub_24457333C(a4, (uint64_t)v11);
  TypeSchemaDescription.init(typeSchema:)((uint64_t)v11, (uint64_t)&v13);
  v12 = a3;
  if (!*(_QWORD *)(a3 + 16))
  {
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000011;
    *(_QWORD *)(v10 + 8) = 0x80000002445C5000;
    *(_BYTE *)(v10 + 16) = 5;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return sub_2445732C8((uint64_t)&v12);
  }
  swift_bridgeObjectRetain();
  sub_244572CCC(&v12, 0, (uint64_t)v14);
  if (v5)
    return sub_2445732C8((uint64_t)&v12);
  sub_2445732C8((uint64_t)&v12);
  if (v14[57] == 255)
  {
    result = sub_244574464((uint64_t)v14);
    *(_QWORD *)(a5 + 48) = 0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_WORD *)(a5 + 56) = -256;
  }
  else
  {
    AnyValueImpl.asPublic()();
    return sub_244574078((uint64_t)v14);
  }
  return result;
}

void sub_244572CCC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[14];
  char v14;

  if (*(_QWORD *)(*a1 + 16) <= a2)
    goto LABEL_16;
  if (a2 < 0)
  {
    __break(1u);
LABEL_16:
    sub_2445C454C();
    __break(1u);
    return;
  }
  v7 = *a1 + 24 * a2;
  v10 = *(_QWORD *)(v7 + 32);
  v9 = v7 + 32;
  v8 = v10;
  if ((*(_BYTE *)(v9 + 16) & 1) != 0)
  {
    sub_24459EFD4(v8, a2, (uint64_t)a1, *(_QWORD *)(v9 + 8), (uint64_t)v13);
    if (!v3)
    {
      if (v14)
      {
        if (v14 == 1)
        {
          LODWORD(v11) = v13[0];
          v12 = a3;
LABEL_11:
          sub_244573418(v11, a1, a2, v12);
          return;
        }
LABEL_12:
        *(_QWORD *)(a3 + 48) = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_WORD *)(a3 + 56) = -256;
        return;
      }
      sub_24458170C((uint64_t)v13, a3);
    }
  }
  else
  {
    v11 = sub_244572E08(v8);
    if (!v3)
    {
      if ((v11 & 0x100000000) == 0)
      {
        v12 = a3;
        goto LABEL_11;
      }
      goto LABEL_12;
    }
  }
}

uint64_t sub_244572E08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v1[2];
  v3 = v1[3];
  if (v3 >= v4)
  {
    v10 = 0;
    v15 = 1;
    return v10 | ((unint64_t)v15 << 32);
  }
  v6 = *v1;
  v7 = v1[1] - *v1;
  v8 = *v1 + 1;
  while (2)
  {
    if (v6)
    {
      v9 = v7;
      if (v3 >= v7)
        break;
    }
    else
    {
      if ((v3 & 0x8000000000000000) == 0)
        break;
      v9 = 0;
    }
    v10 = *(unsigned __int8 *)(v6 + v3);
    v11 = v3 + 1;
    if ((*(char *)(v6 + v3) & 0x80000000) == 0)
    {
      v1[3] = v11;
      goto LABEL_18;
    }
    if (v11 < v9)
    {
      v10 &= 0x7Fu;
      v12 = 7;
      while (1)
      {
        v11 = v3 + 2;
        v10 |= (unint64_t)(*(_BYTE *)(v8 + v3) & 0x7F) << v12;
        if ((*(_BYTE *)(v8 + v3) & 0x80) == 0)
          break;
        if (v11 < v9)
        {
          ++v3;
          v13 = v12 >= 0x39;
          v12 += 7;
          if (!v13)
            continue;
        }
        goto LABEL_62;
      }
      v1[3] = v11;
      if (v10 < 0xFFFFFFFF)
      {
LABEL_18:
        v13 = v10 < 8 || (v10 & 7) >= 6;
        if (v13)
          break;
        result = v10 >> 3;
        v15 = v10 >> 3 != a1;
        if (v10 >> 3 == a1)
          return v10 | ((unint64_t)v15 << 32);
        switch(v10 & 7)
        {
          case 0uLL:
            if (v6)
            {
              v16 = v7;
              if (v11 >= v7)
                goto LABEL_62;
            }
            else
            {
              if ((v11 & 0x8000000000000000) == 0)
                goto LABEL_62;
              v16 = 0;
            }
            v3 = v11 + 1;
            if ((*(char *)(v6 + v11) & 0x80000000) == 0)
              goto LABEL_54;
            if (v3 >= v16)
              goto LABEL_62;
            v18 = 7;
            while (1)
            {
              v3 = v11 + 2;
              if ((*(char *)(v8 + v11) & 0x80000000) == 0)
                goto LABEL_54;
              if (v3 < v16)
              {
                ++v11;
                v13 = v18 >= 0x39;
                v18 += 7;
                if (!v13)
                  continue;
              }
              goto LABEL_62;
            }
          case 1uLL:
            v3 = v11 + 8;
            if (!__OFADD__(v11, 8))
              goto LABEL_54;
            goto LABEL_68;
          case 2uLL:
            if (v6)
            {
              v17 = v7;
              if (v11 >= v7)
                goto LABEL_62;
            }
            else
            {
              if ((v11 & 0x8000000000000000) == 0)
                goto LABEL_62;
              v17 = 0;
            }
            LODWORD(v19) = *(unsigned __int8 *)(v6 + v11);
            v20 = v11 + 1;
            if ((*(char *)(v6 + v11) & 0x80000000) == 0)
              goto LABEL_52;
            if (v20 >= v17)
              goto LABEL_62;
            v19 &= 0x7Fu;
            v22 = 7;
            while (1)
            {
              v20 = v11 + 2;
              v19 |= (unint64_t)(*(_BYTE *)(v8 + v11) & 0x7F) << v22;
              if ((*(_BYTE *)(v8 + v11) & 0x80) == 0)
                break;
              if (v20 < v17)
              {
                ++v11;
                v23 = v22 > 0x38;
                v22 += 7;
                if (!v23)
                  continue;
              }
              goto LABEL_62;
            }
LABEL_52:
            v1[3] = v20;
            if ((v19 & 0x80000000) != 0)
              goto LABEL_62;
            v21 = __OFADD__(v20, v19);
            v3 = v20 + v19;
            if (v21)
            {
LABEL_70:
              __break(1u);
              return result;
            }
LABEL_54:
            v1[3] = v3;
            if (v3 < v4)
              continue;
LABEL_66:
            v10 = 0;
            break;
          case 3uLL:
            result = sub_244581A44(result);
            if (v2)
              return result;
            v3 = v1[3];
            if (v3 >= v4)
              goto LABEL_66;
            continue;
          case 4uLL:
            goto LABEL_62;
          case 5uLL:
            v3 = v11 + 4;
            if (!__OFADD__(v11, 4))
              goto LABEL_54;
            goto LABEL_69;
          default:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
            goto LABEL_70;
        }
        return v10 | ((unint64_t)v15 << 32);
      }
    }
    break;
  }
LABEL_62:
  sub_24457FE80();
  swift_allocError();
  *(_QWORD *)v24 = 1;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(_WORD *)(v24 + 104) = 512;
  return swift_willThrow();
}

uint64_t TypeSchemaDescription.init(typeSchema:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!*(_BYTE *)(result + 40))
  {
    v5 = *(_OWORD *)(result + 16);
    v13 = *(_OWORD *)result;
    v14 = v5;
    v15 = *(_QWORD *)(result + 32);
    result = sub_24457466C(&v13, a2);
    *(_BYTE *)(a2 + 40) = 0;
    return result;
  }
  if (*(_BYTE *)(result + 40) == 1)
  {
    v3 = *(_OWORD *)(result + 16);
    v13 = *(_OWORD *)result;
    v14 = v3;
    v15 = *(_QWORD *)(result + 32);
    result = sub_24457466C(&v13, a2);
    v4 = 1;
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = *(_QWORD *)(result + 8);
    v8 = *(_QWORD *)(result + 16);
    v9 = *(_QWORD *)(result + 24) | *(_QWORD *)(result + 32);
    if (v9 | *(_QWORD *)result | v8 | v7)
    {
      v10 = v9 | v8 | v7;
      if (v6 == 1 && v10 == 0)
      {
        v12 = 1;
      }
      else
      {
        if (v6 == 2 && !v10)
        {
          *(_QWORD *)a2 = 2;
          *(_OWORD *)(a2 + 8) = 0u;
          *(_OWORD *)(a2 + 24) = 0u;
          *(_BYTE *)(a2 + 40) = 2;
          return result;
        }
        if (v6 != 3 || v10)
        {
          if (v6 != 4 || v10)
          {
            if (v6 != 5 || v10)
            {
              if (v6 != 6 || v10)
              {
                if (v6 != 7 || v10)
                {
                  if (v6 != 8 || v10)
                  {
                    if (v6 != 9 || v10)
                    {
                      if (v6 != 10 || v10)
                      {
                        if (v6 != 11 || v10)
                        {
                          if (v6 != 12 || v10)
                          {
                            if (v6 != 13 || v10)
                              v12 = 14;
                            else
                              v12 = 13;
                          }
                          else
                          {
                            v12 = 12;
                          }
                        }
                        else
                        {
                          v12 = 11;
                        }
                      }
                      else
                      {
                        v12 = 10;
                      }
                    }
                    else
                    {
                      v12 = 9;
                    }
                  }
                  else
                  {
                    v12 = 8;
                  }
                }
                else
                {
                  v12 = 7;
                }
              }
              else
              {
                v12 = 6;
              }
            }
            else
            {
              v12 = 5;
            }
          }
          else
          {
            v12 = 4;
          }
        }
        else
        {
          v12 = 3;
        }
      }
      *(_QWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    v4 = 2;
  }
  *(_BYTE *)(a2 + 40) = v4;
  return result;
}

uint64_t sub_2445732C8(uint64_t a1)
{
  destroy for FieldPathAndType(a1);
  return a1;
}

uint64_t destroy for FieldPathAndType(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 48) <= 1u)
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return result;
}

uint64_t sub_24457333C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TypeSchemaDescription(a2, a1);
  return a2;
}

uint64_t _s17PoirotSchematizer21TypeSchemaDescriptionOwcp_0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

void sub_244573418(int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v8;
  uint64_t v10;
  _DWORD v11[14];
  unsigned __int8 v12;
  uint64_t v13;

  if (*(_QWORD *)(*a2 + 16) - 1 == a3)
  {
    v8 = sub_2445735B0(a1);
    sub_2445735C4((uint64_t)(a2 + 1), v8, a4);
  }
  else if (sub_2445735B0(a1) == 2)
  {
    sub_24459F430(a2, a3, (uint64_t)v11);
    if (!v4)
    {
      if (v12 == 255)
      {
        sub_244574464((uint64_t)v11);
        *(_QWORD *)(a4 + 48) = 0;
        *(_OWORD *)(a4 + 16) = 0u;
        *(_OWORD *)(a4 + 32) = 0u;
        *(_OWORD *)a4 = 0u;
        *(_WORD *)(a4 + 56) = -256;
      }
      else
      {
        sub_24458170C((uint64_t)v11, (uint64_t)&v13);
        sub_24458170C((uint64_t)&v13, a4);
      }
    }
  }
  else
  {
    sub_2445C44D4();
    sub_2445C42D0();
    v11[0] = a1;
    sub_2445C4534();
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0xE000000000000000;
    *(_BYTE *)(v10 + 16) = 5;
    swift_willThrow();
  }
}

uint64_t sub_2445735B0(char a1)
{
  uint64_t result;

  result = a1 & 7;
  if (result > 5)
    __break(1u);
  return result;
}

void sub_2445735C4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[24];
  uint64_t v104;
  uint64_t v105;
  __int128 v106[2];
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;

  sub_24457403C(a1, (uint64_t)&v107);
  if (!v111)
  {
    sub_24457466C(&v107, (uint64_t)v106);
    if (a2)
    {
LABEL_7:
      sub_24457FE80();
      swift_allocError();
      v11 = v10;
      sub_24457403C(a1, v10);
      *(_BYTE *)(v11 + 41) = a2;
      *(_BYTE *)(v11 + 105) = 1;
LABEL_8:
      swift_willThrow();
      goto LABEL_9;
    }
    v16 = *v3;
    if (*v3)
    {
      v17 = v3[1] - v16;
      v18 = v3[3];
      if (v18 >= v17)
        goto LABEL_53;
    }
    else
    {
      v18 = v3[3];
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_53;
      v17 = 0;
    }
    LODWORD(v37) = *(unsigned __int8 *)(v16 + v18);
    v38 = v18 + 1;
    if ((*(char *)(v16 + v18) & 0x80000000) == 0)
    {
      v3[3] = v38;
LABEL_41:
      v39 = (int)v37;
      sub_24457466C(v106, a3);
      *(_QWORD *)(a3 + 40) = v39;
      *(_QWORD *)(a3 + 48) = 0;
      *(_WORD *)(a3 + 56) = 1793;
      return;
    }
    if (v38 < v17)
    {
      v37 &= 0x7Fu;
      v41 = v16 + 1;
      v42 = 7;
      while (1)
      {
        v43 = v18 + 2;
        v37 |= (unint64_t)(*(_BYTE *)(v41 + v18) & 0x7F) << v42;
        if ((*(_BYTE *)(v41 + v18) & 0x80) == 0)
          break;
        if (v43 < v17)
        {
          ++v18;
          v44 = v42 >= 0x39;
          v42 += 7;
          if (!v44)
            continue;
        }
        goto LABEL_53;
      }
      v3[3] = v43;
      goto LABEL_41;
    }
LABEL_53:
    sub_24457FE80();
    swift_allocError();
    *(_QWORD *)v45 = 1;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + 24) = 0u;
    *(_OWORD *)(v45 + 40) = 0u;
    *(_OWORD *)(v45 + 56) = 0u;
    *(_OWORD *)(v45 + 72) = 0u;
    *(_OWORD *)(v45 + 88) = 0u;
    *(_WORD *)(v45 + 104) = 512;
    goto LABEL_8;
  }
  if (v111 == 1)
  {
    sub_24457466C(&v107, (uint64_t)v106);
    if (a2 == 2)
    {
      sub_244577E90((uint64_t)v106, (uint64_t)v103);
      sub_2445744A4();
      if (v4)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
LABEL_9:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
        return;
      }
      v25 = v8;
      v26 = v9;
      v27 = type metadata accessor for UnsafeSchematizedData();
      v28 = v104;
      v29 = v105;
      v30 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v103, v104);
      MEMORY[0x24BDAC7A8](v30, v30);
      v32 = &v103[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *))(v33 + 16))(v32);
      v34 = sub_244581644((uint64_t)v32, v25, v26, v27, v28, v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      *(_QWORD *)(a3 + 24) = v27;
      *(_QWORD *)(a3 + 32) = sub_24459CCF8();
      *(_QWORD *)a3 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);
      v35 = 10;
      goto LABEL_31;
    }
    goto LABEL_7;
  }
  if (!(v109 | v110 | (unint64_t)v107 | v108 | *((_QWORD *)&v107 + 1)))
  {
    if (!a2)
    {
      v19 = *v3;
      if (*v3)
      {
        v20 = v3[1] - v19;
        v21 = v3[3];
        if (v21 >= v20)
          goto LABEL_197;
      }
      else
      {
        v21 = v3[3];
        if ((v21 & 0x8000000000000000) == 0)
          goto LABEL_197;
        v20 = 0;
      }
      LODWORD(v46) = *(unsigned __int8 *)(v19 + v21);
      v47 = v21 + 1;
      if (*(char *)(v19 + v21) < 0)
      {
        if (v47 >= v20)
          goto LABEL_197;
        v46 &= 0x7Fu;
        v53 = v19 + 1;
        v54 = 7;
        while (1)
        {
          v55 = v21 + 2;
          v46 |= (unint64_t)(*(_BYTE *)(v53 + v21) & 0x7F) << v54;
          if ((*(_BYTE *)(v53 + v21) & 0x80) == 0)
            break;
          if (v55 < v20)
          {
            ++v21;
            v44 = v54 >= 0x39;
            v54 += 7;
            if (!v44)
              continue;
          }
          goto LABEL_197;
        }
        v3[3] = v55;
      }
      else
      {
        v3[3] = v47;
      }
      *(_DWORD *)a3 = v46;
      *(_BYTE *)(a3 + 57) = 0;
      return;
    }
LABEL_185:
    sub_24457FE80();
    swift_allocError();
    v96 = v95;
    sub_24457403C(a1, v95);
    *(_BYTE *)(v96 + 41) = a2;
    *(_BYTE *)(v96 + 105) = 1;
LABEL_198:
    swift_willThrow();
    return;
  }
  v12 = v109 | v110 | v108 | *((_QWORD *)&v107 + 1);
  if ((_QWORD)v107 == 1 && !v12)
  {
    if (!a2)
    {
      v13 = *v3;
      if (*v3)
      {
        v14 = v3[1] - v13;
        v15 = v3[3];
        if (v15 >= v14)
          goto LABEL_197;
      }
      else
      {
        v15 = v3[3];
        if ((v15 & 0x8000000000000000) == 0)
          goto LABEL_197;
        v14 = 0;
      }
      LODWORD(v48) = *(unsigned __int8 *)(v13 + v15);
      v49 = v15 + 1;
      if ((*(char *)(v13 + v15) & 0x80000000) == 0)
      {
        v3[3] = v49;
LABEL_63:
        *(_DWORD *)a3 = v48;
        v35 = 1;
        goto LABEL_31;
      }
      if (v49 < v14)
      {
        v48 &= 0x7Fu;
        v58 = v13 + 1;
        v59 = 7;
        while (1)
        {
          v60 = v15 + 2;
          v48 |= (unint64_t)(*(_BYTE *)(v58 + v15) & 0x7F) << v59;
          if ((*(_BYTE *)(v58 + v15) & 0x80) == 0)
            break;
          if (v60 < v14)
          {
            ++v15;
            v44 = v59 >= 0x39;
            v59 += 7;
            if (!v44)
              continue;
          }
          goto LABEL_197;
        }
        v3[3] = v60;
        goto LABEL_63;
      }
LABEL_197:
      sub_24457FE80();
      swift_allocError();
      *(_QWORD *)v102 = 1;
      *(_OWORD *)(v102 + 8) = 0u;
      *(_OWORD *)(v102 + 24) = 0u;
      *(_OWORD *)(v102 + 40) = 0u;
      *(_OWORD *)(v102 + 56) = 0u;
      *(_OWORD *)(v102 + 72) = 0u;
      *(_OWORD *)(v102 + 88) = 0u;
      *(_WORD *)(v102 + 104) = 512;
      goto LABEL_198;
    }
    goto LABEL_185;
  }
  if ((_QWORD)v107 == 2 && !v12)
  {
    if (!a2)
    {
      v22 = *v3;
      if (*v3)
      {
        v23 = v3[1] - v22;
        v24 = v3[3];
        if (v24 >= v23)
          goto LABEL_197;
      }
      else
      {
        v24 = v3[3];
        if ((v24 & 0x8000000000000000) == 0)
          goto LABEL_197;
        v23 = 0;
      }
      LODWORD(v56) = *(unsigned __int8 *)(v22 + v24);
      v57 = v24 + 1;
      if (*(char *)(v22 + v24) < 0)
      {
        if (v57 >= v23)
          goto LABEL_197;
        v56 &= 0x7Fu;
        v64 = v22 + 1;
        v65 = 7;
        while (1)
        {
          v66 = v24 + 2;
          v56 |= (unint64_t)(*(_BYTE *)(v64 + v24) & 0x7F) << v65;
          if ((*(_BYTE *)(v64 + v24) & 0x80) == 0)
            break;
          if (v66 < v23)
          {
            ++v24;
            v44 = v65 >= 0x39;
            v65 += 7;
            if (!v44)
              continue;
          }
          goto LABEL_197;
        }
        v3[3] = v66;
      }
      else
      {
        v3[3] = v57;
      }
      *(_DWORD *)a3 = -(v56 & 1) ^ (v56 >> 1);
      *(_BYTE *)(a3 + 57) = 0;
      return;
    }
    goto LABEL_185;
  }
  if ((_QWORD)v107 == 3 && !v12)
  {
    if (a2 != 5)
      goto LABEL_185;
    v36 = sub_2445B15E4();
    if (v4)
      return;
    *(_DWORD *)a3 = v36;
    v35 = 1;
    goto LABEL_31;
  }
  if ((_QWORD)v107 != 4 || v12)
  {
    if ((_QWORD)v107 == 5 && !v12)
    {
      if (!a2)
      {
        v50 = *v3;
        if (*v3)
        {
          v51 = v3[1] - v50;
          v52 = v3[3];
          if (v52 >= v51)
            goto LABEL_197;
        }
        else
        {
          v52 = v3[3];
          if ((v52 & 0x8000000000000000) == 0)
            goto LABEL_197;
          v51 = 0;
        }
        v71 = *(unsigned __int8 *)(v50 + v52);
        v72 = v52 + 1;
        if (*(char *)(v50 + v52) < 0)
        {
          if (v72 >= v51)
            goto LABEL_197;
          v71 &= 0x7Fu;
          v76 = v50 + 1;
          v77 = 7;
          while (1)
          {
            v78 = v52 + 2;
            v71 |= (unint64_t)(*(_BYTE *)(v76 + v52) & 0x7F) << v77;
            if ((*(_BYTE *)(v76 + v52) & 0x80) == 0)
              break;
            if (v78 < v51)
            {
              ++v52;
              v44 = v77 >= 0x39;
              v77 += 7;
              if (!v44)
                continue;
            }
            goto LABEL_197;
          }
          v3[3] = v78;
        }
        else
        {
          v3[3] = v72;
        }
        *(_QWORD *)a3 = v71;
        v35 = 2;
        goto LABEL_31;
      }
      goto LABEL_185;
    }
    if ((_QWORD)v107 == 6 && !v12)
    {
      if (!a2)
      {
        v61 = *v3;
        if (*v3)
        {
          v62 = v3[1] - v61;
          v63 = v3[3];
          if (v63 >= v62)
            goto LABEL_197;
        }
        else
        {
          v63 = v3[3];
          if ((v63 & 0x8000000000000000) == 0)
            goto LABEL_197;
          v62 = 0;
        }
        v74 = *(unsigned __int8 *)(v61 + v63);
        v75 = v63 + 1;
        if (*(char *)(v61 + v63) < 0)
        {
          if (v75 >= v62)
            goto LABEL_197;
          v74 &= 0x7Fu;
          v82 = v61 + 1;
          v83 = 7;
          while (1)
          {
            v84 = v63 + 2;
            v74 |= (unint64_t)(*(_BYTE *)(v82 + v63) & 0x7F) << v83;
            if ((*(_BYTE *)(v82 + v63) & 0x80) == 0)
              break;
            if (v84 < v62)
            {
              ++v63;
              v44 = v83 >= 0x39;
              v83 += 7;
              if (!v44)
                continue;
            }
            goto LABEL_197;
          }
          v3[3] = v84;
        }
        else
        {
          v3[3] = v75;
        }
        *(_QWORD *)a3 = v74;
        v35 = 3;
        goto LABEL_31;
      }
      goto LABEL_185;
    }
    if ((_QWORD)v107 == 7 && !v12)
    {
      if (!a2)
      {
        v67 = *v3;
        if (*v3)
        {
          v68 = v3[1] - v67;
          v69 = v3[3];
          if (v69 >= v68)
            goto LABEL_197;
        }
        else
        {
          v69 = v3[3];
          if ((v69 & 0x8000000000000000) == 0)
            goto LABEL_197;
          v68 = 0;
        }
        v80 = *(unsigned __int8 *)(v67 + v69);
        v81 = v69 + 1;
        if (*(char *)(v67 + v69) < 0)
        {
          if (v81 >= v68)
            goto LABEL_197;
          v80 &= 0x7Fu;
          v86 = v67 + 1;
          v87 = 7;
          while (1)
          {
            v88 = v69 + 2;
            v80 |= (unint64_t)(*(_BYTE *)(v86 + v69) & 0x7F) << v87;
            if ((*(_BYTE *)(v86 + v69) & 0x80) == 0)
              break;
            if (v88 < v68)
            {
              ++v69;
              v44 = v87 >= 0x39;
              v87 += 7;
              if (!v44)
                continue;
            }
            goto LABEL_197;
          }
          v3[3] = v88;
        }
        else
        {
          v3[3] = v81;
        }
        *(_QWORD *)a3 = -(uint64_t)(v80 & 1) ^ (v80 >> 1);
        v35 = 2;
        goto LABEL_31;
      }
      goto LABEL_185;
    }
    if ((_QWORD)v107 != 8 || v12)
    {
      if ((_QWORD)v107 != 9 || v12)
      {
        if ((_QWORD)v107 != 10 || v12)
        {
          if ((_QWORD)v107 != 11 || v12)
          {
            if ((_QWORD)v107 == 12 && !v12)
            {
              if (!a2)
              {
                v89 = *v3;
                if (*v3)
                {
                  v90 = v3[1] - v89;
                  v91 = v3[3];
                  if (v91 >= v90)
                    goto LABEL_197;
                }
                else
                {
                  v91 = v3[3];
                  if ((v91 & 0x8000000000000000) == 0)
                    goto LABEL_197;
                  v90 = 0;
                }
                v97 = *(unsigned __int8 *)(v89 + v91);
                v98 = v91 + 1;
                if (*(char *)(v89 + v91) < 0)
                {
                  if (v98 >= v90)
                    goto LABEL_197;
                  v97 &= 0x7Fu;
                  v99 = v89 + 1;
                  v100 = 7;
                  while (1)
                  {
                    v101 = v91 + 2;
                    v97 |= (unint64_t)(*(_BYTE *)(v99 + v91) & 0x7F) << v100;
                    if ((*(_BYTE *)(v99 + v91) & 0x80) == 0)
                      break;
                    if (v101 < v90)
                    {
                      ++v91;
                      v44 = v100 >= 0x39;
                      v100 += 7;
                      if (!v44)
                        continue;
                    }
                    goto LABEL_197;
                  }
                  v3[3] = v101;
                }
                else
                {
                  v3[3] = v98;
                }
                *(_BYTE *)a3 = v97 != 0;
                v35 = 6;
                goto LABEL_31;
              }
              goto LABEL_185;
            }
            if ((_QWORD)v107 != 13 || v12)
            {
              if (a2 != 2)
                goto LABEL_185;
              sub_2445744A4();
              if (v4)
                return;
              *(_QWORD *)(a3 + 24) = MEMORY[0x24BEE0F88];
              *(_QWORD *)(a3 + 32) = &protocol witness table for UnsafeRawBufferPointer;
              *(_QWORD *)a3 = v93;
              *(_QWORD *)(a3 + 8) = v94;
              v35 = 9;
            }
            else
            {
              if (a2 != 2)
                goto LABEL_185;
              sub_2445744A4();
              if (v4)
                return;
              ((void (*)(void))MEMORY[0x24BDAC7A8])();
              *(_QWORD *)a3 = sub_2445C4294();
              *(_QWORD *)(a3 + 8) = v92;
              v35 = 8;
            }
          }
          else
          {
            if (a2 != 5)
              goto LABEL_185;
            v85 = sub_2445B15E4();
            if (v4)
              return;
            *(_DWORD *)a3 = v85;
            v35 = 4;
          }
        }
        else
        {
          if (a2 != 1)
            goto LABEL_185;
          v79 = sub_244574618();
          if (v4)
            return;
          *(_QWORD *)a3 = v79;
          v35 = 5;
        }
      }
      else
      {
        if (a2 != 1)
          goto LABEL_185;
        v73 = sub_244574618();
        if (v4)
          return;
        *(_QWORD *)a3 = v73;
        v35 = 2;
      }
    }
    else
    {
      if (a2 != 1)
        goto LABEL_185;
      v70 = sub_244574618();
      if (v4)
        return;
      *(_QWORD *)a3 = v70;
      v35 = 3;
    }
LABEL_31:
    *(_BYTE *)(a3 + 57) = v35;
    return;
  }
  if (a2 != 5)
    goto LABEL_185;
  v40 = sub_2445B15E4();
  if (!v4)
  {
    *(_DWORD *)a3 = v40;
    *(_BYTE *)(a3 + 57) = 0;
  }
}

uint64_t sub_24457403C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TypeSchemaDescription(a2, a1);
  return a2;
}

uint64_t sub_244574078(uint64_t a1)
{
  destroy for AnyValueImpl(a1);
  return a1;
}

uint64_t destroy for AnyValueImpl(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 57);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return result;
      case 7:
        __swift_destroy_boxed_opaque_existential_1(result);
        result = sub_24457ED14(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
        break;
      case 8:
        result = swift_bridgeObjectRelease();
        break;
      case 9:
      case 10:
        result = __swift_destroy_boxed_opaque_existential_1(result);
        break;
      default:
        v2 = *(_DWORD *)result + 11;
        continue;
    }
    break;
  }
  return result;
}

void AnyValueImpl.asPublic()()
{
  uint64_t v0;
  _BYTE v1[64];

  sub_2445742AC(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_244574174()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)v0 = v1;
  *(_BYTE *)(v0 + 57) = 0;
}

uint64_t sub_2445742AC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyValueImpl(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for AnyValueImpl(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;

  v4 = *(unsigned __int8 *)(a2 + 57);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 57) = 0;
        return a1;
      case 1:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v5 = 1;
        goto LABEL_14;
      case 2:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v5 = 2;
        goto LABEL_14;
      case 3:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v5 = 3;
        goto LABEL_14;
      case 4:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v5 = 4;
        goto LABEL_14;
      case 5:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v5 = 5;
        goto LABEL_14;
      case 6:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v5 = 6;
        goto LABEL_14;
      case 7:
        v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        v7 = *(_QWORD *)(a2 + 40);
        v8 = *(_QWORD *)(a2 + 48);
        v9 = *(_BYTE *)(a2 + 56);
        sub_24457F1E0(v7, v8, v9);
        *(_QWORD *)(a1 + 40) = v7;
        *(_QWORD *)(a1 + 48) = v8;
        *(_BYTE *)(a1 + 56) = v9;
        v5 = 7;
        goto LABEL_14;
      case 8:
        v13 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v13;
        *(_BYTE *)(a1 + 57) = 8;
        swift_bridgeObjectRetain();
        return a1;
      case 9:
        v10 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
        v5 = 9;
        goto LABEL_14;
      case 10:
        v11 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v11;
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
        v5 = 10;
LABEL_14:
        *(_BYTE *)(a1 + 57) = v5;
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 11;
        continue;
    }
  }
}

uint64_t sub_244574464(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543F6F40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_2445744A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;

  v1 = *v0;
  if (*v0)
  {
    v2 = v0[1] - v1;
    v3 = v0[3];
    if (v3 >= v2)
      goto LABEL_17;
  }
  else
  {
    v3 = v0[3];
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_17;
    v2 = 0;
  }
  LODWORD(v4) = *(unsigned __int8 *)(v1 + v3);
  v5 = v3 + 1;
  if (*(char *)(v1 + v3) < 0)
  {
    if (v5 >= v2)
      goto LABEL_17;
    v4 &= 0x7Fu;
    v8 = 7;
    while (1)
    {
      v5 = v3 + 2;
      v4 |= (unint64_t)(*(_BYTE *)(v1 + 1 + v3) & 0x7F) << v8;
      if ((*(_BYTE *)(v1 + 1 + v3) & 0x80) == 0)
        break;
      if (v5 < v2)
      {
        ++v3;
        v9 = v8 >= 0x39;
        v8 += 7;
        if (!v9)
          continue;
      }
      goto LABEL_17;
    }
  }
  v0[3] = v5;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_17:
    sub_24457FE80();
    swift_allocError();
    v7 = 1;
    goto LABEL_18;
  }
  if (__OFSUB__(v2, v5))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v2 - v5 < v4)
  {
    sub_24457FE80();
    swift_allocError();
    v7 = 2;
LABEL_18:
    *(_QWORD *)v6 = v7;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_WORD *)(v6 + 104) = 512;
    swift_willThrow();
    return;
  }
  v10 = v5 + v4;
  if (__OFADD__(v5, v4))
    goto LABEL_23;
  if (v10 >= v5)
  {
    v0[3] = v10;
    return;
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_244574618()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t result;

  v1 = *v0;
  v2 = v0[3];
  if (*v0)
  {
    if (v0[1] - v1 < v2)
    {
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
    v3 = (uint64_t *)(v1 + v2);
    v4 = __OFADD__(v2, 8);
    v5 = v2 + 8;
    if (!v4)
    {
LABEL_4:
      result = *v3;
      v0[3] = v5;
      return result;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= 0)
  {
    v3 = 0;
    v4 = __OFADD__(v2, 8);
    v5 = v2 + 8;
    if (!v4)
      goto LABEL_4;
    goto LABEL_8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24457466C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249512E3C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void FieldManifest.type.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FieldManifest.typeName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FieldManifest.fieldNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t FieldManifest.isRepeated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

unint64_t FieldManifest.oneofIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32);
}

uint64_t FieldManifest.options.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_24457475C(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_24457475C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_244574770(a1, a2);
  return a1;
}

uint64_t sub_244574770(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t FieldManifest.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_2445747E8(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t sub_2445747E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2445747FC(a1, a2);
  return a1;
}

uint64_t sub_2445747FC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t (*FieldManifest.options.modify())()
{
  return nullsub_1;
}

_BYTE *FieldManifest.init(type:typeName:number:isRepeated:oneofIndex:options:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_BYTE *)a9 = *result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5;
  *(_DWORD *)(a9 + 36) = a6;
  *(_BYTE *)(a9 + 40) = BYTE4(a6) & 1;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  return result;
}

uint64_t sub_244574884@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[7];
  uint64_t v47;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 56))(v46, v5, v6);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v20 = 0;
    v21 = 0xF000000000000000;
  }
  else
  {
    sub_24457403C((uint64_t)v46, (uint64_t)&v40);
    if ((_BYTE)v44)
    {
      if (v44 == 1)
      {
        sub_24457466C(&v40, (uint64_t)v37);
        v8 = v38;
        v7 = v39;
        __swift_project_boxed_opaque_existential_1(v37, v38);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
        v11 = v10;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        v12 = 9;
      }
      else if (v42 | v43 | (unint64_t)v40 | v41 | *((_QWORD *)&v40 + 1))
      {
        v16 = v42 | v43 | v41 | *((_QWORD *)&v40 + 1);
        if ((_QWORD)v40 != 1 || v16)
        {
          if ((_QWORD)v40 != 2 || v16)
          {
            if ((_QWORD)v40 != 3 || v16)
            {
              if ((_QWORD)v40 != 4 || v16)
              {
                if ((_QWORD)v40 != 5 || v16)
                {
                  if ((_QWORD)v40 != 6 || v16)
                  {
                    if ((_QWORD)v40 != 7 || v16)
                    {
                      if ((_QWORD)v40 != 8 || v16)
                      {
                        if ((_QWORD)v40 != 9 || v16)
                        {
                          if ((_QWORD)v40 != 10 || v16)
                          {
                            if ((_QWORD)v40 != 11 || v16)
                            {
                              if ((_QWORD)v40 != 12 || v16)
                              {
                                v9 = 0;
                                v11 = 0;
                                if (v16)
                                  v17 = 0;
                                else
                                  v17 = (_QWORD)v40 == 13;
                                if (v17)
                                  v12 = 8;
                                else
                                  v12 = 10;
                              }
                              else
                              {
                                v9 = 0;
                                v11 = 0;
                                v12 = 7;
                              }
                            }
                            else
                            {
                              v9 = 0;
                              v11 = 0;
                              v12 = 1;
                            }
                          }
                          else
                          {
                            v9 = 0;
                            v11 = 0;
                            v12 = 0;
                          }
                        }
                        else
                        {
                          v9 = 0;
                          v11 = 0;
                          v12 = 14;
                        }
                      }
                      else
                      {
                        v9 = 0;
                        v11 = 0;
                        v12 = 5;
                      }
                    }
                    else
                    {
                      v9 = 0;
                      v11 = 0;
                      v12 = 16;
                    }
                  }
                  else
                  {
                    v9 = 0;
                    v11 = 0;
                    v12 = 3;
                  }
                }
                else
                {
                  v9 = 0;
                  v11 = 0;
                  v12 = 2;
                }
              }
              else
              {
                v9 = 0;
                v11 = 0;
                v12 = 13;
              }
            }
            else
            {
              v9 = 0;
              v11 = 0;
              v12 = 6;
            }
          }
          else
          {
            v9 = 0;
            v11 = 0;
            v12 = 15;
          }
        }
        else
        {
          v9 = 0;
          v11 = 0;
          v12 = 11;
        }
      }
      else
      {
        v9 = 0;
        v11 = 0;
        v12 = 4;
      }
    }
    else
    {
      sub_24457466C(&v40, (uint64_t)v37);
      v14 = v38;
      v13 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 8))(v14);
      v11 = v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      v12 = 12;
    }
    v18 = a1[3];
    v19 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v18);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
    v35 = v12;
    v24 = a1[3];
    v25 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v24);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25) & 1;
    v26 = a1[3];
    v27 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v26);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v27 + 32))(&v40, v26, v27);
    v47 = v11;
    v36 = v9;
    if (v42)
    {
      v28 = v44;
      v29 = v45;
      sub_244574770(v44, v45);
      sub_244575334((uint64_t)&v40);
    }
    else
    {
      sub_2445752F4((uint64_t)&v40);
      v28 = 0;
      v29 = 0xF000000000000000;
    }
    sub_24457475C(v28, v29);
    sub_2445747E8(0, 0xF000000000000000);
    v31 = a1[3];
    v30 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v31);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 40))(v31, v30);
    sub_2445752C0((uint64_t)v46);
    v33 = v47;
    swift_bridgeObjectRetain();
    sub_24457475C(v28, v29);
    sub_2445747E8(v28, v29);
    *(_BYTE *)a2 = v35;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = v33;
    *(_QWORD *)(a2 + 24) = v23;
    *(_BYTE *)(a2 + 32) = v34;
    *(_DWORD *)(a2 + 36) = v32;
    *(_BYTE *)(a2 + 40) = BYTE4(v32) & 1;
    *(_QWORD *)(a2 + 48) = v28;
    *(_QWORD *)(a2 + 56) = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    v20 = v28;
    v21 = v29;
  }
  return sub_2445747E8(v20, v21);
}

BOOL _s17PoirotSchematizer13FieldManifestV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _BOOL8 result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  if (*a1 != *a2)
    return 0;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v5 = a1[32];
  v6 = *((_DWORD *)a1 + 9);
  v7 = a1[40];
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 7);
  v10 = *((_QWORD *)a2 + 2);
  v11 = *((_QWORD *)a2 + 3);
  v12 = a2[32];
  v13 = *((_DWORD *)a2 + 9);
  v14 = a2[40];
  v15 = *((_QWORD *)a2 + 6);
  v16 = *((_QWORD *)a2 + 7);
  if (v3)
  {
    if (!v10)
      return 0;
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1) || v3 != v10)
    {
      v26 = *((_QWORD *)a2 + 6);
      v27 = *((_QWORD *)a1 + 6);
      v17 = sub_2445C45B8();
      result = 0;
      if ((v17 & 1) == 0)
        return result;
      if (v4 != v11)
        return result;
      v15 = v26;
      v8 = v27;
      if (((v5 ^ v12) & 1) != 0)
        return result;
      goto LABEL_13;
    }
  }
  else if (v10)
  {
    return 0;
  }
  result = 0;
  if (v4 == v11 && ((v5 ^ v12) & 1) == 0)
  {
LABEL_13:
    if ((v7 & 1) != 0)
    {
      if (!v14)
        return 0;
    }
    else
    {
      if (v6 == v13)
        v19 = v14;
      else
        v19 = 1;
      if ((v19 & 1) != 0)
        return 0;
    }
    if (v9 >> 60 == 15)
    {
      if (v16 >> 60 == 15)
        return 1;
      goto LABEL_24;
    }
    if (v16 >> 60 == 15)
    {
LABEL_24:
      v20 = v8;
      v21 = v15;
      sub_24457475C(v8, v9);
      sub_24457475C(v21, v16);
      sub_2445747E8(v20, v9);
      sub_2445747E8(v21, v16);
      return 0;
    }
    v22 = v8;
    v23 = v15;
    sub_24457475C(v8, v9);
    sub_24457475C(v23, v16);
    sub_24458C824(v22, v9);
    v25 = v24;
    sub_2445747E8(v23, v16);
    sub_2445747E8(v22, v9);
    return (v25 & 1) != 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FieldManifest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for FieldManifest(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >> 60 != 15)
    return sub_2445747FC(*(_QWORD *)(a1 + 48), v3);
  return result;
}

uint64_t initializeWithCopy for FieldManifest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = (_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *v4;
  }
  else
  {
    v6 = *(_QWORD *)v4;
    sub_244574770(v6, v5);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for FieldManifest(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v4;
  v5 = (uint64_t *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *v5;
      sub_244574770(*v5, v6);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = v6;
      sub_2445747FC(v9, v10);
      return a1;
    }
    sub_2445750B4(a1 + 48);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v5;
    return a1;
  }
  v7 = *v5;
  sub_244574770(*v5, v6);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  return a1;
}

uint64_t sub_2445750B4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FieldManifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = (_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 56);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = *v5;
      *(_QWORD *)(a1 + 56) = v7;
      sub_2445747FC(v8, v6);
      return a1;
    }
    sub_2445750B4(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for FieldManifest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FieldManifest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FieldManifest()
{
  return &type metadata for FieldManifest;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_2445752C0(uint64_t a1)
{
  destroy for TypeSchemaDescription();
  return a1;
}

uint64_t sub_2445752F4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573722A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_244575334(uint64_t a1)
{
  destroy for SchematizedData(a1);
  return a1;
}

uint64_t MessageManifest.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MessageManifest.fields.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*MessageManifest.fields.modify())()
{
  return nullsub_1;
}

uint64_t MessageManifest.oneofs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MessageManifest.oneofs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MessageManifest.oneofs.modify())()
{
  return nullsub_1;
}

uint64_t MessageManifest.options.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_24457475C(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t MessageManifest.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_2445747E8(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MessageManifest.options.modify())()
{
  return nullsub_1;
}

unint64_t MessageManifest.init(fields:oneofs:options:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v9;

  if (!result)
    result = sub_244575734(MEMORY[0x24BEE4AF8]);
  v9 = MEMORY[0x24BEE4AF8];
  if (a2)
    v9 = a2;
  *a5 = result;
  a5[1] = v9;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t sub_2445754B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722F0);
  v2 = sub_2445C4570();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_244577E10(v6, (uint64_t)&v15, &qword_2573722F8);
    v7 = v15;
    v8 = v16;
    result = sub_2445A14D8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_244577E54((uint64_t)&v17, v3[7] + 72 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 88;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2445755F4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722D0);
  v2 = sub_2445C4570();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_244577E10(v6, (uint64_t)&v15, &qword_2573722D8);
    v7 = v15;
    v8 = v16;
    result = sub_2445A14D8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_244577DD4((uint64_t)&v17, v3[7] + 56 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_244575734(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372338);
  v2 = sub_2445C4570();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v21 = v2 + 64;
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v22 = v4;
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v8 = *((_BYTE *)v5 - 8);
    v10 = *v5;
    v9 = v5[1];
    v11 = v5[2];
    v24 = *((_DWORD *)v5 + 7);
    v25 = *((_BYTE *)v5 + 24);
    v23 = *((_BYTE *)v5 + 32);
    v12 = v5[5];
    v13 = v5[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v12, v13);
    result = sub_2445A14D8(v6, v7);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v3[6] + 16 * result);
    *v16 = v6;
    v16[1] = v7;
    v17 = v3[7] + (result << 6);
    *(_BYTE *)v17 = v8;
    *(_QWORD *)(v17 + 8) = v10;
    *(_QWORD *)(v17 + 16) = v9;
    *(_QWORD *)(v17 + 24) = v11;
    *(_BYTE *)(v17 + 32) = v25;
    *(_DWORD *)(v17 + 36) = v24;
    *(_BYTE *)(v17 + 40) = v23;
    *(_QWORD *)(v17 + 48) = v12;
    *(_QWORD *)(v17 + 56) = v13;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v3[2] = v20;
    v5 += 10;
    v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2445758C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372330);
  v2 = (_QWORD *)sub_2445C4570();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_2445A14D8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2445759D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372328);
  v2 = (_QWORD *)sub_2445C4570();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v9 = v4[3];
    v10 = v4[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v8, v9);
    swift_bridgeObjectRetain();
    result = sub_2445A14D8(v5, v6);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v5;
    v13[1] = v6;
    v14 = (uint64_t *)(v2[7] + 32 * result);
    *v14 = v7;
    v14[1] = v8;
    v14[2] = v9;
    v14[3] = v10;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v2[2] = v17;
    v4 += 6;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_244575B20(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372320);
  v2 = (_QWORD *)sub_2445C4570();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = a1 + 40;
  while (1)
  {
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)v4;
    v16 = *(_OWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 24);
    v8 = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v7, v8);
    result = sub_2445A14D8(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = v2[7] + 32 * result;
    *(_OWORD *)v12 = v16;
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 48;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_244575C70(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372308);
  v2 = (_QWORD *)sub_2445C4570();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_2445A14D8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_244575D80(uint64_t a1)
{
  return sub_244575DA8(a1, &qword_257372318, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577F1C);
}

unint64_t sub_244575D94(uint64_t a1)
{
  return sub_244575DA8(a1, &qword_257372310, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577ED4);
}

unint64_t sub_244575DA8(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = sub_2445C4570();
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  v22 = v4 + 64;
  swift_retain();
  v7 = (unsigned __int8 *)(a1 + 80);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 6);
    v9 = *((_QWORD *)v7 - 5);
    v10 = *((_QWORD *)v7 - 4);
    v11 = *((_QWORD *)v7 - 3);
    v12 = *((_QWORD *)v7 - 2);
    v13 = *((_QWORD *)v7 - 1);
    v14 = *v7;
    swift_bridgeObjectRetain();
    a3(v10, v11, v12, v13, v14);
    result = sub_2445A14D8(v8, v9);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v5[6] + 16 * result);
    *v17 = v8;
    v17[1] = v9;
    v18 = v5[7] + 40 * result;
    *(_QWORD *)v18 = v10;
    *(_QWORD *)(v18 + 8) = v11;
    *(_QWORD *)(v18 + 16) = v12;
    *(_QWORD *)(v18 + 24) = v13;
    *(_BYTE *)(v18 + 32) = v14;
    v19 = v5[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v5[2] = v21;
    v7 += 56;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_244575F04@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19[2];
  int v20;

  v5 = v3;
  v7 = *a1;
  if (*a1)
  {
    v9 = a1[1];
    v10 = a1[2];
    v11 = a1[3];
    v12 = *v5;
    swift_bridgeObjectRetain_n();
    sub_244577CD0(v7, v9, v10, v11);
    swift_bridgeObjectRetain();
    v20 = a2;
    v13 = sub_2445768B8(v7, v12, a2);
    swift_bridgeObjectRelease();
    if (v4)
      return sub_244577D18(v7, v9, v10, v11);
    swift_bridgeObjectRelease();
    *v5 = v13;
    sub_24457475C(v10, v11);
    sub_244576068(v10, v11, v20, v19);
    sub_244577D18(v7, v9, v10, v11);
    sub_2445747E8(v10, v11);
    sub_2445747E8(v19[0], v19[1]);
  }
  v15 = *v5;
  v16 = v5[1];
  v17 = v5[2];
  v18 = v5[3];
  *a3 = v15;
  a3[1] = v16;
  a3[2] = v17;
  a3[3] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_24457475C(v17, v18);
}

uint64_t sub_244576068@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;

  v7 = *v4;
  v6 = v4[1];
  if (a2 >> 60 != 15)
  {
    v8 = a2;
    if ((a2 & 0xF000000000000000) != 0xB000000000000000)
    {
      v9 = a1;
      if (v6 >> 60 == 15)
      {
        *v4 = a1;
        v4[1] = a2;
        *a4 = a1;
        a4[1] = a2;
        sub_244577D60(a1, a2);
        return sub_244574770(v9, v8);
      }
      if (a3)
      {
        if (a3 == 1)
        {
          sub_244577D60(a1, a2);
          sub_2445747E8(v7, v6);
          *v4 = v9;
          v4[1] = v8;
LABEL_12:
          *a4 = v9;
          a4[1] = v8;
          v11 = v9;
          v12 = v8;
          return sub_24457475C(v11, v12);
        }
        sub_244577D60(a1, a2);
        sub_24457475C(v7, v6);
        sub_24458C824(v7, v6);
        v14 = v13;
        sub_2445747E8(v7, v6);
        if ((v14 & 1) == 0)
        {
          sub_2445C44D4();
          swift_bridgeObjectRelease();
          sub_244577D74();
          swift_allocError();
          *v15 = 0xD00000000000001FLL;
          v15[1] = 0x80000002445C4CB0;
          swift_willThrow();
          return sub_244577DB8(v9, v8);
        }
        sub_244577DB8(v9, v8);
      }
      v9 = v7;
      v8 = v6;
      goto LABEL_12;
    }
  }
  *a4 = v7;
  a4[1] = v6;
  v11 = v7;
  v12 = v6;
  return sub_24457475C(v11, v12);
}

uint64_t sub_24457621C@<X0>(_QWORD *a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61[5];
  unint64_t v62;

  v4 = v3;
  v6 = a1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v9 + 16))(&v57, v8, v9);
  if (*((_QWORD *)&v58 + 1))
  {
    v10 = *((_QWORD *)&v59 + 1);
    v11 = v60;
    sub_244574770(*((uint64_t *)&v59 + 1), v60);
    sub_244575334((uint64_t)&v57);
  }
  else
  {
    sub_2445752F4((uint64_t)&v57);
    v10 = 0;
    v11 = 0xF000000000000000;
  }
  sub_24457475C(v10, v11);
  sub_2445747E8(0, 0xF000000000000000);
  if ((a2 & 1) != 0)
  {
    v53 = sub_244575734(MEMORY[0x24BEE4AF8]);
  }
  else
  {
    v12 = v6[3];
    v13 = v6[4];
    __swift_project_boxed_opaque_existential_1(v6, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
    v53 = sub_244575734(MEMORY[0x24BEE4AF8]);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v45 = a3;
      v47 = v11;
      v49 = v10;
      swift_bridgeObjectRetain();
      v16 = (uint64_t *)(v14 + 40);
      v51 = (uint64_t)v6;
      while (1)
      {
        v17 = *(v16 - 1);
        v18 = *v16;
        v19 = v6[3];
        v20 = v6[4];
        __swift_project_boxed_opaque_existential_1(v6, v19);
        v21 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
        swift_bridgeObjectRetain_n();
        v21(v54, v17, v18, v19, v20);
        if (v4)
          break;
        sub_244574884(v54, (uint64_t)&v57);
        v4 = 0;
        v16 += 2;
        v61[0] = v57;
        v61[1] = v58;
        v61[2] = v59;
        v61[3] = v60;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v54[0] = v53;
        sub_244593BA8(v61, v17, v18, isUniquelyReferenced_nonNull_native);
        v53 = v54[0];
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        --v15;
        v6 = (_QWORD *)v51;
        if (!v15)
        {
          swift_bridgeObjectRelease();
          v11 = v47;
          v10 = v49;
          a3 = v45;
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v47;
      v10 = v49;
      sub_2445747E8(v49, v47);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v51);
      goto LABEL_26;
    }
LABEL_11:
    swift_bridgeObjectRelease();
  }
  v23 = v6[3];
  v24 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v23);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 48))(v23, v24);
  if (v4)
  {
    sub_2445747E8(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease();
LABEL_26:
    v42 = v10;
    v43 = v11;
    return sub_2445747E8(v42, v43);
  }
  v26 = v25;
  v46 = a3;
  v48 = v11;
  v50 = v10;
  v27 = *(_QWORD *)(v25 + 16);
  if (v27)
  {
    v52 = v6;
    v62 = MEMORY[0x24BEE4AF8];
    sub_2445A177C(0, v27, 0);
    v28 = v26 + 32;
    do
    {
      sub_244577E90(v28, (uint64_t)v54);
      v30 = v55;
      v29 = v56;
      __swift_project_boxed_opaque_existential_1(v54, v55);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v29 + 8) + 8))(v30);
      v33 = v32;
      v34 = v55;
      v35 = v56;
      __swift_project_boxed_opaque_existential_1(v54, v55);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v35 + 16))(&v57, v34, v35);
      if (*((_QWORD *)&v58 + 1))
      {
        v37 = *((_QWORD *)&v59 + 1);
        v36 = v60;
        sub_244574770(*((uint64_t *)&v59 + 1), v60);
        sub_244575334((uint64_t)&v57);
      }
      else
      {
        sub_2445752F4((uint64_t)&v57);
        v37 = 0;
        v36 = 0xF000000000000000;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      v38 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2445A177C(0, *(_QWORD *)(v38 + 16) + 1, 1);
        v38 = v62;
      }
      v40 = *(_QWORD *)(v38 + 16);
      v39 = *(_QWORD *)(v38 + 24);
      if (v40 >= v39 >> 1)
      {
        sub_2445A177C(v39 > 1, v40 + 1, 1);
        v38 = v62;
      }
      *(_QWORD *)(v38 + 16) = v40 + 1;
      v41 = (_QWORD *)(v38 + 32 * v40);
      v41[4] = v31;
      v41[5] = v33;
      v41[6] = v37;
      v41[7] = v36;
      v28 += 40;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    v6 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    v38 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24457475C(v50, v48);
  sub_2445747E8(v50, v48);
  *v46 = v53;
  v46[1] = v38;
  v46[2] = v50;
  v46[3] = v48;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = v50;
  v43 = v48;
  return sub_2445747E8(v42, v43);
}

uint64_t MessageManifest.nextAvailableField.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  v19 = *v0 + 64;
  v3 = 1;
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & v2;
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = (_QWORD *)(*(_QWORD *)(v1 + 56) + (i << 6));
    v16 = v15[3];
    v17 = v15[6];
    v18 = v15[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_2445747E8(v17, v18);
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v16 + 1 > v3)
      v3 = v16 + 1;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_30;
    if (v12 >= v7)
      goto LABEL_28;
    v13 = *(_QWORD *)(v19 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_28;
      v13 = *(_QWORD *)(v19 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_28;
        v13 = *(_QWORD *)(v19 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v7)
            goto LABEL_28;
          v13 = *(_QWORD *)(v19 + 8 * v9);
          if (!v13)
          {
            v9 = v12 + 4;
            if (v12 + 4 >= v7)
              goto LABEL_28;
            v13 = *(_QWORD *)(v19 + 8 * v9);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_22:
    v6 = (v13 - 1) & v13;
  }
  v14 = v12 + 5;
  if (v14 >= v7)
  {
LABEL_28:
    swift_release();
    swift_bridgeObjectRelease();
    return v3;
  }
  v13 = *(_QWORD *)(v19 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_28;
    v13 = *(_QWORD *)(v19 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2445768B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = a2;
  sub_244576944(a1, (uint64_t)sub_244576F64, 0, isUniquelyReferenced_nonNull_native, &v10, a3);
  v8 = v10;
  swift_bridgeObjectRelease();
  if (v3)
    swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_244576944(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, char a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  char v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD v64[4];
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;

  v98 = a5;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v91 = a1;
  v92 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v93 = v8;
  v94 = 0;
  v95 = v11 & v9;
  v96 = a2;
  v97 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_244576FDC(&v81);
  v12 = *((_QWORD *)&v81 + 1);
  if (!*((_QWORD *)&v81 + 1))
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_244577DCC();
    return swift_release();
  }
  while (1)
  {
    v21 = v81;
    v79 = v81;
    v80 = v12;
    v22 = v82;
    v23 = v83;
    v14 = v85;
    v57 = v86;
    v58 = v87;
    v60 = v88;
    v61 = v84;
    v62 = v89;
    v63 = v90;
    v24 = (_QWORD *)*v98;
    v26 = sub_2445A14D8(v81, v12);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      sub_2445C4648();
      __break(1u);
      goto LABEL_28;
    }
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((a4 & 1) == 0)
        sub_24459277C();
    }
    else
    {
      sub_2445907D8(v29, a4 & 1);
      v31 = sub_2445A14D8(v21, v12);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_27;
      v26 = v31;
    }
    v33 = (_QWORD *)*v98;
    if ((v30 & 1) != 0)
      break;
    v33[(v26 >> 6) + 8] |= 1 << v26;
    v43 = (uint64_t *)(v33[6] + 16 * v26);
    *v43 = v21;
    v43[1] = v12;
    v44 = v33[7] + (v26 << 6);
    *(_BYTE *)v44 = v22;
    *(_QWORD *)(v44 + 8) = v23;
    *(_QWORD *)(v44 + 16) = v61;
    *(_QWORD *)(v44 + 24) = v14;
    *(_BYTE *)(v44 + 32) = v57;
    *(_DWORD *)(v44 + 36) = v58;
    *(_BYTE *)(v44 + 40) = v60;
    *(_QWORD *)(v44 + 48) = v62;
    *(_QWORD *)(v44 + 56) = v63;
    v45 = v33[2];
    v46 = __OFADD__(v45, 1);
    v47 = v45 + 1;
    if (v46)
      goto LABEL_26;
    v33[2] = v47;
LABEL_8:
    sub_244576FDC(&v81);
    v12 = *((_QWORD *)&v81 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v81 + 1))
      goto LABEL_5;
  }
  v34 = v33[7] + (v26 << 6);
  v35 = *(_QWORD *)(v34 + 8);
  v36 = *(_QWORD *)(v34 + 16);
  v37 = *(_QWORD *)(v34 + 24);
  v38 = *(_BYTE *)(v34 + 32);
  v39 = *(_DWORD *)(v34 + 36);
  v40 = *(_BYTE *)(v34 + 40);
  v42 = *(_QWORD *)(v34 + 48);
  v41 = *(_QWORD *)(v34 + 56);
  if (!a6)
  {
    v56 = *(_BYTE *)v34;
    v55 = *(_QWORD *)(v34 + 8);
    v14 = *(_QWORD *)(v34 + 24);
    v15 = *(_BYTE *)(v34 + 32);
    v16 = *(_BYTE *)(v34 + 40);
    v17 = *(_QWORD *)(v34 + 56);
    swift_bridgeObjectRetain();
    v59 = v42;
    sub_24457475C(v42, v17);
    swift_bridgeObjectRelease();
    sub_2445747E8(v62, v63);
    swift_bridgeObjectRelease();
LABEL_7:
    v18 = v33[7] + (v26 << 6);
    v19 = *(_QWORD *)(v18 + 48);
    v20 = *(_QWORD *)(v18 + 56);
    swift_bridgeObjectRelease();
    sub_2445747E8(v19, v20);
    *(_BYTE *)v18 = v56;
    *(_QWORD *)(v18 + 8) = v55;
    *(_QWORD *)(v18 + 16) = v36;
    *(_QWORD *)(v18 + 24) = v14;
    *(_BYTE *)(v18 + 32) = v15;
    *(_DWORD *)(v18 + 36) = v39;
    *(_BYTE *)(v18 + 40) = v16;
    *(_QWORD *)(v18 + 48) = v59;
    *(_QWORD *)(v18 + 56) = v17;
    goto LABEL_8;
  }
  if (a6 == 1)
  {
    swift_bridgeObjectRelease();
    v56 = v22;
    v55 = v23;
    v36 = v61;
    v15 = v57;
    v39 = v58;
    v16 = v60;
    v59 = v62;
    v17 = v63;
    goto LABEL_7;
  }
  v56 = *(_BYTE *)v34;
  LOBYTE(v70) = *(_BYTE *)v34;
  v55 = v35;
  v71 = v35;
  v72 = v36;
  v53 = v37;
  v73 = v37;
  v52 = v39;
  v74 = v38;
  v75 = v39;
  v51 = v40;
  v76 = v40;
  v77 = v42;
  v78 = v41;
  LOBYTE(v64[0]) = v22;
  v64[1] = v23;
  v64[2] = v61;
  v64[3] = v14;
  v65 = v57;
  v66 = v58;
  v67 = v60;
  v68 = v62;
  v69 = v63;
  v48 = v41;
  swift_bridgeObjectRetain();
  sub_24457475C(v42, v48);
  swift_bridgeObjectRetain();
  sub_24457475C(v42, v48);
  swift_bridgeObjectRetain();
  sub_24457475C(v62, v63);
  if (_s17PoirotSchematizer13FieldManifestV2eeoiySbAC_ACtFZ_0((unsigned __int8 *)&v70, (unsigned __int8 *)v64))
  {
    swift_bridgeObjectRelease();
    sub_2445747E8(v62, v63);
    swift_bridgeObjectRelease();
    v59 = v42;
    sub_2445747E8(v42, v48);
    v17 = v48;
    swift_bridgeObjectRelease();
    sub_2445747E8(v62, v63);
    swift_bridgeObjectRelease();
    v14 = v53;
    v39 = v52;
    v15 = v38;
    v16 = v51;
    goto LABEL_7;
  }
  v12 = 0xE000000000000000;
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  sub_244577D74();
  v49 = swift_allocError();
  *v50 = 0xD00000000000001ELL;
  v50[1] = 0x80000002445C4CD0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_2445747E8(v62, v63);
  swift_bridgeObjectRelease();
  sub_2445747E8(v42, v48);
  swift_bridgeObjectRelease();
  sub_2445747E8(v42, v48);
  v64[0] = v49;
  MEMORY[0x249512DF4](v49);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_2445747E8(v62, v63);
    swift_bridgeObjectRelease();
    sub_244577DCC();
    swift_release();
    return MEMORY[0x249512DE8](v64[0]);
  }
LABEL_28:
  v70 = 0;
  v71 = v12;
  sub_2445C44D4();
  sub_2445C42D0();
  sub_2445C4534();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_244576F64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = *((_BYTE *)a1 + 48);
  v6 = *((_DWORD *)a1 + 13);
  v7 = *((_BYTE *)a1 + 56);
  v8 = a1[8];
  v9 = a1[9];
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_QWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
  *(_BYTE *)(a2 + 48) = v5;
  *(_DWORD *)(a2 + 52) = v6;
  *(_BYTE *)(a2 + 56) = v7;
  *(_QWORD *)(a2 + 64) = v8;
  *(_QWORD *)(a2 + 72) = v9;
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_24457475C(v8, v9);
}

uint64_t sub_244576FDC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(_QWORD *);
  __int128 v20;
  uint64_t result;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  _QWORD v28[2];
  char v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  int v33;
  char v34;
  uint64_t v35;
  unint64_t v36;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(v3 + 56) + (v8 << 6);
    LOBYTE(v9) = *(_BYTE *)v12;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 32);
    v15 = *(_DWORD *)(v12 + 36);
    v16 = *(_BYTE *)(v12 + 40);
    v17 = *(_QWORD *)(v12 + 48);
    v18 = *(_QWORD *)(v12 + 56);
    v19 = (void (*)(_QWORD *))v1[5];
    v28[0] = v10;
    v28[1] = v11;
    v29 = (char)v9;
    v30 = v13;
    v20 = *(_OWORD *)(v12 + 16);
    v1[3] = v6;
    v1[4] = v7;
    v31 = v20;
    v32 = v14;
    v33 = v15;
    v34 = v16;
    v35 = v17;
    v36 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    v19(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_2445747E8(v17, v18);
  }
  v22 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v23 = (unint64_t)(v1[2] + 64) >> 6;
    if (v22 < v23)
    {
      v24 = v1[1];
      v25 = *(_QWORD *)(v24 + 8 * v22);
      if (v25)
      {
LABEL_7:
        v7 = (v25 - 1) & v25;
        v8 = __clz(__rbit64(v25)) + (v22 << 6);
        v6 = v22;
        goto LABEL_3;
      }
      v26 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v23)
      {
        v25 = *(_QWORD *)(v24 + 8 * v26);
        if (v25)
        {
LABEL_10:
          v22 = v26;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v23)
        {
          v25 = *(_QWORD *)(v24 + 8 * (v5 + 3));
          if (v25)
          {
            v22 = v5 + 3;
            goto LABEL_7;
          }
          v26 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v23)
          {
            v25 = *(_QWORD *)(v24 + 8 * v26);
            if (v25)
              goto LABEL_10;
            v22 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v23)
            {
              v25 = *(_QWORD *)(v24 + 8 * v22);
              if (v25)
                goto LABEL_7;
              v6 = v23 - 1;
              v27 = v5 + 6;
              while (v23 != v27)
              {
                v25 = *(_QWORD *)(v24 + 8 * v27++);
                if (v25)
                {
                  v22 = v27 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
  }
  return result;
}

uint64_t sub_2445771E4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *);
  uint64_t result;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  _QWORD v25[6];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    v17 = (void (*)(_QWORD *))v1[5];
    v25[0] = v10;
    v25[1] = v11;
    v25[2] = v13;
    v25[3] = v14;
    v25[4] = v15;
    v25[5] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v14, v15);
    swift_bridgeObjectRetain();
    v17(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v14, v15);
    return swift_bridgeObjectRelease();
  }
  v19 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      v21 = v1[1];
      v22 = *(_QWORD *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        v7 = (v22 - 1) & v22;
        v8 = __clz(__rbit64(v22)) + (v19 << 6);
        v6 = v19;
        goto LABEL_3;
      }
      v23 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          v19 = v23;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * (v5 + 3));
          if (v22)
          {
            v19 = v5 + 3;
            goto LABEL_7;
          }
          v23 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v20)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23);
            if (v22)
              goto LABEL_10;
            v19 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v20)
            {
              v22 = *(_QWORD *)(v21 + 8 * v19);
              if (v22)
                goto LABEL_7;
              v6 = v20 - 1;
              v24 = v5 + 6;
              while (v20 != v24)
              {
                v22 = *(_QWORD *)(v21 + 8 * v24++);
                if (v22)
                {
                  v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
  }
  return result;
}

uint64_t sub_2445773C8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(_QWORD *);
  uint64_t result;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  _QWORD v25[6];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    v17 = (void (*)(_QWORD *))v1[5];
    v25[0] = v10;
    v25[1] = v11;
    v25[2] = v13;
    v25[3] = v14;
    v25[4] = v15;
    v25[5] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v15, v16);
    v17(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_2445747E8(v15, v16);
  }
  v19 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      v21 = v1[1];
      v22 = *(_QWORD *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        v7 = (v22 - 1) & v22;
        v8 = __clz(__rbit64(v22)) + (v19 << 6);
        v6 = v19;
        goto LABEL_3;
      }
      v23 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          v19 = v23;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * (v5 + 3));
          if (v22)
          {
            v19 = v5 + 3;
            goto LABEL_7;
          }
          v23 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v20)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23);
            if (v22)
              goto LABEL_10;
            v19 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v20)
            {
              v22 = *(_QWORD *)(v21 + 8 * v19);
              if (v22)
                goto LABEL_7;
              v6 = v20 - 1;
              v24 = v5 + 6;
              while (v20 != v24)
              {
                v22 = *(_QWORD *)(v21 + 8 * v24++);
                if (v22)
                {
                  v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
  }
  return result;
}

unint64_t sub_2445775AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722E0);
    v3 = (_QWORD *)sub_2445C4570();
    for (i = a1 + 32; ; i += 48)
    {
      sub_244577E10(i, (uint64_t)&v11, &qword_2573722E8);
      v5 = v11;
      result = sub_2445A153C(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = sub_24457466C(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_2445776B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722B0);
    v3 = (_QWORD *)sub_2445C4570();
    for (i = a1 + 32; ; i += 64)
    {
      sub_244577E10(i, (uint64_t)&v15, &qword_2573722B8);
      v5 = v15;
      result = sub_2445A153C(v15);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v8 = v3[7] + 56 * result;
      v9 = v16;
      v10 = v17;
      v11 = v18;
      *(_QWORD *)(v8 + 48) = v19;
      *(_OWORD *)(v8 + 16) = v10;
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)v8 = v9;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_2445777D4(_QWORD *a1)
{
  return sub_2445777EC(a1, (uint64_t (*)(uint64_t))sub_2445A153C);
}

unint64_t sub_2445777E0(_QWORD *a1)
{
  return sub_2445777EC(a1, (uint64_t (*)(uint64_t))sub_2445A3724);
}

unint64_t sub_2445777EC(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  unint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372300);
  v5 = (_QWORD *)sub_2445C4570();
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  result = a2(v7);
  if ((v10 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x24BEE4B00];
  }
  v11 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v5[6] + 8 * result) = v7;
    v12 = (uint64_t *)(v5[7] + 16 * result);
    *v12 = v6;
    v12[1] = v8;
    v13 = v5[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      break;
    v5[2] = v15;
    sub_244574770(v6, v8);
    if (!--v2)
      return (unint64_t)v5;
    v7 = *(v11 - 2);
    v6 = *(v11 - 1);
    v8 = *v11;
    result = a2(v7);
    v11 += 3;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

BOOL _s17PoirotSchematizer15MessageManifestV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  if ((sub_24458694C(*a1, *a2) & 1) == 0 || (sub_2445894B8(v2, v5) & 1) == 0)
    return 0;
  if (v3 >> 60 == 15)
  {
    if (v6 >> 60 == 15)
      return 1;
    goto LABEL_7;
  }
  if (v6 >> 60 == 15)
  {
LABEL_7:
    sub_24457475C(v4, v3);
    sub_24457475C(v7, v6);
    sub_2445747E8(v4, v3);
    sub_2445747E8(v7, v6);
    return 0;
  }
  sub_24457475C(v4, v3);
  sub_24457475C(v7, v6);
  sub_24458C824(v4, v3);
  v9 = v8;
  sub_2445747E8(v7, v6);
  sub_2445747E8(v4, v3);
  return (v9 & 1) != 0;
}

uint64_t destroy for MessageManifest(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >> 60 != 15)
    return sub_2445747FC(*(_QWORD *)(a1 + 16), v3);
  return result;
}

uint64_t initializeWithCopy for MessageManifest(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_244574770(*v4, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
  }
  return a1;
}

_QWORD *assignWithCopy for MessageManifest(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  v5 = a2[3];
  if (a1[3] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_244574770(*v4, v5);
      v8 = a1[2];
      v9 = a1[3];
      a1[2] = v7;
      a1[3] = v5;
      sub_2445747FC(v8, v9);
      return a1;
    }
    sub_2445750B4((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_244574770(*v4, v5);
  a1[2] = v6;
  a1[3] = v5;
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for MessageManifest(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  v5 = a1[3];
  if (v5 >> 60 != 15)
  {
    v6 = a2[3];
    if (v6 >> 60 != 15)
    {
      v7 = a1[2];
      a1[2] = *v4;
      a1[3] = v6;
      sub_2445747FC(v7, v5);
      return a1;
    }
    sub_2445750B4((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageManifest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageManifest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageManifest()
{
  return &type metadata for MessageManifest;
}

uint64_t sub_244577CD0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_24457475C(a3, a4);
  }
  return result;
}

uint64_t sub_244577D18(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_2445747E8(a3, a4);
  }
  return result;
}

uint64_t sub_244577D60(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_24457475C(a1, a2);
  return a1;
}

unint64_t sub_244577D74()
{
  unint64_t result;

  result = qword_2573722C0;
  if (!qword_2573722C0)
  {
    result = MEMORY[0x249512E54](&unk_2445C696C, &type metadata for MergeConflict);
    atomic_store(result, (unint64_t *)&qword_2573722C0);
  }
  return result;
}

uint64_t sub_244577DB8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_2445747E8(a1, a2);
  return a1;
}

uint64_t sub_244577DCC()
{
  return swift_release();
}

uint64_t sub_244577DD4(uint64_t a1, uint64_t a2)
{
  __swift_memcpy49_8(a2, a1);
  return a2;
}

uint64_t sub_244577E10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_244577E54(uint64_t a1, uint64_t a2)
{
  __swift_memcpy65_8(a2, a1);
  return a2;
}

uint64_t sub_244577E90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_244577ED4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_24457475C(a3, a4);
}

uint64_t sub_244577F1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_retain();
  swift_bridgeObjectRetain();
  sub_24457475C(a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t TypeSchema.makeValue(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  __int128 v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  sub_24457333C(v2, (uint64_t)&v26);
  if (v29)
  {
    if (v29 == 1)
    {
      v23 = v26;
      v24 = v27;
      v25 = v28;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v20 = 0xD000000000000024;
      *((_QWORD *)&v20 + 1) = 0x80000002445C4D30;
      v6 = *((_QWORD *)&v24 + 1);
      v7 = v25;
      __swift_project_boxed_opaque_existential_1(&v23, *((uint64_t *)&v24 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v6);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_244578600();
      swift_allocError();
      *(_OWORD *)v8 = v20;
      *(_BYTE *)(v8 + 16) = 6;
      swift_willThrow();
      return sub_244578644((uint64_t)&v23);
    }
    if (!(*((_QWORD *)&v27 + 1) | v28 | (unint64_t)v26 | (unint64_t)v27 | *((_QWORD *)&v26 + 1)))
      goto LABEL_16;
    v11 = *((_QWORD *)&v27 + 1) | v28 | v27 | *((_QWORD *)&v26 + 1);
    if ((_QWORD)v26 == 1 && !v11)
    {
LABEL_9:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      result = sub_2445C3DA8();
      if (!v3)
      {
        *(_DWORD *)a2 = v23;
        v10 = 1;
        goto LABEL_11;
      }
      return result;
    }
    if ((_QWORD)v26 == 2 && !v11)
      goto LABEL_16;
    if ((_QWORD)v26 == 3 && !v11)
      goto LABEL_9;
    if ((_QWORD)v26 == 4 && !v11)
    {
LABEL_16:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      result = sub_2445C3DA8();
      if (!v3)
      {
        *(_DWORD *)a2 = v23;
        *(_BYTE *)(a2 + 57) = 0;
      }
      return result;
    }
    if ((_QWORD)v26 == 5 && !v11)
    {
LABEL_26:
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      result = sub_2445C3DA8();
      if (!v3)
      {
        *(_QWORD *)a2 = v23;
        v10 = 2;
        goto LABEL_11;
      }
      return result;
    }
    if ((_QWORD)v26 != 6 || v11)
    {
      if ((_QWORD)v26 == 7 && !v11)
        goto LABEL_26;
      if ((_QWORD)v26 != 8 || v11)
      {
        if ((_QWORD)v26 != 9 || v11)
        {
          if ((_QWORD)v26 != 10 || v11)
          {
            if ((_QWORD)v26 != 11 || v11)
            {
              if ((_QWORD)v26 != 12 || v11)
              {
                if ((_QWORD)v26 != 13 || v11)
                {
                  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
                  result = sub_2445C3DA8();
                  if (!v3)
                  {
                    *(_OWORD *)a2 = v23;
                    v10 = 9;
                    goto LABEL_11;
                  }
                }
                else
                {
                  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
                  result = sub_2445C3DA8();
                  if (!v3)
                  {
                    v15 = *((_QWORD *)&v23 + 1);
                    *(_QWORD *)a2 = v23;
                    *(_QWORD *)(a2 + 8) = v15;
                    v10 = 8;
                    goto LABEL_11;
                  }
                }
              }
              else
              {
                __swift_project_boxed_opaque_existential_1(a1, a1[3]);
                result = sub_2445C3DA8();
                if (!v3)
                {
                  *(_BYTE *)a2 = v23;
                  v10 = 6;
                  goto LABEL_11;
                }
              }
            }
            else
            {
              __swift_project_boxed_opaque_existential_1(a1, a1[3]);
              result = sub_2445C3DA8();
              if (!v3)
              {
                *(_DWORD *)a2 = v23;
                v10 = 4;
                goto LABEL_11;
              }
            }
          }
          else
          {
            __swift_project_boxed_opaque_existential_1(a1, a1[3]);
            result = sub_2445C3DA8();
            if (!v3)
            {
              *(_QWORD *)a2 = v23;
              v10 = 5;
              goto LABEL_11;
            }
          }
          return result;
        }
        goto LABEL_26;
      }
    }
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    result = sub_2445C3DA8();
    if (!v3)
    {
      *(_QWORD *)a2 = v23;
      v10 = 3;
      goto LABEL_11;
    }
    return result;
  }
  v23 = v26;
  v24 = v27;
  v25 = v28;
  sub_244577E90((uint64_t)a1, (uint64_t)&v20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372348);
  if (swift_dynamicCast())
  {
    v20 = v23;
    v21 = v24;
    v22 = v25;
    result = sub_24457466C(&v20, a2);
    *(_OWORD *)(a2 + 40) = v18[0];
    *(_BYTE *)(a2 + 56) = 0;
    v10 = 7;
LABEL_11:
    *(_BYTE *)(a2 + 57) = v10;
    return result;
  }
  sub_244577E90((uint64_t)a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372350);
  if (swift_dynamicCast())
  {
    sub_24457466C(v16, (uint64_t)&v20);
    __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
    v12 = sub_2445C4480();
    v18[0] = v23;
    v18[1] = v24;
    v19 = v25;
    sub_24457466C(v18, a2);
    *(_QWORD *)(a2 + 40) = v12;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 56) = 1;
    *(_BYTE *)(a2 + 57) = 7;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  }
  else
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    sub_244578678((uint64_t)v16);
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20 = 0xD000000000000025;
    *((_QWORD *)&v20 + 1) = 0x80000002445C4D60;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    swift_getDynamicType();
    sub_2445C46F0();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    v13 = v20;
    sub_244578600();
    swift_allocError();
    *(_OWORD *)v14 = v13;
    *(_BYTE *)(v14 + 16) = 6;
    swift_willThrow();
    return sub_2445786B8((uint64_t)&v23);
  }
}

unint64_t sub_244578600()
{
  unint64_t result;

  result = qword_257372340;
  if (!qword_257372340)
  {
    result = MEMORY[0x249512E54](&protocol conformance descriptor for SchematizerError, &type metadata for SchematizerError);
    atomic_store(result, (unint64_t *)&qword_257372340);
  }
  return result;
}

uint64_t sub_244578644(uint64_t a1)
{
  destroy for OneofSchema();
  return a1;
}

uint64_t sub_244578678(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257372358);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2445786B8(uint64_t a1)
{
  destroy for OneofSchema();
  return a1;
}

uint64_t OneofSchema.name.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t OneofSchema.allFieldNumbers.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t OneofSchema.allFieldNames.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OneofSchema.fieldName(forNumber:)(Swift::Int forNumber)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v5 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v4 + 40))(forNumber, v3, v4);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> OneofSchema.fieldNumber(forName:)(Swift::String forName)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;

  object = forName._object;
  countAndFlagsBits = forName._countAndFlagsBits;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v5 + 48))(countAndFlagsBits, object, v4, v5);
}

uint64_t OneofSchemaDescribing.asPublic()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t initializeWithCopy for OneofSchema(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for OneofSchema(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OneofSchema(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OneofSchema(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OneofSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OneofSchema()
{
  return &type metadata for OneofSchema;
}

uint64_t dispatch thunk of OneofSchemaDescribing.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of OneofSchemaDescribing.allFieldNumbers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of OneofSchemaDescribing.allFieldNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of OneofSchemaDescribing.fieldName(forNumber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of OneofSchemaDescribing.fieldNumber(forName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

void sub_244578BE8(unint64_t a1)
{
  if (a1 >= 0x80)
    __asm { BR              X11 }
  sub_244578D04();
}

void sub_244578D04()
{
  __asm { BR              X12 }
}

uint64_t sub_244578D50()
{
  char v0;
  _QWORD v2[3];
  uint64_t v3;
  unint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257372360);
  v4 = sub_244579938();
  LOBYTE(v2[0]) = v0;
  __swift_project_boxed_opaque_existential_1(v2, v3);
  sub_2445C3D3C();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_244578DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x24BEE0F88];
  v14[4] = MEMORY[0x24BDCFB90];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x24BEE0F88]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_2445C3A30(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_2445C3B70((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_2445C3AF0((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_244578EAC(int a1, int a2)
{
  return sub_244578EF0(a1, a2);
}

uint64_t sub_244578EF0(int a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_244578BE8((8 * a2) | 5);
  v6 = a1;
  sub_244578DE4((uint64_t)&v6, (uint64_t)&v7, &v7);
  v3 = v7;
  v4 = v8;
  sub_244574770(v7, v8);
  sub_244579720(v3, v4);
  sub_2445747FC(v3, v4);
  return sub_2445747FC(v3, v4);
}

uint64_t sub_244578FA8(uint64_t a1, int a2)
{
  return sub_244578FEC(a1, a2);
}

uint64_t sub_244578FEC(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_244578BE8((8 * a2) | 1);
  v6 = a1;
  sub_244578DE4((uint64_t)&v6, (uint64_t)&v7, &v7);
  v3 = v7;
  v4 = v8;
  sub_244574770(v7, v8);
  sub_244579720(v3, v4);
  sub_2445747FC(v3, v4);
  return sub_2445747FC(v3, v4);
}

uint64_t sub_2445790A0(int a1, float a2)
{
  uint64_t v3;
  unint64_t v4;
  float v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_244578BE8((8 * a1) | 5);
  v6 = a2;
  sub_244578DE4((uint64_t)&v6, (uint64_t)&v7, &v7);
  v3 = v7;
  v4 = v8;
  sub_244574770(v7, v8);
  sub_244579720(v3, v4);
  sub_2445747FC(v3, v4);
  return sub_2445747FC(v3, v4);
}

uint64_t sub_244579160(int a1, double a2)
{
  uint64_t v3;
  unint64_t v4;
  double v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  sub_244578BE8((8 * a1) | 1);
  v6 = a2;
  sub_244578DE4((uint64_t)&v6, (uint64_t)&v7, &v7);
  v3 = v7;
  v4 = v8;
  sub_244574770(v7, v8);
  sub_244579720(v3, v4);
  sub_2445747FC(v3, v4);
  return sub_2445747FC(v3, v4);
}

uint64_t sub_24457921C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  sub_244578BE8((8 * a3) | 2);
  v3 = sub_2445C4264();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_7;
  v5 = v3;
  v6 = v4 - 1;
  sub_244578BE8(v4 - 1);
  sub_2445792F8(v6, v5);
  if (__OFSUB__(v8 >> 1, v7))
  {
    __break(1u);
LABEL_7:
    result = sub_2445C4540();
    __break(1u);
    return result;
  }
  if (v8 >> 1 != v7)
    sub_2445C3D48();
  return swift_unknownObjectRelease();
}

int64_t sub_2445792F8(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

void sub_24457933C(uint64_t a1, uint64_t a2, int a3)
{
  sub_244578BE8((8 * a3) | 2);
  __asm { BR              X9 }
}

void sub_244579394()
{
  uint64_t v0;

  sub_244578BE8(BYTE6(v0));
  if (BYTE6(v0))
    sub_2445C3D48();
}

uint64_t sub_2445795F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_2445C3CC4();
  if (!result || (result = sub_2445C3CDC(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_2445C3CD0();
      return sub_2445C3D48();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_244579684(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_2445C3CC4();
  v5 = result;
  if (result)
  {
    result = sub_2445C3CDC();
    if (__OFSUB__(a1, result))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_16;
  }
  result = sub_2445C3CD0();
  if (result >= v7)
    v8 = v7;
  else
    v8 = result;
  v9 = v5 + v8;
  if (v5)
    v10 = v9;
  else
    v10 = 0;
  if (v5)
  {
    if (v10 != v5)
      return sub_2445C3D48();
  }
  return result;
}

void sub_244579720(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_244579784
     + *((int *)qword_244579928 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_244579794()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_244574770(v1, v0);
  sub_2445C3D48();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

unint64_t sub_244579938()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257372368;
  if (!qword_257372368)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257372360);
    result = MEMORY[0x249512E54](MEMORY[0x24BDD06A0], v1);
    atomic_store(result, (unint64_t *)&qword_257372368);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249512E48](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2445799C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t result;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v50 = a3;
  v5 = v4;
  v43 = *(_QWORD *)v4;
  v57 = sub_2445C3D9C();
  v51 = *(_QWORD *)(v57 - 8);
  v10 = MEMORY[0x24BDAC7A8](v57, v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v13);
  v46 = (char *)&v43 - v14;
  v15 = a1[1];
  v44 = *a1;
  v45 = v15;
  v16 = a1[3];
  v47 = a1[2];
  v48 = v16;
  v17 = (uint64_t)&v5[OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_options];
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_QWORD *)(v17 + 48) = 0;
  *((_QWORD *)v5 + 4) = a2;
  swift_bridgeObjectRetain_n();
  swift_retain();
  *((_QWORD *)v5 + 5) = sub_24458F48C(a2);
  sub_2445C3D90();
  v18 = a2 + 64;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(a2 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v24 = 0;
  while (1)
  {
    if (v21)
    {
      v21 &= v21 - 1;
      goto LABEL_5;
    }
    v25 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    v26 = a4;
    if (v25 >= v22)
      goto LABEL_25;
    v27 = *(_QWORD *)(v18 + 8 * v25);
    ++v24;
    if (!v27)
    {
      v24 = v25 + 1;
      if (v25 + 1 >= v22)
        goto LABEL_25;
      v27 = *(_QWORD *)(v18 + 8 * v24);
      if (!v27)
      {
        v24 = v25 + 2;
        if (v25 + 2 >= v22)
          goto LABEL_25;
        v27 = *(_QWORD *)(v18 + 8 * v24);
        if (!v27)
        {
          v24 = v25 + 3;
          if (v25 + 3 >= v22)
            goto LABEL_25;
          v27 = *(_QWORD *)(v18 + 8 * v24);
          if (!v27)
          {
            v24 = v25 + 4;
            if (v25 + 4 >= v22)
              goto LABEL_25;
            v27 = *(_QWORD *)(v18 + 8 * v24);
            if (!v27)
            {
              v28 = v25 + 5;
              if (v28 >= v22)
              {
LABEL_25:
                swift_release();
                v29 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
                v30 = v46;
                v31 = v12;
                v32 = v57;
                v29(v46, v31, v57);
                swift_bridgeObjectRelease();
                v33 = &v5[OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_allFieldNumbers];
                v29(&v5[OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_allFieldNumbers], v30, v32);
                v34 = v48;
                if (v48 >> 60 == 15)
                {
                  swift_unknownObjectRelease();
                  v35 = v47;
                  goto LABEL_31;
                }
                ObjectType = swift_getObjectType();
                v35 = v47;
                sub_244574770(v47, v34);
                v37 = sub_24458CDD8(ObjectType, v26);
                v38 = v49;
                if ((v37 & 1) != 0)
                {
                  sub_24458CDF4(ObjectType, v26);
                  if (v38)
                  {
                    swift_release();
                    swift_unknownObjectRelease();
                    sub_2445747E8(v35, v34);
                    swift_bridgeObjectRelease();
                    sub_2445747E8(v35, v34);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v57);
                    sub_2445752F4(v17);
                    swift_deallocPartialClassInstance();
                    return (uint64_t)v5;
                  }
                  v41 = v53;
                  v42 = v54;
                  __swift_project_boxed_opaque_existential_1(v52, v53);
                  (*(void (**)(_OWORD *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v42 + 80))(v55, v35, v34, v41, v42);
                  swift_unknownObjectRelease();
                  sub_2445747E8(v35, v34);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
                }
                else
                {
                  swift_unknownObjectRelease();
                  sub_2445747E8(v35, v34);
LABEL_31:
                  v56 = 0;
                  memset(v55, 0, sizeof(v55));
                }
                v40 = v44;
                v39 = v45;
                swift_beginAccess();
                sub_24457A430((uint64_t)v55, v17);
                swift_endAccess();
                swift_release();
                *((_QWORD *)v5 + 2) = v40;
                *((_QWORD *)v5 + 3) = v39;
                sub_2445747E8(v35, v34);
                return (uint64_t)v5;
              }
              v27 = *(_QWORD *)(v18 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v24 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_36;
                  if (v24 >= v22)
                    goto LABEL_25;
                  v27 = *(_QWORD *)(v18 + 8 * v24);
                  ++v28;
                  if (v27)
                    goto LABEL_24;
                }
              }
              v24 = v28;
            }
          }
        }
      }
    }
LABEL_24:
    v21 = (v27 - 1) & v27;
LABEL_5:
    result = sub_2445C3D78();
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_244579E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 32);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v6 = sub_2445A14D8(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    v8 = 0x80000002445C4E40;
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v9 = 0xD00000000000001BLL;
    *(_QWORD *)(v9 + 8) = 0x80000002445C4E40;
    *(_BYTE *)(v9 + 16) = 3;
    swift_willThrow();
    return v8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_244579F48(unint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = 0;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v3 + 64;
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v2 << 6);
      goto LABEL_5;
    }
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v11 >= v8)
      goto LABEL_26;
    v12 = *(_QWORD *)(v6 + 8 * v11);
    ++v2;
    if (!v12)
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_26;
      v12 = *(_QWORD *)(v6 + 8 * v2);
      if (!v12)
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_26;
        v12 = *(_QWORD *)(v6 + 8 * v2);
        if (!v12)
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_26;
          v12 = *(_QWORD *)(v6 + 8 * v2);
          if (!v12)
          {
            v2 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_26;
            v12 = *(_QWORD *)(v6 + 8 * v2);
            if (!v12)
            {
              v13 = v11 + 5;
              if (v13 >= v8)
              {
LABEL_26:
                sub_2445C44D4();
                swift_bridgeObjectRelease();
                sub_2445C45AC();
                sub_2445C42D0();
                swift_bridgeObjectRelease();
                v14 = 0xD000000000000020;
                sub_244578600();
                swift_allocError();
                *(_QWORD *)v15 = 0xD000000000000020;
                *(_QWORD *)(v15 + 8) = 0x80000002445C4E60;
                *(_BYTE *)(v15 + 16) = 3;
                swift_willThrow();
                return v14;
              }
              v12 = *(_QWORD *)(v6 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v2 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_29;
                  if (v2 >= v8)
                    goto LABEL_26;
                  v12 = *(_QWORD *)(v6 + 8 * v2);
                  ++v13;
                  if (v12)
                    goto LABEL_24;
                }
              }
              v2 = v13;
            }
          }
        }
      }
    }
LABEL_24:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v2 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10) == result)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
      swift_bridgeObjectRetain();
      return v14;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_24457A164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_allFieldNumbers;
  v2 = sub_2445C3D9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return sub_2445752F4(v0 + OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_options);
}

uint64_t sub_24457A1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_allFieldNumbers;
  v2 = sub_2445C3D9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_2445752F4(v0 + OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_options);
  return swift_deallocClassInstance();
}

uint64_t sub_24457A238()
{
  return type metadata accessor for ProtoOneOfSchema();
}

uint64_t type metadata accessor for ProtoOneOfSchema()
{
  uint64_t result;

  result = qword_2543F6F30;
  if (!qword_2543F6F30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24457A27C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2445C3D9C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_24457A300@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_options;
  swift_beginAccess();
  return sub_24457A3E8(v3, a1);
}

uint64_t sub_24457A354@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC17PoirotSchematizer16ProtoOneOfSchema_allFieldNumbers;
  v4 = sub_2445C3D9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_24457A39C()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_24457A3A8(unint64_t a1)
{
  return sub_244579F48(a1);
}

unint64_t sub_24457A3C8(uint64_t a1, uint64_t a2)
{
  return sub_244579E4C(a1, a2);
}

uint64_t sub_24457A3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573722A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24457A430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573722A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SchemaStore.impl.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SchemaStore.allMessageNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
}

uint64_t SchemaStore.allEnumNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
}

_QWORD *SchemaStore.messageSchema(withName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v8 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(v13, a1, a2, ObjectType, v8);
  if (!v4)
  {
    v11 = v14;
    v12 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    MessageSchemaDescribing.asPublic()(v11, v12, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

_QWORD *SchemaStore.enumSchema(withName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v8 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(v13, a1, a2, ObjectType, v8);
  if (!v4)
  {
    v11 = v14;
    v12 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    EnumSchemaDescribing.asPublic()(v11, v12, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for SchemaStore(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for SchemaStore()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for SchemaStore(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for SchemaStore(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaStore(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchemaStore()
{
  return &type metadata for SchemaStore;
}

uint64_t MessageSchema.name.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t MessageSchemaDescribing.asPublic()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
}

id MessageSchema.options.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21[2];
  _OWORD v22[2];
  _OWORD v23[3];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = sub_2445C424C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1, v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[3];
  v7 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v6);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v7 + 16))(&v25, v6, v7);
  if (!*((_QWORD *)&v26 + 1))
  {
    sub_2445752F4((uint64_t)&v25);
    return 0;
  }
  v23[1] = v26;
  v23[2] = v27;
  v23[0] = v25;
  v24 = v28;
  v8 = *((_QWORD *)&v26 + 1);
  v9 = v27;
  v10 = __swift_project_boxed_opaque_existential_1(v23, *((uint64_t *)&v26 + 1));
  *(_QWORD *)&v26 = v8;
  *((_QWORD *)&v26 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v27 = v9;
  *((_QWORD *)&v27 + 1) = sub_24457AEC4;
  v28 = 0;
  v29 = v10;
  sub_2445C3D54();
  sub_2445C4240();
  v11 = sub_2445C4228();
  v13 = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  if (v13 >> 60 == 15)
  {
LABEL_5:
    sub_244575334((uint64_t)v23);
    return 0;
  }
  v15 = (void *)objc_opt_self();
  v16 = (void *)sub_2445C3D60();
  v21[0] = 0;
  v17 = objc_msgSend(v15, sel_JSONObjectWithData_options_error_, v16, 0, v21);

  v18 = v21[0];
  if (!v17)
  {
    v19 = v18;
    v20 = sub_2445C3D24();

    swift_willThrow();
    sub_2445747E8(v11, v13);
    MEMORY[0x249512DE8](v20);
    goto LABEL_5;
  }
  sub_2445C448C();
  sub_2445747E8(v11, v13);
  swift_unknownObjectRelease();
  sub_244575334((uint64_t)v23);
  sub_24457AF20(v22, &v25);
  sub_24457AF20(&v25, v22);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372370);
  if (swift_dynamicCast())
    return v21[0];
  else
    return 0;
}

uint64_t MessageSchema.allFieldNames.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t MessageSchema.allOneofNames.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

_QWORD *MessageSchema.fieldSchema(withName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v8 = v3[3];
  v9 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v8);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v13, a1, a2, v8, v9);
  if (!v4)
  {
    v11 = v14;
    v12 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    FieldSchemaDescribing.asPublic()(v11, v12, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

_QWORD *MessageSchema.fieldSchema(withNumber:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v6 = v2[3];
  v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 64))(v11, a1, v6, v7);
  if (!v3)
  {
    v9 = v12;
    v10 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    FieldSchemaDescribing.asPublic()(v9, v10, a2);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

_QWORD *MessageSchema.oneof(withName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v8 = v3[3];
  v9 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v8);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 72))(v13, a1, a2, v8, v9);
  if (!v4)
  {
    v11 = v14;
    v12 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    OneofSchemaDescribing.asPublic()(v11, v12, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return result;
}

uint64_t MessageSchema.schematize(data:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 80))(a1, a2, v5, v6);
}

uint64_t MessageSchemaDescribing.schematizing<A>(data:block:)()
{
  return sub_2445C3D54();
}

_QWORD *sub_24457AE44(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *result;
  _QWORD v11[5];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 88))(v11, a1, a2, a6, a8);
  if (!v8)
  {
    a3(v11);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

uint64_t sub_24457AEC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 160))(v4, v5);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v7;
  }
  return result;
}

_OWORD *sub_24457AF20(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_QWORD *sub_24457AF30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24457AE44(a1, a2, *(void (**)(_QWORD *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

ValueMetadata *type metadata accessor for MessageSchema()
{
  return &type metadata for MessageSchema;
}

uint64_t dispatch thunk of MessageSchemaDescribing.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.allFieldNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.allOneofNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.getAllFields()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.getAllOneofs()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.fieldSchema(withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.fieldSchema(withNumber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.oneof(withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.schematize(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.schematize(unsafeBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of MessageSchemaDescribing.makeSchematizedData(constructor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t sub_24457B038()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProtoBaseSchema()
{
  return objc_opt_self();
}

uint64_t sub_24457B07C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24457B0AC()
{
  return 0;
}

uint64_t sub_24457B0B8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v28 = MEMORY[0x24BEE4AF8];
  sub_2445A186C(0, v1, 0);
  v2 = v28;
  result = sub_2445BC58C(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v23 = v1;
  v24 = v5;
  v25 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v26 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = *v12;
    v14 = v12[1];
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
    v15 = *(_QWORD *)(v28 + 16);
    v16 = *(_QWORD *)(v28 + 24);
    result = swift_bridgeObjectRetain();
    if (v15 >= v16 >> 1)
      result = sub_2445A186C(v16 > 1, v15 + 1, 1);
    *(_QWORD *)(v28 + 16) = v15 + 1;
    v17 = (_QWORD *)(v28 + 24 * v15);
    v17[4] = v13;
    v17[5] = v14;
    v17[6] = v27;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v18 = *(_QWORD *)(v25 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v24;
    if (*(_DWORD *)(a1 + 36) != v24)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v23;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v23;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v26 + 1;
    v6 = v9;
    if (v26 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

_QWORD *sub_24457B2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *result;
  __int128 v17[3];
  uint64_t v18;
  __int16 v19;
  _BYTE v20[40];
  uint64_t v21;

  ObjectType = swift_getObjectType();
  result = (*(_QWORD *(**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(a6 + 24))(v17, 0xD000000000000028, 0x80000002445C4B90, ObjectType, a6);
  if (!v7)
  {
    v21 = sub_2445C41D4();
    sub_24457466C(v17, (uint64_t)v20);
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter(a1, a2, 1701667182, 0xE400000000000000);
    LODWORD(v17[0]) = a3;
    HIBYTE(v19) = 0;
    SchematizedDataComposer.subscript.setter((uint64_t)v17, 0x7265626D756ELL, 0xE600000000000000);
    if (a5 >> 60 == 15)
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      v19 = -256;
    }
    else
    {
      *(_QWORD *)&v17[0] = a4;
      *((_QWORD *)&v17[0] + 1) = a5;
      HIBYTE(v19) = 9;
    }
    sub_24457475C(a4, a5);
    SchematizedDataComposer.subscript.setter((uint64_t)v17, 0x736E6F6974706FLL, 0xE700000000000000);
    SchematizedDataComposer.compose()(a7);
    return (_QWORD *)sub_24457C40C((uint64_t)v20);
  }
  return result;
}

uint64_t sub_24457B470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v21[3];
  uint64_t v22;
  __int16 v23;
  _BYTE v24[40];
  uint64_t v25;

  v8 = *v4;
  v7 = v4[1];
  v10 = v4[2];
  v9 = v4[3];
  *(_QWORD *)&v21[0] = sub_24457B0B8(v8);
  swift_bridgeObjectRetain();
  sub_24457B720((_QWORD **)v21);
  if (v5)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)&v21[0];
    swift_bridgeObjectRetain();
    sub_24457475C(v7, v10);
    swift_bridgeObjectRetain();
    v12 = sub_24457C154(v11, v8, v7, v10, v9);
    swift_bridgeObjectRelease();
    sub_2445747E8(v7, v10);
    swift_release();
    swift_bridgeObjectRelease();
    ObjectType = swift_getObjectType();
    (*(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(a3 + 24))(v21, 0xD000000000000023, 0x80000002445C4AE0, ObjectType, a3);
    v25 = sub_2445C41D4();
    sub_24457466C(v21, (uint64_t)v24);
    swift_bridgeObjectRetain();
    v14 = SchematizedDataComposer.subscript.setter(a1, a2, 1701667182, 0xE400000000000000);
    MEMORY[0x24BDAC7A8](v14, v15);
    v16 = sub_24457C2A4(v12, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_24457C28C);
    swift_bridgeObjectRelease();
    SchematizedDataComposer.subscript.setter(v16, 0x65756C6176, 0xE500000000000000);
    if (v10 >> 60 == 15)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      v23 = -256;
    }
    else
    {
      *(_QWORD *)&v21[0] = v7;
      *((_QWORD *)&v21[0] + 1) = v10;
      HIBYTE(v23) = 9;
    }
    sub_24457475C(v7, v10);
    SchematizedDataComposer.subscript.setter((uint64_t)v21, 0x736E6F6974706FLL, 0xE700000000000000);
    SchematizedDataComposer.compose()(a4);
    return sub_24457C40C((uint64_t)v24);
  }
  return result;
}

uint64_t sub_24457B720(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_2445BC550(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_24457B788(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24457B788(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *__dst;

  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v88 = 0;
      v89 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v91 = *(_QWORD *)(v89 + 24 * i + 16);
        v92 = v88;
        do
        {
          v93 = v89 + v92;
          if (v91 >= *(_QWORD *)(v89 + v92 + 16))
            break;
          if (!v89)
            goto LABEL_140;
          v94 = *(_QWORD *)(v93 + 24);
          v95 = (_QWORD *)(v89 + v92);
          v96 = *(_QWORD *)(v89 + v92 + 32);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)v93;
          result = *(_QWORD *)(v93 + 16);
          *(_QWORD *)(v93 + 40) = result;
          *v95 = v94;
          v95[1] = v96;
          *(_QWORD *)(v93 + 16) = v91;
          v92 -= 24;
        }
        while (v92 != -24);
        v88 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v105 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v97 = v12;
      v107 = v9;
      if (v13 >= 2)
      {
        v98 = *v105;
        do
        {
          v99 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v98)
            goto LABEL_144;
          v100 = v97;
          v101 = *(_QWORD *)&v97[16 * v99 + 32];
          v102 = *(_QWORD *)&v97[16 * v13 + 24];
          sub_24457BE98((char *)(v98 + 24 * v101), (char *)(v98 + 24 * *(_QWORD *)&v97[16 * v13 + 16]), v98 + 24 * v102, __dst);
          if (v1)
            break;
          if (v102 < v101)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v100 = sub_2445BC280((uint64_t)v100);
          if (v99 >= *((_QWORD *)v100 + 2))
            goto LABEL_133;
          v103 = &v100[16 * v99 + 32];
          *(_QWORD *)v103 = v101;
          *((_QWORD *)v103 + 1) = v102;
          v104 = *((_QWORD *)v100 + 2);
          if (v13 > v104)
            goto LABEL_134;
          memmove(&v100[16 * v13 + 16], &v100[16 * v13 + 32], 16 * (v104 - v13));
          v97 = v100;
          *((_QWORD *)v100 + 2) = v104 - 1;
          v13 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v107 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372378);
    v8 = sub_2445C43A8();
    *(_QWORD *)(v8 + 16) = v7;
    v107 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v106 = *a1 + 64;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v108 = v6;
  v109 = v3;
  v110 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 24 * v10 + 16);
      v16 = *(_QWORD *)(v11 + 24 * v14 + 16);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (uint64_t *)(v106 + 24 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 3;
          v19 = v20;
          if (v15 < v16 == v20 >= v18)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v21 = 24 * v10;
          v22 = 24 * v14;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_143;
              v25 = v11 + v22;
              v26 = v11 + v21;
              v27 = *(_OWORD *)(v11 + v22);
              v28 = *(_QWORD *)(v11 + v22 + 16);
              v29 = *(_QWORD *)(v11 + v21 - 8);
              *(_OWORD *)v25 = *(_OWORD *)(v11 + v21 - 24);
              *(_QWORD *)(v25 + 16) = v29;
              *(_OWORD *)(v26 - 24) = v27;
              *(_QWORD *)(v26 - 8) = v28;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v30 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v30 >= v3)
      v30 = v3;
    if (v30 < v14)
      break;
    if (v10 != v30)
    {
      v31 = (uint64_t *)(v11 + 24 * v10);
      do
      {
        v32 = *(_QWORD *)(v11 + 24 * v10 + 16);
        v33 = v14;
        v34 = v31;
        do
        {
          if (v32 >= *(v34 - 1))
            break;
          if (!v11)
            goto LABEL_141;
          v35 = *v34;
          v36 = v34[1];
          *(_OWORD *)v34 = *(_OWORD *)(v34 - 3);
          v34[2] = *(v34 - 1);
          *(v34 - 2) = v36;
          *(v34 - 1) = v32;
          *(v34 - 3) = v35;
          v34 -= 3;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 3;
      }
      while (v10 != v30);
      v10 = v30;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_2445BBEB0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v38 = *((_QWORD *)v12 + 2);
    v37 = *((_QWORD *)v12 + 3);
    v13 = v38 + 1;
    v11 = v110;
    if (v38 >= v37 >> 1)
    {
      v87 = sub_2445BBEB0((char *)(v37 > 1), v38 + 1, 1, v12);
      v11 = v110;
      v12 = v87;
    }
    *((_QWORD *)v12 + 2) = v13;
    v39 = v12 + 32;
    v40 = &v12[16 * v38 + 32];
    *(_QWORD *)v40 = v14;
    *((_QWORD *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        v41 = v13 - 1;
        if (v13 >= 4)
        {
          v46 = &v39[16 * v13];
          v47 = *((_QWORD *)v46 - 8);
          v48 = *((_QWORD *)v46 - 7);
          v52 = __OFSUB__(v48, v47);
          v49 = v48 - v47;
          if (v52)
            goto LABEL_119;
          v51 = *((_QWORD *)v46 - 6);
          v50 = *((_QWORD *)v46 - 5);
          v52 = __OFSUB__(v50, v51);
          v44 = v50 - v51;
          v45 = v52;
          if (v52)
            goto LABEL_120;
          v53 = v13 - 2;
          v54 = &v39[16 * v13 - 32];
          v56 = *(_QWORD *)v54;
          v55 = *((_QWORD *)v54 + 1);
          v52 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v52)
            goto LABEL_122;
          v52 = __OFADD__(v44, v57);
          v58 = v44 + v57;
          if (v52)
            goto LABEL_125;
          if (v58 >= v49)
          {
            v76 = &v39[16 * v41];
            v78 = *(_QWORD *)v76;
            v77 = *((_QWORD *)v76 + 1);
            v52 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v52)
              goto LABEL_129;
            v69 = v44 < v79;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v70 = *((_QWORD *)v12 + 4);
            v71 = *((_QWORD *)v12 + 5);
            v52 = __OFSUB__(v71, v70);
            v63 = v71 - v70;
            v64 = v52;
            goto LABEL_77;
          }
          v43 = *((_QWORD *)v12 + 4);
          v42 = *((_QWORD *)v12 + 5);
          v52 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          v45 = v52;
        }
        if ((v45 & 1) != 0)
          goto LABEL_121;
        v53 = v13 - 2;
        v59 = &v39[16 * v13 - 32];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        v64 = v62;
        if (v62)
          goto LABEL_124;
        v65 = &v39[16 * v41];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v52 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v52)
          goto LABEL_127;
        if (__OFADD__(v63, v68))
          goto LABEL_128;
        if (v63 + v68 >= v44)
        {
          v69 = v44 < v68;
LABEL_83:
          if (v69)
            v41 = v53;
          goto LABEL_85;
        }
LABEL_77:
        if ((v64 & 1) != 0)
          goto LABEL_123;
        v72 = &v39[16 * v41];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v52 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v52)
          goto LABEL_126;
        if (v75 < v63)
          goto LABEL_15;
LABEL_85:
        v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v81 = v12;
        v82 = &v39[16 * v80];
        v83 = *(_QWORD *)v82;
        v84 = &v39[16 * v41];
        v85 = *((_QWORD *)v84 + 1);
        sub_24457BE98((char *)(v11 + 24 * *(_QWORD *)v82), (char *)(v11 + 24 * *(_QWORD *)v84), v11 + 24 * v85, __dst);
        if (v1)
          goto LABEL_93;
        if (v85 < v83)
          goto LABEL_116;
        if (v41 > *((_QWORD *)v81 + 2))
          goto LABEL_117;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v39[16 * v80 + 8] = v85;
        v86 = *((_QWORD *)v81 + 2);
        if (v41 >= v86)
          goto LABEL_118;
        v12 = v81;
        v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((_QWORD *)v81 + 2) = v86 - 1;
        v11 = v110;
        if (v86 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v108;
    v3 = v109;
    if (v10 >= v109)
    {
      v9 = v107;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_24457BE98(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  const void *v25;
  char *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v17 = &v4[24 * v11];
      v24 = v17;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v18 = a3 - 24;
        do
        {
          v19 = (char *)(v18 + 24);
          if (*((_QWORD *)v17 - 1) >= *((_QWORD *)v6 - 1))
          {
            v24 = v17 - 24;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              v22 = *(_OWORD *)(v17 - 24);
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v17 - 1);
              *(_OWORD *)v18 = v22;
            }
            v20 = v6;
            v17 -= 24;
            if (v6 <= v7)
              break;
          }
          else
          {
            v20 = v6 - 24;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              v21 = *(_OWORD *)v20;
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v18 = v21;
            }
            v26 = v6 - 24;
            if (v20 <= v7)
              break;
          }
          v18 -= 24;
          v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      sub_2445BC1C4((void **)&v26, &v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v13 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 2) >= *((_QWORD *)v13 + 2))
        {
          v4 = v13 + 24;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 24;
          }
        }
        else
        {
          v14 = v6 + 24;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v7 = v16;
LABEL_18:
        v7 += 24;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v25 = v4;
        v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_24457C154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_2445A1850(0, v5, 0);
    v8 = a5;
    v6 = v23;
    v9 = (uint64_t *)(a1 + 48);
    do
    {
      v10 = *(v9 - 1);
      v21 = *v9;
      v22 = *(v9 - 2);
      if (*(_QWORD *)(v8 + 16) && (v11 = sub_2445A153C(*v9), (v12 & 1) != 0))
      {
        v13 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v11);
        v14 = *v13;
        v15 = v13[1];
        sub_244574770(*v13, v15);
      }
      else
      {
        v14 = 0;
        v15 = 0xF000000000000000;
      }
      v17 = *(_QWORD *)(v23 + 16);
      v16 = *(_QWORD *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v17 >= v16 >> 1)
      {
        sub_2445A1850(v16 > 1, v17 + 1, 1);
        v8 = a5;
      }
      v9 += 3;
      *(_QWORD *)(v23 + 16) = v17 + 1;
      v18 = (_QWORD *)(v23 + 40 * v17);
      v18[4] = v22;
      v18[5] = v10;
      v18[6] = v21;
      v18[7] = v14;
      v18[8] = v15;
      --v5;
    }
    while (v5);
  }
  return v6;
}

_QWORD *sub_24457C28C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  return sub_24457B2D4(a1, a2, a3, a4, a5, *(_QWORD *)(v6 + 24), a6);
}

uint64_t sub_24457C2A4(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_2445A1834(0, v3, 0);
    v4 = v22;
    v6 = (unint64_t *)(a1 + 64);
    while (1)
    {
      v7 = *(v6 - 4);
      v8 = *(v6 - 3);
      v9 = *(v6 - 2);
      v10 = *(v6 - 1);
      v11 = *v6;
      swift_bridgeObjectRetain();
      sub_24457475C(v10, v11);
      a2(v20, v7, v8, v9, v10, v11);
      if (v2)
        break;
      swift_bridgeObjectRelease();
      sub_2445747E8(v10, v11);
      v22 = v4;
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2445A1834(v12 > 1, v13 + 1, 1);
        v4 = v22;
      }
      v6 += 5;
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = v4 + 56 * v13;
      v15 = v20[0];
      v16 = v20[1];
      v17 = v20[2];
      *(_QWORD *)(v14 + 80) = v21;
      *(_OWORD *)(v14 + 48) = v16;
      *(_OWORD *)(v14 + 64) = v17;
      *(_OWORD *)(v14 + 32) = v15;
      if (!--v3)
        return v4;
    }
    swift_bridgeObjectRelease();
    sub_2445747E8(v10, v11);
    swift_release();
  }
  return v4;
}

uint64_t sub_24457C40C(uint64_t a1)
{
  destroy for SchematizedDataComposer(a1);
  return a1;
}

uint64_t sub_24457C440()
{
  return sub_2445C3CA0() & 1;
}

uint64_t sub_24457C470()
{
  uint64_t v0;

  v0 = sub_2445C41C8();
  __swift_allocate_value_buffer(v0, qword_257373950);
  __swift_project_value_buffer(v0, (uint64_t)qword_257373950);
  return sub_2445C41BC();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_24457C544()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = sub_2445C3F70();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](v2, v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)&v21 - v9;
  v12 = *v0;
  v11 = v0[1];
  v13 = MEMORY[0x24BEE4AF8];
  v24 = MEMORY[0x24BEE4AF8];
  sub_24457E79C(v11, &v24);
  if (v1)
    return swift_bridgeObjectRelease();
  v23 = v13;
  sub_24457E910(v12, &v23);
  sub_2445C3F64();
  sub_2445C3F4C();
  sub_2445C3F28();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  v15 = sub_24458563C(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v16 = v15;
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  v19 = v18 + 1;
  if (v18 >= v17 >> 1)
  {
    v22 = v18 + 1;
    v20 = sub_24458563C(v17 > 1, v18 + 1, 1, v15);
    v19 = v22;
    v16 = v20;
  }
  *(_QWORD *)(v16 + 16) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v18, v7, v2);
  sub_2445C3EA4();
  sub_2445C3E98();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t sub_24457C704(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t result;
  unint64_t *v58;
  unint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  int v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;

  v70 = a4;
  v69 = a2;
  v68 = a1;
  v67 = sub_2445C3DD8();
  MEMORY[0x24BDAC7A8](v67, v5);
  v72 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2445C4168();
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v66 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v11);
  v80 = (char *)&v63 - v12;
  v79 = sub_2445C3DCC();
  MEMORY[0x24BDAC7A8](v79, v13);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2445C3E74();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v77 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v21);
  v23 = (char *)&v63 - v22;
  v83 = sub_2445C40C0();
  v24 = *(_QWORD *)(v83 - 8);
  v26 = MEMORY[0x24BDAC7A8](v83, v25);
  v82 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v28);
  v30 = (char *)&v63 - v29;
  v32 = *a3;
  v31 = a3[1];
  v33 = a3[2];
  v71 = a3[3];
  v34 = *(_QWORD *)(v31 + 16);
  v35 = MEMORY[0x24BEE4AF8];
  v76 = v16;
  v75 = v17;
  v74 = v23;
  v73 = v33;
  if (v34)
  {
    v64 = v32;
    v78 = v15;
    v65 = swift_bridgeObjectRetain();
    v36 = (unint64_t *)(v65 + 56);
    v84 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v37 = *(v36 - 1);
      v38 = *v36;
      swift_bridgeObjectRetain();
      sub_24457475C(v37, v38);
      sub_2445C40B4();
      swift_bridgeObjectRetain();
      sub_2445C4090();
      if (v38 >> 60 != 15)
      {
        *(_QWORD *)&v89 = 0;
        v87 = 0u;
        v88 = 0u;
        sub_244574770(v37, v38);
        sub_244574770(v37, v38);
        sub_2445C415C();
        sub_24457EA78(&qword_257372388, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA90], MEMORY[0x24BE5BA88]);
        v39 = v81;
        sub_2445C418C();
        v81 = v39;
        if (v39)
        {
          swift_bridgeObjectRelease();
          sub_2445747E8(v37, v38);
          sub_2445747E8(v37, v38);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v83);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        sub_2445C40A8();
        sub_2445747E8(v37, v38);
      }
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v82, v30, v83);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v84 = sub_244585870(0, *(_QWORD *)(v84 + 16) + 1, 1, v84);
      v41 = *(_QWORD *)(v84 + 16);
      v40 = *(_QWORD *)(v84 + 24);
      if (v41 >= v40 >> 1)
        v84 = sub_244585870(v40 > 1, v41 + 1, 1, v84);
      v36 += 4;
      v42 = v84;
      *(_QWORD *)(v84 + 16) = v41 + 1;
      v43 = v83;
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v42+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v41, v82, v83);
      swift_bridgeObjectRelease();
      sub_2445747E8(v37, v38);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v43);
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        v16 = v76;
        v17 = v75;
        v23 = v74;
        v33 = v73;
        v32 = v64;
        v35 = MEMORY[0x24BEE4AF8];
        goto LABEL_13;
      }
    }
  }
  v84 = MEMORY[0x24BEE4AF8];
LABEL_13:
  v95 = v35;
  v44 = v81;
  *(_QWORD *)&v87 = sub_2445B54D8(v32);
  swift_bridgeObjectRetain();
  sub_24457DC7C((_QWORD **)&v87);
  if (v44)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v83 = v87;
    v45 = *(_QWORD *)(v87 + 16);
    if (v45)
    {
      swift_bridgeObjectRetain();
      v46 = 0;
      do
      {
        v47 = *(_QWORD *)(v83 + v46 + 96);
        v48 = *(_QWORD *)(v83 + v46 + 104);
        v49 = *(_BYTE *)(v83 + v46 + 88);
        v50 = *(_DWORD *)(v83 + v46 + 84);
        v51 = *(_BYTE *)(v83 + v46 + 80);
        v52 = *(_QWORD *)(v83 + v46 + 56);
        v53 = *(_BYTE *)(v83 + v46 + 48);
        v54 = *(_QWORD *)(v83 + v46 + 40);
        *(_QWORD *)&v87 = *(_QWORD *)(v83 + v46 + 32);
        v55 = v87;
        *((_QWORD *)&v87 + 1) = v54;
        LOBYTE(v88) = v53;
        *((_QWORD *)&v88 + 1) = v52;
        v89 = *(_OWORD *)(v83 + v46 + 64);
        v90 = v51;
        v91 = v50;
        v92 = v49;
        v93 = v47;
        v94 = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24457475C(v47, v48);
        sub_24457CF38(v55, v54, (char *)&v88, &v95);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v47, v48);
        v46 += 80;
        --v45;
      }
      while (v45);
      swift_release();
      v16 = v76;
      v17 = v75;
      v23 = v74;
      v33 = v73;
    }
    swift_release();
    sub_2445C3E68();
    v56 = v71;
    if (v71 >> 60 != 15)
    {
      v85 = v33;
      v86 = v71;
      *(_QWORD *)&v89 = 0;
      v87 = 0u;
      v88 = 0u;
      sub_244574770(v33, v71);
      sub_244574770(v33, v56);
      sub_2445C415C();
      sub_24457EA78(&qword_257372380, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BAA0], MEMORY[0x24BE5BA98]);
      sub_2445C41A4();
      sub_2445C3E2C();
      sub_2445747E8(v33, v56);
    }
    swift_bridgeObjectRetain();
    sub_2445C3DFC();
    swift_bridgeObjectRetain();
    sub_2445C3E14();
    sub_2445C3E5C();
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v77, v23, v16);
    v58 = v70;
    v59 = *v70;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v58 = v59;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v59 = sub_244585650(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
      *v70 = v59;
    }
    v62 = *(_QWORD *)(v59 + 16);
    v61 = *(_QWORD *)(v59 + 24);
    if (v62 >= v61 >> 1)
    {
      v59 = sub_244585650(v61 > 1, v62 + 1, 1, v59);
      *v70 = v59;
    }
    *(_QWORD *)(v59 + 16) = v62 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v59+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v62, v77, v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24457CF38(uint64_t a1, uint64_t a2, char *a3, int64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  int64_t v28;
  unint64_t v29;
  void (*v30)(char *, int64_t *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  _DWORD v37[4];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  int v48;
  int64_t *v49;
  char *v50;
  unint64_t v51;
  int64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v57 = a2;
  v49 = a4;
  v62 = a1;
  v40 = sub_2445C3FDC();
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40, v5);
  v38 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2445C4168();
  MEMORY[0x24BDAC7A8](v7, v8);
  v45 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_2445C3DC0();
  MEMORY[0x24BDAC7A8](v43, v10);
  v44 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2445C403C();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (int64_t *)((char *)v37 - v19);
  v53 = sub_2445C4078();
  v51 = *(_QWORD *)(v53 - 8);
  v22 = MEMORY[0x24BDAC7A8](v53, v21);
  v50 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v24);
  v26 = (char *)v37 - v25;
  v27 = *a3;
  v41 = *((_QWORD *)a3 + 1);
  v28 = *((_QWORD *)a3 + 3);
  v47 = *((_QWORD *)a3 + 2);
  v46 = a3[32];
  v37[3] = *((_DWORD *)a3 + 9);
  v48 = a3[40];
  v29 = *((_QWORD *)a3 + 7);
  v42 = *((_QWORD *)a3 + 6);
  sub_2445C406C();
  LOBYTE(v58[0]) = v27;
  sub_24457D41C((uint64_t)v58);
  v54 = v13;
  v55 = v12;
  v30 = *(void (**)(char *, int64_t *, uint64_t))(v13 + 16);
  v52 = v20;
  v30(v17, v20, v12);
  sub_2445C3FC4();
  swift_bridgeObjectRetain();
  sub_2445C3FAC();
  if (v28 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v28 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    v28 = sub_244585884(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    *v20 = v28;
    goto LABEL_15;
  }
  MEMORY[0x24951253C](v28);
  if (v29 >> 60 == 15)
  {
    v12 = v53;
    v17 = v50;
  }
  else
  {
    v31 = v42;
    v60 = v42;
    v61 = v29;
    v59 = 0;
    memset(v58, 0, sizeof(v58));
    sub_244574770(v42, v29);
    sub_244574770(v31, v29);
    sub_2445C415C();
    sub_24457EA78(&qword_257372390, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA80], MEMORY[0x24BE5BA78]);
    v32 = v56;
    sub_2445C41A4();
    v12 = v53;
    v17 = v50;
    if (v32)
    {
      sub_2445747E8(v31, v29);
      (*(void (**)(int64_t *, uint64_t))(v54 + 8))(v52, v55);
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v26, v12);
    }
    sub_2445C4024();
    sub_2445747E8(v31, v29);
  }
  v20 = v49;
  v29 = v51;
  if (v46)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v38, *MEMORY[0x24BE5BC28], v40);
    sub_2445C3FF4();
  }
  if (v47)
  {
    swift_bridgeObjectRetain();
    sub_2445C4060();
  }
  if ((v48 & 1) == 0)
    sub_2445C3F88();
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v17, v26, v12);
  v28 = *v20;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v20 = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_20;
LABEL_15:
  v36 = *(_QWORD *)(v28 + 16);
  v35 = *(_QWORD *)(v28 + 24);
  if (v36 >= v35 >> 1)
  {
    v28 = sub_244585884(v35 > 1, v36 + 1, 1, v28);
    *v20 = v28;
  }
  *(_QWORD *)(v28 + 16) = v36 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v28+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v36, v17, v12);
  (*(void (**)(int64_t *, uint64_t))(v54 + 8))(v52, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v26, v12);
}

void sub_24457D41C(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24457D448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BE5BCA8];
  v2 = sub_2445C403C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t sub_24457D53C(char *a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD v43[2];
  uint64_t v44;
  _QWORD *v45[2];

  v38 = a4;
  v42 = a1;
  v6 = sub_2445C4168();
  MEMORY[0x24BDAC7A8](v6, v7);
  v8 = sub_2445C3DB4();
  MEMORY[0x24BDAC7A8](v8, v9);
  v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2445C3F10();
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v37 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v37 - v16;
  v19 = *a3;
  v18 = (_QWORD *)a3[1];
  v21 = a3[2];
  v20 = (_QWORD *)a3[3];
  sub_2445C3F04();
  swift_bridgeObjectRetain();
  v42 = v17;
  sub_2445C3EC8();
  if (v21 >> 60 != 15)
  {
    v45[0] = v18;
    v45[1] = (_QWORD *)v21;
    v44 = 0;
    memset(v43, 0, sizeof(v43));
    sub_244574770((uint64_t)v18, v21);
    sub_244574770((uint64_t)v18, v21);
    sub_2445C415C();
    sub_24457EA78(&qword_2573723A0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA00], MEMORY[0x24BE5B9F8]);
    sub_2445C41A4();
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v41);
      return sub_2445747E8((uint64_t)v18, v21);
    }
    sub_2445C3EF8();
    sub_2445747E8((uint64_t)v18, v21);
  }
  *(_QWORD *)&v43[0] = MEMORY[0x24BEE4AF8];
  v45[0] = (_QWORD *)sub_24457B0B8(v19);
  swift_bridgeObjectRetain();
  sub_24457B720(v45);
  if (v4)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v39 = (char *)v45[0];
    v23 = v45[0][2];
    if (v23)
    {
      v24 = (uint64_t *)(swift_retain() + 48);
      do
      {
        v26 = *(v24 - 1);
        v25 = *v24;
        v27 = (_QWORD *)*(v24 - 2);
        swift_bridgeObjectRetain();
        sub_24457D954(v27, v26, v25, v19, (uint64_t)v18, v21, v20, (_QWORD **)v43);
        v24 += 3;
        swift_bridgeObjectRelease();
        --v23;
      }
      while (v23);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRetain();
    v28 = v42;
    sub_2445C3EE0();
    v30 = v40;
    v29 = v41;
    v31 = v37;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v28, v41);
    v32 = v38;
    v33 = *v38;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v32 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = sub_244585898(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
      *v32 = v33;
    }
    v36 = *(_QWORD *)(v33 + 16);
    v35 = *(_QWORD *)(v33 + 24);
    if (v36 >= v35 >> 1)
    {
      v33 = sub_244585898(v35 > 1, v36 + 1, 1, v33);
      *v32 = v33;
    }
    *(_QWORD *)(v33 + 16) = v36 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v33+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v36, v31, v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24457D954(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD **a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  char *v35;
  _QWORD **v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v36 = a8;
  v11 = sub_2445C4168();
  MEMORY[0x24BDAC7A8](v11, v12);
  v13 = sub_2445C3E80();
  MEMORY[0x24BDAC7A8](v13, v14);
  v34[1] = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2445C4120();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v35 = (char *)v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v21);
  v23 = (char *)v34 - v22;
  sub_2445C4114();
  swift_bridgeObjectRetain();
  sub_2445C40D8();
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    a7 = (_QWORD *)sub_2445858AC(0, a7[2] + 1, 1, (unint64_t)a7);
    *a1 = a7;
    goto LABEL_8;
  }
  MEMORY[0x249512620](a3);
  if (a7[2])
  {
    v24 = sub_2445A153C(a3);
    if ((v25 & 1) != 0)
    {
      v26 = (uint64_t *)(a7[7] + 16 * v24);
      v28 = v26[1];
      v40 = *v26;
      v27 = v40;
      v41 = v28;
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
      sub_244574770(v40, v28);
      sub_244574770(v27, v28);
      sub_2445C415C();
      sub_24457EA78(&qword_2573723A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BB20], MEMORY[0x24BE5BB18]);
      v29 = v42;
      sub_2445C41A4();
      if (v29)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
        return sub_2445747FC(v27, v28);
      }
      sub_2445C4108();
      sub_2445747FC(v27, v28);
    }
  }
  v13 = (uint64_t)v35;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v35, v23, v16);
  a1 = v36;
  a7 = *v36;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = a7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v33 = a7[2];
  v32 = a7[3];
  if (v33 >= v32 >> 1)
  {
    a7 = (_QWORD *)sub_2445858AC(v32 > 1, v33 + 1, 1, (unint64_t)a7);
    *a1 = a7;
  }
  a7[2] = v33 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))((unint64_t)a7+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v33, v13, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, v16);
}

uint64_t sub_24457DC7C(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_2445BC528(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = sub_24457DCE4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24457DCE4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  int v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  int v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  char v122;
  char v123;
  int v124;
  char v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;

  v2 = a1;
  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v91 = 0;
      v92 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v94 = *(_QWORD *)(v92 + 80 * i + 40);
        v95 = v91;
        do
        {
          v96 = v92 + v95;
          if (v94 >= *(_QWORD *)(v92 + v95 + 40))
            break;
          if (!v92)
            goto LABEL_142;
          v97 = *(_QWORD *)(v96 + 80);
          v98 = v92 + v95;
          v99 = *(_QWORD *)(v92 + v95 + 88);
          result = *(unsigned __int8 *)(v96 + 96);
          v100 = *(_BYTE *)(v92 + v95 + 128);
          v101 = *(_DWORD *)(v92 + v95 + 132);
          v102 = *(_BYTE *)(v92 + v95 + 136);
          v103 = *(_OWORD *)(v92 + v95 + 104);
          v104 = *(_OWORD *)(v92 + v95 + 144);
          v105 = *(_OWORD *)(v96 + 48);
          *(_OWORD *)(v96 + 112) = *(_OWORD *)(v96 + 32);
          *(_OWORD *)(v96 + 128) = v105;
          *(_OWORD *)(v96 + 144) = *(_OWORD *)(v96 + 64);
          v106 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)(v96 + 80) = *(_OWORD *)v96;
          *(_OWORD *)(v96 + 96) = v106;
          *(_QWORD *)v98 = v97;
          *(_QWORD *)(v98 + 8) = v99;
          *(_BYTE *)(v96 + 16) = result;
          *(_OWORD *)(v98 + 24) = v103;
          *(_QWORD *)(v96 + 40) = v94;
          *(_BYTE *)(v98 + 48) = v100;
          *(_DWORD *)(v98 + 52) = v101;
          *(_BYTE *)(v98 + 56) = v102;
          v95 -= 80;
          *(_OWORD *)(v98 + 64) = v104;
        }
        while (v95 != -80);
        v91 += 80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v118 = result;
  v129 = v1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v127 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v107 = (char *)MEMORY[0x24BEE4AF8];
LABEL_104:
      v117 = v8;
      if (v11 >= 2)
      {
        v108 = *v2;
        do
        {
          v109 = v11 - 2;
          if (v11 < 2)
            goto LABEL_133;
          if (!v108)
            goto LABEL_146;
          v110 = v107;
          v111 = *(_QWORD *)&v107[16 * v109 + 32];
          v112 = *(_QWORD *)&v107[16 * v11 + 24];
          sub_24457E4E8((char *)(v108 + 80 * v111), (char *)(v108 + 80 * *(_QWORD *)&v107[16 * v11 + 16]), v108 + 80 * v112, v127);
          if (v129)
            break;
          if (v112 < v111)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v110 = sub_2445BC280((uint64_t)v110);
          if (v109 >= *((_QWORD *)v110 + 2))
            goto LABEL_135;
          v113 = &v110[16 * v109 + 32];
          *(_QWORD *)v113 = v111;
          *((_QWORD *)v113 + 1) = v112;
          v114 = *((_QWORD *)v110 + 2);
          if (v11 > v114)
            goto LABEL_136;
          memmove(&v110[16 * v11 + 16], &v110[16 * v11 + 32], 16 * (v114 - v11));
          v107 = v110;
          *((_QWORD *)v110 + 2) = v114 - 1;
          v11 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v117 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v117 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372398);
    v7 = sub_2445C43A8();
    *(_QWORD *)(v7 + 16) = v6;
    v117 = v7;
    v127 = (char *)(v7 + 32);
  }
  v9 = 0;
  v116 = v2;
  v10 = *v2;
  v128 = (char *)MEMORY[0x24BEE4AF8];
  v119 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(_QWORD *)(v10 + 80 * v9 + 40);
      v14 = *(_QWORD *)(v10 + 80 * v12 + 40);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (uint64_t *)(v10 + 200 + 80 * v12);
        v16 = v13;
        while (1)
        {
          v18 = *v15;
          v15 += 10;
          v17 = v18;
          if (v13 < v14 == v18 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12)
          goto LABEL_139;
        if (v12 < v9)
        {
          v19 = 80 * v9;
          v20 = 80 * v12;
          v21 = v9;
          v115 = v12;
          do
          {
            if (v12 != --v21)
            {
              if (!v10)
                goto LABEL_145;
              v22 = v10 + v19;
              v23 = *(_QWORD *)(v10 + v20);
              v24 = *(_QWORD *)(v10 + v20 + 8);
              v122 = *(_BYTE *)(v10 + v20 + 16);
              v126 = *(_QWORD *)(v10 + v20 + 40);
              v124 = *(_DWORD *)(v10 + v20 + 52);
              v125 = *(_BYTE *)(v10 + v20 + 48);
              v123 = *(_BYTE *)(v10 + v20 + 56);
              v120 = *(_OWORD *)(v10 + v20 + 24);
              v121 = *(_OWORD *)(v10 + v20 + 64);
              memmove((void *)(v10 + v20), (const void *)(v10 + v19 - 80), 0x50uLL);
              *(_QWORD *)(v22 - 80) = v23;
              *(_QWORD *)(v22 - 72) = v24;
              *(_BYTE *)(v22 - 64) = v122;
              *(_OWORD *)(v22 - 56) = v120;
              *(_QWORD *)(v22 - 40) = v126;
              *(_BYTE *)(v22 - 32) = v125;
              *(_DWORD *)(v22 - 28) = v124;
              *(_BYTE *)(v22 - 24) = v123;
              *(_OWORD *)(v22 - 16) = v121;
            }
            ++v12;
            v19 -= 80;
            v20 += 80;
          }
          while (v12 < v21);
          v3 = v119;
          v12 = v115;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_137;
    if (v9 - v12 >= v118)
      goto LABEL_39;
    v25 = v12 + v118;
    if (__OFADD__(v12, v118))
      goto LABEL_140;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v12)
      break;
    if (v9 != v25)
    {
      v76 = v10 + 64 + 80 * v9;
      v26 = v128;
      do
      {
        v77 = *(_QWORD *)(v10 + 80 * v9 + 40);
        v78 = v12;
        v79 = (_OWORD *)v76;
        do
        {
          if (v77 >= *((_QWORD *)v79 - 13))
            break;
          if (!v10)
            goto LABEL_143;
          v80 = v79 - 4;
          v81 = *((_QWORD *)v79 - 8);
          v82 = *((_QWORD *)v79 - 7);
          v83 = *((_BYTE *)v79 - 48);
          v84 = *((_BYTE *)v79 - 16);
          v85 = *((_DWORD *)v79 - 3);
          v86 = *((_BYTE *)v79 - 8);
          v87 = *(_OWORD *)((char *)v79 - 40);
          v88 = *v79;
          v89 = *(v79 - 6);
          v80[2] = *(v79 - 7);
          v80[3] = v89;
          *v79 = *(v79 - 5);
          v90 = *(v79 - 8);
          *v80 = *(v79 - 9);
          v80[1] = v90;
          *(v79 - 5) = v88;
          v79 -= 5;
          *((_QWORD *)v79 - 8) = v81;
          *((_QWORD *)v79 - 7) = v82;
          *((_BYTE *)v79 - 48) = v83;
          *(_OWORD *)((char *)v79 - 40) = v87;
          *((_QWORD *)v79 - 3) = v77;
          *((_BYTE *)v79 - 16) = v84;
          *((_DWORD *)v79 - 3) = v85;
          ++v78;
          *((_BYTE *)v79 - 8) = v86;
        }
        while (v9 != v78);
        ++v9;
        v76 += 80;
      }
      while (v9 != v25);
      v9 = v25;
      if (v25 < v12)
        goto LABEL_132;
      goto LABEL_40;
    }
LABEL_39:
    v26 = v128;
    if (v9 < v12)
      goto LABEL_132;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v26 = sub_2445BBEB0(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v28 = *((_QWORD *)v26 + 2);
    v27 = *((_QWORD *)v26 + 3);
    v11 = v28 + 1;
    if (v28 >= v27 >> 1)
      v26 = sub_2445BBEB0((char *)(v27 > 1), v28 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v11;
    v29 = v26 + 32;
    v30 = &v26[16 * v28 + 32];
    *(_QWORD *)v30 = v12;
    *((_QWORD *)v30 + 1) = v9;
    v128 = v26;
    if (v28)
    {
      while (1)
      {
        v31 = v11 - 1;
        if (v11 >= 4)
        {
          v36 = &v29[16 * v11];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_121;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_122;
          v43 = v11 - 2;
          v44 = &v29[16 * v11 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_124;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_127;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_131;
            v59 = v34 < v69;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v60 = *((_QWORD *)v26 + 4);
            v61 = *((_QWORD *)v26 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_70;
          }
          v33 = *((_QWORD *)v26 + 4);
          v32 = *((_QWORD *)v26 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_123;
        v43 = v11 - 2;
        v49 = &v29[16 * v11 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_126;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_129;
        if (__OFADD__(v53, v58))
          goto LABEL_130;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_76:
          if (v59)
            v31 = v43;
          goto LABEL_78;
        }
LABEL_70:
        if ((v54 & 1) != 0)
          goto LABEL_125;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_128;
        if (v65 < v53)
          goto LABEL_15;
LABEL_78:
        v70 = v31 - 1;
        if (v31 - 1 >= v11)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10)
          goto LABEL_144;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = &v29[16 * v31];
        v74 = *((_QWORD *)v73 + 1);
        sub_24457E4E8((char *)(v10 + 80 * *(_QWORD *)v71), (char *)(v10 + 80 * *(_QWORD *)v73), v10 + 80 * v74, v127);
        if (v129)
          goto LABEL_95;
        if (v74 < v72)
          goto LABEL_118;
        if (v31 > *((_QWORD *)v128 + 2))
          goto LABEL_119;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v29[16 * v70 + 8] = v74;
        v75 = *((_QWORD *)v128 + 2);
        if (v31 >= v75)
          goto LABEL_120;
        v26 = v128;
        v11 = v75 - 1;
        memmove(&v29[16 * v31], v73 + 16, 16 * (v75 - 1 - v31));
        *((_QWORD *)v128 + 2) = v75 - 1;
        if (v75 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v119;
    if (v9 >= v119)
    {
      v8 = v117;
      v107 = v128;
      v2 = v116;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_24457E4E8(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t result;
  char *v21;
  const void *v22;
  char *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 80;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 80;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -79)
    {
      if (a4 != __src || &__src[80 * v11] <= a4)
        memmove(a4, __src, 80 * v11);
      v16 = &v4[80 * v11];
      v21 = v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 80)
      {
        v17 = (char *)(a3 - 80);
        do
        {
          v18 = v17 + 80;
          if (*((_QWORD *)v16 - 5) >= *((_QWORD *)v6 - 5))
          {
            v21 = v16 - 80;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 80, 0x50uLL);
            v19 = v6;
            v16 -= 80;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 80;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 80, 0x50uLL);
            v23 = v6 - 80;
            if (v19 <= v7)
              break;
          }
          v17 -= 80;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_2445BC050((void **)&v23, &v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -79)
  {
    if (a4 != __dst || &__dst[80 * v9] <= a4)
      memmove(a4, __dst, 80 * v9);
    v12 = &v4[80 * v9];
    v21 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 80)
    {
      v13 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 5) >= *((_QWORD *)v13 + 5))
        {
          v4 = v13 + 80;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 80;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 80;
          }
        }
        else
        {
          v14 = v6 + 80;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x50uLL);
LABEL_18:
        v7 += 80;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_24457E79C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13[2];
  uint64_t v14[4];

  v13[0] = sub_2445C0670(a1);
  swift_bridgeObjectRetain();
  sub_2445C1000(v13);
  if (v2)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v13[0] + 16);
    if (v3)
    {
      v4 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
      do
      {
        v6 = *(v4 - 3);
        v5 = *(v4 - 2);
        v8 = *(v4 - 1);
        v7 = *v4;
        v10 = *(v4 - 4);
        v13[0] = *(v4 - 5);
        v9 = (char *)v13[0];
        v13[1] = v10;
        v14[0] = v6;
        v14[1] = v5;
        v14[2] = v8;
        v14[3] = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24457475C(v5, v8);
        swift_bridgeObjectRetain();
        sub_24457D53C(v9, v10, v14, a2);
        v4 += 6;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v5, v8);
        swift_bridgeObjectRelease();
        --v3;
      }
      while (v3);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_24457E910(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13[2];
  uint64_t v14[4];

  v13[0] = sub_2445C0958(a1);
  swift_bridgeObjectRetain();
  sub_2445C1024(v13);
  if (v2)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v13[0] + 16);
    if (v3)
    {
      v4 = (unint64_t *)(swift_bridgeObjectRetain() + 72);
      do
      {
        v5 = *(v4 - 3);
        v6 = *(v4 - 2);
        v7 = *(v4 - 1);
        v8 = *v4;
        v10 = *(v4 - 4);
        v13[0] = *(v4 - 5);
        v9 = v13[0];
        v13[1] = v10;
        v14[0] = v5;
        v14[1] = v6;
        v14[2] = v7;
        v14[3] = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24457475C(v7, v8);
        sub_24457C704(v9, v10, v14, a2);
        v4 += 6;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v7, v8);
        --v3;
      }
      while (v3);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_24457EA78(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x249512E54](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnumValue.init(stringValue:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = sub_24457466C(a3, a4);
  *(_QWORD *)(a4 + 40) = a1;
  *(_QWORD *)(a4 + 48) = a2;
  *(_BYTE *)(a4 + 56) = 0;
  return result;
}

uint64_t EnumValue.init(intValue:type:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_24457466C(a2, a3);
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 1;
  return result;
}

uint64_t EnumValue.type.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v4 = v1[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  return EnumSchemaDescribing.asPublic()(v4, v5, a1);
}

uint64_t EnumValueImpl.init(intValue:type:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 1;
  return sub_24457466C(a2, a3);
}

uint64_t EnumValueImpl.init(stringValue:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)(a4 + 40) = a1;
  *(_QWORD *)(a4 + 48) = a2;
  *(_BYTE *)(a4 + 56) = 0;
  return sub_24457466C(a3, a4);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValue.asInteger()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  Swift::Int v6;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v0, v3);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 40);
    swift_bridgeObjectRetain();
    v6 = v5(v1, v2, v3, v4);
    sub_24457ED14(v1, v2, 0);
    return v6;
  }
  return v1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValueImpl.asInteger()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  Swift::Int v6;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v0, v3);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 40);
    swift_bridgeObjectRetain();
    v6 = v5(v1, v2, v3, v4);
    sub_24457ED14(v1, v2, 0);
    return v6;
  }
  return v1;
}

uint64_t sub_24457ED14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValue.asString()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v2 = v0;
  v3 = *(_QWORD **)(v0 + 40);
  if ((*(_BYTE *)(v2 + 56) & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = *(_QWORD *)(v2 + 32);
    v6 = __swift_project_boxed_opaque_existential_1((_QWORD *)v2, v4);
    v7 = v3;
    v3 = v6;
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v7, v4, v5);
    if (!v1)
    {
      v3 = (_QWORD *)v8;
      v4 = v9;
    }
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 48);
    swift_bridgeObjectRetain();
  }
  v10 = (uint64_t)v3;
  v11 = (void *)v4;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValueImpl.asString()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v2 = v0;
  v3 = *(_QWORD **)(v0 + 40);
  if ((*(_BYTE *)(v2 + 56) & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = *(_QWORD *)(v2 + 32);
    v6 = __swift_project_boxed_opaque_existential_1((_QWORD *)v2, v4);
    v7 = v3;
    v3 = v6;
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v7, v4, v5);
    if (!v1)
    {
      v3 = (_QWORD *)v8;
      v4 = v9;
    }
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 48);
    swift_bridgeObjectRetain();
  }
  v10 = (uint64_t)v3;
  v11 = (void *)v4;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t EnumValueImpl.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244577E90(v1, a1);
}

uint64_t EnumValueImpl.asPublic()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24457F184(v1, a1);
}

uint64_t EnumValueImpl.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;

  v3 = v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2445C46C0();
  v4 = *(_QWORD *)(v1 + 40);
  if ((*(_BYTE *)(v3 + 56) & 1) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_5:
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    sub_2445C45C4();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v3, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, v5, v6);
  if (!v2)
    goto LABEL_5;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t sub_24457EF60(_QWORD *a1)
{
  return EnumValueImpl.encode(to:)(a1);
}

uint64_t _s17PoirotSchematizer13EnumValueImplV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
  v8 = v7;
  v10 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)a2, v10);
  if (v6 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10) && v8 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = sub_2445C45B8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      return v15 == v16;
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)a2, v24);
      v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 40);
      swift_bridgeObjectRetain();
      v27 = v26(v16, v17, v24, v25);
      sub_24457ED14(v16, v17, 0);
      return v15 == v27;
    }
  }
  v19 = *(_QWORD *)(a1 + 48);
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v20 = *(_QWORD *)(a1 + 24);
    v21 = *(_QWORD *)(a1 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)a1, v20);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 40);
    swift_bridgeObjectRetain();
    v23 = v22(v15, v19, v20, v21);
    sub_24457ED14(v15, v19, 0);
    return v23 == v16;
  }
  if (v15 == v16 && v19 == v17)
    return 1;
  else
    return sub_2445C45B8();
}

uint64_t sub_24457F184(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for EnumValueImpl(a2, a1, &type metadata for EnumValueImpl);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_24457F1E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s17PoirotSchematizer13EnumValueImplVwxx_0(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t _s17PoirotSchematizer13EnumValueImplVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_24457F1E0(v5, v6, v2);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t _s17PoirotSchematizer13EnumValueImplVwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, a2);
  v4 = v2[5];
  v5 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  sub_24457F1E0(v4, v5, (char)v2);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  sub_24457ED14(v6, v7, v8);
  return a1;
}

uint64_t _s17PoirotSchematizer13EnumValueImplVwta_0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v5;
  sub_24457ED14(v6, v7, v8);
  return a1;
}

uint64_t _s17PoirotSchematizer13EnumValueImplVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24457F3A8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnumValueImpl()
{
  return &type metadata for EnumValueImpl;
}

uint64_t destroy for EnumValueImpl.Container(uint64_t a1)
{
  return sub_24457ED14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s17PoirotSchematizer13EnumValueImplV9ContainerOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24457F1E0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EnumValueImpl.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24457F1E0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_24457ED14(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for EnumValueImpl.Container(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_24457ED14(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnumValueImpl.Container(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnumValueImpl.Container(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_24457F59C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_24457F5A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EnumValueImpl.Container()
{
  return &type metadata for EnumValueImpl.Container;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AnyKey()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for AnyKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AnyKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyKey()
{
  return &type metadata for AnyKey;
}

uint64_t sub_24457F6FC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24457F728@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_24457F730()
{
  return 0;
}

void sub_24457F73C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_24457F744()
{
  sub_24457F8E4();
  return sub_2445C46D8();
}

uint64_t sub_24457F76C()
{
  sub_24457F8E4();
  return sub_2445C46E4();
}

uint64_t sub_24457F794()
{
  return MEMORY[0x24BEE0D88];
}

_QWORD *sub_24457F7A0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

unint64_t sub_24457F7B0()
{
  unint64_t result;

  result = qword_2573723B0;
  if (!qword_2573723B0)
  {
    result = MEMORY[0x249512E54](&unk_2445C605C, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_2573723B0);
  }
  return result;
}

uint64_t sub_24457F7F4()
{
  return MEMORY[0x24BEE0D90];
}

unint64_t sub_24457F804()
{
  unint64_t result;

  result = qword_2573723B8;
  if (!qword_2573723B8)
  {
    result = MEMORY[0x249512E54](&unk_2445C6094, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_2573723B8);
  }
  return result;
}

uint64_t sub_24457F848()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_24457F858()
{
  unint64_t result;

  result = qword_2573723C0;
  if (!qword_2573723C0)
  {
    result = MEMORY[0x249512E54](&unk_2445C600C, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_2573723C0);
  }
  return result;
}

unint64_t sub_24457F8A0()
{
  unint64_t result;

  result = qword_2573723C8;
  if (!qword_2573723C8)
  {
    result = MEMORY[0x249512E54](&unk_2445C6034, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_2573723C8);
  }
  return result;
}

unint64_t sub_24457F8E4()
{
  unint64_t result;

  result = qword_2573723D0;
  if (!qword_2573723D0)
  {
    result = MEMORY[0x249512E54](&unk_2445C6114, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_2573723D0);
  }
  return result;
}

_QWORD *sub_24457F930(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[64];
  _QWORD v11[7];

  v5 = a2[3];
  v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 56))(v11, v5, v6);
  if (!v2)
  {
    v8 = a2[3];
    v9 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 48))(v8, v9);
    sub_2445742AC(a1, (uint64_t)v10);
    __asm { BR              X10 }
  }
  return result;
}

void sub_24457FA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 a22)
{
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = (int)a22;
  sub_24457403C(v24 - 136, (uint64_t)&a13);
  if ((_BYTE)a18)
  {
    if (a18 != 2)
      goto LABEL_12;
    if (a16 | a17 | a13 | a15 | a14)
    {
      v26 = a16 | a17 | a15 | a14;
      if (a13 != 2 || v26)
      {
        if (a13 == 4 && !v26)
        {
          sub_244578EAC(v25, v22);
          goto LABEL_13;
        }
LABEL_12:
        sub_24457FE80();
        swift_allocError();
        v28 = v27;
        v29 = v27 + 64;
        sub_2445742AC(v23, v27);
        sub_24457403C(v24 - 136, v29);
        *(_BYTE *)(v28 + 105) = 0;
        swift_willThrow();
        sub_2445752C0(v24 - 136);
        JUMPOUT(0x24457F9C8);
      }
      sub_244578BE8((8 * v22));
      sub_244578BE8((2 * v25) ^ (v25 >> 63));
LABEL_13:
      JUMPOUT(0x24457F9C4);
    }
  }
  else
  {
    sub_2445752C0((uint64_t)&a13);
  }
  sub_244578BE8((8 * v22));
  sub_244578BE8(v25);
  goto LABEL_13;
}

uint64_t sub_24457FE4C(uint64_t a1)
{
  destroy for EnumValueImpl();
  return a1;
}

unint64_t sub_24457FE80()
{
  unint64_t result;

  result = qword_2573723D8;
  if (!qword_2573723D8)
  {
    result = MEMORY[0x249512E54](&unk_2445C6244, &type metadata for SerializationError);
    atomic_store(result, (unint64_t *)&qword_2573723D8);
  }
  return result;
}

_QWORD *sub_24457FEC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t ObjectType;
  uint64_t v18;
  _QWORD *result;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int16 v51;
  _BYTE v52[40];
  uint64_t v53;
  uint64_t v54;

  v45 = a1;
  v46 = a2;
  v40 = a4;
  v6 = sub_2445C3FDC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2445C403C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *v4;
  v38 = *((_QWORD *)v4 + 1);
  v37 = *((_QWORD *)v4 + 2);
  v44 = *((_QWORD *)v4 + 3);
  v39 = v4[32];
  v16 = *((_DWORD *)v4 + 9);
  v42 = v4[40];
  v43 = v16;
  v35 = *((_QWORD *)v4 + 6);
  v41 = *((_QWORD *)v4 + 7);
  ObjectType = swift_getObjectType();
  v18 = v54;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(a3 + 24))(&v47, 0xD000000000000024, 0x80000002445C4B10, ObjectType, a3);
  if (v18)
    return result;
  v20 = v41;
  v33 = v15;
  v34 = v12;
  v54 = v11;
  v21 = v42;
  v22 = v43;
  v53 = sub_2445C41D4();
  sub_24457466C(&v47, (uint64_t)v52);
  v23 = v46;
  swift_bridgeObjectRetain();
  result = (_QWORD *)SchematizedDataComposer.subscript.setter(v45, v23, 1701667182, 0xE400000000000000);
  if (v44 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v44 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  LODWORD(v47) = v44;
  HIBYTE(v51) = 0;
  SchematizedDataComposer.subscript.setter((uint64_t)&v47, 0x7265626D756ELL, 0xE600000000000000);
  if (v20 >> 60 == 15)
  {
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    v51 = -256;
    v24 = v36;
    v25 = v35;
  }
  else
  {
    v25 = v35;
    *(_QWORD *)&v47 = v35;
    *((_QWORD *)&v47 + 1) = v20;
    HIBYTE(v51) = 9;
    v24 = v36;
  }
  sub_24457475C(v25, v20);
  SchematizedDataComposer.subscript.setter((uint64_t)&v47, 0x736E6F6974706FLL, 0xE700000000000000);
  LOBYTE(v47) = v24;
  v26 = v33;
  sub_24457D41C((uint64_t)&v47);
  v27 = sub_2445C4030();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v54);
  SchematizedDataComposer.subscript.setter(v27, 0, 1701869940, 0xE400000000000000);
  v28 = v37;
  swift_bridgeObjectRetain();
  SchematizedDataComposer.subscript.setter(v38, v28, 0x6D616E5F65707974, 0xE900000000000065);
  v29 = (unsigned int *)MEMORY[0x24BE5BC28];
  if (!v39)
    v29 = (unsigned int *)MEMORY[0x24BE5BC18];
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *v29, v6);
  v30 = sub_2445C3FD0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  SchematizedDataComposer.subscript.setter(v30, 0, 0x6C6562616CLL, 0xE500000000000000);
  if ((v21 & 1) != 0)
  {
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    v51 = -256;
  }
  else
  {
    LODWORD(v47) = v22;
    HIBYTE(v51) = 0;
  }
  v31 = v40;
  SchematizedDataComposer.subscript.setter((uint64_t)&v47, 0x6E695F666F656E6FLL, 0xEB00000000786564);
  SchematizedDataComposer.compose()(v31);
  return (_QWORD *)sub_24457C40C((uint64_t)v52);
}

uint64_t sub_2445802BC()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v8 = MEMORY[0x24BEE0F88];
  v9 = MEMORY[0x24BDCFB90];
  v7 = *(_OWORD *)(v0 + 56);
  v1 = __swift_project_boxed_opaque_existential_1(&v7, MEMORY[0x24BEE0F88]);
  v2 = (_BYTE *)*v1;
  if (*v1 && (v3 = (_BYTE *)v1[1], v4 = v3 - v2, v3 != v2))
  {
    if (v4 <= 14)
    {
      v5 = sub_2445C3A30(v2, v3);
    }
    else if ((unint64_t)v4 >= 0x7FFFFFFF)
    {
      v5 = sub_2445C3B70((uint64_t)v2, (uint64_t)v3);
    }
    else
    {
      v5 = sub_2445C3AF0((uint64_t)v2, (uint64_t)v3);
    }
  }
  else
  {
    v5 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

uint64_t sub_244580374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[48];
  _QWORD v13[7];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v8 = *(_QWORD *)(v3 + 64);
  v14 = *(_QWORD *)(v3 + 56);
  v15 = v8;
  if (v14)
    v9 = v8 - v14;
  else
    v9 = 0;
  v17 = 0;
  v18 = 0;
  v16 = v9;
  v19 = 1;
  sub_244577E90(v3 + 16, (uint64_t)v12);
  v12[40] = 1;
  swift_bridgeObjectRetain();
  result = sub_2445970B8(a1, a2, (uint64_t)v12, v13);
  if (!v4)
  {
    if (*(_QWORD *)(v13[0] + 16))
    {
      sub_244572CCC(v13, 0, a3);
    }
    else
    {
      sub_244578600();
      swift_allocError();
      *(_QWORD *)v11 = 0xD000000000000011;
      *(_QWORD *)(v11 + 8) = 0x80000002445C5000;
      *(_BYTE *)(v11 + 16) = 5;
      swift_willThrow();
    }
    return sub_2445732C8((uint64_t)v13);
  }
  return result;
}

_QWORD *sub_244580494@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[11];
  char v19;
  _QWORD v20[6];

  v4 = v2;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 56))(v20, v7, v8);
  if (!v3)
  {
    v10 = a1[3];
    v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
    v13 = *(_QWORD *)(v4 + 56);
    v14 = *(_QWORD *)(v4 + 64);
    v15 = v14 - v13;
    if (!v13)
      v15 = 0;
    v18[6] = *(_QWORD *)(v4 + 56);
    v18[7] = v14;
    v18[9] = 0;
    v18[10] = 0;
    v18[8] = v15;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(qword_2543F6F48);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_2445C6170;
    *(_QWORD *)(v16 + 32) = v12;
    *(_QWORD *)(v16 + 40) = 0;
    *(_BYTE *)(v16 + 48) = 0;
    sub_24457403C((uint64_t)v20, (uint64_t)v18);
    v17 = v16;
    sub_244572CCC(&v17, 0, a2);
    sub_2445732C8((uint64_t)&v17);
    return (_QWORD *)sub_2445752C0((uint64_t)v20);
  }
  return result;
}

_QWORD *sub_2445805D8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[7];

  if (a2[2])
  {
    v5 = v4;
    v6 = result;
    v21[6] = a4;
    v8 = a2[4];
    v7 = a2[5];
    v10 = result[3];
    v9 = result[4];
    __swift_project_boxed_opaque_existential_1(result, v10);
    v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v11(v18, v10, v9);
    v12 = v19;
    v13 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    v14(v21, v8, v7, v12, v13);
    swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v18[0] = 0;
      v15 = v6[4];
      v16 = __swift_project_boxed_opaque_existential_1(v6, v6[3]);
      MEMORY[0x24BDAC7A8](v16, v17);
      (*(void (**)(_QWORD *, uint64_t (*)(uint64_t)))(v15 + 64))(v21, sub_244581748);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_244580798(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t (*a8)(void), uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20[3];
  char v21;
  _BYTE v22[40];

  if ((a6 & 1) == 0)
  {
    v13 = *a2;
    if (*a2 != a5)
    {
LABEL_22:
      if (!__OFADD__(v13++, 1))
        goto LABEL_31;
      __break(1u);
      goto LABEL_25;
    }
  }
  if ((a7 & 1) != 0)
  {
    result = a8();
    v13 = *a2 + 1;
    v14 = __OFADD__(*a2, 1);
    if (!v10)
      goto LABEL_28;
    if (!v14)
      goto LABEL_31;
    __break(1u);
  }
  sub_2445742AC(result, (uint64_t)v20);
  if (v21 != 10)
  {
LABEL_25:
    result = sub_244574078((uint64_t)v20);
    v13 = *a2 + 1;
    if (!__OFADD__(*a2, 1))
      goto LABEL_31;
    __break(1u);
LABEL_28:
    if (v14)
    {
      __break(1u);
      goto LABEL_30;
    }
LABEL_31:
    *a2 = v13;
    return result;
  }
  sub_24457466C(v20, (uint64_t)v22);
  v15 = *(_QWORD *)(a10 + 16);
  sub_2445C4630();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  v17 = *(_QWORD *)(v16 + 16);
  swift_release();
  if (v17 == v15 - (v15 != 0))
  {
    v18 = swift_dynamicCastClass();
    if (!v18)
    {
      swift_bridgeObjectRelease();
      v18 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = sub_2445A27A0(a10, a10 + 32, v15 != 0, (2 * v15) | 1);
  }
  swift_bridgeObjectRelease();
  sub_2445805D8(v22, v18, a8, a9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  result = swift_release();
  v13 = *a2 + 1;
  v14 = __OFADD__(*a2, 1);
  if (v10)
  {
    if (!v14)
      goto LABEL_31;
    __break(1u);
    goto LABEL_22;
  }
LABEL_30:
  if (!v14)
    goto LABEL_31;
  __break(1u);
  return result;
}

uint64_t sub_244580974@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[64];
  __int128 v33[2];
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = v2;
  v38 = a2;
  v6 = sub_2445C3D9C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  v13 = sub_2445A5BD8((uint64_t)v10, v4[7], v4[8], MEMORY[0x24BEE4AF8]);
  if (v3)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  v16 = v13;
  v17 = v14;
  v18 = v38;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  if ((v17 & 1) != 0)
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    result = sub_2445816D0((uint64_t)v33, &qword_257372408);
    *(_WORD *)(v18 + 96) = 0;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)v18 = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
  }
  else
  {
    v19 = a1[3];
    v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(v16, v19, v20);
    v23 = v22;
    v24 = v4[5];
    v25 = v4[6];
    __swift_project_boxed_opaque_existential_1(v4 + 2, v24);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v33, v21, v23, v24, v25);
    swift_bridgeObjectRelease();
    sub_24457466C(v33, (uint64_t)v35);
    sub_244580494(v35, (uint64_t)v32);
    if (v32[57] == 255)
    {
      sub_2445816D0((uint64_t)v32, &qword_2543F6F40);
      v26 = v36;
      v27 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v27 + 8) + 8))(v26);
      v30 = v29;
      sub_244578600();
      swift_allocError();
      *(_QWORD *)v31 = v28;
      *(_QWORD *)(v31 + 8) = v30;
      *(_BYTE *)(v31 + 16) = 3;
      swift_willThrow();
    }
    else
    {
      sub_24458170C((uint64_t)v32, (uint64_t)v33);
      sub_244577E90((uint64_t)v35, v18);
      sub_24458170C((uint64_t)v33, v18 + 40);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  return result;
}

uint64_t sub_244580C18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_2445C3D9C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  v11 = sub_2445A5BD8((uint64_t)v8, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), MEMORY[0x24BEE4AF8]);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = v11;
  v15 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if ((v15 & 1) != 0)
    return 0;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 40))(v14, v16, v17);
}

uint64_t sub_244580D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_2445C3C28();
  MEMORY[0x24BDAC7A8](v0, v1);
  sub_2445C3C58();
  swift_allocObject();
  sub_2445C3C4C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573723E8);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2445C6180;
  sub_2445C3C1C();
  sub_2445C3C10();
  sub_244581464(&qword_2573723F0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8], MEMORY[0x24BDCB2C8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573723F8);
  sub_2445814A4();
  sub_2445C4498();
  sub_2445C3C34();
  sub_244581464(&qword_2573723E0, v2, (uint64_t (*)(uint64_t))type metadata accessor for UnsafeSchematizedData, (uint64_t)&unk_2445C61B8);
  v3 = sub_2445C3C40();
  swift_release();
  return v3;
}

char *sub_244580F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;

  v1 = v0;
  v2 = sub_2445C424C();
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2445C3C28();
  MEMORY[0x24BDAC7A8](v6, v7);
  sub_2445C3C58();
  swift_allocObject();
  sub_2445C3C4C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573723E8);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2445C6180;
  sub_2445C3C1C();
  sub_2445C3C10();
  v20 = v8;
  sub_244581464(&qword_2573723F0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8], MEMORY[0x24BDCB2C8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573723F8);
  sub_2445814A4();
  sub_2445C4498();
  sub_2445C3C34();
  v20 = v1;
  sub_244581464(&qword_2573723E0, v9, (uint64_t (*)(uint64_t))type metadata accessor for UnsafeSchematizedData, (uint64_t)&unk_2445C61B8);
  v10 = v19[1];
  v11 = sub_2445C3C40();
  if (!v10)
  {
    v13 = v11;
    v14 = v12;
    sub_2445C4240();
    v5 = (char *)sub_2445C4234();
    v16 = v15;
    sub_2445747FC(v13, v14);
    if (!v16)
    {
      sub_244578600();
      swift_allocError();
      *(_QWORD *)v18 = 0xD000000000000017;
      *(_QWORD *)(v18 + 8) = 0x80000002445C4FE0;
      *(_BYTE *)(v18 + 16) = 2;
      swift_willThrow();
    }
  }
  swift_release();
  return v5;
}

uint64_t sub_244581170()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnsafeSchematizedData()
{
  return objc_opt_self();
}

uint64_t sub_2445811B4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_244577E90(*v1 + 16, a1);
}

uint64_t sub_2445811D4()
{
  return sub_2445802BC();
}

uint64_t sub_2445811F4()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 56);
}

_QWORD *sub_244581200@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244580494(a1, a2);
}

uint64_t sub_244581220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244580374(a1, a2, a3);
}

_QWORD *sub_244581240(_QWORD *a1, void (*a2)(_QWORD))
{
  return sub_24459EA68(a1, a2);
}

uint64_t sub_244581290(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v12;
  char *v13;
  char *v15;
  _QWORD v16[5];

  v12 = *v6;
  v13 = sub_2445A3E90(a1, a2);
  if (v7)
    return MEMORY[0x249512DE8](v7);
  v15 = v13;
  v16[3] = a5;
  v16[4] = a6;
  v16[0] = v12;
  swift_retain();
  sub_2445805D8(v16, v15, a3, a4);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t sub_24458132C(void (*a1)(__int128 *))
{
  uint64_t v1;

  return sub_2445C0388((_QWORD *)(*(_QWORD *)v1 + 16), a1);
}

uint64_t sub_244581388(_QWORD *a1)
{
  return sub_244580C18(a1);
}

uint64_t sub_2445813A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244580974(a1, a2);
}

uint64_t sub_2445813C8()
{
  return sub_244580D58();
}

char *sub_2445813E8()
{
  return sub_244580F00();
}

uint64_t sub_244581408(_QWORD *a1)
{
  return sub_2445814F0(a1);
}

uint64_t sub_244581428(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_244581464(&qword_2573723E0, a2, (uint64_t (*)(uint64_t))type metadata accessor for UnsafeSchematizedData, (uint64_t)&unk_2445C61B8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_244581464(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x249512E54](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2445814A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257372400;
  if (!qword_257372400)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573723F8);
    result = MEMORY[0x249512E54](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_257372400);
  }
  return result;
}

uint64_t sub_2445814F0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16[5];
  char v17;
  unint64_t v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257372410);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24457F8E4();
  sub_2445C46CC();
  v18 = sub_2445758C0(MEMORY[0x24BEE4AF8]);
  v10 = v3[7];
  v11 = v3[8];
  v12 = v11 - v10;
  if (!v10)
    v12 = 0;
  v16[0] = v3[7];
  v16[1] = v11;
  v16[3] = 0;
  v16[4] = 0;
  v16[2] = v12;
  v17 = 1;
  sub_2445C009C(v3 + 2, v16, (uint64_t *)&v18);
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = swift_bridgeObjectRetain();
    sub_244599098(v13);
    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_244581644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a5;
  v15 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  v11 = swift_allocObject();
  sub_24457466C(&v13, v11 + 16);
  *(_QWORD *)(v11 + 56) = a2;
  *(_QWORD *)(v11 + 64) = a3;
  return v11;
}

uint64_t sub_2445816D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24458170C(uint64_t a1, uint64_t a2)
{
  __swift_memcpy58_8(a2, a1);
  return a2;
}

uint64_t sub_244581748(uint64_t a1)
{
  uint64_t v1;

  return sub_244580798(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_BYTE *)(v1 + 49), *(uint64_t (**)(void))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t Reader.init(unsafeData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = a2 - result;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  if (!result)
    v3 = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = v3;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Reader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Reader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Reader()
{
  return &type metadata for Reader;
}

uint64_t sub_244581834(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;

  switch(result & 7)
  {
    case 0:
      v2 = *v1;
      if (*v1)
      {
        v3 = v1[1] - v2;
        v4 = v1[3];
        if (v4 >= v3)
          goto LABEL_38;
      }
      else
      {
        v4 = v1[3];
        if ((v4 & 0x8000000000000000) == 0)
          goto LABEL_38;
        v3 = 0;
      }
      v7 = v4 + 1;
      if (*(char *)(v2 + v4) < 0)
        goto LABEL_25;
      v1[3] = v7;
      return result;
    case 1:
      v5 = v1[3];
      v6 = __OFADD__(v5, 8);
      v4 = v5 + 8;
      if (!v6)
        goto LABEL_13;
      __break(1u);
LABEL_8:
      v7 = *v1;
      if (*v1)
      {
        v2 = v1[1] - v7;
        v8 = v1[3];
        if (v8 >= v2)
          goto LABEL_38;
      }
      else
      {
        v8 = v1[3];
        if ((v8 & 0x8000000000000000) == 0)
          goto LABEL_38;
        v2 = 0;
      }
      v3 = *(unsigned __int8 *)(v7 + v8);
      v10 = v8 + 1;
      if ((*(char *)(v7 + v8) & 0x80000000) == 0)
        goto LABEL_21;
      if (v10 >= v2)
      {
LABEL_38:
        sub_24457FE80();
        swift_allocError();
        *(_QWORD *)v17 = 1;
        *(_OWORD *)(v17 + 8) = 0u;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *(_OWORD *)(v17 + 56) = 0u;
        *(_OWORD *)(v17 + 72) = 0u;
        *(_OWORD *)(v17 + 88) = 0u;
        *(_WORD *)(v17 + 104) = 512;
        return swift_willThrow();
      }
      v3 &= 0x7Fu;
      ++v7;
      v15 = 7;
      while (1)
      {
        v10 = v8 + 2;
        v3 |= (unint64_t)(*(_BYTE *)(v7 + v8) & 0x7F) << v15;
        if ((*(_BYTE *)(v7 + v8) & 0x80) == 0)
          break;
        if (v10 < v2)
        {
          ++v8;
          v16 = v15 > 0x38;
          v15 += 7;
          if (!v16)
            continue;
        }
        goto LABEL_38;
      }
LABEL_21:
      v1[3] = v10;
      if ((v3 & 0x80000000) != 0)
        goto LABEL_38;
      v4 = v10 + v3;
      if (!__OFADD__(v10, v3))
      {
LABEL_13:
        v1[3] = v4;
        return result;
      }
      __break(1u);
LABEL_25:
      if (v7 >= v3)
        goto LABEL_38;
      v11 = v2 + 1;
      v12 = 7;
      while (1)
      {
        v13 = v4 + 2;
        if ((*(char *)(v11 + v4) & 0x80000000) == 0)
          break;
        if (v13 < v3)
        {
          ++v4;
          v14 = v12 >= 0x39;
          v12 += 7;
          if (!v14)
            continue;
        }
        goto LABEL_38;
      }
      v1[3] = v13;
      return result;
    case 2:
      goto LABEL_8;
    case 3:
      return sub_244581A44(result >> 3);
    case 4:
      goto LABEL_38;
    case 5:
      v9 = v1[3];
      v6 = __OFADD__(v9, 4);
      v4 = v9 + 4;
      if (!v6)
        goto LABEL_13;
      goto LABEL_42;
    default:
      __break(1u);
LABEL_42:
      __break(1u);
      JUMPOUT(0x244581A2CLL);
  }
}

uint64_t sub_244581A44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257372418);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2445C6170;
  *(_QWORD *)(inited + 32) = a1;
  v5 = *v1;
  v6 = v1[1] - *v1;
  v7 = *v1 + 1;
  while (1)
  {
    v8 = v1[3];
    if (v5)
    {
      v9 = v6;
      if (v8 >= v6)
        break;
    }
    else
    {
      if ((v8 & 0x8000000000000000) == 0)
        break;
      v9 = 0;
    }
    v10 = *(unsigned __int8 *)(v5 + v8);
    v11 = v8 + 1;
    if ((*(char *)(v5 + v8) & 0x80000000) == 0)
    {
      v1[3] = v11;
      goto LABEL_17;
    }
    if (v11 >= v9)
      break;
    v10 &= 0x7Fu;
    v12 = 7;
    while (1)
    {
      v11 = v8 + 2;
      v10 |= (unint64_t)(*(_BYTE *)(v7 + v8) & 0x7F) << v12;
      if ((*(_BYTE *)(v7 + v8) & 0x80) == 0)
        break;
      if (v11 < v9)
      {
        ++v8;
        v13 = v12 > 0x38;
        v12 += 7;
        if (!v13)
          continue;
      }
      goto LABEL_70;
    }
    v1[3] = v11;
    if (v10 > 0xFFFFFFFE)
      break;
LABEL_17:
    v14 = v10 < 8 || (v10 & 7) >= 6;
    if (v14)
      break;
    switch(v10 & 7)
    {
      case 0uLL:
        if (v5)
        {
          v15 = v6;
          if (v11 >= v6)
            goto LABEL_70;
        }
        else
        {
          if ((v11 & 0x8000000000000000) == 0)
            goto LABEL_70;
          v15 = 0;
        }
        v24 = v11 + 1;
        if (*(char *)(v5 + v11) < 0)
        {
          if (v24 >= v15)
            goto LABEL_70;
          v27 = 7;
          while (1)
          {
            v28 = v11 + 2;
            if ((*(char *)(v7 + v11) & 0x80000000) == 0)
              break;
            if (v28 < v15)
            {
              ++v11;
              v14 = v27 >= 0x39;
              v27 += 7;
              if (!v14)
                continue;
            }
            goto LABEL_70;
          }
          v1[3] = v28;
          if (!*(_QWORD *)(inited + 16))
            return swift_bridgeObjectRelease();
        }
        else
        {
          v1[3] = v24;
          if (!*(_QWORD *)(inited + 16))
            return swift_bridgeObjectRelease();
        }
        break;
      case 1uLL:
        v16 = __OFADD__(v11, 8);
        v17 = v11 + 8;
        if (!v16)
          goto LABEL_51;
        goto LABEL_74;
      case 2uLL:
        if (v5)
        {
          v18 = v6;
          if (v11 >= v6)
            goto LABEL_70;
        }
        else
        {
          if ((v11 & 0x8000000000000000) == 0)
            goto LABEL_70;
          v18 = 0;
        }
        LODWORD(v25) = *(unsigned __int8 *)(v5 + v11);
        v26 = v11 + 1;
        if ((*(char *)(v5 + v11) & 0x80000000) == 0)
          goto LABEL_49;
        if (v26 >= v18)
          goto LABEL_70;
        v25 &= 0x7Fu;
        v29 = 7;
        while (1)
        {
          v26 = v11 + 2;
          v25 |= (unint64_t)(*(_BYTE *)(v7 + v11) & 0x7F) << v29;
          if ((*(_BYTE *)(v7 + v11) & 0x80) == 0)
            break;
          if (v26 < v18)
          {
            ++v11;
            v13 = v29 > 0x38;
            v29 += 7;
            if (!v13)
              continue;
          }
          goto LABEL_70;
        }
LABEL_49:
        v1[3] = v26;
        if ((v25 & 0x80000000) != 0)
          goto LABEL_70;
        v17 = v26 + v25;
        if (__OFADD__(v26, v25))
LABEL_76:
          __break(1u);
LABEL_51:
        v1[3] = v17;
LABEL_52:
        if (!*(_QWORD *)(inited + 16))
          return swift_bridgeObjectRelease();
        continue;
      case 3uLL:
        v20 = *(_QWORD *)(inited + 16);
        v19 = *(_QWORD *)(inited + 24);
        if (v20 >= v19 >> 1)
        {
          v30 = (_QWORD *)inited;
          v31 = v3;
          v32 = sub_2445859E0((_QWORD *)(v19 > 1), v20 + 1, 1, v30);
          v3 = v31;
          inited = (uint64_t)v32;
        }
        *(_QWORD *)(inited + 16) = v20 + 1;
        *(_QWORD *)(inited + 8 * v20 + 32) = v10 >> 3;
        if (!*(_QWORD *)(inited + 16))
          return swift_bridgeObjectRelease();
        continue;
      case 4uLL:
        v21 = *(_QWORD *)(inited + 16);
        if (v21)
        {
          v22 = v21 - 1;
          v23 = *(_QWORD *)(inited + 8 * v22 + 32);
          *(_QWORD *)(inited + 16) = v22;
          if (v23 == v10 >> 3)
            goto LABEL_52;
        }
        swift_bridgeObjectRelease();
        sub_24457FE80();
        swift_allocError();
        *(_QWORD *)v35 = 1;
        *(_OWORD *)(v35 + 8) = 0u;
        *(_OWORD *)(v35 + 24) = 0u;
        *(_OWORD *)(v35 + 40) = 0u;
        *(_OWORD *)(v35 + 56) = 0u;
        *(_OWORD *)(v35 + 72) = 0u;
        *(_OWORD *)(v35 + 88) = 0u;
        *(_WORD *)(v35 + 104) = 512;
        return swift_willThrow();
      case 5uLL:
        v16 = __OFADD__(v11, 4);
        v17 = v11 + 4;
        if (!v16)
          goto LABEL_51;
        goto LABEL_75;
      default:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
    }
  }
LABEL_70:
  sub_24457FE80();
  swift_allocError();
  *(_QWORD *)v33 = 1;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  *(_OWORD *)(v33 + 72) = 0u;
  *(_OWORD *)(v33 + 88) = 0u;
  *(_WORD *)(v33 + 104) = 512;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for SerializationError(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 105);
  if (v2 >= 2)
    v2 = *(_DWORD *)result + 2;
  if (v2 == 1)
  {
    if (*(unsigned __int8 *)(result + 40) <= 1u)
      return __swift_destroy_boxed_opaque_existential_1(v1);
  }
  else if (!v2)
  {
    switch(*(_BYTE *)(result + 57))
    {
      case 7:
        __swift_destroy_boxed_opaque_existential_1(result);
        result = sub_24457ED14(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
        break;
      case 8:
        result = swift_bridgeObjectRelease();
        break;
      case 9:
      case 0xA:
        result = __swift_destroy_boxed_opaque_existential_1(result);
        break;
      default:
        break;
    }
    if (*(unsigned __int8 *)(v1 + 104) < 2u)
    {
      v1 += 64;
      return __swift_destroy_boxed_opaque_existential_1(v1);
    }
  }
  return result;
}

uint64_t initializeWithCopy for SerializationError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = *(unsigned __int8 *)(a2 + 105);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    if (*(_BYTE *)(a2 + 40) == 1)
    {
      v14 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (*(_BYTE *)(a2 + 40))
    {
      v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v15;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(a1 + 105) = 1;
  }
  else
  {
    if (!v4)
    {
      switch(*(_BYTE *)(a2 + 57))
      {
        case 7:
          v5 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v5;
          (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
          v6 = *(_QWORD *)(a2 + 40);
          v7 = *(_QWORD *)(a2 + 48);
          v8 = *(_BYTE *)(a2 + 56);
          sub_24457F1E0(v6, v7, v8);
          *(_QWORD *)(a1 + 40) = v6;
          *(_QWORD *)(a1 + 48) = v7;
          *(_BYTE *)(a1 + 56) = v8;
          v9 = 7;
          goto LABEL_18;
        case 8:
          v17 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v17;
          *(_BYTE *)(a1 + 57) = 8;
          swift_bridgeObjectRetain();
          break;
        case 9:
          v18 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v18;
          (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1, a2);
          v9 = 9;
          goto LABEL_18;
        case 0xA:
          v19 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v19;
          (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
          v9 = 10;
LABEL_18:
          *(_BYTE *)(a1 + 57) = v9;
          break;
        default:
          v16 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v16;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
          break;
      }
      v20 = (_OWORD *)(a1 + 64);
      v21 = (_OWORD *)(a2 + 64);
      if (*(_BYTE *)(a2 + 104) == 1)
      {
        v23 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 88) = v23;
        (**(void (***)(_OWORD *, _OWORD *))(v23 - 8))(v20, v21);
        *(_BYTE *)(a1 + 104) = 1;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          v22 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(a1 + 88) = v22;
          (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
          *(_WORD *)(a1 + 104) = 0;
          return a1;
        }
        v24 = *(_OWORD *)(a2 + 80);
        *v20 = *v21;
        *(_OWORD *)(a1 + 80) = v24;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
      }
      *(_BYTE *)(a1 + 105) = 0;
      return a1;
    }
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 90) = *(_OWORD *)(a2 + 90);
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for SerializationError(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v2 = a1;
  if ((__int128 *)a1 == a2)
    return v2;
  v4 = *(unsigned __int8 *)(a1 + 105);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    if (*(unsigned __int8 *)(a1 + 40) <= 1u)
LABEL_14:
      __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else if (!v4)
  {
    switch(*(_BYTE *)(a1 + 57))
    {
      case 7:
        __swift_destroy_boxed_opaque_existential_1(a1);
        sub_24457ED14(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56));
        break;
      case 8:
        swift_bridgeObjectRelease();
        break;
      case 9:
      case 0xA:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      default:
        break;
    }
    if (*(unsigned __int8 *)(v2 + 104) < 2u)
    {
      a1 = v2 + 64;
      goto LABEL_14;
    }
  }
  v5 = *((unsigned __int8 *)a2 + 105);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    if (*((_BYTE *)a2 + 40) == 1)
    {
      v17 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(v2 + 24) = v17;
      *(_QWORD *)(v2 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v17 - 8))(v2, a2);
      *(_BYTE *)(v2 + 40) = 1;
    }
    else if (*((_BYTE *)a2 + 40))
    {
      v18 = *a2;
      v19 = a2[1];
      *(_OWORD *)(v2 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)v2 = v18;
      *(_OWORD *)(v2 + 16) = v19;
    }
    else
    {
      v11 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(v2 + 24) = v11;
      *(_QWORD *)(v2 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v11 - 8))(v2, a2);
      *(_BYTE *)(v2 + 40) = 0;
    }
    *(_BYTE *)(v2 + 41) = *((_BYTE *)a2 + 41);
    *(_BYTE *)(v2 + 105) = 1;
  }
  else
  {
    if (!v5)
    {
      switch(*((_BYTE *)a2 + 57))
      {
        case 7:
          v6 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(v2 + 24) = v6;
          *(_QWORD *)(v2 + 32) = *((_QWORD *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v6 - 8))(v2, a2);
          v7 = *((_QWORD *)a2 + 5);
          v8 = *((_QWORD *)a2 + 6);
          v9 = *((_BYTE *)a2 + 56);
          sub_24457F1E0(v7, v8, v9);
          *(_QWORD *)(v2 + 40) = v7;
          *(_QWORD *)(v2 + 48) = v8;
          *(_BYTE *)(v2 + 56) = v9;
          v10 = 7;
          goto LABEL_32;
        case 8:
          *(_QWORD *)v2 = *(_QWORD *)a2;
          *(_QWORD *)(v2 + 8) = *((_QWORD *)a2 + 1);
          *(_BYTE *)(v2 + 57) = 8;
          swift_bridgeObjectRetain();
          break;
        case 9:
          v23 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(v2 + 24) = v23;
          *(_QWORD *)(v2 + 32) = *((_QWORD *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v23 - 8))(v2, a2);
          v10 = 9;
          goto LABEL_32;
        case 0xA:
          v24 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(v2 + 24) = v24;
          *(_QWORD *)(v2 + 32) = *((_QWORD *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v24 - 8))(v2, a2);
          v10 = 10;
LABEL_32:
          *(_BYTE *)(v2 + 57) = v10;
          break;
        default:
          v20 = *a2;
          v21 = a2[1];
          v22 = a2[2];
          *(_OWORD *)(v2 + 42) = *(__int128 *)((char *)a2 + 42);
          *(_OWORD *)(v2 + 16) = v21;
          *(_OWORD *)(v2 + 32) = v22;
          *(_OWORD *)v2 = v20;
          break;
      }
      v25 = (_OWORD *)(v2 + 64);
      v26 = a2 + 4;
      if (*((_BYTE *)a2 + 104) == 1)
      {
        v28 = *((_QWORD *)a2 + 11);
        *(_QWORD *)(v2 + 88) = v28;
        *(_QWORD *)(v2 + 96) = *((_QWORD *)a2 + 12);
        (**(void (***)(_OWORD *, __int128 *))(v28 - 8))(v25, v26);
        *(_BYTE *)(v2 + 104) = 1;
      }
      else
      {
        if (!*((_BYTE *)a2 + 104))
        {
          v27 = *((_QWORD *)a2 + 11);
          *(_QWORD *)(v2 + 88) = v27;
          *(_QWORD *)(v2 + 96) = *((_QWORD *)a2 + 12);
          (**(void (***)(_OWORD *, __int128 *))(v27 - 8))(v25, v26);
          *(_WORD *)(v2 + 104) = 0;
          return v2;
        }
        v29 = *v26;
        v30 = a2[5];
        *(_OWORD *)(v2 + 89) = *(__int128 *)((char *)a2 + 89);
        *v25 = v29;
        *(_OWORD *)(v2 + 80) = v30;
      }
      *(_BYTE *)(v2 + 105) = 0;
      return v2;
    }
    v12 = *a2;
    v13 = a2[2];
    *(_OWORD *)(v2 + 16) = a2[1];
    *(_OWORD *)(v2 + 32) = v13;
    *(_OWORD *)v2 = v12;
    v14 = a2[3];
    v15 = a2[4];
    v16 = a2[5];
    *(_OWORD *)(v2 + 90) = *(__int128 *)((char *)a2 + 90);
    *(_OWORD *)(v2 + 64) = v15;
    *(_OWORD *)(v2 + 80) = v16;
    *(_OWORD *)(v2 + 48) = v14;
  }
  return v2;
}

__n128 __swift_memcpy106_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 90) = *(__int128 *)((char *)a2 + 90);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SerializationError(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v2 = a1;
  if (a1 == a2)
    return v2;
  v4 = *(unsigned __int8 *)(a1 + 105);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    if (*(unsigned __int8 *)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else
  {
    if (v4)
      goto LABEL_15;
    switch(*(_BYTE *)(a1 + 57))
    {
      case 7:
        __swift_destroy_boxed_opaque_existential_1(a1);
        sub_24457ED14(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56));
        break;
      case 8:
        swift_bridgeObjectRelease();
        break;
      case 9:
      case 0xA:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      default:
        break;
    }
    if (*(unsigned __int8 *)(v2 + 104) >= 2u)
      goto LABEL_15;
    a1 = v2 + 64;
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
LABEL_15:
  v5 = *(unsigned __int8 *)(a2 + 105);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v2 = *(_OWORD *)a2;
    *(_OWORD *)(v2 + 16) = v9;
    *(_OWORD *)(v2 + 26) = *(_OWORD *)(a2 + 26);
    *(_BYTE *)(v2 + 105) = 1;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v2 + 80) = v6;
    if (v5)
    {
      *(_OWORD *)(v2 + 90) = *(_OWORD *)(a2 + 90);
      v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + 16) = v10;
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v2 + 48) = v11;
    }
    else
    {
      *(_OWORD *)(v2 + 89) = *(_OWORD *)(a2 + 89);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + 16) = v7;
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v2 + 48) = v8;
      *(_BYTE *)(v2 + 105) = 0;
    }
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for SerializationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 106))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 105);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SerializationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 90) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 106) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 106) = 0;
    if (a2)
      *(_BYTE *)(result + 105) = -(char)a2;
  }
  return result;
}

uint64_t sub_244582690(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 105);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_2445826AC(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 1)
  {
    *(_OWORD *)(result + 89) = 0u;
    v2 = a2 - 2;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 105) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SerializationError()
{
  return &type metadata for SerializationError;
}

uint64_t FieldSchemaDescribing.asPublic()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
}

uint64_t FieldSchema.name.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t FieldSchema.isRepeated.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2) & 1;
}

uint64_t FieldSchema.isOptional.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2) & 1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FieldSchema.getFieldNumber()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

_QWORD *FieldSchema.getType()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD v7[6];

  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 56))(v7, v4, v5);
  if (!v2)
  {
    TypeSchemaDescription.asPublic()(a1);
    return (_QWORD *)sub_2445752C0((uint64_t)v7);
  }
  return result;
}

ValueMetadata *type metadata accessor for FieldSchema()
{
  return &type metadata for FieldSchema;
}

uint64_t dispatch thunk of FieldSchemaDescribing.isRepeated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FieldSchemaDescribing.isOptional.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FieldSchemaDescribing.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of FieldSchemaDescribing.oneofIndex.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = (*(uint64_t (**)(void))(a2 + 40))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of FieldSchemaDescribing.getFieldNumber()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FieldSchemaDescribing.getType()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_244582944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v21;
  __int128 v22[3];
  uint64_t v23;
  __int16 v24;
  _BYTE v25[40];
  uint64_t v26;

  v21 = v5[1];
  v11 = v5[2];
  v12 = v5[3];
  *(_QWORD *)&v22[0] = sub_2445B54D8(*v5);
  swift_bridgeObjectRetain();
  sub_24457DC7C((_QWORD **)v22);
  if (v6)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)&v22[0];
    ObjectType = swift_getObjectType();
    (*(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(a4 + 24))(v22, 0xD00000000000001FLL, 0x80000002445C4AC0, ObjectType, a4);
    v26 = sub_2445C41D4();
    sub_24457466C(v22, (uint64_t)v25);
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter(a1, a2, 1701667182, 0xE400000000000000);
    if (v12 >> 60 == 15)
    {
      v23 = 0;
      memset(v22, 0, sizeof(v22));
      v24 = -256;
    }
    else
    {
      *(_QWORD *)&v22[0] = v11;
      *((_QWORD *)&v22[0] + 1) = v12;
      HIBYTE(v24) = 9;
    }
    sub_24457475C(v11, v12);
    v15 = SchematizedDataComposer.subscript.setter((uint64_t)v22, 0x736E6F6974706FLL, 0xE700000000000000);
    MEMORY[0x24BDAC7A8](v15, v16);
    v17 = sub_244582C5C(v13, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, _BYTE *))sub_244582C44);
    swift_release();
    SchematizedDataComposer.subscript.setter(v17, 0x646C656966, 0xE500000000000000);
    swift_unknownObjectRetain();
    v18 = sub_244582E14(v21, a3, a4);
    swift_unknownObjectRelease();
    SchematizedDataComposer.subscript.setter(v18, 0x65645F666F656E6FLL, 0xEA00000000006C63);
    SchematizedDataComposer.compose()(a5);
    return sub_24457C40C((uint64_t)v25);
  }
  return result;
}

_QWORD *sub_244582BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return sub_24457FEC4(a1, a2, a3, a4);
}

_QWORD *sub_244582C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_244582BDC(a1, a2, *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_244582C5C(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t, uint64_t, _BYTE *))
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v23[8];
  uint64_t v24;
  __int128 v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v33 = MEMORY[0x24BEE4AF8];
    sub_2445A1834(0, v3, 0);
    v4 = v33;
    for (i = (unint64_t *)(a1 + 104); ; i += 10)
    {
      v7 = *(i - 9);
      v8 = *(i - 8);
      v9 = *(i - 6);
      v10 = *((_BYTE *)i - 24);
      v11 = *((_DWORD *)i - 5);
      v12 = *((_BYTE *)i - 16);
      v13 = *(i - 1);
      v14 = *i;
      v23[0] = *((_BYTE *)i - 56);
      v24 = v9;
      v25 = *(_OWORD *)(i - 5);
      v26 = v10;
      v27 = v11;
      v28 = v12;
      v29 = v13;
      v30 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v13, v14);
      a2(v31, v7, v8, v23);
      if (v2)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v13, v14);
      v33 = v4;
      v16 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2445A1834(v15 > 1, v16 + 1, 1);
        v4 = v33;
      }
      *(_QWORD *)(v4 + 16) = v16 + 1;
      v17 = v4 + 56 * v16;
      v18 = v31[0];
      v19 = v31[1];
      v20 = v31[2];
      *(_QWORD *)(v17 + 80) = v32;
      *(_OWORD *)(v17 + 48) = v19;
      *(_OWORD *)(v17 + 64) = v20;
      *(_OWORD *)(v17 + 32) = v18;
      if (!--v3)
        return v4;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v13, v14);
    swift_release();
  }
  return v4;
}

uint64_t sub_244582E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void (*v28)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[8];
  _OWORD v34[3];
  uint64_t v35;
  __int16 v36;
  char v37;
  __int128 v38[3];
  uint64_t v39;
  __int16 v40;
  unsigned __int8 v41;
  _OWORD v42[3];
  uint64_t v43;
  __int16 v44;
  _BYTE v45[40];
  uint64_t v46;
  _OWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v49 = MEMORY[0x24BEE4AF8];
    sub_2445A1834(0, v4, 0);
    v5 = v49;
    v30 = a2;
    ObjectType = swift_getObjectType();
    v31 = a3;
    v28 = *(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(a3 + 24);
    v29 = ObjectType;
    v10 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v32 = v5;
      v11 = *(v10 - 3);
      v12 = *(v10 - 2);
      v13 = *(v10 - 1);
      v14 = *v10;
      swift_bridgeObjectRetain();
      sub_24457475C(v13, v14);
      v5 = v30;
      v28(v38, 0xD000000000000024, 0x80000002445C4B60, v29, v31);
      if (v3)
        break;
      v46 = sub_2445C41D4();
      sub_24457466C(v38, (uint64_t)v45);
      swift_bridgeObjectRetain();
      SchematizedDataComposer.subscript.setter(v11, v12, 1701667182, 0xE400000000000000);
      if (v14 >> 60 == 15)
      {
        v43 = 0;
        memset(v42, 0, sizeof(v42));
        v44 = -256;
      }
      else
      {
        *(_QWORD *)&v42[0] = v13;
        *((_QWORD *)&v42[0] + 1) = v14;
        HIBYTE(v44) = 9;
      }
      sub_24458321C((uint64_t)v42, (uint64_t)v34);
      if (HIBYTE(v36) == 255)
      {
        v39 = 0;
        memset(v38, 0, sizeof(v38));
        v41 = -1;
        v40 = 0;
        sub_24457475C(v13, v14);
      }
      else
      {
        sub_2445832A0((uint64_t)v34, (uint64_t)v33);
        sub_2445832DC(v33, (uint64_t)v38);
        v41 = 0;
        sub_24457475C(v13, v14);
        sub_244583318((uint64_t)v33);
      }
      if (v41 == 255)
      {
        sub_2445816D0((uint64_t)v38, &qword_257372428);
        swift_bridgeObjectRetain();
        v15 = sub_2445A14D8(0x736E6F6974706FLL, 0xE700000000000000);
        v17 = v16;
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v19 = v46;
          v33[0] = v46;
          v46 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_244592ED8();
            v19 = v33[0];
          }
          swift_bridgeObjectRelease();
          sub_244583264(*(_QWORD *)(v19 + 56) + (v15 << 6), (uint64_t)v34);
          sub_2445AB224(v15, v19);
          v46 = v19;
          swift_bridgeObjectRelease();
        }
        else
        {
          v35 = 0;
          memset(v34, 0, sizeof(v34));
          v37 = -1;
          v36 = 0;
        }
        sub_2445816D0((uint64_t)v34, &qword_257372428);
      }
      else
      {
        sub_244583264((uint64_t)v38, (uint64_t)v34);
        v20 = swift_isUniquelyReferenced_nonNull_native();
        v33[0] = v46;
        v46 = 0x8000000000000000;
        sub_244593E34((uint64_t)v34, 0x736E6F6974706FLL, 0xE700000000000000, v20);
        v46 = v33[0];
        swift_bridgeObjectRelease();
      }
      sub_2445816D0((uint64_t)v42, &qword_257372420);
      SchematizedDataComposer.compose()((uint64_t)v47);
      sub_24457C40C((uint64_t)v45);
      swift_bridgeObjectRelease();
      sub_2445747E8(v13, v14);
      v5 = v32;
      v49 = v32;
      v22 = *(_QWORD *)(v32 + 16);
      v21 = *(_QWORD *)(v32 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_2445A1834(v21 > 1, v22 + 1, 1);
        v5 = v49;
      }
      v10 += 4;
      *(_QWORD *)(v5 + 16) = v22 + 1;
      v23 = v5 + 56 * v22;
      v24 = v47[0];
      v25 = v47[1];
      v26 = v47[2];
      *(_QWORD *)(v23 + 80) = v48;
      *(_OWORD *)(v23 + 48) = v25;
      *(_OWORD *)(v23 + 64) = v26;
      *(_OWORD *)(v23 + 32) = v24;
      if (!--v4)
        return v5;
    }
    swift_bridgeObjectRelease();
    sub_2445747E8(v13, v14);
    swift_release();
  }
  return v5;
}

uint64_t sub_24458321C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257372420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_244583264(uint64_t a1, uint64_t a2)
{
  __swift_memcpy59_8(a2, a1);
  return a2;
}

uint64_t sub_2445832A0(uint64_t a1, uint64_t a2)
{
  __swift_memcpy58_8(a2, a1);
  return a2;
}

uint64_t sub_2445832DC(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for AnyValue(a2, a1);
  return a2;
}

uint64_t sub_244583318(uint64_t a1)
{
  destroy for AnyValue(a1);
  return a1;
}

uint64_t sub_24458334C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t result;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v6 = v5;
  v62 = a5;
  v47 = a1;
  v48 = a2;
  v46 = *v5;
  v49 = sub_2445C3D9C();
  v53 = *(_QWORD *)(v49 - 8);
  v9 = MEMORY[0x24BDAC7A8](v49, v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)&v44 - v13;
  v16 = *a3;
  v15 = a3[1];
  v54 = a3[2];
  v51 = a3[3];
  v52 = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2445C3D90();
  v17 = v16 + 64;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v16 + 64);
  v21 = (unint64_t)(v18 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  while (1)
  {
    if (v20)
    {
      v20 &= v20 - 1;
      goto LABEL_5;
    }
    v24 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v24 >= v21)
      goto LABEL_25;
    v25 = *(_QWORD *)(v17 + 8 * v24);
    ++v23;
    if (!v25)
    {
      v23 = v24 + 1;
      if (v24 + 1 >= v21)
        goto LABEL_25;
      v25 = *(_QWORD *)(v17 + 8 * v23);
      if (!v25)
      {
        v23 = v24 + 2;
        if (v24 + 2 >= v21)
          goto LABEL_25;
        v25 = *(_QWORD *)(v17 + 8 * v23);
        if (!v25)
        {
          v23 = v24 + 3;
          if (v24 + 3 >= v21)
            goto LABEL_25;
          v25 = *(_QWORD *)(v17 + 8 * v23);
          if (!v25)
          {
            v23 = v24 + 4;
            if (v24 + 4 >= v21)
              goto LABEL_25;
            v25 = *(_QWORD *)(v17 + 8 * v23);
            if (!v25)
            {
              v26 = v24 + 5;
              if (v26 >= v21)
              {
LABEL_25:
                swift_release();
                v27 = *(void (**)(void))(v53 + 32);
                v28 = v49;
                ((void (*)(char *, char *, uint64_t))v27)(v14, v11, v49);
                swift_bridgeObjectRelease();
                v45 = (char *)v6 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_valueSet;
                v27();
                v6[4] = v16;
                ObjectType = swift_getObjectType();
                swift_bridgeObjectRetain();
                v30 = v62;
                if ((sub_24458CE2C(ObjectType, v62) & 1) == 0)
                {
                  v61 = 0;
                  v59 = 0u;
                  v60 = 0u;
                  v58 = 0u;
                  v33 = v50;
                  v32 = v51;
                  goto LABEL_29;
                }
                v31 = v54;
                v33 = v50;
                v32 = v51;
                if (v54 >> 60 == 15)
                {
                  v61 = 0;
                  v59 = 0u;
                  v60 = 0u;
                  v58 = 0u;
                  v30 = v62;
LABEL_29:
                  sub_244583F10((uint64_t)&v58, (uint64_t)v6 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_options);
                  if (*(_QWORD *)(v32 + 16) && (sub_24458CE80(ObjectType, v30) & 1) != 0)
                  {
                    v34 = sub_24458CE9C(ObjectType, v30);
                    v36 = v52;
                    if (v33)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      swift_release();
                      sub_2445747E8(v36, v54);
                      swift_bridgeObjectRelease();
                      v42 = 1;
                      goto LABEL_39;
                    }
                    MEMORY[0x24BDAC7A8](v34, v35);
                    *(&v44 - 2) = (uint64_t)&v58;
                    v37 = sub_244583F58((void (*)(_OWORD *__return_ptr, _QWORD *))sub_2445841B0, (uint64_t)(&v44 - 4), v51);
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();
                    sub_2445747E8(v36, v54);
                    swift_bridgeObjectRelease();
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    sub_2445747E8(v52, v54);
                    swift_bridgeObjectRelease();
                    v37 = sub_2445776B8(MEMORY[0x24BEE4AF8]);
                    swift_unknownObjectRelease();
                  }
                  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_valueOptions) = v37;
                  swift_release();
                  v38 = v48;
                  v6[2] = v47;
                  v6[3] = v38;
                }
                else
                {
                  sub_244574770(v52, v54);
                  sub_24458CE48(ObjectType, v62);
                  if (!v33)
                  {
                    v39 = v56;
                    v50 = v57;
                    __swift_project_boxed_opaque_existential_1(v55, v56);
                    (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t))(v50 + 80))(&v58, v52, v31, v39);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
                    sub_2445747E8(v52, v31);
                    v32 = v51;
                    v30 = v62;
                    goto LABEL_29;
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v40 = v52;
                  v41 = v54;
                  sub_2445747E8(v52, v54);
                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_2445747E8(v40, v41);
                  swift_unknownObjectRelease();
                  v42 = 0;
LABEL_39:
                  v43 = v45;
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v28);
                  if (v42)
                    sub_2445752F4((uint64_t)v6 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_options);
                  swift_deallocPartialClassInstance();
                }
                return (uint64_t)v6;
              }
              v25 = *(_QWORD *)(v17 + 8 * v26);
              if (!v25)
              {
                while (1)
                {
                  v23 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_44;
                  if (v23 >= v21)
                    goto LABEL_25;
                  v25 = *(_QWORD *)(v17 + 8 * v23);
                  ++v26;
                  if (v25)
                    goto LABEL_24;
                }
              }
              v23 = v26;
            }
          }
        }
      }
    }
LABEL_24:
    v20 = (v25 - 1) & v25;
LABEL_5:
    result = sub_2445C3D78();
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

unint64_t sub_2445838FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 32);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v6 = sub_2445A14D8(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    sub_2445C42D0();
    v8 = 0xE600000000000000;
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v9 = 0x203A6D756E45;
    *(_QWORD *)(v9 + 8) = 0xE600000000000000;
    *(_BYTE *)(v9 + 16) = 4;
    swift_willThrow();
    return v8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_244583A48(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = 0;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v3 + 64;
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v2 << 6);
      goto LABEL_5;
    }
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v11 >= v8)
      goto LABEL_26;
    v12 = *(_QWORD *)(v6 + 8 * v11);
    ++v2;
    if (!v12)
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_26;
      v12 = *(_QWORD *)(v6 + 8 * v2);
      if (!v12)
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_26;
        v12 = *(_QWORD *)(v6 + 8 * v2);
        if (!v12)
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_26;
          v12 = *(_QWORD *)(v6 + 8 * v2);
          if (!v12)
          {
            v2 = v11 + 4;
            if (v11 + 4 >= v8)
              goto LABEL_26;
            v12 = *(_QWORD *)(v6 + 8 * v2);
            if (!v12)
            {
              v13 = v11 + 5;
              if (v13 >= v8)
              {
LABEL_26:
                sub_2445C44D4();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                sub_2445C42D0();
                swift_bridgeObjectRelease();
                sub_2445C42D0();
                sub_2445C45AC();
                sub_2445C42D0();
                swift_bridgeObjectRelease();
                sub_2445C42D0();
                v14 = 0x203A6D756E45;
                sub_244578600();
                swift_allocError();
                *(_QWORD *)v15 = 0x203A6D756E45;
                *(_QWORD *)(v15 + 8) = 0xE600000000000000;
                *(_BYTE *)(v15 + 16) = 4;
                swift_willThrow();
                return v14;
              }
              v12 = *(_QWORD *)(v6 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v2 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_29;
                  if (v2 >= v8)
                    goto LABEL_26;
                  v12 = *(_QWORD *)(v6 + 8 * v2);
                  ++v13;
                  if (v12)
                    goto LABEL_24;
                }
              }
              v2 = v13;
            }
          }
        }
      }
    }
LABEL_24:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v2 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v10) == result)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
      swift_bridgeObjectRetain();
      return v14;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_244583CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_valueSet;
  v2 = sub_2445C3D9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_2445752F4(v0 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_options);
  return swift_bridgeObjectRelease();
}

uint64_t sub_244583D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_valueSet;
  v2 = sub_2445C3D9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_2445752F4(v0 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_options);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_244583D90()
{
  return type metadata accessor for ProtoEnumSchema();
}

uint64_t type metadata accessor for ProtoEnumSchema()
{
  uint64_t result;

  result = qword_2543F6F20;
  if (!qword_2543F6F20)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_244583DD4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2445C3D9C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_244583E5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_valueSet;
  v4 = sub_2445C3D9C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_244583EA4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_24457A3E8(*v1 + OBJC_IVAR____TtC17PoirotSchematizer15ProtoEnumSchema_options, a1);
}

uint64_t sub_244583EBC()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_244583ED0(uint64_t a1, uint64_t a2)
{
  return sub_2445838FC(a1, a2);
}

uint64_t sub_244583EF0(uint64_t a1)
{
  return sub_244583A48(a1);
}

uint64_t sub_244583F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573722A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244583F58(void (*a1)(_OWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  BOOL v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _OWORD v31[3];
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722B0);
  result = sub_2445C4558();
  v6 = (_QWORD *)result;
  v7 = 0;
  v34 = a3;
  v10 = *(_QWORD *)(a3 + 64);
  v9 = a3 + 64;
  v8 = v10;
  v11 = 1 << *(_BYTE *)(v9 - 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v8;
  v27 = v9;
  v28 = (unint64_t)(v11 + 63) >> 6;
  v29 = result + 64;
  if ((v12 & v8) == 0)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * i);
    v20 = (uint64_t *)(*(_QWORD *)(v34 + 56) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    v33[0] = v21;
    v33[1] = v22;
    sub_244574770(v21, v22);
    a1(v31, v33);
    if (v3)
    {
      swift_release();
      sub_2445747FC(v21, v22);
      return (uint64_t)v6;
    }
    result = sub_2445747FC(v21, v22);
    *(_QWORD *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v6[6] + 8 * i) = v19;
    v23 = v6[7] + 56 * i;
    v24 = v31[1];
    *(_OWORD *)v23 = v31[0];
    *(_OWORD *)(v23 + 16) = v24;
    *(_OWORD *)(v23 + 32) = v31[2];
    *(_QWORD *)(v23 + 48) = v32;
    v25 = v6[2];
    v16 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v16)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v26;
    if (v13)
      goto LABEL_4;
LABEL_5:
    v16 = __OFADD__(v7++, 1);
    if (v16)
      goto LABEL_27;
    if (v7 >= v28)
      return (uint64_t)v6;
    v17 = *(_QWORD *)(v27 + 8 * v7);
    if (!v17)
      break;
LABEL_15:
    v13 = (v17 - 1) & v17;
  }
  v18 = v7 + 1;
  if (v7 + 1 >= v28)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v7 + 2;
  if (v7 + 2 >= v28)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v7 + 3;
  if (v7 + 3 >= v28)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_14:
    v7 = v18;
    goto LABEL_15;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v28)
      return (uint64_t)v6;
    v17 = *(_QWORD *)(v27 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2445841B0(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *a1;
  v4 = a1[1];
  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 80))(v3, v4, v5, v6);
}

void _s17PoirotSchematizer0B5ErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_244584264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  char v7;

  if (v5)
  {
    sub_24458479C(v1, v0, v5);
    sub_24458479C(v3, v2, v4);
    sub_2445847C4(v3, v2, v4);
    sub_2445847C4(v1, v0, v5);
    v7 = 0;
  }
  else
  {
    if (v3 == v1 && v2 == v0)
      v7 = 1;
    else
      v7 = sub_2445C45B8();
    sub_24458479C(v1, v0, 0);
    sub_24458479C(v3, v2, 0);
    sub_2445847C4(v3, v2, 0);
    sub_2445847C4(v1, v0, 0);
  }
  return v7 & 1;
}

uint64_t sub_24458479C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 6u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SchematizerError(uint64_t a1)
{
  return sub_2445847C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_2445847C4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 6u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s17PoirotSchematizer16SchematizerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24458479C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SchematizerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24458479C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2445847C4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SchematizerError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2445847C4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematizerError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematizerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_244584948(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 6u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_244584960(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SchematizerError()
{
  return &type metadata for SchematizerError;
}

uint64_t SchemaManifest.init(withJSON:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, unint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD v66[2];
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[2];
  unint64_t v93;

  v79 = a3;
  v6 = sub_2445C4078();
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  MEMORY[0x24BDAC7A8](v6, v7);
  v87 = (uint64_t)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_2445C3E74();
  v90 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81, v9);
  v80 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_2445C3F10();
  v91 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83, v11);
  v82 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_2445C3F70();
  v86 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84, v13);
  v85 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2445C4138();
  MEMORY[0x24BDAC7A8](v15, v16);
  v17 = sub_2445C3EB0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v19);
  v21 = (char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_2445C424C();
  MEMORY[0x24BDAC7A8](v22, v23);
  sub_2445C4240();
  sub_2445C4234();
  if (!v24)
  {
    sub_244585138();
    swift_allocError();
    *v65 = 0xD000000000000022;
    v65[1] = 0x80000002445C5080;
    swift_willThrow();
    return sub_2445747FC(a1, a2);
  }
  sub_2445C412C();
  sub_24458517C();
  sub_2445C4180();
  if (v3)
    return sub_2445747FC(a1, a2);
  v25 = MEMORY[0x24BEE4AF8];
  v93 = sub_2445759D8(MEMORY[0x24BEE4AF8]);
  v92[0] = sub_244575B20(v25);
  result = MEMORY[0x2495123BC]();
  v27 = result;
  v28 = *(_QWORD *)(result + 16);
  if (v28)
  {
    v29 = 0;
    v30 = result + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
    v69 = xmmword_2445C6170;
    v31 = v85;
    v74 = a1;
    v75 = a2;
    v72 = v18;
    v73 = v17;
    v71 = result;
    v68 = v28;
    v67 = v30;
    while (v29 < *(_QWORD *)(v27 + 16))
    {
      v32 = *(_QWORD *)(v86 + 72);
      v70 = v29;
      (*(void (**)(char *, unint64_t, uint64_t))(v86 + 16))(v31, v30 + v32 * v29, v84);
      sub_2445C3F34();
      v33 = sub_2445C42AC();
      swift_bridgeObjectRelease();
      if (v33 <= 0)
      {
        v34 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_257372440);
        v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = v69;
        *(_QWORD *)(v34 + 32) = sub_2445C3F34();
        *(_QWORD *)(v34 + 40) = v35;
      }
      v36 = sub_2445C3F40();
      v37 = *(_QWORD *)(v36 + 16);
      if (v37)
      {
        v38 = v91;
        v39 = v36 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
        v78 = v36;
        swift_bridgeObjectRetain();
        v40 = *(_QWORD *)(v38 + 72);
        v41 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16);
        v43 = (uint64_t)v82;
        v42 = v83;
        do
        {
          v41(v43, v39, v42);
          sub_2445BEEF4(v43, (_QWORD *)v34, (uint64_t)&v93);
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v43, v42);
          v39 += v40;
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease_n();
        v31 = v85;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v78 = sub_2445C3F1C();
      v44 = *(_QWORD *)(v78 + 16);
      if (v44)
      {
        v45 = v90;
        v46 = v78 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
        swift_bridgeObjectRetain();
        v47 = *(_QWORD *)(v45 + 72);
        v48 = *(void (**)(uint64_t, unint64_t, uint64_t))(v45 + 16);
        v50 = (uint64_t)v80;
        v49 = v81;
        do
        {
          v48(v50, v46, v49);
          sub_2445BD550(v50, (_QWORD *)v34, v92, (void (*)(char *, uint64_t, uint64_t))&v93);
          (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v50, v49);
          v46 += v47;
          --v44;
        }
        while (v44);
        swift_bridgeObjectRelease_n();
        v31 = v85;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v51 = sub_2445C3F58();
      v52 = *(_QWORD *)(v51 + 16);
      a2 = v75;
      if (v52)
      {
        v53 = v51 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
        v76 = *(_QWORD *)(v88 + 72);
        v78 = *(_QWORD *)(v88 + 16);
        v66[1] = v51;
        swift_bridgeObjectRetain();
        v54 = v89;
        v55 = v87;
        v77 = v21;
        do
        {
          ((void (*)(uint64_t, unint64_t, uint64_t))v78)(v55, v53, v54);
          v56 = sub_2445C3FA0();
          v58 = v57;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v59 = (_QWORD *)v34;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v59 = sub_244585BF8(0, *(_QWORD *)(v34 + 16) + 1, 1, (_QWORD *)v34);
          v61 = v59[2];
          v60 = v59[3];
          if (v61 >= v60 >> 1)
            v59 = sub_244585BF8((_QWORD *)(v60 > 1), v61 + 1, 1, v59);
          v59[2] = v61 + 1;
          v62 = &v59[2 * v61];
          v62[4] = v56;
          v62[5] = v58;
          swift_bridgeObjectRelease();
          v55 = v87;
          sub_2445BF7F0(v87, v92);
          swift_bridgeObjectRelease();
          v54 = v89;
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v55, v89);
          v21 = v77;
          v53 += v76;
          --v52;
        }
        while (v52);
        swift_bridgeObjectRelease_n();
        a2 = v75;
        v31 = v85;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v29 = v70 + 1;
      (*(void (**)(char *, uint64_t))(v86 + 8))(v31, v84);
      result = swift_bridgeObjectRelease();
      v17 = v73;
      a1 = v74;
      v18 = v72;
      v27 = v71;
      v30 = v67;
      if (v29 == v68)
        goto LABEL_29;
    }
    __break(1u);
  }
  else
  {
LABEL_29:
    sub_2445747FC(a1, a2);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v63 = v93;
    v64 = v79;
    *v79 = v92[0];
    v64[1] = v63;
  }
  return result;
}

unint64_t sub_244585138()
{
  unint64_t result;

  result = qword_257372430;
  if (!qword_257372430)
  {
    result = MEMORY[0x249512E54](&unk_2445C6408, &type metadata for SchemaManifestJSONError);
    atomic_store(result, (unint64_t *)&qword_257372430);
  }
  return result;
}

unint64_t sub_24458517C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257372438;
  if (!qword_257372438)
  {
    v1 = sub_2445C3EB0();
    result = MEMORY[0x249512E54](MEMORY[0x24BE5BB38], v1);
    atomic_store(result, (unint64_t *)&qword_257372438);
  }
  return result;
}

__int128 *SchemaManifest.toJSONData()()
{
  return SchemaManifest.toJSONDataWithSwiftProtobuf()();
}

__int128 *SchemaManifest.toJSONDataWithSwiftProtobuf()()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v26 = sub_2445C424C();
  v1 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26, v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2445C4150();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2445C3EB0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *v0;
  v15 = &v27;
  v16 = v28;
  sub_24457C544();
  if (!v16)
  {
    v24 = v1;
    v25 = v5;
    v28 = v11;
    sub_2445C4144();
    sub_24458517C();
    sub_2445C4174();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v25);
    sub_2445C4240();
    v15 = (__int128 *)sub_2445C4228();
    v18 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v26);
    v19 = v28;
    if (v18 >> 60 == 15)
    {
      sub_244585138();
      v20 = swift_allocError();
      *v21 = 0xD00000000000001DLL;
      v21[1] = 0x80000002445C50B0;
      v15 = (__int128 *)v20;
      swift_willThrow();
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v10);
  }
  return v15;
}

uint64_t SchemaManifest.toJSONDataWithPoirot()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[4];

  v3 = *v0;
  v2 = v0[1];
  v5[0] = v3;
  v5[1] = v2;
  sub_2445953C0(v5);
  if (!v1)
  {
    sub_2445C0C4C((uint64_t)&off_25152FFE8, (uint64_t)v5);
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    MessageSchemaDescribing.schematizing<A>(data:block:)();
    v2 = v3;
    sub_244575334((uint64_t)v5);
    swift_release();
  }
  return v2;
}

_QWORD *sub_244585518(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372450);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_244586070(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24458563C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_244585664(a1, a2, a3, a4, &qword_257372468, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BBD0]);
}

uint64_t sub_244585650(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_244585664(a1, a2, a3, a4, &qword_257372470, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BB08]);
}

uint64_t sub_244585664(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_2445C4540();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_24458617C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_244585870(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_244585664(a1, a2, a3, a4, &qword_257372480, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BD68]);
}

uint64_t sub_244585884(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_244585664(a1, a2, a3, a4, &qword_257372478, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BD30]);
}

uint64_t sub_244585898(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_244585664(a1, a2, a3, a4, &qword_257372488, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BB88]);
}

uint64_t sub_2445858AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_244585664(a1, a2, a3, a4, &qword_257372490, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BDB0]);
}

_QWORD *sub_2445858C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_2543F6F48);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_244586294(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2445859E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372418);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_244586380(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_244585AEC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372448);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_244586468(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_244585BF8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372440);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_244586558(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_244585D04(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_244585D2C(a1, a2, a3, a4, &qword_257372460);
}

_QWORD *sub_244585D18(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_244585D2C(a1, a2, a3, a4, &qword_257372498);
}

_QWORD *sub_244585D2C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 31;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 6);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v9 + 4])
          memmove(v14, a4 + 4, v9 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_244586664(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_244585E44(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573724A0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_244586750(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_244585F64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372458);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24458685C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_244586070(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372378);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_24458617C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

char *sub_244586294(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_2445C457C();
  __break(1u);
  return result;
}

char *sub_244586380(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_244586468(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_244586558(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_244586648()
{
  return 0;
}

ValueMetadata *type metadata accessor for SchemaManifestJSONError()
{
  return &type metadata for SchemaManifestJSONError;
}

uint64_t sub_244586664(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_244586750(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573724A8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_24458685C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_24458694C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int64_t v49;
  unsigned __int8 v50;
  unint64_t v51;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v44 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v45 = (unint64_t)(v4 + 63) >> 6;
  v46 = result;
  while (v6)
  {
    v48 = (v6 - 1) & v6;
    v49 = v3;
    v7 = __clz(__rbit64(v6)) | (v3 << 6);
LABEL_22:
    v12 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v7);
    v13 = *v12;
    v14 = v12[1];
    v15 = (unsigned __int8 *)(*(_QWORD *)(result + 56) + (v7 << 6));
    v16 = *v15;
    v17 = *((_QWORD *)v15 + 1);
    v18 = *((_QWORD *)v15 + 3);
    v19 = v15[32];
    v47 = *((_DWORD *)v15 + 9);
    v50 = v15[40];
    v20 = *((_QWORD *)v15 + 6);
    v21 = *((_QWORD *)v15 + 7);
    v22 = *((_QWORD *)v15 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = v21;
    sub_24457475C(v20, v21);
    v23 = sub_2445A14D8(v13, v14);
    LOBYTE(v21) = v24;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_47;
    v25 = (unsigned __int8 *)(*(_QWORD *)(v2 + 56) + (v23 << 6));
    if (*v25 != v16)
      goto LABEL_47;
    v26 = v2;
    v27 = *((_QWORD *)v25 + 2);
    v28 = *((_QWORD *)v25 + 3);
    v29 = v25[32];
    v30 = *((_DWORD *)v25 + 9);
    v31 = v25[40];
    v32 = *((_QWORD *)v25 + 6);
    v33 = *((_QWORD *)v25 + 7);
    if (v27)
    {
      if (!v22
        || (*((_QWORD *)v25 + 1) == v17 ? (v34 = v27 == v22) : (v34 = 0),
            !v34
         && (v35 = *((_QWORD *)v25 + 6),
             v36 = *((_DWORD *)v25 + 9),
             v37 = sub_2445C45B8(),
             v30 = v36,
             v32 = v35,
             (v37 & 1) == 0)))
      {
LABEL_47:
        swift_bridgeObjectRelease();
        v42 = v20;
        v38 = v51;
LABEL_48:
        sub_2445747E8(v42, v38);
        return 0;
      }
    }
    else if (v22)
    {
      goto LABEL_47;
    }
    if (v28 != v18 || v19 != v29)
      goto LABEL_47;
    if ((v31 & 1) != 0)
    {
      v38 = v51;
      if ((v50 & 1) == 0)
        goto LABEL_50;
    }
    else
    {
      if ((v50 & 1) != 0)
        goto LABEL_47;
      v38 = v51;
      if (v30 != v47)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        v42 = v20;
        goto LABEL_48;
      }
    }
    if (v33 >> 60 == 15)
    {
      if (v38 >> 60 != 15)
        goto LABEL_51;
      v2 = v26;
      swift_bridgeObjectRelease();
      sub_2445747E8(v20, v38);
      result = v46;
      v6 = v48;
      v3 = v49;
    }
    else
    {
      if (v38 >> 60 == 15)
      {
LABEL_51:
        v43 = v32;
        sub_24457475C(v32, v33);
        v42 = v20;
        sub_24457475C(v20, v38);
        sub_2445747E8(v43, v33);
        sub_2445747E8(v20, v38);
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      v2 = v26;
      v39 = v32;
      sub_24457475C(v32, v33);
      sub_24457475C(v20, v38);
      sub_24458C824(v39, v33);
      v41 = v40;
      sub_2445747E8(v20, v38);
      sub_2445747E8(v39, v33);
      swift_bridgeObjectRelease();
      sub_2445747E8(v20, v38);
      result = v46;
      v6 = v48;
      v3 = v49;
      if ((v41 & 1) == 0)
        return 0;
    }
  }
  v8 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_53;
  }
  if (v8 >= v45)
    return 1;
  v9 = *(_QWORD *)(v44 + 8 * v8);
  v10 = v3 + 1;
  if (v9)
    goto LABEL_21;
  v10 = v3 + 2;
  if (v3 + 2 >= v45)
    return 1;
  v9 = *(_QWORD *)(v44 + 8 * v10);
  if (v9)
    goto LABEL_21;
  v10 = v3 + 3;
  if (v3 + 3 >= v45)
    return 1;
  v9 = *(_QWORD *)(v44 + 8 * v10);
  if (v9)
  {
LABEL_21:
    v48 = (v9 - 1) & v9;
    v49 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_22;
  }
  v11 = v3 + 4;
  if (v3 + 4 >= v45)
    return 1;
  v9 = *(_QWORD *)(v44 + 8 * v11);
  if (v9)
  {
    v10 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v45)
      return 1;
    v9 = *(_QWORD *)(v44 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_21;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t sub_244586D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int64_t v33;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  if (a1 == a2)
    return 1;
  v2 = a2;
  v3 = a1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v32 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v10 = v2;
      v11 = __clz(__rbit64(v7));
      v12 = (v7 - 1) & v7;
      v13 = v11 | (v4 << 6);
      goto LABEL_24;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      JUMPOUT(0x244587AE8);
    }
    if (v14 >= v33)
      return 1;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v33)
        return 1;
      v15 = *(_QWORD *)(v32 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v33)
          return 1;
        v15 = *(_QWORD *)(v32 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v10 = v2;
    v12 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v13);
    v21 = *v20;
    v38 = v20[1];
    v22 = v20[2];
    v23 = v20[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = v22;
    v39 = v23;
    sub_24457475C(v22, v23);
    v2 = v10;
    v24 = sub_2445A14D8(v18, v19);
    LOBYTE(v22) = v25;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_33;
    v35 = v12;
    v36 = v4;
    v26 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 32 * v24);
    v28 = *v26;
    v27 = v26[1];
    v30 = v26[2];
    v29 = v26[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v30, v29);
    if ((sub_24458694C(v28, v21) & 1) == 0 || (sub_2445894B8(v27, v38) & 1) == 0)
      goto LABEL_32;
    if (v29 >> 60 != 15)
    {
      v8 = v39;
      v9 = v37;
      if (v39 >> 60 != 15)
        __asm { BR              X8 }
LABEL_31:
      sub_24457475C(v30, v29);
      sub_24457475C(v9, v8);
      sub_2445747E8(v30, v29);
      sub_2445747E8(v9, v8);
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v30, v29);
LABEL_33:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v37, v39);
      return 0;
    }
    v8 = v39;
    v9 = v37;
    if (v39 >> 60 != 15)
      goto LABEL_31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v30, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v37, v39);
    v3 = a1;
    v7 = v35;
    v4 = v36;
  }
  v16 = v14 + 3;
  if (v16 >= v33)
    return 1;
  v15 = *(_QWORD *)(v32 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      JUMPOUT(0x244587AFCLL);
    }
    if (v4 >= v33)
      return 1;
    v15 = *(_QWORD *)(v32 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
}

uint64_t sub_244587BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  int64_t v31;
  int64_t v34;
  uint64_t v35;

  if (a1 == a2)
    return 1;
  v2 = a2;
  v3 = a1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v30 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v35 = (v7 - 1) & v7;
      v9 = __clz(__rbit64(v7)) | (v4 << 6);
      goto LABEL_24;
    }
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      JUMPOUT(0x244588770);
    }
    if (v10 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v10);
    ++v4;
    if (!v11)
    {
      v4 = v10 + 1;
      if (v10 + 1 >= v31)
        return 1;
      v11 = *(_QWORD *)(v30 + 8 * v4);
      if (!v11)
      {
        v4 = v10 + 2;
        if (v10 + 2 >= v31)
          return 1;
        v11 = *(_QWORD *)(v30 + 8 * v4);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v35 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v4 << 6);
LABEL_24:
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v9);
    v18 = *v16;
    v17 = v16[1];
    v20 = v16[2];
    v19 = v16[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v20);
    swift_bridgeObjectRetain();
    v21 = sub_2445A14D8(v14, v15);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
      goto LABEL_33;
    v34 = v4;
    v24 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 32 * v21);
    v25 = *v24;
    v26 = v24[1];
    v28 = v24[2];
    v27 = v24[3];
    swift_bridgeObjectRetain();
    sub_24457475C(v26, v28);
    swift_bridgeObjectRetain();
    if ((sub_244588844(v25, v18) & 1) == 0)
      goto LABEL_32;
    if (v28 >> 60 != 15)
    {
      if (v20 >> 60 != 15)
        __asm { BR              X10 }
LABEL_31:
      sub_24457475C(v26, v28);
      sub_24457475C(v17, v20);
      sub_2445747E8(v26, v28);
      sub_2445747E8(v17, v20);
LABEL_32:
      swift_bridgeObjectRelease();
      sub_2445747E8(v26, v28);
      swift_bridgeObjectRelease();
LABEL_33:
      swift_bridgeObjectRelease();
      sub_2445747E8(v17, v20);
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v20 >> 60 != 15)
      goto LABEL_31;
    v8 = sub_2445889D8(v27, v19);
    swift_bridgeObjectRelease();
    sub_2445747E8(v26, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v17, v20);
    swift_bridgeObjectRelease();
    v3 = a1;
    v2 = a2;
    v4 = v34;
    v7 = v35;
    if ((v8 & 1) == 0)
      return 0;
  }
  v12 = v10 + 3;
  if (v12 >= v31)
    return 1;
  v11 = *(_QWORD *)(v30 + 8 * v12);
  if (v11)
  {
    v4 = v12;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      JUMPOUT(0x244588784);
    }
    if (v4 >= v31)
      return 1;
    v11 = *(_QWORD *)(v30 + 8 * v4);
    ++v12;
    if (v11)
      goto LABEL_23;
  }
}

uint64_t sub_244588844(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v19 = sub_2445A14D8(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2445889D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v18;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v18 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
LABEL_20:
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6);
      v12 = (uint64_t *)(v10 + 16 * v6);
      v14 = *v12;
      v13 = v12[1];
      v15 = sub_2445A153C(v11);
      if ((v16 & 1) != 0)
        __asm { BR              X8 }
      sub_244574770(v14, v13);
      sub_2445747FC(v14, v13);
      return 0;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_19;
      v8 = 2;
      if ((unint64_t)(v4 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if ((unint64_t)(v4 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_19:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_20;
      }
      v9 = 4;
      if (v18 > 4)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 4;
          goto LABEL_19;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x2445893FCLL);
          }
          if (v8 >= v18)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_19;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_2445894B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (unint64_t *)(a2 + 56);
    for (i = (unint64_t *)(a1 + 56); ; i += 4)
    {
      v6 = *(i - 1);
      v5 = *i;
      v7 = *(v3 - 1);
      v8 = *v3;
      v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (sub_2445C45B8() & 1) == 0)
        break;
      if (v5 >> 60 != 15)
      {
        if (v8 >> 60 != 15)
          __asm { BR              X8 }
LABEL_16:
        sub_24457475C(v6, v5);
        sub_24457475C(v7, v8);
        sub_2445747E8(v6, v5);
        sub_2445747E8(v7, v8);
        return 0;
      }
      if (v8 >> 60 != 15)
        goto LABEL_16;
      v3 += 4;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

PoirotSchematizer::SchemaManifest __swiftcall SchemaManifest.init(messages:enums:)(Swift::OpaquePointer messages, Swift::OpaquePointer enums)
{
  Swift::OpaquePointer *v2;
  PoirotSchematizer::SchemaManifest result;

  v2->_rawValue = messages._rawValue;
  v2[1]._rawValue = enums._rawValue;
  result.enums = enums;
  result.messages = messages;
  return result;
}

unint64_t sub_24458A260()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t result;

  v0 = MEMORY[0x24BEE4AF8];
  v1 = sub_244575B20(MEMORY[0x24BEE4AF8]);
  result = sub_2445759D8(v0);
  qword_2573724B0 = v1;
  *(_QWORD *)algn_2573724B8 = result;
  return result;
}

uint64_t static SchemaManifest.empty.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_257372288 != -1)
    swift_once();
  v2 = *(_QWORD *)algn_2573724B8;
  *a1 = qword_2573724B0;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SchemaManifest.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SchemaManifest.messages.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SchemaManifest.messages.modify())()
{
  return nullsub_1;
}

uint64_t SchemaManifest.enums.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SchemaManifest.enums.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SchemaManifest.enums.modify())()
{
  return nullsub_1;
}

PoirotSchematizer::SchemaManifest __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SchemaManifest.combining(with:)(PoirotSchematizer::SchemaManifest with)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  PoirotSchematizer::SchemaManifest result;

  v4 = v1;
  v5 = *(_QWORD *)with.messages._rawValue;
  v6 = *((_QWORD *)with.messages._rawValue + 1);
  v8 = *v2;
  v7 = v2[1];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v9 = sub_24458A8C0(v5, v8, 0, (uint64_t)sub_24458BBB0, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))sub_24458B33C);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_24458A8C0(v6, v7, 0, (uint64_t)sub_24458BB58, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))sub_24458ACC8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = (void *)swift_bridgeObjectRelease();
    *v4 = v10;
    v4[1] = v11;
  }
  result.enums._rawValue = v13;
  result.messages._rawValue = v12;
  return result;
}

uint64_t static SchemaManifest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_244586D28(*a1, *a2) & 1) != 0)
    return sub_244587BBC(v2, v3);
  else
    return 0;
}

uint64_t sub_24458A4F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_244586D28(*a1, *a2) & 1) != 0)
    return sub_244587BBC(v2, v3);
  else
    return 0;
}

uint64_t sub_24458A538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = v3;
  ObjectType = swift_getObjectType();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  v10 = (_QWORD *)sub_244575B20(MEMORY[0x24BEE4AF8]);
  swift_unknownObjectRetain();
  v11 = sub_24458BC08(v10, v9, a1, a2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v4)
    return swift_unknownObjectRelease();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  swift_bridgeObjectRetain();
  v13 = v12(ObjectType, a2);
  v14 = sub_2445759D8(MEMORY[0x24BEE4AF8]);
  swift_unknownObjectRetain();
  v15 = sub_24458BFC4(v14, v13, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease_n();
  *a3 = v11;
  a3[1] = v15;
  return result;
}

uint64_t Sequence<>.combining()()
{
  if (qword_257372288 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2445C436C();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24458A74C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = *a1;
  v5 = a1[1];
  v7 = *a2;
  v8 = a2[1];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v9 = sub_24458A8C0(v7, v6, 0, (uint64_t)sub_24458BBB0, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))sub_24458B33C);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_24458A8C0(v8, v5, 0, (uint64_t)sub_24458BB58, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))sub_24458ACC8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a3 = v10;
    a3[1] = v11;
  }
  return result;
}

uint64_t sub_24458A878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24458A8C0(a1, a2, a3, (uint64_t)sub_24458BB58, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))sub_24458ACC8);
}

uint64_t sub_24458A89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24458A8C0(a1, a2, a3, (uint64_t)sub_24458BBB0, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))sub_24458B33C);
}

uint64_t sub_24458A8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t))
{
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = a2;
  a5(a1, a4, 0, isUniquelyReferenced_nonNull_native, &v14, a3);
  v12 = v14;
  swift_bridgeObjectRelease();
  if (v5)
    swift_bridgeObjectRelease();
  return v12;
}

uint64_t destroy for SchemaManifest()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s17PoirotSchematizer14SchemaManifestVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SchemaManifest(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SchemaManifest(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SchemaManifest()
{
  return &type metadata for SchemaManifest;
}

void sub_24458AA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_24458AAC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x24458ACA4);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_24458ACC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, char a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v65 = a1;
  v66 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v67 = v8;
  v68 = 0;
  v69 = v11 & v9;
  v70 = a2;
  v71 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2445771E4(&v60);
  v12 = *((_QWORD *)&v60 + 1);
  if (!*((_QWORD *)&v60 + 1))
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_244577DCC();
    return swift_release();
  }
  while (1)
  {
    v20 = v60;
    v21 = v61;
    v22 = v62;
    v23 = v64;
    v58 = v63;
    v24 = (_QWORD *)*a5;
    v26 = sub_2445A14D8(v60, v12);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      sub_2445C4648();
      __break(1u);
      goto LABEL_36;
    }
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((a4 & 1) == 0)
        sub_2445930BC();
    }
    else
    {
      sub_244591738(v29, a4 & 1);
      v31 = sub_2445A14D8(v20, v12);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_35;
      v26 = v31;
    }
    v33 = (_QWORD *)*a5;
    if ((v30 & 1) != 0)
      break;
    v33[(v26 >> 6) + 8] |= 1 << v26;
    v44 = (uint64_t *)(v33[6] + 16 * v26);
    *v44 = v20;
    v44[1] = v12;
    v45 = (uint64_t *)(v33[7] + 32 * v26);
    *v45 = v21;
    v45[1] = v22;
    v45[2] = v58;
    v45[3] = v23;
    v46 = v33[2];
    v47 = __OFADD__(v46, 1);
    v48 = v46 + 1;
    if (v47)
      goto LABEL_34;
    v33[2] = v48;
LABEL_8:
    sub_2445771E4(&v60);
    v12 = *((_QWORD *)&v60 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v60 + 1))
      goto LABEL_5;
  }
  v34 = (uint64_t *)(v33[7] + 32 * v26);
  v35 = v34[1];
  v16 = v34[2];
  v36 = v34[3];
  if (!a6)
  {
    v54 = *v34;
    swift_bridgeObjectRetain();
    v55 = v35;
    sub_24457475C(v35, v16);
    v57 = v36;
    swift_bridgeObjectRetain();
    v39 = v22;
    v41 = v58;
LABEL_29:
    swift_bridgeObjectRelease();
    sub_2445747E8(v39, v41);
    swift_bridgeObjectRelease();
    v15 = v57;
    v14 = v54;
    v22 = v55;
    goto LABEL_7;
  }
  v56 = v34[2];
  v37 = v23;
  if (a6 == 1)
  {
    v14 = v21;
    v15 = v37;
    v16 = v58;
LABEL_7:
    swift_bridgeObjectRelease();
    v17 = (uint64_t *)(v33[7] + 32 * v26);
    v18 = v17[1];
    v19 = v17[2];
    swift_bridgeObjectRelease();
    sub_2445747E8(v18, v19);
    swift_bridgeObjectRelease();
    *v17 = v14;
    v17[1] = v22;
    v17[2] = v16;
    v17[3] = v15;
    goto LABEL_8;
  }
  v38 = *v34;
  swift_bridgeObjectRetain();
  sub_24457475C(v35, v56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55 = v35;
  sub_24457475C(v35, v56);
  v57 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = v22;
  v40 = v22;
  v41 = v58;
  sub_24457475C(v40, v58);
  swift_bridgeObjectRetain();
  v54 = v38;
  v42 = sub_244588844(v38, v21);
  v43 = v37;
  v16 = v56;
  if ((v42 & 1) == 0)
    goto LABEL_31;
  if (v56 >> 60 == 15)
  {
    if (v58 >> 60 != 15)
      goto LABEL_30;
LABEL_27:
    if ((sub_2445889D8(v57, v43) & 1) == 0)
      goto LABEL_31;
    swift_bridgeObjectRelease();
    sub_2445747E8(v39, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v35, v16);
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (v58 >> 60 != 15)
  {
    sub_24457475C(v35, v56);
    sub_24457475C(v39, v58);
    sub_24458C824(v35, v56);
    v50 = v49;
    sub_2445747E8(v39, v58);
    v16 = v56;
    sub_2445747E8(v35, v56);
    if ((v50 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
LABEL_30:
  sub_24457475C(v35, v56);
  sub_24457475C(v39, v58);
  sub_2445747E8(v35, v56);
  sub_2445747E8(v39, v58);
LABEL_31:
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  sub_244577D74();
  v51 = swift_allocError();
  *v52 = 0xD00000000000001DLL;
  v52[1] = 0x80000002445C51B0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_2445747E8(v39, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(v35, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(v35, v16);
  swift_bridgeObjectRelease();
  v72 = v51;
  MEMORY[0x249512DF4](v51);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_2445747E8(v39, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_244577DCC();
    swift_release();
    return MEMORY[0x249512DE8](v72);
  }
LABEL_36:
  sub_2445C44D4();
  sub_2445C42D0();
  sub_2445C4534();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_24458B33C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, char a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v72 = a1;
  v73 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v74 = v8;
  v75 = 0;
  v76 = v11 & v9;
  v77 = a2;
  v78 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2445773C8(&v67);
  v12 = *((_QWORD *)&v67 + 1);
  if (!*((_QWORD *)&v67 + 1))
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_244577DCC();
    return swift_release();
  }
  while (1)
  {
    v19 = v67;
    v65 = v67;
    v66 = v12;
    v60 = v69;
    v20 = v71;
    v58 = v68;
    v59 = v70;
    v21 = (_QWORD *)*a5;
    v23 = sub_2445A14D8(v67, v12);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      sub_2445C4648();
      __break(1u);
      goto LABEL_38;
    }
    v27 = v22;
    if (v21[3] >= v26)
    {
      if ((a4 & 1) == 0)
        sub_244593458();
    }
    else
    {
      sub_244591D4C(v26, a4 & 1);
      v28 = sub_2445A14D8(v19, v12);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_37;
      v23 = v28;
    }
    v30 = (_QWORD *)*a5;
    if ((v27 & 1) != 0)
      break;
    v30[(v23 >> 6) + 8] |= 1 << v23;
    v40 = (uint64_t *)(v30[6] + 16 * v23);
    *v40 = v19;
    v40[1] = v12;
    v41 = (uint64_t *)(v30[7] + 32 * v23);
    *v41 = v58;
    v41[1] = v60;
    v41[2] = v59;
    v41[3] = v20;
    v42 = v30[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_36;
    v30[2] = v44;
LABEL_9:
    sub_2445773C8(&v67);
    v12 = *((_QWORD *)&v67 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v67 + 1))
      goto LABEL_5;
  }
  v54 = (_QWORD *)*a5;
  v31 = (uint64_t *)(v30[7] + 32 * v23);
  v33 = *v31;
  v32 = v31[1];
  v35 = v31[2];
  v34 = v31[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24457475C(v35, v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24457475C(v59, v20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(v59, v20);
  swift_bridgeObjectRetain();
  v56 = v32;
  v36 = v35;
  swift_bridgeObjectRetain();
  sub_24457475C(v35, v34);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v63 = v33;
  sub_244576944(v58, (uint64_t)sub_244576F64, 0, isUniquelyReferenced_nonNull_native, &v63, a6);
  v38 = v57;
  if (v57)
  {
    v62 = v34;
    v48 = v20;
    v55 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v49 = v59;
    goto LABEL_32;
  }
  v39 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v57 = 0;
  v53 = v39;
  if (v20 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v59;
    sub_2445747E8(v59, v20);
    v52 = v35;
LABEL_7:
    v15 = v34;
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v14, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v36, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v14, v20);
    swift_bridgeObjectRelease();
    v16 = (_QWORD *)(v54[7] + 32 * v23);
    v17 = v16[2];
    v18 = v16[3];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v17, v18);
    *v16 = v53;
    v16[1] = v56;
    v16[2] = v52;
    v16[3] = v15;
    goto LABEL_9;
  }
  if (v34 >> 60 == 15)
  {
    v14 = v59;
    sub_24457475C(v59, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    sub_2445747E8(v14, v20);
    v52 = v14;
    v15 = v20;
    goto LABEL_8;
  }
  if (!a6)
  {
    v45 = v59;
    sub_24457475C(v59, v20);
LABEL_30:
    sub_24457475C(v36, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v45, v20);
    sub_2445747E8(v45, v20);
    sub_2445747E8(v36, v34);
    v52 = v36;
    v14 = v45;
    goto LABEL_7;
  }
  if (a6 == 1)
  {
    v14 = v59;
    sub_24457475C(v59, v20);
    sub_24457475C(v59, v20);
    sub_2445747E8(v35, v34);
    sub_24457475C(v59, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v59, v20);
    sub_2445747E8(v59, v20);
    goto LABEL_26;
  }
  v45 = v59;
  sub_24457475C(v59, v20);
  sub_24457475C(v59, v20);
  sub_24457475C(v36, v34);
  sub_24458C824(v36, v34);
  v47 = v46;
  sub_2445747E8(v36, v34);
  if ((v47 & 1) != 0)
  {
    sub_2445747E8(v59, v20);
    goto LABEL_30;
  }
  v62 = v34;
  v63 = 0;
  v55 = v36;
  v64 = 0xE000000000000000;
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  sub_244577D74();
  v38 = swift_allocError();
  *v50 = 0xD00000000000001FLL;
  v50[1] = 0x80000002445C4CB0;
  swift_willThrow();
  sub_2445747E8(v59, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = v20;
  sub_2445747E8(v59, v20);
  v49 = v59;
LABEL_32:
  sub_2445747E8(v49, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(v49, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(v55, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(v55, v62);
  v79 = v38;
  MEMORY[0x249512DF4](v38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_2445747E8(v49, v48);
    swift_bridgeObjectRelease();
    sub_244577DCC();
    swift_release();
    return MEMORY[0x249512DE8](v79);
  }
LABEL_38:
  v63 = 0;
  v64 = 0xE000000000000000;
  sub_2445C44D4();
  sub_2445C42D0();
  sub_2445C4534();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_24458BB58@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  a2[2] = a1[2];
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  *a2 = v3;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24457475C(v4, v5);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24458BBB0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  a2[2] = a1[2];
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  *a2 = v3;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_24457475C(v5, v6);
}

uint64_t sub_24458BC08(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  void (*v24)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  int64_t v48;
  unint64_t v49;
  _QWORD v50[5];
  unint64_t v51[4];
  uint64_t v52;

  v5 = v4;
  v44 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v45 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v9)
    {
      v52 = (v9 - 1) & v9;
      v16 = __clz(__rbit64(v9)) | (v10 << 6);
    }
    else
    {
      v17 = __OFADD__(v10++, 1);
      if (v17)
        goto LABEL_42;
      if (v10 >= v45)
      {
LABEL_38:
        swift_release();
        return (uint64_t)a1;
      }
      v18 = *(_QWORD *)(v44 + 8 * v10);
      if (!v18)
      {
        v19 = v10 + 1;
        if (v10 + 1 >= v45)
          goto LABEL_38;
        v18 = *(_QWORD *)(v44 + 8 * v19);
        if (v18)
          goto LABEL_17;
        v19 = v10 + 2;
        if (v10 + 2 >= v45)
          goto LABEL_38;
        v18 = *(_QWORD *)(v44 + 8 * v19);
        if (v18)
          goto LABEL_17;
        v19 = v10 + 3;
        if (v10 + 3 >= v45)
          goto LABEL_38;
        v18 = *(_QWORD *)(v44 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v10 = v19;
        }
        else
        {
          v42 = v10 + 4;
          if (v10 + 4 >= v45)
            goto LABEL_38;
          v18 = *(_QWORD *)(v44 + 8 * v42);
          for (v10 += 4; !v18; ++v42)
          {
            v10 = v42 + 1;
            if (__OFADD__(v42, 1))
              goto LABEL_43;
            if (v10 >= v45)
              goto LABEL_38;
            v18 = *(_QWORD *)(v44 + 8 * v10);
          }
        }
      }
      v52 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v10 << 6);
    }
    v20 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    ObjectType = swift_getObjectType();
    v24 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
    swift_bridgeObjectRetain_n();
    v24(v50, v22, v21, ObjectType, a4);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
    sub_24457621C(v50, 0, v51);
    v48 = v10;
    v26 = v51[0];
    v25 = v51[1];
    v27 = v51[2];
    v49 = v51[3];
    v28 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50[0] = v28;
    v31 = sub_2445A14D8(v22, v21);
    v32 = v28[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      break;
    v35 = v30;
    if (v28[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        a1 = (_QWORD *)v50[0];
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_244593458();
        a1 = (_QWORD *)v50[0];
        if ((v35 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_244591D4C(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_2445A14D8(v22, v21);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_44;
      v31 = v36;
      a1 = (_QWORD *)v50[0];
      if ((v35 & 1) != 0)
      {
LABEL_4:
        v11 = (unint64_t *)(a1[7] + 32 * v31);
        v12 = a1;
        v13 = v11[2];
        v14 = v11[3];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = v14;
        a1 = v12;
        sub_2445747E8(v13, v15);
        *v11 = v26;
        v11[1] = v25;
        v11[2] = v27;
        v11[3] = v49;
        goto LABEL_5;
      }
    }
    a1[(v31 >> 6) + 8] |= 1 << v31;
    v38 = (uint64_t *)(a1[6] + 16 * v31);
    *v38 = v22;
    v38[1] = v21;
    v39 = (unint64_t *)(a1[7] + 32 * v31);
    *v39 = v26;
    v39[1] = v25;
    v39[2] = v27;
    v39[3] = v49;
    v40 = a1[2];
    v17 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v17)
      goto LABEL_41;
    a1[2] = v41;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v10 = v48;
    v5 = 0;
    v9 = v52;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_24458BFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void (*v22)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD v34[5];
  unint64_t v35[4];
  int64_t v36;

  v5 = v4;
  v30 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v31 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v36 = v11;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v16)) + (v15 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v18;
    v19 = v18[1];
    ObjectType = swift_getObjectType();
    v22 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32);
    swift_bridgeObjectRetain_n();
    v22(v34, v20, v19, ObjectType, a4);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_2445A4FA8(v34, v35);
    v5 = 0;
    v24 = v35[0];
    v23 = v35[1];
    v25 = a1;
    v26 = v35[2];
    v27 = v35[3];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34[0] = v25;
    sub_244593F58(v24, v23, v26, v27, v20, v19, isUniquelyReferenced_nonNull_native);
    a1 = v34[0];
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
    v11 = v36;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = __OFADD__(v11, 1);
    v15 = v11 + 1;
    if (v14)
      break;
    if (v15 >= v31)
      goto LABEL_26;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    if (!v16)
    {
      v17 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_26;
      v16 = *(_QWORD *)(v30 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v17 = v15 + 2;
      if (v15 + 2 >= v31)
        goto LABEL_26;
      v16 = *(_QWORD *)(v30 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v17 = v15 + 3;
      if (v15 + 3 >= v31)
        goto LABEL_26;
      v16 = *(_QWORD *)(v30 + 8 * v17);
      if (v16)
      {
LABEL_14:
        v15 = v17;
        goto LABEL_15;
      }
      v29 = v15 + 4;
      if (v15 + 4 >= v31)
      {
LABEL_26:
        swift_release();
        return a1;
      }
      v16 = *(_QWORD *)(v30 + 8 * v29);
      for (v15 += 4; !v16; ++v29)
      {
        v15 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_29;
        if (v15 >= v31)
          goto LABEL_26;
        v16 = *(_QWORD *)(v30 + 8 * v15);
      }
    }
LABEL_15:
    v9 = (v16 - 1) & v16;
    v36 = v15;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

BOOL static TypeManifest.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TypeManifest.hash(into:)()
{
  return sub_2445C469C();
}

uint64_t TypeManifest.hashValue.getter()
{
  sub_2445C4690();
  sub_2445C469C();
  return sub_2445C46B4();
}

uint64_t sub_24458C2DC()
{
  sub_2445C4690();
  sub_2445C469C();
  return sub_2445C46B4();
}

uint64_t sub_24458C320()
{
  return sub_2445C469C();
}

uint64_t sub_24458C348()
{
  sub_2445C4690();
  sub_2445C469C();
  return sub_2445C46B4();
}

unint64_t sub_24458C38C()
{
  unint64_t result;

  result = qword_2573724C0;
  if (!qword_2573724C0)
  {
    result = MEMORY[0x249512E54](&protocol conformance descriptor for TypeManifest, &type metadata for TypeManifest);
    atomic_store(result, (unint64_t *)&qword_2573724C0);
  }
  return result;
}

BOOL sub_24458C3D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TypeManifest(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeManifest(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_24458C4CC + 4 * byte_2445C64B5[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_24458C500 + 4 * asc_2445C64B0[v4]))();
}

uint64_t sub_24458C500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24458C508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24458C510);
  return result;
}

uint64_t sub_24458C51C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24458C524);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_24458C528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24458C530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24458C53C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24458C544(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TypeManifest()
{
  return &type metadata for TypeManifest;
}

ValueMetadata *type metadata accessor for FieldPathComponent()
{
  return &type metadata for FieldPathComponent;
}

uint64_t SchemaManifestType.hash(into:)()
{
  return sub_2445C469C();
}

BOOL static SchemaManifestType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SchemaManifestType.hashValue.getter()
{
  sub_2445C4690();
  sub_2445C469C();
  return sub_2445C46B4();
}

BOOL sub_24458C5F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SchemaManifestData.type.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SchemaManifestData.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_244574770(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

_BYTE *SchemaManifestData.init(type:data:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

void static SchemaManifestData.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    sub_24458C824(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

void sub_24458C678(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    sub_24458C824(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

uint64_t sub_24458C69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_24458AA60((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_24458C770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_2445C3CC4();
  v11 = result;
  if (result)
  {
    result = sub_2445C3CDC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_2445C3CD0();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_24458AA60(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_24458C824(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_24458C870()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_24458C8A4 + dword_24458CA7C[v0 >> 62]))();
}

uint64_t sub_24458C8B4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

unint64_t sub_24458CAA0()
{
  unint64_t result;

  result = qword_2573724C8;
  if (!qword_2573724C8)
  {
    result = MEMORY[0x249512E54](&protocol conformance descriptor for SchemaManifestType, &type metadata for SchemaManifestType);
    atomic_store(result, (unint64_t *)&qword_2573724C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SchemaManifestType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaManifestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24458CBC0 + 4 * byte_2445C65B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24458CBF4 + 4 * byte_2445C65B0[v4]))();
}

uint64_t sub_24458CBF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24458CBFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24458CC04);
  return result;
}

uint64_t sub_24458CC10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24458CC18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24458CC1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24458CC24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_24458CC30(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SchemaManifestType()
{
  return &type metadata for SchemaManifestType;
}

uint64_t destroy for SchemaManifestData(uint64_t a1)
{
  return sub_2445747FC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t _s17PoirotSchematizer18SchemaManifestDataVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_244574770(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SchemaManifestData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_244574770(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_2445747FC(v5, v6);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SchemaManifestData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_2445747FC(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaManifestData(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaManifestData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchemaManifestData()
{
  return &type metadata for SchemaManifestData;
}

uint64_t sub_24458CDD8(uint64_t a1, uint64_t a2)
{
  return sub_24458D078(a1, a2, 0xD00000000000001CLL, 0x80000002445C4C90);
}

uint64_t sub_24458CDF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(a2 + 24))(0xD00000000000001CLL, 0x80000002445C4C90, a1, a2);
}

uint64_t sub_24458CE2C(uint64_t a1, uint64_t a2)
{
  return sub_24458D078(a1, a2, 0xD00000000000001BLL, 0x80000002445C4BC0);
}

uint64_t sub_24458CE48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(a2 + 24))(0xD00000000000001BLL, 0x80000002445C4BC0, a1, a2);
}

uint64_t sub_24458CE80(uint64_t a1, uint64_t a2)
{
  return sub_24458D078(a1, a2, 0xD000000000000020, 0x80000002445C4BE0);
}

uint64_t sub_24458CE9C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(a2 + 24))(0xD000000000000020, 0x80000002445C4BE0, a1, a2);
}

uint64_t sub_24458CED4(uint64_t a1, uint64_t a2)
{
  return sub_24458D078(a1, a2, 0xD00000000000001ELL, 0x80000002445C4B40);
}

uint64_t sub_24458CEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_2445C4690();
    sub_2445C42A0();
    v6 = sub_2445C46B4();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_2445C45B8() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_2445C45B8() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_24458D024(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(a2 + 24))(0xD00000000000001ELL, 0x80000002445C4B40, a1, a2);
}

uint64_t sub_24458D05C(uint64_t a1, uint64_t a2)
{
  return sub_24458D078(a1, a2, 0xD00000000000001CLL, 0x80000002445C4C70);
}

uint64_t sub_24458D078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(void))(a2 + 8))();
  LOBYTE(a4) = sub_24458CEF0(a3, a4, v6);
  swift_bridgeObjectRelease();
  return a4 & 1;
}

uint64_t sub_24458D0CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(a2 + 24))(0xD00000000000001CLL, 0x80000002445C4C70, a1, a2);
}

uint64_t static Schematizer.makeSchemaStore(withManifest:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v9 = *a1;
  result = sub_24458E37C(v5, v4, &v9);
  if (!v2)
  {
    v8 = v7;
    swift_getObjectType();
    SchemaStoreDescribing.asPublic()(v8, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t static Schematizer.makeSchemaStoreImpl(withManifestData:ofType:)(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  return sub_24458E37C(a1, a2, a3);
}

uint64_t static Schematizer.makeSchemaStore(withManifest:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  type metadata accessor for ProtoSchemaStore();
  v5 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 16) = sub_244575D80(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v5 + 24) = sub_244575D94(v6);
  v7 = sub_24458E17C(v4);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = v7;
  swift_bridgeObjectRelease();
  v8 = sub_24458DF7C(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v5 + 24) = v8;
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = (uint64_t)&off_25152FFE8;
  return result;
}

uint64_t static Schematizer.makeSchemaStoreImpl(withManifest:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for ProtoSchemaStore();
  v3 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = sub_244575D80(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v3 + 24) = sub_244575D94(v4);
  v5 = sub_24458E17C(v2);
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v5;
  swift_bridgeObjectRelease();
  v6 = sub_24458DF7C(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v6;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t static Schematizer.makeSchemaManifest(withData:ofType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  __int128 v9;

  if ((*a3 & 1) != 0)
  {
    sub_244574770(a1, a2);
    result = SchemaManifest.init(withPoirotDSCData:)(a1, a2, (unint64_t *)&v9);
    if (!v4)
      *(_OWORD *)a4 = v9;
  }
  else
  {
    sub_244574770(a1, a2);
    return SchemaManifest.init(withJSON:)(a1, a2, a4);
  }
  return result;
}

void static Schematizer.searchValue(in:withFieldPath:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2445A18C0(0, v4, 0);
    v6 = (uint64_t *)(a3 + 32);
    v7 = *(_QWORD *)(v14 + 16);
    v8 = 24 * v7;
    do
    {
      v10 = *v6++;
      v9 = v10;
      v11 = *(_QWORD *)(v14 + 24);
      v12 = v7 + 1;
      if (v7 >= v11 >> 1)
        sub_2445A18C0(v11 > 1, v7 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12;
      v13 = v14 + v8;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = 0;
      *(_BYTE *)(v13 + 48) = 0;
      v8 += 24;
      v7 = v12;
      --v4;
    }
    while (v4);
  }
  __asm { BR              X10 }
}

uint64_t sub_24458D560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v1;
  v7 = v2;
  v8 = BYTE2(v2);
  v9 = BYTE3(v2);
  v10 = BYTE4(v2);
  v11 = BYTE5(v2);
  sub_244572B78((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v2), v0, v5, v4);
  return swift_bridgeObjectRelease();
}

double Schematizer.RepeatableFieldIterator.next()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  unsigned __int8 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_24458E514(v1, (uint64_t)&v4);
  if (v6 != 255)
    __asm { BR              X10 }
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 56) = -256;
  return result;
}

uint64_t sub_24458DA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v31;
  _BYTE v32[48];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  _BYTE v47[56];

  v9 = (uint64_t)(a3 + 7);
  sub_24457333C((uint64_t)(a3 + 7), (uint64_t)&v35);
  TypeSchemaDescription.init(typeSchema:)((uint64_t)&v35, (uint64_t)v47);
  if ((a3[3] & 1) != 0)
  {
    v10 = a2 - a1;
    if (!a1)
      v10 = 0;
    v41 = a1;
    v42 = a2;
    v44 = 0;
    v45 = 0;
    v43 = v10;
    v46 = 1;
    __swift_instantiateConcreteTypeFromMangledName(qword_2543F6F48);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_2445C6170;
    *(_QWORD *)(v11 + 32) = a3[6];
    *(_QWORD *)(v11 + 40) = 0;
    *(_BYTE *)(v11 + 48) = 1;
    sub_24457333C(v9, (uint64_t)v32);
    TypeSchemaDescription.init(typeSchema:)((uint64_t)v32, (uint64_t)&v34);
    v33 = v11;
    sub_244572CCC(&v33, 0, (uint64_t)&v35);
    sub_2445732C8((uint64_t)&v33);
    result = sub_2445752C0((uint64_t)v47);
    if (!v4)
    {
      v13 = v46;
      v15 = v44;
      v14 = v45;
      if (v46)
        v14 = 0;
      *a3 = v14;
      a3[1] = v13;
      a3[2] = v15;
      *((_BYTE *)a3 + 24) = 0;
      return sub_24458F338((uint64_t)&v35, a4);
    }
    return result;
  }
  v16 = a3[2];
  if ((a3[1] & 1) == 0)
  {
    v17 = *a3;
    if (v16 < *a3)
    {
      v35 = a1;
      v36 = a2;
      v37 = v17;
      v38 = v16;
      v39 = 0;
      v40 = 1;
      sub_2445B1638((uint64_t)v47, a4);
      goto LABEL_54;
    }
LABEL_15:
    result = sub_2445752C0((uint64_t)v47);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_QWORD *)(a4 + 48) = 0;
    *(_WORD *)(a4 + 56) = -256;
    return result;
  }
  if (a1)
  {
    v18 = a2 - a1;
    if (v16 >= a2 - a1)
      goto LABEL_15;
    v19 = a1;
  }
  else
  {
    if ((v16 & 0x8000000000000000) == 0)
      goto LABEL_15;
    v19 = 0;
    v18 = 0;
  }
  v35 = v19;
  v36 = a2;
  v37 = v18;
  v38 = v16;
  v39 = 0;
  v40 = 1;
  v20 = *(unsigned __int8 *)(a1 + v16);
  if (*(char *)(a1 + v16) < 0)
  {
    if (v16 + 1 >= v18)
      goto LABEL_53;
    v20 &= 0x7Fu;
    v23 = 7;
    while (1)
    {
      v20 |= (unint64_t)(*(_BYTE *)(a1 + 1 + v16) & 0x7F) << v23;
      if ((*(_BYTE *)(a1 + 1 + v16) & 0x80) == 0)
        break;
      if (v16 + 2 < v18)
      {
        ++v16;
        v24 = v23 >= 0x39;
        v23 += 7;
        if (!v24)
          continue;
      }
      goto LABEL_53;
    }
    v38 = v16 + 2;
    if (v20 >= 0xFFFFFFFF)
    {
LABEL_53:
      sub_24457FE80();
      swift_allocError();
      *(_QWORD *)v31 = 1;
      *(_OWORD *)(v31 + 8) = 0u;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_OWORD *)(v31 + 40) = 0u;
      *(_OWORD *)(v31 + 56) = 0u;
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_WORD *)(v31 + 104) = 512;
      swift_willThrow();
LABEL_54:
      result = sub_2445752C0((uint64_t)v47);
      if ((a3[3] & 1) == 0)
        a3[2] = v38;
      return result;
    }
  }
  else
  {
    v38 = v16 + 1;
  }
  v21 = sub_2445955D0(v20);
  if (v4)
    goto LABEL_54;
  if (a3[6] == v21 >> 3)
  {
LABEL_21:
    v22 = sub_2445735B0(v21);
    sub_2445735C4((uint64_t)v47, v22, a4);
    goto LABEL_54;
  }
  v25 = a2 - a1;
  while (1)
  {
    sub_244581834(v21);
    v26 = v38;
    if (v38 >= v18)
      break;
    if (a1)
    {
      v27 = v25;
      if (v38 >= v25)
        goto LABEL_53;
    }
    else
    {
      if ((v38 & 0x8000000000000000) == 0)
        goto LABEL_53;
      v27 = 0;
    }
    v21 = *(unsigned __int8 *)(a1 + v38);
    if (*(char *)(a1 + v38) < 0)
    {
      if (v38 + 1 >= v27)
        goto LABEL_53;
      v21 &= 0x7Fu;
      v28 = 7;
      while (1)
      {
        v21 |= (unint64_t)(*(_BYTE *)(a1 + 1 + v26) & 0x7F) << v28;
        if ((*(_BYTE *)(a1 + 1 + v26) & 0x80) == 0)
          break;
        if (v26 + 2 < v27)
        {
          ++v26;
          v29 = v28 > 0x38;
          v28 += 7;
          if (!v29)
            continue;
        }
        goto LABEL_53;
      }
      v38 = v26 + 2;
      if (v21 > 0xFFFFFFFE)
        goto LABEL_53;
    }
    else
    {
      ++v38;
    }
    if (v21 < 8 || (v21 & 6) == 6)
      goto LABEL_53;
    if (a3[6] == v21 >> 3)
      goto LABEL_21;
  }
  result = sub_2445752C0((uint64_t)v47);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)(a4 + 48) = 0;
  *(_WORD *)(a4 + 56) = -256;
  if ((a3[3] & 1) == 0)
    a3[2] = v26;
  return result;
}

uint64_t static Schematizer.makeRepeatableFieldIterator(in:withFieldNumber:type:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_24457333C(a4, a5 + 56);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 24) = 1;
  *(_QWORD *)(a5 + 32) = a1;
  *(_QWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3;
  return sub_244574770(a1, a2);
}

uint64_t sub_24458DEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_2445C3CC4();
  v9 = result;
  if (result)
  {
    result = sub_2445C3CDC();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = sub_2445C3CD0();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  return sub_24458DA5C(v9, v15, a3, a4);
}

uint64_t sub_24458DF7C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257372310);
  result = sub_2445C4558();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    result = v15[1];
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 32 * i);
    v19 = *v17;
    v18 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v16;
    v22[1] = result;
    v23 = v3[7] + 40 * i;
    *(_QWORD *)v23 = v19;
    *(_QWORD *)(v23 + 8) = v18;
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v21;
    *(_BYTE *)(v23 + 32) = 0;
    v24 = v3[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_24457475C(v20, v21);
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v27)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v27)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v27)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v27)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v27)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24458E17C(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257372318);
  result = sub_2445C4558();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    result = v15[1];
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 32 * i);
    v19 = *v17;
    v18 = v17[1];
    v21 = v17[2];
    v20 = v17[3];
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v16;
    v22[1] = result;
    v23 = v3[7] + 40 * i;
    *(_QWORD *)v23 = v19;
    *(_QWORD *)(v23 + 8) = v18;
    *(_QWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 24) = v20;
    *(_BYTE *)(v23 + 32) = 0;
    v24 = v3[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v18, v21);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v27)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v27)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v27)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v27)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v27)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24458E37C(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13[3];
  _QWORD v14[2];

  if ((*a3 & 1) != 0)
  {
    sub_244574770(a1, a2);
    SchemaManifest.init(withPoirotDSCData:)(a1, a2, v13);
    if (v3)
      return v4;
    v7 = v13[0];
    v8 = v13[1];
  }
  else
  {
    sub_244574770(a1, a2);
    SchemaManifest.init(withJSON:)(a1, a2, v14);
    if (v3)
      return v4;
    v7 = v14[0];
    v8 = v14[1];
  }
  type metadata accessor for ProtoSchemaStore();
  v4 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 16) = sub_244575D80(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v4 + 24) = sub_244575D94(v9);
  v10 = sub_24458E17C(v8);
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v10;
  swift_bridgeObjectRelease();
  v11 = sub_24458DF7C(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24458E514(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Schematizer.RepeatableFieldIterator.State(a2, a1);
  return a2;
}

uint64_t sub_24458E548(uint64_t a1)
{
  destroy for Schematizer.RepeatableFieldIterator.IterationState(a1);
  return a1;
}

uint64_t sub_24458E574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543F6F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24458E5BC(uint64_t a1)
{
  destroy for Schematizer.RepeatableFieldIterator.State(a1);
  return a1;
}

uint64_t sub_24458E5E8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Schematizer.RepeatableFieldIterator.IterationState(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for Schematizer()
{
  return &type metadata for Schematizer;
}

uint64_t destroy for Schematizer.RepeatableFieldIterator(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 96);
  if (v1 != 255)
  {
    v2 = result;
    result = sub_2445747FC(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
    if (v1 <= 1)
      return __swift_destroy_boxed_opaque_existential_1(v2 + 56);
  }
  return result;
}

uint64_t initializeWithCopy for Schematizer.RepeatableFieldIterator(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 == 255)
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    sub_244574770(v8, v9);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v10 = (_OWORD *)(a1 + 56);
    v11 = (_OWORD *)(a2 + 56);
    if (v4 == 1)
    {
      v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v13;
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v11);
      *(_BYTE *)(a1 + 96) = 1;
    }
    else if (v4)
    {
      v14 = *(_OWORD *)(a2 + 72);
      *v10 = *v11;
      *(_OWORD *)(a1 + 72) = v14;
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v12;
      (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  return a1;
}

uint64_t assignWithCopy for Schematizer.RepeatableFieldIterator(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v4 = *((unsigned __int8 *)a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v4 == 255)
    {
      v22 = *a2;
      v23 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v23;
      *(_OWORD *)a1 = v22;
      v24 = a2[3];
      v25 = a2[4];
      v26 = a2[5];
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 80) = v26;
      *(_OWORD *)(a1 + 48) = v24;
      return a1;
    }
    v11 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v11;
    v12 = *((_QWORD *)a2 + 4);
    v13 = *((_QWORD *)a2 + 5);
    sub_244574770(v12, v13);
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    v14 = (_OWORD *)(a1 + 56);
    v15 = (__int128 *)((char *)a2 + 56);
    if (*((_BYTE *)a2 + 96) != 1)
    {
      if (*((_BYTE *)a2 + 96))
      {
        v31 = *v15;
        v32 = *(__int128 *)((char *)a2 + 72);
        *(_OWORD *)(a1 + 81) = *(__int128 *)((char *)a2 + 81);
        *v14 = v31;
        *(_OWORD *)(a1 + 72) = v32;
        return a1;
      }
      v16 = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 80) = v16;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(_OWORD *, __int128 *))(v16 - 8))(v14, v15);
LABEL_11:
      *(_BYTE *)(a1 + 96) = 0;
      return a1;
    }
    v30 = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    (**(void (***)(_OWORD *, __int128 *))(v30 - 8))(v14, v15);
LABEL_17:
    *(_BYTE *)(a1 + 96) = 1;
    return a1;
  }
  if (v4 == 255)
  {
    sub_24458E548(a1);
    v18 = a2[1];
    v17 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = v17;
    v20 = a2[4];
    v19 = a2[5];
    v21 = a2[3];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 80) = v19;
    *(_OWORD *)(a1 + 48) = v21;
    return a1;
  }
  v5 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v5;
  v6 = *((_QWORD *)a2 + 4);
  v7 = *((_QWORD *)a2 + 5);
  sub_244574770(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  sub_2445747FC(v8, v9);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  if ((__int128 *)a1 != a2)
  {
    sub_24458E974(a1 + 56);
    if (*((_BYTE *)a2 + 96) != 1)
    {
      if (*((_BYTE *)a2 + 96))
      {
        v28 = *(__int128 *)((char *)a2 + 56);
        v29 = *(__int128 *)((char *)a2 + 72);
        *(_OWORD *)(a1 + 81) = *(__int128 *)((char *)a2 + 81);
        *(_OWORD *)(a1 + 56) = v28;
        *(_OWORD *)(a1 + 72) = v29;
        return a1;
      }
      v10 = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 56, (uint64_t)a2 + 56);
      goto LABEL_11;
    }
    v27 = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 80) = v27;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1 + 56, (uint64_t)a2 + 56);
    goto LABEL_17;
  }
  return a1;
}

uint64_t sub_24458E974(uint64_t a1)
{
  destroy for TypeSchemaDescription();
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Schematizer.RepeatableFieldIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 96) == 255)
    goto LABEL_6;
  if (*(unsigned __int8 *)(a2 + 96) == 255)
  {
    sub_24458E548(a1);
LABEL_6:
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_2445747FC(v4, v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    sub_24458E974(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Schematizer.RepeatableFieldIterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Schematizer.RepeatableFieldIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Schematizer.RepeatableFieldIterator()
{
  return &type metadata for Schematizer.RepeatableFieldIterator;
}

uint64_t destroy for Schematizer.RepeatableFieldIterator.IterationState(uint64_t a1)
{
  uint64_t result;

  result = sub_2445747FC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (*(unsigned __int8 *)(a1 + 96) <= 1u)
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  return result;
}

uint64_t initializeWithCopy for Schematizer.RepeatableFieldIterator.IterationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  sub_244574770(v4, v5);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = (_OWORD *)(a1 + 56);
  v7 = (_OWORD *)(a2 + 56);
  if (*(_BYTE *)(a2 + 96) == 1)
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 80) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v6, v7);
    *(_BYTE *)(a1 + 96) = 1;
  }
  else if (*(_BYTE *)(a2 + 96))
  {
    v10 = *(_OWORD *)(a2 + 72);
    *v6 = *v7;
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
    *(_BYTE *)(a1 + 96) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for Schematizer.RepeatableFieldIterator.IterationState(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  sub_244574770(v5, v6);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  sub_2445747FC(v7, v8);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  if ((__int128 *)a1 != a2)
  {
    sub_24458E974(a1 + 56);
    if (*((_BYTE *)a2 + 96) == 1)
    {
      v10 = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 56, (uint64_t)a2 + 56);
      *(_BYTE *)(a1 + 96) = 1;
    }
    else if (*((_BYTE *)a2 + 96))
    {
      v11 = *(__int128 *)((char *)a2 + 56);
      v12 = *(__int128 *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 81) = *(__int128 *)((char *)a2 + 81);
      *(_OWORD *)(a1 + 56) = v11;
      *(_OWORD *)(a1 + 72) = v12;
    }
    else
    {
      v9 = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 80) = v9;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, (uint64_t)a2 + 56);
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for Schematizer.RepeatableFieldIterator.IterationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_2445747FC(v4, v5);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    sub_24458E974(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.IterationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.IterationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Schematizer.RepeatableFieldIterator.IterationState()
{
  return &type metadata for Schematizer.RepeatableFieldIterator.IterationState;
}

uint64_t destroy for Schematizer.RepeatableFieldIterator.State(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 96);
  if (v1 <= 2)
  {
    v2 = result;
    result = sub_2445747FC(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
    if (v1 != 2)
      return __swift_destroy_boxed_opaque_existential_1(v2 + 56);
  }
  return result;
}

uint64_t initializeWithCopy for Schematizer.RepeatableFieldIterator.State(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 > 2)
  {
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    v5 = (_OWORD *)(a2 + 56);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    sub_244574770(v6, v7);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v8 = (_OWORD *)(a1 + 56);
    if (v4 == 1)
    {
      v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v13;
      (**(void (***)(_OWORD *, uint64_t))(v13 - 8))(v8, a2 + 56);
      *(_BYTE *)(a1 + 96) = 1;
    }
    else if (v4)
    {
      v14 = *(_OWORD *)(a2 + 72);
      *v8 = *v5;
      *(_OWORD *)(a1 + 72) = v14;
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v9;
      (**(void (***)(_OWORD *, uint64_t))(v9 - 8))(v8, a2 + 56);
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  return a1;
}

uint64_t assignWithCopy for Schematizer.RepeatableFieldIterator.State(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 *v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = (_OWORD *)(a1 + 56);
  v5 = (__int128 *)((char *)a2 + 56);
  v6 = *((unsigned __int8 *)a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) > 2u)
  {
    if (v6 <= 2)
    {
      v14 = *a2;
      *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
      *(_OWORD *)a1 = v14;
      v15 = *((_QWORD *)a2 + 4);
      v16 = *((_QWORD *)a2 + 5);
      sub_244574770(v15, v16);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v16;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      if (*((_BYTE *)a2 + 96) != 1)
      {
        if (*((_BYTE *)a2 + 96))
          goto LABEL_6;
        goto LABEL_10;
      }
LABEL_14:
      v23 = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 80) = v23;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(_OWORD *, __int128 *))(v23 - 8))(v4, v5);
      *(_BYTE *)(a1 + 96) = 1;
      return a1;
    }
LABEL_13:
    v18 = *a2;
    v19 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v19;
    *(_OWORD *)a1 = v18;
    v20 = a2[3];
    v21 = a2[4];
    v22 = a2[5];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = v22;
    *(_OWORD *)(a1 + 48) = v20;
    return a1;
  }
  if (v6 > 2)
  {
    sub_2445747FC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    if (*(unsigned __int8 *)(a1 + 96) <= 1u)
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    goto LABEL_13;
  }
  v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  v8 = *((_QWORD *)a2 + 4);
  v9 = *((_QWORD *)a2 + 5);
  sub_244574770(v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  sub_2445747FC(v10, v11);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  if ((__int128 *)a1 != a2)
  {
    sub_24458E974((uint64_t)v4);
    if (*((_BYTE *)a2 + 96) != 1)
    {
      if (*((_BYTE *)a2 + 96))
      {
LABEL_6:
        v12 = *v5;
        v13 = v5[1];
        *(_OWORD *)((char *)v4 + 25) = *(__int128 *)((char *)v5 + 25);
        *v4 = v12;
        v4[1] = v13;
        return a1;
      }
LABEL_10:
      v17 = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 80) = v17;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(_OWORD *, __int128 *))(v17 - 8))(v4, v5);
      *(_BYTE *)(a1 + 96) = 0;
      return a1;
    }
    goto LABEL_14;
  }
  return a1;
}

uint64_t assignWithTake for Schematizer.RepeatableFieldIterator.State(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(unsigned __int8 *)(a1 + 96) > 2u)
  {
LABEL_7:
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    return a1;
  }
  v4 = (_OWORD *)(a1 + 56);
  if (*(unsigned __int8 *)(a2 + 96) > 2u)
  {
    sub_2445747FC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    if (*(unsigned __int8 *)(a1 + 96) <= 1u)
      __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    goto LABEL_7;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_2445747FC(v5, v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v7 = (_OWORD *)(a2 + 56);
    sub_24458E974(a1 + 56);
    v8 = v7[1];
    *v4 = *v7;
    *(_OWORD *)(a1 + 72) = v8;
    *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)v7 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  if (v4 + 1 >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 96) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t sub_24458F2D0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 96);
  if (v1 > 2)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_24458F2E4(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFD)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 96) = 0;
    *(_QWORD *)a1 = a2 - 254;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 96) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Schematizer.RepeatableFieldIterator.State()
{
  return &type metadata for Schematizer.RepeatableFieldIterator.State;
}

uint64_t sub_24458F338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543F6F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.Bookmark(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.Bookmark(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Schematizer.RepeatableFieldIterator.Bookmark()
{
  return &type metadata for Schematizer.RepeatableFieldIterator.Bookmark;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.ArrayType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Schematizer.RepeatableFieldIterator.ArrayType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_24458F440(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_24458F45C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Schematizer.RepeatableFieldIterator.ArrayType()
{
  return &type metadata for Schematizer.RepeatableFieldIterator.ArrayType;
}

uint64_t sub_24458F490(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_2445C43C0();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_24459476C(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24458F624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[4];
  _QWORD v28[4];
  char v29;
  uint64_t v30;

  v5 = v3;
  v9 = (uint64_t *)(v3 + 24);
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 24);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v11 = sub_2445A14D8(a1, a2);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_endAccess();
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v20 = a1;
    *(_QWORD *)(v20 + 8) = a2;
    *(_BYTE *)(v20 + 16) = 0;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v25 = a1;
  v26 = a3;
  v13 = *(_QWORD *)(v10 + 56) + 40 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v17 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v18 = *(_BYTE *)(v13 + 32);
  swift_endAccess();
  sub_244577ED4(v14, v15, v17, v16, v18);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    result = type metadata accessor for ProtoMessageSchema();
    v26[3] = result;
    v26[4] = (uint64_t)&off_2515301C0;
    *v26 = v14;
  }
  else
  {
    v27[0] = v14;
    v27[1] = v15;
    v27[2] = v17;
    v27[3] = v16;
    v24 = type metadata accessor for ProtoMessageSchema();
    swift_allocObject();
    sub_244577ED4(v14, v15, v17, v16, 0);
    swift_bridgeObjectRetain();
    sub_244577ED4(v14, v15, v17, v16, 0);
    swift_retain();
    v21 = sub_2445B6664(v25, a2, v27, v5, (uint64_t)&off_25152FFE8);
    if (v4)
    {
      sub_24458FD74(v14, v15, v17, v16, 0);
      return sub_24458FD74(v14, v15, v17, v16, 0);
    }
    else
    {
      v22 = v21;
      v28[0] = v21;
      memset(&v28[1], 0, 24);
      v29 = 1;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = *v9;
      *v9 = 0x8000000000000000;
      sub_244593800((uint64_t)v28, v25, a2, isUniquelyReferenced_nonNull_native, &qword_257372310, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577ED4, (uint64_t (*)(uint64_t, unint64_t))sub_244595314, (uint64_t (*)(uint64_t, uint64_t))sub_24459455C);
      *v9 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      v26[3] = v24;
      v26[4] = (uint64_t)&off_2515301C0;
      sub_24458FD74(v14, v15, v17, v16, 0);
      result = sub_24458FD74(v14, v15, v17, v16, 0);
      *v26 = v22;
    }
  }
  return result;
}

uint64_t sub_24458F948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[4];
  _QWORD v28[4];
  char v29;
  uint64_t v30;

  v5 = v3;
  v9 = (uint64_t *)(v3 + 16);
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 16);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v11 = sub_2445A14D8(a1, a2);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_endAccess();
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v20 = a1;
    *(_QWORD *)(v20 + 8) = a2;
    *(_BYTE *)(v20 + 16) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  v25 = a1;
  v26 = a3;
  v13 = *(_QWORD *)(v10 + 56) + 40 * v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v17 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v18 = *(_BYTE *)(v13 + 32);
  swift_endAccess();
  sub_244577F1C(v14, v15, v17, v16, v18);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    result = type metadata accessor for ProtoEnumSchema();
    v26[3] = result;
    v26[4] = (uint64_t)&off_25152FB50;
    *v26 = v14;
  }
  else
  {
    v27[0] = v14;
    v27[1] = v15;
    v27[2] = v17;
    v27[3] = v16;
    v24 = type metadata accessor for ProtoEnumSchema();
    swift_allocObject();
    sub_244577F1C(v14, v15, v17, v16, 0);
    swift_bridgeObjectRetain();
    sub_244577F1C(v14, v15, v17, v16, 0);
    swift_retain();
    v21 = sub_24458334C(v25, a2, v27, v5, (uint64_t)&off_25152FFE8);
    if (v4)
    {
      sub_24458FE38(v14, v15, v17, v16, 0);
      return sub_24458FE38(v14, v15, v17, v16, 0);
    }
    else
    {
      v22 = v21;
      v28[0] = v21;
      memset(&v28[1], 0, 24);
      v29 = 1;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = *v9;
      *v9 = 0x8000000000000000;
      sub_244593800((uint64_t)v28, v25, a2, isUniquelyReferenced_nonNull_native, &qword_257372318, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577F1C, (uint64_t (*)(uint64_t, unint64_t))sub_244594528, (uint64_t (*)(uint64_t, uint64_t))sub_24459455C);
      *v9 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      v26[3] = v24;
      v26[4] = (uint64_t)&off_25152FB50;
      sub_24458FE38(v14, v15, v17, v16, 0);
      result = sub_24458FE38(v14, v15, v17, v16, 0);
      *v26 = v22;
    }
  }
  return result;
}

unint64_t sub_24458FC70()
{
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_2445C45AC();
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

uint64_t sub_24458FD1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProtoSchemaStore()
{
  return objc_opt_self();
}

uint64_t destroy for ProtoSchemaStore.MessageContainer(uint64_t a1, uint64_t a2)
{
  return sub_24458FE20(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24458FD74);
}

uint64_t sub_24458FD74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_2445747E8(a3, a4);
}

uint64_t initializeWithCopy for ProtoSchemaStore.MessageContainer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_24458FE8C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577ED4);
}

uint64_t *assignWithCopy for ProtoSchemaStore.MessageContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_24458FF04(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577ED4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24458FD74);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ProtoSchemaStore.MessageContainer(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24458FF90(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24458FD74);
}

ValueMetadata *type metadata accessor for ProtoSchemaStore.MessageContainer()
{
  return &type metadata for ProtoSchemaStore.MessageContainer;
}

uint64_t destroy for ProtoSchemaStore.EnumContainer(uint64_t a1, uint64_t a2)
{
  return sub_24458FE20(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24458FE38);
}

uint64_t sub_24458FE20(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_24458FE38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_release();
  swift_bridgeObjectRelease();
  sub_2445747E8(a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProtoSchemaStore.EnumContainer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_24458FE8C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577F1C);
}

uint64_t sub_24458FE8C(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = *((unsigned __int8 *)a2 + 32);
  a4(*a2, v6, v7, v8, v9);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  return a1;
}

uint64_t *assignWithCopy for ProtoSchemaStore.EnumContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_24458FF04(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_244577F1C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24458FE38);
}

uint64_t *sub_24458FF04(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = *((unsigned __int8 *)a2 + 32);
  a4(*a2, v8, v9, v10, v11);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = *((unsigned __int8 *)a1 + 32);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  *((_BYTE *)a1 + 32) = v11;
  a5(v12, v13, v14, v15, v16);
  return a1;
}

uint64_t *assignWithTake for ProtoSchemaStore.EnumContainer(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24458FF90(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24458FE38);
}

uint64_t *sub_24458FF90(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *a1;
  v9 = a1[1];
  v8 = a1[2];
  v10 = a1[3];
  v11 = *((unsigned __int8 *)a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v12;
  *((_BYTE *)a1 + 32) = v6;
  a4(v7, v9, v8, v10, v11);
  return a1;
}

uint64_t _s17PoirotSchematizer16ProtoSchemaStoreC13EnumContainerOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s17PoirotSchematizer16ProtoSchemaStoreC13EnumContainerOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_24459006C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_244590074(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ProtoSchemaStore.EnumContainer()
{
  return &type metadata for ProtoSchemaStore.EnumContainer;
}

uint64_t sub_244590090()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  return sub_24458F490(v0);
}

uint64_t sub_2445900C8()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  return sub_24458F490(v0);
}

uint64_t sub_244590100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24458F624(a1, a2, a3);
}

uint64_t sub_244590114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24458F948(a1, a2, a3);
}

unint64_t sub_244590128()
{
  return sub_24458FC70();
}

uint64_t sub_244590148(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[64];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722D0);
  v37 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v5 + 56) + 56 * v17;
    if ((v37 & 1) != 0)
    {
      sub_244577DD4(v25, (uint64_t)v38);
    }
    else
    {
      sub_24459529C(v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_244577DD4((uint64_t)v38, *(_QWORD *)(v7 + 56) + 56 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24459046C(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int64_t v50;

  v5 = v4;
  v7 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v48 = a2;
  v8 = sub_2445C4564();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_40;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v45 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v7 + 64);
  v43 = v5;
  v44 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  v47 = v7;
  while (1)
  {
    if (v12)
    {
      v49 = (v12 - 1) & v12;
      v50 = v15;
      v22 = __clz(__rbit64(v12)) | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    v26 = v15 + 1;
    if (!v25)
    {
      v26 = v15 + 2;
      if (v15 + 2 >= v44)
        goto LABEL_33;
      v25 = v45[v26];
      if (!v25)
      {
        v27 = v15 + 3;
        if (v15 + 3 >= v44)
        {
LABEL_33:
          swift_release();
          v5 = v43;
          if ((v48 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = v45[v27];
        if (!v25)
        {
          while (1)
          {
            v26 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v26 >= v44)
              goto LABEL_33;
            v25 = v45[v26];
            ++v27;
            if (v25)
              goto LABEL_30;
          }
        }
        v26 = v15 + 3;
      }
    }
LABEL_30:
    v49 = (v25 - 1) & v25;
    v50 = v26;
    v22 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_31:
    v32 = *(_QWORD *)(v7 + 56);
    v33 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v22);
    v34 = *v33;
    v35 = v33[1];
    v36 = (uint64_t *)(v32 + 40 * v22);
    v37 = *v36;
    v38 = v36[1];
    v40 = v36[2];
    v39 = v36[3];
    v41 = *((unsigned __int8 *)v36 + 32);
    if ((v48 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      a4(v37, v38, v40, v39, v41);
    }
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v34;
    v20[1] = v35;
    v21 = *(_QWORD *)(v9 + 56) + 40 * v19;
    *(_QWORD *)v21 = v37;
    *(_QWORD *)(v21 + 8) = v38;
    *(_QWORD *)(v21 + 16) = v40;
    *(_QWORD *)(v21 + 24) = v39;
    *(_BYTE *)(v21 + 32) = v41;
    ++*(_QWORD *)(v9 + 16);
    v7 = v47;
    v12 = v49;
    v15 = v50;
  }
  swift_release();
  v5 = v43;
  v24 = v45;
  if ((v48 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v42 = 1 << *(_BYTE *)(v7 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v5 = v9;
  return result;
}

uint64_t sub_2445907D8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  __int128 v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372338);
  v40 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + (v21 << 6);
      v33 = *(_BYTE *)v32;
      v44 = *(_QWORD *)(v32 + 8);
      v45 = *(_OWORD *)(v32 + 16);
      v42 = *(_DWORD *)(v32 + 36);
      v43 = *(_BYTE *)(v32 + 32);
      v41 = *(_BYTE *)(v32 + 40);
      v34 = *(_QWORD *)(v32 + 48);
      v35 = *(_QWORD *)(v32 + 56);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24457475C(v34, v35);
      }
      sub_2445C4690();
      sub_2445C42A0();
      result = sub_2445C46B4();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + (v17 << 6);
      *(_BYTE *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v44;
      *(_OWORD *)(v19 + 16) = v45;
      *(_BYTE *)(v19 + 32) = v43;
      *(_DWORD *)(v19 + 36) = v42;
      *(_BYTE *)(v19 + 40) = v41;
      *(_QWORD *)(v19 + 48) = v34;
      *(_QWORD *)(v19 + 56) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244590B4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722E0);
  result = sub_2445C4564();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        sub_24457466C(v21, (uint64_t)v31);
      else
        sub_244577E90((uint64_t)v21, (uint64_t)v31);
      result = sub_2445C4684();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = sub_24457466C(v31, *(_QWORD *)(v7 + 56) + 40 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244590E10(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[80];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722F0);
  v37 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v5 + 56) + 72 * v17;
    if ((v37 & 1) != 0)
    {
      sub_244577E54(v25, (uint64_t)v38);
    }
    else
    {
      sub_244595224(v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_244577E54((uint64_t)v38, *(_QWORD *)(v7 + 56) + 72 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244591134(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372308);
  v37 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24459143C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _BYTE v35[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573724D8);
  v6 = sub_2445C4564();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (uint64_t *)(*(_QWORD *)(v5 + 56) + (v17 << 6));
      if ((a2 & 1) != 0)
      {
        sub_244583264((uint64_t)v24, (uint64_t)v35);
      }
      else
      {
        sub_244595384(v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_2445C4690();
      sub_2445C42A0();
      result = sub_2445C46B4();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = sub_244583264((uint64_t)v35, *(_QWORD *)(v7 + 56) + (v14 << 6));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244591738(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  int64_t v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372328);
  v44 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v43 = v5;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v45 = v13;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    v25 = v13 + 1;
    if (!v24)
    {
      v25 = v13 + 2;
      if (v13 + 2 >= v41)
        goto LABEL_33;
      v24 = v42[v25];
      if (!v24)
      {
        v26 = v13 + 3;
        if (v13 + 3 >= v41)
        {
LABEL_33:
          swift_release();
          if ((v44 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v42[v26];
        if (!v24)
        {
          while (1)
          {
            v25 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v25 >= v41)
              goto LABEL_33;
            v24 = v42[v25];
            ++v26;
            if (v24)
              goto LABEL_30;
          }
        }
        v25 = v13 + 3;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v45 = v25;
    v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_31:
    v31 = *(_QWORD *)(v5 + 56);
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(v31 + 32 * v21);
    v37 = *v35;
    v36 = v35[1];
    v38 = v35[2];
    v39 = v35[3];
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v36, v38);
      swift_bridgeObjectRetain();
    }
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v34;
    v18[1] = v33;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 32 * v17);
    *v19 = v37;
    v19[1] = v36;
    v19[2] = v38;
    v19[3] = v39;
    ++*(_QWORD *)(v7 + 16);
    v5 = v43;
    v13 = v45;
  }
  swift_release();
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244591A88(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372300);
  result = sub_2445C4564();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v13)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        sub_244574770(v31, *((unint64_t *)&v31 + 1));
      result = sub_2445C4684();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_244591D4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372320);
  v38 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_33;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_33;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 32 * v21;
      v39 = *(_OWORD *)v32;
      v33 = *(_QWORD *)(v32 + 16);
      v34 = *(_QWORD *)(v32 + 24);
      if ((v38 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24457475C(v33, v34);
      }
      sub_2445C4690();
      sub_2445C42A0();
      result = sub_2445C46B4();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 32 * v17;
      *(_OWORD *)v19 = v39;
      *(_QWORD *)(v19 + 16) = v33;
      *(_QWORD *)(v19 + 24) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_244592080(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372330);
  v36 = a2;
  v6 = sub_2445C4564();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_244592394()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[56];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722D0);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 56 * v15;
    sub_24459529C(*(_QWORD *)(v2 + 56) + 56 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_244577DD4((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24459257C(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  v31 = v2;
  v3 = *v2;
  v4 = sub_2445C4558();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v31 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v3 + 64), 8 * v7);
  v32 = v3 + 64;
  v9 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v10 = 1 << *(_BYTE *)(v3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v3 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v32 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v3 + 56);
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v15);
    v19 = v18[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v17 + v20);
    v22 = *(_QWORD *)(v17 + v20 + 8);
    v23 = *(_QWORD *)(v17 + v20 + 16);
    v24 = *(_QWORD *)(v17 + v20 + 24);
    v25 = *(unsigned __int8 *)(v17 + v20 + 32);
    v26 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v16);
    *v26 = *v18;
    v26[1] = v19;
    v27 = *(_QWORD *)(v5 + 56) + v20;
    *(_QWORD *)v27 = v21;
    *(_QWORD *)(v27 + 8) = v22;
    *(_QWORD *)(v27 + 16) = v23;
    *(_QWORD *)(v27 + 24) = v24;
    *(_BYTE *)(v27 + 32) = v25;
    swift_bridgeObjectRetain();
    result = (void *)a2(v21, v22, v23, v24, v25);
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24459277C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372338);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v32 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v13)
      goto LABEL_26;
    v33 = *(_QWORD *)(v6 + 8 * v32);
    ++v9;
    if (!v33)
    {
      v9 = v32 + 1;
      if (v32 + 1 >= v13)
        goto LABEL_26;
      v33 = *(_QWORD *)(v6 + 8 * v9);
      if (!v33)
        break;
    }
LABEL_25:
    v12 = (v33 - 1) & v33;
    v15 = __clz(__rbit64(v33)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = v15 << 6;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_BYTE *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_BYTE *)(v21 + 32);
    v25 = *(_DWORD *)(v21 + 36);
    v26 = *(_BYTE *)(v21 + 40);
    v27 = *(_QWORD *)(v21 + 48);
    v28 = *(_QWORD *)(v21 + 56);
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v30 = *(_OWORD *)(v21 + 16);
    *v29 = v18;
    v29[1] = v19;
    v31 = *(_QWORD *)(v4 + 56) + v20;
    *(_BYTE *)v31 = v22;
    *(_QWORD *)(v31 + 8) = v23;
    *(_OWORD *)(v31 + 16) = v30;
    *(_BYTE *)(v31 + 32) = v24;
    *(_DWORD *)(v31 + 36) = v25;
    *(_BYTE *)(v31 + 40) = v26;
    *(_QWORD *)(v31 + 48) = v27;
    *(_QWORD *)(v31 + 56) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)sub_24457475C(v27, v28);
  }
  v34 = v32 + 2;
  if (v34 >= v13)
    goto LABEL_26;
  v33 = *(_QWORD *)(v6 + 8 * v34);
  if (v33)
  {
    v9 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v33 = *(_QWORD *)(v6 + 8 * v9);
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_244592980()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722E0);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_244577E90(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_24457466C(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_244592B44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[72];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722F0);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 72 * v15;
    sub_244595224(*(_QWORD *)(v2 + 56) + 72 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_244577E54((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_244592D2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372308);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_244592ED8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[64];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573724D8);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = v15 << 6;
    sub_244595384((uint64_t *)(*(_QWORD *)(v2 + 56) + (v15 << 6)), (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_244583264((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2445930BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257372328);
  v29 = v0;
  v1 = *v0;
  v2 = sub_2445C4558();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v29 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v26 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v12)
      goto LABEL_26;
    v27 = *(_QWORD *)(v5 + 8 * v26);
    ++v8;
    if (!v27)
    {
      v8 = v26 + 1;
      if (v26 + 1 >= v12)
        goto LABEL_26;
      v27 = *(_QWORD *)(v5 + 8 * v8);
      if (!v27)
        break;
    }
LABEL_25:
    v11 = (v27 - 1) & v27;
    v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = *(_QWORD *)(v1 + 56);
    v17 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v18 = v17[1];
    v19 = 32 * v14;
    v20 = *(_QWORD *)(v16 + v19);
    v21 = *(_QWORD *)(v16 + v19 + 8);
    v22 = *(_QWORD *)(v16 + v19 + 16);
    v23 = *(_QWORD *)(v16 + v19 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    *v24 = *v17;
    v24[1] = v18;
    v25 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *v25 = v20;
    v25[1] = v21;
    v25[2] = v22;
    v25[3] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v21, v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v12)
    goto LABEL_26;
  v27 = *(_QWORD *)(v5 + 8 * v28);
  if (v27)
  {
    v8 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v27 = *(_QWORD *)(v5 + 8 * v8);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2445932AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372300);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)sub_244574770(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_244593458()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372320);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)v21;
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v26 = v25;
    *(_QWORD *)(v26 + 16) = v22;
    *(_QWORD *)(v26 + 24) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)sub_24457475C(v22, v23);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24459364C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372330);
  v2 = *v0;
  v3 = sub_2445C4558();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_244593800(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a7)(uint64_t, unint64_t), uint64_t (*a8)(uint64_t, uint64_t))
{
  _QWORD *v8;
  _QWORD **v11;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v11 = (_QWORD **)v8;
  v16 = (_QWORD *)*v8;
  v18 = sub_2445A14D8(a2, a3);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = v16[3];
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
        return a7(a1, v24[7] + 40 * v18);
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      sub_24459257C(a5, a6);
      goto LABEL_7;
    }
    sub_24459046C(v21, a4 & 1, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a6);
    v26 = sub_2445A14D8(a2, a3);
    if ((v22 & 1) == (v27 & 1))
    {
      v18 = v26;
      v24 = *v11;
      if ((v22 & 1) != 0)
        return a7(a1, v24[7] + 40 * v18);
LABEL_11:
      sub_2445944BC(v18, a2, a3, a1, v24, a8);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244593964(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_2445A153C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1(v17);
        return sub_24457466C(a1, v17);
      }
      return sub_244594574(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_244592980();
      goto LABEL_7;
    }
    sub_244590B4C(v13, a3 & 1);
    v19 = sub_2445A153C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_244594574(v10, a2, a1, v16);
    }
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244593A80(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_2445A14D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_2445951E8(a1, v18[7] + 72 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_244592B44();
      goto LABEL_7;
    }
    sub_244590E10(v15, a4 & 1);
    v20 = sub_2445A14D8(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_2445951E8(a1, v18[7] + 72 * v12);
LABEL_11:
      sub_2445945DC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244593BA8(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2445A14D8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24459277C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_2445952D8((uint64_t)a1, v18[7] + (v12 << 6));
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = (_OWORD *)(v18[7] + (v12 << 6));
    v24 = *a1;
    v25 = a1[1];
    v26 = a1[3];
    v23[2] = a1[2];
    v23[3] = v26;
    *v23 = v24;
    v23[1] = v25;
    v27 = v18[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v18[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_2445907D8(v15, a4 & 1);
  v20 = sub_2445A14D8(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_2445952D8((uint64_t)a1, v18[7] + (v12 << 6));
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244593D0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_2445A14D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_244595260(a1, v18[7] + 56 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_244592394();
      goto LABEL_7;
    }
    sub_244590148(v15, a4 & 1);
    v20 = sub_2445A14D8(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_244595260(a1, v18[7] + 56 * v12);
LABEL_11:
      sub_244594648(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244593E34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_2445A14D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_244595348(a1, v18[7] + (v12 << 6));
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_244592ED8();
      goto LABEL_7;
    }
    sub_24459143C(v15, a4 & 1);
    v20 = sub_2445A14D8(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_244595348(a1, v18[7] + (v12 << 6));
LABEL_11:
      sub_2445946B4(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244593F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  unint64_t v28;
  char v29;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = sub_2445A14D8(a5, a6);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a7 & 1) != 0)
    {
LABEL_7:
      v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (uint64_t *)(v23[7] + 32 * v17);
        v25 = v24[1];
        v26 = v24[2];
        swift_bridgeObjectRelease();
        sub_2445747E8(v25, v26);
        result = swift_bridgeObjectRelease();
        *v24 = a1;
        v24[1] = a2;
        v24[2] = a3;
        v24[3] = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a7 & 1) == 0)
    {
      sub_2445930BC();
      goto LABEL_7;
    }
    sub_244591738(v20, a7 & 1);
    v28 = sub_2445A14D8(a5, a6);
    if ((v21 & 1) == (v29 & 1))
    {
      v17 = v28;
      v23 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24459471C(v17, a5, a6, a1, a2, a3, a4, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_2445940D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2445A153C(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_2445932AC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;
      result = sub_2445747FC(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_244591A88(result, a4 & 1);
  result = sub_2445A153C(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244594210(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2445A14D8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_244592D2C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_244591134(result, a4 & 1);
  result = sub_2445A14D8(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_244594360(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_2445A14D8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24459364C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_244592080(v15, a4 & 1);
  v21 = sub_2445A14D8(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_2445944BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a5[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = a6(a4, a5[7] + 40 * a1);
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

uint64_t *sub_244594528(uint64_t a1, uint64_t *a2)
{
  assignWithTake for ProtoSchemaStore.EnumContainer(a2, a1, (uint64_t)&type metadata for ProtoSchemaStore.EnumContainer);
  return a2;
}

uint64_t sub_24459455C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_244594574(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_24457466C(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_2445945DC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_244577E54(a4, a5[7] + 72 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_244594648(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_244577DD4(a4, a5[7] + 56 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_2445946B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_244583264(a4, a5[7] + (a1 << 6));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_24459471C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

uint64_t sub_24459476C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_2445C4690();
  swift_bridgeObjectRetain();
  sub_2445C42A0();
  v8 = sub_2445C46B4();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2445C45B8() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2445C45B8() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_244594BF4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_244594918()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573724D0);
  v3 = sub_2445C44BC();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2445C4690();
      sub_2445C42A0();
      result = sub_2445C46B4();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_244594BF4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_244594918();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_244594D8C();
      goto LABEL_22;
    }
    sub_244594F3C();
  }
  v11 = *v4;
  sub_2445C4690();
  sub_2445C42A0();
  result = sub_2445C46B4();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_2445C45B8(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_2445C463C();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_2445C45B8();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_244594D8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573724D0);
  v2 = *v0;
  v3 = sub_2445C44B0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_244594F3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573724D0);
  v3 = sub_2445C44BC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2445C4690();
    swift_bridgeObjectRetain();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2445951E8(uint64_t a1, uint64_t a2)
{
  assignWithTake for ProtoMessageSchema.FieldContainer(a2, a1);
  return a2;
}

uint64_t sub_244595224(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ProtoMessageSchema.FieldContainer(a2, a1);
  return a2;
}

uint64_t sub_244595260(uint64_t a1, uint64_t a2)
{
  assignWithTake for ProtoMessageSchema.OneofContainer(a2, a1);
  return a2;
}

uint64_t sub_24459529C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ProtoMessageSchema.OneofContainer(a2, a1);
  return a2;
}

uint64_t sub_2445952D8(uint64_t a1, uint64_t a2)
{
  assignWithTake for FieldManifest(a2, a1);
  return a2;
}

uint64_t *sub_244595314(uint64_t a1, uint64_t *a2)
{
  assignWithTake for ProtoSchemaStore.MessageContainer(a2, a1, (uint64_t)&type metadata for ProtoSchemaStore.MessageContainer);
  return a2;
}

uint64_t sub_244595348(uint64_t a1, uint64_t a2)
{
  assignWithTake for SchematizedDataComposer.Container(a2, a1);
  return a2;
}

uint64_t sub_244595384(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for SchematizedDataComposer.Container(a2, a1);
  return a2;
}

uint64_t sub_2445953C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[1];
  if (qword_257372290 != -1)
    swift_once();
  v5 = qword_257372548;
  v4 = unk_257372550;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v6 = sub_24458A89C(v2, v5, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = sub_24458A878(v3, v4, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for ProtoSchemaStore();
    v2 = swift_allocObject();
    v10 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v2 + 16) = sub_244575D80(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)(v2 + 24) = sub_244575D94(v10);
    v11 = sub_24458E17C(v8);
    swift_beginAccess();
    *(_QWORD *)(v2 + 16) = v11;
    swift_bridgeObjectRelease();
    v12 = sub_24458DF7C(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v2 + 24) = v12;
  }
  swift_bridgeObjectRelease();
  return v2;
}

BOOL sub_2445955BC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2445955D0(uint64_t a1)
{
  uint64_t v2;

  if (a1 < 8 || (a1 & 6) == 6)
  {
    sub_24457FE80();
    swift_allocError();
    *(_QWORD *)v2 = 1;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_WORD *)(v2 + 104) = 512;
    swift_willThrow();
  }
  return a1;
}

ValueMetadata *type metadata accessor for FieldTag()
{
  return &type metadata for FieldTag;
}

uint64_t sub_244595670(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v40 = MEMORY[0x24BEE4AF8];
  sub_2445A1728(0, v1, 0);
  v2 = v40;
  result = sub_2445BC58C(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v27 = v3 + 80;
  v28 = v1;
  v29 = v5;
  v30 = v3 + 64;
  v31 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v32 = v7;
    v12 = *(_QWORD *)(v3 + 56);
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v14 = v13[1];
    v33 = *v13;
    v15 = (char *)(v12 + (v6 << 6));
    v34 = *v15;
    v16 = *((_QWORD *)v15 + 2);
    v39 = *((_QWORD *)v15 + 1);
    v38 = *((_QWORD *)v15 + 3);
    v36 = *((_DWORD *)v15 + 9);
    v37 = v15[32];
    v35 = v15[40];
    v17 = *((_QWORD *)v15 + 6);
    v18 = *((_QWORD *)v15 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_2445747E8(v17, v18);
    v20 = *(_QWORD *)(v40 + 16);
    v19 = *(_QWORD *)(v40 + 24);
    if (v20 >= v19 >> 1)
      result = sub_2445A1728(v19 > 1, v20 + 1, 1);
    *(_QWORD *)(v40 + 16) = v20 + 1;
    v21 = v40 + 80 * v20;
    *(_QWORD *)(v21 + 32) = v33;
    *(_QWORD *)(v21 + 40) = v14;
    *(_BYTE *)(v21 + 48) = v34;
    *(_QWORD *)(v21 + 56) = v39;
    *(_QWORD *)(v21 + 64) = v16;
    *(_QWORD *)(v21 + 72) = v38;
    *(_BYTE *)(v21 + 80) = v37;
    *(_DWORD *)(v21 + 84) = v36;
    *(_BYTE *)(v21 + 88) = v35;
    *(_QWORD *)(v21 + 96) = v17;
    *(_QWORD *)(v21 + 104) = v18;
    v3 = v31;
    v9 = 1 << *(_BYTE *)(v31 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v11);
    if ((v22 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v29;
    if (*(_DWORD *)(v31 + 36) != v29)
      goto LABEL_27;
    v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v28;
    }
    else
    {
      v24 = v11 + 1;
      v25 = (unint64_t)(v9 + 63) >> 6;
      v10 = v28;
      if (v11 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            v26 = *(_QWORD *)(v27 + 8 * v11++);
            if (v26)
            {
              v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v32 + 1;
    v6 = v9;
    if (v32 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_24459597C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v14 = v13[1];
    v15 = (unsigned __int8 *)(*(_QWORD *)(a1 + 56) + (i << 6));
    v16 = *v15;
    v17 = *((_QWORD *)v15 + 2);
    v18 = v15[32];
    v20 = *((_QWORD *)v15 + 6);
    v19 = *((_QWORD *)v15 + 7);
    if ((v18 & 1) != 0 || (_DWORD)v16 == 9)
    {
      v28 = v15[40];
      v26 = *((_QWORD *)v15 + 3);
      v23 = *((_QWORD *)v15 + 1);
      v21 = *v13;
      v22 = *((unsigned int *)v15 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v20, v19);
      result = swift_release();
      *a2 = v21;
      a2[1] = v14;
      a2[2] = v16;
      a2[3] = v23;
      a2[4] = v17;
      a2[5] = v26;
      a2[6] = v18 | (v22 << 32);
      a2[7] = v28;
      a2[8] = v20;
      a2[9] = v19;
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v20, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_2445747E8(v20, v19);
    if (v5)
      goto LABEL_4;
LABEL_5:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v27)
      goto LABEL_26;
    v11 = *(_QWORD *)(v25 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v27)
        goto LABEL_26;
      v11 = *(_QWORD *)(v25 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v27)
          goto LABEL_26;
        v11 = *(_QWORD *)(v25 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v27)
            goto LABEL_26;
          v11 = *(_QWORD *)(v25 + 8 * v7);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v27)
  {
LABEL_26:
    result = swift_release();
    *((_OWORD *)a2 + 3) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v11 = *(_QWORD *)(v25 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v27)
      goto LABEL_26;
    v11 = *(_QWORD *)(v25 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_28:
  __break(1u);
  return result;
}

BOOL MessageManifest.isFlat.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v0 = swift_bridgeObjectRetain();
  sub_24459597C(v0, &v3);
  swift_bridgeObjectRelease();
  v1 = v4;
  if (v4)
    sub_244595C6C(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  return v1 == 0;
}

uint64_t sub_244595C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_2445747E8(a9, a10);
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MessageManifest.makeFieldsSelectStatementString(forTable:column:extraColumns:)(Swift::String forTable, Swift::String column, Swift::OpaquePointer extraColumns)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  int64_t v9;
  _QWORD *v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  Swift::String result;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v6 = *v3;
  v7 = (_QWORD *)sub_2445C4270();
  if (!v4)
  {
    v9 = *((_QWORD *)extraColumns._rawValue + 2);
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v9)
    {
      swift_bridgeObjectRetain();
      v11 = (char *)extraColumns._rawValue + 40;
      v12 = v9;
      do
      {
        swift_bridgeObjectRetain();
        sub_2445C4270();
        v11 += 16;
        swift_bridgeObjectRelease();
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v24 = v10;
      sub_2445A170C(0, v9, 0);
      v13 = (char *)extraColumns._rawValue + 40;
      do
      {
        v22 = 8224;
        v23 = 0xE200000000000000;
        swift_bridgeObjectRetain();
        sub_2445C42D0();
        swift_bridgeObjectRelease();
        v24 = v10;
        v15 = v10[2];
        v14 = v10[3];
        if (v15 >= v14 >> 1)
        {
          sub_2445A170C(v14 > 1, v15 + 1, 1);
          v10 = v24;
        }
        v13 += 16;
        v10[2] = v15 + 1;
        v16 = &v10[2 * v15];
        v16[4] = 8224;
        v16[5] = 0xE200000000000000;
        --v9;
      }
      while (v9);
    }
    v22 = sub_244595670(v6);
    swift_bridgeObjectRetain();
    sub_2445960AC((_QWORD **)&v22);
    v17 = swift_bridgeObjectRelease();
    v18 = (_QWORD *)v22;
    MEMORY[0x24BDAC7A8](v17, v19);
    v20 = sub_244596E7C((uint64_t)v18, (uint64_t (*)(uint64_t, uint64_t, _BYTE *))sub_244596114);
    swift_release();
    v22 = (uint64_t)v10;
    sub_244596D2C((uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573724E0);
    sub_24459706C();
    sub_2445C41EC();
    swift_bridgeObjectRelease();
    v22 = 0;
    v23 = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v22 = 0xA5443454C4553;
    v23 = 0xE700000000000000;
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    v7 = (_QWORD *)v22;
    v8 = (void *)v23;
  }
  result._object = v8;
  result._countAndFlagsBits = (uint64_t)v7;
  return result;
}

uint64_t sub_244595FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t result;

  v4 = *(_BYTE *)(a3 + 32);
  result = sub_2445C4270();
  if (!v3)
  {
    if ((v4 & 1) != 0)
    {
      return 0;
    }
    else
    {
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      sub_2445C42D0();
      sub_2445C42D0();
      sub_2445C42D0();
      sub_2445C42D0();
      return 0x285445475F502020;
    }
  }
  return result;
}

uint64_t sub_2445960AC(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (_QWORD *)sub_2445BC528(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_24459612C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_244596114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244595FB0(a1, a2, a3);
}

uint64_t sub_24459612C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  char v32;
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  char v115;
  uint64_t v116;
  char v117;
  int v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;

  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_156;
    if (v3)
      return sub_244596940(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_164;
  v112 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v122 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_122:
      v100 = v11;
      v111 = v8;
      if (v12 >= 2)
      {
        v101 = *v109;
        do
        {
          v102 = v12 - 2;
          if (v12 < 2)
            goto LABEL_151;
          if (!v101)
            goto LABEL_163;
          v103 = v100;
          v104 = *(_QWORD *)&v100[16 * v102 + 32];
          v105 = *(_QWORD *)&v100[16 * v12 + 24];
          sub_244596A5C((char *)(v101 + 80 * v104), (char *)(v101 + 80 * *(_QWORD *)&v100[16 * v12 + 16]), v101 + 80 * v105, v122);
          if (v1)
            break;
          if (v105 < v104)
            goto LABEL_152;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v103 = sub_2445BC280((uint64_t)v103);
          if (v102 >= *((_QWORD *)v103 + 2))
            goto LABEL_153;
          v106 = &v103[16 * v102 + 32];
          *(_QWORD *)v106 = v104;
          *((_QWORD *)v106 + 1) = v105;
          v107 = *((_QWORD *)v103 + 2);
          if (v12 > v107)
            goto LABEL_154;
          memmove(&v103[16 * v12 + 16], &v103[16 * v12 + 32], 16 * (v107 - v12));
          v100 = v103;
          *((_QWORD *)v103 + 2) = v107 - 1;
          v12 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v111 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v111 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372398);
    v7 = sub_2445C43A8();
    *(_QWORD *)(v7 + 16) = v6;
    v111 = v7;
    v122 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v110 = *a1 + 8;
  v108 = *a1 + 64;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v121 = v3;
  v123 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
    {
LABEL_23:
      if (v9 < v3)
        goto LABEL_24;
      goto LABEL_71;
    }
    v14 = (uint64_t *)(v10 + 80 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 80 * v13);
    if (v15 == *v17 && v16 == v17[1])
      break;
    v19 = sub_2445C45B8();
    v20 = v19;
    v21 = v13 + 2;
    if (v13 + 2 < v3)
      goto LABEL_45;
    v9 = v13 + 2;
    if ((v19 & 1) == 0)
      goto LABEL_23;
LABEL_60:
    if (v21 < v13)
      goto LABEL_159;
LABEL_61:
    if (v13 >= v21)
    {
      v9 = v21;
      if (v21 < v3)
        goto LABEL_24;
    }
    else
    {
      v43 = 80 * v21;
      v44 = 80 * v13;
      v45 = v21;
      v46 = v13;
      do
      {
        if (v46 != --v45)
        {
          if (!v10)
            goto LABEL_162;
          v47 = (char *)(v10 + v44);
          v48 = v123 + v43;
          v49 = *((_QWORD *)v47 + 1);
          v116 = *(_QWORD *)v47;
          v115 = v47[16];
          v120 = *((_QWORD *)v47 + 5);
          v119 = v47[48];
          v117 = v47[56];
          v118 = *((_DWORD *)v47 + 13);
          v113 = *(_OWORD *)(v47 + 24);
          v114 = *((_OWORD *)v47 + 4);
          memmove(v47, (const void *)(v123 + v43 - 80), 0x50uLL);
          *(_QWORD *)(v48 - 80) = v116;
          *(_QWORD *)(v48 - 72) = v49;
          *(_BYTE *)(v48 - 64) = v115;
          *(_OWORD *)(v48 - 56) = v113;
          *(_QWORD *)(v48 - 40) = v120;
          *(_BYTE *)(v48 - 32) = v119;
          *(_DWORD *)(v48 - 28) = v118;
          *(_BYTE *)(v48 - 24) = v117;
          *(_OWORD *)(v48 - 16) = v114;
          v10 = v123;
        }
        ++v46;
        v43 -= 80;
        v44 += 80;
      }
      while (v46 < v45);
      v9 = v21;
      v3 = v121;
      if (v21 < v121)
      {
LABEL_24:
        if (__OFSUB__(v9, v13))
          goto LABEL_155;
        if (v9 - v13 < v112)
        {
          if (__OFADD__(v13, v112))
            goto LABEL_157;
          if (v13 + v112 >= v3)
            v22 = v3;
          else
            v22 = v13 + v112;
          if (v22 < v13)
          {
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          if (v9 != v22)
          {
            v23 = (_OWORD *)(v108 + 80 * v9);
            do
            {
              v24 = (uint64_t *)(v10 + 80 * v9);
              v25 = *v24;
              v26 = v24[1];
              v27 = v13;
              v28 = v23;
              do
              {
                v29 = v25 == *((_QWORD *)v28 - 18) && v26 == *((_QWORD *)v28 - 17);
                if (v29 || (sub_2445C45B8() & 1) == 0)
                  break;
                if (!v10)
                  goto LABEL_160;
                v25 = *((_QWORD *)v28 - 8);
                v26 = *((_QWORD *)v28 - 7);
                v30 = *((_BYTE *)v28 - 48);
                v31 = *((_QWORD *)v28 - 3);
                v32 = *((_BYTE *)v28 - 16);
                v33 = *((_DWORD *)v28 - 3);
                v34 = *((_BYTE *)v28 - 8);
                v35 = *(_OWORD *)((char *)v28 - 40);
                v36 = *v28;
                v37 = *(v28 - 6);
                *(v28 - 2) = *(v28 - 7);
                *(v28 - 1) = v37;
                *v28 = *(v28 - 5);
                v38 = *(v28 - 8);
                *(v28 - 4) = *(v28 - 9);
                *(v28 - 3) = v38;
                *(v28 - 5) = v36;
                v28 -= 5;
                *((_QWORD *)v28 - 8) = v25;
                *((_QWORD *)v28 - 7) = v26;
                *((_BYTE *)v28 - 48) = v30;
                *(_OWORD *)((char *)v28 - 40) = v35;
                *((_QWORD *)v28 - 3) = v31;
                *((_BYTE *)v28 - 16) = v32;
                *((_DWORD *)v28 - 3) = v33;
                ++v27;
                *((_BYTE *)v28 - 8) = v34;
              }
              while (v9 != v27);
              ++v9;
              v23 += 5;
            }
            while (v9 != v22);
            v9 = v22;
          }
        }
      }
    }
LABEL_71:
    if (v9 < v13)
      goto LABEL_150;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2445BBEB0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v51 = *((_QWORD *)v11 + 2);
    v50 = *((_QWORD *)v11 + 3);
    v12 = v51 + 1;
    if (v51 >= v50 >> 1)
      v11 = sub_2445BBEB0((char *)(v50 > 1), v51 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v52 = v11 + 32;
    v53 = &v11[16 * v51 + 32];
    *(_QWORD *)v53 = v13;
    *((_QWORD *)v53 + 1) = v9;
    if (v51)
    {
      v10 = v123;
      while (1)
      {
        v54 = v12 - 1;
        if (v12 >= 4)
        {
          v59 = &v52[16 * v12];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_139;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_140;
          v66 = v12 - 2;
          v67 = &v52[16 * v12 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_142;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_145;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_149;
            v82 = v57 < v92;
            goto LABEL_109;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v83 = *((_QWORD *)v11 + 4);
            v84 = *((_QWORD *)v11 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_103;
          }
          v56 = *((_QWORD *)v11 + 4);
          v55 = *((_QWORD *)v11 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_141;
        v66 = v12 - 2;
        v72 = &v52[16 * v12 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_144;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_147;
        if (__OFADD__(v76, v81))
          goto LABEL_148;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_109:
          if (v82)
            v54 = v66;
          goto LABEL_111;
        }
LABEL_103:
        if ((v77 & 1) != 0)
          goto LABEL_143;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_146;
        if (v88 < v76)
          goto LABEL_15;
LABEL_111:
        v93 = v54 - 1;
        if (v54 - 1 >= v12)
        {
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        if (!v10)
          goto LABEL_161;
        v94 = v10;
        v95 = &v52[16 * v93];
        v96 = *(_QWORD *)v95;
        v97 = &v52[16 * v54];
        v98 = *((_QWORD *)v97 + 1);
        sub_244596A5C((char *)(v94 + 80 * *(_QWORD *)v95), (char *)(v94 + 80 * *(_QWORD *)v97), v94 + 80 * v98, v122);
        if (v1)
          goto LABEL_119;
        if (v98 < v96)
          goto LABEL_136;
        if (v54 > *((_QWORD *)v11 + 2))
          goto LABEL_137;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v52[16 * v93 + 8] = v98;
        v99 = *((_QWORD *)v11 + 2);
        if (v54 >= v99)
          goto LABEL_138;
        v12 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        *((_QWORD *)v11 + 2) = v99 - 1;
        v82 = v99 > 2;
        v10 = v123;
        if (!v82)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v123;
LABEL_15:
    v3 = v121;
    if (v9 >= v121)
    {
      v8 = v111;
      goto LABEL_122;
    }
  }
  v21 = v13 + 2;
  if (v13 + 2 >= v3)
  {
    v9 = v13 + 2;
    goto LABEL_71;
  }
  v20 = 0;
LABEL_45:
  v39 = (_QWORD *)(v110 + 80 * v21);
  while (1)
  {
    v41 = (_QWORD *)(v10 + 80 * v9);
    if (*(v39 - 1) != *v41 || *v39 != v41[1])
    {
      if (((v20 ^ sub_2445C45B8()) & 1) != 0)
        goto LABEL_59;
      goto LABEL_47;
    }
    if ((v20 & 1) != 0)
      break;
LABEL_47:
    v39 += 10;
    v40 = v21 + 1;
    v9 = v21;
    v21 = v40;
    if (v40 >= v121)
    {
      v21 = v40;
LABEL_59:
      v3 = v121;
      v9 = v21;
      if ((v20 & 1) == 0)
        goto LABEL_23;
      goto LABEL_60;
    }
  }
  v3 = v121;
  if (v21 >= v13)
    goto LABEL_61;
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_244596940(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 80 * a3 + 64;
LABEL_5:
    v9 = (uint64_t *)(v7 + 80 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (_OWORD *)v8;
    while (1)
    {
      v13 = result == *((_QWORD *)v12 - 18) && v10 == *((_QWORD *)v12 - 17);
      if (v13 || (result = sub_2445C45B8(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 80;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *((_QWORD *)v12 - 8);
      v10 = *((_QWORD *)v12 - 7);
      v14 = *((_BYTE *)v12 - 48);
      v15 = *((_QWORD *)v12 - 3);
      v16 = *((_BYTE *)v12 - 16);
      v17 = *((_DWORD *)v12 - 3);
      v18 = *((_BYTE *)v12 - 8);
      v19 = *(_OWORD *)((char *)v12 - 40);
      v20 = *v12;
      v21 = *(v12 - 6);
      *(v12 - 2) = *(v12 - 7);
      *(v12 - 1) = v21;
      *v12 = *(v12 - 5);
      v22 = *(v12 - 8);
      *(v12 - 4) = *(v12 - 9);
      *(v12 - 3) = v22;
      *(v12 - 5) = v20;
      v12 -= 5;
      *((_QWORD *)v12 - 8) = result;
      *((_QWORD *)v12 - 7) = v10;
      *((_BYTE *)v12 - 48) = v14;
      *(_OWORD *)((char *)v12 - 40) = v19;
      *((_QWORD *)v12 - 3) = v15;
      *((_BYTE *)v12 - 16) = v16;
      *((_DWORD *)v12 - 3) = v17;
      ++v11;
      *((_BYTE *)v12 - 8) = v18;
      if (v4 == v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_244596A5C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t result;
  char *v23;
  char *v24;
  char *v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 80;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 80;
  v25 = __dst;
  v24 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -79)
    {
      if (a4 != __src || &__src[80 * v11] <= a4)
        memmove(a4, __src, 80 * v11);
      v15 = &v4[80 * v11];
      v23 = v15;
      v25 = v6;
      if (v7 < v6 && v10 >= 80)
      {
        v16 = (char *)(a3 - 80);
        v17 = v6;
        while (1)
        {
          v18 = v16 + 80;
          v19 = *((_QWORD *)v17 - 10);
          v20 = *((_QWORD *)v17 - 9);
          v17 -= 80;
          v21 = *((_QWORD *)v15 - 10) == v19 && *((_QWORD *)v15 - 9) == v20;
          if (v21 || (sub_2445C45B8() & 1) == 0)
          {
            v23 = v15 - 80;
            if (v18 < v15 || v16 >= v15 || v18 != v15)
              memmove(v16, v15 - 80, 0x50uLL);
            v17 = v6;
            v15 -= 80;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v18 != v6 || v16 >= v6)
              memmove(v16, v17, 0x50uLL);
            v25 = v17;
            if (v17 <= v7)
              goto LABEL_46;
          }
          v16 -= 80;
          v6 = v17;
          if (v15 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -79)
  {
    if (a4 != __dst || &__dst[80 * v9] <= a4)
      memmove(a4, __dst, 80 * v9);
    v12 = &v4[80 * v9];
    v23 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 80)
    {
      do
      {
        v13 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v13 || (sub_2445C45B8() & 1) == 0)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x50uLL);
          v4 += 80;
          v24 = v4;
          v14 = v6;
        }
        else
        {
          v14 = v6 + 80;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
            memmove(v7, v6, 0x50uLL);
        }
        v7 += 80;
        if (v4 >= v12)
          break;
        v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      v25 = v7;
    }
LABEL_46:
    sub_2445BC050((void **)&v25, (const void **)&v24, &v23);
    return 1;
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_244596D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_244585BF8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

_QWORD *sub_244596E7C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _BYTE *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _BYTE v26[8];
  uint64_t v27;
  __int128 v28;
  char v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v24 = v5;
  do
  {
    v34 = v4;
    v10 = *(_QWORD *)(v5 + v6 + 96);
    v9 = *(_QWORD *)(v5 + v6 + 104);
    v11 = *(_BYTE *)(v5 + v6 + 88);
    v12 = *(_DWORD *)(v5 + v6 + 84);
    v13 = *(_BYTE *)(v5 + v6 + 80);
    v14 = *(_QWORD *)(v5 + v6 + 56);
    v16 = *(_QWORD *)(v5 + v6 + 32);
    v15 = *(_QWORD *)(v5 + v6 + 40);
    v26[0] = *(_BYTE *)(v5 + v6 + 48);
    v27 = v14;
    v28 = *(_OWORD *)(v5 + v6 + 64);
    v29 = v13;
    v30 = v12;
    v31 = v11;
    v32 = v10;
    v33 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v10, v9);
    v17 = a2(v16, v15, v26);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v10, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    v19 = v17;
    v20 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v10, v9);
    if (v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_244585BF8(0, v7[2] + 1, 1, v7);
      v22 = v7[2];
      v21 = v7[3];
      if (v22 >= v21 >> 1)
        v7 = sub_244585BF8((_QWORD *)(v21 > 1), v22 + 1, 1, v7);
      v7[2] = v22 + 1;
      v8 = &v7[2 * v22];
      v8[4] = v19;
      v8[5] = v20;
    }
    v6 += 80;
    v4 = v34 - 1;
    v3 = 0;
    v5 = v24;
  }
  while (v34 != 1);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_24459706C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2573724E8;
  if (!qword_2573724E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573724E0);
    result = MEMORY[0x249512E54](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2573724E8);
  }
  return result;
}

uint64_t sub_2445970B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;
  _QWORD v77[3];
  uint64_t v78;
  uint64_t v79;
  __int128 v80[2];
  char v81;
  _QWORD v82[3];
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[56];
  uint64_t v86;

  v5 = v4;
  sub_24457403C(a3, (uint64_t)v85);
  *(_QWORD *)&v80[0] = a1;
  *((_QWORD *)&v80[0] + 1) = a2;
  v82[0] = 46;
  v82[1] = 0xE100000000000000;
  sub_244597C30();
  v8 = sub_2445C4468();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_27:
    sub_2445752C0(a3);
    swift_bridgeObjectRelease();
    result = sub_244597898((uint64_t)v85, (uint64_t)(a4 + 1));
    *a4 = v11;
    return result;
  }
  v10 = (unint64_t *)(v8 + 40);
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v15 = *(v10 - 1);
    v14 = *v10;
    sub_24457403C((uint64_t)v85, (uint64_t)v80);
    if (v81 != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445752C0((uint64_t)v80);
      sub_244578600();
      swift_allocError();
      *(_OWORD *)v66 = xmmword_2445C67C0;
      *(_BYTE *)(v66 + 16) = 7;
      swift_willThrow();
      sub_2445752C0(a3);
      return sub_2445752C0((uint64_t)v85);
    }
    sub_24457466C(v80, (uint64_t)v82);
    swift_bridgeObjectRetain();
    v16 = sub_244597C74(93, 0xE100000000000000, v15, v14);
    v86 = v9;
    v76 = v17;
    if ((v17 & 1) == 0)
      break;
    v44 = v10;
    v45 = v83;
    v46 = v84;
    __swift_project_boxed_opaque_existential_1(v82, v83);
    (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v46 + 56))(v80, v15, v14, v45, v46);
    if (v5)
    {
      swift_bridgeObjectRelease();
      sub_2445752C0(a3);
      goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    sub_24457466C(v80, (uint64_t)v77);
    v47 = v78;
    v48 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_244578600();
      swift_allocError();
      v69 = xmmword_2445C67D0;
      goto LABEL_38;
    }
    v49 = v78;
    v50 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v50 + 56))(v80, v49, v50);
    sub_2445752C0((uint64_t)v85);
    sub_244597898((uint64_t)v80, (uint64_t)v85);
    v51 = v78;
    v52 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 48))(v51, v52);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2445858C0(0, v11[2] + 1, 1, v11);
    v54 = v44;
    v56 = v11[2];
    v55 = v11[3];
    v57 = v56 + 1;
    if (v56 >= v55 >> 1)
      v11 = sub_2445858C0((_QWORD *)(v55 > 1), v56 + 1, 1, v11);
    v12 = 0;
LABEL_4:
    v11[2] = v57;
    v13 = &v11[3 * v56];
    v13[4] = v53;
    v13[5] = v12;
    v10 = v54 + 2;
    *((_BYTE *)v13 + 48) = (v76 & 1) == 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    v9 = v86 - 1;
    if (v86 == 1)
      goto LABEL_27;
  }
  v18 = v16;
  sub_244597C74(91, 0xE100000000000000, v15, v14);
  if ((v19 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_244578600();
    swift_allocError();
    *(_OWORD *)v67 = xmmword_2445C67E0;
    *(_BYTE *)(v67 + 16) = 7;
    swift_willThrow();
    sub_2445752C0(a3);
    goto LABEL_33;
  }
  v73 = v18;
  v72 = v10;
  v75 = v11;
  swift_bridgeObjectRetain();
  v20 = sub_2445C4354();
  v22 = v21;
  v24 = v23;
  v74 = v5;
  v26 = v25;
  swift_bridgeObjectRelease();
  v28 = v83;
  v27 = v84;
  __swift_project_boxed_opaque_existential_1(v82, v83);
  v29 = MEMORY[0x2495127AC](v20, v22, v24, v26);
  v31 = v30;
  swift_bridgeObjectRelease();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v80, v29, v31, v28, v27);
  v5 = v74;
  if (v74)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445752C0(a3);
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_33:
    sub_2445752C0((uint64_t)v85);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
  }
  swift_bridgeObjectRelease();
  sub_24457466C(v80, (uint64_t)v77);
  v32 = v78;
  v33 = v79;
  __swift_project_boxed_opaque_existential_1(v77, v78);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_244578600();
    swift_allocError();
    v69 = xmmword_2445C67F0;
    goto LABEL_38;
  }
  if (v73 >> 14 >= (unint64_t)sub_2445C42B8() >> 14)
  {
    v34 = sub_2445C4354();
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease();
    if (!((v34 ^ v36) >> 14))
      goto LABEL_41;
    v41 = sub_244598664(v34, v36, v38, v40, 10);
    if ((v42 & 0x100) != 0)
    {
      v12 = sub_244597E3C(v34, v36, v38, v40, 10);
      v59 = v58;
      swift_bridgeObjectRelease();
      if ((v59 & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
    }
    else
    {
      v12 = (unsigned __int8 *)v41;
      v43 = v42;
      swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
        goto LABEL_36;
    }
    v11 = v75;
    v60 = v78;
    v61 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v61 + 56))(v80, v60, v61);
    sub_2445752C0((uint64_t)v85);
    sub_244597898((uint64_t)v80, (uint64_t)v85);
    v62 = v78;
    v63 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 48))(v62, v63);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2445858C0(0, v75[2] + 1, 1, v75);
    v54 = v72;
    v56 = v11[2];
    v64 = v11[3];
    v57 = v56 + 1;
    if (v56 >= v64 >> 1)
      v11 = sub_2445858C0((_QWORD *)(v64 > 1), v56 + 1, 1, v11);
    goto LABEL_4;
  }
  __break(1u);
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_37:
  swift_bridgeObjectRelease();
  sub_244578600();
  swift_allocError();
  v69 = xmmword_2445C67E0;
LABEL_38:
  *(_OWORD *)v68 = v69;
  *(_BYTE *)(v68 + 16) = 7;
  swift_willThrow();
  sub_2445752C0(a3);
  sub_2445752C0((uint64_t)v85);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
}

uint64_t FieldPathAndType.init(fieldPath:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  return sub_244597898(a2, (uint64_t)(a3 + 1));
}

uint64_t sub_244597898(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t FieldPathAndType.fieldPath.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FieldPathAndType.fieldPath.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*FieldPathAndType.fieldPath.modify())()
{
  return nullsub_1;
}

uint64_t FieldPathAndType.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24457403C(v1 + 8, a1);
}

uint64_t FieldPathAndType.type.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_244597928(a1, v1 + 8);
}

uint64_t sub_244597928(uint64_t a1, uint64_t a2)
{
  assignWithTake for TypeSchemaDescription(a2, a1);
  return a2;
}

uint64_t (*FieldPathAndType.type.modify())()
{
  return nullsub_1;
}

uint64_t initializeWithCopy for FieldPathAndType(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, _OWORD *))(v8 - 8))(a1 + 8, v5);
    *(_BYTE *)(a1 + 48) = 1;
  }
  else if (v6)
  {
    v9 = v5[1];
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)v5 + 25);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, _OWORD *))(v7 - 8))(a1 + 8, v5);
    *(_BYTE *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for FieldPathAndType(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_2445752C0(a1 + 8);
    if (*(_BYTE *)(a2 + 48) == 1)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1 + 8, v4);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else if (*(_BYTE *)(a2 + 48))
    {
      v8 = *v4;
      v9 = v4[1];
      *(_OWORD *)(a1 + 33) = *(__int128 *)((char *)v4 + 25);
      *v5 = v8;
      *(_OWORD *)(a1 + 24) = v9;
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1 + 8, v4);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FieldPathAndType(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_2445752C0(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FieldPathAndType(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FieldPathAndType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FieldPathAndType()
{
  return &type metadata for FieldPathAndType;
}

unint64_t sub_244597C30()
{
  unint64_t result;

  result = qword_2573724F0;
  if (!qword_2573724F0)
  {
    result = MEMORY[0x249512E54](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2573724F0);
  }
  return result;
}

unint64_t sub_244597C74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_2445C433C() != a1 || v9 != a2)
  {
    v10 = sub_2445C45B8();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_2445C42B8();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_244597D60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372500);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_244597DC4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_2445C4324();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x249512824](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unsigned __int8 *sub_244597E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_244598734();
  swift_bridgeObjectRetain();
  v7 = sub_2445C4348();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_2445981A8();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_2445C44EC();
  }
LABEL_7:
  v13 = sub_244597F2C(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_244597F2C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_2445981A8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_2445C4354();
  v4 = sub_244598224(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_244598224(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_244598368(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_244597D60(v9, 0);
      v12 = sub_244598454((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x2495127B8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x2495127B8);
LABEL_9:
      sub_2445C44EC();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x2495127B8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_244598368(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_244597DC4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_244597DC4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_2445C4300();
  }
  __break(1u);
  return result;
}

unint64_t sub_244598454(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_244597DC4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_2445C430C();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_2445C44EC();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_244597DC4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_2445C42E8();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_244598664(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_2445C44EC();
  }
  result = sub_244598778((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_244598734()
{
  unint64_t result;

  result = qword_2573724F8;
  if (!qword_2573724F8)
  {
    result = MEMORY[0x249512E54](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_2573724F8);
  }
  return result;
}

uint64_t sub_244598778(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_244597DC4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = sub_2445C4300();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_244597DC4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_244597DC4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = sub_2445C4300();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_244598B9C()
{
  sub_2445C4690();
  sub_2445C46A8();
  return sub_2445C46B4();
}

uint64_t sub_244598BE0()
{
  return sub_2445C46A8();
}

uint64_t sub_244598C08()
{
  sub_2445C4690();
  sub_2445C46A8();
  return sub_2445C46B4();
}

uint64_t sub_244598C48@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_244598E20(*a1);
  *a2 = result;
  return result;
}

void sub_244598C70(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t getEnumTagSinglePayload for ProtoWireType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProtoWireType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_244598D58 + 4 * byte_2445C6835[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_244598D8C + 4 * asc_2445C6830[v4]))();
}

uint64_t sub_244598D8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244598D94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244598D9CLL);
  return result;
}

uint64_t sub_244598DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244598DB0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_244598DB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244598DBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProtoWireType()
{
  return &type metadata for ProtoWireType;
}

unint64_t sub_244598DDC()
{
  unint64_t result;

  result = qword_257372508;
  if (!qword_257372508)
  {
    result = MEMORY[0x249512E54](&unk_2445C68C8, &type metadata for ProtoWireType);
    atomic_store(result, (unint64_t *)&qword_257372508);
  }
  return result;
}

uint64_t sub_244598E20(uint64_t result)
{
  if (result >= 6u)
    return 6;
  else
    return result;
}

uint64_t EnumSchemaDescribing.asPublic()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
}

uint64_t EnumSchema.name.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = v0[3];
  v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t EnumSchema.valueSet.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumSchema.value(withName:)(Swift::String withName)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;

  object = withName._object;
  countAndFlagsBits = withName._countAndFlagsBits;
  v4 = v1[3];
  v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v5 + 40))(countAndFlagsBits, object, v4, v5);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumSchema.name(forValue:)(Swift::Int forValue)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v5 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v4 + 48))(forValue, v3, v4);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

ValueMetadata *type metadata accessor for EnumSchema()
{
  return &type metadata for EnumSchema;
}

uint64_t dispatch thunk of EnumSchemaDescribing.valueSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EnumSchemaDescribing.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EnumSchemaDescribing.valueOptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of EnumSchemaDescribing.value(withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of EnumSchemaDescribing.name(forValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for MergeConflict()
{
  return &type metadata for MergeConflict;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SchematizedData.asJSON()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;
  uint64_t v5;
  void *v6;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  v2 = MessageSchemaDescribing.schematizing<A>(data:block:)();
  if (!v1)
  {
    v2 = v5;
    v3 = v6;
  }
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t sub_244599098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19[3];

  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = v15[1];
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v19[0] = *v15;
    v19[1] = v16;
    v19[2] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24459BD94(v19);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v7)
      return swift_release();
    v13 = *(_QWORD *)(v3 + 8 * v9);
    if (!v13)
    {
      v14 = v9 + 1;
      if (v9 + 1 >= v7)
        return swift_release();
      v13 = *(_QWORD *)(v3 + 8 * v14);
      if (v13)
        goto LABEL_14;
      v14 = v9 + 2;
      if (v9 + 2 >= v7)
        return swift_release();
      v13 = *(_QWORD *)(v3 + 8 * v14);
      if (v13)
        goto LABEL_14;
      v14 = v9 + 3;
      if (v9 + 3 >= v7)
        return swift_release();
      v13 = *(_QWORD *)(v3 + 8 * v14);
      if (v13)
      {
LABEL_14:
        v9 = v14;
        goto LABEL_15;
      }
      v18 = v9 + 4;
      if (v9 + 4 >= v7)
        return swift_release();
      v13 = *(_QWORD *)(v3 + 8 * v18);
      v9 += 4;
      if (!v13)
        break;
    }
LABEL_15:
    v6 = (v13 - 1) & v13;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v7)
      return swift_release();
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v18;
    if (v13)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_244599264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v2;
  v28 = a2;
  v6 = sub_2445C3D9C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  v13 = sub_2445A5BD8((uint64_t)v10, v4[7], v4[8], MEMORY[0x24BEE4AF8]);
  if (v3)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v16 = v13;
  v17 = v14;
  v18 = v28;
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v18 + 32) = 0;
    *(_OWORD *)v18 = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
  }
  else
  {
    v19 = a1[3];
    v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(v16, v19, v20);
    v23 = v22;
    v24 = v4 + 2;
    v26 = v4[5];
    v25 = v4[6];
    __swift_project_boxed_opaque_existential_1(v24, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v21, v23, v26, v25);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SchematizedDataDescribing.field(forOneof:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  result = (*(uint64_t (**)(void))(a2 + 104))();
  if (!v3)
  {
    v9 = v8;
    if (v8)
    {
      v10 = result;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v13, a1, a2);
      v11 = v14;
      v12 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v9, v11, v12);
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    else
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  return result;
}

_QWORD *sub_2445994CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[5];

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v3 + 16), v8);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, a1, a2, v8, v9);
  if (!v4)
  {
    sub_244580494(v11, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

uint64_t SchematizedDataDescribing.value(forFieldName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a5;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v14, a3, a4);
  v11 = v15;
  v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v13, a1, a2, v11, v10);
  if (!v5)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 40))(v13, a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

_QWORD *sub_24459965C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  return sub_24459967C(a1, a2, a3);
}

_QWORD *sub_24459967C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  _QWORD v12[5];

  v5 = v3;
  v9 = v5[5];
  v10 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v9);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, a1, a2, v9, v10);
  if (!v4)
  {
    sub_24459EA68(v12, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  return result;
}

uint64_t SchematizedDataDescribing.forEachFieldValue(withName:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 16))(v16, a5, a6);
  v11 = v17;
  v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v15, a1, a2, v11, v12);
  if (!v6)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))(v15, a3, v19, a5, a6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t sub_244599844(uint64_t a1, unint64_t a2)
{
  return sub_244599864(a1, a2);
}

uint64_t sub_244599864(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v7;
  _QWORD v8[3];
  _QWORD v9[5];
  uint64_t v10;

  v4 = *v2;
  v10 = MEMORY[0x24BEE4AF8];
  v8[2] = &v10;
  v5 = sub_2445A3E90(a1, a2);
  if (v3)
  {
    MEMORY[0x249512DE8](v3);
  }
  else
  {
    v7 = v5;
    v9[3] = v4;
    v9[4] = sub_24459CCF8();
    v9[0] = v2;
    swift_retain();
    sub_2445805D8(v9, v7, (uint64_t)sub_24459CF2C, (uint64_t)v8);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  return v10;
}

uint64_t SchematizedDataDescribing.getArray(matchingFieldPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;

  v7[2] = &v8;
  v8 = MEMORY[0x24BEE4AF8];
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(a4 + 80))(a1, a2, sub_24459C708, v7, a3, a4);
  v5 = v8;
  if (v4)
    swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_244599988(uint64_t a1, uint64_t a2)
{
  return sub_2445999A8(a1, a2);
}

uint64_t sub_2445999A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v4 = v2;
  v7 = sub_2445C3D9C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v4[5];
  v13 = v4[6];
  v14 = __swift_project_boxed_opaque_existential_1(v4 + 2, v12);
  v15 = a2;
  v16 = (uint64_t)v14;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 72))(v26, a1, v15, v12, v13);
  if (!v3)
  {
    v17 = v27;
    v18 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    v20 = sub_2445A5BD8((uint64_t)v11, v4[7], v4[8], MEMORY[0x24BEE4AF8]);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if ((v22 & 1) != 0)
    {
      v16 = 0;
    }
    else
    {
      v23 = v27;
      v24 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 40))(v20, v23, v24);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  return v16;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SchematizedDataDescribing.fieldName(forOneofName:)(Swift::String forOneofName)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(_QWORD *, _QWORD, _QWORD);
  uint64_t v5;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (**v11)(_QWORD *, _QWORD, _QWORD);
  uint64_t v12;
  void *v13;
  Swift::String_optional result;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v4 = (uint64_t (**)(_QWORD *, _QWORD, _QWORD))v2;
  v5 = v1;
  object = forOneofName._object;
  countAndFlagsBits = forOneofName._countAndFlagsBits;
  (*(void (**)(_QWORD *__return_ptr))(v2 + 16))(v16);
  v8 = v17;
  v9 = v18;
  v10 = __swift_project_boxed_opaque_existential_1(v16, v17);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(v9 + 72))(v15, countAndFlagsBits, object, v8, v9);
  if (!v3)
  {
    v10 = (_QWORD *)v4[13](v15, v5, v4);
    v4 = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v12 = (uint64_t)v10;
  v13 = v4;
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

_QWORD *sub_244599C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[5];

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v3 + 16), v8);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 72))(v11, a1, a2, v8, v9);
  if (!v4)
  {
    sub_244580974(v11, a3);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return result;
}

uint64_t SchematizedDataDescribing.value(forOneofName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a5;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v14, a3, a4);
  v11 = v15;
  v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 72))(v13, a1, a2, v11, v10);
  if (!v5)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 120))(v13, a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t sub_244599DDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_244599264(a1, a2);
}

_QWORD *sub_244599DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244599E1C(a1, a2, a3);
}

_QWORD *sub_244599E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v5 = v3;
  v30 = a3;
  v8 = sub_2445C3D9C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v34 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v5[5];
  v12 = v5[6];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v13);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 72))(v31, a1, a2, v13, v12);
  if (!v4)
  {
    v29 = v5 + 2;
    v15 = v32;
    v16 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    v17 = (uint64_t)v34;
    (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
    v18 = sub_2445A5BD8(v17, v5[7], v5[8], MEMORY[0x24BEE4AF8]);
    LOBYTE(v16) = v19;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v17, v8);
    if ((v16 & 1) != 0)
    {
      v27 = (_OWORD *)v30;
      *(_QWORD *)(v30 + 32) = 0;
      *v27 = 0u;
      v27[1] = 0u;
    }
    else
    {
      v20 = v32;
      v21 = v33;
      __swift_project_boxed_opaque_existential_1(v31, v32);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40))(v18, v20, v21);
      v24 = v23;
      v25 = v5[5];
      v26 = v5[6];
      __swift_project_boxed_opaque_existential_1(v29, v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v22, v24, v25, v26);
      swift_bridgeObjectRelease();
    }
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  return result;
}

uint64_t SchematizedDataDescribing.filed(forOneofName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a5;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 16))(v14, a3, a4);
  v11 = v15;
  v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 72))(v13, a1, a2, v11, v10);
  if (!v5)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 136))(v13, a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t SchematizedDataDescribing.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15[16];
  unint64_t *v16;
  char *v17;
  unint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257372410);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24457F8E4();
  sub_2445C46CC();
  v18 = sub_2445758C0(MEMORY[0x24BEE4AF8]);
  v16 = &v18;
  v17 = v10;
  v11 = v14[1];
  (*(void (**)(uint64_t (*)(uint64_t), char *, uint64_t, uint64_t))(a3 + 88))(sub_24459C720, v15, a2, a3);
  if (v11)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = swift_bridgeObjectRetain();
    sub_244599098(v12);
    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t SchematizedData.asJSONData()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  result = MessageSchemaDescribing.schematizing<A>(data:block:)();
  if (!v1)
    return v3;
  return result;
}

uint64_t SchematizedData.messageSchemaImpl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244577E90(v1, a1);
}

uint64_t SchematizedData.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_244574770(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t SchematizedData.messageSchema.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v4 = v1[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  return MessageSchemaDescribing.asPublic()(v4, v5, a1);
}

uint64_t SchematizedData.value(forFieldName:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372420);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

_QWORD *sub_24459A428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[7];
  unsigned __int8 v12;

  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, a2, a3, v8, v9);
  if (!v4)
  {
    if (v12 == 255)
    {
      result = (_QWORD *)sub_2445816D0((uint64_t)v11, &qword_2543F6F40);
      *(_QWORD *)(a4 + 48) = 0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_WORD *)(a4 + 56) = -256;
    }
    else
    {
      AnyValueImpl.asPublic()();
      return (_QWORD *)sub_244574078((uint64_t)v11);
    }
  }
  return result;
}

uint64_t SchematizedData.asUnsafe<A>(_:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t SchematizedData.value(forField:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372420);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

_QWORD *sub_24459A668@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD v9[7];
  unsigned __int8 v10;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 40))(v9, a2, v6, v7);
  if (!v3)
  {
    if (v10 == 255)
    {
      result = (_QWORD *)sub_2445816D0((uint64_t)v9, &qword_2543F6F40);
      *(_QWORD *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_WORD *)(a3 + 56) = -256;
    }
    else
    {
      AnyValueImpl.asPublic()();
      return (_QWORD *)sub_244574078((uint64_t)v9);
    }
  }
  return result;
}

uint64_t SchematizedData.value(forFieldPath:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372420);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

_QWORD *sub_24459A7F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[7];
  unsigned __int8 v12;

  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, a2, a3, v8, v9);
  if (!v4)
  {
    if (v12 == 255)
    {
      result = (_QWORD *)sub_2445816D0((uint64_t)v11, &qword_2543F6F40);
      *(_QWORD *)(a4 + 48) = 0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_WORD *)(a4 + 56) = -256;
    }
    else
    {
      AnyValueImpl.asPublic()();
      return (_QWORD *)sub_244574078((uint64_t)v11);
    }
  }
  return result;
}

uint64_t SchematizedData.forEachValue(ofFieldName:block:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

_QWORD *sub_24459A964(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = a6;
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = a2[3];
  v12 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v11);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v15, a3, a4, v11, v12);
  if (!v6)
  {
    MEMORY[0x24BDAC7A8](result, v14);
    (*(void (**)(_QWORD *, uint64_t (*)()))(v10 + 64))(v15, sub_24459CD74);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return result;
}

uint64_t SchematizedData.values(forFieldName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD v3[6];

  sub_244577E90(v0, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372510);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  if (!v1)
    return v3[5];
  return result;
}

_QWORD *sub_24459AB38@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[5];
  _QWORD *v16;

  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v15, a3, a4, v12, v11);
  if (!v5)
  {
    MEMORY[0x24BDAC7A8](result, v14);
    (*(void (**)(_QWORD *, uint64_t (*)(uint64_t)))(v10 + 64))(v15, sub_24459CDD4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    result = v16;
    *a5 = v16;
  }
  return result;
}

uint64_t sub_24459AC5C(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  AnyValueImpl.asPublic()();
  v3 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_244585D04(0, v3[2] + 1, 1, v3);
    *a2 = v3;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    v3 = sub_244585D04((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    *a2 = v3;
  }
  v3[2] = v6 + 1;
  return sub_2445832A0((uint64_t)&v8, (uint64_t)&v3[8 * v6 + 4]);
}

uint64_t SchematizedData.forEachValue(ofField:block:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_24459ADC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  _BYTE v11[40];

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_244577E90(a2, (uint64_t)v11);
  v10[2] = a3;
  v10[3] = a4;
  (*(void (**)(_BYTE *, uint64_t (*)(), _QWORD *, uint64_t, uint64_t))(v8 + 64))(v11, sub_24459CD74, v10, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t SchematizedData.forEachValue(_:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_24459AF08(_QWORD *a1, void (*a2)(uint64_t *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[13];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  FieldSchemaDescribing.asPublic()(v3, v4, v6);
  AnyValueImpl.asPublic()();
  a2(v6);
  return sub_24459CDA0((uint64_t)v6);
}

uint64_t SchematizedData.forEachValue(matchingFieldPath:block:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t SchematizedData.value(forOneofName:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372518);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

_QWORD *sub_24459B110@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD v17[5];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v21 = a5;
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v12 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v12);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 72))(v17, a3, a4, v12, v11);
  if (!v5)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t))(v10 + 120))(v18, v17, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v14 = v19;
    if (v19)
    {
      v15 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      FieldSchemaDescribing.asPublic()(v14, v15, v21);
      AnyValueImpl.asPublic()();
      return (_QWORD *)sub_24459CD40((uint64_t)v18);
    }
    else
    {
      result = (_QWORD *)sub_2445816D0((uint64_t)v18, &qword_257372528);
      v16 = v21;
      *((_WORD *)v21 + 48) = 0;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 2) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      *(_OWORD *)v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
    }
  }
  return result;
}

uint64_t SchematizedData.value(forOneof:)()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_244577E90(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372518);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

double sub_24459B324@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 120))(v11, a2, v6, v7);
  if (!v3)
  {
    v9 = v12;
    if (v12)
    {
      v10 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      FieldSchemaDescribing.asPublic()(v9, v10, (uint64_t *)a3);
      AnyValueImpl.asPublic()();
      sub_24459CD40((uint64_t)v11);
    }
    else
    {
      sub_2445816D0((uint64_t)v11, &qword_257372528);
      *(_WORD *)(a3 + 96) = 0;
      result = 0.0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  return result;
}

uint64_t sub_24459B40C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 152))(v4, v5);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_24459B468(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t SchematizedData.getArray(matchingFieldPath:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD v3[6];

  sub_244577E90(v0, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372510);
  MessageSchemaDescribing.schematizing<A>(data:block:)();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  if (!v1)
    return v3[5];
  return result;
}

uint64_t sub_24459B54C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE v17[64];
  _BYTE v18[64];
  uint64_t v19;

  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 96))(a2, a3, v8, v9);
  if (!v4)
  {
    v11 = result;
    v12 = *(_QWORD *)(result + 16);
    if (v12)
    {
      v19 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v12, 0);
      v13 = v11 + 32;
      v14 = v19;
      do
      {
        sub_2445742AC(v13, (uint64_t)v17);
        AnyValueImpl.asPublic()();
        sub_244574078((uint64_t)v17);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2445A1818(0, *(_QWORD *)(v14 + 16) + 1, 1);
          v14 = v19;
        }
        v16 = *(_QWORD *)(v14 + 16);
        v15 = *(_QWORD *)(v14 + 24);
        if (v16 >= v15 >> 1)
        {
          sub_2445A1818(v15 > 1, v16 + 1, 1);
          v14 = v19;
        }
        *(_QWORD *)(v14 + 16) = v16 + 1;
        sub_2445832A0((uint64_t)v18, v14 + (v16 << 6) + 32);
        v13 += 64;
        --v12;
      }
      while (v12);
      result = swift_bridgeObjectRelease();
      *a4 = v14;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      *a4 = MEMORY[0x24BEE4AF8];
    }
  }
  return result;
}

uint64_t sub_24459B6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SchematizedDataDescribing.value(forFieldName:)(a1, a2, a3, a4, a5);
}

uint64_t sub_24459B6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SchematizedDataDescribing.forEachFieldValue(withName:block:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_24459B6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SchematizedDataDescribing.getArray(matchingFieldPath:)(a1, a2, a3, a4);
}

uint64_t sub_24459B708(uint64_t a1, uint64_t a2)
{
  return SchematizedDataDescribing.fieldName(forOneofName:)(*(Swift::String *)&a1).value._countAndFlagsBits;
}

uint64_t sub_24459B71C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SchematizedDataDescribing.value(forOneofName:)(a1, a2, a3, a4, a5);
}

uint64_t sub_24459B730@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return SchematizedDataDescribing.field(forOneof:)(a1, a2, a3);
}

uint64_t sub_24459B744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SchematizedDataDescribing.filed(forOneofName:)(a1, a2, a3, a4, a5);
}

uint64_t SchematizedDataDescribing.asPublic()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  (*(void (**)(void))(a2 + 16))();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  *(_QWORD *)(a3 + 40) = result;
  *(_QWORD *)(a3 + 48) = v7;
  return result;
}

uint64_t sub_24459B7A0(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  _BYTE v8[64];

  sub_2445742AC(a1, (uint64_t)v8);
  v3 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_244585D18(0, v3[2] + 1, 1, v3);
    *a2 = v3;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    v3 = sub_244585D18((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    *a2 = v3;
  }
  v3[2] = v6 + 1;
  return sub_24458170C((uint64_t)v8, (uint64_t)&v3[8 * v6 + 4]);
}

uint64_t sub_24459B864(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  _BYTE v29[64];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_244577E90(a1, (uint64_t)v30);
  sub_2445742AC(a1 + 40, (uint64_t)v29);
  v6 = v31;
  v5 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  v9 = v8;
  v10 = v31;
  v11 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11) & 1) != 0)
  {
    v12 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      swift_bridgeObjectRetain();
      v13 = sub_2445A14D8(v7, v9);
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
      }
      else
      {
        v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    sub_2445742AC((uint64_t)v29, (uint64_t)&v27);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_244585D18(0, v15[2] + 1, 1, v15);
    v24 = v15[2];
    v23 = v15[3];
    if (v24 >= v23 >> 1)
      v15 = sub_244585D18((_QWORD *)(v23 > 1), v24 + 1, 1, v15);
    v15[2] = v24 + 1;
    sub_24458170C((uint64_t)&v27, (uint64_t)&v15[8 * v24 + 4]);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = *a2;
    *a2 = 0x8000000000000000;
    sub_244594360((uint64_t)v15, v7, v9, isUniquelyReferenced_nonNull_native);
    *a2 = v27;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v27 = v7;
  v28 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372410);
  sub_24459CEAC();
  sub_2445C4594();
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    sub_244574078((uint64_t)v29);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  if (qword_257372280 != -1)
    swift_once();
  v16 = sub_2445C41C8();
  __swift_project_value_buffer(v16, (uint64_t)qword_257373950);
  swift_bridgeObjectRetain();
  MEMORY[0x249512DF4](v2);
  swift_bridgeObjectRetain();
  MEMORY[0x249512DF4](v2);
  v17 = sub_2445C41B0();
  v18 = sub_2445C4408();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v20 = v27;
    *(_DWORD *)v19 = 136315394;
    swift_bridgeObjectRetain();
    v33 = sub_24459C12C(v7, v9, &v27);
    sub_2445C4450();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    v33 = v2;
    MEMORY[0x249512DF4](v2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
    v21 = sub_2445C4258();
    v33 = sub_24459C12C(v21, v22, &v27);
    sub_2445C4450();
    swift_bridgeObjectRelease();
    MEMORY[0x249512DE8](v2);
    MEMORY[0x249512DE8](v2);
    _os_log_impl(&dword_244571000, v17, v18, "Sch: Error encoding %s: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x249512ECC](v20, -1, -1);
    MEMORY[0x249512ECC](v19, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    MEMORY[0x249512DE8](v2);
    MEMORY[0x249512DE8](v2);
  }

  v27 = 0;
  v28 = 0xE000000000000000;
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v27 = 0xD000000000000014;
  v28 = 0x80000002445C5240;
  sub_2445C42D0();
  sub_2445C42D0();
  v33 = v2;
  MEMORY[0x249512DF4](v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
  sub_2445C4258();
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  v27 = v7;
  v28 = v9;
  sub_2445C4588();
  swift_bridgeObjectRelease();
  MEMORY[0x249512DE8](v2);
  swift_bridgeObjectRelease();
  sub_244574078((uint64_t)v29);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t sub_24459BD94(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v2 = a1[1];
  v12 = *a1;
  v13 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372410);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372530);
  sub_24459CE48();
  result = sub_2445C4594();
  if (v1)
  {
    if (qword_257372280 != -1)
      swift_once();
    v5 = sub_2445C41C8();
    __swift_project_value_buffer(v5, (uint64_t)qword_257373950);
    swift_bridgeObjectRetain();
    MEMORY[0x249512DF4](v1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x249512DF4](v1);
    swift_bridgeObjectRetain();
    v6 = sub_2445C41B0();
    v7 = sub_2445C4408();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315394;
      v12 = v9;
      swift_bridgeObjectRetain();
      v14 = sub_24459C12C(v3, v2, &v12);
      sub_2445C4450();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      v14 = v1;
      MEMORY[0x249512DF4](v1);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
      v10 = sub_2445C4258();
      v14 = sub_24459C12C(v10, v11, &v12);
      sub_2445C4450();
      swift_bridgeObjectRelease();
      MEMORY[0x249512DE8](v1);
      MEMORY[0x249512DE8](v1);
      _os_log_impl(&dword_244571000, v6, v7, "Sch: Error encoding %s: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x249512ECC](v9, -1, -1);
      MEMORY[0x249512ECC](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      MEMORY[0x249512DE8](v1);
      MEMORY[0x249512DE8](v1);
    }

    v12 = 0;
    v13 = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000014;
    v13 = 0x80000002445C5240;
    sub_2445C42D0();
    sub_2445C42D0();
    v14 = v1;
    MEMORY[0x249512DF4](v1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
    sub_2445C4258();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    v12 = v3;
    v13 = v2;
    swift_bridgeObjectRetain();
    sub_2445C4588();
    swift_bridgeObjectRelease();
    MEMORY[0x249512DE8](v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24459C12C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_24459C1FC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_24459CEF0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_24459CEF0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_24459C1FC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2445C445C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_24459C3B4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2445C44EC();
  if (!v8)
  {
    sub_2445C4540();
    __break(1u);
LABEL_17:
    result = sub_2445C457C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_24459C3B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_24459C448(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24459C5BC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_24459C5BC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24459C448(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_244597D60(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2445C44E0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2445C4540();
      __break(1u);
LABEL_10:
      v2 = sub_2445C42DC();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2445C457C();
    __break(1u);
LABEL_14:
    result = sub_2445C4540();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_24459C5BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372500);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_24459C708(uint64_t a1)
{
  uint64_t v1;

  return sub_24459B7A0(a1, *(_QWORD ***)(v1 + 16));
}

uint64_t sub_24459C720(uint64_t a1)
{
  uint64_t v1;

  return sub_24459B864(a1, *(uint64_t **)(v1 + 16));
}

_QWORD *sub_24459C738@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24459A428(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_24459C750()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24459C770()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

_QWORD *sub_24459C790@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24459A668(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_24459C7A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24459A7F0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

_QWORD *sub_24459C7C0(_QWORD *a1)
{
  uint64_t v1;

  return sub_24459A964(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

_QWORD *sub_24459C7E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_24459AB38(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

_QWORD *sub_24459C7FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_24459C964(a1);
}

uint64_t sub_24459C810(_QWORD *a1)
{
  uint64_t *v1;

  return sub_24459ADC8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24459C82C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  _BYTE v6[16];
  __int128 v7;

  v2 = a1[3];
  v3 = a1[4];
  v5 = *(_OWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v7 = v5;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _BYTE *, uint64_t, uint64_t))(v3 + 88))(sub_24459CD88, v6, v2, v3);
}

uint64_t sub_24459C898(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  _BYTE v8[16];
  __int128 v9;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = a1[3];
  v5 = a1[4];
  v7 = *(_OWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v9 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(), _BYTE *, uint64_t, uint64_t))(v5 + 80))(v2, v3, sub_24459CD74, v8, v4, v5);
}

_QWORD *sub_24459C918@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_24459B110(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

double sub_24459C934@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24459B324(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_24459C94C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_24459B54C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

_QWORD *sub_24459C964@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
    *a1 = v5;
  return result;
}

uint64_t destroy for SchematizedData(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return sub_2445747FC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for SchematizedData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v6 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  sub_244574770(v6, v5);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t *assignWithCopy for SchematizedData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v5 = a2[5];
  v4 = a2[6];
  sub_244574770(v5, v4);
  v6 = a1[5];
  v7 = a1[6];
  a1[5] = v5;
  a1[6] = v4;
  sub_2445747FC(v6, v7);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SchematizedData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_2445747FC(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematizedData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematizedData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t dispatch thunk of SchematizedDataDescribing.messageSchema.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.unsafeData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.value(forField:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.value(forFieldName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.value(forFieldPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.forEachValue(ofField:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.forEachFieldValue(withName:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.forEachValue(matchingFieldPath:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.forEachValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.getArray(matchingFieldPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.fieldName(forOneof:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.fieldName(forOneofName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.value(forOneof:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.value(forOneofName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.field(forOneof:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.filed(forOneofName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.asJSONData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of SchematizedDataDescribing.asJSON()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

unint64_t sub_24459CCF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257372520;
  if (!qword_257372520)
  {
    v1 = type metadata accessor for UnsafeSchematizedData();
    result = MEMORY[0x249512E54](&unk_2445C61E0, v1);
    atomic_store(result, (unint64_t *)&qword_257372520);
  }
  return result;
}

uint64_t sub_24459CD40(uint64_t a1)
{
  destroy for FieldValueImpl(a1);
  return a1;
}

uint64_t sub_24459CD74()
{
  return sub_24459CDEC();
}

uint64_t sub_24459CD88(_QWORD *a1)
{
  uint64_t v1;

  return sub_24459AF08(a1, *(void (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_24459CDA0(uint64_t a1)
{
  destroy for FieldValue(a1);
  return a1;
}

uint64_t sub_24459CDD4(uint64_t a1)
{
  uint64_t v1;

  return sub_24459AC5C(a1, *(_QWORD ***)(v1 + 16));
}

uint64_t sub_24459CDEC()
{
  uint64_t v0;
  void (*v1)(_BYTE *);
  _BYTE v3[64];

  v1 = *(void (**)(_BYTE *))(v0 + 16);
  AnyValueImpl.asPublic()();
  v1(v3);
  return sub_244583318((uint64_t)v3);
}

unint64_t sub_24459CE48()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_257372538;
  if (!qword_257372538)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257372530);
    v2 = sub_24459CEAC();
    result = MEMORY[0x249512E54](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257372538);
  }
  return result;
}

unint64_t sub_24459CEAC()
{
  unint64_t result;

  result = qword_257372540;
  if (!qword_257372540)
  {
    result = MEMORY[0x249512E54](&protocol conformance descriptor for AnyValueImpl, &type metadata for AnyValueImpl);
    atomic_store(result, (unint64_t *)&qword_257372540);
  }
  return result;
}

uint64_t sub_24459CEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24459CF2C(uint64_t a1)
{
  return sub_24459C708(a1);
}

uint64_t sub_24459CF40()
{
  return sub_24459C750();
}

uint64_t SchemaStoreDescribing.asPublic()@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  a2[1] = a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_24459CF60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _OWORD v40[5];
  uint64_t v41;

  v35 = MEMORY[0x24BEE4B00];
  v41 = MEMORY[0x24BEE4B00];
  v39 = a1 + 64;
  v2 = -1 << *(_BYTE *)(a1 + 32);
  if (-v2 < 64)
    v3 = ~(-1 << -(char)v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v38 = (unint64_t)(63 - v2) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    while (1)
    {
      v14 = v6;
      if (v4)
      {
        v7 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
        v8 = v7 | (v6 << 6);
      }
      else
      {
        ++v6;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        if (v6 >= v38)
          goto LABEL_40;
        v15 = *(_QWORD *)(v39 + 8 * v6);
        if (!v15)
        {
          v16 = v14 + 2;
          if (v14 + 2 >= v38)
            goto LABEL_40;
          v15 = *(_QWORD *)(v39 + 8 * v16);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v14 + 3 >= v38)
              goto LABEL_40;
            v15 = *(_QWORD *)(v39 + 8 * v16);
            if (!v15)
            {
              v16 = v14 + 4;
              if (v14 + 4 >= v38)
                goto LABEL_40;
              v15 = *(_QWORD *)(v39 + 8 * v16);
              if (!v15)
              {
                v16 = v14 + 5;
                if (v14 + 5 >= v38)
                {
LABEL_40:
                  v31 = v35;
                  sub_244577DCC();
                  return v31;
                }
                v15 = *(_QWORD *)(v39 + 8 * v16);
                if (!v15)
                {
                  while (1)
                  {
                    v6 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_45;
                    if (v6 >= v38)
                      goto LABEL_40;
                    v15 = *(_QWORD *)(v39 + 8 * v6);
                    ++v16;
                    if (v15)
                      goto LABEL_21;
                  }
                }
              }
            }
          }
          v6 = v16;
        }
LABEL_21:
        v4 = (v15 - 1) & v15;
        v8 = __clz(__rbit64(v15)) + (v6 << 6);
      }
      v9 = *(_QWORD *)(a1 + 56) + 40 * v8;
      v10 = *(_QWORD *)v9;
      v11 = *(_QWORD *)(v9 + 8);
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (*(_BYTE *)(v9 + 32) == 1)
        break;
      sub_244577ED4(v10, v11, v13, v12, 0);
      result = sub_24458FD74(v10, v11, v13, v12, 0);
    }
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v34 = *v17;
    v37 = v17[1];
    sub_244577ED4(v10, v11, v13, v12, 1);
    sub_244577ED4(v10, v11, v13, v12, 1);
    swift_bridgeObjectRetain();
    sub_2445B5B5C(v10, (uint64_t *)v40);
    if (v36)
    {
      swift_bridgeObjectRelease();
      sub_24458FD74(v10, v11, v13, v12, 1);
      v31 = v35;
      swift_release();
      sub_244577DCC();
      return v31;
    }
    v32 = v40[1];
    v33 = v40[0];
    v18 = v35;
    v19 = *(_QWORD *)(v35 + 16);
    if (*(_QWORD *)(v35 + 24) <= v19)
    {
      sub_244591D4C(v19 + 1, 1);
      v18 = v41;
    }
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v20 = v18 + 64;
    v21 = -1 << *(_BYTE *)(v18 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v18 + 64 + 8 * (v22 >> 6))) == 0)
      break;
    v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v18 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_39:
    *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v18 + 48) + 16 * v24);
    *v29 = v34;
    v29[1] = v37;
    v30 = (_OWORD *)(*(_QWORD *)(v18 + 56) + 32 * v24);
    *v30 = v33;
    v30[1] = v32;
    v35 = v18;
    ++*(_QWORD *)(v18 + 16);
    result = sub_24458FD74(v10, v11, v13, v12, 1);
  }
  v25 = 0;
  v26 = (unint64_t)(63 - v21) >> 6;
  while (++v23 != v26 || (v25 & 1) == 0)
  {
    v27 = v23 == v26;
    if (v23 == v26)
      v23 = 0;
    v25 |= v27;
    v28 = *(_QWORD *)(v20 + 8 * v23);
    if (v28 != -1)
    {
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
      goto LABEL_39;
    }
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_24459D384(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD v40[9];
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v37 = MEMORY[0x24BEE4B00];
  v44 = MEMORY[0x24BEE4B00];
  v39 = a1 + 64;
  v2 = -1 << *(_BYTE *)(a1 + 32);
  if (-v2 < 64)
    v3 = ~(-1 << -(char)v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v38 = (unint64_t)(63 - v2) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    while (1)
    {
      v14 = v6;
      if (v4)
      {
        v7 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
        v8 = v7 | (v6 << 6);
      }
      else
      {
        ++v6;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        if (v6 >= v38)
          goto LABEL_40;
        v15 = *(_QWORD *)(v39 + 8 * v6);
        if (!v15)
        {
          v16 = v14 + 2;
          if (v14 + 2 >= v38)
            goto LABEL_40;
          v15 = *(_QWORD *)(v39 + 8 * v16);
          if (!v15)
          {
            v16 = v14 + 3;
            if (v14 + 3 >= v38)
              goto LABEL_40;
            v15 = *(_QWORD *)(v39 + 8 * v16);
            if (!v15)
            {
              v16 = v14 + 4;
              if (v14 + 4 >= v38)
                goto LABEL_40;
              v15 = *(_QWORD *)(v39 + 8 * v16);
              if (!v15)
              {
                v16 = v14 + 5;
                if (v14 + 5 >= v38)
                {
LABEL_40:
                  sub_244577DCC();
                  return v37;
                }
                v15 = *(_QWORD *)(v39 + 8 * v16);
                if (!v15)
                {
                  while (1)
                  {
                    v6 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_45;
                    if (v6 >= v38)
                      goto LABEL_40;
                    v15 = *(_QWORD *)(v39 + 8 * v6);
                    ++v16;
                    if (v15)
                      goto LABEL_21;
                  }
                }
              }
            }
          }
          v6 = v16;
        }
LABEL_21:
        v4 = (v15 - 1) & v15;
        v8 = __clz(__rbit64(v15)) + (v6 << 6);
      }
      v9 = *(_QWORD *)(a1 + 56) + 40 * v8;
      v10 = *(_QWORD *)v9;
      v11 = *(_QWORD *)(v9 + 8);
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (*(_BYTE *)(v9 + 32) == 1)
        break;
      sub_244577F1C(v10, v11, v13, v12, 0);
      result = sub_24458FE38(v10, v11, v13, v12, 0);
    }
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v34 = *v17;
    v36 = v17[1];
    v40[3] = type metadata accessor for ProtoEnumSchema();
    v40[4] = &off_25152FB50;
    v40[0] = v10;
    sub_244577F1C(v10, v11, v13, v12, 1);
    sub_244577F1C(v10, v11, v13, v12, 1);
    swift_bridgeObjectRetain();
    sub_2445A4FA8(v40, &v41);
    if (v35)
    {
      swift_bridgeObjectRelease();
      sub_24458FE38(v10, v11, v13, v12, 1);
      swift_release();
      sub_244577DCC();
      return v37;
    }
    v18 = v41;
    v33 = v42;
    v32 = v43;
    v19 = v37;
    v20 = *(_QWORD *)(v37 + 16);
    if (*(_QWORD *)(v37 + 24) <= v20)
    {
      sub_244591738(v20 + 1, 1);
      v19 = v44;
    }
    v37 = v19;
    sub_2445C4690();
    sub_2445C42A0();
    result = sub_2445C46B4();
    v21 = v37 + 64;
    v22 = -1 << *(_BYTE *)(v37 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v37 + 64 + 8 * (v23 >> 6))) == 0)
      break;
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v37 + 64 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_39:
    *(_QWORD *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v37 + 48) + 16 * v25);
    *v30 = v34;
    v30[1] = v36;
    v31 = *(_QWORD *)(v37 + 56) + 32 * v25;
    *(_QWORD *)v31 = v18;
    *(_OWORD *)(v31 + 8) = v33;
    *(_QWORD *)(v31 + 24) = v32;
    ++*(_QWORD *)(v37 + 16);
    result = sub_24458FE38(v10, v11, v13, v12, 1);
  }
  v26 = 0;
  v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    v28 = v24 == v27;
    if (v24 == v27)
      v24 = 0;
    v26 |= v28;
    v29 = *(_QWORD *)(v21 + 8 * v24);
    if (v29 != -1)
    {
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_39;
    }
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

PoirotSchematizer::SchemaManifest __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SchemaStoreDescribing.manifestSelf()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  PoirotSchematizer::SchemaManifest result;

  v2 = v0;
  v3 = v1;
  v4 = swift_unknownObjectRetain();
  v5 = (void *)sub_24458A538(v4, v2, v3);
  result.enums._rawValue = v6;
  result.messages._rawValue = v5;
  return result;
}

PoirotSchematizer::SchemaManifest __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SchemaStoreDescribing.manifestEngagementsOnly()()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  PoirotSchematizer::SchemaManifest result;

  v3 = v0;
  if (object_getClass(v1) != (Class)_TtC17PoirotSchematizer16ProtoSchemaStore || v1 == 0)
  {
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000023;
    *(_QWORD *)(v5 + 8) = 0x80000002445C5440;
    *(_BYTE *)(v5 + 16) = 2;
    v6 = (void *)swift_willThrow();
  }
  else
  {
    swift_beginAccess();
    swift_unknownObjectRetain();
    v8 = swift_bridgeObjectRetain();
    v9 = sub_24459CF60(v8);
    swift_bridgeObjectRelease();
    if (v2)
    {
      v6 = (void *)swift_unknownObjectRelease();
    }
    else
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v10 = swift_bridgeObjectRetain();
      v11 = sub_24459D384(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = (void *)swift_unknownObjectRelease();
      *v3 = v9;
      v3[1] = v11;
    }
  }
  result.enums._rawValue = v7;
  result.messages._rawValue = v6;
  return result;
}

uint64_t dispatch thunk of SchemaStoreDescribing.allMessageNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SchemaStoreDescribing.allEnumNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SchemaStoreDescribing.messageSchema(withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SchemaStoreDescribing.enumSchema(withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

double SchemaManifest.init(withDSCData:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v6;

  SchemaManifest.init(withPoirotDSCData:)(a1, a2, (unint64_t *)&v6);
  if (!v3)
  {
    result = *(double *)&v6;
    *a3 = v6;
  }
  return result;
}

unint64_t sub_24459D9E0()
{
  uint64_t inited;
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257372558);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2445C6A30;
  *(_QWORD *)(inited + 32) = 0xD000000000000021;
  *(_QWORD *)(inited + 40) = 0x80000002445C5470;
  v1 = sub_244575734((uint64_t)&unk_25152EB70);
  swift_bridgeObjectRetain_n();
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v1;
  *(_QWORD *)(inited + 56) = v2;
  *(_OWORD *)(inited + 64) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 80) = 0xD000000000000023;
  *(_QWORD *)(inited + 88) = 0x80000002445C4A90;
  v3 = sub_244575734((uint64_t)&unk_25152DFB8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 96) = v3;
  *(_QWORD *)(inited + 104) = v2;
  *(_OWORD *)(inited + 112) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 128) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 136) = 0x80000002445C4AC0;
  v4 = sub_244575734((uint64_t)&unk_25152E168);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 144) = v4;
  *(_QWORD *)(inited + 152) = v2;
  *(_OWORD *)(inited + 160) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 176) = 0xD000000000000023;
  *(_QWORD *)(inited + 184) = 0x80000002445C4AE0;
  v5 = sub_244575734((uint64_t)&unk_25152E3B8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 192) = v5;
  *(_QWORD *)(inited + 200) = v2;
  *(_OWORD *)(inited + 208) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 224) = 0xD000000000000028;
  *(_QWORD *)(inited + 232) = 0x80000002445C4B90;
  v6 = sub_244575734((uint64_t)&unk_25152E4C8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 240) = v6;
  *(_QWORD *)(inited + 248) = v2;
  *(_OWORD *)(inited + 256) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 272) = 0xD000000000000024;
  *(_QWORD *)(inited + 280) = 0x80000002445C4B10;
  v7 = sub_244575734((uint64_t)&unk_25152E5D8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 288) = v7;
  *(_QWORD *)(inited + 296) = v2;
  *(_OWORD *)(inited + 304) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 320) = 0xD000000000000024;
  *(_QWORD *)(inited + 328) = 0x80000002445C4B60;
  v8 = sub_244575734((uint64_t)&unk_25152E878);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 336) = v8;
  *(_QWORD *)(inited + 344) = v2;
  *(_OWORD *)(inited + 352) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 368) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 376) = 0x80000002445C4B40;
  v9 = sub_244575734((uint64_t)v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 384) = v9;
  *(_QWORD *)(inited + 392) = v2;
  *(_OWORD *)(inited + 400) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 416) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 424) = 0x80000002445C4C70;
  v10 = sub_244575734((uint64_t)v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 432) = v10;
  *(_QWORD *)(inited + 440) = v2;
  *(_OWORD *)(inited + 448) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 464) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 472) = 0x80000002445C4C90;
  v11 = sub_244575734((uint64_t)v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 480) = v11;
  *(_QWORD *)(inited + 488) = v2;
  *(_OWORD *)(inited + 496) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 512) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 520) = 0x80000002445C4BC0;
  v12 = sub_244575734((uint64_t)v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 528) = v12;
  *(_QWORD *)(inited + 536) = v2;
  *(_OWORD *)(inited + 544) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  *(_QWORD *)(inited + 560) = 0xD000000000000020;
  *(_QWORD *)(inited + 568) = 0x80000002445C4BE0;
  v13 = sub_244575734((uint64_t)v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 576) = v13;
  *(_QWORD *)(inited + 584) = v2;
  *(_OWORD *)(inited + 592) = xmmword_2445C6A40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  v14 = sub_244575B20(inited);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372560);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_2445C6180;
  *(_QWORD *)(v15 + 32) = 0xD00000000000002ALL;
  *(_QWORD *)(v15 + 40) = 0x80000002445C4C10;
  v16 = sub_244575C70((uint64_t)&unk_25152E938);
  v17 = sub_2445777E0(v2);
  sub_2445777D4(v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease_n();
  sub_2445747E8(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 56) = xmmword_2445C6A40;
  *(_QWORD *)(v15 + 72) = v17;
  *(_QWORD *)(v15 + 80) = 0xD000000000000029;
  *(_QWORD *)(v15 + 88) = 0x80000002445C4C40;
  v18 = sub_244575C70((uint64_t)&unk_25152E9A0);
  v19 = sub_2445777E0(v2);
  sub_2445777D4(v2);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_24457475C(0, 0xF000000000000000);
  swift_bridgeObjectRelease_n();
  sub_2445747E8(0, 0xF000000000000000);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v15 + 96) = v18;
  *(_OWORD *)(v15 + 104) = xmmword_2445C6A40;
  *(_QWORD *)(v15 + 120) = v19;
  result = sub_2445759D8(v15);
  qword_257372548 = v14;
  unk_257372550 = result;
  return result;
}

uint64_t static Descriptor.manifest.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_257372290 != -1)
    swift_once();
  v2 = unk_257372550;
  *a1 = qword_257372548;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SchemaManifest.init(withPoirotDSCData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19[4];
  unint64_t v20;

  if (qword_257372290 != -1)
    swift_once();
  v6 = qword_257372548;
  v7 = unk_257372550;
  type metadata accessor for ProtoSchemaStore();
  v8 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + 16) = sub_244575D80(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v8 + 24) = sub_244575D94(v9);
  v10 = sub_24458E17C(v7);
  swift_beginAccess();
  *(_QWORD *)(v8 + 16) = v10;
  swift_bridgeObjectRelease();
  v11 = sub_24458DF7C(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v8 + 24) = v11;
  swift_bridgeObjectRelease();
  sub_24458F624(0xD000000000000021, 0x80000002445C5470, v19);
  if (v3)
  {
    sub_2445747FC(a1, a2);
    return swift_release();
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
    v20 = sub_2445759D8(MEMORY[0x24BEE4AF8]);
    v18 = sub_244575B20(v12);
    v13 = __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    MEMORY[0x24BDAC7A8](v13, v14);
    MessageSchemaDescribing.schematizing<A>(data:block:)();
    sub_2445747FC(a1, a2);
    v16 = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    result = swift_release();
    *a3 = v18;
    a3[1] = v16;
  }
  return result;
}

uint64_t SchemaManifest.init(withSwiftProtobufDSCData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;

  v7 = sub_2445C4168();
  MEMORY[0x24BDAC7A8](v7, v8);
  v9 = sub_2445C3EB0();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)v19 - v16;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_244574770(a1, a2);
  sub_2445C415C();
  sub_24458517C();
  sub_2445C418C();
  if (v3)
    return sub_2445747FC(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
  sub_2445BE050((uint64_t)v14, (unint64_t *)v19);
  sub_2445747FC(a1, a2);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  *a3 = v19[0];
  return result;
}

uint64_t SchemaManifest.toDSCData()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[5];
  uint64_t v6;
  unint64_t v7;

  v3 = *v0;
  v2 = v0[1];
  v5[0] = v3;
  v5[1] = v2;
  sub_2445953C0(v5);
  if (!v1)
  {
    sub_2445C0C4C((uint64_t)&off_25152FFE8, (uint64_t)v5);
    v2 = v6;
    sub_244574770(v6, v7);
    sub_244575334((uint64_t)v5);
    swift_release();
  }
  return v2;
}

uint64_t SchemaManifest.toDSCDataWithPoirot()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[5];
  uint64_t v6;
  unint64_t v7;

  v3 = *v0;
  v2 = v0[1];
  v5[0] = v3;
  v5[1] = v2;
  sub_2445953C0(v5);
  if (!v1)
  {
    sub_2445C0C4C((uint64_t)&off_25152FFE8, (uint64_t)v5);
    v2 = v6;
    sub_244574770(v6, v7);
    sub_244575334((uint64_t)v5);
    swift_release();
  }
  return v2;
}

__int128 *SchemaManifest.toDSCDataWithSwiftProtobuf()()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  __int128 v9;

  v2 = sub_2445C3EB0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  v7 = &v9;
  sub_24457C544();
  if (!v1)
  {
    sub_24458517C();
    v7 = (__int128 *)sub_2445C4198();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return v7;
}

uint64_t sub_24459E7CC(_QWORD *a1)
{
  uint64_t v1;

  return sub_2445ACD80(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

ValueMetadata *type metadata accessor for Descriptor()
{
  return &type metadata for Descriptor;
}

uint64_t sub_24459E7F8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SchemaManifestDSCError(uint64_t a1)
{
  return sub_24459E820(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_24459E820(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s17PoirotSchematizer22SchemaManifestDSCErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24459E7F8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SchemaManifestDSCError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24459E7F8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_24459E820(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SchemaManifestDSCError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_24459E820(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaManifestDSCError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaManifestDSCError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_24459E9A4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_24459E9BC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SchemaManifestDSCError()
{
  return &type metadata for SchemaManifestDSCError;
}

void Reader.read(fieldPathAndType:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (*(_QWORD *)(*a1 + 16))
  {
    sub_244572CCC(a1, 0, a2);
  }
  else
  {
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v2 = 0xD000000000000011;
    *(_QWORD *)(v2 + 8) = 0x80000002445C5000;
    *(_BYTE *)(v2 + 16) = 5;
    swift_willThrow();
  }
}

_QWORD *sub_24459EA68(_QWORD *a1, void (*a2)(_QWORD))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40[2];
  char v41;
  _QWORD v42[7];
  unsigned __int8 v43;
  _BYTE v44[64];
  _QWORD v45[7];
  uint64_t v46;

  v4 = v2;
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 56))(v45, v7, v8);
  if (v3)
    return result;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15) & 1) != 0)
  {
    v16 = v2[3];
    v46 = v2[2];
    if (v16 >= v46)
      goto LABEL_3;
    while (1)
    {
      v18 = *v4;
      v17 = v4[1];
      if (*v4)
      {
        v19 = v17 - v18;
        if (v16 >= v17 - v18)
          goto LABEL_44;
      }
      else
      {
        if ((v16 & 0x8000000000000000) == 0)
          goto LABEL_44;
        v19 = 0;
      }
      v20 = *(unsigned __int8 *)(v18 + v16);
      v21 = v16 + 1;
      if (*(char *)(v18 + v16) < 0)
      {
        if (v21 >= v19)
          goto LABEL_44;
        v20 &= 0x7Fu;
        v22 = 7;
        while (1)
        {
          v21 = v16 + 2;
          v20 |= (unint64_t)(*(_BYTE *)(v18 + 1 + v16) & 0x7F) << v22;
          if ((*(_BYTE *)(v18 + 1 + v16) & 0x80) == 0)
            break;
          if (v21 < v19)
          {
            ++v16;
            v24 = v22 > 0x38;
            v22 += 7;
            if (!v24)
              continue;
          }
          goto LABEL_44;
        }
        v4[3] = v21;
        if (v20 > 0xFFFFFFFE)
        {
LABEL_44:
          sub_24457FE80();
          swift_allocError();
          *(_QWORD *)v29 = 1;
          *(_OWORD *)(v29 + 8) = 0u;
          *(_OWORD *)(v29 + 24) = 0u;
          *(_OWORD *)(v29 + 40) = 0u;
          *(_OWORD *)(v29 + 56) = 0u;
          *(_OWORD *)(v29 + 72) = 0u;
          *(_OWORD *)(v29 + 88) = 0u;
          *(_WORD *)(v29 + 104) = 512;
          swift_willThrow();
          goto LABEL_3;
        }
      }
      else
      {
        v4[3] = v21;
      }
      v23 = v20 & 7;
      v24 = v20 < 8 || v23 > 5;
      if (v24)
        goto LABEL_44;
      if (v13 == v20 >> 3)
      {
        switch(v20 & 7)
        {
          case 0uLL:
            LOBYTE(v23) = 0;
            goto LABEL_40;
          case 1uLL:
          case 3uLL:
          case 4uLL:
          case 5uLL:
            if (v23 - 1 >= 5)
              goto LABEL_68;
            goto LABEL_40;
          case 2uLL:
            v25 = a1[4];
            v37 = v17;
            v38 = a1[3];
            __swift_project_boxed_opaque_existential_1(a1, v38);
            (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 56))(v42, v38, v25);
            sub_24457403C((uint64_t)v42, (uint64_t)&v39);
            if (v41 == 1)
            {
              sub_2445752C0((uint64_t)v42);
              v27 = &v39;
            }
            else
            {
              if (v41 != 2
                || (unint64_t)(v39 - 13) > 1
                || (v26 = vorrq_s8(v40[0], v40[1]),
                    *(_QWORD *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))))
              {
                if (v18)
                {
                  v30 = v37 - v18;
                  if (v21 >= v37 - v18)
                  {
LABEL_65:
                    sub_24457FE80();
                    swift_allocError();
                    *(_QWORD *)v36 = 1;
                    *(_OWORD *)(v36 + 8) = 0u;
                    *(_OWORD *)(v36 + 24) = 0u;
                    *(_OWORD *)(v36 + 40) = 0u;
                    *(_OWORD *)(v36 + 56) = 0u;
                    *(_OWORD *)(v36 + 72) = 0u;
                    *(_OWORD *)(v36 + 88) = 0u;
                    *(_WORD *)(v36 + 104) = 512;
                    swift_willThrow();
                    goto LABEL_66;
                  }
                }
                else
                {
                  if ((v21 & 0x8000000000000000) == 0)
                    goto LABEL_65;
                  v30 = 0;
                }
                LODWORD(v31) = *(unsigned __int8 *)(v18 + v21);
                v32 = v21 + 1;
                if (*(char *)(v18 + v21) < 0)
                {
                  if (v32 >= v30)
                    goto LABEL_65;
                  v31 &= 0x7Fu;
                  v34 = 7;
                  v35 = v21;
                  while (1)
                  {
                    v32 = v35 + 2;
                    v31 |= (unint64_t)(*(_BYTE *)(v18 + 1 + v35) & 0x7F) << v34;
                    if ((*(_BYTE *)(v18 + 1 + v35) & 0x80) == 0)
                      break;
                    if (v32 < v30)
                    {
                      ++v35;
                      v24 = v34 > 0x38;
                      v34 += 7;
                      if (!v24)
                        continue;
                    }
                    goto LABEL_65;
                  }
                }
                v4[3] = v32;
                if ((v31 & 0x80000000) != 0)
                  goto LABEL_65;
                v33 = v21 + v31;
                if (__OFADD__(v21, v31))
                {
LABEL_69:
                  __break(1u);
                  JUMPOUT(0x24459EFBCLL);
                }
                if (v32 != v33)
                {
                  do
                  {
                    sub_2445B1638((uint64_t)v42, (uint64_t)v44);
                    a2(v44);
                    sub_244574078((uint64_t)v44);
                  }
                  while (v4[3] != v33);
                }
LABEL_66:
                sub_2445752C0((uint64_t)v42);
                sub_2445752C0((uint64_t)v45);
                v12 = &v39;
                return (_QWORD *)sub_2445752C0((uint64_t)v12);
              }
              v27 = v42;
            }
            sub_2445752C0((uint64_t)v27);
            LOBYTE(v23) = 2;
LABEL_40:
            sub_2445735C4((uint64_t)v45, v23, (uint64_t)v44);
            a2(v44);
            sub_244574078((uint64_t)v44);
            break;
          default:
            __break(1u);
LABEL_68:
            __break(1u);
            goto LABEL_69;
        }
      }
      else
      {
        sub_244581834(v20);
      }
      v16 = v4[3];
      if (v16 >= v46)
        goto LABEL_3;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_2543F6F48);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_2445C6170;
  *(_QWORD *)(v28 + 32) = v13;
  *(_QWORD *)(v28 + 40) = 0;
  *(_BYTE *)(v28 + 48) = 0;
  sub_24457403C((uint64_t)v45, (uint64_t)v40);
  v39 = v28;
  sub_244572CCC(&v39, 0, (uint64_t)v42);
  sub_2445732C8((uint64_t)&v39);
  if (v43 != 255)
  {
    sub_24458170C((uint64_t)v42, (uint64_t)v44);
    a2(v44);
    sub_244574078((uint64_t)v44);
LABEL_3:
    v12 = v45;
    return (_QWORD *)sub_2445752C0((uint64_t)v12);
  }
  sub_2445752C0((uint64_t)v45);
  return (_QWORD *)sub_244574464((uint64_t)v42);
}

uint64_t sub_24459EFD4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int8x16_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char v39;
  _BYTE v40[56];
  uint64_t v41;

  v41 = result;
  v9 = v5[2];
  v8 = v5[3];
  if (v8 >= v9)
  {
LABEL_39:
    *(_OWORD *)(a5 + 42) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_BYTE *)(a5 + 58) = 2;
    return result;
  }
  v10 = v5;
  v32 = a3 + 8;
  while (1)
  {
    v13 = *v10;
    v12 = v10[1];
    if (*v10)
    {
      v14 = v12 - v13;
      if (v8 >= v12 - v13)
        goto LABEL_40;
    }
    else
    {
      if ((v8 & 0x8000000000000000) == 0)
        goto LABEL_40;
      v14 = 0;
    }
    v15 = *(char *)(v13 + v8);
    v16 = *(unsigned __int8 *)(v13 + v8);
    v17 = v8 + 1;
    if ((v15 & 0x80000000) != 0)
    {
      if (v17 >= v14)
        goto LABEL_40;
      v16 &= 0x7Fu;
      v15 = v13 + 1;
      v18 = 7;
      while (1)
      {
        v17 = v8 + 2;
        v16 |= (unint64_t)(*(_BYTE *)(v15 + v8) & 0x7F) << v18;
        if ((*(_BYTE *)(v15 + v8) & 0x80) == 0)
          break;
        if (v17 < v14)
        {
          ++v8;
          v20 = v18 >= 0x39;
          v18 += 7;
          if (!v20)
            continue;
        }
        goto LABEL_40;
      }
      v10[3] = v17;
      if (v16 >= 0xFFFFFFFF)
      {
LABEL_40:
        sub_24457FE80();
        swift_allocError();
        *(_QWORD *)v26 = 1;
        *(_OWORD *)(v26 + 8) = 0u;
        *(_OWORD *)(v26 + 24) = 0u;
        *(_OWORD *)(v26 + 40) = 0u;
        *(_OWORD *)(v26 + 56) = 0u;
        *(_OWORD *)(v26 + 72) = 0u;
        *(_OWORD *)(v26 + 88) = 0u;
        *(_WORD *)(v26 + 104) = 512;
        return swift_willThrow();
      }
    }
    else
    {
      v10[3] = v17;
    }
    v19 = v16 & 7;
    v20 = v16 < 8 || v19 >= 6;
    if (v20)
      goto LABEL_40;
    if (v41 != v16 >> 3)
      goto LABEL_28;
    if (v19 > 5)
    {
      __break(1u);
      goto LABEL_69;
    }
    if (v19 != 2)
    {
      v21 = a2;
      v22 = *(_QWORD *)(*(_QWORD *)a3 + 16) - 1;
      if (v22 != a2)
      {
        sub_244578600();
        swift_allocError();
        *(_QWORD *)v27 = 0xD00000000000004BLL;
        *(_QWORD *)(v27 + 8) = 0x80000002445C5520;
        *(_BYTE *)(v27 + 16) = 5;
        return swift_willThrow();
      }
      goto LABEL_26;
    }
    v21 = a2;
    v22 = *(_QWORD *)(*(_QWORD *)a3 + 16) - 1;
    if (v22 == a2)
      break;
LABEL_26:
    if (!a4)
    {
      *(_DWORD *)a5 = v16;
      *(_BYTE *)(a5 + 58) = 1;
      return result;
    }
    v23 = __OFSUB__(a4--, 1);
    if (v23)
    {
      __break(1u);
LABEL_57:
      if (v15 >= v21)
        goto LABEL_63;
      v22 &= 0x7Fu;
      v29 = 7;
      while (1)
      {
        v15 = v17 + 2;
        v22 |= (unint64_t)(*(_BYTE *)(v13 + 1 + v17) & 0x7F) << v29;
        if ((*(_BYTE *)(v13 + 1 + v17) & 0x80) == 0)
          goto LABEL_51;
        if (v15 < v21)
        {
          ++v17;
          v30 = v29 > 0x38;
          v29 += 7;
          if (!v30)
            continue;
        }
        goto LABEL_63;
      }
    }
LABEL_28:
    result = sub_244581834(v16);
    if (v6)
      return result;
    v8 = v10[3];
    if (v8 >= v9)
      goto LABEL_39;
  }
  sub_24457403C(v32, (uint64_t)v40);
  sub_24457403C((uint64_t)v40, (uint64_t)&v36);
  if (v39 == 1)
  {
    sub_2445752C0((uint64_t)v40);
    v25 = &v36;
    goto LABEL_38;
  }
  if (v39 == 2 && (unint64_t)(v36 - 13) <= 1)
  {
    v24 = vorrq_s8(v37, v38);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)))
    {
      v25 = (uint64_t *)v40;
LABEL_38:
      result = sub_2445752C0((uint64_t)v25);
      goto LABEL_26;
    }
  }
  if (v13)
  {
    v21 = v12 - v13;
    if (v17 >= v12 - v13)
    {
LABEL_63:
      sub_24457FE80();
      swift_allocError();
      *(_QWORD *)v31 = 1;
      *(_OWORD *)(v31 + 8) = 0u;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_OWORD *)(v31 + 40) = 0u;
      *(_OWORD *)(v31 + 56) = 0u;
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_WORD *)(v31 + 104) = 512;
      swift_willThrow();
      sub_2445752C0((uint64_t)v40);
      return sub_2445752C0((uint64_t)&v36);
    }
  }
  else
  {
    if ((v17 & 0x8000000000000000) == 0)
      goto LABEL_63;
    v21 = 0;
  }
  LODWORD(v22) = *(unsigned __int8 *)(v13 + v17);
  v15 = v17 + 1;
  if (*(char *)(v13 + v17) < 0)
    goto LABEL_57;
LABEL_51:
  v10[3] = v15;
  if ((v22 & 0x80000000) != 0)
    goto LABEL_63;
  v23 = __OFADD__(v15, v22);
  v28 = v15 + v22;
  if (v23)
  {
LABEL_69:
    __break(1u);
    JUMPOUT(0x24459F418);
  }
  v35 = v15;
  v10[4] = v28;
  *((_BYTE *)v10 + 40) = 0;
  if (a4 > 0 && (sub_2445B1E38((uint64_t)v40, a4), v6))
  {
    sub_2445752C0((uint64_t)v40);
  }
  else
  {
    sub_2445B1638((uint64_t)v40, a5);
    sub_2445752C0((uint64_t)v40);
    if (!v6)
      *(_BYTE *)(a5 + 58) = 0;
  }
  v10[3] = v35;
  return sub_2445752C0((uint64_t)&v36);
}

_QWORD *sub_24459F430@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[7];
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = *v3;
  v7 = v3[1];
  if (*v3)
  {
    v8 = v7 - v6;
    v9 = v3[3];
    if (v9 >= v7 - v6)
      goto LABEL_22;
  }
  else
  {
    v9 = v3[3];
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_22;
    v8 = 0;
  }
  LODWORD(v10) = *(unsigned __int8 *)(v6 + v9);
  v11 = v9 + 1;
  if (*(char *)(v6 + v9) < 0)
  {
    if (v11 >= v8)
      goto LABEL_22;
    v10 &= 0x7Fu;
    v15 = 7;
    while (1)
    {
      v11 = v9 + 2;
      v10 |= (unint64_t)(*(_BYTE *)(v6 + 1 + v9) & 0x7F) << v15;
      if ((*(_BYTE *)(v6 + 1 + v9) & 0x80) == 0)
        break;
      if (v11 < v8)
      {
        ++v9;
        v16 = v15 > 0x38;
        v15 += 7;
        if (!v16)
          continue;
      }
      goto LABEL_22;
    }
  }
  v3[3] = v11;
  if ((v10 & 0x80000000) == 0)
  {
    v12 = v11 + v10;
    if (__OFADD__(v11, v10))
    {
      __break(1u);
    }
    else
    {
      v20 = v6;
      v21 = v7;
      v22 = v11 + v10;
      v23 = v11;
      v24 = 0;
      v25 = 1;
      v13 = __OFADD__(a2, 1);
      v14 = a2 + 1;
      if (!v13)
      {
        result = sub_244572CCC(v18, result, v14);
        if (v4)
          return result;
        if (v19 != 255)
          return (_QWORD *)sub_24458170C((uint64_t)v18, a3);
        result = (_QWORD *)sub_244574464((uint64_t)v18);
        if (*v3)
        {
          if (v12 >= v3[1] - *v3)
          {
LABEL_15:
            *(_QWORD *)(a3 + 48) = 0;
            *(_OWORD *)(a3 + 16) = 0u;
            *(_OWORD *)(a3 + 32) = 0u;
            *(_OWORD *)a3 = 0u;
            *(_WORD *)(a3 + 56) = -256;
            return result;
          }
        }
        else if ((v12 & 0x8000000000000000) == 0)
        {
          goto LABEL_15;
        }
        v3[3] = v12;
        goto LABEL_15;
      }
    }
    __break(1u);
    return result;
  }
LABEL_22:
  sub_24457FE80();
  swift_allocError();
  *(_QWORD *)v17 = 1;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_WORD *)(v17 + 104) = 512;
  return (_QWORD *)swift_willThrow();
}

void FieldValueImpl.asPublic()(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v4 = v1[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  FieldSchemaDescribing.asPublic()(v4, v5, a1);
  AnyValueImpl.asPublic()();
}

uint64_t FieldValue.fieldSchema.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24459F64C(v1, a1);
}

uint64_t sub_24459F64C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for OneofSchema(a2, a1);
  return a2;
}

uint64_t FieldValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2445832DC((uint64_t *)(v1 + 40), a1);
}

uint64_t FieldValueImpl.fieldSchema.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244577E90(v1, a1);
}

uint64_t FieldValueImpl.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2445742AC(v1 + 40, a1);
}

uint64_t destroy for FieldValue(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  result = a1 + 40;
  switch(*(_BYTE *)(a1 + 97))
  {
    case 7:
      __swift_destroy_boxed_opaque_existential_1(result);
      result = sub_24457ED14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
      break;
    case 8:
      result = swift_bridgeObjectRelease();
      break;
    case 9:
      result = sub_2445747FC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      break;
    case 0xA:
      __swift_destroy_boxed_opaque_existential_1(result);
      result = sub_2445747FC(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for FieldValue(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  switch(*(_BYTE *)(a2 + 97))
  {
    case 7:
      v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      v8 = *(_QWORD *)(a2 + 80);
      v9 = *(_QWORD *)(a2 + 88);
      v10 = *(_BYTE *)(a2 + 96);
      sub_24457F1E0(v8, v9, v10);
      *(_QWORD *)(a1 + 80) = v8;
      *(_QWORD *)(a1 + 88) = v9;
      *(_BYTE *)(a1 + 96) = v10;
      v11 = 7;
      goto LABEL_7;
    case 8:
      v13 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v13;
      *(_BYTE *)(a1 + 97) = 8;
      swift_bridgeObjectRetain();
      return a1;
    case 9:
      v15 = *(_QWORD *)(a2 + 40);
      v14 = *(_QWORD *)(a2 + 48);
      sub_244574770(v15, v14);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v14;
      v11 = 9;
      goto LABEL_7;
    case 0xA:
      v16 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v5, v6);
      v18 = *(_QWORD *)(a2 + 80);
      v17 = *(_QWORD *)(a2 + 88);
      sub_244574770(v18, v17);
      *(_QWORD *)(a1 + 80) = v18;
      *(_QWORD *)(a1 + 88) = v17;
      v11 = 10;
LABEL_7:
      *(_BYTE *)(a1 + 97) = v11;
      break;
    default:
      v12 = *(_OWORD *)(a2 + 56);
      *v5 = *v6;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for FieldValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  if (a1 != a2)
  {
    sub_244583318(a1 + 40);
    switch(*(_BYTE *)(a2 + 97))
    {
      case 7:
        v4 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v4;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 40, a2 + 40);
        v5 = *(_QWORD *)(a2 + 80);
        v6 = *(_QWORD *)(a2 + 88);
        v7 = *(_BYTE *)(a2 + 96);
        sub_24457F1E0(v5, v6, v7);
        *(_QWORD *)(a1 + 80) = v5;
        *(_QWORD *)(a1 + 88) = v6;
        *(_BYTE *)(a1 + 96) = v7;
        v8 = 7;
        goto LABEL_8;
      case 8:
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_BYTE *)(a1 + 97) = 8;
        swift_bridgeObjectRetain();
        return a1;
      case 9:
        v13 = *(_QWORD *)(a2 + 40);
        v12 = *(_QWORD *)(a2 + 48);
        sub_244574770(v13, v12);
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v12;
        v8 = 9;
        goto LABEL_8;
      case 0xA:
        v14 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v14;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 40, a2 + 40);
        v16 = *(_QWORD *)(a2 + 80);
        v15 = *(_QWORD *)(a2 + 88);
        sub_244574770(v16, v15);
        *(_QWORD *)(a1 + 80) = v16;
        *(_QWORD *)(a1 + 88) = v15;
        v8 = 10;
LABEL_8:
        *(_BYTE *)(a1 + 97) = v8;
        break;
      default:
        v9 = *(_OWORD *)(a2 + 40);
        v10 = *(_OWORD *)(a2 + 56);
        v11 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 72) = v11;
        *(_OWORD *)(a1 + 40) = v9;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FieldValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24459FD1C(a1, a2, a3, (void (*)(uint64_t))sub_244583318);
}

ValueMetadata *type metadata accessor for FieldValue()
{
  return &type metadata for FieldValue;
}

uint64_t destroy for FieldValueImpl(uint64_t a1)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  result = a1 + 40;
  switch(*(_BYTE *)(a1 + 97))
  {
    case 7:
      __swift_destroy_boxed_opaque_existential_1(result);
      result = sub_24457ED14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
      break;
    case 8:
      result = swift_bridgeObjectRelease();
      break;
    case 9:
    case 0xA:
      result = __swift_destroy_boxed_opaque_existential_1(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for FieldValueImpl(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = (_OWORD *)(a1 + 40);
  v6 = (_OWORD *)(a2 + 40);
  switch(*(_BYTE *)(a2 + 97))
  {
    case 7:
      v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      v8 = *(_QWORD *)(a2 + 80);
      v9 = *(_QWORD *)(a2 + 88);
      v10 = *(_BYTE *)(a2 + 96);
      sub_24457F1E0(v8, v9, v10);
      *(_QWORD *)(a1 + 80) = v8;
      *(_QWORD *)(a1 + 88) = v9;
      *(_BYTE *)(a1 + 96) = v10;
      v11 = 7;
      goto LABEL_7;
    case 8:
      v13 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v13;
      *(_BYTE *)(a1 + 97) = 8;
      swift_bridgeObjectRetain();
      return a1;
    case 9:
      v14 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v5, v6);
      v11 = 9;
      goto LABEL_7;
    case 0xA:
      v15 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v5, v6);
      v11 = 10;
LABEL_7:
      *(_BYTE *)(a1 + 97) = v11;
      break;
    default:
      v12 = *(_OWORD *)(a2 + 56);
      *v5 = *v6;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for FieldValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  if (a1 != a2)
  {
    sub_244574078(a1 + 40);
    switch(*(_BYTE *)(a2 + 97))
    {
      case 7:
        v4 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v4;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 40, a2 + 40);
        v5 = *(_QWORD *)(a2 + 80);
        v6 = *(_QWORD *)(a2 + 88);
        v7 = *(_BYTE *)(a2 + 96);
        sub_24457F1E0(v5, v6, v7);
        *(_QWORD *)(a1 + 80) = v5;
        *(_QWORD *)(a1 + 88) = v6;
        *(_BYTE *)(a1 + 96) = v7;
        v8 = 7;
        goto LABEL_8;
      case 8:
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_BYTE *)(a1 + 97) = 8;
        swift_bridgeObjectRetain();
        return a1;
      case 9:
        v12 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v12;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 40, a2 + 40);
        v8 = 9;
        goto LABEL_8;
      case 0xA:
        v13 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 40, a2 + 40);
        v8 = 10;
LABEL_8:
        *(_BYTE *)(a1 + 97) = v8;
        break;
      default:
        v9 = *(_OWORD *)(a2 + 40);
        v10 = *(_OWORD *)(a2 + 56);
        v11 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 72) = v11;
        *(_OWORD *)(a1 + 40) = v9;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for FieldValueImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24459FD1C(a1, a2, a3, (void (*)(uint64_t))sub_244574078);
}

uint64_t sub_24459FD1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  __int128 v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    a4(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
  }
  return a1;
}

uint64_t _s17PoirotSchematizer10FieldValueVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 98))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24459FDD8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 98) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 98) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FieldValueImpl()
{
  return &type metadata for FieldValueImpl;
}

uint64_t SchematizedDataComposer.compose()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v1;
  v5 = v1[4];
  v34 = v1[5];
  v6 = v1[3];
  __swift_project_boxed_opaque_existential_1(v1, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  v8 = v7(v6, v5);
  if (!v2)
  {
    v9 = v8;
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v27 = MEMORY[0x24BEE4AF8];
      sub_2445A1798(0, v10, 0);
      v11 = v9 + 32;
      v12 = v27;
      do
      {
        sub_244577E90(v11, (uint64_t)v30);
        sub_244577E90((uint64_t)v30, (uint64_t)v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2445A1798(0, *(_QWORD *)(v12 + 16) + 1, 1);
          v12 = v27;
        }
        v14 = *(_QWORD *)(v12 + 16);
        v13 = *(_QWORD *)(v12 + 24);
        if (v14 >= v13 >> 1)
        {
          sub_2445A1798(v13 > 1, v14 + 1, 1);
          v12 = v27;
        }
        *(_QWORD *)(v12 + 16) = v14 + 1;
        sub_2445A17B4((uint64_t)v28, v12 + 40 * v14 + 32);
        v11 += 40;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v12 = MEMORY[0x24BEE4AF8];
    }
    v33 = v12;
    sub_244577E90((uint64_t)v3, (uint64_t)v30);
    v15 = v32;
    v16 = __swift_project_boxed_opaque_existential_1(v30, v31);
    MEMORY[0x24BDAC7A8](v16, v17);
    (*(void (**)(_OWORD *__return_ptr, uint64_t (*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>)))(v15 + 96))(v28, sub_2445A17FC);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (*(_QWORD *)(v34 + 16))
    {
      v30[0] = 0;
      v30[1] = 0xE000000000000000;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      v18 = v3[3];
      v19 = v3[4];
      __swift_project_boxed_opaque_existential_1(v3, v18);
      MessageSchemaDescribing.asPublic()(v18, v19, v30);
      v21 = v31;
      v20 = v32;
      __swift_project_boxed_opaque_existential_1(v30, v31);
      (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
      sub_244578644((uint64_t)v30);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      v22 = v34;
      swift_bridgeObjectRetain_n();
      v23 = sub_2445A1A44(v22);
      swift_bridgeObjectRelease();
      v30[0] = (uint64_t)v23;
      sub_2445A19D8(v30);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573724E0);
      sub_24459706C();
      sub_2445C41EC();
      swift_release();
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445A1B28();
      swift_allocError();
      *(_QWORD *)v24 = 0x3A6567617373654DLL;
      *(_QWORD *)(v24 + 8) = 0xE900000000000020;
      *(_BYTE *)(v24 + 16) = 0;
      swift_willThrow();
      sub_244575334((uint64_t)v28);
    }
    else
    {
      v26 = v28[1];
      *(_OWORD *)a1 = v28[0];
      *(_OWORD *)(a1 + 16) = v26;
      *(_OWORD *)(a1 + 32) = v28[2];
      *(_QWORD *)(a1 + 48) = v29;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t SchematizedDataComposer.messageSchema.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v4 = v1[3];
  v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  return MessageSchemaDescribing.asPublic()(v4, v5, a1);
}

uint64_t SchematizedDataComposer.init(messageSchema:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 40) = sub_2445C41D4();
  return sub_24457466C(a1, a2);
}

uint64_t SchematizedDataComposer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;
  unsigned __int8 v26;
  uint64_t v27[8];

  v4 = v3;
  v6 = *(_QWORD *)(v3 + 40);
  if (!*(_QWORD *)(v6 + 16))
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    v26 = -1;
    v25 = 0;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v9 = sub_2445A14D8(a1, a2);
  if ((v10 & 1) == 0)
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    v26 = -1;
    v25 = 0;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_244595384((uint64_t *)(*(_QWORD *)(v6 + 56) + (v9 << 6)), (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (v26 == 255)
  {
LABEL_8:
    result = sub_2445816D0((uint64_t)&v21, &qword_257372428);
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_WORD *)(a3 + 56) = -256;
    return result;
  }
  sub_244583264((uint64_t)&v21, (uint64_t)v27);
  sub_244595384(v27, (uint64_t)&v21);
  if ((v26 & 1) != 0)
  {
    sub_2445A1B6C((uint64_t)&v21);
    sub_2445A1B98(v4, (uint64_t)&v21);
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v19 = 0x3A6567617373654DLL;
    v20 = 0xE900000000000020;
    v12 = *((_QWORD *)&v22 + 1);
    v13 = v23;
    __swift_project_boxed_opaque_existential_1(&v21, *((uint64_t *)&v22 + 1));
    MessageSchemaDescribing.asPublic()(v12, v13, v16);
    v15 = v17;
    v14 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(v15);
    sub_244578644((uint64_t)v16);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  else
  {
    sub_2445A1B6C((uint64_t)v27);
    return sub_2445832A0((uint64_t)&v21, a3);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int16 v13;

  result = SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)&v9);
  if (HIBYTE(v13) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)&v9, &qword_257372420);
  }
  else
  {
    if ((v13 & 0xFF00) == 0xA00)
    {
      v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 16) = v6;
      *(_OWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 48) = v12;
      return result;
    }
    sub_244583318((uint64_t)&v9);
  }
  sub_2445A1B98(v3, (uint64_t)&v9);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)&v10 + 1);
  v7 = v11;
  __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_2445A055C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[64];

  v3 = *a3;
  v4 = a3[1];
  sub_244577E10(a1, (uint64_t)v6, &qword_257372420);
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v6, v3, v4);
}

uint64_t SchematizedDataComposer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7[8];
  _BYTE v8[64];
  _OWORD v9[3];
  uint64_t v10;
  __int16 v11;
  char v12;

  sub_244577E10(a1, (uint64_t)v8, &qword_257372420);
  if (v8[57] == 255)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v12 = -1;
    v11 = 0;
  }
  else
  {
    sub_2445832A0((uint64_t)v8, (uint64_t)v7);
    sub_2445832DC(v7, (uint64_t)v9);
    v12 = 0;
    sub_244583318((uint64_t)v7);
  }
  sub_2445A6324((uint64_t)v9, a2, a3);
  return sub_2445816D0(a1, &qword_257372420);
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;
  char v9;

  if (a1)
  {
    v9 = 1;
  }
  else
  {
    v7 = 0u;
    v6 = 0u;
    v5 = 0u;
    v9 = -1;
    v8 = 0;
  }
  v4 = a1;
  return sub_2445A6324((uint64_t)&v4, a2, a3);
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[56];
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;
  __int16 v16;
  char v17;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v13 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v6, 0);
      v7 = a1 + 32;
      v8 = v13;
      do
      {
        sub_2445A5B7C(v7, (uint64_t)v12);
        sub_2445A5B7C((uint64_t)v12, (uint64_t)v14);
        HIBYTE(v16) = 10;
        sub_244575334((uint64_t)v12);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2445A1818(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v13;
        }
        v10 = *(_QWORD *)(v8 + 16);
        v9 = *(_QWORD *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          sub_2445A1818(v9 > 1, v10 + 1, 1);
          v8 = v13;
        }
        *(_QWORD *)(v8 + 16) = v10 + 1;
        sub_2445832A0((uint64_t)v14, v8 + (v10 << 6) + 32);
        v7 += 56;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v14[0] = v8;
    v17 = 1;
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v17 = -1;
    v16 = 0;
  }
  return sub_2445A6324((uint64_t)v14, a2, a3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  _OWORD v36[2];
  uint64_t v37;
  _BYTE v38[40];
  char v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;

  v4 = v3;
  v8 = v3[3];
  v9 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v8);
  MessageSchemaDescribing.asPublic()(v8, v9, (uint64_t *)&v30);
  v10 = *((_QWORD *)&v31 + 1);
  v11 = v32;
  __swift_project_boxed_opaque_existential_1(&v30, *((uint64_t *)&v31 + 1));
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v38, a2, a3, v10, v11);
  v12 = *(_OWORD *)&v38[24];
  __swift_project_boxed_opaque_existential_1(v38, *(uint64_t *)&v38[24]);
  FieldSchemaDescribing.asPublic()(v12, *((uint64_t *)&v12 + 1), v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  sub_244578644((uint64_t)&v30);
  v13 = v41;
  v14 = v42;
  __swift_project_boxed_opaque_existential_1(v40, v41);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v14 + 56))(&v30, v13, v14);
  TypeSchemaDescription.asPublic()((uint64_t)v38);
  v15 = sub_2445752C0((uint64_t)&v30);
  if (v39)
  {
    if (v39 == 2
      && *(_QWORD *)v38 == 13
      && (v18 = vorrq_s8(*(int8x16_t *)&v38[8], *(int8x16_t *)&v38[24]),
          !*(_QWORD *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))))
    {
      if (a1)
      {
        v19 = *(_QWORD *)(a1 + 16);
        if (v19)
        {
          v29 = a3;
          *(_QWORD *)&v36[0] = MEMORY[0x24BEE4AF8];
          sub_2445A1818(0, v19, 0);
          v20 = *(_QWORD *)&v36[0];
          v21 = (uint64_t *)(a1 + 40);
          do
          {
            v22 = *v21;
            *(_QWORD *)&v30 = *(v21 - 1);
            *((_QWORD *)&v30 + 1) = v22;
            HIBYTE(v34) = 8;
            *(_QWORD *)&v36[0] = v20;
            v24 = *(_QWORD *)(v20 + 16);
            v23 = *(_QWORD *)(v20 + 24);
            swift_bridgeObjectRetain();
            if (v24 >= v23 >> 1)
            {
              sub_2445A1818(v23 > 1, v24 + 1, 1);
              v20 = *(_QWORD *)&v36[0];
            }
            v21 += 2;
            *(_QWORD *)(v20 + 16) = v24 + 1;
            sub_2445832A0((uint64_t)&v30, v20 + (v24 << 6) + 32);
            --v19;
          }
          while (v19);
          swift_bridgeObjectRelease();
          a3 = v29;
        }
        else
        {
          swift_bridgeObjectRelease();
          v20 = MEMORY[0x24BEE4AF8];
        }
        *(_QWORD *)&v30 = v20;
        v35 = 1;
      }
      else
      {
        v33 = 0;
        v32 = 0u;
        v31 = 0u;
        v30 = 0u;
        v35 = -1;
        v34 = 0;
      }
      sub_2445A6324((uint64_t)&v30, a2, a3);
      return sub_2445AB61C((uint64_t)v40);
    }
    else
    {
      *(_QWORD *)&v30 = 0;
      *((_QWORD *)&v30 + 1) = 0xE000000000000000;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v30 = 0x73696D2065707954;
      *((_QWORD *)&v30 + 1) = 0xEF203A686374616DLL;
      v27 = v4[3];
      v26 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v27);
      (*(void (**)(uint64_t))(*(_QWORD *)(v26 + 8) + 8))(v27);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      sub_2445C42D0();
      result = sub_2445C454C();
      __break(1u);
    }
  }
  else
  {
    v36[0] = *(_OWORD *)v38;
    v36[1] = *(_OWORD *)&v38[16];
    v37 = *(_QWORD *)&v38[32];
    if (a1
      && (MEMORY[0x24BDAC7A8](v15, v16),
          v28[2] = v36,
          v17 = sub_2445A661C((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t *))sub_2445AB650, (uint64_t)v28, a1), swift_bridgeObjectRelease(), v17))
    {
      *(_QWORD *)&v30 = v17;
      v35 = 1;
    }
    else
    {
      v33 = 0;
      v32 = 0u;
      v31 = 0u;
      v30 = 0u;
      v35 = -1;
      v34 = 0;
    }
    sub_2445A6324((uint64_t)&v30, a2, a3);
    sub_2445AB61C((uint64_t)v40);
    return sub_2445786B8((uint64_t)v36);
  }
  return result;
}

{
  int64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;
  __int16 v16;
  char v17;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v13 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v6, 0);
      v7 = v13;
      v8 = (unint64_t *)(a1 + 40);
      do
      {
        v9 = *v8;
        *(_QWORD *)&v14[0] = *(v8 - 1);
        *((_QWORD *)&v14[0] + 1) = v9;
        HIBYTE(v16) = 9;
        sub_244574770(*(uint64_t *)&v14[0], v9);
        v11 = *(_QWORD *)(v13 + 16);
        v10 = *(_QWORD *)(v13 + 24);
        if (v11 >= v10 >> 1)
          sub_2445A1818(v10 > 1, v11 + 1, 1);
        v8 += 2;
        *(_QWORD *)(v13 + 16) = v11 + 1;
        sub_2445832A0((uint64_t)v14, v13 + (v11 << 6) + 32);
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v7 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v14[0] = v7;
    v17 = 1;
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v17 = -1;
    v16 = 0;
  }
  return sub_2445A6324((uint64_t)v14, a2, a3);
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int16 v55;
  char v56;
  _OWORD v57[2];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;

  v4 = v3;
  if (!a1)
  {
    v54 = 0;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v55 = -256;
    return SchematizedDataComposer.subscript.setter((uint64_t)&v51, a2, a3);
  }
  v8 = v3[3];
  v9 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  MessageSchemaDescribing.asPublic()(v8, v9, (uint64_t *)&v51);
  v10 = *((_QWORD *)&v52 + 1);
  v11 = v53;
  __swift_project_boxed_opaque_existential_1(&v51, *((uint64_t *)&v52 + 1));
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(&v59, a2, a3, v10, v11);
  v12 = *((_QWORD *)&v60 + 1);
  v13 = v61;
  __swift_project_boxed_opaque_existential_1(&v59, *((uint64_t *)&v60 + 1));
  FieldSchemaDescribing.asPublic()(v12, v13, v63);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
  sub_244578644((uint64_t)&v51);
  v14 = v64;
  v15 = v65;
  __swift_project_boxed_opaque_existential_1(v63, v64);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v15 + 56))(&v51, v14, v15);
  TypeSchemaDescription.asPublic()((uint64_t)&v59);
  v16 = sub_2445752C0((uint64_t)&v51);
  if (!v62)
  {
    v57[0] = v59;
    v57[1] = v60;
    v58 = v61;
    MEMORY[0x24BDAC7A8](v16, v17);
    v50[2] = v57;
    v18 = sub_2445A695C((void (*)(_QWORD *__return_ptr, uint64_t *))sub_2445AB6AC, (uint64_t)v50, a1);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v51 = v18;
    v56 = 1;
    sub_2445A6324((uint64_t)&v51, a2, a3);
    sub_2445AB61C((uint64_t)v63);
    return sub_2445786B8((uint64_t)v57);
  }
  if (v62 == 2)
  {
    if (!(*((_QWORD *)&v60 + 1) | v61 | (unint64_t)v59 | (unint64_t)v60 | *((_QWORD *)&v59 + 1)))
      goto LABEL_21;
    v20 = *((_QWORD *)&v60 + 1) | v61 | v60 | *((_QWORD *)&v59 + 1);
    if ((_QWORD)v59 == 1 && !v20)
    {
LABEL_9:
      v21 = *(_QWORD *)(a1 + 16);
      if (v21)
      {
        *(_QWORD *)&v59 = MEMORY[0x24BEE4AF8];
        sub_2445A1818(0, v21, 0);
        v22 = 0;
        v23 = v59;
        do
        {
          LODWORD(v51) = *(_QWORD *)(a1 + 8 * v22 + 32);
          HIBYTE(v55) = 1;
          *(_QWORD *)&v59 = v23;
          v25 = *(_QWORD *)(v23 + 16);
          v24 = *(_QWORD *)(v23 + 24);
          if (v25 >= v24 >> 1)
          {
            sub_2445A1818(v24 > 1, v25 + 1, 1);
            v23 = v59;
          }
          ++v22;
          *(_QWORD *)(v23 + 16) = v25 + 1;
          sub_2445832A0((uint64_t)&v51, v23 + (v25 << 6) + 32);
        }
        while (v21 != v22);
LABEL_56:
        swift_bridgeObjectRelease();
LABEL_58:
        *(_QWORD *)&v51 = v23;
        v56 = 1;
        sub_2445A6324((uint64_t)&v51, a2, a3);
        return sub_2445AB61C((uint64_t)v63);
      }
      goto LABEL_57;
    }
    if ((_QWORD)v59 == 2 && !v20)
      goto LABEL_21;
    if ((_QWORD)v59 == 3 && !v20)
      goto LABEL_9;
    if ((_QWORD)v59 == 4 && !v20)
    {
LABEL_21:
      v26 = *(_QWORD *)(a1 + 16);
      if (v26)
      {
        *(_QWORD *)&v59 = MEMORY[0x24BEE4AF8];
        sub_2445A1818(0, v26, 0);
        v27 = 0;
        v23 = v59;
        do
        {
          LODWORD(v51) = *(_QWORD *)(a1 + 8 * v27 + 32);
          HIBYTE(v55) = 0;
          *(_QWORD *)&v59 = v23;
          v29 = *(_QWORD *)(v23 + 16);
          v28 = *(_QWORD *)(v23 + 24);
          if (v29 >= v28 >> 1)
          {
            sub_2445A1818(v28 > 1, v29 + 1, 1);
            v23 = v59;
          }
          ++v27;
          *(_QWORD *)(v23 + 16) = v29 + 1;
          sub_2445832A0((uint64_t)&v51, v23 + (v29 << 6) + 32);
        }
        while (v26 != v27);
        goto LABEL_56;
      }
LABEL_57:
      swift_bridgeObjectRelease();
      v23 = MEMORY[0x24BEE4AF8];
      goto LABEL_58;
    }
    if ((_QWORD)v59 == 5 && !v20)
      goto LABEL_43;
    if ((_QWORD)v59 == 6 && !v20)
    {
LABEL_35:
      v30 = *(_QWORD *)(a1 + 16);
      if (v30)
      {
        *(_QWORD *)&v59 = MEMORY[0x24BEE4AF8];
        sub_2445A1818(0, v30, 0);
        v31 = 0;
        v23 = v59;
        do
        {
          *(_QWORD *)&v51 = *(_QWORD *)(a1 + 8 * v31 + 32);
          HIBYTE(v55) = 3;
          *(_QWORD *)&v59 = v23;
          v32 = *(_QWORD *)(v23 + 16);
          v33 = *(_QWORD *)(v23 + 24);
          v34 = v32 + 1;
          if (v32 >= v33 >> 1)
          {
            v35 = *(_QWORD *)(v23 + 16);
            sub_2445A1818(v33 > 1, v32 + 1, 1);
            v32 = v35;
            v23 = v59;
          }
          ++v31;
          *(_QWORD *)(v23 + 16) = v34;
          sub_2445832A0((uint64_t)&v51, v23 + (v32 << 6) + 32);
        }
        while (v30 != v31);
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if ((_QWORD)v59 == 7 && !v20)
      goto LABEL_43;
    if ((_QWORD)v59 == 8 && !v20)
      goto LABEL_35;
    if ((_QWORD)v59 == 9 && !v20)
    {
LABEL_43:
      v36 = *(_QWORD *)(a1 + 16);
      if (v36)
      {
        *(_QWORD *)&v59 = MEMORY[0x24BEE4AF8];
        sub_2445A1818(0, v36, 0);
        v37 = 0;
        v23 = v59;
        do
        {
          *(_QWORD *)&v51 = *(_QWORD *)(a1 + 8 * v37 + 32);
          HIBYTE(v55) = 2;
          *(_QWORD *)&v59 = v23;
          v38 = *(_QWORD *)(v23 + 16);
          v39 = *(_QWORD *)(v23 + 24);
          v40 = v38 + 1;
          if (v38 >= v39 >> 1)
          {
            v41 = *(_QWORD *)(v23 + 16);
            sub_2445A1818(v39 > 1, v38 + 1, 1);
            v38 = v41;
            v23 = v59;
          }
          ++v37;
          *(_QWORD *)(v23 + 16) = v40;
          sub_2445832A0((uint64_t)&v51, v23 + (v38 << 6) + 32);
        }
        while (v36 != v37);
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if ((_QWORD)v59 == 12 && !v20)
    {
      v42 = *(_QWORD *)(a1 + 16);
      if (v42)
      {
        *(_QWORD *)&v57[0] = MEMORY[0x24BEE4AF8];
        sub_2445A1818(0, v42, 0);
        v43 = 0;
        v23 = *(_QWORD *)&v57[0];
        do
        {
          LOBYTE(v51) = *(_QWORD *)(a1 + 8 * v43 + 32) != 0;
          HIBYTE(v55) = 6;
          *(_QWORD *)&v57[0] = v23;
          v44 = *(_QWORD *)(v23 + 16);
          v45 = *(_QWORD *)(v23 + 24);
          v46 = v44 + 1;
          if (v44 >= v45 >> 1)
          {
            v47 = *(_QWORD *)(v23 + 16);
            sub_2445A1818(v45 > 1, v44 + 1, 1);
            v44 = v47;
            v23 = *(_QWORD *)&v57[0];
          }
          ++v43;
          *(_QWORD *)(v23 + 16) = v46;
          sub_2445832A0((uint64_t)&v51, v23 + (v44 << 6) + 32);
        }
        while (v42 != v43);
        goto LABEL_56;
      }
      goto LABEL_57;
    }
  }
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = 0xE000000000000000;
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v51 = 0x73696D2065707954;
  *((_QWORD *)&v51 + 1) = 0xEF203A686374616DLL;
  v49 = v4[3];
  v48 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v49);
  (*(void (**)(uint64_t))(*(_QWORD *)(v48 + 8) + 8))(v49);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  __int16 v15;
  char v16;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v12 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v6, 0);
      v7 = 0;
      v8 = v12;
      do
      {
        LOBYTE(v13[0]) = *(_BYTE *)(a1 + v7 + 32);
        HIBYTE(v15) = 6;
        v10 = *(_QWORD *)(v12 + 16);
        v9 = *(_QWORD *)(v12 + 24);
        if (v10 >= v9 >> 1)
          sub_2445A1818(v9 > 1, v10 + 1, 1);
        ++v7;
        *(_QWORD *)(v12 + 16) = v10 + 1;
        sub_2445832A0((uint64_t)v13, v12 + (v10 << 6) + 32);
      }
      while (v6 != v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v13[0] = v8;
    v16 = 1;
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v16 = -1;
    v15 = 0;
  }
  return sub_2445A6324((uint64_t)v13, a2, a3);
}

{
  return sub_2445A9B68(a1, a2, a3, 0);
}

{
  return sub_2445A9F14(a1, a2, a3, 2);
}

{
  return sub_2445A9B68(a1, a2, a3, 1);
}

{
  return sub_2445A9F14(a1, a2, a3, 3);
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  __int16 v15;
  char v16;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v12 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v6, 0);
      v7 = 0;
      v8 = v12;
      do
      {
        LODWORD(v13[0]) = *(_DWORD *)(a1 + 4 * v7 + 32);
        HIBYTE(v15) = 4;
        v10 = *(_QWORD *)(v12 + 16);
        v9 = *(_QWORD *)(v12 + 24);
        if (v10 >= v9 >> 1)
          sub_2445A1818(v9 > 1, v10 + 1, 1);
        ++v7;
        *(_QWORD *)(v12 + 16) = v10 + 1;
        sub_2445832A0((uint64_t)v13, v12 + (v10 << 6) + 32);
      }
      while (v6 != v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v13[0] = v8;
    v16 = 1;
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v16 = -1;
    v15 = 0;
  }
  return sub_2445A6324((uint64_t)v13, a2, a3);
}

{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  __int16 v15;
  char v16;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v12 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v6, 0);
      v7 = 0;
      v8 = v12;
      do
      {
        *(_QWORD *)&v13[0] = *(_QWORD *)(a1 + 8 * v7 + 32);
        HIBYTE(v15) = 5;
        v10 = *(_QWORD *)(v12 + 16);
        v9 = *(_QWORD *)(v12 + 24);
        if (v10 >= v9 >> 1)
          sub_2445A1818(v9 > 1, v10 + 1, 1);
        ++v7;
        *(_QWORD *)(v12 + 16) = v10 + 1;
        sub_2445832A0((uint64_t)v13, v12 + (v10 << 6) + 32);
      }
      while (v6 != v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v13[0] = v8;
    v16 = 1;
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v16 = -1;
    v15 = 0;
  }
  return sub_2445A6324((uint64_t)v13, a2, a3);
}

{
  return sub_2445B48C0(a1, a2, a3, 0);
}

{
  _OWORD v7[3];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  __int16 v15;

  sub_244577E10(a1, (uint64_t)&v9, &qword_2573722A8);
  if (*((_QWORD *)&v10 + 1))
  {
    v7[0] = v9;
    v7[1] = v10;
    v7[2] = v11;
    v8 = v12;
    sub_2445A5B7C((uint64_t)v7, (uint64_t)v13);
    HIBYTE(v15) = 10;
    sub_244575334((uint64_t)v7);
  }
  else
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v15 = -256;
  }
  SchematizedDataComposer.subscript.setter((uint64_t)v13, a2, a3);
  return sub_2445816D0(a1, &qword_2573722A8);
}

{
  return sub_2445B48C0(a1, a2, a3, 1);
}

{
  return sub_2445B48C0(a1, a2, a3, 4);
}

void (*SchematizedDataComposer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x98uLL);
  *a1 = v7;
  v7[17] = a3;
  v7[18] = v3;
  v7[16] = a2;
  SchematizedDataComposer.subscript.getter(a2, a3, (uint64_t)v7);
  return sub_2445A06D4;
}

{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x88uLL);
  *a1 = v7;
  v7[15] = a3;
  v7[16] = v3;
  v7[14] = a2;
  SchematizedDataComposer.subscript.getter(a2, a3, (uint64_t)v7);
  return sub_2445B2D44;
}

void sub_2445A06D4(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[17];
    v4 = v2[16];
    sub_244577E10(*a1, (uint64_t)(v2 + 8), &qword_257372420);
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter((uint64_t)(v2 + 8), v4, v3);
    sub_2445816D0((uint64_t)v2, &qword_257372420);
  }
  else
  {
    v5 = v2[17];
    v6 = v2[16];
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter((uint64_t)v2, v6, v5);
  }
  free(v2);
}

uint64_t SchematizedDataComposer.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  unsigned __int8 v24;
  uint64_t v25[8];

  v3 = v2;
  v4 = *(_QWORD *)(v2 + 40);
  if (!*(_QWORD *)(v4 + 16))
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    v24 = -1;
    v23 = 0;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v7 = sub_2445A14D8(a1, a2);
  if ((v8 & 1) == 0)
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    v24 = -1;
    v23 = 0;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_244595384((uint64_t *)(*(_QWORD *)(v4 + 56) + (v7 << 6)), (uint64_t)&v19);
  swift_bridgeObjectRelease();
  if (v24 == 255)
  {
LABEL_8:
    sub_2445816D0((uint64_t)&v19, &qword_257372428);
    return 0;
  }
  sub_244583264((uint64_t)&v19, (uint64_t)v25);
  sub_244595384(v25, (uint64_t)&v19);
  if (v24 == 1)
  {
    sub_2445A1B6C((uint64_t)v25);
    return v19;
  }
  else
  {
    sub_2445A1B6C((uint64_t)&v19);
    sub_2445A1B98(v3, (uint64_t)&v19);
    v14[0] = 0;
    v14[1] = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v17 = 0x3A6567617373654DLL;
    v18 = 0xE900000000000020;
    v10 = *((_QWORD *)&v20 + 1);
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
    MessageSchemaDescribing.asPublic()(v10, v11, v14);
    v13 = v15;
    v12 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 8))(v13);
    sub_244578644((uint64_t)v14);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

{
  return sub_2445A7E90(a1, a2, (uint64_t)sub_2445AB5DC, (uint64_t (*)(uint64_t))sub_2445A63FC);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  char v11;

  v11 = 17;
  v5 = SchematizedDataComposer.subscript.getter(a1, a2);
  if (!v5)
    return 0;
  v7 = v5;
  MEMORY[0x24BDAC7A8](v5, v6);
  v10[2] = &v11;
  v10[3] = v2;
  v10[4] = a1;
  v10[5] = a2;
  v8 = sub_2445A6518((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t *))sub_2445AB5FC, (uint64_t)v10, v7);
  swift_bridgeObjectRelease();
  return v8;
}

{
  return sub_2445A7E90(a1, a2, (uint64_t)sub_2445AB66C, (uint64_t (*)(uint64_t))sub_2445A6748);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v5 = SchematizedDataComposer.subscript.getter(a1, a2);
  if (!v5)
    return 0;
  v7 = v5;
  MEMORY[0x24BDAC7A8](v5, v6);
  v10[2] = v2;
  v10[3] = a1;
  v10[4] = a2;
  v8 = sub_2445A6854((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_2445AB68C, (uint64_t)v10, v7);
  swift_bridgeObjectRelease();
  return v8;
}

{
  return sub_2445A7E90(a1, a2, (uint64_t)sub_2445AB714, (uint64_t (*)(uint64_t))sub_2445A6A68);
}

{
  return sub_2445A9524(a1, a2, (uint64_t)sub_2445AB734, (uint64_t)sub_2445A1930, (uint64_t (*)(uint64_t))sub_2445A6B6C);
}

{
  return sub_2445A9524(a1, a2, (uint64_t)sub_2445AB754, (uint64_t)sub_2445A194C, (uint64_t (*)(uint64_t))sub_2445A6C78);
}

{
  return sub_2445A9524(a1, a2, (uint64_t)sub_2445AB774, (uint64_t)sub_2445A1968, (uint64_t (*)(uint64_t))sub_2445A6B6C);
}

{
  return sub_2445A9524(a1, a2, (uint64_t)sub_2445AB794, (uint64_t)sub_2445A1984, (uint64_t (*)(uint64_t))sub_2445A6C78);
}

{
  return sub_2445A7E90(a1, a2, (uint64_t)sub_2445AB7B4, (uint64_t (*)(uint64_t))sub_2445A6D84);
}

{
  return sub_2445A7E90(a1, a2, (uint64_t)sub_2445AB7D4, (uint64_t (*)(uint64_t))sub_2445A6E90);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  __int128 v13;
  _BYTE v14[25];
  char v15;
  _BYTE v16[64];
  _BYTE v17[64];

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v17);
  sub_244577E10((uint64_t)v17, (uint64_t)v16, &qword_257372420);
  if (v16[57] == 255)
  {
    sub_2445816D0((uint64_t)v17, &qword_257372420);
    v3 = 0;
LABEL_10:
    sub_2445816D0((uint64_t)v16, &qword_257372420);
    return v3;
  }
  sub_244577E10((uint64_t)v16, (uint64_t)&v12, &qword_257372420);
  if (v15 == 7)
  {
    *(_OWORD *)&v11[9] = *(_OWORD *)&v14[9];
    v10 = v13;
    *(_OWORD *)v11 = *(_OWORD *)v14;
    v9 = v12;
    v3 = *(_QWORD *)&v14[8];
    if ((v14[24] & 1) != 0)
    {
      v4 = *((_QWORD *)&v10 + 1);
      v5 = *(_QWORD *)v11;
      __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
      v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, v4, v5);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_2445ABBD0((uint64_t)&v9);
    sub_2445816D0((uint64_t)v17, &qword_257372420);
    goto LABEL_10;
  }
  if (v15 == 8)
  {
    sub_2445816D0((uint64_t)v17, &qword_257372420);
    v3 = v12;
    goto LABEL_10;
  }
  sub_244583318((uint64_t)&v12);
  sub_2445A1B98(v2, (uint64_t)&v12);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v9 = 0x73696D2065707954;
  *((_QWORD *)&v9 + 1) = 0xEF203A686374616DLL;
  v8 = *((_QWORD *)&v13 + 1);
  v7 = *(_QWORD *)v14;
  __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)&v6);
  if (HIBYTE(v9) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)&v6, &qword_257372420);
  }
  else
  {
    if ((v9 & 0xFF00) == 0x900)
      return v6;
    sub_244583318((uint64_t)&v6);
  }
  sub_2445A1B98(v2, (uint64_t)&v6);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v5 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(&v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  _BYTE v22[25];
  __int128 v23;
  __int128 v24;
  _BYTE v25[25];
  char v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  _BYTE v31[72];

  v5 = v2;
  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v31);
  sub_244577E10((uint64_t)v31, (uint64_t)v27, &qword_257372420);
  if (HIBYTE(v30) < 0xFFu)
  {
    sub_244577E10((uint64_t)v27, (uint64_t)&v23, &qword_257372420);
    switch(v26)
    {
      case 0:
        v6 = (int)v23;
        goto LABEL_10;
      case 1:
        v6 = v23;
        goto LABEL_10;
      case 2:
      case 3:
        v6 = v23;
        goto LABEL_10;
      case 6:
        sub_2445816D0((uint64_t)v31, &qword_257372420);
        v6 = v23;
        break;
      case 7:
        *(_OWORD *)&v22[9] = *(_OWORD *)&v25[9];
        v20 = v23;
        v21 = v24;
        *(_OWORD *)v22 = *(_OWORD *)v25;
        v6 = *(_QWORD *)&v25[8];
        if ((v25[24] & 1) == 0)
        {
          v7 = *(_QWORD *)&v22[16];
          v8 = *((_QWORD *)&v21 + 1);
          v9 = *(_QWORD *)v22;
          __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
          v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40);
          swift_bridgeObjectRetain();
          v10 = v19(v6, v7, v8, v9);
          sub_24457ED14(v6, v7, 0);
          v6 = v10;
        }
        sub_2445ABBD0((uint64_t)&v20);
LABEL_10:
        sub_2445816D0((uint64_t)v31, &qword_257372420);
        break;
      default:
        sub_244583318((uint64_t)&v23);
        sub_2445A1B98(v2, (uint64_t)&v23);
        sub_2445C44D4();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v20 = 0x73696D2065707954;
        *((_QWORD *)&v20 + 1) = 0xEF203A686374616DLL;
        v13 = *((_QWORD *)&v24 + 1);
        v12 = *(_QWORD *)v25;
        __swift_project_boxed_opaque_existential_1(&v23, *((uint64_t *)&v24 + 1));
        (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 8))(v13);
        v15 = v14;
        sub_2445C42D0();
        swift_bridgeObjectRelease();
        sub_2445C42D0();
        sub_2445C42D0();
        while (1)
        {
          sub_2445C454C();
          __break(1u);
          sub_24457ED14(v3, v4, 0);
          sub_2445ABBD0((uint64_t)&v20);
          sub_2445816D0((uint64_t)v27, &qword_257372420);
          sub_2445A1B98(v5, (uint64_t)v27);
          *(_QWORD *)&v23 = 0;
          *((_QWORD *)&v23 + 1) = 0xE000000000000000;
          sub_2445C44D4();
          sub_2445C42D0();
          *(_QWORD *)&v20 = v15;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
          sub_2445C4534();
          sub_2445C42D0();
          v17 = v28;
          v16 = v29;
          __swift_project_boxed_opaque_existential_1(v27, v28);
          (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 8) + 8))(v17);
          v15 = v18;
          sub_2445C42D0();
          swift_bridgeObjectRelease();
          sub_2445C42D0();
          sub_2445C42D0();
        }
    }
  }
  else
  {
    sub_2445816D0((uint64_t)v31, &qword_257372420);
    v6 = 0;
  }
  sub_2445816D0((uint64_t)v27, &qword_257372420);
  return v6;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v6);
  if (HIBYTE(v9) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v6, &qword_257372420);
  }
  else
  {
    if ((v9 & 0xFF00) == 0x600)
      return LOBYTE(v6[0]);
    sub_244583318((uint64_t)v6);
  }
  sub_2445A1B98(v2, (uint64_t)v6);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v5 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v7);
  if (HIBYTE(v10) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v7, &qword_257372420);
  }
  else
  {
    if (v10 < 0x100u)
    {
      v3 = LODWORD(v7[0]);
      LOBYTE(v7[0]) = 0;
      return v3;
    }
    sub_244583318((uint64_t)v7);
  }
  sub_2445A1B98(v2, (uint64_t)v7);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v6 = v8;
  v5 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v6);
  if (HIBYTE(v9) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v6, &qword_257372420);
  }
  else
  {
    if ((v9 & 0xFF00) == 0x200)
      return v6[0];
    sub_244583318((uint64_t)v6);
  }
  sub_2445A1B98(v2, (uint64_t)v6);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v5 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v7);
  if (HIBYTE(v10) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v7, &qword_257372420);
  }
  else
  {
    if ((v10 & 0xFF00) == 0x100)
    {
      v3 = LODWORD(v7[0]);
      LOBYTE(v7[0]) = 0;
      return v3;
    }
    sub_244583318((uint64_t)v7);
  }
  sub_2445A1B98(v2, (uint64_t)v7);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v6 = v8;
  v5 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v6);
  if (HIBYTE(v9) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v6, &qword_257372420);
  }
  else
  {
    if ((v9 & 0xFF00) == 0x300)
      return v6[0];
    sub_244583318((uint64_t)v6);
  }
  sub_2445A1B98(v2, (uint64_t)v6);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v5 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v7);
  if (HIBYTE(v10) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v7, &qword_257372420);
  }
  else
  {
    if ((v10 & 0xFF00) == 0x400)
    {
      v3 = LODWORD(v7[0]);
      LOBYTE(v7[0]) = 0;
      return v3;
    }
    sub_244583318((uint64_t)v7);
  }
  sub_2445A1B98(v2, (uint64_t)v7);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v6 = v8;
  v5 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v6);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;

  SchematizedDataComposer.subscript.getter(a1, a2, (uint64_t)v6);
  if (HIBYTE(v9) >= 0xFFu)
  {
    sub_2445816D0((uint64_t)v6, &qword_257372420);
  }
  else
  {
    if ((v9 & 0xFF00) == 0x500)
      return v6[0];
    sub_244583318((uint64_t)v6);
  }
  sub_2445A1B98(v2, (uint64_t)v6);
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  v5 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_2445A09C8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  char v12;

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  if (*a1)
  {
    v12 = 1;
  }
  else
  {
    v10 = 0u;
    v9 = 0u;
    v8 = 0u;
    v12 = -1;
    v11 = 0;
  }
  v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_2445A6324((uint64_t)&v7, v3, v4);
}

uint64_t (*SchematizedDataComposer.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = SchematizedDataComposer.subscript.getter(a2, a3);
  return sub_2445A0AE8;
}

{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = SchematizedDataComposer.subscript.getter(a2, a3);
  return sub_2445A7E70;
}

{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = SchematizedDataComposer.subscript.getter(a2, a3);
  return sub_2445A90E0;
}

uint64_t sub_2445A0AE8(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int16 v12;
  char v13;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v13 = 1;
    }
    else
    {
      v11 = 0u;
      v10 = 0u;
      v9 = 0u;
      v13 = -1;
      v12 = 0;
    }
    v3 = a1[2];
    v4 = a1[1];
    v8 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2445A6324((uint64_t)&v8, v4, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v2)
    {
      v13 = 1;
    }
    else
    {
      v11 = 0u;
      v10 = 0u;
      v9 = 0u;
      v13 = -1;
      v12 = 0;
    }
    v6 = a1[2];
    v7 = a1[1];
    v8 = v2;
    swift_bridgeObjectRetain();
    return sub_2445A6324((uint64_t)&v8, v7, v6);
  }
}

uint64_t sub_2445A0BE0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  _OWORD v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int16 v57;
  unsigned __int8 v58;
  uint64_t v59[9];
  uint64_t v60;

  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v13 = v12(v9, v11);
  v15 = *a2;
  if (!*(_QWORD *)(*a2 + 16) || (v16 = sub_2445A14D8(v13, v14), (v17 & 1) == 0))
  {
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    v58 = -1;
    v57 = 0;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_244595384((uint64_t *)(*(_QWORD *)(v15 + 56) + (v16 << 6)), (uint64_t)&v53);
  swift_bridgeObjectRelease();
  if (v58 == 255)
  {
LABEL_10:
    result = sub_2445816D0((uint64_t)&v53, &qword_257372428);
    goto LABEL_11;
  }
  v50 = v12;
  sub_244583264((uint64_t)&v53, (uint64_t)v59);
  v19 = a1[3];
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18) & 1) != 0)
  {
    sub_244595384(v59, (uint64_t)&v53);
    if ((v58 & 1) != 0)
    {
      v60 = v53;
      if (*(_QWORD *)(v53 + 16))
      {
        sub_2445832DC((uint64_t *)(v53 + 32), (uint64_t)v52);
        sub_2445A35B4(0, 1);
        v20 = v60;
        if (*(_QWORD *)(v60 + 16))
        {
          v21 = v50(v9, v11);
          v23 = v22;
          *(_QWORD *)&v53 = v20;
          v58 = 1;
LABEL_27:
          sub_2445A6324((uint64_t)&v53, v21, v23);
          sub_2445A1B6C((uint64_t)v59);
          return sub_2445832A0((uint64_t)v52, a5);
        }
        swift_bridgeObjectRelease();
LABEL_26:
        v21 = v50(v9, v11);
        v23 = v45;
        v56 = 0;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        v58 = -1;
        v57 = 0;
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
      v43 = v50(v9, v11);
      v56 = 0;
      v54 = 0u;
      v55 = 0u;
      v53 = 0u;
      v58 = -1;
      v57 = 0;
      sub_2445A6324((uint64_t)&v53, v43, v44);
      result = sub_2445A1B6C((uint64_t)v59);
LABEL_11:
      *(_QWORD *)(a5 + 48) = 0;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_WORD *)(a5 + 56) = -256;
      return result;
    }
    goto LABEL_21;
  }
  v25 = a1[3];
  v26 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
  if ((v27 & 0x100000000) != 0)
  {
LABEL_20:
    sub_244595384(v59, (uint64_t)&v53);
    if (v58 != 1)
    {
      sub_2445832A0((uint64_t)&v53, (uint64_t)v52);
      goto LABEL_26;
    }
LABEL_21:
    sub_2445A1B6C((uint64_t)&v53);
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = 0xE000000000000000;
    sub_2445C44D4();
    v52[0] = v53;
    sub_2445C42D0();
    v32 = a4[3];
    v33 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v32);
    MessageSchemaDescribing.asPublic()(v32, v33, (uint64_t *)&v53);
    v35 = *((_QWORD *)&v54 + 1);
    v34 = v55;
    __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)(v34 + 8) + 8))(v35);
    sub_244578644((uint64_t)&v53);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    v50(v9, v11);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    v36 = *((_QWORD *)&v52[0] + 1);
    sub_2445A1B28();
    swift_allocError();
    *(_QWORD *)v37 = *(_QWORD *)&v52[0];
    v38 = 3;
LABEL_29:
    *(_QWORD *)(v37 + 8) = v36;
    *(_BYTE *)(v37 + 16) = v38;
    swift_willThrow();
    return sub_2445A1B6C((uint64_t)v59);
  }
  v28 = v27;
  if (v27 << 32 < (uint64_t)0xFFFFFFFF00000001 || (v29 = v27, (int)v27 >= *(_QWORD *)(*(_QWORD *)a3 + 16)))
  {
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v52[0] = 0x3A6567617373654DLL;
    *((_QWORD *)&v52[0] + 1) = 0xE900000000000020;
    v39 = a4[3];
    v40 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v39);
    MessageSchemaDescribing.asPublic()(v39, v40, (uint64_t *)&v53);
    v42 = *((_QWORD *)&v54 + 1);
    v41 = v55;
    __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)(v41 + 8) + 8))(v42);
    sub_244578644((uint64_t)&v53);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    v50(v9, v11);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    LODWORD(v53) = v28;
    sub_2445C45AC();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    v36 = 0xE900000000000020;
    sub_2445A1B28();
    swift_allocError();
    *(_QWORD *)v37 = 0x3A6567617373654DLL;
    v38 = 1;
    goto LABEL_29;
  }
  sub_244577E10(*(_QWORD *)a3 + 40 * (int)v27 + 32, (uint64_t)&v53, &qword_2573724A8);
  v30 = *((_QWORD *)&v54 + 1);
  sub_2445816D0((uint64_t)&v53, &qword_2573724A8);
  if (!v30)
  {
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v52[0] = 0x3A6567617373654DLL;
    *((_QWORD *)&v52[0] + 1) = 0xE900000000000020;
    v46 = a4[3];
    v47 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v46);
    MessageSchemaDescribing.asPublic()(v46, v47, (uint64_t *)&v53);
    v49 = *((_QWORD *)&v54 + 1);
    v48 = v55;
    __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)(v48 + 8) + 8))(v49);
    sub_244578644((uint64_t)&v53);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    v50(v9, v11);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    LODWORD(v53) = v28;
    sub_2445C45AC();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    v36 = 0xE900000000000020;
    sub_2445A1B28();
    swift_allocError();
    *(_QWORD *)v37 = 0x3A6567617373654DLL;
    v38 = 2;
    goto LABEL_29;
  }
  *(_QWORD *)&v55 = 0;
  v53 = 0u;
  v54 = 0u;
  v31 = *(_QWORD **)a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)a3 = v31;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_2445A335C(v31);
    v31 = (_QWORD *)result;
    *(_QWORD *)a3 = result;
  }
  if (v28 < v31[2])
  {
    sub_2445A356C((uint64_t)&v53, (uint64_t)&v31[5 * v29 + 4]);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

unint64_t sub_2445A14D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2445C4690();
  sub_2445C42A0();
  v4 = sub_2445C46B4();
  return sub_2445A1574(a1, a2, v4);
}

unint64_t sub_2445A153C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2445C4684();
  return sub_2445A1654(a1, v2);
}

unint64_t sub_2445A1574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2445C45B8() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2445C45B8() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_2445A1654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_2445A16F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445B9464(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A170C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445B92FC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1728(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445B9600(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A1744(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445B97A0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A1760(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445B9940(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A177C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445B9AE4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1798(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445B9C4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A17B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573724A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2445A17FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2445A0BE0(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32), a2);
}

uint64_t sub_2445A1818(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445B9DEC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1834(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445B9F50(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1850(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445BA0D8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A186C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445BA278(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A1888(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445BA41C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A18A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2445BA5C0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2445A18C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BA764(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A18DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BA8D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A18F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAA38(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1914(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAA44(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1930(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAB90(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A194C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAB9C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1968(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BABA8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A1984(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAD0C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A19A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAE70(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A19BC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2445BAFCC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2445A19D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2445BC4D0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_2445A2910(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_2445A1A44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257372440);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_2445A3370((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_244577DCC();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

unint64_t sub_2445A1B28()
{
  unint64_t result;

  result = qword_257372568;
  if (!qword_257372568)
  {
    result = MEMORY[0x249512E54](&unk_2445C6BB0, &type metadata for SchematizedDataComposerError);
    atomic_store(result, (unint64_t *)&qword_257372568);
  }
  return result;
}

uint64_t sub_2445A1B6C(uint64_t a1)
{
  destroy for SchematizedDataComposer.Container(a1);
  return a1;
}

uint64_t sub_2445A1B98(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_2445A1BE8@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return SchematizedDataComposer.subscript.getter(*a1, a1[1], a2);
}

uint64_t sub_2445A1C10()
{
  return 0;
}

uint64_t sub_2445A1C20@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_2445A1C50()
{
  return 0;
}

uint64_t destroy for SchematizedDataComposer(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SchematizedDataComposer(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for SchematizedDataComposer(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SchematizedDataComposer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematizedDataComposer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematizedDataComposer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematizedDataComposer()
{
  return &type metadata for SchematizedDataComposer;
}

uint64_t destroy for SchematizedDataComposer.Container(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 58);
  if (v2 >= 2)
    v2 = *(_DWORD *)result + 2;
  if (v2 == 1)
    return swift_bridgeObjectRelease();
  v3 = *(unsigned __int8 *)(result + 57);
  while (2)
  {
    switch(v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return result;
      case 7:
        __swift_destroy_boxed_opaque_existential_1(result);
        result = sub_24457ED14(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
        break;
      case 8:
        return swift_bridgeObjectRelease();
      case 9:
        result = sub_2445747FC(*(_QWORD *)result, *(_QWORD *)(result + 8));
        break;
      case 10:
        __swift_destroy_boxed_opaque_existential_1(result);
        result = sub_2445747FC(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
        break;
      default:
        v3 = *(_DWORD *)result + 11;
        continue;
    }
    break;
  }
  return result;
}

uint64_t initializeWithCopy for SchematizedDataComposer.Container(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *((unsigned __int8 *)a2 + 58);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 58) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 57);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_BYTE *)(a1 + 57) = 0;
          goto LABEL_20;
        case 1:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 1;
          goto LABEL_19;
        case 2:
          *(_QWORD *)a1 = *a2;
          v6 = 2;
          goto LABEL_19;
        case 3:
          *(_QWORD *)a1 = *a2;
          v6 = 3;
          goto LABEL_19;
        case 4:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 4;
          goto LABEL_19;
        case 5:
          *(_QWORD *)a1 = *a2;
          v6 = 5;
          goto LABEL_19;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v6 = 6;
          goto LABEL_19;
        case 7:
          v7 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 24) = v7;
          (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
          v8 = a2[5];
          v9 = a2[6];
          v10 = *((_BYTE *)a2 + 56);
          sub_24457F1E0(v8, v9, v10);
          *(_QWORD *)(a1 + 40) = v8;
          *(_QWORD *)(a1 + 48) = v9;
          *(_BYTE *)(a1 + 56) = v10;
          v6 = 7;
          goto LABEL_19;
        case 8:
          v11 = a2[1];
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 8) = v11;
          *(_BYTE *)(a1 + 57) = 8;
          swift_bridgeObjectRetain();
          goto LABEL_20;
        case 9:
          v13 = *a2;
          v12 = a2[1];
          sub_244574770(*a2, v12);
          *(_QWORD *)a1 = v13;
          *(_QWORD *)(a1 + 8) = v12;
          v6 = 9;
          goto LABEL_19;
        case 10:
          v14 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 24) = v14;
          (**(void (***)(uint64_t, uint64_t *))(v14 - 8))(a1, a2);
          v16 = a2[5];
          v15 = a2[6];
          sub_244574770(v16, v15);
          *(_QWORD *)(a1 + 40) = v16;
          *(_QWORD *)(a1 + 48) = v15;
          v6 = 10;
LABEL_19:
          *(_BYTE *)(a1 + 57) = v6;
LABEL_20:
          *(_BYTE *)(a1 + 58) = 0;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
  }
  return a1;
}

uint64_t assignWithCopy for SchematizedDataComposer.Container(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 58);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
LABEL_5:
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = *(unsigned __int8 *)(a1 + 57);
      while (2)
      {
        switch(v5)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            break;
          case 7:
            __swift_destroy_boxed_opaque_existential_1(a1);
            sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
            break;
          case 8:
            goto LABEL_5;
          case 9:
            sub_2445747FC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
            break;
          case 10:
            __swift_destroy_boxed_opaque_existential_1(a1);
            sub_2445747FC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
            break;
          default:
            v5 = *(_DWORD *)a1 + 11;
            continue;
        }
        break;
      }
    }
    v6 = *(unsigned __int8 *)(a2 + 58);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 58) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = *(unsigned __int8 *)(a2 + 57);
      while (2)
      {
        switch(v7)
        {
          case 0:
            *(_DWORD *)a1 = *(_DWORD *)a2;
            *(_BYTE *)(a1 + 57) = 0;
            goto LABEL_31;
          case 1:
            *(_DWORD *)a1 = *(_DWORD *)a2;
            v8 = 1;
            goto LABEL_30;
          case 2:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            v8 = 2;
            goto LABEL_30;
          case 3:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            v8 = 3;
            goto LABEL_30;
          case 4:
            *(_DWORD *)a1 = *(_DWORD *)a2;
            v8 = 4;
            goto LABEL_30;
          case 5:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            v8 = 5;
            goto LABEL_30;
          case 6:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v8 = 6;
            goto LABEL_30;
          case 7:
            v9 = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(a1 + 24) = v9;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
            v10 = *(_QWORD *)(a2 + 40);
            v11 = *(_QWORD *)(a2 + 48);
            v12 = *(_BYTE *)(a2 + 56);
            sub_24457F1E0(v10, v11, v12);
            *(_QWORD *)(a1 + 40) = v10;
            *(_QWORD *)(a1 + 48) = v11;
            *(_BYTE *)(a1 + 56) = v12;
            v8 = 7;
            goto LABEL_30;
          case 8:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
            *(_BYTE *)(a1 + 57) = 8;
            swift_bridgeObjectRetain();
            goto LABEL_31;
          case 9:
            v14 = *(_QWORD *)a2;
            v13 = *(_QWORD *)(a2 + 8);
            sub_244574770(v14, v13);
            *(_QWORD *)a1 = v14;
            *(_QWORD *)(a1 + 8) = v13;
            v8 = 9;
            goto LABEL_30;
          case 10:
            v15 = *(_QWORD *)(a2 + 24);
            *(_QWORD *)(a1 + 24) = v15;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
            v17 = *(_QWORD *)(a2 + 40);
            v16 = *(_QWORD *)(a2 + 48);
            sub_244574770(v17, v16);
            *(_QWORD *)(a1 + 40) = v17;
            *(_QWORD *)(a1 + 48) = v16;
            v8 = 10;
LABEL_30:
            *(_BYTE *)(a1 + 57) = v8;
LABEL_31:
            *(_BYTE *)(a1 + 58) = 0;
            break;
          default:
            v7 = *(_DWORD *)a2 + 11;
            continue;
        }
        break;
      }
    }
  }
  return a1;
}

__n128 __swift_memcpy59_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SchematizedDataComposer.Container(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 58);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
LABEL_5:
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = *(unsigned __int8 *)(a1 + 57);
      while (2)
      {
        switch(v5)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            break;
          case 7:
            __swift_destroy_boxed_opaque_existential_1(a1);
            sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
            break;
          case 8:
            goto LABEL_5;
          case 9:
            sub_2445747FC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
            break;
          case 10:
            __swift_destroy_boxed_opaque_existential_1(a1);
            sub_2445747FC(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
            break;
          default:
            v5 = *(_DWORD *)a1 + 11;
            continue;
        }
        break;
      }
    }
    v6 = *(unsigned __int8 *)(a2 + 58);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 1;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a2 + 57);
      while (2)
      {
        switch(v8)
        {
          case 0:
            v9 = 0;
            *(_DWORD *)a1 = *(_DWORD *)a2;
            break;
          case 1:
            *(_DWORD *)a1 = *(_DWORD *)a2;
            v9 = 1;
            break;
          case 2:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            v9 = 2;
            break;
          case 3:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            v9 = 3;
            break;
          case 4:
            *(_DWORD *)a1 = *(_DWORD *)a2;
            v9 = 4;
            break;
          case 5:
            *(_QWORD *)a1 = *(_QWORD *)a2;
            v9 = 5;
            break;
          case 6:
            *(_BYTE *)a1 = *(_BYTE *)a2;
            v9 = 6;
            break;
          case 7:
            v10 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v10;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
            v9 = 7;
            break;
          case 8:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v9 = 8;
            break;
          case 9:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v9 = 9;
            break;
          case 10:
            v11 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v11;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
            v9 = 10;
            break;
          default:
            v8 = *(_DWORD *)a2 + 11;
            continue;
        }
        break;
      }
      v7 = 0;
      *(_BYTE *)(a1 + 57) = v9;
    }
    *(_BYTE *)(a1 + 58) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematizedDataComposer.Container(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 59))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 58);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SchematizedDataComposer.Container(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 43) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 59) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 59) = 0;
    if (a2)
      *(_BYTE *)(result + 58) = -(char)a2;
  }
  return result;
}

uint64_t sub_2445A2580(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 58);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_2445A259C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 58) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SchematizedDataComposer.Container()
{
  return &type metadata for SchematizedDataComposer.Container;
}

uint64_t sub_2445A25DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SchematizedDataComposerError(uint64_t a1)
{
  return sub_2445A2604(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_2445A2604(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s17PoirotSchematizer28SchematizedDataComposerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2445A25DC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SchematizedDataComposerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2445A25DC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2445A2604(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SchematizedDataComposerError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2445A2604(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematizedDataComposerError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematizedDataComposerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2445A2788(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SchematizedDataComposerError()
{
  return &type metadata for SchematizedDataComposerError;
}

uint64_t sub_2445A27A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 32 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257372448);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 1;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 5);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445A2910(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_2445A2FF8(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_2445A30C4((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_2445BC280((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_2445C43A8();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2445C45B8();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2445C45B8()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2445BBEB0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_2445BBEB0((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_2445A30C4((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2445C45B8() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_2445A2FF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_2445C45B8(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2445A30C4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_2445C45B8() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_2445C45B8() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_2445BBFA8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

_QWORD *sub_2445A335C(_QWORD *a1)
{
  return sub_244585E44(0, a1[2], 0, a1);
}

uint64_t sub_2445A3370(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_2445A356C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573724A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2445A35B4(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_244585D04(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = a1 << 6;
  v13 = (char *)&v4[8 * a1 + 4];
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v15 = v4[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)&v4[8 * a2 + 4];
    v19 = v17 << 6;
    if (v12 != a2 << 6 || v13 >= &v18[v19])
      result = (uint64_t)memmove(v13, v18, v19);
    v20 = v4[2];
    v16 = __OFADD__(v20, v8);
    v21 = v20 - v7;
    if (!v16)
    {
      v4[2] = v21;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445A3728(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = sub_2445C44C8();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          sub_2445C44EC();
        }
        v10 = sub_2445C44F8();
      }
      v12 = v11;
      LODWORD(v17[0]) = v10;
      v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0)
        break;
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        v14 = 1;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  return v14 & 1;
}

void sub_2445A3864()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2573725A8);
  *(_QWORD *)&v2 = sub_2445C4258();
  *((_QWORD *)&v2 + 1) = v1;
  sub_2445C42D0();
  sub_2445A4CA4(v0, &v2);
  __asm { BR              X10 }
}

uint64_t sub_2445A38F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_2445A3B74(0xD000000000000012, 0x80000002445C56E0, v3, v4, v5, v0);
  swift_bridgeObjectRelease();
  return v1;
}

void sub_2445A3B28()
{
  sub_2445C44D4();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  JUMPOUT(0x2445A3B04);
}

uint64_t sub_2445A3B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = sub_2445C4318();
  MEMORY[0x249512860](32, 0xE100000000000000, v7);
  swift_bridgeObjectRetain();
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2445C42D0();
  sub_2445C42D0();
  sub_2445C42D0();
  swift_bridgeObjectRelease();
  sub_2445C42D0();
  sub_2445C42D0();
  return a6;
}

void sub_2445A3C88()
{
  __int128 *v0;
  _OWORD v1[3];

  sub_2445A4CA4(v0, v1);
  sub_2445A3864();
}

uint64_t sub_2445A3CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v0 = sub_2445C3CAC();
  v1 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x24BDAC7A8](v0, v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v3, v6);
  v9 = (char *)&v12 - v8;
  __swift_allocate_value_buffer(v7, qword_257372570);
  __swift_project_value_buffer(v0, (uint64_t)qword_257372570);
  sub_2445C3C94();
  sub_2445C3C70();
  sub_2445C3C88();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v5, v0);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v0);
}

uint64_t sub_2445A3DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v0 = sub_2445C3CAC();
  v1 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x24BDAC7A8](v0, v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v3, qword_257372588);
  __swift_project_value_buffer(v0, (uint64_t)qword_257372588);
  if (qword_257372298 != -1)
    swift_once();
  __swift_project_value_buffer(v0, (uint64_t)qword_257372570);
  sub_2445C3C7C();
  sub_2445C3C88();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v5, v0);
}

char *sub_2445A3E90(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  unsigned __int8 v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned __int8 v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;

  v3 = v2;
  v6 = sub_2445C4438();
  v84 = *(_QWORD *)(v6 - 8);
  v85 = v6;
  MEMORY[0x24BDAC7A8](v6, v7);
  v83 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2445C3CAC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v14)
  {
    sub_2445A47A4();
    swift_allocError();
    *(_OWORD *)v62 = 0u;
    *(_OWORD *)(v62 + 16) = 0u;
    *(_QWORD *)(v62 + 32) = 0;
    *(_BYTE *)(v62 + 40) = 6;
    swift_willThrow();
    return v3;
  }
  v89 = v2;
  v15 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  swift_bridgeObjectRetain();
  v78 = a1;
  v16 = (void *)sub_2445C4210();
  v79 = a2;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v15, sel_initWithString_, v16);

  objc_msgSend(v17, sel_setCharactersToBeSkipped_, 0);
  v88 = (char *)MEMORY[0x24BEE4AF8];
  v82 = *MEMORY[0x24BDD0458];
  v81 = v10;
  while (1)
  {
    v3 = (char *)sub_2445C4414();
    if (qword_2573722A0 != -1)
      swift_once();
    __swift_project_value_buffer(v9, (uint64_t)qword_257372588);
    v20 = sub_2445C442C();
    if (!v21)
    {
      swift_bridgeObjectRelease();
      sub_2445A47A4();
      swift_allocError();
      v66 = v79;
      *(_QWORD *)v67 = v78;
      *(_QWORD *)(v67 + 8) = v66;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
      *(_QWORD *)(v67 + 16) = v3;
      *(_BYTE *)(v67 + 40) = 0;
      goto LABEL_46;
    }
    v22 = v21;
    v87 = v20;
    v23 = sub_2445C433C();
    v25 = v24;
    if (qword_257372298 != -1)
      swift_once();
    v26 = __swift_project_value_buffer(v9, (uint64_t)qword_257372570);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v26, v9);
    MEMORY[0x24BDAC7A8](v27, v28);
    *(&v77 - 2) = (uint64_t)v13;
    swift_bridgeObjectRetain();
    v29 = v89;
    v30 = sub_2445A3728((uint64_t (*)(_QWORD *))sub_2445A47E8, (uint64_t)(&v77 - 4), v23, v25);
    v89 = v29;
    swift_bridgeObjectRelease_n();
    v31 = *(void (**)(char *, uint64_t))(v10 + 8);
    v31(v13, v9);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_2445A47A4();
      swift_allocError();
      *(_QWORD *)v68 = v87;
      *(_QWORD *)(v68 + 8) = v22;
      v69 = v79;
      *(_QWORD *)(v68 + 16) = v78;
      *(_QWORD *)(v68 + 24) = v69;
      *(_QWORD *)(v68 + 32) = v3;
      v70 = 1;
      goto LABEL_45;
    }
    v32 = objc_msgSend(v17, sel_isAtEnd);
    v86 = v22;
    if ((v32 & 1) != 0)
    {
LABEL_24:
      v43 = 0;
      v51 = 1;
      v3 = v88;
      goto LABEL_27;
    }
    v33 = objc_msgSend(v17, sel_string);
    sub_2445C421C();

    sub_2445C4414();
    v34 = sub_2445C433C();
    v36 = v35;
    swift_bridgeObjectRelease();
    if (v34 == 91 && v36 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = sub_2445C45B8();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
        goto LABEL_24;
    }
    v38 = objc_msgSend(v17, sel_string);
    sub_2445C421C();

    sub_2445C4414();
    sub_2445C42C4();
    swift_bridgeObjectRelease();
    sub_2445C4420();
    sub_2445C3C64();
    sub_2445C442C();
    swift_bridgeObjectRelease();
    v3 = v13;
    v39 = v9;
    v31(v13, v9);
    v80 = sub_2445C4414();
    v40 = v83;
    v41 = v84;
    v42 = v85;
    (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, v82, v85);
    v43 = sub_2445C4444();
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
    if ((v45 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445A47A4();
      swift_allocError();
      v72 = v79;
      *(_QWORD *)v68 = v78;
      *(_QWORD *)(v68 + 8) = v72;
      *(_QWORD *)(v68 + 24) = 0;
      *(_QWORD *)(v68 + 32) = 0;
      *(_QWORD *)(v68 + 16) = v80;
      v70 = 2;
      goto LABEL_45;
    }
    if (v43 < 0)
      break;
    v13 = v3;
    sub_2445C3C64();
    sub_2445C442C();
    swift_bridgeObjectRelease();
    v9 = v39;
    v31(v3, v39);
    v46 = objc_msgSend(v17, sel_isAtEnd);
    v10 = v81;
    v3 = v88;
    if ((v46 & 1) != 0)
      goto LABEL_41;
    v47 = objc_msgSend(v17, sel_string);
    sub_2445C421C();

    sub_2445C4414();
    v48 = sub_2445C433C();
    v50 = v49;
    swift_bridgeObjectRelease();
    if (v48 == 93 && v50 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v52 = sub_2445C45B8();
      swift_bridgeObjectRelease();
      if ((v52 & 1) == 0)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v71 = v79;
        swift_bridgeObjectRetain();
        v3 = (char *)sub_2445C4414();
        sub_2445A47A4();
        swift_allocError();
        *(_QWORD *)v64 = v78;
        *(_QWORD *)(v64 + 8) = v71;
        *(_QWORD *)(v64 + 24) = 0;
        *(_QWORD *)(v64 + 32) = 0;
        *(_QWORD *)(v64 + 16) = v3;
        v65 = 4;
        goto LABEL_42;
      }
    }
    v53 = objc_msgSend(v17, sel_string);
    sub_2445C421C();

    sub_2445C4414();
    sub_2445C42C4();
    swift_bridgeObjectRelease();
    sub_2445C4420();
    v51 = 0;
LABEL_27:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = (char *)sub_244585AEC(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v55 = *((_QWORD *)v3 + 2);
    v54 = *((_QWORD *)v3 + 3);
    if (v55 >= v54 >> 1)
      v3 = (char *)sub_244585AEC((_QWORD *)(v54 > 1), v55 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v55 + 1;
    v56 = &v3[32 * v55];
    v57 = v86;
    *((_QWORD *)v56 + 4) = v87;
    *((_QWORD *)v56 + 5) = v57;
    *((_QWORD *)v56 + 6) = v43;
    v56[56] = v51;
    if ((objc_msgSend(v17, sel_isAtEnd) & 1) != 0)
    {

      return v3;
    }
    v88 = v3;
    if ((objc_msgSend(v17, sel_isAtEnd) & 1) != 0)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      v63 = v79;
      swift_bridgeObjectRetain();
      v3 = (char *)sub_2445C4414();
      sub_2445A47A4();
      swift_allocError();
      *(_QWORD *)v64 = v78;
      *(_QWORD *)(v64 + 8) = v63;
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0;
      *(_QWORD *)(v64 + 16) = v3;
      v65 = 5;
LABEL_42:
      *(_BYTE *)(v64 + 40) = v65;
      goto LABEL_47;
    }
    v58 = objc_msgSend(v17, sel_string);
    sub_2445C421C();

    sub_2445C4414();
    v59 = sub_2445C433C();
    v61 = v60;
    swift_bridgeObjectRelease();
    if (v59 == 46 && v61 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = sub_2445C45B8();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
        goto LABEL_37;
    }
    v19 = objc_msgSend(v17, sel_string);
    sub_2445C421C();

    sub_2445C4414();
    sub_2445C42C4();
    swift_bridgeObjectRelease();
    sub_2445C4420();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445A47A4();
  swift_allocError();
  v74 = v78;
  v73 = v79;
  *(_QWORD *)v68 = v43;
  *(_QWORD *)(v68 + 8) = v74;
  v75 = v80;
  *(_QWORD *)(v68 + 16) = v73;
  *(_QWORD *)(v68 + 24) = v75;
  *(_QWORD *)(v68 + 32) = 0;
  v70 = 3;
LABEL_45:
  *(_BYTE *)(v68 + 40) = v70;
LABEL_46:
  swift_bridgeObjectRetain();
LABEL_47:
  swift_willThrow();

  return v3;
}

unint64_t sub_2445A47A4()
{
  unint64_t result;

  result = qword_2573725A0;
  if (!qword_2573725A0)
  {
    result = MEMORY[0x249512E54](&unk_2445C6C7C, &type metadata for PropertyPathUtil.Error);
    atomic_store(result, (unint64_t *)&qword_2573725A0);
  }
  return result;
}

uint64_t sub_2445A47E8()
{
  return sub_24457C440() & 1;
}

uint64_t sub_2445A4804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t result;

  if (a6 <= 5u)
  {
    if (((1 << a6) & 0x35) == 0 && a6 == 1)
      swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PropertyPathUtil.Error(uint64_t a1)
{
  return sub_2445A4880(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t sub_2445A4880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t result;

  if (a6 <= 5u)
  {
    if (((1 << a6) & 0x35) == 0 && a6 == 1)
      swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_2445A4804(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_2445A4804(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_2445A4880(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_2445A4880(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyPathUtil.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyPathUtil.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_2445A4AC8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 5u)
    return *(unsigned __int8 *)(a1 + 40);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_2445A4AE0(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PropertyPathUtil.Error()
{
  return &type metadata for PropertyPathUtil.Error;
}

uint64_t initializeWithCopy for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyPathElement(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyPathElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyPathElement()
{
  return &type metadata for PropertyPathElement;
}

_OWORD *sub_2445A4CA4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

ValueMetadata *type metadata accessor for PropertyPathUtil()
{
  return &type metadata for PropertyPathUtil;
}

uint64_t sub_2445A4CCC(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(_QWORD *, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  void (*v34)(_QWORD *);
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD v41[4];
  uint64_t v42;

  v34 = a1;
  v35 = a2;
  v3 = sub_2445C3D6C();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](v3, v5);
  v39 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v8);
  v38 = (char *)&v31 - v9;
  v10 = sub_2445C3D9C();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428];
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573725B0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v12;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v31(v15, v2, v10);
  sub_24457EA78(&qword_2573725B8, v11, MEMORY[0x24BDCF458]);
  v32 = v15;
  sub_2445C4360();
  v20 = &v19[*(int *)(v16 + 36)];
  v40 = v4;
  v36 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v37 = v19;
  v21 = v38;
  v22 = v39;
  while (1)
  {
    v36(v21, v20, v3);
    sub_24457EA78(&qword_2573725C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
    sub_2445C43E4();
    sub_24457EA78(&qword_2573725C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF320], MEMORY[0x24BDCF330]);
    v23 = sub_2445C4204();
    v24 = *(void (**)(char *, uint64_t))(v40 + 8);
    v24(v22, v3);
    v24(v21, v3);
    if ((v23 & 1) != 0)
      break;
    v25 = (void (*)(_QWORD *, _QWORD))sub_2445C43FC();
    v27 = *v26;
    v25(v41, 0);
    v28 = v32;
    v31(v32, (uint64_t)v19, v10);
    sub_2445C43F0();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v10);
    v41[0] = v27;
    v29 = v42;
    v34(v41);
    if (v29)
      break;
    v42 = 0;
  }
  return sub_2445816D0((uint64_t)v19, &qword_2573725B0);
}

uint64_t sub_2445A4FA8@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t *v27;
  char v28[16];
  unint64_t *v29;
  _QWORD *v30;
  _QWORD v31[5];
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v27 = a2;
  v4 = sub_2445C3D9C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BEE4AF8];
  v10 = sub_2445777D4(MEMORY[0x24BEE4AF8]);
  v34 = sub_244575C70(v9);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  v29 = &v34;
  v30 = a1;
  sub_2445A4CCC((void (*)(_QWORD *))sub_2445A5B64, (uint64_t)v28);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    sub_2445747E8(0, 0xF000000000000000);
  }
  else
  {
    v13 = v27;
    v26 = v10;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v14 = v34;
    v15 = a1[3];
    v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v15);
    v17 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 24);
    swift_bridgeObjectRetain_n();
    v17(v31, v15, v16);
    if (v31[3])
    {
      v18 = v32;
      v19 = v33;
      sub_244574770(v32, v33);
      sub_244575334((uint64_t)v31);
    }
    else
    {
      sub_2445816D0((uint64_t)v31, &qword_2573722A8);
      v18 = 0;
      v19 = 0xF000000000000000;
    }
    v20 = v13;
    sub_24457475C(v18, v19);
    sub_2445747E8(0, 0xF000000000000000);
    v22 = a1[3];
    v21 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v22);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v22, v21);
    v24 = sub_2445A55F0(v23);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_24457475C(v18, v19);
    sub_2445747E8(v18, v19);
    swift_bridgeObjectRelease();
    *v20 = v14;
    v20[1] = v18;
    v20[2] = v19;
    v20[3] = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_2445747E8(v18, v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t EnumManifest.init(values:options:valueOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  sub_2445777D4(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  sub_24457475C(a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24457475C(a2, a3);
  swift_bridgeObjectRetain();
  sub_2445747E8(a2, a3);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_2445747E8(a2, a3);
  result = swift_bridgeObjectRelease();
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t EnumManifest.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EnumManifest.values.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*EnumManifest.values.modify())()
{
  return nullsub_1;
}

uint64_t EnumManifest.options.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_24457475C(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t EnumManifest.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_2445747E8(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*EnumManifest.options.modify())()
{
  return nullsub_1;
}

uint64_t EnumManifest.valueOptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EnumManifest.valueOptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*EnumManifest.valueOptions.modify())()
{
  return nullsub_1;
}

uint64_t EnumManifest.nextAvailableValue.getter()
{
  uint64_t *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = 0;
  v2 = *v0;
  result = 1;
  v4 = 1 << *(_BYTE *)(*v0 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v7 = *(_QWORD *)(v2 + 64);
  v6 = v2 + 64;
  v8 = v5 & v7;
  v9 = (unint64_t)(v4 + 63) >> 6;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v1 << 6); ; i = __clz(__rbit64(v13)) + (v1 << 6))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*v0 + 56) + 8 * i);
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v17 > result)
      result = v17;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v1 + 1;
    if (__OFADD__(v1, 1))
      goto LABEL_30;
    if (v12 >= v9)
      return result;
    v13 = *(_QWORD *)(v6 + 8 * v12);
    ++v1;
    if (!v13)
    {
      v1 = v12 + 1;
      if (v12 + 1 >= v9)
        return result;
      v13 = *(_QWORD *)(v6 + 8 * v1);
      if (!v13)
      {
        v1 = v12 + 2;
        if (v12 + 2 >= v9)
          return result;
        v13 = *(_QWORD *)(v6 + 8 * v1);
        if (!v13)
        {
          v1 = v12 + 3;
          if (v12 + 3 >= v9)
            return result;
          v13 = *(_QWORD *)(v6 + 8 * v1);
          if (!v13)
          {
            v1 = v12 + 4;
            if (v12 + 4 >= v9)
              return result;
            v13 = *(_QWORD *)(v6 + 8 * v1);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_22:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 5;
  if (v14 >= v9)
    return result;
  v13 = *(_QWORD *)(v6 + 8 * v14);
  if (v13)
  {
    v1 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v1 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v1 >= v9)
      return result;
    v13 = *(_QWORD *)(v6 + 8 * v1);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2445A5528(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *a1;
  v6 = a3[3];
  v7 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, v6, v7);
  if (!v3)
  {
    v10 = result;
    v11 = v9;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *a2;
    *a2 = 0x8000000000000000;
    sub_244594210(v5, v10, v11, isUniquelyReferenced_nonNull_native);
    *a2 = v13;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2445A55F0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  _BYTE v24[40];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257372300);
  result = sub_2445C4558();
  v3 = (_QWORD *)result;
  v4 = 0;
  v27 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v23 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * i);
    sub_2445A5B7C(*(_QWORD *)(v27 + 56) + 56 * i, (uint64_t)v24);
    v16 = v25;
    v17 = v26;
    sub_244574770(v25, v26);
    result = sub_244575334((uint64_t)v24);
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v15;
    v18 = (uint64_t *)(v3[7] + 16 * i);
    *v18 = v16;
    v18[1] = v17;
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v21;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v23)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v22 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v23)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v22 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v23)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v22 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v23)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v22 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v23)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v22 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t _s17PoirotSchematizer12EnumManifestV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  if ((sub_244588844(*a1, *a2) & 1) == 0)
    return 0;
  if (v3 >> 60 == 15)
  {
    if (v6 >> 60 == 15)
      return sub_2445889D8(v4, v7);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    sub_24457475C(v2, v3);
    sub_24457475C(v5, v6);
    sub_2445747E8(v2, v3);
    sub_2445747E8(v5, v6);
    return 0;
  }
  sub_24457475C(v2, v3);
  sub_24457475C(v5, v6);
  sub_24458C824(v2, v3);
  v9 = v8;
  sub_2445747E8(v5, v6);
  sub_2445747E8(v2, v3);
  if ((v9 & 1) != 0)
    return sub_2445889D8(v4, v7);
  return 0;
}

uint64_t destroy for EnumManifest(uint64_t a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >> 60 != 15)
    sub_2445747FC(*(_QWORD *)(a1 + 8), v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EnumManifest(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *a2;
  v4 = a2 + 1;
  v5 = a2[2];
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_244574770(*v4, v5);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EnumManifest(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 1;
  v5 = a2[2];
  if (a1[2] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_244574770(*v4, a2[2]);
      v8 = a1[1];
      v9 = a1[2];
      a1[1] = v7;
      a1[2] = v5;
      sub_2445747FC(v8, v9);
      goto LABEL_8;
    }
    sub_2445750B4((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_244574770(*v4, a2[2]);
  a1[1] = v6;
  a1[2] = v5;
LABEL_8:
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for EnumManifest(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2 + 1;
  v5 = a1[2];
  if (v5 >> 60 != 15)
  {
    v6 = a2[2];
    if (v6 >> 60 != 15)
    {
      v7 = a1[1];
      a1[1] = *v4;
      a1[2] = v6;
      sub_2445747FC(v7, v5);
      goto LABEL_6;
    }
    sub_2445750B4((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
LABEL_6:
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EnumManifest()
{
  return &type metadata for EnumManifest;
}

uint64_t sub_2445A5B64(uint64_t *a1)
{
  uint64_t v1;

  return sub_2445A5528(a1, *(uint64_t **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_2445A5B7C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SchematizedData(a2, a1);
  return a2;
}

uint64_t static ProtoFirstOfHelper.getFirst(ofFields:fromDada:atFieldPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = sub_2445A5BD8(a1, a2, a3, a4);
  if (v4)
    return v6;
  return result;
}

uint64_t sub_2445A5BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a3 - a2;
  if (a2)
    v7 = a3 - a2;
  else
    v7 = 0;
  v35 = 0;
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_82;
  v9 = *(_QWORD *)(a4 + 16);
  if (!v9)
    goto LABEL_52;
  v10 = 0;
  v11 = a4 + 32;
  v12 = a2 + 1;
  v33 = a4 + 32;
  while (2)
  {
    v34 = v10;
    v5 = *(_QWORD *)(v11 + 8 * v10);
    while (1)
    {
      v13 = v35;
      if ((v35 & 0x8000000000000000) == 0 && v35 >= v7)
        return 0;
      if (a2)
      {
        v14 = v6;
        if (v35 >= v6)
          goto LABEL_49;
      }
      else
      {
        if ((v35 & 0x8000000000000000) == 0)
          goto LABEL_49;
        v14 = 0;
      }
      v15 = *(unsigned __int8 *)(a2 + v35);
      v16 = v35 + 1;
      if (*(char *)(a2 + v35) < 0)
      {
        if (v16 >= v14)
          goto LABEL_49;
        v15 &= 0x7Fu;
        v17 = 7;
        while (1)
        {
          v16 = v13 + 2;
          v15 |= (unint64_t)(*(_BYTE *)(v12 + v13) & 0x7F) << v17;
          if ((*(_BYTE *)(v12 + v13) & 0x80) == 0)
            break;
          if (v16 < v14)
          {
            ++v13;
            v18 = v17 > 0x38;
            v17 += 7;
            if (!v18)
              continue;
          }
          goto LABEL_49;
        }
        v35 = v13 + 2;
        if (v15 > 0xFFFFFFFE)
          goto LABEL_49;
      }
      else
      {
        ++v35;
      }
      if (v15 < 8 || (v15 & 6) == 6)
        goto LABEL_49;
      if (v5 == v15 >> 3)
        break;
      sub_244581834(v15);
      if (v4)
        return v5;
    }
    if (sub_2445735B0(v15) != 2)
    {
      sub_2445C44D4();
      sub_2445C42D0();
      sub_2445735B0(v15);
      sub_2445C4534();
      sub_244578600();
      swift_allocError();
      *(_QWORD *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0xE000000000000000;
      *(_BYTE *)(v32 + 16) = 5;
LABEL_50:
      swift_willThrow();
      return v5;
    }
    if (a2)
    {
      v20 = v6;
      v11 = v33;
      if (v16 >= v6)
      {
LABEL_49:
        sub_24457FE80();
        swift_allocError();
        *(_QWORD *)v24 = 1;
        *(_OWORD *)(v24 + 8) = 0u;
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 56) = 0u;
        *(_OWORD *)(v24 + 72) = 0u;
        *(_OWORD *)(v24 + 88) = 0u;
        *(_WORD *)(v24 + 104) = 512;
        goto LABEL_50;
      }
    }
    else
    {
      v11 = v33;
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_49;
      v20 = 0;
    }
    v21 = *(unsigned __int8 *)(a2 + v16);
    v22 = v16 + 1;
    if (*(char *)(a2 + v16) < 0)
    {
      if (v22 >= v20)
        goto LABEL_49;
      v21 &= 0x7Fu;
      v23 = 7;
      while (1)
      {
        v22 = v16 + 2;
        v21 |= (unint64_t)(*(_BYTE *)(v12 + v16) & 0x7F) << v23;
        if ((*(_BYTE *)(v12 + v16) & 0x80) == 0)
          break;
        if (v22 < v20)
        {
          ++v16;
          v27 = v23 >= 0x39;
          v23 += 7;
          if (!v27)
            continue;
        }
        goto LABEL_49;
      }
    }
    v35 = v22;
    if (v22 < 0)
      goto LABEL_82;
    v7 = v21 + v22;
    if (!__CFADD__(v21, v22))
    {
      v10 = v34 + 1;
      if (v34 + 1 != v9)
        continue;
LABEL_52:
      while (1)
      {
        v26 = v35;
        v27 = v35 >= 0 && v35 >= v7;
        if (v27)
          return 0;
        if (a2)
        {
          v28 = v6;
          if (v35 >= v6)
            goto LABEL_49;
        }
        else
        {
          if ((v35 & 0x8000000000000000) == 0)
            goto LABEL_49;
          v28 = 0;
        }
        v29 = *(unsigned __int8 *)(a2 + v35);
        if (*(char *)(a2 + v35) < 0)
        {
          if (v35 + 1 >= v28)
            goto LABEL_49;
          v29 &= 0x7Fu;
          v30 = 7;
          while (1)
          {
            v29 |= (unint64_t)(*(_BYTE *)(a2 + 1 + v26) & 0x7F) << v30;
            if ((*(_BYTE *)(a2 + 1 + v26) & 0x80) == 0)
              break;
            if (v26 + 2 < v28)
            {
              ++v26;
              v18 = v30 > 0x38;
              v30 += 7;
              if (!v18)
                continue;
            }
            goto LABEL_49;
          }
          v35 = v26 + 2;
          if (v29 > 0xFFFFFFFE)
            goto LABEL_49;
        }
        else
        {
          ++v35;
        }
        if (v29 < 8 || (v29 & 6) == 6)
          goto LABEL_49;
        v5 = v29 >> 3;
        if ((sub_2445C3D84() & 1) == 0)
        {
          sub_244581834(v29);
          if (!v4)
            continue;
        }
        return v5;
      }
    }
    break;
  }
  __break(1u);
LABEL_82:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ProtoFirstOfHelper()
{
  return &type metadata for ProtoFirstOfHelper;
}

uint64_t dispatch thunk of SchemaDescribing.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SchemaDescribing.getHelp()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2445A605C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[72];

  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    sub_2445816D0(a1, &qword_2573725D0);
    sub_2445AA9C0(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_2445816D0((uint64_t)v9, &qword_2573725D0);
  }
  else
  {
    sub_244577E54(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_244593A80((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2445A6134(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_24457466C((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_244593964(v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2445816D0(a1, &qword_257372408);
    v7 = sub_2445A153C(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_244592980();
        v11 = v13;
      }
      sub_24457466C((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      sub_2445AAC94(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return sub_2445816D0((uint64_t)v14, &qword_257372408);
  }
}

uint64_t sub_2445A624C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[56];

  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    sub_2445816D0(a1, &qword_2573725D8);
    sub_2445AAAB0(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_2445816D0((uint64_t)v9, &qword_2573725D8);
  }
  else
  {
    sub_244577DD4(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_244593D0C((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2445A6324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _BYTE v9[64];

  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
    sub_2445816D0(a1, &qword_257372428);
    sub_2445AABA0(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_2445816D0((uint64_t)v9, &qword_257372428);
  }
  else
  {
    sub_244583264(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_244593E34((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2445A63FC(void (*a1)(_OWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_2445A1834(0, v5, 0);
    v6 = v19;
    for (i = a3 + 32; ; i += 64)
    {
      a1(v17, i);
      if (v4)
        break;
      v4 = 0;
      v19 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_2445A1834(v10 > 1, v11 + 1, 1);
        v6 = v19;
      }
      *(_QWORD *)(v6 + 16) = v11 + 1;
      v12 = v6 + 56 * v11;
      v13 = v17[0];
      v14 = v17[1];
      v15 = v17[2];
      *(_QWORD *)(v12 + 80) = v18;
      *(_OWORD *)(v12 + 48) = v14;
      *(_OWORD *)(v12 + 64) = v15;
      *(_OWORD *)(v12 + 32) = v13;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A6518(void (*a1)(_QWORD *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_2445A170C(0, v5, 0);
    v6 = v18;
    for (i = a3 + 32; ; i += 64)
    {
      a1(v17, i, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A170C(v11 > 1, v12 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = v6 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A661C(void (*a1)(_QWORD *__return_ptr, _QWORD *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[8];
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_2445A1818(0, v5, 0);
    v6 = v17;
    v9 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v10 = *v9;
      v15[0] = *(v9 - 1);
      v15[1] = v10;
      swift_bridgeObjectRetain();
      a1(v16, v15, &v14);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v17 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A1818(v11 > 1, v12 + 1, 1);
        v6 = v17;
      }
      v9 += 2;
      *(_QWORD *)(v6 + 16) = v12 + 1;
      sub_2445832A0((uint64_t)v16, v6 + (v12 << 6) + 32);
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_2445A6748(void (*a1)(__int128 *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2445A18DC(0, v5, 0);
    v6 = v16;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v15, i);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        v14 = v15;
        sub_2445A18DC(v11 > 1, v12 + 1, 1);
        v10 = v14;
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_OWORD *)(v6 + 16 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A6854(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2445A18F8(0, v5, 0);
    v6 = v16;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v15, i, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A18F8(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A695C(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD v15[8];
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2445A1818(0, v5, 0);
    v6 = v16;
    v9 = (uint64_t *)(a3 + 32);
    while (1)
    {
      v10 = *v9++;
      v14 = v10;
      a1(v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A1818(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      sub_2445832A0((uint64_t)v15, v6 + (v12 << 6) + 32);
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A6A68(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_2445A1914(0, v5, 0);
    v6 = v15;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v14, i);
      if (v4)
        break;
      v4 = 0;
      v10 = v14;
      v15 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A1914(v11 > 1, v12 + 1, 1);
        v6 = v15;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_BYTE *)(v6 + v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A6B6C(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(BOOL, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;

  v6 = v5;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v18 = MEMORY[0x24BEE4AF8];
    a5(0, v7, 0);
    v8 = v18;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v17, i);
      if (v6)
        break;
      v6 = 0;
      v12 = v17;
      v18 = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        a5(v13 > 1, v14 + 1, 1);
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      *(_DWORD *)(v8 + 4 * v14 + 32) = v12;
      if (!--v7)
        return v8;
    }
    swift_release();
  }
  return v8;
}

uint64_t sub_2445A6C78(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(BOOL, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;

  v6 = v5;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v18 = MEMORY[0x24BEE4AF8];
    a5(0, v7, 0);
    v8 = v18;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v17, i);
      if (v6)
        break;
      v6 = 0;
      v12 = v17;
      v18 = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        a5(v13 > 1, v14 + 1, 1);
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      *(_QWORD *)(v8 + 8 * v14 + 32) = v12;
      if (!--v7)
        return v8;
    }
    swift_release();
  }
  return v8;
}

uint64_t sub_2445A6D84(void (*a1)(int *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_2445A19A0(0, v5, 0);
    v6 = v15;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v14, i);
      if (v4)
        break;
      v4 = 0;
      v10 = v14;
      v15 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A19A0(v11 > 1, v12 + 1, 1);
        v6 = v15;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_DWORD *)(v6 + 4 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A6E90(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_2445A19BC(0, v5, 0);
    v6 = v15;
    for (i = a3 + 32; ; i += 64)
    {
      a1(&v14, i);
      if (v4)
        break;
      v4 = 0;
      v10 = v14;
      v15 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2445A19BC(v11 > 1, v12 + 1, 1);
        v6 = v15;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2445A7134@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  result = sub_2445832DC(a1, (uint64_t)&v9);
  if (v13 == 10)
  {
    v6 = v10;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 48) = v12;
  }
  else
  {
    sub_244583318((uint64_t)&v9);
    sub_2445A1B98(a2, (uint64_t)&v9);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v8 = *((_QWORD *)&v10 + 1);
    v7 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void (*SchematizedDataComposer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v13[2] = v3;
    v13[3] = a2;
    v13[4] = a3;
    v11 = sub_2445A63FC((void (*)(_OWORD *__return_ptr, uint64_t))sub_2445ABC04, (uint64_t)v13, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  *v7 = v11;
  return sub_2445A736C;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v13[2] = v3;
    v13[3] = a2;
    v13[4] = a3;
    v11 = sub_2445A6748((void (*)(__int128 *__return_ptr, uint64_t))sub_2445ABC18, (uint64_t)v13, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  *v7 = v11;
  return sub_2445A836C;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v13[2] = v3;
    v13[3] = a2;
    v13[4] = a3;
    v11 = sub_2445A6A68((void (*)(uint64_t *__return_ptr, uint64_t))sub_2445ABC2C, (uint64_t)v13, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  *v7 = v11;
  return sub_2445A94FC;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v14[2] = v3;
    v14[3] = a2;
    v14[4] = a3;
    v12 = sub_2445A6B6C((void (*)(uint64_t *__return_ptr, uint64_t))sub_2445ABC40, (uint64_t)v14, v10, v11, (void (*)(BOOL, unint64_t, uint64_t))sub_2445A1930);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  *v7 = v12;
  return sub_2445A98D8;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v14[2] = v3;
    v14[3] = a2;
    v14[4] = a3;
    v12 = sub_2445A6C78((void (*)(uint64_t *__return_ptr, uint64_t))sub_2445ABC54, (uint64_t)v14, v10, v11, (void (*)(BOOL, unint64_t, uint64_t))sub_2445A194C);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  *v7 = v12;
  return sub_2445A9B38;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v14[2] = v3;
    v14[3] = a2;
    v14[4] = a3;
    v12 = sub_2445A6B6C((void (*)(uint64_t *__return_ptr, uint64_t))sub_2445ABC68, (uint64_t)v14, v10, v11, (void (*)(BOOL, unint64_t, uint64_t))sub_2445A1968);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  *v7 = v12;
  return sub_2445A9EE4;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v14[2] = v3;
    v14[3] = a2;
    v14[4] = a3;
    v12 = sub_2445A6C78((void (*)(uint64_t *__return_ptr, uint64_t))sub_2445ABC7C, (uint64_t)v14, v10, v11, (void (*)(BOOL, unint64_t, uint64_t))sub_2445A1984);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  *v7 = v12;
  return sub_2445AA28C;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v13[2] = v3;
    v13[3] = a2;
    v13[4] = a3;
    v11 = sub_2445A6D84((void (*)(int *__return_ptr, uint64_t))sub_2445ABC90, (uint64_t)v13, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  *v7 = v11;
  return sub_2445AA620;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  v8 = SchematizedDataComposer.subscript.getter(a2, a3);
  if (v8)
  {
    v10 = v8;
    MEMORY[0x24BDAC7A8](v8, v9);
    v13[2] = v3;
    v13[3] = a2;
    v13[4] = a3;
    v11 = sub_2445A6E90((void (*)(uint64_t *__return_ptr, uint64_t))sub_2445ABCA4, (uint64_t)v13, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  *v7 = v11;
  return sub_2445AA9B4;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SchematizedDataComposer.subscript.getter(a2, a3);
  v7[1] = v8;
  return sub_2445B3214;
}

{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SchematizedDataComposer.subscript.getter(a2, a3);
  v7[1] = v8;
  return sub_2445B34FC;
}

void sub_2445A736C(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A7568(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(v8, v6, v7);
}

uint64_t sub_2445A7B7C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[25];
  uint64_t v25;
  unint64_t v26;
  _OWORD v27[2];
  _BYTE v28[25];
  char v29;

  result = sub_2445832DC(a1, (uint64_t)v27);
  if (v29 != 7)
  {
    if (v29 != 8)
    {
LABEL_18:
      sub_2445A1B98(a3, (uint64_t)&v22);
      v25 = 0;
      v26 = 0xE000000000000000;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      v25 = 0x73696D2065707954;
      v26 = 0xEF203A686374616DLL;
      v20 = *((_QWORD *)&v23 + 1);
      v21 = *(_QWORD *)v24;
      __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 8) + 8))(v20);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      sub_2445C42D0();
      result = sub_2445C454C();
      __break(1u);
      return result;
    }
    v12 = v27[0];
    v13 = *a2;
    if (v13 == 17)
    {
      *a2 = 8;
    }
    else if (v13 != 8)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    *(_OWORD *)a5 = v12;
    return result;
  }
  v22 = v27[0];
  v23 = v27[1];
  *(_OWORD *)v24 = *(_OWORD *)v28;
  *(_OWORD *)&v24[9] = *(_OWORD *)&v28[9];
  v11 = *a2;
  if (v11 != 17)
  {
    if (v11 == 12)
      goto LABEL_8;
    __break(1u);
    goto LABEL_17;
  }
  *a2 = 12;
LABEL_8:
  v14 = *(_QWORD *)&v24[8];
  if ((v24[24] & 1) != 0)
  {
    v15 = *((_QWORD *)&v23 + 1);
    v16 = *(_QWORD *)v24;
    __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, v15, v16);
    if (v5)
    {
      result = sub_2445ABBD0((uint64_t)&v22);
      *a4 = v5;
      return result;
    }
    v14 = v17;
    v19 = v18;
  }
  else
  {
    v19 = *(_QWORD *)&v24[16];
    swift_bridgeObjectRetain();
  }
  result = sub_2445ABBD0((uint64_t)&v22);
  *(_QWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = v19;
  return result;
}

uint64_t sub_2445A7DC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7[2];

  v5 = *a1;
  v4 = a1[1];
  sub_2445ABB94(a2, (uint64_t)v7);
  sub_24457466C(v7, a3);
  *(_QWORD *)(a3 + 40) = v5;
  *(_QWORD *)(a3 + 48) = v4;
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 57) = 7;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2445A7E70(uint64_t *a1, char a2)
{
  return sub_2445A90EC(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A7E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = SchematizedDataComposer.subscript.getter(a1, a2);
  if (!v6)
    return 0;
  MEMORY[0x24BDAC7A8](v6, v7);
  v8 = a4(a3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_2445A7F3C@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  if (result)
  {
    MEMORY[0x24BDAC7A8](result, v8);
    v9 = a3(a2);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  return result;
}

uint64_t sub_2445A8144@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)&v8);
  if (v11 == 9)
  {
    *a3 = v8;
  }
  else
  {
    sub_244583318((uint64_t)&v8);
    sub_2445A1B98(a2, (uint64_t)&v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(&v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445A836C(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

void sub_2445A8378(uint64_t **a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = **a1;
  v6 = (*a1)[3];
  v7 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3(v5, v7, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    a3(v5, v7, v6);
  }
  free(v4);
}

uint64_t sub_2445A8E68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[25];
  uint64_t v21;
  unint64_t v22;
  _OWORD v23[2];
  _BYTE v24[25];
  char v25;

  result = sub_2445832DC(a1, (uint64_t)v23);
  switch(v25)
  {
    case 0:
      v9 = SLODWORD(v23[0]);
      goto LABEL_6;
    case 1:
      v9 = LODWORD(v23[0]);
      goto LABEL_6;
    case 2:
    case 3:
      v9 = *(_QWORD *)&v23[0];
      goto LABEL_6;
    case 6:
      v9 = LOBYTE(v23[0]);
LABEL_6:
      *a4 = v9;
      return result;
    case 7:
      *(_OWORD *)&v20[9] = *(_OWORD *)&v24[9];
      v19 = v23[1];
      *(_OWORD *)v20 = *(_OWORD *)v24;
      v18 = v23[0];
      v10 = *(_QWORD *)&v24[8];
      if ((v24[24] & 1) != 0)
        goto LABEL_11;
      v11 = *(_QWORD *)&v20[16];
      v12 = *((_QWORD *)&v19 + 1);
      v13 = *(_QWORD *)v20;
      __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 40);
      swift_bridgeObjectRetain();
      v15 = v14(v10, v11, v12, v13);
      sub_24457ED14(v10, v11, 0);
      if (v4)
      {
        result = sub_2445ABBD0((uint64_t)&v18);
        *a3 = v4;
      }
      else
      {
        v10 = v15;
LABEL_11:
        result = sub_2445ABBD0((uint64_t)&v18);
        *a4 = v10;
      }
      return result;
    default:
      sub_2445A1B98(a2, (uint64_t)&v18);
      v21 = 0;
      v22 = 0xE000000000000000;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      v21 = 0x73696D2065707954;
      v22 = 0xEF203A686374616DLL;
      v16 = *((_QWORD *)&v19 + 1);
      v17 = *(_QWORD *)v20;
      __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v16);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      sub_2445C42D0();
      result = sub_2445C454C();
      __break(1u);
      return result;
  }
}

uint64_t sub_2445A90E0(uint64_t *a1, char a2)
{
  return sub_2445A90EC(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A90EC(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1[2];
  v5 = *a1;
  v6 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3(v5, v6, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a3)(v5, v6, v4);
  }
}

uint64_t sub_2445A92D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11 == 6)
  {
    *a3 = v8[0];
  }
  else
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445A94FC(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A9524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = SchematizedDataComposer.subscript.getter(a1, a2);
  if (!v7)
    return 0;
  MEMORY[0x24BDAC7A8](v7, v8);
  v9 = a5(a3);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_2445A95D8@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t)@<X5>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  if (result)
  {
    MEMORY[0x24BDAC7A8](result, v8);
    v9 = a3(a2);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
  return result;
}

uint64_t sub_2445A96AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11)
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  else
  {
    *a3 = v8[0];
  }
  return result;
}

void sub_2445A98D8(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A9908@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11 == 2)
  {
    *a3 = v8[0];
  }
  else
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445A9B38(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A9B68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _OWORD v15[3];
  uint64_t v16;
  __int16 v17;
  char v18;

  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v14 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v7, 0);
      v9 = 0;
      v10 = v14;
      do
      {
        LODWORD(v15[0]) = *(_DWORD *)(a1 + 4 * v9 + 32);
        HIBYTE(v17) = a4;
        v12 = *(_QWORD *)(v14 + 16);
        v11 = *(_QWORD *)(v14 + 24);
        if (v12 >= v11 >> 1)
          sub_2445A1818(v11 > 1, v12 + 1, 1);
        ++v9;
        *(_QWORD *)(v14 + 16) = v12 + 1;
        sub_2445832A0((uint64_t)v15, v14 + (v12 << 6) + 32);
      }
      while (v7 != v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v15[0] = v10;
    v18 = 1;
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    v18 = -1;
    v17 = 0;
  }
  return sub_2445A6324((uint64_t)v15, a2, a3);
}

uint64_t sub_2445A9CB4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11 == 1)
  {
    *a3 = v8[0];
  }
  else
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445A9EE4(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445A9F14(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _OWORD v15[3];
  uint64_t v16;
  __int16 v17;
  char v18;

  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v14 = MEMORY[0x24BEE4AF8];
      sub_2445A1818(0, v7, 0);
      v9 = 0;
      v10 = v14;
      do
      {
        *(_QWORD *)&v15[0] = *(_QWORD *)(a1 + 8 * v9 + 32);
        HIBYTE(v17) = a4;
        v12 = *(_QWORD *)(v14 + 16);
        v11 = *(_QWORD *)(v14 + 24);
        if (v12 >= v11 >> 1)
          sub_2445A1818(v11 > 1, v12 + 1, 1);
        ++v9;
        *(_QWORD *)(v14 + 16) = v12 + 1;
        sub_2445832A0((uint64_t)v15, v14 + (v12 << 6) + 32);
      }
      while (v7 != v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)&v15[0] = v10;
    v18 = 1;
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    v18 = -1;
    v17 = 0;
  }
  return sub_2445A6324((uint64_t)v15, a2, a3);
}

uint64_t sub_2445AA05C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11 == 3)
  {
    *a3 = v8[0];
  }
  else
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445AA28C(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AA3F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11 == 4)
  {
    *a3 = v8[0];
  }
  else
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445AA620(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AA78C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = sub_2445832DC(a1, (uint64_t)v8);
  if (v11 == 5)
  {
    *a3 = v8[0];
  }
  else
  {
    sub_244583318((uint64_t)v8);
    sub_2445A1B98(a2, (uint64_t)v8);
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v7 = v9;
    v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

void sub_2445AA9B4(uint64_t **a1, char a2)
{
  sub_2445A8378(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))SchematizedDataComposer.subscript.setter);
}

double sub_2445AA9C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_2445A14D8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_244592B44();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_244577E54(*(_QWORD *)(v11 + 56) + 72 * v8, a3);
    sub_2445AAE3C(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_BYTE *)(a3 + 64) = -1;
  }
  return result;
}

double sub_2445AAAB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_2445A14D8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_244592394();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_244577DD4(*(_QWORD *)(v11 + 56) + 56 * v8, a3);
    sub_2445AB028(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_BYTE *)(a3 + 48) = -1;
  }
  return result;
}

double sub_2445AABA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_2445A14D8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_244592ED8();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_244583264(*(_QWORD *)(v11 + 56) + (v8 << 6), a3);
    sub_2445AB224(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_BYTE *)(a3 + 58) = -1;
    *(_WORD *)(a3 + 56) = 0;
  }
  return result;
}

unint64_t sub_2445AAC94(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2445C44A4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = sub_2445C4684();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              v9 = *v19;
              v10 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2445AAE3C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2445C44A4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2445C4690();
        swift_bridgeObjectRetain();
        sub_2445C42A0();
        v9 = sub_2445C46B4();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 72 * v3;
          v15 = (const void *)(v14 + 72 * v6);
          if (72 * v3 < (uint64_t)(72 * v6) || result >= (unint64_t)v15 + 72 || (v16 = v3 == v6, v3 = v6, !v16))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2445AB028(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2445C44A4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2445C4690();
        swift_bridgeObjectRetain();
        sub_2445C42A0();
        v12 = sub_2445C46B4();
        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = v17 + 56 * v3;
          v19 = (__int128 *)(v17 + 56 * v6);
          if (56 * v3 < (uint64_t)(56 * v6) || v18 >= (unint64_t)v19 + 56 || (v20 = v3 == v6, v3 = v6, !v20))
          {
            v9 = *v19;
            v10 = v19[1];
            v11 = v19[2];
            *(_QWORD *)(v18 + 48) = *((_QWORD *)v19 + 6);
            *(_OWORD *)(v18 + 16) = v10;
            *(_OWORD *)(v18 + 32) = v11;
            *(_OWORD *)v18 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2445AB224(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2445C44A4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2445C4690();
        swift_bridgeObjectRetain();
        sub_2445C42A0();
        v12 = sub_2445C46B4();
        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (__int128 *)(v17 + (v3 << 6));
          v19 = (__int128 *)(v17 + (v6 << 6));
          if (v3 << 6 != v6 << 6 || (v3 = v6, v18 >= v19 + 4))
          {
            v9 = *v19;
            v10 = v19[1];
            v11 = v19[3];
            v18[2] = v19[2];
            v18[3] = v11;
            *v18 = v9;
            v18[1] = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2445AB408(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_2445C44A4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_2445C4690();
        swift_bridgeObjectRetain();
        sub_2445C42A0();
        v10 = sub_2445C46B4();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_2445AB5DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2445A7134(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB5FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2445A7B7C(a1, *(_BYTE **)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t sub_2445AB61C(uint64_t a1)
{
  destroy for OneofSchema();
  return a1;
}

uint64_t sub_2445AB650@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2445A7DC4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB66C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445A8144(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB68C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_2445A8E68(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

uint64_t sub_2445AB6AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7[2];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *a1;
  sub_2445ABB94(v4, (uint64_t)v7);
  result = sub_24457466C(v7, a2);
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_BYTE *)(a2 + 57) = 7;
  return result;
}

uint64_t sub_2445AB714@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_2445A92D4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB734@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445A96AC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB754@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445A9908(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB774@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445A9CB4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB794@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445AA05C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB7B4@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445AA3F8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB7D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2445AA78C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445AB7F4@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A7F3C(a1, (uint64_t)sub_2445ABC04, (uint64_t (*)(uint64_t))sub_2445A63FC, a2);
}

uint64_t sub_2445AB818(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AB834()
{
  return 0;
}

uint64_t sub_2445AB844@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_2445AB870(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AB88C()
{
  return 0;
}

uint64_t sub_2445AB89C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A7F3C(a1, (uint64_t)sub_2445ABC18, (uint64_t (*)(uint64_t))sub_2445A6748, a2);
}

uint64_t sub_2445AB8C0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AB8DC()
{
  return 0;
}

uint64_t sub_2445AB8EC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_2445AB918(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AB934()
{
  return 0;
}

uint64_t sub_2445AB944@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A7F3C(a1, (uint64_t)sub_2445ABC2C, (uint64_t (*)(uint64_t))sub_2445A6A68, a2);
}

uint64_t sub_2445AB968(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AB984()
{
  return 0;
}

uint64_t sub_2445AB994@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A95D8(a1, (uint64_t)sub_2445ABC40, (uint64_t (*)(uint64_t))sub_2445A6B6C, a2);
}

uint64_t sub_2445AB9C0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445AB9DC()
{
  return 0;
}

uint64_t sub_2445AB9EC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A95D8(a1, (uint64_t)sub_2445ABC54, (uint64_t (*)(uint64_t))sub_2445A6C78, a2);
}

uint64_t sub_2445ABA18(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445ABA34()
{
  return 0;
}

uint64_t sub_2445ABA44@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A95D8(a1, (uint64_t)sub_2445ABC68, (uint64_t (*)(uint64_t))sub_2445A6B6C, a2);
}

uint64_t sub_2445ABA70(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445ABA8C()
{
  return 0;
}

uint64_t sub_2445ABA9C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A95D8(a1, (uint64_t)sub_2445ABC7C, (uint64_t (*)(uint64_t))sub_2445A6C78, a2);
}

uint64_t sub_2445ABAC8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445ABAE4()
{
  return 0;
}

uint64_t sub_2445ABAF4@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A7F3C(a1, (uint64_t)sub_2445ABC90, (uint64_t (*)(uint64_t))sub_2445A6D84, a2);
}

uint64_t sub_2445ABB18(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445ABB34()
{
  return 0;
}

uint64_t sub_2445ABB44@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2445A7F3C(a1, (uint64_t)sub_2445ABCA4, (uint64_t (*)(uint64_t))sub_2445A6E90, a2);
}

uint64_t sub_2445ABB68(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445A7568(a1, a2, a3, a4, SchematizedDataComposer.subscript.setter);
}

uint64_t sub_2445ABB84()
{
  return 0;
}

uint64_t sub_2445ABB94(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for OneofSchema(a2, a1);
  return a2;
}

uint64_t sub_2445ABBD0(uint64_t a1)
{
  destroy for EnumValueImpl();
  return a1;
}

uint64_t sub_2445ABC04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2445AB5DC(a1, a2);
}

uint64_t sub_2445ABC18@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_2445AB66C(a1, a2);
}

uint64_t sub_2445ABC2C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_2445AB714(a1, a2);
}

uint64_t sub_2445ABC40@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_2445AB734(a1, a2);
}

uint64_t sub_2445ABC54@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2445AB754(a1, a2);
}

uint64_t sub_2445ABC68@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_2445AB774(a1, a2);
}

uint64_t sub_2445ABC7C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2445AB794(a1, a2);
}

uint64_t sub_2445ABC90@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_2445AB7B4(a1, a2);
}

uint64_t sub_2445ABCA4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2445AB7D4(a1, a2);
}

void AnyValue.asUnsafe<A>(_:)()
{
  uint64_t *v0;
  _BYTE v1[64];

  sub_2445832DC(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_2445ABD10()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  *(_DWORD *)(v1 - 176) = *(_DWORD *)(v1 - 112);
  *(_BYTE *)(v1 - 119) = 0;
  v0(v1 - 176);
  return sub_244574078(v1 - 176);
}

void sub_2445ABE1C()
{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 - 112);
  v3 = *(_QWORD *)(v1 - 104);
  *(_QWORD *)(v1 - 152) = MEMORY[0x24BDCDDE8];
  *(_QWORD *)(v1 - 144) = &protocol witness table for Data;
  *(_QWORD *)(v1 - 176) = v2;
  *(_QWORD *)(v1 - 168) = v3;
  *(_BYTE *)(v1 - 119) = 9;
  sub_244574770(v2, v3);
  v0(v1 - 176);
  sub_2445747FC(v2, v3);
  JUMPOUT(0x2445ABDF8);
}

void sub_2445ABE70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v3 = *(_OWORD *)(v2 - 96);
  *(_OWORD *)(v2 - 176) = *(_OWORD *)(v2 - 112);
  *(_OWORD *)(v2 - 160) = v3;
  *(_OWORD *)(v2 - 144) = *(_OWORD *)(v2 - 80);
  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v2 - 64);
  MEMORY[0x24BDAC7A8](a1, a2);
  SchematizedData.asUnsafe<A>(_:)();
  sub_244575334(v2 - 176);
  JUMPOUT(0x2445ABE00);
}

uint64_t sub_2445ABEE0(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[64];

  v2 = *(void (**)(_BYTE *))(v1 + 24);
  sub_244577E90(a1, (uint64_t)v4);
  v4[57] = 10;
  v2(v4);
  return sub_244574078((uint64_t)v4);
}

void AnyValueImpl.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v2[64];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2445C46C0();
  sub_2445742AC(v1, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_2445ABFB4()
{
  uint64_t v0;

  __swift_mutable_project_boxed_opaque_existential_1(v0 - 104, *(_QWORD *)(v0 - 80));
  sub_2445C4600();
  return __swift_destroy_boxed_opaque_existential_1(v0 - 104);
}

unint64_t sub_2445AC2F0()
{
  unint64_t result;

  result = qword_2573725E0;
  if (!qword_2573725E0)
  {
    result = MEMORY[0x249512E54](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2573725E0);
  }
  return result;
}

unint64_t sub_2445AC334()
{
  unint64_t result;

  result = qword_2573725E8;
  if (!qword_2573725E8)
  {
    result = MEMORY[0x249512E54](&protocol conformance descriptor for EnumValueImpl, &type metadata for EnumValueImpl);
    atomic_store(result, (unint64_t *)&qword_2573725E8);
  }
  return result;
}

void sub_2445AC378(_QWORD *a1)
{
  AnyValueImpl.encode(to:)(a1);
}

uint64_t assignWithCopy for AnyValue(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 57);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          goto LABEL_10;
        case 7:
          __swift_destroy_boxed_opaque_existential_1(a1);
          sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
          goto LABEL_10;
        case 8:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        case 9:
          v5 = *(_QWORD *)a1;
          v6 = *(_QWORD *)(a1 + 8);
          goto LABEL_8;
        case 10:
          __swift_destroy_boxed_opaque_existential_1(a1);
          v5 = *(_QWORD *)(a1 + 40);
          v6 = *(_QWORD *)(a1 + 48);
LABEL_8:
          sub_2445747FC(v5, v6);
LABEL_10:
          v7 = *(unsigned __int8 *)(a2 + 57);
          while (2)
          {
            switch(v7)
            {
              case 0:
                *(_DWORD *)a1 = *(_DWORD *)a2;
                *(_BYTE *)(a1 + 57) = 0;
                return a1;
              case 1:
                *(_DWORD *)a1 = *(_DWORD *)a2;
                v8 = 1;
                goto LABEL_23;
              case 2:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v8 = 2;
                goto LABEL_23;
              case 3:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v8 = 3;
                goto LABEL_23;
              case 4:
                *(_DWORD *)a1 = *(_DWORD *)a2;
                v8 = 4;
                goto LABEL_23;
              case 5:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v8 = 5;
                goto LABEL_23;
              case 6:
                *(_BYTE *)a1 = *(_BYTE *)a2;
                v8 = 6;
                goto LABEL_23;
              case 7:
                v9 = *(_QWORD *)(a2 + 24);
                *(_QWORD *)(a1 + 24) = v9;
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
                (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
                v10 = *(_QWORD *)(a2 + 40);
                v11 = *(_QWORD *)(a2 + 48);
                v12 = *(_BYTE *)(a2 + 56);
                sub_24457F1E0(v10, v11, v12);
                *(_QWORD *)(a1 + 40) = v10;
                *(_QWORD *)(a1 + 48) = v11;
                *(_BYTE *)(a1 + 56) = v12;
                v8 = 7;
                goto LABEL_23;
              case 8:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
                *(_BYTE *)(a1 + 57) = 8;
                swift_bridgeObjectRetain();
                return a1;
              case 9:
                v14 = *(_QWORD *)a2;
                v13 = *(_QWORD *)(a2 + 8);
                sub_244574770(v14, v13);
                *(_QWORD *)a1 = v14;
                *(_QWORD *)(a1 + 8) = v13;
                v8 = 9;
                goto LABEL_23;
              case 10:
                v15 = *(_QWORD *)(a2 + 24);
                *(_QWORD *)(a1 + 24) = v15;
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
                (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
                v17 = *(_QWORD *)(a2 + 40);
                v16 = *(_QWORD *)(a2 + 48);
                sub_244574770(v17, v16);
                *(_QWORD *)(a1 + 40) = v17;
                *(_QWORD *)(a1 + 48) = v16;
                v8 = 10;
LABEL_23:
                *(_BYTE *)(a1 + 57) = v8;
                break;
              default:
                v7 = *(_DWORD *)a2 + 11;
                continue;
            }
            break;
          }
          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AnyValue(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 57);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          goto LABEL_10;
        case 7:
          __swift_destroy_boxed_opaque_existential_1(a1);
          sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
          goto LABEL_10;
        case 8:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        case 9:
          v5 = *(_QWORD *)a1;
          v6 = *(_QWORD *)(a1 + 8);
          goto LABEL_8;
        case 10:
          __swift_destroy_boxed_opaque_existential_1(a1);
          v5 = *(_QWORD *)(a1 + 40);
          v6 = *(_QWORD *)(a1 + 48);
LABEL_8:
          sub_2445747FC(v5, v6);
LABEL_10:
          v7 = *(unsigned __int8 *)(a2 + 57);
          while (2)
          {
            switch(v7)
            {
              case 0:
                v8 = 0;
                *(_DWORD *)a1 = *(_DWORD *)a2;
                break;
              case 1:
                *(_DWORD *)a1 = *(_DWORD *)a2;
                v8 = 1;
                break;
              case 2:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v8 = 2;
                break;
              case 3:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v8 = 3;
                break;
              case 4:
                *(_DWORD *)a1 = *(_DWORD *)a2;
                v8 = 4;
                break;
              case 5:
                *(_QWORD *)a1 = *(_QWORD *)a2;
                v8 = 5;
                break;
              case 6:
                *(_BYTE *)a1 = *(_BYTE *)a2;
                v8 = 6;
                break;
              case 7:
                v9 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_OWORD *)(a1 + 16) = v9;
                *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
                *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
                v8 = 7;
                break;
              case 8:
                *(_OWORD *)a1 = *(_OWORD *)a2;
                v8 = 8;
                break;
              case 9:
                *(_OWORD *)a1 = *(_OWORD *)a2;
                v8 = 9;
                break;
              case 10:
                v10 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_OWORD *)(a1 + 16) = v10;
                *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
                v8 = 10;
                break;
              default:
                v7 = *(_DWORD *)a2 + 11;
                continue;
            }
            break;
          }
          *(_BYTE *)(a1 + 57) = v8;
          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
  }
  return a1;
}

uint64_t assignWithCopy for AnyValueImpl(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 57);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          break;
        case 7:
          __swift_destroy_boxed_opaque_existential_1(a1);
          sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
          break;
        case 8:
          swift_bridgeObjectRelease();
          break;
        case 9:
        case 10:
          __swift_destroy_boxed_opaque_existential_1(a1);
          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 57);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_BYTE *)(a1 + 57) = 0;
          return a1;
        case 1:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 1;
          goto LABEL_21;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 2;
          goto LABEL_21;
        case 3:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 3;
          goto LABEL_21;
        case 4:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 4;
          goto LABEL_21;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 5;
          goto LABEL_21;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v6 = 6;
          goto LABEL_21;
        case 7:
          v7 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v7;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
          v8 = *(_QWORD *)(a2 + 40);
          v9 = *(_QWORD *)(a2 + 48);
          v10 = *(_BYTE *)(a2 + 56);
          sub_24457F1E0(v8, v9, v10);
          *(_QWORD *)(a1 + 40) = v8;
          *(_QWORD *)(a1 + 48) = v9;
          *(_BYTE *)(a1 + 56) = v10;
          v6 = 7;
          goto LABEL_21;
        case 8:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 57) = 8;
          swift_bridgeObjectRetain();
          return a1;
        case 9:
          v11 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v11;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
          v6 = 9;
          goto LABEL_21;
        case 10:
          v12 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v12;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
          v6 = 10;
LABEL_21:
          *(_BYTE *)(a1 + 57) = v6;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
  }
  return a1;
}

uint64_t assignWithTake for AnyValueImpl(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 57);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          break;
        case 7:
          __swift_destroy_boxed_opaque_existential_1(a1);
          sub_24457ED14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
          break;
        case 8:
          swift_bridgeObjectRelease();
          break;
        case 9:
        case 10:
          __swift_destroy_boxed_opaque_existential_1(a1);
          break;
        default:
          v4 = *(_DWORD *)a1 + 11;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 57);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          break;
        case 1:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 1;
          break;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 2;
          break;
        case 3:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 3;
          break;
        case 4:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v6 = 4;
          break;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 5;
          break;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v6 = 6;
          break;
        case 7:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
          v6 = 7;
          break;
        case 8:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 8;
          break;
        case 9:
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v8;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 9;
          break;
        case 10:
          v9 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v9;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 10;
          break;
        default:
          v5 = *(_DWORD *)a2 + 11;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 57) = v6;
  }
  return a1;
}

uint64_t sub_2445ACAC4(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 57);
  if (result >= 0xB)
    return (*(_DWORD *)a1 + 11);
  return result;
}

uint64_t sub_2445ACAE0(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(_BYTE *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyValueImpl()
{
  return &type metadata for AnyValueImpl;
}

uint64_t sub_2445ACB24@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31[4];
  uint64_t v32[6];
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v8 = v6;
  if (a1 >= 2)
  {
    v19 = *v6;
    if (*v6)
    {
      v20 = v6[1];
      v21 = v8[2];
      v29 = v8[3];
      v32[4] = v19;
      v32[5] = v20;
      v33 = v21;
      v34 = v29;
      v31[0] = a1;
      v31[1] = a2;
      v31[2] = a3;
      v31[3] = a4;
      sub_2445B014C(a1, a2, a3, a4);
      sub_2445B014C(a1, a2, a3, a4);
      sub_2445B014C(a1, a2, a3, a4);
      sub_244577CD0(v19, v20, v21, v29);
      sub_244575F04(v31, a5, v32);
      if (v7)
      {
        sub_2445B015C(a1, a2, a3, a4);
        v22 = v33;
        v23 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v22, v23);
        sub_2445B015C(a1, a2, a3, a4);
        return sub_2445B015C(a1, a2, a3, a4);
      }
      else
      {
        sub_244577D18(v19, v20, v21, v29);
        sub_2445B015C(a1, a2, a3, a4);
        v24 = v33;
        v35 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v24, v35);
        sub_2445B015C(a1, a2, a3, a4);
        sub_2445B015C(a1, a2, a3, a4);
        v25 = v32[0];
        v26 = v32[1];
        v27 = v32[2];
        v28 = v32[3];
        *v8 = v32[0];
        v8[1] = v26;
        v8[2] = v27;
        v8[3] = v28;
        *a6 = v25;
        a6[1] = v26;
        a6[2] = v27;
        a6[3] = v28;
        return sub_244577CD0(v25, v26, v27, v28);
      }
    }
    else
    {
      *v6 = a1;
      v6[1] = a2;
      v6[2] = a3;
      v6[3] = a4;
      *a6 = a1;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      sub_2445B014C(a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_24457475C(a3, a4);
    }
  }
  else
  {
    v10 = *v6;
    v11 = v6[1];
    v12 = v6[2];
    v13 = v6[3];
    *a6 = *v6;
    a6[1] = v11;
    a6[2] = v12;
    a6[3] = v13;
    return sub_244577CD0(v10, v11, v12, v13);
  }
}

uint64_t sub_2445ACD80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v8[2] = a2;
  v8[3] = a3;
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v6 + 72))(1701603686, 0xE400000000000000, sub_2445AD03C, v8, v5, v6);
}

uint64_t sub_2445ACE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  unsigned __int8 v11;
  __int128 v12[3];
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  sub_2445742AC(a1, (uint64_t)v12);
  if (v13 == 10)
  {
    sub_24457466C(v12, (uint64_t)v14);
    v2 = v15;
    v3 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v3 + 48))(&v10, 0x6567616B636170, 0xE700000000000000, v2, v3);
    if (v1)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      if (v11 == 255)
      {
        sub_244574464((uint64_t)&v10);
      }
      else
      {
        sub_24458170C((uint64_t)&v10, (uint64_t)v12);
        sub_2445742AC((uint64_t)v12, (uint64_t)&v10);
        if (v11 == 8)
        {
          sub_244597C30();
          v5 = sub_2445C4468();
          sub_244574078((uint64_t)v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v17 = v5;
        }
        else
        {
          sub_244574078((uint64_t)v12);
          sub_244574078((uint64_t)&v10);
        }
      }
      v6 = v16;
      v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
      MEMORY[0x24BDAC7A8](v7, v8);
      (*(void (**)(uint64_t (*)(_QWORD *)))(v6 + 88))(sub_2445AD2B4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
  }
  else
  {
    sub_244574078((uint64_t)v12);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v4 = 0xD00000000000002ALL;
    *(_QWORD *)(v4 + 8) = 0x80000002445C57A0;
    *(_BYTE *)(v4 + 16) = 0;
    swift_willThrow();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_2445AD03C(uint64_t a1)
{
  return sub_2445ACE00(a1);
}

unint64_t sub_2445AD054()
{
  unint64_t result;

  result = qword_2573725F0;
  if (!qword_2573725F0)
  {
    result = MEMORY[0x249512E54](&unk_2445C6A78, &type metadata for SchemaManifestDSCError);
    atomic_store(result, (unint64_t *)&qword_2573725F0);
  }
  return result;
}

uint64_t sub_2445AD098(_QWORD *a1, _QWORD **a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  BOOL v17;
  _QWORD *v18;
  char v20;

  v9 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v9);
  v12 = v10 == 0x7079745F6D756E65 && v11 == 0xE900000000000065;
  if (v12 || (v13 = v10, v14 = v11, (sub_2445C45B8() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v15 = *a2;
    swift_bridgeObjectRetain();
    sub_2445AF284((uint64_t)(a1 + 5), v15, a3);
    return swift_bridgeObjectRelease();
  }
  v17 = v13 == 0x5F6567617373656DLL && v14 == 0xEC00000065707974;
  if (v17 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v18 = *a2;
    swift_bridgeObjectRetain();
    sub_2445AF6B0((uint64_t)(a1 + 5), v18);
    return swift_bridgeObjectRelease();
  }
  if (v13 == 0x6F69736E65747865 && v14 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return sub_2445AFDA0((uint64_t)(a1 + 5), a4);
  }
  v20 = sub_2445C45B8();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    return sub_2445AFDA0((uint64_t)(a1 + 5), a4);
  return result;
}

uint64_t sub_2445AD2B4(_QWORD *a1)
{
  uint64_t v1;

  return sub_2445AD098(a1, *(_QWORD ***)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD **)(v1 + 32));
}

uint64_t sub_2445AD2D0(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD **a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  __int128 v48[3];
  char v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;

  v12 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 8))(v12);
  v15 = v13 == 1701667182 && v14 == 0xE400000000000000;
  if (v15 || (v16 = v13, v17 = v14, (sub_2445C45B8() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v48);
    if (v49 == 8)
    {
      v18 = *((_QWORD *)&v48[0] + 1);
      *a2 = *(_QWORD *)&v48[0];
      a2[1] = v18;
      return swift_bridgeObjectRelease();
    }
    sub_244574078((uint64_t)v48);
    sub_2445AD054();
    swift_allocError();
    v21 = xmmword_2445C6E80;
LABEL_10:
    *(_OWORD *)v20 = v21;
    *(_BYTE *)(v20 + 16) = 0;
    return swift_willThrow();
  }
  v22 = v16 == 0x736E6F6974706FLL && v17 == 0xE700000000000000;
  if (v22 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v48);
    if (v49 == 10)
    {
      sub_24457466C(v48, (uint64_t)v50);
      v23 = v51;
      v24 = v52;
      __swift_project_boxed_opaque_existential_1(v50, v51);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
      v26 = *a3;
      v27 = a3[1];
      *a3 = v25;
      a3[1] = v28;
      sub_2445747E8(v26, v27);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
    sub_244574078((uint64_t)v48);
    sub_2445AD054();
    swift_allocError();
    v21 = xmmword_2445C6E90;
    goto LABEL_10;
  }
  if (v16 == 0x65756C6176 && v17 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_27:
    v56 = 0;
    v57 = 0xE000000000000000;
    v54 = 0;
    v55 = 1;
    v53 = xmmword_2445C6A40;
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v48);
    if (v49 == 10)
    {
      sub_24457466C(v48, (uint64_t)v50);
      v31 = v52;
      v32 = __swift_project_boxed_opaque_existential_1(v50, v51);
      MEMORY[0x24BDAC7A8](v32, v33);
      (*(void (**)(uint64_t (*)(_QWORD *)))(v31 + 88))(sub_2445B010C);
      if (!v5)
      {
        v35 = v56;
        v34 = v57;
        v36 = HIBYTE(v57) & 0xF;
        if ((v57 & 0x2000000000000000) == 0)
          v36 = v56 & 0xFFFFFFFFFFFFLL;
        if (v36 && (v55 & 1) == 0)
        {
          v40 = *((_QWORD *)&v53 + 1);
          v39 = v54;
          if (*((_QWORD *)&v53 + 1) >> 60 != 15)
          {
            v41 = v53;
            sub_244574770(v53, *((unint64_t *)&v53 + 1));
            sub_244574770(v41, v40);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v48[0] = *a4;
            *a4 = 0x8000000000000000;
            sub_2445940D4(v41, v40, v39, isUniquelyReferenced_nonNull_native);
            *a4 = *(_QWORD *)&v48[0];
            swift_bridgeObjectRelease();
            sub_2445747E8(v41, v40);
            v35 = v56;
            v34 = v57;
          }
          v43 = *a5;
          swift_bridgeObjectRetain();
          v44 = swift_isUniquelyReferenced_nonNull_native();
          *a5 = v43;
          if ((v44 & 1) == 0)
          {
            v43 = sub_244585518(0, v43[2] + 1, 1, v43);
            *a5 = v43;
          }
          v46 = v43[2];
          v45 = v43[3];
          if (v46 >= v45 >> 1)
          {
            v43 = sub_244585518((_QWORD *)(v45 > 1), v46 + 1, 1, v43);
            *a5 = v43;
          }
          v43[2] = v46 + 1;
          v47 = &v43[3 * v46];
          v47[4] = v35;
          v47[5] = v34;
          v47[6] = v39;
        }
        else
        {
          sub_2445AD054();
          swift_allocError();
          *(_QWORD *)v37 = 0xD000000000000015;
          *(_QWORD *)(v37 + 8) = 0x80000002445C5830;
          *(_BYTE *)(v37 + 16) = 1;
          swift_willThrow();
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
    else
    {
      sub_244574078((uint64_t)v48);
      sub_2445AD054();
      swift_allocError();
      *(_OWORD *)v38 = xmmword_2445C6E80;
      *(_BYTE *)(v38 + 16) = 0;
      swift_willThrow();
    }
    sub_2445747E8(v53, *((unint64_t *)&v53 + 1));
    return swift_bridgeObjectRelease();
  }
  v30 = sub_2445C45B8();
  result = swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
    goto LABEL_27;
  return result;
}

uint64_t sub_2445AD7D0(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31[3];
  char v32;

  v9 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v9);
  v12 = v10 == 1701667182 && v11 == 0xE400000000000000;
  if (v12 || (v13 = v10, v14 = v11, (sub_2445C45B8() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v31);
    if (v32 == 8)
    {
      v15 = *((_QWORD *)&v31[0] + 1);
      *a2 = *(_QWORD *)&v31[0];
      a2[1] = v15;
      return swift_bridgeObjectRelease();
    }
    goto LABEL_24;
  }
  v17 = v13 == 0x736E6F6974706FLL && v14 == 0xE700000000000000;
  if (v17 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v31);
    if (v32 == 10)
    {
      sub_24457466C(v31, (uint64_t)v28);
      v18 = v29;
      v19 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
      v21 = *a3;
      v22 = a3[1];
      *a3 = v20;
      a3[1] = v23;
      sub_2445747E8(v21, v22);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
    sub_244574078((uint64_t)v31);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v24 = 0xD000000000000012;
    v25 = 0x80000002445C5850;
    goto LABEL_25;
  }
  if (v13 == 0x7265626D756ELL && v14 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = sub_2445C45B8();
    result = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
      return result;
  }
  result = sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v31);
  if (v32)
  {
LABEL_24:
    v25 = 0xEF656D616E206575;
    sub_244574078((uint64_t)v31);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v24 = 0x6C6176206D756E45;
LABEL_25:
    *(_QWORD *)(v24 + 8) = v25;
    *(_BYTE *)(v24 + 16) = 0;
    return swift_willThrow();
  }
  *(_QWORD *)a4 = SLODWORD(v31[0]);
  *(_BYTE *)(a4 + 8) = 0;
  return result;
}

uint64_t sub_2445ADA98(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, char *a5, uint64_t *a6, BOOL *a7, _DWORD *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int128 v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _DWORD *v63;
  BOOL *v64;
  uint64_t *v65;
  char *v66;
  uint64_t *v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[25];
  __int128 v71;
  __int128 v72;
  _BYTE v73[25];
  char v74;
  uint64_t v75;

  v63 = a8;
  v64 = a7;
  v65 = a6;
  v66 = a5;
  v67 = a4;
  v11 = sub_2445C3CAC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v16);
  v20 = v18 == 1701667182 && v19 == 0xE400000000000000;
  if (v20 || (v21 = v18, v22 = v19, (sub_2445C45B8() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (v74 == 8)
    {
      v23 = *((_QWORD *)&v71 + 1);
      *a2 = v71;
      a2[1] = v23;
      return swift_bridgeObjectRelease();
    }
    sub_244574078((uint64_t)&v71);
    sub_2445AD054();
    swift_allocError();
    v26 = xmmword_2445C6EF0;
LABEL_18:
    *(_OWORD *)v25 = v26;
    *(_BYTE *)(v25 + 16) = 0;
    return swift_willThrow();
  }
  v27 = v21 == 0x7265626D756ELL && v22 == 0xE600000000000000;
  if (v27 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (!v74)
    {
      *(_QWORD *)a3 = (int)v71;
      *(_BYTE *)(a3 + 8) = 0;
      return result;
    }
    sub_244574078((uint64_t)&v71);
    sub_2445AD054();
    swift_allocError();
    v26 = xmmword_2445C6EE0;
    goto LABEL_18;
  }
  v28 = v21 == 0x736E6F6974706FLL && v22 == 0xE700000000000000;
  if (v28 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (v74 == 10)
    {
      sub_24457466C(&v71, (uint64_t)&v68);
      v29 = *((_QWORD *)&v69 + 1);
      v30 = *(_QWORD *)v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
      v32 = v67;
      v33 = *v67;
      v34 = v67[1];
      *v67 = v31;
      v32[1] = v35;
      sub_2445747E8(v33, v34);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    }
    sub_244574078((uint64_t)&v71);
    sub_2445AD054();
    swift_allocError();
    v26 = xmmword_2445C6ED0;
    goto LABEL_18;
  }
  v36 = v21 == 1701869940 && v22 == 0xE400000000000000;
  if (v36 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (v74 != 7)
    {
      sub_244574078((uint64_t)&v71);
      sub_2445AD054();
      swift_allocError();
      v26 = xmmword_2445C6EC0;
      goto LABEL_18;
    }
    *(_OWORD *)&v70[9] = *(_OWORD *)&v73[9];
    v68 = v71;
    v69 = v72;
    *(_OWORD *)v70 = *(_OWORD *)v73;
    v37 = *(_QWORD *)&v73[8];
    if ((v73[24] & 1) != 0)
    {
      v38 = *((_QWORD *)&v69 + 1);
      v39 = *(_QWORD *)v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      v40 = v75;
      v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, v38, v39);
      v75 = v40;
      if (v40)
        return sub_24457FE4C((uint64_t)&v68);
      v37 = v41;
      v44 = v42;
    }
    else
    {
      v44 = *(_QWORD *)&v70[16];
      swift_bridgeObjectRetain();
    }
    if (v37 == 0x4F4F425F45505954 && v44 == 0xE90000000000004CLL || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 7;
LABEL_52:
      sub_24457FE4C((uint64_t)&v68);
      result = swift_bridgeObjectRelease();
      *v66 = v49;
      return result;
    }
    if (v37 == 0x5459425F45505954 && v44 == 0xEA00000000005345 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 10;
      goto LABEL_52;
    }
    if (v37 == 0x554F445F45505954 && v44 == 0xEB00000000454C42)
    {
      v49 = 0;
      goto LABEL_52;
    }
    v49 = 0;
    if ((sub_2445C45B8() & 1) != 0)
      goto LABEL_52;
    if (v37 == 0x554E455F45505954 && v44 == 0xE90000000000004DLL || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 12;
      goto LABEL_52;
    }
    if (v37 == 0x4F4C465F45505954 && v44 == 0xEA00000000005441 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 1;
      goto LABEL_52;
    }
    if (v37 == 0x544E495F45505954 && v44 == 0xEA00000000003233 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 4;
      goto LABEL_52;
    }
    if (v37 == 0x544E495F45505954 && v44 == 0xEA00000000003436 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 2;
      goto LABEL_52;
    }
    if (v37 == 0x53454D5F45505954 && v44 == 0xEC00000045474153 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 9;
      goto LABEL_52;
    }
    if (v37 == 0x5254535F45505954 && v44 == 0xEB00000000474E49 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 8;
      goto LABEL_52;
    }
    if (v37 == 0x4E49555F45505954 && v44 == 0xEB00000000323354 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 11;
      goto LABEL_52;
    }
    if (v37 == 0x4E49555F45505954 && v44 == 0xEB00000000343654 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 3;
      goto LABEL_52;
    }
    if (v37 == 0x5849465F45505954 && v44 == 0xEC00000032334445 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 6;
      goto LABEL_52;
    }
    if (v37 == 0x5849465F45505954 && v44 == 0xEC00000034364445 || (sub_2445C45B8() & 1) != 0)
    {
      v49 = 5;
      goto LABEL_52;
    }
    if (v37 == 0x4F52475F45505954 && v44 == 0xEA00000000005055 || (sub_2445C45B8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_2445AD054();
      swift_allocError();
      *(_QWORD *)v60 = 0xD000000000000013;
      *(_QWORD *)(v60 + 8) = 0x80000002445C58D0;
LABEL_123:
      *(_BYTE *)(v60 + 16) = 0;
      swift_willThrow();
      return sub_24457FE4C((uint64_t)&v68);
    }
    if (v37 == 0x4946535F45505954 && v44 == 0xED00003233444558 || (sub_2445C45B8() & 1) != 0)
    {
LABEL_127:
      v49 = 13;
      goto LABEL_52;
    }
    if ((v37 != 0x4946535F45505954 || v44 != 0xED00003436444558) && (sub_2445C45B8() & 1) == 0)
    {
      if (v37 == 0x4E49535F45505954 && v44 == 0xEB00000000323354 || (sub_2445C45B8() & 1) != 0)
        goto LABEL_127;
      if ((v37 != 0x4E49535F45505954 || v44 != 0xEB00000000343654) && (sub_2445C45B8() & 1) == 0)
      {
        *(_QWORD *)&v71 = 0;
        *((_QWORD *)&v71 + 1) = 0xE000000000000000;
        sub_2445C44D4();
        swift_bridgeObjectRelease();
        strcpy((char *)&v71, "Unknown type: ");
        HIBYTE(v71) = -18;
        sub_2445C42D0();
        swift_bridgeObjectRelease();
        v61 = v71;
        sub_2445AD054();
        swift_allocError();
        *(_OWORD *)v60 = v61;
        goto LABEL_123;
      }
    }
    v49 = 14;
    goto LABEL_52;
  }
  v43 = v21 == 0x6D616E5F65707974 && v22 == 0xE900000000000065;
  if (v43 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (v74 == 8)
    {
      sub_2445C3C70();
      sub_244597C30();
      v45 = sub_2445C4474();
      v47 = v46;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      swift_bridgeObjectRelease();
      v48 = v65;
      *v65 = v45;
      v48[1] = v47;
      return swift_bridgeObjectRelease();
    }
    goto LABEL_63;
  }
  if (v21 == 0x6C6562616CLL && v22 == 0xE500000000000000 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (v74 == 7)
    {
      *(_OWORD *)&v70[9] = *(_OWORD *)&v73[9];
      v68 = v71;
      v69 = v72;
      *(_OWORD *)v70 = *(_OWORD *)v73;
      v50 = *(_QWORD *)&v73[8];
      if ((v73[24] & 1) == 0)
      {
        v51 = *(_QWORD *)&v70[16];
        v52 = *((_QWORD *)&v69 + 1);
        v53 = *(_QWORD *)v70;
        __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
        v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 40);
        swift_bridgeObjectRetain();
        v55 = v75;
        v56 = v54(v50, v51, v52, v53);
        if (v55)
        {
          sub_24457ED14(v50, v51, 0);
          return sub_24457FE4C((uint64_t)&v68);
        }
        v59 = v56;
        sub_24457ED14(v50, v51, 0);
        v50 = v59;
      }
      result = sub_24457FE4C((uint64_t)&v68);
      *v64 = v50 == 3;
      return result;
    }
LABEL_63:
    sub_244574078((uint64_t)&v71);
    sub_2445AD054();
    swift_allocError();
    v26 = xmmword_2445C6EB0;
    goto LABEL_18;
  }
  if (v21 == 0x6E695F666F656E6FLL && v22 == 0xEB00000000786564)
  {
    swift_bridgeObjectRelease();
LABEL_78:
    result = sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)&v71);
    if (!v74)
    {
      v58 = v63;
      *v63 = v71;
      *((_BYTE *)v58 + 4) = 0;
      return result;
    }
    sub_244574078((uint64_t)&v71);
    sub_2445AD054();
    swift_allocError();
    v26 = xmmword_2445C6EA0;
    goto LABEL_18;
  }
  v57 = sub_2445C45B8();
  result = swift_bridgeObjectRelease();
  if ((v57 & 1) != 0)
    goto LABEL_78;
  return result;
}

uint64_t sub_2445AE910(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t a7, _QWORD **a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t result;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char v48;
  __int128 v51[3];
  char v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v56 = a4;
  v13 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 8))(v13);
  v16 = v14 == 1701667182 && v15 == 0xE400000000000000;
  if (v16 || (v17 = v14, v18 = v15, (sub_2445C45B8() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v51);
    if (v52 == 8)
    {
      v19 = *((_QWORD *)&v51[0] + 1);
      *a2 = *(_QWORD *)&v51[0];
      a2[1] = v19;
      return swift_bridgeObjectRelease();
    }
    sub_244574078((uint64_t)v51);
    sub_2445AD054();
    swift_allocError();
    v21 = xmmword_2445C6F10;
LABEL_9:
    *(_OWORD *)v20 = v21;
    *(_BYTE *)(v20 + 16) = 0;
    return swift_willThrow();
  }
  v23 = v17 == 0x7079745F6D756E65 && v18 == 0xE900000000000065;
  if (v23 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v25 = *a2;
    v24 = a2[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a3 = sub_244585BF8(0, a3[2] + 1, 1, a3);
    v27 = a3[2];
    v26 = a3[3];
    if (v27 >= v26 >> 1)
      a3 = sub_244585BF8((_QWORD *)(v26 > 1), v27 + 1, 1, a3);
    a3[2] = v27 + 1;
    v28 = &a3[2 * v27];
    v28[4] = v25;
    v28[5] = v24;
    swift_bridgeObjectRelease();
    sub_2445AF284((uint64_t)(a1 + 5), a3, v56);
    return swift_bridgeObjectRelease();
  }
  v29 = v17 == 0x736E6F6974706FLL && v18 == 0xE700000000000000;
  if (v29 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_2445742AC((uint64_t)(a1 + 5), (uint64_t)v51);
    if (v52 == 10)
    {
      sub_24457466C(v51, (uint64_t)v53);
      v30 = v54;
      v31 = v55;
      __swift_project_boxed_opaque_existential_1(v53, v54);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 24))(v30, v31);
      v33 = *a5;
      v34 = a5[1];
      *a5 = v32;
      a5[1] = v35;
      sub_2445747E8(v33, v34);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    }
    sub_244574078((uint64_t)v51);
    sub_2445AD054();
    swift_allocError();
    v21 = xmmword_2445C6F00;
    goto LABEL_9;
  }
  v36 = v17 == 0x745F64657473656ELL && v18 == 0xEB00000000657079;
  if (v36 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v38 = *a2;
    v37 = a2[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a3 = sub_244585BF8(0, a3[2] + 1, 1, a3);
    v40 = a3[2];
    v39 = a3[3];
    if (v40 >= v39 >> 1)
      a3 = sub_244585BF8((_QWORD *)(v39 > 1), v40 + 1, 1, a3);
    a3[2] = v40 + 1;
    v41 = &a3[2 * v40];
    v41[4] = v38;
    v41[5] = v37;
    swift_bridgeObjectRelease();
    sub_2445AF6B0(a1 + 5, a3, a6, v56);
    return swift_bridgeObjectRelease();
  }
  v42 = v17 == 0x646C656966 && v18 == 0xE500000000000000;
  if (v42 || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return sub_2445AFAA4((uint64_t)(a1 + 5));
  }
  if (v17 == 0x6F69736E65747865 && v18 == 0xE90000000000006ELL || (sub_2445C45B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v44 = *a2;
    v43 = a2[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a3 = sub_244585BF8(0, a3[2] + 1, 1, a3);
    v46 = a3[2];
    v45 = a3[3];
    if (v46 >= v45 >> 1)
      a3 = sub_244585BF8((_QWORD *)(v45 > 1), v46 + 1, 1, a3);
    a3[2] = v46 + 1;
    v47 = &a3[2 * v46];
    v47[4] = v44;
    v47[5] = v43;
    swift_bridgeObjectRelease();
    sub_2445AFDA0((uint64_t)(a1 + 5), a6);
    return swift_bridgeObjectRelease();
  }
  if (v17 == 0x65645F666F656E6FLL && v18 == 0xEA00000000006C63)
  {
    swift_bridgeObjectRelease();
    return sub_2445B016C((uint64_t)(a1 + 5), a8);
  }
  v48 = sub_2445C45B8();
  result = swift_bridgeObjectRelease();
  if ((v48 & 1) != 0)
    return sub_2445B016C((uint64_t)(a1 + 5), a8);
  return result;
}

void (*sub_2445AEF40(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_2445AF18C(v6);
  v6[10] = sub_2445AF020(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_2445AEFD0;
}

void sub_2445AEFD0(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*sub_2445AF020(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x48uLL);
  *a1 = v10;
  v10[5] = a3;
  v10[6] = v5;
  v10[4] = a2;
  v11 = *v5;
  v13 = sub_2445A14D8(a2, a3);
  *((_BYTE *)v10 + 64) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_13;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_244593458();
      goto LABEL_9;
    }
    sub_244591D4C(v16, a4 & 1);
    v19 = sub_2445A14D8(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      v13 = v19;
      goto LABEL_9;
    }
LABEL_13:
    result = (void (*)(uint64_t **))sub_2445C4648();
    __break(1u);
    return result;
  }
LABEL_9:
  v10[7] = v13;
  v21 = 0uLL;
  v22 = 0uLL;
  if ((v17 & 1) != 0)
  {
    v23 = (__int128 *)(*(_QWORD *)(*v5 + 56) + 32 * v13);
    v21 = *v23;
    v22 = v23[1];
  }
  *(_OWORD *)v10 = v21;
  *((_OWORD *)v10 + 1) = v22;
  return sub_2445AF14C;
}

void sub_2445AF14C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_2445AF1B8(*a1, *((_BYTE *)*a1 + 64), (uint64_t *)(*a1)[6], (*a1)[7], (*a1)[4], (*a1)[5]);
  sub_244577D18(*v1, v1[1], v1[2], v1[3]);
  free(v1);
}

uint64_t (*sub_2445AF18C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_2445AF1AC;
}

uint64_t sub_2445AF1AC(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_2445AF1B8(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;

  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  if (*a1)
  {
    v12 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v13 = (uint64_t *)(v12[7] + 32 * a4);
      *v13 = v8;
      v13[1] = v9;
      v13[2] = v10;
      v13[3] = v11;
    }
    else
    {
      sub_24459471C(a4, a5, a6, v8, v9, v10, v11, v12);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_2445AB408(a4, *a3);
  }
  return sub_244577CD0(v8, v9, v10, v11);
}

uint64_t sub_2445AF284(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29[3];
  char v30;
  _QWORD v31[5];
  _QWORD *v32;

  sub_2445742AC(a1, (uint64_t)v29);
  if (v30 == 10)
  {
    sub_24457466C(v29, (uint64_t)v31);
    v29[0] = 0uLL;
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v28 = xmmword_2445C6A40;
    v27 = sub_2445777D4(MEMORY[0x24BEE4AF8]);
    v6 = v31[4];
    v7 = __swift_project_boxed_opaque_existential_1(v31, v31[3]);
    MEMORY[0x24BDAC7A8](v7, v8);
    (*(void (**)(uint64_t (*)(_QWORD *)))(v6 + 88))(sub_2445B00F0);
    if (!v3)
    {
      v9 = *((_QWORD *)&v29[0] + 1);
      if (*((_QWORD *)&v29[0] + 1))
      {
        v10 = *(_QWORD *)&v29[0];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a2 = sub_244585BF8(0, a2[2] + 1, 1, a2);
        v12 = a2[2];
        v11 = a2[3];
        if (v12 >= v11 >> 1)
          a2 = sub_244585BF8((_QWORD *)(v11 > 1), v12 + 1, 1, a2);
        a2[2] = v12 + 1;
        v13 = &a2[2 * v12];
        v13[4] = v10;
        v13[5] = v9;
        swift_bridgeObjectRelease();
        v26 = a2;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2573724E0);
        sub_24459706C();
        v14 = sub_2445C41EC();
        v16 = v15;
        swift_bridgeObjectRelease();
        v17 = v32;
        if (v32[2])
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_257372308);
          v18 = sub_2445C4570();
        }
        else
        {
          v18 = MEMORY[0x24BEE4B00];
        }
        v26 = (_QWORD *)v18;
        swift_bridgeObjectRetain_n();
        sub_2445B8F80(v17, 1, &v26);
        swift_bridgeObjectRelease();
        v22 = (uint64_t)v26;
        v23 = v27;
        v24 = v28;
        sub_2445777D4(MEMORY[0x24BEE4AF8]);
        sub_24457475C(v24, *((unint64_t *)&v24 + 1));
        swift_bridgeObjectRetain();
        sub_24457475C(v24, *((unint64_t *)&v24 + 1));
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_24457475C(v24, *((unint64_t *)&v24 + 1));
        swift_bridgeObjectRetain();
        sub_2445747E8(v24, *((unint64_t *)&v24 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v24, *((unint64_t *)&v24 + 1));
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v26 = (_QWORD *)*a3;
        *a3 = 0x8000000000000000;
        sub_244593F58(v22, v24, *((uint64_t *)&v24 + 1), v23, v14, v16, isUniquelyReferenced_nonNull_native);
        *a3 = v26;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_2445AD054();
        swift_allocError();
        *(_QWORD *)v21 = 0xD00000000000001DLL;
        *(_QWORD *)(v21 + 8) = 0x80000002445C57F0;
        *(_BYTE *)(v21 + 16) = 1;
        swift_willThrow();
      }
    }
    swift_bridgeObjectRelease();
    sub_2445747E8(v28, *((unint64_t *)&v28 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    sub_244574078((uint64_t)v29);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000018;
    *(_QWORD *)(v19 + 8) = 0x80000002445C57D0;
    *(_BYTE *)(v19 + 16) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_2445AF6B0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  _QWORD v23[4];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD v32[6];
  unint64_t v33;

  sub_2445742AC(a1, (uint64_t)&v28);
  if (v31 != 10)
  {
    sub_244574078((uint64_t)&v28);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000001BLL;
    *(_QWORD *)(v8 + 8) = 0x80000002445C5870;
    *(_BYTE *)(v8 + 16) = 0;
    return swift_willThrow();
  }
  sub_24457466C(&v28, (uint64_t)v32);
  v26 = 0;
  v27 = 0xE000000000000000;
  v4 = MEMORY[0x24BEE4AF8];
  v33 = sub_244575734(MEMORY[0x24BEE4AF8]);
  v25 = v4;
  v24 = xmmword_2445C6A40;
  v5 = v32[4];
  v6 = __swift_project_boxed_opaque_existential_1(v32, v32[3]);
  MEMORY[0x24BDAC7A8](v6, v7);
  (*(void (**)(uint64_t (*)(_QWORD *)))(v5 + 88))(sub_2445B0128);
  if (!v2)
  {
    v11 = v26;
    v10 = v27;
    if ((v27 & 0xF00000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a2 = sub_244585BF8(0, a2[2] + 1, 1, a2);
      v13 = a2[2];
      v12 = a2[3];
      if (v13 >= v12 >> 1)
        a2 = sub_244585BF8((_QWORD *)(v12 > 1), v13 + 1, 1, a2);
      a2[2] = v13 + 1;
      v14 = &a2[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v28 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573724E0);
      sub_24459706C();
      v15 = sub_2445C41EC();
      v17 = v16;
      swift_bridgeObjectRelease();
      v18 = v33;
      v19 = v25;
      v20 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v20, *((unint64_t *)&v20 + 1));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v20, *((unint64_t *)&v20 + 1));
      swift_bridgeObjectRetain();
      v21 = sub_2445AEF40(v23, v15, v17);
      sub_2445ACB24(v18, v19, v20, *((unint64_t *)&v20 + 1), 2, &v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v20, *((unint64_t *)&v20 + 1));
      sub_244577D18(v28, *((uint64_t *)&v28 + 1), v29, v30);
      ((void (*)(_QWORD *, _QWORD))v21)(v23, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v20, *((unint64_t *)&v20 + 1));
      swift_bridgeObjectRelease();
      sub_2445747E8(v20, *((unint64_t *)&v20 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v22 = 0xD00000000000001FLL;
    *(_QWORD *)(v22 + 8) = 0x80000002445C5890;
    *(_BYTE *)(v22 + 16) = 1;
    swift_willThrow();
  }
  sub_2445747E8(v24, *((unint64_t *)&v24 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

uint64_t sub_2445AFAA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8[3];
  char v9;
  _QWORD v10[5];

  sub_2445742AC(a1, (uint64_t)v8);
  if (v9 == 10)
  {
    sub_24457466C(v8, (uint64_t)v10);
    v8[0] = 0uLL;
    v2 = v10[4];
    v3 = __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    MEMORY[0x24BDAC7A8](v3, v4);
    (*(void (**)(uint64_t (*)(_QWORD *)))(v2 + 88))(sub_2445B0440);
    if (!v1)
    {
      sub_2445AD054();
      swift_allocError();
      *(_QWORD *)v5 = 0xD000000000000015;
      *(_QWORD *)(v5 + 8) = 0x80000002445C5830;
      *(_BYTE *)(v5 + 16) = 1;
      swift_willThrow();
    }
    sub_2445747E8(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    sub_244574078((uint64_t)v8);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000010;
    *(_QWORD *)(v7 + 8) = 0x80000002445C58B0;
    *(_BYTE *)(v7 + 16) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_2445AFDA0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32[3];
  unsigned __int16 v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v5 = sub_2445C3CAC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2445742AC(a1, (uint64_t)v32);
  if (HIBYTE(v33) != 10)
  {
    sub_244574078((uint64_t)v32);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v12 = 0xD00000000000001BLL;
    *(_QWORD *)(v12 + 8) = 0x80000002445C5870;
    *(_BYTE *)(v12 + 16) = 0;
    return swift_willThrow();
  }
  sub_24457466C(v32, (uint64_t)v34);
  v10 = v35;
  v11 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 48))(v32, 0x6565646E65747865, 0xE800000000000000, v10, v11);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  if (HIBYTE(v33) >= 0xFFu)
  {
    sub_244574464((uint64_t)v32);
LABEL_12:
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v27 = 0xD000000000000023;
    *(_QWORD *)(v27 + 8) = 0x80000002445C5910;
    *(_BYTE *)(v27 + 16) = 0;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  if ((v33 & 0xFF00) != 0x800)
  {
    sub_244574078((uint64_t)v32);
    goto LABEL_12;
  }
  sub_2445C3C70();
  sub_244597C30();
  v14 = sub_2445C4474();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v17 = v14;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v32[0] = *a2;
  v19 = *(_QWORD *)&v32[0];
  *a2 = 0x8000000000000000;
  v21 = sub_2445A14D8(v17, v16);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
    goto LABEL_19;
  }
  LOBYTE(v9) = v20;
  if (*(_QWORD *)(v19 + 24) >= v24)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_14;
LABEL_19:
    sub_244593458();
    goto LABEL_14;
  }
  sub_244591D4C(v24, isUniquelyReferenced_nonNull_native);
  v25 = sub_2445A14D8(v17, v16);
  if ((v9 & 1) == (v26 & 1))
  {
    v21 = v25;
LABEL_14:
    *a2 = *(_QWORD *)&v32[0];
    swift_bridgeObjectRelease();
    v28 = (_QWORD *)*a2;
    swift_bridgeObjectRetain();
    if ((v9 & 1) == 0)
    {
      v29 = MEMORY[0x24BEE4AF8];
      v30 = sub_244575734(MEMORY[0x24BEE4AF8]);
      sub_24459471C(v21, v17, v16, v30, v29, 0, 0xF000000000000000, v28);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    sub_2445AFAA4(a1);
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  result = sub_2445C4648();
  __break(1u);
  return result;
}

uint64_t sub_2445B00F0(_QWORD *a1)
{
  uint64_t v1;

  return sub_2445AD2D0(a1, *(_QWORD **)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD ***)(v1 + 40));
}

uint64_t sub_2445B010C(_QWORD *a1)
{
  uint64_t v1;

  return sub_2445AD7D0(a1, *(_QWORD **)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_2445B0128(_QWORD *a1)
{
  uint64_t v1;

  return sub_2445AE910(a1, *(uint64_t **)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD **)(v1 + 32), *(uint64_t **)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD ***)(v1 + 64));
}

uint64_t sub_2445B014C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (result != 1)
    return sub_244577CD0(result, a2, a3, a4);
  return result;
}

uint64_t sub_2445B015C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (result != 1)
    return sub_244577D18(result, a2, a3, a4);
  return result;
}

uint64_t sub_2445B016C(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28[3];
  unsigned __int16 v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  sub_2445742AC(a1, (uint64_t)v28);
  if (HIBYTE(v29) != 10)
  {
    sub_244574078((uint64_t)v28);
    sub_2445AD054();
    swift_allocError();
    *(_QWORD *)v6 = 0xD000000000000010;
    *(_QWORD *)(v6 + 8) = 0x80000002445C58F0;
    *(_BYTE *)(v6 + 16) = 0;
    return swift_willThrow();
  }
  sub_24457466C(v28, (uint64_t)v30);
  v4 = v31;
  v5 = v32;
  __swift_project_boxed_opaque_existential_1(v30, v31);
  (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 48))(v28, 1701667182, 0xE400000000000000, v4, v5);
  if (!v2)
  {
    if (HIBYTE(v29) >= 0xFFu)
    {
      sub_244574464((uint64_t)v28);
LABEL_9:
      sub_2445AD054();
      swift_allocError();
      *(_OWORD *)v11 = xmmword_2445C6E80;
      *(_BYTE *)(v11 + 16) = 0;
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    }
    if ((v29 & 0xFF00) != 0x800)
    {
      sub_244574078((uint64_t)v28);
      goto LABEL_9;
    }
    v8 = v28[0];
    v9 = v31;
    v10 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 48))(v28, 0x736E6F6974706FLL, 0xE700000000000000, v9, v10);
    if (HIBYTE(v29) < 0xFFu)
    {
      if ((v29 & 0xFF00) == 0xA00)
      {
        sub_24457466C(v28, (uint64_t)v25);
        v12 = v26;
        v13 = v27;
        __swift_project_boxed_opaque_existential_1(v25, v26);
        v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
        v16 = v15;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
LABEL_17:
        v17 = *a2;
        sub_24457475C(v14, v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = sub_244585F64(0, v17[2] + 1, 1, v17);
        v18 = v17[2];
        v19 = v17[3];
        v20 = v18 + 1;
        if (v18 >= v19 >> 1)
        {
          v33 = v18 + 1;
          v22 = v17;
          v23 = v18;
          v24 = sub_244585F64((_QWORD *)(v19 > 1), v18 + 1, 1, v22);
          v18 = v23;
          v20 = v33;
          v17 = v24;
        }
        v17[2] = v20;
        v21 = &v17[4 * v18];
        *((_OWORD *)v21 + 2) = v8;
        v21[6] = v14;
        v21[7] = v16;
        sub_2445747E8(v14, v16);
        *a2 = v17;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      }
      sub_244574078((uint64_t)v28);
    }
    else
    {
      sub_244574464((uint64_t)v28);
    }
    v14 = 0;
    v16 = 0xF000000000000000;
    goto LABEL_17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t sub_2445B0440(_QWORD *a1)
{
  uint64_t v1;

  return sub_2445ADA98(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), *(char **)(v1 + 40), *(uint64_t **)(v1 + 48), *(BOOL **)(v1 + 56), *(_DWORD **)(v1 + 64));
}

uint64_t sub_2445B0464(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v7 = *a3;
  v8 = *((_QWORD *)a3 + 1);
  v9 = *((_QWORD *)a3 + 2);
  v10 = *((_QWORD *)a3 + 3);
  v11 = a3[32];
  v12 = *((_DWORD *)a3 + 9);
  v13 = a3[40];
  v15 = *((_QWORD *)a3 + 6);
  v14 = *((_QWORD *)a3 + 7);
  *(_BYTE *)(v5 + 88) = 1;
  *(_BYTE *)(v5 + 74) = v11;
  *(_QWORD *)(v5 + 80) = v10;
  *(_DWORD *)(v5 + 152) = v12;
  *(_BYTE *)(v5 + 156) = v13;
  LOBYTE(v26) = v7;
  *((_QWORD *)&v26 + 1) = v8;
  *(_QWORD *)&v27 = v9;
  *(_QWORD *)&v28 = a5;
  swift_unknownObjectWeakInit();
  BYTE9(v28) = 0;
  sub_2445B12EC((uint64_t)&v26, v5 + 32);
  ObjectType = swift_getObjectType();
  swift_bridgeObjectRetain();
  swift_retain();
  if ((sub_24458D05C(ObjectType, a5) & 1) != 0)
  {
    if (v14 >> 60 == 15)
    {
      v29 = 0;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
    }
    else
    {
      sub_244574770(v15, v14);
      sub_24458D0CC(ObjectType, a5);
      if (v22)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_2445747E8(v15, v14);
        swift_release();
        sub_2445747E8(v15, v14);
        sub_2445B1320(v5 + 32);
        swift_deallocPartialClassInstance();
        return v5;
      }
      v18 = v24;
      v19 = v25;
      __swift_project_boxed_opaque_existential_1(v23, v24);
      (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v19 + 80))(&v26, v15, v14, v18, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_2445747E8(v15, v14);
    sub_2445747E8(v15, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_2445747E8(v15, v14);
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
  }
  v17 = v30;
  sub_244583F10((uint64_t)&v26, v5 + 96);
  swift_release();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v17;
  return v5;
}

uint64_t sub_2445B06C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[41];
  char v19;
  __int128 v20[3];
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _BYTE v25[41];
  char v26;

  v4 = v1 + 32;
  swift_beginAccess();
  sub_2445B11D8(v1 + 32, (uint64_t)v25);
  if (v26)
  {
    v5 = (__int128 *)v25;
    if (v26 == 1)
      return sub_244597898((uint64_t)v5, a1);
    sub_2445B12B8();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v13 = Strong;
      *(_QWORD *)(a1 + 24) = type metadata accessor for ProtoMessageSchema();
      *(_QWORD *)(a1 + 32) = &off_2515301C0;
      *(_QWORD *)a1 = v13;
      result = sub_2445B12C8((uint64_t)v18);
LABEL_11:
      *(_BYTE *)(a1 + 40) = 1;
      return result;
    }
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000012;
    *(_QWORD *)(v15 + 8) = 0x80000002445C59B0;
    *(_BYTE *)(v15 + 16) = 2;
    swift_willThrow();
    return sub_2445B12C8((uint64_t)v18);
  }
  else
  {
    sub_2445B120C((uint64_t)v25, (uint64_t)v21);
    if (MEMORY[0x249512F50](v24))
    {
      v7 = v24[1];
      if (v21[0] == 9)
      {
        v8 = v23;
        if (v23)
        {
          v9 = v22;
          ObjectType = swift_getObjectType();
          v11 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 24);
          swift_bridgeObjectRetain();
          v11(v20, v9, v8, ObjectType, v7);
          if (!v2)
          {
            swift_bridgeObjectRelease();
            sub_244577E90((uint64_t)v20, (uint64_t)&v17);
            __swift_instantiateConcreteTypeFromMangledName(&qword_2573725F8);
            type metadata accessor for ProtoMessageSchema();
            swift_dynamicCast();
            swift_weakInit();
            swift_unknownObjectRelease();
            swift_release();
            sub_2445B1254((uint64_t)v21);
            v19 = 2;
            swift_beginAccess();
            sub_2445B1284((uint64_t)v18, v4);
            swift_endAccess();
            result = sub_24457466C(v20, a1);
            goto LABEL_11;
          }
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_244578600();
          swift_allocError();
          *(_OWORD *)v16 = xmmword_2445C6F20;
          *(_BYTE *)(v16 + 16) = 7;
          swift_willThrow();
          swift_unknownObjectRelease();
        }
      }
      else
      {
        v18[0] = v21[0];
        swift_bridgeObjectRetain();
        TypeSchemaDescription.init(manifest:typeName:store:)((uint64_t)v18);
        if (!v2)
        {
          sub_2445B1254((uint64_t)v21);
          sub_24457403C((uint64_t)v20, (uint64_t)v18);
          v19 = 1;
          swift_beginAccess();
          sub_2445B1284((uint64_t)v18, v4);
          swift_endAccess();
          v5 = v20;
          return sub_244597898((uint64_t)v5, a1);
        }
      }
    }
    else
    {
      sub_244578600();
      swift_allocError();
      *(_QWORD *)v14 = 0xD000000000000012;
      *(_QWORD *)(v14 + 8) = 0x80000002445C59B0;
      *(_BYTE *)(v14 + 16) = 2;
      swift_willThrow();
    }
    return sub_2445B1254((uint64_t)v21);
  }
}

uint64_t sub_2445B0A50()
{
  uint64_t v0;

  sub_2445B1320(v0 + 32);
  return sub_2445752F4(v0 + 96);
}

uint64_t sub_2445B0A6C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2445B1320(v0 + 32);
  sub_2445752F4(v0 + 96);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProtoFieldSchema()
{
  return objc_opt_self();
}

uint64_t destroy for ProtoFieldSchema.FieldContainer(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(result + 41);
  if (v1 >= 3)
    v1 = *(_DWORD *)result + 3;
  if (v1 == 2)
    return swift_weakDestroy();
  if (v1 == 1)
  {
    v2 = *(unsigned __int8 *)(result + 40);
    if (v2 >= 2)
      v2 = *(_DWORD *)result + 2;
    if (v2 <= 1)
      return __swift_destroy_boxed_opaque_existential_1(result);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectWeakDestroy();
  }
  return result;
}

uint64_t initializeWithCopy for ProtoFieldSchema.FieldContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v4 = *(unsigned __int8 *)(a2 + 41);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    swift_weakCopyInit();
    v7 = 2;
  }
  else if (v4 == 1)
  {
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      v7 = 1;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      if (v5)
      {
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
      }
      v7 = 1;
    }
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v8;
    swift_bridgeObjectRetain();
    swift_unknownObjectWeakCopyInit();
    v7 = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_BYTE *)(a1 + 41) = v7;
  return a1;
}

uint64_t assignWithCopy for ProtoFieldSchema.FieldContainer(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      swift_weakDestroy();
    }
    else if (v4 == 1)
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2)
        v5 = *(_DWORD *)a1 + 2;
      if (v5 <= 1)
        __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakDestroy();
    }
    v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 3)
      v6 = *(_DWORD *)a2 + 3;
    if (v6 == 2)
    {
      swift_weakCopyInit();
      v9 = 2;
    }
    else if (v6 == 1)
    {
      v7 = *((unsigned __int8 *)a2 + 40);
      if (v7 >= 2)
        v7 = *(_DWORD *)a2 + 2;
      if (v7 == 1)
      {
        v10 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v10;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
        v9 = 1;
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        if (v7)
        {
          v11 = *a2;
          v12 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v11;
          *(_OWORD *)(a1 + 16) = v12;
        }
        else
        {
          v8 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 24) = v8;
          *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
          *(_BYTE *)(a1 + 40) = 0;
        }
        v9 = 1;
      }
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_unknownObjectWeakCopyInit();
      v9 = 0;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    }
    *(_BYTE *)(a1 + 41) = v9;
  }
  return a1;
}

uint64_t initializeWithTake for ProtoFieldSchema.FieldContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(a2 + 41);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    swift_weakTakeInit();
    v7 = 2;
  }
  else if (v4 == 1)
  {
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
      v7 = 1;
    }
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    swift_unknownObjectWeakTakeInit();
    v7 = 0;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_BYTE *)(a1 + 41) = v7;
  return a1;
}

uint64_t assignWithTake for ProtoFieldSchema.FieldContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  char v9;
  __int128 v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      swift_weakDestroy();
    }
    else if (v4 == 1)
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2)
        v5 = *(_DWORD *)a1 + 2;
      if (v5 <= 1)
        __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakDestroy();
    }
    v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 3)
      v6 = *(_DWORD *)a2 + 3;
    if (v6 == 2)
    {
      swift_weakTakeInit();
      v9 = 2;
    }
    else if (v6 == 1)
    {
      v7 = *(unsigned __int8 *)(a2 + 40);
      if (v7 >= 2)
        v7 = *(_DWORD *)a2 + 2;
      if (v7 == 1)
      {
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v9 = 1;
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        if (v7)
        {
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_BYTE *)(a1 + 40) = 0;
        }
        v9 = 1;
      }
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      swift_unknownObjectWeakTakeInit();
      v9 = 0;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 41) = v9;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoFieldSchema.FieldContainer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProtoFieldSchema.FieldContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = -(char)a2;
  }
  return result;
}

uint64_t sub_2445B1110(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_2445B112C(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProtoFieldSchema.FieldContainer()
{
  return &type metadata for ProtoFieldSchema.FieldContainer;
}

uint64_t sub_2445B1164()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 74);
}

uint64_t sub_2445B1170()
{
  return 1;
}

uint64_t sub_2445B1178@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_24457A3E8(*v1 + 96, a1);
}

unint64_t sub_2445B1188()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)v0 + 152) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v0 + 156) << 32);
}

uint64_t sub_2445B11AC()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 80);
}

uint64_t sub_2445B11B8@<X0>(uint64_t a1@<X8>)
{
  return sub_2445B06C4(a1);
}

uint64_t sub_2445B11D8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ProtoFieldSchema.FieldContainer(a2, a1);
  return a2;
}

uint64_t sub_2445B120C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return a2;
}

uint64_t sub_2445B1254(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_2445B1284(uint64_t a1, uint64_t a2)
{
  assignWithTake for ProtoFieldSchema.FieldContainer(a2, a1);
  return a2;
}

uint64_t sub_2445B12B8()
{
  return swift_weakTakeInit();
}

uint64_t sub_2445B12C8(uint64_t a1)
{
  swift_weakDestroy();
  return a1;
}

uint64_t sub_2445B12EC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ProtoFieldSchema.FieldContainer(a2, a1);
  return a2;
}

uint64_t sub_2445B1320(uint64_t a1)
{
  destroy for ProtoFieldSchema.FieldContainer(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoFieldSchema.MessageFieldType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProtoFieldSchema.MessageFieldType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ProtoFieldSchema.MessageFieldType()
{
  return &type metadata for ProtoFieldSchema.MessageFieldType;
}

uint64_t destroy for ProtoFieldSchema.Config()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for ProtoFieldSchema.Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ProtoFieldSchema.Config(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t initializeWithTake for ProtoFieldSchema.Config(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ProtoFieldSchema.Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoFieldSchema.Config(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 32) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)(a1 + 24) & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProtoFieldSchema.Config(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      *(_QWORD *)(result + 32) = 1;
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProtoFieldSchema.Config()
{
  return &type metadata for ProtoFieldSchema.Config;
}

uint64_t sub_2445B15E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t result;

  v1 = *v0;
  v2 = v0[3];
  if (*v0)
  {
    if (v0[1] - v1 < v2)
    {
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
    v3 = (unsigned int *)(v1 + v2);
    v4 = __OFADD__(v2, 4);
    v5 = v2 + 4;
    if (!v4)
    {
LABEL_4:
      result = *v3;
      v0[3] = v5;
      return result;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= 0)
  {
    v3 = 0;
    v4 = __OFADD__(v2, 4);
    v5 = v2 + 4;
    if (!v4)
      goto LABEL_4;
    goto LABEL_8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_2445B1638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76[2];
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  result = sub_24457403C(a1, (uint64_t)&v77);
  if (!v81)
  {
    sub_24457466C(&v77, (uint64_t)v76);
    v10 = *v2;
    if (*v2)
    {
      v11 = v2[1] - v10;
      v12 = v2[3];
      if (v12 >= v11)
        goto LABEL_31;
    }
    else
    {
      v12 = v2[3];
      if ((v12 & 0x8000000000000000) == 0)
        goto LABEL_31;
      v11 = 0;
    }
    LODWORD(v16) = *(unsigned __int8 *)(v10 + v12);
    v17 = v12 + 1;
    if ((*(char *)(v10 + v12) & 0x80000000) == 0)
    {
      v2[3] = v17;
LABEL_19:
      v18 = (int)v16;
      result = sub_24457466C(v76, a2);
      *(_QWORD *)(a2 + 40) = v18;
      *(_QWORD *)(a2 + 48) = 0;
      *(_WORD *)(a2 + 56) = 1793;
      return result;
    }
    if (v17 < v11)
    {
      v16 &= 0x7Fu;
      v22 = v10 + 1;
      v23 = 7;
      while (1)
      {
        v24 = v12 + 2;
        v16 |= (unint64_t)(*(_BYTE *)(v22 + v12) & 0x7F) << v23;
        if ((*(_BYTE *)(v22 + v12) & 0x80) == 0)
          break;
        if (v24 < v11)
        {
          ++v12;
          v25 = v23 >= 0x39;
          v23 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_31;
      }
      v2[3] = v24;
      goto LABEL_19;
    }
LABEL_31:
    sub_24457FE80();
    swift_allocError();
    *(_QWORD *)v26 = 1;
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_WORD *)(v26 + 104) = 512;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  }
  if (v81 != 2)
    goto LABEL_157;
  if (!(v79 | v80 | (unint64_t)v77 | v78 | *((_QWORD *)&v77 + 1)))
  {
    v13 = *v2;
    if (*v2)
    {
      v14 = v2[1] - v13;
      v15 = v2[3];
      if (v15 >= v14)
        goto LABEL_170;
    }
    else
    {
      v15 = v2[3];
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_170;
      v14 = 0;
    }
    LODWORD(v27) = *(unsigned __int8 *)(v13 + v15);
    v28 = v15 + 1;
    if (*(char *)(v13 + v15) < 0)
    {
      if (v28 >= v14)
        goto LABEL_170;
      v27 &= 0x7Fu;
      v31 = v13 + 1;
      v32 = 7;
      while (1)
      {
        v33 = v15 + 2;
        v27 |= (unint64_t)(*(_BYTE *)(v31 + v15) & 0x7F) << v32;
        if ((*(_BYTE *)(v31 + v15) & 0x80) == 0)
          break;
        if (v33 < v14)
        {
          ++v15;
          v25 = v32 >= 0x39;
          v32 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_170;
      }
      v2[3] = v33;
    }
    else
    {
      v2[3] = v28;
    }
    *(_DWORD *)a2 = v27;
    *(_BYTE *)(a2 + 57) = 0;
    return result;
  }
  v6 = v79 | v80 | v78 | *((_QWORD *)&v77 + 1);
  if ((_QWORD)v77 == 1 && !v6)
  {
    v7 = *v2;
    if (*v2)
    {
      v8 = v2[1] - v7;
      v9 = v2[3];
      if (v9 >= v8)
        goto LABEL_170;
    }
    else
    {
      v9 = v2[3];
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_170;
      v8 = 0;
    }
    LODWORD(v29) = *(unsigned __int8 *)(v7 + v9);
    v30 = v9 + 1;
    if ((*(char *)(v7 + v9) & 0x80000000) == 0)
    {
      v2[3] = v30;
LABEL_45:
      *(_DWORD *)a2 = v29;
      goto LABEL_46;
    }
    if (v30 < v8)
    {
      v29 &= 0x7Fu;
      v36 = v7 + 1;
      v37 = 7;
      while (1)
      {
        v38 = v9 + 2;
        v29 |= (unint64_t)(*(_BYTE *)(v36 + v9) & 0x7F) << v37;
        if ((*(_BYTE *)(v36 + v9) & 0x80) == 0)
          break;
        if (v38 < v8)
        {
          ++v9;
          v25 = v37 >= 0x39;
          v37 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_170;
      }
      v2[3] = v38;
      goto LABEL_45;
    }
LABEL_170:
    sub_24457FE80();
    swift_allocError();
    *(_QWORD *)v75 = 1;
    *(_OWORD *)(v75 + 8) = 0u;
    *(_OWORD *)(v75 + 24) = 0u;
    *(_OWORD *)(v75 + 40) = 0u;
    *(_OWORD *)(v75 + 56) = 0u;
    *(_OWORD *)(v75 + 72) = 0u;
    *(_OWORD *)(v75 + 88) = 0u;
    *(_WORD *)(v75 + 104) = 512;
    return swift_willThrow();
  }
  if ((_QWORD)v77 == 2 && !v6)
  {
    v19 = *v2;
    if (*v2)
    {
      v20 = v2[1] - v19;
      v21 = v2[3];
      if (v21 >= v20)
        goto LABEL_170;
    }
    else
    {
      v21 = v2[3];
      if ((v21 & 0x8000000000000000) == 0)
        goto LABEL_170;
      v20 = 0;
    }
    LODWORD(v34) = *(unsigned __int8 *)(v19 + v21);
    v35 = v21 + 1;
    if (*(char *)(v19 + v21) < 0)
    {
      if (v35 >= v20)
        goto LABEL_170;
      v34 &= 0x7Fu;
      v42 = v19 + 1;
      v43 = 7;
      while (1)
      {
        v44 = v21 + 2;
        v34 |= (unint64_t)(*(_BYTE *)(v42 + v21) & 0x7F) << v43;
        if ((*(_BYTE *)(v42 + v21) & 0x80) == 0)
          break;
        if (v44 < v20)
        {
          ++v21;
          v25 = v43 >= 0x39;
          v43 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_170;
      }
      v2[3] = v44;
    }
    else
    {
      v2[3] = v35;
    }
    *(_DWORD *)a2 = -(v34 & 1) ^ (v34 >> 1);
    *(_BYTE *)(a2 + 57) = 0;
    return result;
  }
  if ((_QWORD)v77 == 3 && !v6)
  {
    result = sub_2445B15E4();
    if (v3)
      return result;
    *(_DWORD *)a2 = result;
LABEL_46:
    *(_BYTE *)(a2 + 57) = 1;
    return result;
  }
  if ((_QWORD)v77 == 4 && !v6)
  {
    result = sub_2445B15E4();
    if (!v3)
    {
      *(_DWORD *)a2 = result;
      *(_BYTE *)(a2 + 57) = 0;
    }
    return result;
  }
  if ((_QWORD)v77 == 5 && !v6)
  {
    v39 = *v2;
    if (*v2)
    {
      v40 = v2[1] - v39;
      v41 = v2[3];
      if (v41 >= v40)
        goto LABEL_170;
    }
    else
    {
      v41 = v2[3];
      if ((v41 & 0x8000000000000000) == 0)
        goto LABEL_170;
      v40 = 0;
    }
    v51 = *(unsigned __int8 *)(v39 + v41);
    v52 = v41 + 1;
    if (*(char *)(v39 + v41) < 0)
    {
      if (v52 >= v40)
        goto LABEL_170;
      v51 &= 0x7Fu;
      v55 = v39 + 1;
      v56 = 7;
      while (1)
      {
        v57 = v41 + 2;
        v51 |= (unint64_t)(*(_BYTE *)(v55 + v41) & 0x7F) << v56;
        if ((*(_BYTE *)(v55 + v41) & 0x80) == 0)
          break;
        if (v57 < v40)
        {
          ++v41;
          v25 = v56 >= 0x39;
          v56 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_170;
      }
      v2[3] = v57;
    }
    else
    {
      v2[3] = v52;
    }
    *(_QWORD *)a2 = v51;
LABEL_100:
    *(_BYTE *)(a2 + 57) = 2;
    return result;
  }
  if ((_QWORD)v77 == 6 && !v6)
  {
    v45 = *v2;
    if (*v2)
    {
      v46 = v2[1] - v45;
      v47 = v2[3];
      if (v47 >= v46)
        goto LABEL_170;
    }
    else
    {
      v47 = v2[3];
      if ((v47 & 0x8000000000000000) == 0)
        goto LABEL_170;
      v46 = 0;
    }
    v53 = *(unsigned __int8 *)(v45 + v47);
    v54 = v47 + 1;
    if (*(char *)(v45 + v47) < 0)
    {
      if (v54 >= v46)
        goto LABEL_170;
      v53 &= 0x7Fu;
      v60 = v45 + 1;
      v61 = 7;
      while (1)
      {
        v62 = v47 + 2;
        v53 |= (unint64_t)(*(_BYTE *)(v60 + v47) & 0x7F) << v61;
        if ((*(_BYTE *)(v60 + v47) & 0x80) == 0)
          break;
        if (v62 < v46)
        {
          ++v47;
          v25 = v61 >= 0x39;
          v61 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_170;
      }
      v2[3] = v62;
    }
    else
    {
      v2[3] = v54;
    }
    *(_QWORD *)a2 = v53;
LABEL_111:
    *(_BYTE *)(a2 + 57) = 3;
    return result;
  }
  if ((_QWORD)v77 == 7 && !v6)
  {
    v48 = *v2;
    if (*v2)
    {
      v49 = v2[1] - v48;
      v50 = v2[3];
      if (v50 >= v49)
        goto LABEL_170;
    }
    else
    {
      v50 = v2[3];
      if ((v50 & 0x8000000000000000) == 0)
        goto LABEL_170;
      v49 = 0;
    }
    v58 = *(unsigned __int8 *)(v48 + v50);
    v59 = v50 + 1;
    if (*(char *)(v48 + v50) < 0)
    {
      if (v59 >= v49)
        goto LABEL_170;
      v58 &= 0x7Fu;
      v63 = v48 + 1;
      v64 = 7;
      while (1)
      {
        v65 = v50 + 2;
        v58 |= (unint64_t)(*(_BYTE *)(v63 + v50) & 0x7F) << v64;
        if ((*(_BYTE *)(v63 + v50) & 0x80) == 0)
          break;
        if (v65 < v49)
        {
          ++v50;
          v25 = v64 >= 0x39;
          v64 += 7;
          if (!v25)
            continue;
        }
        goto LABEL_170;
      }
      v2[3] = v65;
    }
    else
    {
      v2[3] = v59;
    }
    *(_QWORD *)a2 = -(uint64_t)(v58 & 1) ^ (v58 >> 1);
    goto LABEL_100;
  }
  if ((_QWORD)v77 == 8 && !v6)
  {
    result = sub_244574618();
    if (v3)
      return result;
    *(_QWORD *)a2 = result;
    goto LABEL_111;
  }
  if ((_QWORD)v77 == 9 && !v6)
  {
    result = sub_244574618();
    if (v3)
      return result;
    *(_QWORD *)a2 = result;
    goto LABEL_100;
  }
  if ((_QWORD)v77 == 10 && !v6)
  {
    result = sub_244574618();
    if (!v3)
    {
      *(_QWORD *)a2 = result;
      *(_BYTE *)(a2 + 57) = 5;
    }
    return result;
  }
  if ((_QWORD)v77 != 11 || v6)
  {
    if ((_QWORD)v77 == 12 && !v6)
    {
      v66 = *v2;
      if (*v2)
      {
        v67 = v2[1] - v66;
        v68 = v2[3];
        if (v68 >= v67)
          goto LABEL_170;
      }
      else
      {
        v68 = v2[3];
        if ((v68 & 0x8000000000000000) == 0)
          goto LABEL_170;
        v67 = 0;
      }
      v70 = *(unsigned __int8 *)(v66 + v68);
      v71 = v68 + 1;
      if (*(char *)(v66 + v68) < 0)
      {
        if (v71 >= v67)
          goto LABEL_170;
        v70 &= 0x7Fu;
        v72 = v66 + 1;
        v73 = 7;
        while (1)
        {
          v74 = v68 + 2;
          v70 |= (unint64_t)(*(_BYTE *)(v72 + v68) & 0x7F) << v73;
          if ((*(_BYTE *)(v72 + v68) & 0x80) == 0)
            break;
          if (v74 < v67)
          {
            ++v68;
            v25 = v73 >= 0x39;
            v73 += 7;
            if (!v25)
              continue;
          }
          goto LABEL_170;
        }
        v2[3] = v74;
      }
      else
      {
        v2[3] = v71;
      }
      *(_BYTE *)a2 = v70 != 0;
      *(_BYTE *)(a2 + 57) = 6;
      return result;
    }
LABEL_157:
    sub_24457FE80();
    swift_allocError();
    *(_QWORD *)v69 = 1;
    *(_OWORD *)(v69 + 8) = 0u;
    *(_OWORD *)(v69 + 24) = 0u;
    *(_OWORD *)(v69 + 40) = 0u;
    *(_OWORD *)(v69 + 56) = 0u;
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_WORD *)(v69 + 104) = 512;
    swift_willThrow();
    return sub_2445752C0((uint64_t)&v77);
  }
  result = sub_2445B15E4();
  if (!v3)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 57) = 4;
  }
  return result;
}

uint64_t sub_2445B1E38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int8x16_t v5;
  int8x8_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char v36;

  sub_24457403C(a1, (uint64_t)&v33);
  if (v36 == 1)
  {
    sub_2445752C0((uint64_t)&v33);
LABEL_11:
    sub_24457FE80();
    swift_allocError();
    *(_QWORD *)v9 = 1;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_WORD *)(v9 + 104) = 512;
    return swift_willThrow();
  }
  if (v36 == 2)
  {
    v5 = vorrq_s8(v34, v35);
    v6 = vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
    if ((unint64_t)(v33 - 13) <= 1 && *(_QWORD *)&v6 == 0)
      goto LABEL_11;
  }
  result = sub_24457403C(a1, (uint64_t)&v27);
  if (!v32)
  {
    result = sub_2445752C0((uint64_t)&v27);
    goto LABEL_16;
  }
  if (v32 == 1)
  {
    sub_2445752C0((uint64_t)&v27);
    return sub_2445752C0((uint64_t)&v33);
  }
  if (!(v30 | v31 | v27 | v29 | v28))
    goto LABEL_16;
  v10 = v30 | v31 | v29 | v28;
  if ((unint64_t)(v27 - 1) <= 1 && !v10)
    goto LABEL_16;
  if ((unint64_t)(v27 - 3) <= 1 && !v10)
  {
LABEL_37:
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 != 3)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v21 = v2[3];
    v22 = __OFADD__(v21, 4 * a2);
    v23 = v21 + 4 * a2;
    if (v22)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    v24 = *v2;
    if (*v2)
      goto LABEL_40;
    goto LABEL_53;
  }
  if ((unint64_t)(v27 - 5) <= 2 && !v10)
  {
LABEL_16:
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (!a2)
        return sub_2445752C0((uint64_t)&v33);
      v11 = 0;
      v12 = *v2;
      v13 = v2[1] - *v2;
      v14 = v2[3];
      v15 = *v2 + 1;
      while (v11 != a2)
      {
        if (v12)
        {
          v16 = v13;
          if (v14 >= v13)
            goto LABEL_33;
        }
        else
        {
          if ((v14 & 0x8000000000000000) == 0)
            goto LABEL_33;
          v16 = 0;
        }
        v17 = v14 + 1;
        if (*(char *)(v12 + v14) < 0)
        {
          if (v17 >= v16)
          {
LABEL_33:
            sub_24457FE80();
            swift_allocError();
            *(_QWORD *)v20 = 1;
            *(_OWORD *)(v20 + 8) = 0u;
            *(_OWORD *)(v20 + 24) = 0u;
            *(_OWORD *)(v20 + 40) = 0u;
            *(_OWORD *)(v20 + 56) = 0u;
            *(_OWORD *)(v20 + 72) = 0u;
            *(_OWORD *)(v20 + 88) = 0u;
            *(_WORD *)(v20 + 104) = 512;
            swift_willThrow();
            return sub_2445752C0((uint64_t)&v33);
          }
          v18 = 7;
          while (1)
          {
            v17 = v14 + 2;
            if ((*(char *)(v15 + v14) & 0x80000000) == 0)
              break;
            if (v17 < v16)
            {
              ++v14;
              v19 = v18 >= 0x39;
              v18 += 7;
              if (!v19)
                continue;
            }
            goto LABEL_33;
          }
        }
        ++v11;
        v2[3] = v17;
        v14 = v17;
        if (v11 == a2)
          return sub_2445752C0((uint64_t)&v33);
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_62;
  }
  v25 = (v27 & 0xFFFFFFFFFFFFFFFELL) == 8 || v27 == 10;
  if (!v25 || v10)
  {
    if (v27 == 11 && !v10)
      goto LABEL_37;
    if (v27 != 12 || v10)
      return sub_2445752C0((uint64_t)&v33);
    goto LABEL_16;
  }
  if ((unint64_t)(a2 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v26 = v2[3];
  v22 = __OFADD__(v26, 8 * a2);
  v23 = v26 + 8 * a2;
  if (!v22)
  {
    v24 = *v2;
    if (*v2)
    {
LABEL_40:
      if (v23 >= v2[1] - v24)
        return sub_2445752C0((uint64_t)&v33);
LABEL_54:
      v2[3] = v23;
      return sub_2445752C0((uint64_t)&v33);
    }
LABEL_53:
    if ((v23 & 0x8000000000000000) == 0)
      return sub_2445752C0((uint64_t)&v33);
    goto LABEL_54;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t SchematizedDataComposer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21[2];
  _OWORD v22[2];
  uint64_t v23;
  _BYTE v24[40];
  char v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int16 v33;

  v5 = v4;
  if (!a2)
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    v33 = -256;
    return SchematizedDataComposer.subscript.setter((uint64_t)&v29, a3, a4);
  }
  v10 = v4[3];
  v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  MessageSchemaDescribing.asPublic()(v10, v11, (uint64_t *)&v29);
  v12 = *((_QWORD *)&v30 + 1);
  v13 = v31;
  __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v30 + 1));
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v24, a3, a4, v12, v13);
  v14 = *(_OWORD *)&v24[24];
  __swift_project_boxed_opaque_existential_1(v24, *(uint64_t *)&v24[24]);
  FieldSchemaDescribing.asPublic()(v14, *((uint64_t *)&v14 + 1), v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  sub_244578644((uint64_t)&v29);
  v15 = v27;
  v16 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 56))(&v29, v15, v16);
  TypeSchemaDescription.asPublic()((uint64_t)v24);
  sub_2445752C0((uint64_t)&v29);
  if (v25)
  {
    if (v25 != 2
      || *(_QWORD *)v24 != 13
      || (v18 = vorrq_s8(*(int8x16_t *)&v24[8], *(int8x16_t *)&v24[24]),
          *(_QWORD *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))))
    {
      *(_QWORD *)&v29 = 0;
      *((_QWORD *)&v29 + 1) = 0xE000000000000000;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v29 = 0x73696D2065707954;
      *((_QWORD *)&v29 + 1) = 0xEF203A686374616DLL;
      v20 = v5[3];
      v19 = v5[4];
      __swift_project_boxed_opaque_existential_1(v5, v20);
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v20);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      sub_2445C42D0();
      result = sub_2445C454C();
      __break(1u);
      return result;
    }
    *(_QWORD *)&v29 = a1;
    *((_QWORD *)&v29 + 1) = a2;
    HIBYTE(v33) = 8;
    SchematizedDataComposer.subscript.setter((uint64_t)&v29, a3, a4);
  }
  else
  {
    v22[0] = *(_OWORD *)v24;
    v22[1] = *(_OWORD *)&v24[16];
    v23 = *(_QWORD *)&v24[32];
    sub_2445ABB94((uint64_t)v22, (uint64_t)v21);
    sub_24457466C(v21, (uint64_t)&v29);
    *((_QWORD *)&v31 + 1) = a1;
    v32 = a2;
    v33 = 1792;
    SchematizedDataComposer.subscript.setter((uint64_t)&v29, a3, a4);
    sub_2445786B8((uint64_t)v22);
  }
  return sub_2445AB61C((uint64_t)v26);
}

uint64_t SchematizedDataComposer.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[3];
  uint64_t v6;
  __int16 v7;

  if (a2 >> 60 == 15)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v7 = -256;
  }
  else
  {
    *(_QWORD *)&v5[0] = a1;
    *((_QWORD *)&v5[0] + 1) = a2;
    HIBYTE(v7) = 9;
  }
  return SchematizedDataComposer.subscript.setter((uint64_t)v5, a3, a4);
}

uint64_t SchematizedDataComposer.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;

  v5 = v4;
  if ((a2 & 1) != 0)
  {
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    v36 = -256;
    return SchematizedDataComposer.subscript.setter((uint64_t)&v32, a3, a4);
  }
  v9 = v4[3];
  v10 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  MessageSchemaDescribing.asPublic()(v9, v10, (uint64_t *)&v32);
  v11 = *((_QWORD *)&v33 + 1);
  v12 = v34;
  __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(&v25, a3, a4, v11, v12);
  v13 = *((_QWORD *)&v26 + 1);
  v14 = v27;
  __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
  FieldSchemaDescribing.asPublic()(v13, v14, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  sub_244578644((uint64_t)&v32);
  v15 = v30;
  v16 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 56))(&v32, v15, v16);
  TypeSchemaDescription.asPublic()((uint64_t)&v25);
  sub_2445752C0((uint64_t)&v32);
  if (v28)
  {
    if (v28 == 2)
    {
      if (!(*((_QWORD *)&v26 + 1) | v27 | (unint64_t)v25 | (unint64_t)v26 | *((_QWORD *)&v25 + 1)))
        goto LABEL_17;
      v18 = *((_QWORD *)&v26 + 1) | v27 | v26 | *((_QWORD *)&v25 + 1);
      if ((_QWORD)v25 == 1 && !v18)
        goto LABEL_9;
      if ((_QWORD)v25 == 2 && !v18)
        goto LABEL_17;
      if ((_QWORD)v25 == 3 && !v18)
      {
LABEL_9:
        LODWORD(v32) = a1;
        v19 = 1;
LABEL_10:
        HIBYTE(v36) = v19;
LABEL_18:
        SchematizedDataComposer.subscript.setter((uint64_t)&v32, a3, a4);
        return sub_2445AB61C((uint64_t)v29);
      }
      if ((_QWORD)v25 == 4 && !v18)
      {
LABEL_17:
        LODWORD(v32) = a1;
        HIBYTE(v36) = 0;
        goto LABEL_18;
      }
      if ((_QWORD)v25 == 5 && !v18)
        goto LABEL_32;
      if ((_QWORD)v25 == 6 && !v18)
        goto LABEL_29;
      if ((_QWORD)v25 == 7 && !v18)
        goto LABEL_32;
      if ((_QWORD)v25 == 8 && !v18)
      {
LABEL_29:
        *(_QWORD *)&v32 = a1;
        v19 = 3;
        goto LABEL_10;
      }
      if ((_QWORD)v25 == 9 && !v18)
      {
LABEL_32:
        *(_QWORD *)&v32 = a1;
        v19 = 2;
        goto LABEL_10;
      }
      if ((_QWORD)v25 == 12 && !v18)
      {
        LOBYTE(v32) = a1 != 0;
        v19 = 6;
        goto LABEL_10;
      }
    }
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v32 = 0x73696D2065707954;
    *((_QWORD *)&v32 + 1) = 0xEF203A686374616DLL;
    v21 = v5[3];
    v20 = v5[4];
    __swift_project_boxed_opaque_existential_1(v5, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    result = sub_2445C454C();
    __break(1u);
    return result;
  }
  v23[0] = v25;
  v23[1] = v26;
  v24 = v27;
  sub_2445ABB94((uint64_t)v23, (uint64_t)v22);
  sub_24457466C(v22, (uint64_t)&v32);
  *((_QWORD *)&v34 + 1) = a1;
  v35 = 0;
  v36 = 1793;
  SchematizedDataComposer.subscript.setter((uint64_t)&v32, a3, a4);
  sub_2445786B8((uint64_t)v23);
  return sub_2445AB61C((uint64_t)v29);
}

{
  return sub_2445B4BBC(a1, a2, a3, a4, 2);
}

{
  return sub_2445B4BBC(a1, a2, a3, a4, 3);
}

{
  return sub_2445B4BBC(a1, a2, a3, a4, 5);
}

uint64_t sub_2445B2BC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[56];

  v3 = *a3;
  v4 = a3[1];
  sub_244577E10(a1, (uint64_t)v6, &qword_2573722A8);
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v6, v3, v4);
}

void sub_2445B2D44(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[15];
    v4 = v2[14];
    sub_244577E10(*a1, (uint64_t)(v2 + 7), &qword_2573722A8);
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter((uint64_t)(v2 + 7), v4, v3);
    sub_2445816D0((uint64_t)v2, &qword_2573722A8);
  }
  else
  {
    v5 = v2[15];
    v6 = v2[14];
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter((uint64_t)v2, v6, v5);
  }
  free(v2);
}

uint64_t sub_2445B3154(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter(v5, v6, v3, v4);
}

void sub_2445B3214(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[3];
  v6 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter(v3, v4, v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter(v3, v4, v6, v5);
  }
  free(v2);
}

uint64_t sub_2445B3400(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD v8[3];
  uint64_t v9;
  __int16 v10;

  v3 = *a3;
  v4 = a3[1];
  v6 = *a1;
  v5 = a1[1];
  if (v5 >> 60 == 15)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v10 = -256;
  }
  else
  {
    *(_QWORD *)&v8[0] = *a1;
    *((_QWORD *)&v8[0] + 1) = v5;
    HIBYTE(v10) = 9;
  }
  swift_bridgeObjectRetain();
  sub_24457475C(v6, v5);
  return SchematizedDataComposer.subscript.setter((uint64_t)v8, v3, v4);
}

void sub_2445B34FC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    if (v4 >> 60 == 15)
    {
      v12 = 0;
      v10 = 0u;
      v11 = 0u;
      v9 = 0u;
      v13 = -256;
    }
    else
    {
      *(_QWORD *)&v9 = **a1;
      *((_QWORD *)&v9 + 1) = v4;
      HIBYTE(v13) = 9;
    }
    v5 = v2[3];
    v6 = v2[2];
    swift_bridgeObjectRetain();
    sub_24457475C(v3, v4);
    SchematizedDataComposer.subscript.setter((uint64_t)&v9, v6, v5);
    sub_2445747E8(*v2, v2[1]);
  }
  else
  {
    if (v4 >> 60 == 15)
    {
      v12 = 0;
      v10 = 0u;
      v11 = 0u;
      v9 = 0u;
      v13 = -256;
    }
    else
    {
      *(_QWORD *)&v9 = **a1;
      *((_QWORD *)&v9 + 1) = v4;
      HIBYTE(v13) = 9;
    }
    v7 = v2[3];
    v8 = v2[2];
    swift_bridgeObjectRetain();
    SchematizedDataComposer.subscript.setter((uint64_t)&v9, v8, v7);
  }
  free(v2);
}

void (*SchematizedDataComposer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v3;
  _QWORD *v7;
  char v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SchematizedDataComposer.subscript.getter(a2, a3);
  *((_BYTE *)v7 + 8) = v8 & 1;
  return sub_2445B3A48;
}

{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SchematizedDataComposer.subscript.getter(a2, a3);
  *((_BYTE *)v7 + 8) = 0;
  return sub_2445B4C7C;
}

void sub_2445B3A48(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = (*a1)[3];
  v3 = (*a1)[2];
  v4 = **a1;
  v5 = *((_BYTE *)*a1 + 8);
  swift_bridgeObjectRetain();
  SchematizedDataComposer.subscript.setter(v4, v5, v3, v2);
  free(v1);
}

uint64_t sub_2445B3C04(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _OWORD v7[3];
  uint64_t v8;
  __int16 v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = *a1;
  if (v5 == 2)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    v9 = -256;
  }
  else
  {
    LOBYTE(v7[0]) = v5 & 1;
    HIBYTE(v9) = 6;
  }
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v7, v3, v4);
}

uint64_t SchematizedDataComposer.subscript.setter(char a1, uint64_t a2, uint64_t a3)
{
  _OWORD v4[3];
  uint64_t v5;
  __int16 v6;

  if (a1 == 2)
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    v6 = -256;
  }
  else
  {
    LOBYTE(v4[0]) = a1 & 1;
    HIBYTE(v6) = 6;
  }
  return SchematizedDataComposer.subscript.setter((uint64_t)v4, a2, a3);
}

uint64_t (*SchematizedDataComposer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 24) = SchematizedDataComposer.subscript.getter(a2, a3);
  return sub_2445B3D1C;
}

{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v5 = SchematizedDataComposer.subscript.getter(a2, a3);
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 28) = BYTE4(v5) & 1;
  return sub_2445B4950;
}

uint64_t sub_2445B3D1C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[3];
  uint64_t v6;
  __int16 v7;

  v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 == 2)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v7 = -256;
  }
  else
  {
    LOBYTE(v5[0]) = v1 & 1;
    HIBYTE(v7) = 6;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v5, v3, v2);
}

uint64_t (*SchematizedDataComposer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v5 = SchematizedDataComposer.subscript.getter(a2, a3);
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 28) = BYTE4(v5) & 1;
  return sub_2445B3F50;
}

{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v5 = SchematizedDataComposer.subscript.getter(a2, a3);
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 28) = BYTE4(v5) & 1;
  return sub_2445B436C;
}

uint64_t sub_2445B3F50(uint64_t a1, uint64_t a2)
{
  return sub_2445B4374(a1, a2, 0);
}

void (*SchematizedDataComposer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SchematizedDataComposer.subscript.getter(a2, a3);
  *((_BYTE *)v7 + 8) = 0;
  return sub_2445B4130;
}

{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *v7 = SchematizedDataComposer.subscript.getter(a2, a3);
  *((_BYTE *)v7 + 8) = 0;
  return sub_2445B4644;
}

void sub_2445B4130(uint64_t **a1, uint64_t a2)
{
  sub_2445B464C(a1, a2, 2);
}

uint64_t sub_2445B42A4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[3];
  uint64_t v9;
  __int16 v10;

  v5 = *a3;
  v6 = a3[1];
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v10 = -256;
  }
  else
  {
    LODWORD(v8[0]) = *(_DWORD *)a1;
    HIBYTE(v10) = a5;
  }
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v8, v5, v6);
}

uint64_t sub_2445B436C(uint64_t a1, uint64_t a2)
{
  return sub_2445B4374(a1, a2, 1);
}

uint64_t sub_2445B4374(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[3];
  uint64_t v7;
  __int16 v8;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    v8 = -256;
  }
  else
  {
    LODWORD(v6[0]) = *(_DWORD *)(a1 + 24);
    HIBYTE(v8) = a3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)a1;
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v6, v4, v3);
}

uint64_t sub_2445B4554(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  v5 = *a3;
  v6 = a3[1];
  if ((a1[1] & 1) != 0)
  {
    v7 = 0;
    v12 = 0u;
    v11 = 0u;
    v10 = 0u;
    v13 = -256;
  }
  else
  {
    v7 = *a1;
    HIBYTE(v13) = a5;
  }
  v9 = v7;
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)&v9, v5, v6);
}

void sub_2445B4644(uint64_t **a1, uint64_t a2)
{
  sub_2445B464C(a1, a2, 3);
}

void sub_2445B464C(uint64_t **a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;

  v3 = *a1;
  v4 = **a1;
  if (((*a1)[1] & 1) != 0)
  {
    v4 = 0;
    v10 = 0u;
    v9 = 0u;
    v8 = 0u;
    v11 = -256;
  }
  else
  {
    HIBYTE(v11) = a3;
  }
  v5 = v3[3];
  v6 = v3[2];
  v7 = v4;
  swift_bridgeObjectRetain();
  SchematizedDataComposer.subscript.setter((uint64_t)&v7, v6, v5);
  free(v3);
}

uint64_t sub_2445B483C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[3];
  uint64_t v7;
  __int16 v8;

  v3 = *a3;
  v4 = a3[1];
  if ((*(_BYTE *)(a1 + 4) & 1) != 0)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    v8 = -256;
  }
  else
  {
    LODWORD(v6[0]) = *(_DWORD *)a1;
    HIBYTE(v8) = 4;
  }
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v6, v3, v4);
}

uint64_t sub_2445B48C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _OWORD v5[3];
  uint64_t v6;
  __int16 v7;

  if ((a1 & 0x100000000) != 0)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v7 = -256;
  }
  else
  {
    LODWORD(v5[0]) = a1;
    HIBYTE(v7) = a4;
  }
  return SchematizedDataComposer.subscript.setter((uint64_t)v5, a2, a3);
}

uint64_t sub_2445B4950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD v4[3];
  uint64_t v5;
  __int16 v6;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    v6 = -256;
  }
  else
  {
    LODWORD(v4[0]) = *(_DWORD *)(a1 + 24);
    HIBYTE(v6) = 4;
  }
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)a1;
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)v4, v2, v1);
}

uint64_t sub_2445B4B34(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;

  v3 = *a3;
  v4 = a3[1];
  if ((a1[1] & 1) != 0)
  {
    v10 = 0u;
    v9 = 0u;
    v8 = 0u;
    v11 = -256;
    v5 = 0;
  }
  else
  {
    v5 = *a1;
    HIBYTE(v11) = 5;
  }
  v7 = v5;
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter((uint64_t)&v7, v3, v4);
}

uint64_t sub_2445B4BBC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int16 v10;

  if ((a2 & 1) != 0)
  {
    a1 = 0;
    v9 = 0u;
    v8 = 0u;
    v7 = 0u;
    v10 = -256;
  }
  else
  {
    HIBYTE(v10) = a5;
  }
  v6 = a1;
  return SchematizedDataComposer.subscript.setter((uint64_t)&v6, a3, a4);
}

void sub_2445B4C7C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;

  v1 = *a1;
  v2 = **a1;
  if (((*a1)[1] & 1) != 0)
  {
    v8 = 0u;
    v7 = 0u;
    v6 = 0u;
    v9 = -256;
    v2 = 0;
  }
  else
  {
    HIBYTE(v9) = 5;
  }
  v3 = v1[3];
  v4 = v1[2];
  v5 = v2;
  swift_bridgeObjectRetain();
  SchematizedDataComposer.subscript.setter((uint64_t)&v5, v4, v3);
  free(v1);
}

uint64_t sub_2445B4D04@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return SchematizedDataComposer.subscript.getter(*a1, a1[1], a2);
}

uint64_t sub_2445B4D2C()
{
  return 0;
}

uint64_t sub_2445B4D3C@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  return keypath_get_1Tm(a1, SchematizedDataComposer.subscript.getter, a2);
}

uint64_t sub_2445B4D4C()
{
  return 0;
}

uint64_t sub_2445B4D5C@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  return keypath_get_1Tm(a1, SchematizedDataComposer.subscript.getter, a2);
}

uint64_t keypath_get_1Tm@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = a2(*a1, a1[1]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_2445B4D98()
{
  return 0;
}

uint64_t sub_2445B4DA8@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_2445B4DDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *a3;
  v4 = a3[1];
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  swift_bridgeObjectRetain();
  return SchematizedDataComposer.subscript.setter(v5, v6, v3, v4);
}

uint64_t sub_2445B4E30()
{
  return 0;
}

uint64_t sub_2445B4E40@<X0>(uint64_t *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_2445B4E70()
{
  return 0;
}

uint64_t sub_2445B4E80@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_17Tm(a1, SchematizedDataComposer.subscript.getter, a2);
}

uint64_t sub_2445B4E8C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445B42A4(a1, a2, a3, a4, 0);
}

uint64_t sub_2445B4EA4()
{
  return 0;
}

uint64_t sub_2445B4EB4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_2445B4EE4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445B4554(a1, a2, a3, a4, 2);
}

uint64_t sub_2445B4EFC()
{
  return 0;
}

uint64_t sub_2445B4F0C@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_17Tm(a1, SchematizedDataComposer.subscript.getter, a2);
}

uint64_t sub_2445B4F18(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445B42A4(a1, a2, a3, a4, 1);
}

uint64_t sub_2445B4F30()
{
  return 0;
}

uint64_t sub_2445B4F40@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_2445B4F70(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_2445B4554(a1, a2, a3, a4, 3);
}

uint64_t sub_2445B4F88()
{
  return 0;
}

uint64_t sub_2445B4F98@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return keypath_get_17Tm(a1, SchematizedDataComposer.subscript.getter, a2);
}

uint64_t keypath_get_17Tm@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = a2(*a1, a1[1]);
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_2445B4FDC()
{
  return 0;
}

uint64_t sub_2445B4FEC@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = SchematizedDataComposer.subscript.getter(*a1, a1[1]);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_2445B5020()
{
  return 0;
}

uint64_t OneofManifest.init(name:options:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t OneofManifest.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OneofManifest.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OneofManifest.name.modify())()
{
  return nullsub_1;
}

uint64_t OneofManifest.options.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_24457475C(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t OneofManifest.options.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_2445747E8(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*OneofManifest.options.modify())()
{
  return nullsub_1;
}

BOOL _s17PoirotSchematizer13OneofManifestV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  _BOOL8 result;
  char v9;
  char v10;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_2445C45B8(), result = 0, (v7 & 1) != 0))
  {
    if (v3 >> 60 == 15)
    {
      if (v4 >> 60 == 15)
        return 1;
    }
    else if (v4 >> 60 != 15)
    {
      sub_24457475C(v2, v3);
      sub_24457475C(v5, v4);
      sub_24458C824(v2, v3);
      v10 = v9;
      sub_2445747E8(v5, v4);
      sub_2445747E8(v2, v3);
      return (v10 & 1) != 0;
    }
    sub_24457475C(v2, v3);
    sub_24457475C(v5, v4);
    sub_2445747E8(v2, v3);
    sub_2445747E8(v5, v4);
    return 0;
  }
  return result;
}

uint64_t destroy for OneofManifest(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >> 60 != 15)
    return sub_2445747FC(*(_QWORD *)(a1 + 16), v3);
  return result;
}

uint64_t initializeWithCopy for OneofManifest(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    v6 = *(_QWORD *)v4;
    sub_244574770(v6, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
  }
  return a1;
}

_QWORD *assignWithCopy for OneofManifest(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  v5 = a2[3];
  if (a1[3] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_244574770(*v4, v5);
      v8 = a1[2];
      v9 = a1[3];
      a1[2] = v7;
      a1[3] = v5;
      sub_2445747FC(v8, v9);
      return a1;
    }
    sub_2445750B4((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_244574770(*v4, v5);
  a1[2] = v6;
  a1[3] = v5;
  return a1;
}

_QWORD *assignWithTake for OneofManifest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2 + 2;
  v6 = a1[3];
  if (v6 >> 60 != 15)
  {
    v7 = a2[3];
    if (v7 >> 60 != 15)
    {
      v8 = a1[2];
      a1[2] = *v5;
      a1[3] = v7;
      sub_2445747FC(v8, v6);
      return a1;
    }
    sub_2445750B4((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for OneofManifest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OneofManifest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OneofManifest()
{
  return &type metadata for OneofManifest;
}

uint64_t sub_2445B54D8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v40 = MEMORY[0x24BEE4AF8];
  sub_2445A1728(0, v1, 0);
  v2 = v40;
  result = sub_2445BC590(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v27 = v3 + 80;
  v28 = v1;
  v29 = v5;
  v30 = v3 + 64;
  v31 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v32 = v7;
    v12 = *(_QWORD *)(v3 + 56);
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v14 = v13[1];
    v33 = *v13;
    v15 = (char *)(v12 + (v6 << 6));
    v34 = *v15;
    v16 = *((_QWORD *)v15 + 2);
    v39 = *((_QWORD *)v15 + 1);
    v38 = *((_QWORD *)v15 + 3);
    v36 = *((_DWORD *)v15 + 9);
    v37 = v15[32];
    v35 = v15[40];
    v17 = *((_QWORD *)v15 + 6);
    v18 = *((_QWORD *)v15 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_2445747E8(v17, v18);
    v20 = *(_QWORD *)(v40 + 16);
    v19 = *(_QWORD *)(v40 + 24);
    if (v20 >= v19 >> 1)
      result = sub_2445A1728(v19 > 1, v20 + 1, 1);
    *(_QWORD *)(v40 + 16) = v20 + 1;
    v21 = v40 + 80 * v20;
    *(_QWORD *)(v21 + 32) = v33;
    *(_QWORD *)(v21 + 40) = v14;
    *(_BYTE *)(v21 + 48) = v34;
    *(_QWORD *)(v21 + 56) = v39;
    *(_QWORD *)(v21 + 64) = v16;
    *(_QWORD *)(v21 + 72) = v38;
    *(_BYTE *)(v21 + 80) = v37;
    *(_DWORD *)(v21 + 84) = v36;
    *(_BYTE *)(v21 + 88) = v35;
    *(_QWORD *)(v21 + 96) = v17;
    *(_QWORD *)(v21 + 104) = v18;
    v3 = v31;
    v9 = 1 << *(_BYTE *)(v31 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v11);
    if ((v22 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v29;
    if (*(_DWORD *)(v31 + 36) != v29)
      goto LABEL_27;
    v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v28;
    }
    else
    {
      v24 = v11 + 1;
      v25 = (unint64_t)(v9 + 63) >> 6;
      v10 = v28;
      if (v11 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            v26 = *(_QWORD *)(v27 + 8 * v11++);
            if (v26)
            {
              v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v32 + 1;
    v6 = v9;
    if (v32 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2445B57E4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2445A1744(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      sub_244577E90(v4, (uint64_t)v8);
      v9 = v2;
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_2445A1744(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_24457466C(v8, v2 + 40 * v6 + 32);
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2445B58C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, __int128 *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  int64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int128 v31;
  _OWORD v32[4];
  char v33;
  uint64_t (*v34)(_QWORD, _QWORD, __int128 *);

  v34 = a2;
  v23 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    sub_244595224(*(_QWORD *)(a1 + 56) + 72 * i, (uint64_t)v32);
    *(_QWORD *)&v31 = v16;
    *((_QWORD *)&v31 + 1) = v17;
    v27 = v32[1];
    v28 = v32[2];
    v29 = v32[3];
    v30 = v33;
    v25 = v31;
    v26 = v32[0];
    v18 = v31;
    swift_bridgeObjectRetain();
    v19 = v34(v18, *((_QWORD *)&v18 + 1), &v26);
    if (v3)
    {
      sub_2445816D0((uint64_t)&v25, &qword_257372608);
      return swift_release();
    }
    if ((v19 & 1) != 0)
    {
      result = swift_release();
      v20 = v28;
      *(_OWORD *)(a3 + 32) = v27;
      *(_OWORD *)(a3 + 48) = v20;
      *(_OWORD *)(a3 + 64) = v29;
      *(_BYTE *)(a3 + 80) = v30;
      v21 = v26;
      *(_OWORD *)a3 = v25;
      *(_OWORD *)(a3 + 16) = v21;
      return result;
    }
    result = sub_2445816D0((uint64_t)&v25, &qword_257372608);
    if (v7)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v9 >= v24)
      goto LABEL_28;
    v13 = *(_QWORD *)(v23 + 8 * v9);
    if (!v13)
      break;
LABEL_17:
    v7 = (v13 - 1) & v13;
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v24)
    goto LABEL_28;
  v13 = *(_QWORD *)(v23 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 2;
  if (v9 + 2 >= v24)
    goto LABEL_28;
  v13 = *(_QWORD *)(v23 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 3;
  if (v9 + 3 >= v24)
    goto LABEL_28;
  v13 = *(_QWORD *)(v23 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 4;
  if (v9 + 4 >= v24)
  {
LABEL_28:
    result = swift_release();
    *(_BYTE *)(a3 + 80) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  v13 = *(_QWORD *)(v23 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v24)
      goto LABEL_28;
    v13 = *(_QWORD *)(v23 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2445B5B5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  sub_244577E10(a1 + 32, (uint64_t)v36, &qword_2573722A8);
  if (v37)
  {
    v5 = v38;
    v6 = v39;
    sub_244574770(v38, v39);
    sub_244575334((uint64_t)v36);
  }
  else
  {
    sub_2445816D0((uint64_t)v36, &qword_2573722A8);
    v5 = 0;
    v6 = 0xF000000000000000;
  }
  sub_24457475C(v5, v6);
  sub_2445747E8(0, 0xF000000000000000);
  swift_beginAccess();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_2445BC618(v7, (uint64_t (*)(char *, _QWORD, _QWORD, _OWORD *))sub_2445BCC24, a1);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_2445747E8(v5, v6);
  }
  else
  {
    v9 = v8;
    swift_bridgeObjectRelease();
    v36[0] = v9;
    swift_bridgeObjectRetain();
    sub_2445BB1F4(v36, (uint64_t (*)(uint64_t))sub_2445BC53C, sub_2445BB26C);
    swift_bridgeObjectRelease();
    v10 = sub_2445B57E4(v36[0]);
    swift_release();
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v29 = a2;
      v30 = v6;
      v31 = v5;
      v35 = MEMORY[0x24BEE4AF8];
      sub_2445A177C(0, v11, 0);
      v12 = v10 + 32;
      do
      {
        sub_244577E90(v12, (uint64_t)v32);
        v13 = v33;
        v14 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(v13);
        v17 = v16;
        v18 = v33;
        v19 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 16))(v36, v18, v19);
        if (v37)
        {
          v21 = v38;
          v20 = v39;
          sub_244574770(v38, v39);
          sub_244575334((uint64_t)v36);
        }
        else
        {
          sub_2445816D0((uint64_t)v36, &qword_2573722A8);
          v21 = 0;
          v20 = 0xF000000000000000;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
        v22 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2445A177C(0, *(_QWORD *)(v22 + 16) + 1, 1);
          v22 = v35;
        }
        v24 = *(_QWORD *)(v22 + 16);
        v23 = *(_QWORD *)(v22 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_2445A177C(v23 > 1, v24 + 1, 1);
          v22 = v35;
        }
        *(_QWORD *)(v22 + 16) = v24 + 1;
        v25 = (_QWORD *)(v22 + 32 * v24);
        v25[4] = v15;
        v25[5] = v17;
        v25[6] = v21;
        v25[7] = v20;
        v12 += 40;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      v6 = v30;
      v5 = v31;
      a2 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      v22 = MEMORY[0x24BEE4AF8];
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v26 = swift_bridgeObjectRetain();
    v27 = sub_2445B5F40(v26);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_24457475C(v5, v6);
    sub_2445747E8(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a2 = v27;
    a2[1] = v22;
    a2[2] = v5;
    a2[3] = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return sub_2445747E8(v5, v6);
}

uint64_t sub_2445B5F40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  __int128 v40;
  char v41[8];
  uint64_t v42;
  __int128 v43;
  char v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[72];
  _QWORD v51[5];
  _BYTE v52[40];
  __int128 v53;
  _OWORD v54[4];
  char v55;
  __int128 v56;
  _OWORD v57[4];
  char v58;
  uint64_t v59;

  v2 = v1;
  v3 = a1;
  v4 = MEMORY[0x24BEE4B00];
  v59 = MEMORY[0x24BEE4B00];
  v35 = a1 + 64;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v33 = result;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v12 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v12 >= v34)
      goto LABEL_43;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    if (v13)
    {
LABEL_20:
      v10 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v12 << 6);
      while (1)
      {
        v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
        v16 = *v15;
        v17 = v15[1];
        sub_244595224(*(_QWORD *)(v3 + 56) + 72 * v11, (uint64_t)v57);
        *(_QWORD *)&v56 = v16;
        *((_QWORD *)&v56 + 1) = v17;
        v54[1] = v57[1];
        v54[2] = v57[2];
        v54[3] = v57[3];
        v55 = v58;
        v53 = v56;
        v54[0] = v57[0];
        sub_244595224((uint64_t)v54, (uint64_t)&v49);
        if (v50[48] == 1)
        {
          sub_24457466C(&v49, (uint64_t)v52);
          sub_244577E90((uint64_t)v52, (uint64_t)v51);
          swift_bridgeObjectRetain();
          sub_244574884(v51, (uint64_t)v41);
          if (v2)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
            sub_2445816D0((uint64_t)&v53, &qword_257372608);
            swift_release();
            goto LABEL_43;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          v18 = v41[0];
          v19 = v42;
          v40 = v43;
          v20 = v44;
          v38 = v46;
          v39 = v45;
          v36 = v48;
          v37 = v47;
          v21 = v53;
          v49 = v53;
          sub_244577E54((uint64_t)v54, (uint64_t)v50);
          v22 = *(_QWORD *)(v4 + 16);
          if (*(_QWORD *)(v4 + 24) <= v22)
          {
            sub_2445907D8(v22 + 1, 1);
            v4 = v59;
          }
          sub_2445C4690();
          sub_2445C42A0();
          result = sub_2445C46B4();
          v23 = v4 + 64;
          v24 = -1 << *(_BYTE *)(v4 + 32);
          v25 = result & ~v24;
          v26 = v25 >> 6;
          if (((-1 << v25) & ~*(_QWORD *)(v4 + 64 + 8 * (v25 >> 6))) != 0)
          {
            v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v4 + 64 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v28 = 0;
            v29 = (unint64_t)(63 - v24) >> 6;
            do
            {
              if (++v26 == v29 && (v28 & 1) != 0)
              {
                __break(1u);
                goto LABEL_44;
              }
              v30 = v26 == v29;
              if (v26 == v29)
                v26 = 0;
              v28 |= v30;
              v31 = *(_QWORD *)(v23 + 8 * v26);
            }
            while (v31 == -1);
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          }
          *(_QWORD *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
          *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v27) = v21;
          v32 = *(_QWORD *)(v4 + 56) + (v27 << 6);
          *(_BYTE *)v32 = v18;
          *(_QWORD *)(v32 + 8) = v19;
          *(_OWORD *)(v32 + 16) = v40;
          *(_BYTE *)(v32 + 32) = v20;
          *(_DWORD *)(v32 + 36) = v39;
          *(_BYTE *)(v32 + 40) = v38;
          *(_QWORD *)(v32 + 48) = v37;
          *(_QWORD *)(v32 + 56) = v36;
          ++*(_QWORD *)(v4 + 16);
          result = sub_2445BB1C8((uint64_t)v50);
          v9 = v12;
          v7 = v10;
          v2 = 0;
          v3 = v33;
          if (!v10)
            goto LABEL_8;
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_2445BB1C8((uint64_t)&v49);
          result = sub_2445816D0((uint64_t)&v53, &qword_257372608);
          v9 = v12;
          v7 = v10;
          if (!v10)
            goto LABEL_8;
        }
LABEL_7:
        v10 = (v7 - 1) & v7;
        v11 = __clz(__rbit64(v7)) | (v9 << 6);
        v12 = v9;
      }
    }
    v14 = v9 + 2;
    if (v9 + 2 >= v34)
      goto LABEL_43;
    v13 = *(_QWORD *)(v35 + 8 * v14);
    if (!v13)
    {
      v14 = v9 + 3;
      if (v9 + 3 >= v34)
        goto LABEL_43;
      v13 = *(_QWORD *)(v35 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 4;
        if (v9 + 4 >= v34)
          goto LABEL_43;
        v13 = *(_QWORD *)(v35 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 5;
          if (v9 + 5 < v34)
          {
            v13 = *(_QWORD *)(v35 + 8 * v14);
            if (v13)
              goto LABEL_19;
            while (1)
            {
              v12 = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_45;
              if (v12 >= v34)
                break;
              v13 = *(_QWORD *)(v35 + 8 * v12);
              ++v14;
              if (v13)
                goto LABEL_20;
            }
          }
LABEL_43:
          sub_244577DCC();
          return v4;
        }
      }
    }
LABEL_19:
    v12 = v14;
    goto LABEL_20;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void sub_2445B63C4()
{
  uint64_t *v0;
  _BYTE v1[64];

  sub_2445832DC(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_2445B641C()
{
  void (*v0)(uint64_t);
  uint64_t v1;

  *(_DWORD *)(v1 - 192) = *(_DWORD *)(v1 - 128);
  *(_BYTE *)(v1 - 135) = 0;
  v0(v1 - 192);
  return sub_244574078(v1 - 192);
}

uint64_t sub_2445B6664(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v7 = v5;
  v10 = *a3;
  v40 = a3[2];
  v44 = a3[3];
  v5[14] = 0;
  swift_unknownObjectWeakInit();
  swift_retain();
  v11 = MEMORY[0x24BEE4AF8];
  v7[15] = sub_2445754B4(MEMORY[0x24BEE4AF8]);
  v7[16] = sub_2445775AC(v11);
  v7[17] = sub_2445755F4(v11);
  v45 = v10;
  *(_QWORD *)&v49 = sub_2445B54D8(v10);
  swift_bridgeObjectRetain();
  sub_2445BB1F4((uint64_t *)&v49, (uint64_t (*)(uint64_t))sub_2445BC528, sub_24457DCE4);
  if (v6)
    goto LABEL_21;
  v39 = a1;
  v41 = a5;
  swift_bridgeObjectRelease();
  v12 = v49;
  v13 = *(_QWORD *)(v49 + 16);
  if (v13)
  {
    *(_QWORD *)&v49 = v11;
    sub_2445A170C(0, v13, 0);
    v14 = v49;
    v15 = (unint64_t *)(v12 + 104);
    do
    {
      v17 = *(v15 - 9);
      v16 = *(v15 - 8);
      v19 = *(v15 - 1);
      v18 = *v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v19, v18);
      swift_bridgeObjectRelease();
      sub_2445747E8(v19, v18);
      *(_QWORD *)&v49 = v14;
      v21 = *(_QWORD *)(v14 + 16);
      v20 = *(_QWORD *)(v14 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_2445A170C(v20 > 1, v21 + 1, 1);
        v14 = v49;
      }
      v15 += 10;
      *(_QWORD *)(v14 + 16) = v21 + 1;
      v22 = v14 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v16;
      --v13;
    }
    while (v13);
    swift_release();
  }
  else
  {
    swift_release();
    v14 = MEMORY[0x24BEE4AF8];
  }
  v7[11] = v14;
  v23 = sub_2445BC294(v45);
  swift_beginAccess();
  v7[15] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = swift_bridgeObjectRetain();
  v25 = sub_2445B6C04(v24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v25 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722D0);
    v26 = sub_2445C4570();
  }
  else
  {
    v26 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v49 = v26;
  v27 = swift_bridgeObjectRetain();
  sub_2445B8BA8(v27, 1, &v49);
  swift_bridgeObjectRelease();
  v28 = v49;
  swift_retain();
  v29 = swift_bridgeObjectRetain();
  v30 = sub_2445A1A40(v29);
  swift_release();
  *(_QWORD *)&v49 = v30;
  sub_2445A19D8((uint64_t *)&v49);
  swift_release();
  v7[12] = v49;
  swift_beginAccess();
  v7[17] = v28;
  swift_retain();
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v28 + 16);
  swift_release();
  if (__OFADD__(v31, v32))
  {
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease();
    swift_release();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  v7[18] = v31 + v32;
  ObjectType = swift_getObjectType();
  if ((sub_24458CED4(ObjectType, v41) & 1) != 0)
  {
    v34 = v44;
    if (v44 >> 60 == 15)
    {
      v52 = 0;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_244574770(v40, v44);
      sub_24458D024(ObjectType, v41);
      v35 = v48;
      v43 = v47;
      __swift_project_boxed_opaque_existential_1(v46, v47);
      v36 = *(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v35 + 80);
      v37 = v35;
      v34 = v44;
      v36(&v49, v40, v44, v43, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v40, v44);
    }
    sub_2445747E8(v40, v34);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v40, v44);
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
  }
  sub_244583F10((uint64_t)&v49, (uint64_t)(v7 + 4));
  swift_release();
  v7[2] = v39;
  v7[3] = a2;
  v7[14] = v41;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return (uint64_t)v7;
}

uint64_t sub_2445B6C04(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  sub_2445A16F0(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  v13 = v2;
  if (v2)
  {
    v4 = 0;
    v5 = (unint64_t *)(a1 + 56);
    while (v4 != 0x80000000)
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v8 = *(v5 - 1);
      v9 = *v5;
      swift_bridgeObjectRetain();
      sub_24457475C(v8, v9);
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      result = swift_bridgeObjectRetain();
      if (v11 >= v10 >> 1)
        result = sub_2445A16F0(v10 > 1, v11 + 1, 1);
      v12 = v14 + 72 * v11;
      *(_DWORD *)(v12 + 48) = v4;
      v5 += 4;
      *(_QWORD *)(v14 + 16) = v11 + 1;
      *(_QWORD *)(v12 + 32) = v6;
      *(_QWORD *)(v12 + 40) = v7;
      *(_QWORD *)(v12 + 56) = v6;
      *(_QWORD *)(v12 + 64) = v7;
      *(_QWORD *)(v12 + 72) = v8;
      *(_QWORD *)(v12 + 80) = v9;
      *(_BYTE *)(v12 + 96) = 0;
      if (v13 == ++v4)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

uint64_t sub_2445B6D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15[8];
  uint64_t v16;
  __int128 v17;
  char v18;
  int v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned __int8 v26;
  uint64_t v27;
  unint64_t v28;

  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 120);
  if (!*(_QWORD *)(v7 + 16))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v26 = -1;
LABEL_9:
    sub_2445816D0((uint64_t)&v22, &qword_2573725D0);
    swift_endAccess();
    v27 = 0;
    v28 = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    v27 = 0x2220616D65686353;
    v28 = 0xE800000000000000;
    swift_bridgeObjectRetain();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    sub_2445C42D0();
    sub_2445C42D0();
    v11 = v27;
    v12 = v28;
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v13 = v11;
    *(_QWORD *)(v13 + 8) = v12;
    *(_BYTE *)(v13 + 16) = 3;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  v8 = sub_2445A14D8(a1, a2);
  if ((v9 & 1) != 0)
  {
    sub_244595224(*(_QWORD *)(v7 + 56) + 72 * v8, (uint64_t)&v22);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v26 = -1;
  }
  swift_bridgeObjectRelease();
  if (v26 == 255)
    goto LABEL_9;
  sub_244577E54((uint64_t)&v22, (uint64_t)&v27);
  swift_endAccess();
  sub_244595224((uint64_t)&v27, (uint64_t)&v22);
  if (v26 == 1)
  {
    sub_2445BB1C8((uint64_t)&v27);
    return sub_24457466C(&v22, (uint64_t)a3);
  }
  else
  {
    v14 = v25;
    v15[0] = v22;
    v16 = *((_QWORD *)&v22 + 1);
    v17 = v23;
    v18 = v24;
    v19 = DWORD1(v24);
    v20 = BYTE8(v24);
    v21 = v25;
    sub_2445B7468(a1, a2, v15, a3);
    sub_2445BB1C8((uint64_t)&v27);
    swift_bridgeObjectRelease();
    return sub_2445747E8(v14, *((unint64_t *)&v14 + 1));
  }
}

uint64_t sub_2445B6FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_2445BC618(v2, (uint64_t (*)(char *, _QWORD, _QWORD, _OWORD *))sub_2445BCC24, v0);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    v5 = v3;
    swift_bridgeObjectRetain();
    sub_2445BB1F4(&v5, (uint64_t (*)(uint64_t))sub_2445BC53C, sub_2445BB26C);
    swift_bridgeObjectRelease();
    v3 = sub_2445B57E4(v5);
    swift_release();
  }
  return v3;
}

uint64_t sub_2445B70C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;

  sub_24459529C(a4, (uint64_t)&v12);
  v5 = v12;
  if ((v16 & 1) != 0)
  {
    sub_24457466C(&v13, (uint64_t)a1);
  }
  else
  {
    v6 = v14;
    v7 = v15;
    v9 = v13;
    v10 = v14;
    v11 = v15;
    sub_2445B7180(v12, (uint64_t *)&v9, a1);
    swift_bridgeObjectRelease();
    sub_2445747E8(v6, v7);
  }
  return v5;
}

uint64_t sub_2445B7180@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  char v36;
  uint64_t v37;

  v7 = *a2;
  v8 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v37 = MEMORY[0x249512F50](v3 + 104);
  if (v37)
  {
    v28 = *(_QWORD *)(v3 + 112);
    v30 = v7;
    v31 = v8;
    v32 = v10;
    v33 = v9;
    v11 = swift_beginAccess();
    v27 = v7;
    MEMORY[0x24BDAC7A8](v11, v12);
    swift_bridgeObjectRetain();
    sub_24457475C(v10, v9);
    v13 = swift_bridgeObjectRetain();
    v14 = sub_2445BC928(v13, (uint64_t (*)(_QWORD, _QWORD, _OWORD *))sub_2445BC510);
    swift_bridgeObjectRelease();
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_2445747E8(v10, v9);
      return swift_unknownObjectRelease();
    }
    else
    {
      v26 = v3;
      if (*(_QWORD *)(v14 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_257372308);
        v16 = sub_2445C4570();
      }
      else
      {
        v16 = MEMORY[0x24BEE4B00];
      }
      v29[0] = v16;
      v17 = (_QWORD *)swift_bridgeObjectRetain();
      sub_2445B8F80(v17, 1, v29);
      swift_bridgeObjectRelease();
      v18 = v29[0];
      v19 = type metadata accessor for ProtoOneOfSchema();
      swift_allocObject();
      v20 = v37;
      swift_unknownObjectRetain();
      v22 = sub_2445799C8(&v30, v18, v20, v28);
      LODWORD(v30) = a1;
      v34 = v19;
      v35 = &off_25152FE90;
      v31 = v22;
      v36 = 1;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_2445A624C((uint64_t)&v30, v27, v8);
      swift_endAccess();
      v23 = *(_QWORD *)(v26 + 144);
      v24 = __OFSUB__(v23, 1);
      v25 = v23 - 1;
      if (v24)
      {
        __break(1u);
        result = swift_unexpectedError();
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v26 + 144) = v25;
        if (!v25)
        {
          *(_QWORD *)(v26 + 112) = 0;
          swift_unknownObjectWeakAssign();
        }
        a3[3] = v19;
        a3[4] = (uint64_t)&off_25152FE90;
        result = swift_unknownObjectRelease();
        *a3 = v22;
      }
    }
  }
  else
  {
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 7;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2445B7468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;

  v4 = *a3;
  v6 = *((_QWORD *)a3 + 1);
  v5 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  v7 = a3[32];
  v8 = *((_DWORD *)a3 + 9);
  v9 = a3[40];
  v11 = *((_QWORD *)a3 + 6);
  v10 = *((_QWORD *)a3 + 7);
  v12 = MEMORY[0x249512F50]();
  if (v12)
  {
    v13 = v12;
    v24 = *(_QWORD *)(v36 + 112);
    LOBYTE(v29[0]) = v4;
    v29[1] = v6;
    v29[2] = v5;
    v30 = v28;
    LOBYTE(v31) = v7;
    HIDWORD(v31) = v8;
    v32 = v9;
    v33 = v11;
    v34 = v10;
    v14 = type metadata accessor for ProtoFieldSchema();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v11, v10);
    swift_unknownObjectRetain();
    v15 = sub_2445B0464(a1, a2, (char *)v29, v13, v24);
    if (v25)
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      v18 = v15;
      v30 = v14;
      v31 = &off_25152FE50;
      v29[0] = v15;
      v35 = 1;
      v19 = v36;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_2445A605C((uint64_t)v29, a1, a2);
      swift_endAccess();
      v30 = v14;
      v31 = &off_25152FE50;
      v29[0] = v18;
      swift_beginAccess();
      swift_retain();
      sub_2445A6134((uint64_t)v29, v28);
      result = swift_endAccess();
      v20 = *(_QWORD *)(v19 + 144);
      v21 = __OFSUB__(v20, 1);
      v22 = v20 - 1;
      if (v21)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v36 + 144) = v22;
        if (!v22)
        {
          *(_QWORD *)(v36 + 112) = 0;
          swift_unknownObjectWeakAssign();
        }
        a4[3] = v14;
        a4[4] = (uint64_t)&off_25152FE50;
        result = swift_unknownObjectRelease();
        *a4 = v18;
      }
    }
  }
  else
  {
    sub_244578600();
    swift_allocError();
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 7;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2445B76A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20[8];
  uint64_t v21;
  __int128 v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  __int128 v36;
  _BYTE v37[72];
  _BYTE v38[88];

  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 128);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = sub_2445A153C(a1);
    if ((v8 & 1) != 0)
    {
      sub_244577E90(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)&v36);
      sub_24457466C(&v36, (uint64_t)v38);
      swift_endAccess();
      v9 = (__int128 *)v38;
      return sub_24457466C(v9, (uint64_t)a2);
    }
  }
  swift_endAccess();
  v10 = swift_beginAccess();
  MEMORY[0x24BDAC7A8](v10, v11);
  v12 = swift_bridgeObjectRetain();
  sub_2445B58C4(v12, (uint64_t (*)(_QWORD, _QWORD, __int128 *))sub_2445BCC08, (uint64_t)v38);
  result = swift_bridgeObjectRelease();
  if (v3)
    return result;
  sub_244577E10((uint64_t)v38, (uint64_t)&v28, &qword_257372610);
  v14 = *((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v15 = v28;
    v36 = v28;
    sub_244577E54((uint64_t)&v29, (uint64_t)v37);
    sub_244595224((uint64_t)v37, (uint64_t)&v28);
    if (v35 == 1)
    {
      sub_2445816D0((uint64_t)&v36, &qword_257372608);
      sub_2445816D0((uint64_t)v38, &qword_257372610);
      v9 = &v28;
      return sub_24457466C(v9, (uint64_t)a2);
    }
    v18 = v33;
    v19 = v34;
    v20[0] = v28;
    v21 = *((_QWORD *)&v28 + 1);
    v22 = v29;
    v23 = v30;
    v24 = v31;
    v25 = v32;
    v26 = v33;
    v27 = v34;
    swift_bridgeObjectRetain();
    sub_2445B7468(v15, v14, v20, a2);
    swift_bridgeObjectRelease();
    sub_2445816D0((uint64_t)&v36, &qword_257372608);
    sub_2445816D0((uint64_t)v38, &qword_257372610);
    swift_bridgeObjectRelease();
    return sub_2445747E8(v18, v19);
  }
  else
  {
    sub_2445816D0((uint64_t)&v28, &qword_257372610);
    strcpy((char *)&v36, "With number ");
    BYTE13(v36) = 0;
    HIWORD(v36) = -5120;
    *(_QWORD *)&v28 = a1;
    sub_2445C45AC();
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    v16 = v36;
    sub_244578600();
    swift_allocError();
    *(_OWORD *)v17 = v16;
    *(_BYTE *)(v17 + 16) = 3;
    swift_willThrow();
    return sub_2445816D0((uint64_t)v38, &qword_257372610);
  }
}

BOOL sub_2445B79A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  sub_244595224(a3, (uint64_t)&v16);
  if ((v20 & 1) != 0)
  {
    sub_24457466C(&v16, (uint64_t)v13);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (v4)
      return v9;
  }
  else
  {
    v8 = v17;
    v10 = v18;
    v11 = v19;
    swift_bridgeObjectRelease();
    sub_2445747E8(v10, v11);
  }
  return v8 == a4;
}

uint64_t sub_2445B7A68(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;

  sub_244595224(a3, (uint64_t)&v18);
  if ((v23 & 1) == 0)
  {
    v13 = v21;
    v12 = v22;
    if ((v20 & 1) == 0 && v19 == a4)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_2445747E8(v13, v12);
      return a1;
    }
    swift_bridgeObjectRelease();
    sub_2445747E8(v13, v12);
    return 0;
  }
  sub_24457466C(&v18, (uint64_t)v15);
  v7 = v16;
  v8 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
  if ((v9 & 0x100000000) != 0 || (_DWORD)v9 != a4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return 0;
  }
  v10 = v16;
  v11 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
  if (!v4)
    swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return a1;
}

uint64_t sub_2445B7BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned __int8 v20;
  _BYTE v21[56];

  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 136);
  if (!*(_QWORD *)(v7 + 16))
  {
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    v20 = -1;
LABEL_9:
    sub_2445816D0((uint64_t)&v17, &qword_2573725D8);
    swift_endAccess();
    sub_244578600();
    swift_allocError();
    *(_OWORD *)v11 = xmmword_2445C70A0;
    *(_BYTE *)(v11 + 16) = 7;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  v8 = sub_2445A14D8(a1, a2);
  if ((v9 & 1) != 0)
  {
    sub_24459529C(*(_QWORD *)(v7 + 56) + 56 * v8, (uint64_t)&v17);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    v20 = -1;
  }
  swift_bridgeObjectRelease();
  if (v20 == 255)
    goto LABEL_9;
  sub_244577DD4((uint64_t)&v17, (uint64_t)v21);
  swift_endAccess();
  sub_24459529C((uint64_t)v21, (uint64_t)&v17);
  if (v20 == 1)
  {
    sub_2445BC4E4((uint64_t)v21);
    return sub_24457466C((__int128 *)((char *)&v17 + 8), (uint64_t)a3);
  }
  else
  {
    v12 = *((_QWORD *)&v18 + 1);
    v13 = v19;
    v14 = *((_QWORD *)&v17 + 1);
    v15 = v18;
    v16 = v19;
    sub_2445B7180(v17, &v14, a3);
    sub_2445BC4E4((uint64_t)v21);
    swift_bridgeObjectRelease();
    return sub_2445747E8(v12, v13);
  }
}

uint64_t sub_2445B7D98@<X0>(void (*a1)(_QWORD *__return_ptr, _QWORD)@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13[2];
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  v16 = (uint64_t *)*v2;
  sub_2445C3CF4();
  swift_allocObject();
  v6 = sub_2445C3CE8() | 0x4000000000000000;
  v14 = 0;
  v15 = v6;
  v13[0] = v2[11];
  swift_bridgeObjectRetain_n();
  sub_2445A19D8(v13);
  if (v3)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = v13[0];
    v8 = *(_QWORD *)(v13[0] + 16);
    if (v8)
    {
      swift_retain();
      v9 = (uint64_t *)(v7 + 40);
      do
      {
        v10 = *v9;
        v13[0] = *(v9 - 1);
        v13[1] = v10;
        swift_bridgeObjectRetain();
        sub_2445B7F18(v13, (uint64_t)v2, a1);
        v9 += 2;
        swift_bridgeObjectRelease();
        --v8;
      }
      while (v8);
      swift_release_n();
      v11 = v14;
      v6 = v15;
    }
    else
    {
      swift_release();
      v11 = 0;
    }
    a2[3] = v16;
    a2[4] = (uint64_t *)&off_2515301C0;
    *a2 = v2;
    a2[5] = v11;
    a2[6] = (uint64_t *)v6;
    return swift_retain();
  }
  return result;
}

uint64_t sub_2445B7F18(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v11[7];
  unsigned __int8 v12;
  _BYTE v13[64];
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  result = sub_2445B6D4C(*a1, a1[1], v14);
  if (!v3)
  {
    while (1)
    {
      a3(v11, v14);
      if (v12 == 255)
        break;
      v6 = sub_2445832A0((uint64_t)v11, (uint64_t)v13);
      MEMORY[0x24BDAC7A8](v6, v7);
      sub_2445B63C4();
      v8 = v15;
      v9 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
      sub_244583318((uint64_t)v13);
      if ((v10 & 1) == 0)
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    sub_2445816D0((uint64_t)v11, &qword_257372420);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return result;
}

uint64_t sub_2445B8084()
{
  uint64_t v0;

  sub_2445816D0(v0 + 32, &qword_2573722A8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445BCD18(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2445B80D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2445816D0(v0 + 32, &qword_2573722A8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445BCD18(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2445B812C()
{
  sub_2445B80D0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProtoMessageSchema()
{
  return objc_opt_self();
}

uint64_t destroy for ProtoMessageSchema.OneofContainer(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v4;

  v2 = *(unsigned __int8 *)(a1 + 48);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  result = swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >> 60 != 15)
    return sub_2445747FC(*(_QWORD *)(a1 + 24), v4);
  return result;
}

uint64_t initializeWithCopy for ProtoMessageSchema.OneofContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(a2 + 48);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v6;
    v7 = (_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      v5 = 0;
      *(_OWORD *)(a1 + 24) = *v7;
    }
    else
    {
      v9 = *(_QWORD *)v7;
      sub_244574770(v9, v8);
      v5 = 0;
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v8;
    }
  }
  *(_BYTE *)(a1 + 48) = v5;
  return a1;
}

uint64_t assignWithCopy for ProtoMessageSchema.OneofContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 >> 60 != 15)
        sub_2445747FC(*(_QWORD *)(a1 + 24), v5);
    }
    v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (v6 == 1)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      v8 = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v9 = (_OWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (v10 >> 60 == 15)
      {
        v8 = 0;
        *(_OWORD *)(a1 + 24) = *v9;
      }
      else
      {
        v11 = *(_QWORD *)v9;
        sub_244574770(v11, v10);
        v8 = 0;
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = v10;
      }
    }
    *(_BYTE *)(a1 + 48) = v8;
  }
  return a1;
}

uint64_t assignWithTake for ProtoMessageSchema.OneofContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 >> 60 != 15)
        sub_2445747FC(*(_QWORD *)(a1 + 24), v5);
    }
    v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    else
    {
      LOBYTE(v6) = 0;
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 48) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoMessageSchema.OneofContainer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProtoMessageSchema.OneofContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_2445B8510(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 48);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_2445B852C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProtoMessageSchema.OneofContainer()
{
  return &type metadata for ProtoMessageSchema.OneofContainer;
}

uint64_t destroy for ProtoMessageSchema.FieldContainer(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v4;

  v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  result = swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 56);
  if (v4 >> 60 != 15)
    return sub_2445747FC(*(_QWORD *)(a1 + 48), v4);
  return result;
}

uint64_t initializeWithCopy for ProtoMessageSchema.FieldContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(a2 + 64);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v7 = (_OWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      v5 = 0;
      *(_OWORD *)(a1 + 48) = *v7;
    }
    else
    {
      v9 = *(_QWORD *)v7;
      sub_244574770(v9, v8);
      v5 = 0;
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v8;
    }
  }
  *(_BYTE *)(a1 + 64) = v5;
  return a1;
}

uint64_t assignWithCopy for ProtoMessageSchema.FieldContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a1 + 56);
      if (v5 >> 60 != 15)
        sub_2445747FC(*(_QWORD *)(a1 + 48), v5);
    }
    v6 = *(unsigned __int8 *)(a2 + 64);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      v8 = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v9 = *(_DWORD *)(a2 + 36);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_DWORD *)(a1 + 36) = v9;
      v10 = (_OWORD *)(a2 + 48);
      v11 = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      if (v11 >> 60 == 15)
      {
        v8 = 0;
        *(_OWORD *)(a1 + 48) = *v10;
      }
      else
      {
        v12 = *(_QWORD *)v10;
        sub_244574770(v12, v11);
        v8 = 0;
        *(_QWORD *)(a1 + 48) = v12;
        *(_QWORD *)(a1 + 56) = v11;
      }
    }
    *(_BYTE *)(a1 + 64) = v8;
  }
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ProtoMessageSchema.FieldContainer(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a1 + 56);
      if (v5 >> 60 != 15)
        sub_2445747FC(*(_QWORD *)(a1 + 48), v5);
    }
    v6 = *(unsigned __int8 *)(a2 + 64);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v8 = 1;
    }
    else
    {
      v8 = 0;
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v10;
    }
    *(_BYTE *)(a1 + 64) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoMessageSchema.FieldContainer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProtoMessageSchema.FieldContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_2445B8968(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_2445B8984(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProtoMessageSchema.FieldContainer()
{
  return &type metadata for ProtoMessageSchema.FieldContainer;
}

uint64_t sub_2445B89BC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_244577E10(*v1 + 32, a1, &qword_2573722A8);
}

uint64_t sub_2445B89E4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2445B89F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2445B89FC()
{
  uint64_t v0;
  uint64_t result;

  result = sub_2445BCC3C();
  if (!v0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_2445B8A24()
{
  return sub_2445B6FE0();
}

uint64_t sub_2445B8A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2445B6D4C(a1, a2, a3);
}

uint64_t sub_2445B8A64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2445B76A8(a1, a2);
}

uint64_t sub_2445B8A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_2445B7BD0(a1, a2, a3);
}

uint64_t sub_2445B8AA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v8;

  v8 = *v5;
  a5[3] = a3;
  a5[4] = a4;
  *a5 = v8;
  a5[5] = a1;
  a5[6] = a2;
  swift_retain();
  return sub_244574770(a1, a2);
}

uint64_t sub_2445B8AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a4;
  v9 = *v5;
  v14 = a3;
  *(_QWORD *)&v13 = v9;
  v10 = type metadata accessor for UnsafeSchematizedData();
  v11 = swift_allocObject();
  sub_24457466C(&v13, v11 + 16);
  *(_QWORD *)(v11 + 56) = a1;
  *(_QWORD *)(v11 + 64) = a2;
  a5[3] = v10;
  a5[4] = sub_24459CCF8();
  *a5 = v11;
  return swift_retain();
}

uint64_t sub_2445B8B88@<X0>(void (*a1)(_QWORD *__return_ptr, _QWORD)@<X0>, uint64_t **a2@<X8>)
{
  return sub_2445B7D98(a1, a2);
}

uint64_t sub_2445B8BA8(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[56];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[64];
  uint64_t v47;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_244577E10(a1 + 32, (uint64_t)&v44, &qword_2573722D8);
  v7 = v44;
  v8 = v45;
  v42 = v44;
  v43 = v45;
  sub_244577DD4((uint64_t)v46, (uint64_t)v41);
  v9 = (_QWORD *)*a3;
  v11 = sub_2445A14D8(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_244592394();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v8;
    sub_244577DD4((uint64_t)v41, v20[7] + 56 * v11);
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (!v25)
      return swift_bridgeObjectRelease_n();
    for (i = a1 + 104; ; i += 72)
    {
      sub_244577E10(i, (uint64_t)&v44, &qword_2573722D8);
      v27 = v44;
      v28 = v45;
      v42 = v44;
      v43 = v45;
      sub_244577DD4((uint64_t)v46, (uint64_t)v41);
      v29 = (_QWORD *)*a3;
      v30 = sub_2445A14D8(v27, v28);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        sub_244590148(v34, 1);
        v30 = sub_2445A14D8(v27, v28);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = (uint64_t *)(v37[6] + 16 * v30);
      *v38 = v27;
      v38[1] = v28;
      sub_244577DD4((uint64_t)v41, v37[7] + 56 * v30);
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      if (!--v25)
        return swift_bridgeObjectRelease_n();
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_244590148(v14, a2 & 1);
  v16 = sub_2445A14D8(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError();
    swift_willThrow();
    v47 = v19;
    MEMORY[0x249512DF4](v19);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_2445BC4E4((uint64_t)v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return MEMORY[0x249512DE8](v47);
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_2445C4648();
  __break(1u);
LABEL_26:
  sub_2445C44D4();
  sub_2445C42D0();
  sub_2445C4534();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_2445B8F80(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a1[2];
  if (!v4)
    return swift_bridgeObjectRelease();
  v8 = a1[4];
  v7 = a1[5];
  v42 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v11 = sub_2445A14D8(v8, v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_244592D2C();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v8;
    v21[1] = v7;
    *(_QWORD *)(v20[7] + 8 * v11) = v42;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (v4 == 1)
      return swift_bridgeObjectRelease_n();
    for (i = a1 + 9; ; i += 3)
    {
      v28 = *(i - 2);
      v27 = *(i - 1);
      v29 = *i;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v31 = sub_2445A14D8(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_244591134(v35, 1);
        v31 = sub_2445A14D8(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v38[2] = v41;
      if (!--v25)
        return swift_bridgeObjectRelease_n();
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_244591134(v14, a2 & 1);
  v16 = sub_2445A14D8(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError();
    swift_willThrow();
    MEMORY[0x249512DF4](v19);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722C8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return MEMORY[0x249512DE8](v19);
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_2445C4648();
  __break(1u);
LABEL_26:
  sub_2445C44D4();
  sub_2445C42D0();
  sub_2445C4534();
  sub_2445C42D0();
  result = sub_2445C454C();
  __break(1u);
  return result;
}

uint64_t sub_2445B92FC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372440);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9464(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372688);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 9 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573722D8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9600(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372690);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 80 * v8)
      memmove(v10 + 4, a4 + 4, 80 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 80 * v8 || v12 >= v13 + 80 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372398);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B97A0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372618);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372620);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9940(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372630);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372628);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9AE4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372458);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9C4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573724A0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573724A8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9DEC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372460);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445B9F50(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372680);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BA0D8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372698);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573726A0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BA278(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372450);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372378);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BA41C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372560);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573726B0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BA5C0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372558);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573726A8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BA764(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_2543F6F48);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BA8D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372678);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BAA38(char a1, int64_t a2, char a3, char *a4)
{
  return sub_2445BAD18(a1, a2, a3, a4, &qword_257372418);
}

uint64_t sub_2445BAA44(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372670);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BAB90(char a1, int64_t a2, char a3, char *a4)
{
  return sub_2445BABB4(a1, a2, a3, a4, &qword_257372668);
}

uint64_t sub_2445BAB9C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_2445BAD18(a1, a2, a3, a4, &qword_257372660);
}

uint64_t sub_2445BABA8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_2445BABB4(a1, a2, a3, a4, &qword_257372658);
}

uint64_t sub_2445BABB4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BAD0C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_2445BAD18(a1, a2, a3, a4, &qword_257372650);
}

uint64_t sub_2445BAD18(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BAE70(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372648);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445BAFCC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372640);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2445C457C();
  __break(1u);
  return result;
}

_QWORD *sub_2445BB128(uint64_t a1)
{
  uint64_t v1;

  return sub_24457F930(a1, *(_QWORD **)(v1 + 24));
}

uint64_t sub_2445BB14C(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_BYTE *);
  _BYTE v4[64];

  v2 = *(void (**)(_BYTE *))(v1 + 16);
  sub_244577E90(a1, (uint64_t)v4);
  v4[57] = 10;
  v2(v4);
  return sub_244574078((uint64_t)v4);
}

uint64_t sub_2445BB1B0(uint64_t a1)
{
  uint64_t v1;

  return sub_24459B468(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_2445BB1C8(uint64_t a1)
{
  destroy for ProtoMessageSchema.FieldContainer(a1);
  return a1;
}

uint64_t sub_2445BB1F4(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_2445BB26C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _BOOL4 v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *__dst;
  _DWORD v112[12];
  _DWORD v113[14];
  uint64_t v114;

  v2 = a1;
  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_134;
    if (v3)
      return sub_2445BBA38(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_142;
  v106 = result;
  v114 = v1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_100:
      v94 = v10;
      v105 = v8;
      if (v11 >= 2)
      {
        v95 = *v2;
        do
        {
          v96 = v11 - 2;
          if (v11 < 2)
            goto LABEL_129;
          if (!v95)
            goto LABEL_141;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v11 + 24];
          v100 = v114;
          sub_2445BBB58((char *)(v95 + 48 * v98), (char *)(v95 + 48 * *(_QWORD *)&v94[16 * v11 + 16]), v95 + 48 * v99, __dst);
          v114 = v100;
          if (v100)
            break;
          if (v99 < v98)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_2445BC280((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_131;
          v101 = &v97[16 * v96 + 32];
          *(_QWORD *)v101 = v98;
          *((_QWORD *)v101 + 1) = v99;
          v102 = *((_QWORD *)v97 + 2);
          if (v11 > v102)
            goto LABEL_132;
          memmove(&v97[16 * v11 + 16], &v97[16 * v11 + 32], 16 * (v102 - v11));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v102 - 1;
          v11 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v105 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v105 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372628);
    v7 = sub_2445C43A8();
    *(_QWORD *)(v7 + 16) = v6;
    v105 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v12 = v9++;
    v109 = v12;
    if (v9 < v3)
    {
      v13 = *v2;
      sub_244577E10(*v2 + 48 * v9, (uint64_t)v113, &qword_257372628);
      sub_244577E10(v13 + 48 * v12, (uint64_t)v112, &qword_257372628);
      v107 = v113[0];
      v14 = v112[0];
      sub_2445816D0((uint64_t)v112, &qword_257372628);
      sub_2445816D0((uint64_t)v113, &qword_257372628);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = v12 + 2;
        v103 = v13;
        v104 = v2;
        v16 = v10;
        v17 = v13 + 48 * v12 + 48;
        while (1)
        {
          sub_244577E10(v17 + 48, (uint64_t)v113, &qword_257372628);
          sub_244577E10(v17, (uint64_t)v112, &qword_257372628);
          v18 = v113[0] >= v112[0];
          sub_2445816D0((uint64_t)v112, &qword_257372628);
          sub_2445816D0((uint64_t)v113, &qword_257372628);
          if (v107 < v14 == v18)
            break;
          v17 += 48;
          if (v3 == ++v15)
          {
            v10 = v16;
            v2 = v104;
            v9 = v3;
            goto LABEL_23;
          }
        }
        v10 = v16;
        v2 = v104;
        v9 = v15;
LABEL_23:
        v13 = v103;
      }
      if (v107 < v14)
      {
        if (v9 < v12)
          goto LABEL_135;
        if (v12 < v9)
        {
          v19 = (__int128 *)(v13 + 48 * v9 - 48);
          v20 = (__int128 *)(v13 + 48 * v12);
          v21 = v9;
          v22 = v12;
          do
          {
            if (v22 != --v21)
            {
              if (!v13)
                goto LABEL_140;
              v23 = *v20;
              v24 = v20[1];
              v25 = v20[2];
              v27 = v19[1];
              v26 = v19[2];
              *v20 = *v19;
              v20[1] = v27;
              v20[2] = v26;
              v19[1] = v24;
              v19[2] = v25;
              *v19 = v23;
            }
            ++v22;
            v19 -= 3;
            v20 += 3;
          }
          while (v22 < v21);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_49;
    if (__OFSUB__(v9, v12))
      goto LABEL_133;
    if (v9 - v12 >= v106)
      goto LABEL_49;
    if (__OFADD__(v12, v106))
      goto LABEL_136;
    v28 = v12 + v106 >= v3 ? v3 : v12 + v106;
    if (v28 < v12)
      break;
    if (v9 != v28)
    {
      v29 = 48 * v9;
      v108 = v28;
      do
      {
        v30 = v12;
        v31 = v29;
        do
        {
          v32 = *v2 + v31;
          sub_244577E10(v32, (uint64_t)v113, &qword_257372628);
          sub_244577E10(v32 - 48, (uint64_t)v112, &qword_257372628);
          v33 = v113[0];
          LODWORD(v32) = v112[0];
          sub_2445816D0((uint64_t)v112, &qword_257372628);
          sub_2445816D0((uint64_t)v113, &qword_257372628);
          if (v33 >= (int)v32)
            break;
          if (!*v2)
            goto LABEL_138;
          v34 = (__int128 *)(*v2 + v31);
          v36 = v34[1];
          v35 = v34[2];
          v37 = *v34;
          v38 = *(v34 - 2);
          *v34 = *(v34 - 3);
          v34[1] = v38;
          v34[2] = *(v34 - 1);
          *(v34 - 3) = v37;
          *(v34 - 2) = v36;
          *(v34 - 1) = v35;
          v31 -= 48;
          ++v30;
        }
        while (v9 != v30);
        ++v9;
        v29 += 48;
        v12 = v109;
      }
      while (v9 != v108);
      v9 = v108;
    }
LABEL_49:
    if (v9 < v12)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_2445BBEB0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v40 = *((_QWORD *)v10 + 2);
    v39 = *((_QWORD *)v10 + 3);
    v11 = v40 + 1;
    if (v40 >= v39 >> 1)
      v10 = sub_2445BBEB0((char *)(v39 > 1), v40 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v11;
    v41 = v10 + 32;
    v42 = &v10[16 * v40 + 32];
    *(_QWORD *)v42 = v12;
    *((_QWORD *)v42 + 1) = v9;
    if (v40)
    {
      v110 = v9;
      while (1)
      {
        v43 = v11 - 1;
        if (v11 >= 4)
        {
          v48 = &v41[16 * v11];
          v49 = *((_QWORD *)v48 - 8);
          v50 = *((_QWORD *)v48 - 7);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_117;
          v53 = *((_QWORD *)v48 - 6);
          v52 = *((_QWORD *)v48 - 5);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_118;
          v55 = v11 - 2;
          v56 = &v41[16 * v11 - 32];
          v58 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_120;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_123;
          if (v60 >= v51)
          {
            v78 = &v41[16 * v43];
            v80 = *(_QWORD *)v78;
            v79 = *((_QWORD *)v78 + 1);
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_127;
            v71 = v46 < v81;
            goto LABEL_87;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v72 = *((_QWORD *)v10 + 4);
            v73 = *((_QWORD *)v10 + 5);
            v54 = __OFSUB__(v73, v72);
            v65 = v73 - v72;
            v66 = v54;
            goto LABEL_81;
          }
          v45 = *((_QWORD *)v10 + 4);
          v44 = *((_QWORD *)v10 + 5);
          v54 = __OFSUB__(v44, v45);
          v46 = v44 - v45;
          v47 = v54;
        }
        if ((v47 & 1) != 0)
          goto LABEL_119;
        v55 = v11 - 2;
        v61 = &v41[16 * v11 - 32];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v64 = __OFSUB__(v62, v63);
        v65 = v62 - v63;
        v66 = v64;
        if (v64)
          goto LABEL_122;
        v67 = &v41[16 * v43];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v54 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v54)
          goto LABEL_125;
        if (__OFADD__(v65, v70))
          goto LABEL_126;
        if (v65 + v70 >= v46)
        {
          v71 = v46 < v70;
LABEL_87:
          if (v71)
            v43 = v55;
          goto LABEL_89;
        }
LABEL_81:
        if ((v66 & 1) != 0)
          goto LABEL_121;
        v74 = &v41[16 * v43];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v54 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v54)
          goto LABEL_124;
        if (v77 < v65)
          goto LABEL_15;
LABEL_89:
        v82 = v43 - 1;
        if (v43 - 1 >= v11)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v83 = *v2;
        if (!*v2)
          goto LABEL_139;
        v84 = v10;
        v85 = v2;
        v86 = &v41[16 * v82];
        v87 = *(_QWORD *)v86;
        v88 = v41;
        v89 = v43;
        v90 = &v41[16 * v43];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v114;
        sub_2445BBB58((char *)(v83 + 48 * *(_QWORD *)v86), (char *)(v83 + 48 * *(_QWORD *)v90), v83 + 48 * v91, __dst);
        v114 = v92;
        if (v92)
          goto LABEL_97;
        if (v91 < v87)
          goto LABEL_114;
        if (v89 > *((_QWORD *)v84 + 2))
          goto LABEL_115;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v82 + 8] = v91;
        v93 = *((_QWORD *)v84 + 2);
        if (v89 >= v93)
          goto LABEL_116;
        v10 = v84;
        v11 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v41 = v88;
        *((_QWORD *)v84 + 2) = v93 - 1;
        v2 = v85;
        v9 = v110;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v2[1];
    if (v9 >= v3)
    {
      v8 = v105;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_2445BBA38(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _DWORD v17[12];
  _DWORD v18[12];
  uint64_t v19;

  v19 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v7 = 48 * a3;
LABEL_5:
    v8 = v19;
    v9 = v7;
    while (1)
    {
      v10 = *a4 + v9;
      sub_244577E10(v10, (uint64_t)v18, &qword_257372628);
      sub_244577E10(v10 - 48, (uint64_t)v17, &qword_257372628);
      LODWORD(v10) = v18[0];
      v11 = v17[0];
      sub_2445816D0((uint64_t)v17, &qword_257372628);
      result = sub_2445816D0((uint64_t)v18, &qword_257372628);
      if ((int)v10 >= v11)
      {
LABEL_4:
        ++v5;
        v7 += 48;
        if (v5 == a2)
          return result;
        goto LABEL_5;
      }
      if (!*a4)
        break;
      v12 = (__int128 *)(*a4 + v9);
      v14 = v12[1];
      v13 = v12[2];
      v15 = *v12;
      v16 = *(v12 - 2);
      *v12 = *(v12 - 3);
      v12[1] = v16;
      v12[2] = *(v12 - 1);
      *(v12 - 3) = v15;
      *(v12 - 2) = v14;
      *(v12 - 1) = v13;
      v9 -= 48;
      if (v5 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2445BBB58(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t result;
  _DWORD v36[12];
  _DWORD v37[12];
  char *v38;
  char *v39;
  char *v40;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v40 = __src;
  v39 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v24 = &v4[48 * v11];
      v38 = v24;
      v40 = v6;
      if (__src < v6 && v10 >= 48)
      {
        v25 = (char *)(a3 - 48);
        while (1)
        {
          v28 = v25 + 48;
          sub_244577E10((uint64_t)(v24 - 48), (uint64_t)v37, &qword_257372628);
          v29 = v6 - 48;
          sub_244577E10((uint64_t)(v6 - 48), (uint64_t)v36, &qword_257372628);
          v30 = v37[0];
          v31 = v36[0];
          sub_2445816D0((uint64_t)v36, &qword_257372628);
          sub_2445816D0((uint64_t)v37, &qword_257372628);
          if (v30 >= v31)
          {
            v32 = (unint64_t)v38;
            v24 = v38 - 48;
            v38 -= 48;
            if ((unint64_t)v28 < v32 || (unint64_t)v25 >= v32 || v28 != (char *)v32)
            {
              v33 = *(_OWORD *)v24;
              v34 = *(_OWORD *)(v32 - 16);
              *((_OWORD *)v25 + 1) = *(_OWORD *)(v32 - 32);
              *((_OWORD *)v25 + 2) = v34;
              *(_OWORD *)v25 = v33;
            }
            v29 = v6;
            if (v24 <= v4)
              goto LABEL_45;
          }
          else
          {
            if (v28 != v6 || v25 >= v6)
            {
              v26 = *(_OWORD *)v29;
              v27 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v25 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v25 + 2) = v27;
              *(_OWORD *)v25 = v26;
            }
            v40 -= 48;
            v24 = v38;
            if (v38 <= v4)
              goto LABEL_45;
          }
          v25 -= 48;
          v6 = v29;
          if (v29 <= __src)
            goto LABEL_45;
        }
      }
      goto LABEL_45;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v12 = (unint64_t)&v4[48 * v9];
    v38 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      do
      {
        sub_244577E10((uint64_t)v6, (uint64_t)v37, &qword_257372628);
        sub_244577E10((uint64_t)v4, (uint64_t)v36, &qword_257372628);
        v13 = v37[0];
        v14 = v36[0];
        sub_2445816D0((uint64_t)v36, &qword_257372628);
        sub_2445816D0((uint64_t)v37, &qword_257372628);
        v15 = v40;
        if (v13 >= v14)
        {
          v20 = v39 + 48;
          if (v40 != v39 || v40 >= v20)
          {
            v22 = *(_OWORD *)v39;
            v23 = *((_OWORD *)v39 + 2);
            *((_OWORD *)v40 + 1) = *((_OWORD *)v39 + 1);
            *((_OWORD *)v15 + 2) = v23;
            *(_OWORD *)v15 = v22;
          }
          v39 = v20;
          v16 = (unint64_t)v6;
        }
        else
        {
          v16 = (unint64_t)(v6 + 48);
          v17 = v40 < v6 || (unint64_t)v40 >= v16;
          if (!v17 && v40 == v6)
          {
            v15 = v6;
          }
          else
          {
            v18 = *(_OWORD *)v6;
            v19 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v40 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v15 + 2) = v19;
            *(_OWORD *)v15 = v18;
          }
        }
        v40 = v15 + 48;
        v4 = v39;
        if ((unint64_t)v39 >= v12)
          break;
        v6 = (char *)v16;
      }
      while (v16 < a3);
    }
LABEL_45:
    sub_2445BC108((void **)&v40, (const void **)&v39, &v38);
    return 1;
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

char *sub_2445BBEB0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372600);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2445BBFA8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_2445C457C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_2445BC050(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -80)
  {
    result = (char *)sub_2445C457C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 80;
    if (result != v3 || result >= &v3[80 * v6])
      return (char *)memmove(result, v3, 80 * v6);
  }
  return result;
}

char *sub_2445BC108(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    result = (char *)sub_2445C457C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
      return (char *)memmove(result, v3, 48 * v6);
  }
  return result;
}

char *sub_2445BC1C4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)sub_2445C457C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_2445BC280(uint64_t a1)
{
  return sub_2445BBEB0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2445BC294(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;
  __int128 v32;
  char v33;
  int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  int64_t v39;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2573722F0);
  result = sub_2445C4558();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v39 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(a1 + 56) + (i << 6);
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_BYTE *)(v18 + 32);
    v21 = *(_DWORD *)(v18 + 36);
    v22 = *(_BYTE *)(v18 + 40);
    v23 = *(_QWORD *)(v18 + 48);
    v24 = *(_QWORD *)(v18 + 56);
    v25 = *(_OWORD *)(v18 + 16);
    v30[0] = *(_BYTE *)v18;
    v31 = v19;
    v32 = v25;
    v33 = v20;
    v34 = v21;
    v35 = v22;
    v36 = v23;
    v37 = v24;
    v38 = 0;
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v26 = (_QWORD *)(v3[6] + 16 * i);
    *v26 = v16;
    v26[1] = v17;
    result = sub_244577E54((uint64_t)v30, v3[7] + 72 * i);
    v27 = v3[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_24457475C(v23, v24);
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v39)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v39)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v39)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v39)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v39)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_2445BC4D0(uint64_t a1)
{
  return sub_2445B92FC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2445BC4E4(uint64_t a1)
{
  destroy for ProtoMessageSchema.OneofContainer(a1);
  return a1;
}

uint64_t sub_2445BC510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_2445B7A68(a1, a2, a3, *(_DWORD *)(v3 + 16));
}

uint64_t sub_2445BC528(_QWORD *a1)
{
  return sub_2445B9600(0, a1[2], 0, a1);
}

uint64_t sub_2445BC53C(_QWORD *a1)
{
  return sub_2445B9940(0, a1[2], 0, a1);
}

uint64_t sub_2445BC550(_QWORD *a1)
{
  return sub_2445BA278(0, a1[2], 0, a1);
}

uint64_t sub_2445BC564(_QWORD *a1)
{
  return sub_2445BA41C(0, a1[2], 0, a1);
}

uint64_t sub_2445BC578(_QWORD *a1)
{
  return sub_2445BA5C0(0, a1[2], 0, a1);
}

uint64_t sub_2445BC590(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_2445BC618(uint64_t a1, uint64_t (*a2)(char *, _QWORD, _QWORD, _OWORD *), uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  __int128 v34;
  _OWORD v35[3];
  char v36;
  __int128 v37;
  _OWORD v38[3];
  char v39;
  _QWORD v40[2];
  _BYTE v41[56];
  _OWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  v44 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v43 = MEMORY[0x24BEE4AF8];
  sub_2445A1760(0, v4, 0);
  result = sub_2445BC590(a1);
  v9 = result;
  v10 = 0;
  v11 = a1 + 64;
  v12 = *(_BYTE *)(a1 + 32);
  v30 = v4;
  v31 = v8;
  v32 = a1 + 64;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << v12)
  {
    v15 = (unint64_t)v9 >> 6;
    if ((*(_QWORD *)(v11 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a1 + 36) != v8)
      goto LABEL_28;
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v18 = *v16;
    v17 = v16[1];
    sub_24459529C(*(_QWORD *)(a1 + 56) + 56 * v9, (uint64_t)v41);
    v40[0] = v18;
    v40[1] = v17;
    *(_QWORD *)&v37 = v18;
    *((_QWORD *)&v37 + 1) = v17;
    sub_24459529C((uint64_t)v41, (uint64_t)v38);
    v35[1] = v38[1];
    v35[2] = v38[2];
    v36 = v39;
    v34 = v37;
    v35[0] = v38[0];
    swift_bridgeObjectRetain_n();
    sub_2445816D0((uint64_t)v40, &qword_257372638);
    v5 = v44;
    v19 = a2((char *)v42 + 8, v34, *((_QWORD *)&v34 + 1), v35);
    if (v3)
    {
      sub_2445816D0((uint64_t)&v34, &qword_257372638);
      swift_release();
      return v5;
    }
    LODWORD(v42[0]) = v19;
    sub_2445816D0((uint64_t)&v34, &qword_257372638);
    v5 = v43;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_2445A1760(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v43;
    }
    v21 = *(_QWORD *)(v5 + 16);
    v20 = *(_QWORD *)(v5 + 24);
    if (v21 >= v20 >> 1)
    {
      result = sub_2445A1760(v20 > 1, v21 + 1, 1);
      v5 = v43;
    }
    *(_QWORD *)(v5 + 16) = v21 + 1;
    v22 = (_OWORD *)(v5 + 48 * v21);
    v23 = v42[0];
    v24 = v42[2];
    v22[3] = v42[1];
    v22[4] = v24;
    v22[2] = v23;
    v12 = *(_BYTE *)(a1 + 32);
    v13 = 1 << v12;
    if (v9 >= 1 << v12)
      goto LABEL_29;
    v11 = a1 + 64;
    v25 = *(_QWORD *)(v32 + 8 * v15);
    if ((v25 & (1 << v9)) == 0)
      goto LABEL_30;
    v8 = v31;
    if (*(_DWORD *)(a1 + 36) != v31)
      goto LABEL_31;
    v26 = v25 & (-2 << (v9 & 0x3F));
    if (v26)
    {
      v13 = __clz(__rbit64(v26)) | v9 & 0xFFFFFFFFFFFFFFC0;
      v14 = v30;
    }
    else
    {
      v27 = v15 + 1;
      v28 = (v13 + 63) >> 6;
      v14 = v30;
      if (v15 + 1 < v28)
      {
        v29 = *(_QWORD *)(v32 + 8 * v27);
        if (v29)
        {
LABEL_23:
          v13 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v15)
          {
            v29 = *(_QWORD *)(a1 + 80 + 8 * v15++);
            if (v29)
            {
              v27 = v15 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    ++v10;
    v9 = v13;
    if (v10 == v14)
      return v5;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2445BC928(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  __int128 v33;
  _OWORD v34[4];
  char v35;
  __int128 v36;
  _OWORD v37[4];
  char v38;
  int64_t v39;

  v29 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v39 = v7;
      v11 = v10 | (v7 << 6);
      goto LABEL_21;
    }
    v12 = __OFADD__(v7, 1);
    v13 = v7 + 1;
    if (v12)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v30)
      goto LABEL_32;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    if (!v14)
      break;
LABEL_20:
    v5 = (v14 - 1) & v14;
    v39 = v13;
    v11 = __clz(__rbit64(v14)) + (v13 << 6);
LABEL_21:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    sub_244595224(*(_QWORD *)(a1 + 56) + 72 * v11, (uint64_t)v37);
    *(_QWORD *)&v36 = v17;
    *((_QWORD *)&v36 + 1) = v18;
    v34[1] = v37[1];
    v34[2] = v37[2];
    v34[3] = v37[3];
    v35 = v38;
    v33 = v36;
    v34[0] = v37[0];
    v19 = v36;
    swift_bridgeObjectRetain();
    v20 = a2(v19, *((_QWORD *)&v19 + 1), v34);
    if (v2)
    {
      sub_2445816D0((uint64_t)&v33, &qword_257372608);
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v8;
    }
    v23 = v20;
    v24 = v21;
    v25 = v22;
    result = sub_2445816D0((uint64_t)&v33, &qword_257372608);
    if (v24)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_244585518(0, v8[2] + 1, 1, v8);
        v8 = (_QWORD *)result;
      }
      v27 = v8[2];
      v26 = v8[3];
      v28 = v8;
      if (v27 >= v26 >> 1)
      {
        result = (uint64_t)sub_244585518((_QWORD *)(v26 > 1), v27 + 1, 1, v8);
        v28 = (_QWORD *)result;
      }
      v8 = v28;
      v28[2] = v27 + 1;
      v9 = &v28[3 * v27];
      v9[4] = v23;
      v9[5] = v24;
      v9[6] = v25;
    }
    v7 = v39;
  }
  v15 = v13 + 1;
  if (v13 + 1 >= v30)
    goto LABEL_32;
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v13 + 2;
  if (v13 + 2 >= v30)
    goto LABEL_32;
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v13 + 3;
  if (v13 + 3 >= v30)
    goto LABEL_32;
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v13 + 4;
  if (v13 + 4 >= v30)
    goto LABEL_32;
  v14 = *(_QWORD *)(v29 + 8 * v15);
  if (v14)
  {
LABEL_19:
    v13 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v30)
      goto LABEL_32;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

BOOL sub_2445BCC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_2445B79A8(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_2445BCC24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2445B70C8(a1, a2, a3, a4);
}

uint64_t sub_2445BCC3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[5];

  v2 = v1;
  if (v0[18] && (v3 = v0[11], (v4 = *(_QWORD *)(v3 + 16)) != 0))
  {
    swift_bridgeObjectRetain_n();
    v5 = (uint64_t *)(v3 + 40);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain();
      sub_2445B6D4C(v6, v7, v9);
      if (v2)
        break;
      v5 += 2;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      swift_bridgeObjectRelease();
      if (!--v4)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    swift_beginAccess();
    return v0[16];
  }
}

uint64_t sub_2445BCD18(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_2445BCD3C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char *v24;
  void (*v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41[32];
  uint64_t v42;

  v30 = a5;
  v31 = a8;
  v36 = a1;
  v37 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v38 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v12);
  v34 = (char *)&v27 - v14;
  v39 = a4;
  MEMORY[0x24BDAC7A8](v13, v15);
  v33 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = sub_2445C43D8();
  if (!v21)
    return sub_2445C439C();
  v22 = v21;
  v28 = v17;
  v42 = sub_2445C451C();
  v35 = sub_2445C4528();
  sub_2445C4504();
  v39 = v20;
  result = sub_2445C43CC();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v24 = v34;
    while (1)
    {
      v25 = (void (*)(char *, _QWORD))sub_2445C43FC();
      (*(void (**)(char *))(v11 + 16))(v24);
      v25(v41, 0);
      v26 = v40;
      v36(v24, v38);
      if (v26)
        break;
      v40 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
      sub_2445C4510();
      sub_2445C43F0();
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
        return v42;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v28);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v38, v30);
  }
  return result;
}

uint64_t Dictionary<>.toTuplesSortedByValues()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  return Dictionary.toTuplesSortedByValues(by:)((uint64_t)sub_2445BD2F4, (uint64_t)v6, a1, a2, a3, a4);
}

uint64_t Dictionary<>.toTuplesSortedByKeys()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = sub_2445BD328;
  v18 = &v19;
  v5 = sub_2445C41E0();
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x249512E54](MEMORY[0x24BEE04E8], v5);
  v24 = sub_2445BCD3C((void (*)(char *, char *))sub_2445BD32C, (uint64_t)v12, v5, TupleTypeMetadata2, MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  v9 = sub_2445C43B4();
  MEMORY[0x249512E54](MEMORY[0x24BEE12C8], v9);
  v10 = sub_2445C4378();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t Dictionary.toTuplesSortedByValues(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char *TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = sub_2445BD328;
  v18 = &v19;
  v6 = sub_2445C41E0();
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x249512E54](MEMORY[0x24BEE04E8], v6);
  v23 = sub_2445BCD3C((void (*)(char *, char *))sub_2445BD450, (uint64_t)v13, v6, TupleTypeMetadata2, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  v10 = sub_2445C43B4();
  MEMORY[0x249512E54](MEMORY[0x24BEE12C8], v10);
  v11 = sub_2445C4378();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_2445BD2F4()
{
  return sub_2445C41F8() & 1;
}

uint64_t sub_2445BD32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 48);
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a2, a2 + *(int *)(TupleTypeMetadata2 + 48), a1, v6);
}

uint64_t sub_2445BD3C8()
{
  return sub_2445C41F8() & 1;
}

uint64_t sub_2445BD3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, a4, v9);
}

uint64_t sub_2445BD450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40);
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a2, a2 + *(int *)(TupleTypeMetadata2 + 48), a1, v6);
}

uint64_t sub_2445BD4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a1 + *(int *)(TupleTypeMetadata2 + 48), a2 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_2445BD550(uint64_t a1, _QWORD *a2, uint64_t *a3, void (*a4)(char *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;

  v101 = a3;
  v102 = a4;
  v105 = a2;
  v6 = sub_2445C3DD8();
  v88 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_2445C3DCC();
  v96 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98, v10);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_2445C40C0();
  v97 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100, v13);
  v95 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2445C4078();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15, v17);
  v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = a1;
  v20 = sub_2445C3E38();
  v21 = *(_QWORD *)(v20 + 16);
  v99 = v12;
  v90 = v6;
  v89 = v9;
  v93 = v15;
  v94 = v16;
  v92 = v19;
  if (v21)
  {
    v22 = *(_QWORD *)(sub_2445C3F10() - 8);
    v23 = *(unsigned __int8 *)(v22 + 80);
    v91 = v20;
    v24 = v20 + ((v23 + 32) & ~v23);
    v25 = *(_QWORD *)(v22 + 72);
    while (1)
    {
      v26 = sub_2445C3DF0();
      v28 = v27;
      v29 = v105;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v29 = sub_244585BF8(0, v105[2] + 1, 1, v105);
      v31 = v29[2];
      v30 = v29[3];
      if (v31 >= v30 >> 1)
        v29 = sub_244585BF8((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
      v29[2] = v31 + 1;
      v32 = &v29[2 * v31];
      v32[4] = v26;
      v32[5] = v28;
      swift_bridgeObjectRelease();
      sub_2445BEEF4(v24, v29, (uint64_t)v102);
      if (v4)
        goto LABEL_11;
      swift_bridgeObjectRelease();
      v24 += v25;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        v12 = v99;
        v15 = v93;
        v16 = v94;
        v19 = v92;
        goto LABEL_12;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_12:
  v33 = sub_2445C3DE4();
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v35 = *(_QWORD *)(sub_2445C3E74() - 8);
    v36 = *(unsigned __int8 *)(v35 + 80);
    v91 = v33;
    v37 = v33 + ((v36 + 32) & ~v36);
    v38 = *(_QWORD *)(v35 + 72);
    while (1)
    {
      v39 = sub_2445C3DF0();
      v41 = v40;
      v42 = v105;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = sub_244585BF8(0, v105[2] + 1, 1, v105);
      v44 = v42[2];
      v43 = v42[3];
      if (v44 >= v43 >> 1)
        v42 = sub_244585BF8((_QWORD *)(v43 > 1), v44 + 1, 1, v42);
      v42[2] = v44 + 1;
      v45 = &v42[2 * v44];
      v45[4] = v39;
      v45[5] = v41;
      swift_bridgeObjectRelease();
      sub_2445BD550(v37, v42, v101, v102);
      if (v4)
        break;
      swift_bridgeObjectRelease();
      v37 += v38;
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        v12 = v99;
        v15 = v93;
        v16 = v94;
        v19 = v92;
        goto LABEL_23;
      }
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_23:
  v46 = sub_2445C3E08();
  v47 = sub_244575734(MEMORY[0x24BEE4AF8]);
  v48 = (void (*)(char *, uint64_t, uint64_t))v46;
  v104 = (_QWORD *)v47;
  v49 = *(_QWORD *)(v46 + 16);
  if (v49)
  {
    v50 = v15;
    v51 = (char *)v48 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v52 = *(_QWORD *)(v16 + 72);
    v53 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v102 = v48;
    swift_bridgeObjectRetain();
    while (1)
    {
      v53(v19, v51, v50);
      sub_2445BE9F4((uint64_t)&v104, (uint64_t)v19);
      if (v4)
        break;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v50);
      v51 += v52;
      if (!--v49)
      {
        v54 = v16;
        swift_bridgeObjectRelease_n();
        v93 = (uint64_t)v104;
        v12 = v99;
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v50);
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    v54 = v16;
    v93 = v47;
    swift_bridgeObjectRelease();
LABEL_29:
    v55 = (void (*)(char *, uint64_t, uint64_t))sub_2445C3E44();
    v56 = *((_QWORD *)v55 + 2);
    if (v56)
    {
      v57 = *(unsigned __int8 *)(v54 + 80);
      v102 = v55;
      v58 = (uint64_t)v55 + ((v57 + 32) & ~v57);
      v59 = *(_QWORD *)(v54 + 72);
      while (1)
      {
        v60 = sub_2445C3FA0();
        v62 = v61;
        v63 = v105;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v63 = sub_244585BF8(0, v105[2] + 1, 1, v105);
        v65 = v63[2];
        v64 = v63[3];
        if (v65 >= v64 >> 1)
          v63 = sub_244585BF8((_QWORD *)(v64 > 1), v65 + 1, 1, v63);
        v63[2] = v65 + 1;
        v66 = &v63[2 * v65];
        v66[4] = v60;
        v66[5] = v62;
        swift_bridgeObjectRelease();
        sub_2445BF7F0(v58, v101);
        if (v4)
          break;
        swift_bridgeObjectRelease();
        v58 += v59;
        if (!--v56)
        {
          swift_bridgeObjectRelease();
          v12 = v99;
          goto LABEL_41;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_41:
    v68 = sub_2445C3E50();
    v69 = *(_QWORD *)(v68 + 16);
    v70 = v98;
    if (!v69)
    {
      swift_bridgeObjectRelease();
      v75 = sub_2445C3DF0();
      v77 = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v79 = v90;
      v80 = v89;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v105 = sub_244585BF8(0, v105[2] + 1, 1, v105);
      v82 = v105[2];
      v81 = v105[3];
      if (v82 >= v81 >> 1)
        v105 = sub_244585BF8((_QWORD *)(v81 > 1), v82 + 1, 1, v105);
      v83 = v105;
      v105[2] = v82 + 1;
      v84 = &v83[2 * v82];
      v84[4] = v75;
      v84[5] = v77;
      swift_bridgeObjectRelease();
      v104 = v83;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573724E0);
      sub_24459706C();
      sub_2445C41EC();
      swift_bridgeObjectRelease();
      sub_2445C3E20();
      sub_24457EA78(&qword_257372380, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BAA0], MEMORY[0x24BE5BA98]);
      sub_2445C4198();
      if (!v4)
      {
        v86 = v85;
        (*(void (**)(char *, uint64_t))(v88 + 8))(v80, v79);
        __asm { BR              X10 }
      }
      (*(void (**)(char *, uint64_t))(v88 + 8))(v80, v79);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v104 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_2445A177C(0, v69, 0);
    v71 = *(unsigned __int8 *)(v97 + 80);
    v92 = (char *)v68;
    v94 = *(_QWORD *)(v97 + 72);
    v102 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
    v72 = v95;
    v102(v95, v68 + ((v71 + 32) & ~v71), v100);
    sub_2445C409C();
    sub_24457EA78(&qword_257372388, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA90], MEMORY[0x24BE5BA88]);
    sub_2445C4198();
    if (!v4)
    {
      v74 = v73;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v12, v70);
      sub_2445C4084();
      __asm { BR              X9 }
    }
    (*(void (**)(char *, uint64_t))(v96 + 8))(v12, v70);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v72, v100);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_2445BE050@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, unint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, unint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[2];
  unint64_t v82;
  unint64_t v83;

  v3 = v2;
  v6 = sub_2445C4078();
  v76 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v74 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_2445C3E74();
  v77 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66, v9);
  v65 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2445C3F10();
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  MEMORY[0x24BDAC7A8](v11, v12);
  v71 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2445C3F70();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14, v16);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BEE4AF8];
  v83 = sub_2445759D8(MEMORY[0x24BEE4AF8]);
  v82 = sub_244575B20(v19);
  result = MEMORY[0x2495123BC]();
  v21 = result;
  v22 = *(_QWORD *)(result + 16);
  if (v22)
  {
    v23 = 0;
    v24 = result + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v62 = v81;
    v79 = xmmword_2445C6170;
    v69 = result;
    v70 = a1;
    v68 = v14;
    v67 = v15;
    v75 = v18;
    v61 = a2;
    v58 = v6;
    v60 = v22;
    v59 = v24;
    while (v23 < *(_QWORD *)(v21 + 16))
    {
      v25 = v18;
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v18, v24 + *(_QWORD *)(v15 + 72) * v23, v14);
      v80 = sub_2445C3F34();
      v27 = v26;
      v28 = sub_2445C3F40();
      v29 = *(_QWORD *)(v28 + 16);
      v64 = v23;
      if (v29)
      {
        v78 = v27;
        v30 = v72;
        v31 = v28 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
        v63 = v28;
        swift_bridgeObjectRetain();
        v32 = *(_QWORD *)(v30 + 72);
        v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16);
        v34 = (uint64_t)v71;
        v35 = v73;
        while (1)
        {
          v33(v34, v31, v35);
          __swift_instantiateConcreteTypeFromMangledName(&qword_257372440);
          v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = v79;
          *(_QWORD *)(v36 + 32) = v80;
          *(_QWORD *)(v36 + 40) = v78;
          swift_bridgeObjectRetain();
          sub_2445BEEF4(v34, (_QWORD *)v36, (uint64_t)&v83);
          if (v3)
            break;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v35);
          v31 += v32;
          if (!--v29)
          {
            swift_bridgeObjectRelease_n();
            v37 = (uint64_t)v74;
            v25 = v75;
            v23 = v64;
            v27 = v78;
            goto LABEL_10;
          }
        }
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v35);
        swift_bridgeObjectRelease();
        v55 = sub_2445C3EB0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v70, v55);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v75, v68);
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      v37 = (uint64_t)v74;
LABEL_10:
      v38 = sub_2445C3F1C();
      v39 = *(_QWORD *)(v38 + 16);
      if (v39)
      {
        v40 = v77;
        v41 = v38 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
        v78 = v38;
        swift_bridgeObjectRetain();
        v42 = *(_QWORD *)(v40 + 72);
        v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
        v44 = v66;
        v45 = (uint64_t)v65;
        while (1)
        {
          v43(v45, v41, v44);
          __swift_instantiateConcreteTypeFromMangledName(&qword_257372440);
          v46 = swift_allocObject();
          *(_OWORD *)(v46 + 16) = v79;
          *(_QWORD *)(v46 + 32) = v80;
          *(_QWORD *)(v46 + 40) = v27;
          swift_bridgeObjectRetain();
          sub_2445BD550(v45, (_QWORD *)v46, (uint64_t *)&v82, (void (*)(char *, uint64_t, uint64_t))&v83);
          if (v3)
            break;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v45, v44);
          v41 += v42;
          if (!--v39)
          {
            swift_bridgeObjectRelease_n();
            v37 = (uint64_t)v74;
            v25 = v75;
            v23 = v64;
            goto LABEL_16;
          }
        }
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v45, v44);
LABEL_27:
        swift_bridgeObjectRelease();
        v56 = sub_2445C3EB0();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v70, v56);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v75, v68);
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_16:
      v47 = sub_2445C3F58();
      v48 = *(_QWORD *)(v47 + 16);
      if (v48)
      {
        v49 = v76;
        v50 = v47 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
        v63 = v47;
        swift_bridgeObjectRetain();
        v78 = *(_QWORD *)(v49 + 72);
        v51 = *(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16);
        v52 = v58;
        while (1)
        {
          v51(v37, v50, v52);
          v81[0] = v80;
          v81[1] = v27;
          swift_bridgeObjectRetain();
          sub_2445BF7F0(v37, (uint64_t *)&v82);
          if (v3)
            break;
          swift_arrayDestroy();
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v37, v52);
          v50 += v78;
          if (!--v48)
          {
            swift_bridgeObjectRelease_n();
            v25 = v75;
            goto LABEL_22;
          }
        }
        swift_arrayDestroy();
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v37, v52);
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
LABEL_22:
      ++v23;
      v15 = v67;
      v18 = v25;
      v14 = v68;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v25, v68);
      result = swift_bridgeObjectRelease();
      v21 = v69;
      a1 = v70;
      a2 = v61;
      v24 = v59;
      if (v23 == v60)
        goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    v53 = sub_2445C3EB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(a1, v53);
    result = swift_bridgeObjectRelease();
    v54 = v83;
    *a2 = v82;
    a2[1] = v54;
  }
  return result;
}

uint64_t sub_2445BE6DC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = sub_2445C403C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if ((_DWORD)result == *MEMORY[0x24BE5BCA8])
  {
    *a2 = 0;
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BC88])
  {
    v10 = 1;
LABEL_19:
    *a2 = v10;
    return result;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BCA0])
  {
    v10 = 2;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BCD0])
  {
    v10 = 3;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BC98])
  {
    v10 = 4;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BCE0])
  {
    v10 = 5;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BCD8])
  {
    v10 = 6;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BC70])
  {
    v10 = 7;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BCC0])
  {
    v10 = 8;
    goto LABEL_19;
  }
  if ((_DWORD)result == *MEMORY[0x24BE5BC90])
  {
    sub_244585138();
    swift_allocError();
    *v11 = 0xD000000000000013;
    v11[1] = 0x80000002445C58D0;
    return swift_willThrow();
  }
  else
  {
    if ((_DWORD)result == *MEMORY[0x24BE5BCE8])
    {
      v10 = 9;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BC80])
    {
      v10 = 10;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BCC8])
    {
      v10 = 11;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BC78])
    {
      v10 = 12;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BCF8])
    {
      v10 = 13;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BD00])
    {
      v10 = 14;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BCB0])
    {
      v10 = 15;
      goto LABEL_19;
    }
    if ((_DWORD)result == *MEMORY[0x24BE5BCB8])
    {
      v10 = 16;
      goto LABEL_19;
    }
    result = sub_2445C454C();
    __break(1u);
  }
  return result;
}

uint64_t sub_2445BE9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];

  v55 = a1;
  v51 = sub_2445C3FDC();
  v54 = *(_QWORD *)(v51 - 8);
  v4 = MEMORY[0x24BDAC7A8](v51, v3);
  v53 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v6);
  v52 = (char *)v44 - v7;
  v8 = sub_2445C3CAC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_2445C3DC0();
  v13 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57, v14);
  v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_2445C403C();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17, v19);
  v21 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a2;
  sub_2445C3FB8();
  v22 = v58;
  sub_2445BE6DC((uint64_t)v21, (char *)v59);
  if (!v22)
  {
    v58 = v13;
    v48 = v12;
    v49 = v9;
    v50 = v8;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v24 = LOBYTE(v59[0]);
    sub_2445C4018();
    sub_24457EA78(&qword_257372390, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA80], MEMORY[0x24BE5BA78]);
    v25 = v57;
    sub_2445C4198();
    v45 = v24;
    v46 = 0;
    v47 = v26;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v25);
    v27 = sub_2445C3FA0();
    v29 = v28;
    v30 = sub_2445C4054();
    v32 = v31;
    swift_bridgeObjectRelease();
    v33 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0)
      v33 = v30 & 0xFFFFFFFFFFFFLL;
    v44[2] = v29;
    v44[1] = v27;
    if (v33)
    {
      v59[0] = sub_2445C4054();
      v59[1] = v34;
      v35 = v48;
      sub_2445C3C70();
      sub_244597C30();
      v36 = sub_2445C4474();
      v57 = v37;
      v58 = v36;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
    v38 = v51;
    v39 = v52;
    v52 = (char *)sub_2445C4000();
    sub_2445C3FE8();
    v41 = v53;
    v40 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, *MEMORY[0x24BE5BC28], v38);
    sub_24457EA78(&qword_2573726B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BC30], MEMORY[0x24BE5BC38]);
    v42 = v38;
    sub_2445C4390();
    sub_2445C4390();
    v43 = *(void (**)(char *, uint64_t))(v40 + 8);
    v43(v41, v42);
    v43(v39, v42);
    if ((sub_2445C3F94() & 1) != 0)
      sub_2445C3F7C();
    __asm { BR              X12 }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t sub_2445BEEF4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  char v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  _QWORD v61[8];
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;

  v61[7] = a3;
  v70 = a2;
  v65 = sub_2445C3E80();
  v67 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65, v4);
  v64 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2445C4120();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v11 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v12);
  v14 = (char *)v61 - v13;
  v15 = sub_2445C3DB4();
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA00];
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15, v18);
  v20 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a1;
  sub_2445C3EEC();
  sub_24457EA78(&qword_2573723A0, v16, MEMORY[0x24BE5B9F8]);
  v21 = v73;
  v22 = sub_2445C4198();
  if (!v21)
  {
    v71 = v14;
    v72 = v6;
    v68 = v11;
    v73 = v7;
    v61[6] = v22;
    v62 = v23;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
    v25 = sub_2445C3EBC();
    v27 = v26;
    v28 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v66 = 0;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v28 = sub_244585BF8(0, v28[2] + 1, 1, v28);
    v31 = v72;
    v30 = v73;
    v33 = v28[2];
    v32 = v28[3];
    if (v33 >= v32 >> 1)
      v28 = sub_244585BF8((_QWORD *)(v32 > 1), v33 + 1, 1, v28);
    v28[2] = v33 + 1;
    v34 = &v28[2 * v33];
    v34[4] = v25;
    v34[5] = v27;
    swift_bridgeObjectRelease();
    v74 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573724E0);
    sub_24459706C();
    v61[3] = sub_2445C41EC();
    v61[5] = v35;
    v36 = swift_bridgeObjectRelease();
    v37 = MEMORY[0x249512404](v36);
    v38 = (_QWORD *)sub_244575C70(MEMORY[0x24BEE4AF8]);
    v39 = *(_QWORD *)(v37 + 16);
    if (v39)
    {
      v40 = v37 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      v41 = *(_QWORD **)(v30 + 16);
      v69 = *(_QWORD *)(v30 + 72);
      v70 = v41;
      v61[4] = v37;
      swift_bridgeObjectRetain();
      v42 = v71;
      do
      {
        ((void (*)(char *, unint64_t, uint64_t))v70)(v42, v40, v31);
        v43 = sub_2445C40CC();
        v45 = v44;
        v46 = sub_2445C40E4();
        v47 = v38;
        v48 = swift_isUniquelyReferenced_nonNull_native();
        v74 = v47;
        v50 = sub_2445A14D8(v43, v45);
        v51 = v47[2];
        v52 = (v49 & 1) == 0;
        v53 = v51 + v52;
        if (__OFADD__(v51, v52))
        {
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x2445BF768);
        }
        v54 = v49;
        if (v47[3] >= v53)
        {
          if ((v48 & 1) == 0)
            sub_244592D2C();
        }
        else
        {
          sub_244591134(v53, v48);
          v55 = sub_2445A14D8(v43, v45);
          if ((v54 & 1) != (v56 & 1))
          {
            sub_2445C4648();
            __break(1u);
            JUMPOUT(0x2445BF7C0);
          }
          v50 = v55;
        }
        v38 = v74;
        if ((v54 & 1) != 0)
        {
          *(_QWORD *)(v74[7] + 8 * v50) = v46;
        }
        else
        {
          v74[(v50 >> 6) + 8] |= 1 << v50;
          v57 = (uint64_t *)(v38[6] + 16 * v50);
          *v57 = v43;
          v57[1] = v45;
          *(_QWORD *)(v38[7] + 8 * v50) = v46;
          v58 = v38[2];
          v59 = __OFADD__(v58, 1);
          v60 = v58 + 1;
          if (v59)
            goto LABEL_23;
          v38[2] = v60;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v72;
        v42 = v71;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v72);
        v40 += v69;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v15);
}

uint64_t sub_2445BF7F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD v62[2];
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  char v79;
  __int128 v80;
  uint64_t v81;

  v69 = a2;
  v2 = sub_2445C3FDC();
  v66 = *(_QWORD *)(v2 - 8);
  v67 = v2;
  v4 = MEMORY[0x24BDAC7A8](v2, v3);
  v65 = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v6);
  v64 = (char *)v62 - v7;
  v8 = sub_2445C403C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2445C3CAC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_2445C4048();
  v73 = v18;
  sub_2445C3C70();
  v63 = sub_244597C30();
  v19 = sub_2445C4474();
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  swift_bridgeObjectRelease();
  v23 = HIBYTE(v21) & 0xF;
  v68 = v19;
  if ((v21 & 0x2000000000000000) == 0)
    v23 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    sub_244585138();
    swift_allocError();
    *v26 = 0xD000000000000010;
    v26[1] = 0x80000002445C5AE0;
    return swift_willThrow();
  }
  v70 = v21;
  sub_2445C3FB8();
  v24 = v71;
  sub_2445BE6DC((uint64_t)v12, (char *)&v72);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_bridgeObjectRelease();
  }
  v62[1] = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v27 = v72;
  v28 = sub_2445C4054();
  v30 = v29;
  swift_bridgeObjectRelease();
  v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v31 = v28 & 0xFFFFFFFFFFFFLL;
  LODWORD(v71) = v27;
  if (v31)
  {
    v72 = sub_2445C4054();
    v73 = v32;
    sub_2445C3C70();
    v63 = sub_2445C4474();
    v34 = v33;
    v22(v17, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v63 = 0;
    v34 = 0;
  }
  v35 = (int)sub_2445C4000();
  v36 = v64;
  sub_2445C3FE8();
  v38 = v65;
  v37 = v66;
  v39 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, *MEMORY[0x24BE5BC28], v67);
  sub_24457EA78(&qword_2573726B8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BC30], MEMORY[0x24BE5BC38]);
  sub_2445C4390();
  sub_2445C4390();
  v40 = v72 == v81;
  v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  v41(v38, v39);
  v41(v36, v39);
  LOBYTE(v74) = v71;
  *((_QWORD *)&v74 + 1) = v63;
  v75 = v34;
  v76 = v35;
  v77 = v40;
  v78 = 0;
  v79 = 1;
  v80 = xmmword_2445C6A40;
  v71 = sub_2445C3FA0();
  v43 = v42;
  swift_bridgeObjectRetain();
  sub_24457475C(0, 0xF000000000000000);
  v44 = v69;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72 = *v44;
  v46 = v72;
  *v44 = 0x8000000000000000;
  v47 = v68;
  v48 = v70;
  v50 = sub_2445A14D8(v68, v70);
  v51 = *(_QWORD *)(v46 + 16);
  v52 = (v49 & 1) == 0;
  v53 = v51 + v52;
  if (__OFADD__(v51, v52))
  {
    __break(1u);
    goto LABEL_22;
  }
  LOBYTE(v37) = v49;
  if (*(_QWORD *)(v46 + 24) >= v53)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_17;
LABEL_22:
    sub_244593458();
    goto LABEL_17;
  }
  sub_244591D4C(v53, isUniquelyReferenced_nonNull_native);
  v54 = sub_2445A14D8(v47, v48);
  if ((v37 & 1) != (v55 & 1))
  {
    result = sub_2445C4648();
    __break(1u);
    return result;
  }
  v50 = v54;
LABEL_17:
  *v44 = v72;
  swift_bridgeObjectRelease();
  v56 = (_QWORD *)*v44;
  swift_bridgeObjectRetain();
  if ((v37 & 1) == 0)
  {
    v57 = MEMORY[0x24BEE4AF8];
    v58 = sub_244575734(MEMORY[0x24BEE4AF8]);
    sub_24459471C(v50, v47, v48, v58, v57, 0, 0xF000000000000000, v56);
    swift_bridgeObjectRetain();
  }
  v59 = v56[7];
  swift_bridgeObjectRelease();
  v60 = 32 * v50;
  v61 = swift_isUniquelyReferenced_nonNull_native();
  v72 = *(_QWORD *)(v59 + v60);
  *(_QWORD *)(v59 + v60) = 0x8000000000000000;
  sub_244593BA8(&v74, v71, v43, v61);
  *(_QWORD *)(v59 + v60) = v72;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2445747E8(0, 0xF000000000000000);
  return swift_bridgeObjectRelease();
}

_QWORD *MessageSchema.makeFlatMessagePayload(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[4];
  _QWORD v9[5];
  _QWORD *v10;
  unint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  sub_244577E90(v1, (uint64_t)v12);
  v4 = v13;
  v5 = v14;
  v6 = __swift_project_boxed_opaque_existential_1(v12, v13);
  v8[2] = a1;
  (*(void (**)(_QWORD *__return_ptr, uint64_t (*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))(v5 + 96))(v9, sub_2445C0044, v8, v4, v5);
  if (!v2)
  {
    v6 = v10;
    sub_244574770((uint64_t)v10, v11);
    sub_244575334((uint64_t)v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v6;
}

uint64_t sub_2445BFE10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[7];

  v7 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v10 = v9(v7, v8);
  if (!*(_QWORD *)(a2 + 16) || (v12 = sub_2445A14D8(v10, v11), (v13 & 1) == 0))
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_244577E90(*(_QWORD *)(a2 + 56) + 40 * v12, (uint64_t)&v23);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_7:
    result = sub_2445C005C((uint64_t)&v23);
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_WORD *)(a3 + 56) = -256;
    return result;
  }
  sub_24457466C(&v23, (uint64_t)v26);
  v14 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15) & 1) != 0)
  {
    *(_QWORD *)&v23 = 0;
    *((_QWORD *)&v23 + 1) = 0xE000000000000000;
    sub_2445C44D4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v23 = 0xD00000000000002BLL;
    *((_QWORD *)&v23 + 1) = 0x80000002445C5B40;
    v9(v7, v8);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    v16 = v23;
    sub_244578600();
    swift_allocError();
    *(_OWORD *)v17 = v16;
    *(_BYTE *)(v17 + 16) = 6;
    swift_willThrow();
  }
  else
  {
    v19 = a1[3];
    v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    v21 = v26[6];
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 56))(v22, v19, v20);
    if (!v21)
    {
      TypeSchemaDescription.asPublic()((uint64_t)&v23);
      sub_2445752C0((uint64_t)v22);
      TypeSchema.makeValue(from:)(v26, a3);
      sub_24458E974((uint64_t)&v23);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t sub_2445C0044@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2445BFE10(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2445C005C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573726C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2445C009C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  _BYTE v27[64];
  __int128 v28[2];
  __int128 v29[2];
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  if (v3)
    return result;
  v9 = result;
  v10 = a2[3];
  if (v10 >= a2[2])
    return swift_bridgeObjectRelease();
  v34 = &v30;
  while (1)
  {
    v11 = *a2;
    if (*a2)
    {
      v12 = a2[1] - v11;
      if (v10 >= v12)
        break;
    }
    else
    {
      if ((v10 & 0x8000000000000000) == 0)
        break;
      v12 = 0;
    }
    v13 = *(unsigned __int8 *)(v11 + v10);
    v14 = v10 + 1;
    if ((*(char *)(v11 + v10) & 0x80000000) == 0)
    {
      a2[3] = v14;
      goto LABEL_19;
    }
    if (v14 >= v12)
      break;
    v13 &= 0x7Fu;
    v15 = v11 + 1;
    v16 = 7;
    while (1)
    {
      v17 = v10 + 2;
      v13 |= (unint64_t)(*(_BYTE *)(v15 + v10) & 0x7F) << v16;
      if ((*(_BYTE *)(v15 + v10) & 0x80) == 0)
        break;
      if (v17 < v12)
      {
        ++v10;
        v18 = v16 > 0x38;
        v16 += 7;
        if (!v18)
          continue;
      }
      goto LABEL_29;
    }
    a2[3] = v17;
    if (v13 > 0xFFFFFFFE)
      break;
LABEL_19:
    v19 = v13 & 7;
    if (v13 < 8 || v19 >= 6)
      break;
    if (*(_QWORD *)(v9 + 16) && (v21 = sub_2445A153C(v13 >> 3), (v22 & 1) != 0))
    {
      sub_244577E90(*(_QWORD *)(v9 + 56) + 40 * v21, (uint64_t)v29);
      sub_24457466C(v29, (uint64_t)v31);
      sub_244577E90((uint64_t)v31, (uint64_t)v28);
      v24 = v32;
      v23 = v33;
      __swift_project_boxed_opaque_existential_1(v31, v32);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v23 + 56))(v26, v24, v23);
      sub_2445735C4((uint64_t)v26, v19, (uint64_t)v27);
      sub_2445752C0((uint64_t)v26);
      sub_24457466C(v28, (uint64_t)v29);
      sub_24458170C((uint64_t)v27, (uint64_t)v34);
      sub_24459B864((uint64_t)v29, a3);
      sub_24459CD40((uint64_t)v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
    else
    {
      sub_244581834(v13);
    }
    v10 = a2[3];
    if (v10 >= a2[2])
      return swift_bridgeObjectRelease();
  }
LABEL_29:
  sub_24457FE80();
  swift_allocError();
  *(_QWORD *)v25 = 1;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_OWORD *)(v25 + 88) = 0u;
  *(_WORD *)(v25 + 104) = 512;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2445C0388(_QWORD *a1, void (*a2)(__int128 *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];
  _BYTE v25[64];
  __int128 v26[2];
  __int128 v27[2];
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
  if (v3)
    return result;
  v8 = result;
  v9 = v2[3];
  if (v9 >= v2[2])
    return swift_bridgeObjectRelease();
  v32 = &v28;
  while (1)
  {
    v10 = *v2;
    if (*v2)
    {
      v11 = v2[1] - v10;
      if (v9 >= v11)
        break;
    }
    else
    {
      if ((v9 & 0x8000000000000000) == 0)
        break;
      v11 = 0;
    }
    v12 = *(unsigned __int8 *)(v10 + v9);
    v13 = v9 + 1;
    if ((*(char *)(v10 + v9) & 0x80000000) == 0)
    {
      v2[3] = v13;
      goto LABEL_19;
    }
    if (v13 >= v11)
      break;
    v12 &= 0x7Fu;
    v14 = v10 + 1;
    v15 = 7;
    while (1)
    {
      v16 = v9 + 2;
      v12 |= (unint64_t)(*(_BYTE *)(v14 + v9) & 0x7F) << v15;
      if ((*(_BYTE *)(v14 + v9) & 0x80) == 0)
        break;
      if (v16 < v11)
      {
        ++v9;
        v18 = v15 > 0x38;
        v15 += 7;
        if (!v18)
          continue;
      }
      goto LABEL_29;
    }
    v2[3] = v16;
    if (v12 > 0xFFFFFFFE)
      break;
LABEL_19:
    v17 = v12 & 7;
    v18 = v12 < 8 || v17 > 5;
    if (v18)
      break;
    if (*(_QWORD *)(v8 + 16) && (v19 = sub_2445A153C(v12 >> 3), (v20 & 1) != 0))
    {
      sub_244577E90(*(_QWORD *)(v8 + 56) + 40 * v19, (uint64_t)v27);
      sub_24457466C(v27, (uint64_t)v29);
      sub_244577E90((uint64_t)v29, (uint64_t)v26);
      v22 = v30;
      v21 = v31;
      __swift_project_boxed_opaque_existential_1(v29, v30);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 56))(v24, v22, v21);
      sub_2445735C4((uint64_t)v24, v17, (uint64_t)v25);
      sub_2445752C0((uint64_t)v24);
      sub_24457466C(v26, (uint64_t)v27);
      sub_24458170C((uint64_t)v25, (uint64_t)v32);
      a2(v27);
      sub_24459CD40((uint64_t)v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
    else
    {
      sub_244581834(v12);
    }
    v9 = v2[3];
    if (v9 >= v2[2])
      return swift_bridgeObjectRelease();
  }
LABEL_29:
  sub_24457FE80();
  swift_allocError();
  *(_QWORD *)v23 = 1;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_WORD *)(v23 + 104) = 512;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2445C0670(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v36 = MEMORY[0x24BEE4AF8];
  sub_2445A1888(0, v1, 0);
  v2 = v36;
  result = sub_2445BC58C(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v29 = v3 + 80;
  v30 = v1;
  v31 = v5;
  v32 = v3 + 64;
  v33 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v34 = v7;
    v12 = *(_QWORD *)(v3 + 56);
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v14 = v13[1];
    v35 = *v13;
    v15 = (uint64_t *)(v12 + 32 * v6);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v17, v18);
    result = swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v36 + 16);
    v20 = *(_QWORD *)(v36 + 24);
    v22 = v21 + 1;
    if (v21 >= v20 >> 1)
    {
      result = sub_2445A1888(v20 > 1, v21 + 1, 1);
      v22 = v21 + 1;
    }
    *(_QWORD *)(v36 + 16) = v22;
    v23 = (_QWORD *)(v36 + 48 * v21);
    v23[4] = v35;
    v23[5] = v14;
    v23[6] = v16;
    v23[7] = v17;
    v23[8] = v18;
    v23[9] = v19;
    v3 = v33;
    v9 = 1 << *(_BYTE *)(v33 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v32;
    v24 = *(_QWORD *)(v32 + 8 * v11);
    if ((v24 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v31;
    if (*(_DWORD *)(v33 + 36) != v31)
      goto LABEL_27;
    v25 = v24 & (-2 << (v6 & 0x3F));
    if (v25)
    {
      v9 = __clz(__rbit64(v25)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v30;
    }
    else
    {
      v26 = v11 + 1;
      v27 = (unint64_t)(v9 + 63) >> 6;
      v10 = v30;
      if (v11 + 1 < v27)
      {
        v28 = *(_QWORD *)(v32 + 8 * v26);
        if (v28)
        {
LABEL_20:
          v9 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v11)
          {
            v28 = *(_QWORD *)(v29 + 8 * v11++);
            if (v28)
            {
              v26 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v34 + 1;
    v6 = v9;
    if (v34 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2445C0958(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v33 = MEMORY[0x24BEE4AF8];
  sub_2445A18A4(0, v1, 0);
  v2 = v33;
  result = sub_2445BC58C(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v25 = v3 + 80;
  v26 = v1;
  v27 = v5;
  v28 = v3 + 64;
  v29 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v30 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v13 = v12[1];
    v31 = *v12;
    v14 = *(_QWORD *)(v3 + 56) + 32 * v6;
    v32 = *(_OWORD *)v14;
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v15, v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v15, v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24457475C(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_2445747E8(v15, v16);
    v18 = *(_QWORD *)(v33 + 16);
    v17 = *(_QWORD *)(v33 + 24);
    if (v18 >= v17 >> 1)
      result = sub_2445A18A4(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v33 + 16) = v18 + 1;
    v19 = v33 + 48 * v18;
    *(_QWORD *)(v19 + 32) = v31;
    *(_QWORD *)(v19 + 40) = v13;
    *(_OWORD *)(v19 + 48) = v32;
    *(_QWORD *)(v19 + 64) = v15;
    *(_QWORD *)(v19 + 72) = v16;
    v3 = v29;
    v9 = 1 << *(_BYTE *)(v29 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v28;
    v20 = *(_QWORD *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v27;
    if (*(_DWORD *)(v29 + 36) != v27)
      goto LABEL_27;
    v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v26;
    }
    else
    {
      v22 = v11 + 1;
      v23 = (unint64_t)(v9 + 63) >> 6;
      v10 = v26;
      if (v11 + 1 < v23)
      {
        v24 = *(_QWORD *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            v24 = *(_QWORD *)(v25 + 8 * v11++);
            if (v24)
            {
              v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v30 + 1;
    v6 = v9;
    if (v30 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2445C0C4C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t result;
  __int128 v19[2];
  __int128 v20[2];
  uint64_t v21;
  uint64_t v22[6];

  v6 = *v2;
  v22[0] = sub_2445C0670(v2[1]);
  swift_bridgeObjectRetain();
  sub_2445BB1F4(v22, (uint64_t (*)(uint64_t))sub_2445BC564, sub_2445C108C);
  if (v3)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = v22[0];
    v22[0] = sub_2445C0958(v6);
    swift_bridgeObjectRetain();
    sub_2445BB1F4(v22, (uint64_t (*)(uint64_t))sub_2445BC578, sub_2445C17D4);
    swift_bridgeObjectRelease();
    v8 = v22[0];
    ObjectType = swift_getObjectType();
    v10 = *(void (**)(__int128 *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(a1 + 24);
    v10(v20, 0xD000000000000021, 0x80000002445C5470, ObjectType, a1);
    v22[5] = sub_2445C41D4();
    sub_24457466C(v20, (uint64_t)v22);
    v10(v19, 0xD000000000000023, 0x80000002445C4A90, ObjectType, a1);
    v21 = sub_2445C41D4();
    v11 = sub_24457466C(v19, (uint64_t)v20);
    MEMORY[0x24BDAC7A8](v11, v12);
    v13 = sub_2445C23E0(v7, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))sub_2445C1048);
    swift_release();
    v14 = SchematizedDataComposer.subscript.setter(v13, 0x7079745F6D756E65, 0xE900000000000065);
    MEMORY[0x24BDAC7A8](v14, v15);
    v16 = sub_2445C25D0(v8, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))sub_2445C2598);
    swift_release();
    SchematizedDataComposer.subscript.setter(v16, 0x5F6567617373656DLL, 0xEC00000065707974);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257372680);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2445C6170;
    SchematizedDataComposer.compose()(inited + 32);
    SchematizedDataComposer.subscript.setter(inited, 1701603686, 0xE400000000000000);
    SchematizedDataComposer.compose()(a2);
    sub_24457C40C((uint64_t)v20);
    return sub_24457C40C((uint64_t)v22);
  }
  return result;
}

uint64_t sub_2445C1000(uint64_t *a1)
{
  return sub_2445BB1F4(a1, (uint64_t (*)(uint64_t))sub_2445BC564, sub_2445C108C);
}

uint64_t sub_2445C1024(uint64_t *a1)
{
  return sub_2445BB1F4(a1, (uint64_t (*)(uint64_t))sub_2445BC578, sub_2445C17D4);
}

uint64_t sub_2445C1048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_24457B470(a1, a2, *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_2445C108C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  BOOL v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *__dst;

  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_2445C1F24(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v113 = result;
  v110 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v101 = v11;
      v112 = v8;
      if (v12 >= 2)
      {
        v102 = *v110;
        do
        {
          v103 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v102)
            goto LABEL_159;
          v104 = v101;
          v105 = *(_QWORD *)&v101[16 * v103 + 32];
          v106 = *(_QWORD *)&v101[16 * v12 + 24];
          sub_2445C210C((char *)(v102 + 48 * v105), (char *)(v102 + 48 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 48 * v106, __dst);
          if (v1)
            break;
          if (v106 < v105)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v104 = sub_2445BC280((uint64_t)v104);
          if (v103 >= *((_QWORD *)v104 + 2))
            goto LABEL_149;
          v107 = &v104[16 * v103 + 32];
          *(_QWORD *)v107 = v105;
          *((_QWORD *)v107 + 1) = v106;
          v108 = *((_QWORD *)v104 + 2);
          if (v12 > v108)
            goto LABEL_150;
          memmove(&v104[16 * v12 + 16], &v104[16 * v12 + 32], 16 * (v108 - v12));
          v101 = v104;
          *((_QWORD *)v104 + 2) = v108 - 1;
          v12 = v108 - 1;
        }
        while (v108 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v112 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v112 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573726B0);
    v7 = sub_2445C43A8();
    *(_QWORD *)(v7 + 16) = v6;
    v112 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v111 = *a1 + 8;
  v109 = *a1 + 40;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v114 = v3;
  v115 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 48 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 48 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2445C45B8();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v111 + 48 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 48 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2445C45B8()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 6;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 48 * v20;
        v26 = 48 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = (_OWORD *)(v10 + v26);
            v30 = *(_QWORD *)(v10 + v26);
            v31 = v10 + v25;
            v32 = *(_QWORD *)(v10 + v26 + 40);
            v33 = *(_OWORD *)(v10 + v26 + 8);
            v34 = *(_OWORD *)(v10 + v26 + 24);
            v36 = *(_OWORD *)(v10 + v25 - 32);
            v35 = *(_OWORD *)(v10 + v25 - 16);
            *v29 = *(_OWORD *)(v10 + v25 - 48);
            v29[1] = v36;
            v29[2] = v35;
            *(_QWORD *)(v31 - 48) = v30;
            *(_OWORD *)(v31 - 40) = v33;
            *(_OWORD *)(v31 - 24) = v34;
            *(_QWORD *)(v31 - 8) = v32;
          }
          ++v28;
          v25 -= 48;
          v26 += 48;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v113)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2445BBEB0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v51 = *((_QWORD *)v11 + 2);
    v50 = *((_QWORD *)v11 + 3);
    v12 = v51 + 1;
    if (v51 >= v50 >> 1)
      v11 = sub_2445BBEB0((char *)(v50 > 1), v51 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v52 = v11 + 32;
    v53 = &v11[16 * v51 + 32];
    *(_QWORD *)v53 = v13;
    *((_QWORD *)v53 + 1) = v9;
    if (v51)
    {
      v10 = v115;
      while (1)
      {
        v54 = v12 - 1;
        if (v12 >= 4)
        {
          v59 = &v52[16 * v12];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_135;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_136;
          v66 = v12 - 2;
          v67 = &v52[16 * v12 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_138;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_141;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_145;
            v82 = v57 < v92;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v83 = *((_QWORD *)v11 + 4);
            v84 = *((_QWORD *)v11 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_99;
          }
          v56 = *((_QWORD *)v11 + 4);
          v55 = *((_QWORD *)v11 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_137;
        v66 = v12 - 2;
        v72 = &v52[16 * v12 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_140;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_143;
        if (__OFADD__(v76, v81))
          goto LABEL_144;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_105:
          if (v82)
            v54 = v66;
          goto LABEL_107;
        }
LABEL_99:
        if ((v77 & 1) != 0)
          goto LABEL_139;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_142;
        if (v88 < v76)
          goto LABEL_15;
LABEL_107:
        v93 = v54 - 1;
        if (v54 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v94 = v11;
        v95 = v10;
        v96 = &v52[16 * v93];
        v97 = *(_QWORD *)v96;
        v98 = &v52[16 * v54];
        v99 = *((_QWORD *)v98 + 1);
        sub_2445C210C((char *)(v95 + 48 * *(_QWORD *)v96), (char *)(v95 + 48 * *(_QWORD *)v98), v95 + 48 * v99, __dst);
        if (v1)
          goto LABEL_115;
        if (v99 < v97)
          goto LABEL_132;
        if (v54 > *((_QWORD *)v94 + 2))
          goto LABEL_133;
        *(_QWORD *)v96 = v97;
        *(_QWORD *)&v52[16 * v93 + 8] = v99;
        v100 = *((_QWORD *)v94 + 2);
        if (v54 >= v100)
          goto LABEL_134;
        v11 = v94;
        v12 = v100 - 1;
        memmove(&v52[16 * v54], v98 + 16, 16 * (v100 - 1 - v54));
        *((_QWORD *)v94 + 2) = v100 - 1;
        v82 = v100 > 2;
        v10 = v115;
        if (!v82)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v115;
LABEL_15:
    v3 = v114;
    if (v9 >= v114)
    {
      v8 = v112;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v113))
    goto LABEL_153;
  if (v13 + v113 >= v3)
    v37 = v3;
  else
    v37 = v13 + v113;
  if (v37 >= v13)
  {
    if (v9 != v37)
    {
      v38 = v109 + 48 * v9;
      do
      {
        v39 = (uint64_t *)(v10 + 48 * v9);
        v40 = *v39;
        v41 = v39[1];
        v42 = v13;
        v43 = v38;
        do
        {
          v44 = (_OWORD *)(v43 - 88);
          v45 = v40 == *(_QWORD *)(v43 - 88) && v41 == *(_QWORD *)(v43 - 80);
          if (v45 || (sub_2445C45B8() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v47 = *(_OWORD *)(v43 - 72);
          v46 = *(_OWORD *)(v43 - 56);
          *(_QWORD *)(v43 - 48) = *(_QWORD *)v43;
          v43 -= 48;
          v40 = *(_QWORD *)(v43 + 8);
          v48 = *(_OWORD *)(v43 + 16);
          v49 = *(_OWORD *)(v43 + 32);
          v44[3] = *v44;
          v44[4] = v47;
          v44[5] = v46;
          *(_QWORD *)(v43 - 40) = v40;
          *(_OWORD *)(v43 - 32) = v48;
          *(_OWORD *)(v43 - 16) = v49;
          v41 = v48;
          ++v42;
        }
        while (v9 != v42);
        ++v9;
        v38 += 48;
      }
      while (v9 != v37);
      v9 = v37;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_2445C17D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  BOOL v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *__dst;

  v3 = a1[1];
  result = sub_2445C45A0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_2445C2014(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v113 = result;
  v110 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v101 = v11;
      v112 = v8;
      if (v12 >= 2)
      {
        v102 = *v110;
        do
        {
          v103 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v102)
            goto LABEL_159;
          v104 = v101;
          v105 = *(_QWORD *)&v101[16 * v103 + 32];
          v106 = *(_QWORD *)&v101[16 * v12 + 24];
          sub_2445C210C((char *)(v102 + 48 * v105), (char *)(v102 + 48 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 48 * v106, __dst);
          if (v1)
            break;
          if (v106 < v105)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v104 = sub_2445BC280((uint64_t)v104);
          if (v103 >= *((_QWORD *)v104 + 2))
            goto LABEL_149;
          v107 = &v104[16 * v103 + 32];
          *(_QWORD *)v107 = v105;
          *((_QWORD *)v107 + 1) = v106;
          v108 = *((_QWORD *)v104 + 2);
          if (v12 > v108)
            goto LABEL_150;
          memmove(&v104[16 * v12 + 16], &v104[16 * v12 + 32], 16 * (v108 - v12));
          v101 = v104;
          *((_QWORD *)v104 + 2) = v108 - 1;
          v12 = v108 - 1;
        }
        while (v108 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v112 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v112 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573726A8);
    v7 = sub_2445C43A8();
    *(_QWORD *)(v7 + 16) = v6;
    v112 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v111 = *a1 + 8;
  v109 = *a1 + 32;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v114 = v3;
  v115 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 48 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 48 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2445C45B8();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v111 + 48 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 48 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2445C45B8()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 6;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 48 * v20;
        v26 = 48 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = (_OWORD *)(v10 + v26);
            v30 = *(_QWORD *)(v10 + v26);
            v31 = v10 + v25;
            v32 = *(_QWORD *)(v10 + v26 + 24);
            v33 = *(_OWORD *)(v10 + v26 + 8);
            v34 = *(_OWORD *)(v10 + v26 + 32);
            v36 = *(_OWORD *)(v10 + v25 - 32);
            v35 = *(_OWORD *)(v10 + v25 - 16);
            *v29 = *(_OWORD *)(v10 + v25 - 48);
            v29[1] = v36;
            v29[2] = v35;
            *(_QWORD *)(v31 - 48) = v30;
            *(_OWORD *)(v31 - 40) = v33;
            *(_QWORD *)(v31 - 24) = v32;
            *(_OWORD *)(v31 - 16) = v34;
          }
          ++v28;
          v25 -= 48;
          v26 += 48;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v113)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2445BBEB0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v51 = *((_QWORD *)v11 + 2);
    v50 = *((_QWORD *)v11 + 3);
    v12 = v51 + 1;
    if (v51 >= v50 >> 1)
      v11 = sub_2445BBEB0((char *)(v50 > 1), v51 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v52 = v11 + 32;
    v53 = &v11[16 * v51 + 32];
    *(_QWORD *)v53 = v13;
    *((_QWORD *)v53 + 1) = v9;
    if (v51)
    {
      v10 = v115;
      while (1)
      {
        v54 = v12 - 1;
        if (v12 >= 4)
        {
          v59 = &v52[16 * v12];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_135;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_136;
          v66 = v12 - 2;
          v67 = &v52[16 * v12 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_138;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_141;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_145;
            v82 = v57 < v92;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v83 = *((_QWORD *)v11 + 4);
            v84 = *((_QWORD *)v11 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_99;
          }
          v56 = *((_QWORD *)v11 + 4);
          v55 = *((_QWORD *)v11 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_137;
        v66 = v12 - 2;
        v72 = &v52[16 * v12 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_140;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_143;
        if (__OFADD__(v76, v81))
          goto LABEL_144;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_105:
          if (v82)
            v54 = v66;
          goto LABEL_107;
        }
LABEL_99:
        if ((v77 & 1) != 0)
          goto LABEL_139;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_142;
        if (v88 < v76)
          goto LABEL_15;
LABEL_107:
        v93 = v54 - 1;
        if (v54 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v94 = v11;
        v95 = v10;
        v96 = &v52[16 * v93];
        v97 = *(_QWORD *)v96;
        v98 = &v52[16 * v54];
        v99 = *((_QWORD *)v98 + 1);
        sub_2445C210C((char *)(v95 + 48 * *(_QWORD *)v96), (char *)(v95 + 48 * *(_QWORD *)v98), v95 + 48 * v99, __dst);
        if (v1)
          goto LABEL_115;
        if (v99 < v97)
          goto LABEL_132;
        if (v54 > *((_QWORD *)v94 + 2))
          goto LABEL_133;
        *(_QWORD *)v96 = v97;
        *(_QWORD *)&v52[16 * v93 + 8] = v99;
        v100 = *((_QWORD *)v94 + 2);
        if (v54 >= v100)
          goto LABEL_134;
        v11 = v94;
        v12 = v100 - 1;
        memmove(&v52[16 * v54], v98 + 16, 16 * (v100 - 1 - v54));
        *((_QWORD *)v94 + 2) = v100 - 1;
        v82 = v100 > 2;
        v10 = v115;
        if (!v82)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v115;
LABEL_15:
    v3 = v114;
    if (v9 >= v114)
    {
      v8 = v112;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v113))
    goto LABEL_153;
  if (v13 + v113 >= v3)
    v37 = v3;
  else
    v37 = v13 + v113;
  if (v37 >= v13)
  {
    if (v9 != v37)
    {
      v38 = v109 + 48 * v9;
      do
      {
        v39 = (uint64_t *)(v10 + 48 * v9);
        v40 = *v39;
        v41 = v39[1];
        v42 = v13;
        v43 = v38;
        do
        {
          v44 = (_OWORD *)(v43 - 80);
          v45 = v40 == *(_QWORD *)(v43 - 80) && v41 == *(_QWORD *)(v43 - 72);
          if (v45 || (sub_2445C45B8() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v47 = *(_OWORD *)(v43 - 64);
          v46 = *(_OWORD *)(v43 - 48);
          *(_OWORD *)(v43 - 48) = *(_OWORD *)v43;
          v43 -= 48;
          v40 = *(_QWORD *)(v43 + 16);
          v48 = *(_QWORD *)(v43 + 40);
          v49 = *(_OWORD *)(v43 + 24);
          v44[3] = *v44;
          v44[4] = v47;
          v44[5] = v46;
          *(_QWORD *)(v43 - 32) = v40;
          *(_OWORD *)(v43 - 24) = v49;
          *(_QWORD *)(v43 - 8) = v48;
          v41 = v49;
          ++v42;
        }
        while (v9 != v42);
        ++v9;
        v38 += 48;
      }
      while (v9 != v37);
      v9 = v37;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2445C4540();
  __break(1u);
  return result;
}

uint64_t sub_2445C1F24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 48 * a3 + 40;
LABEL_5:
    v9 = (uint64_t *)(v7 + 48 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = (_OWORD *)(v12 - 88);
      v14 = result == *(_QWORD *)(v12 - 88) && v10 == *(_QWORD *)(v12 - 80);
      if (v14 || (result = sub_2445C45B8(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 48;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = *(_OWORD *)(v12 - 72);
      v15 = *(_OWORD *)(v12 - 56);
      *(_QWORD *)(v12 - 48) = *(_QWORD *)v12;
      v12 -= 48;
      result = *(_QWORD *)(v12 + 8);
      v17 = *(_OWORD *)(v12 + 16);
      v18 = *(_OWORD *)(v12 + 32);
      v13[3] = *v13;
      v13[4] = v16;
      v13[5] = v15;
      *(_QWORD *)(v12 - 40) = result;
      *(_OWORD *)(v12 - 32) = v17;
      *(_OWORD *)(v12 - 16) = v18;
      v10 = v17;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2445C2014(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 48 * a3 + 32;
LABEL_5:
    v9 = (uint64_t *)(v7 + 48 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = (_OWORD *)(v12 - 80);
      v14 = result == *(_QWORD *)(v12 - 80) && v10 == *(_QWORD *)(v12 - 72);
      if (v14 || (result = sub_2445C45B8(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 48;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = *(_OWORD *)(v12 - 64);
      v15 = *(_OWORD *)(v12 - 48);
      *(_OWORD *)(v12 - 48) = *(_OWORD *)v12;
      v12 -= 48;
      result = *(_QWORD *)(v12 + 16);
      v17 = *(_QWORD *)(v12 + 40);
      v18 = *(_OWORD *)(v12 + 24);
      v13[3] = *v13;
      v13[4] = v16;
      v13[5] = v15;
      *(_QWORD *)(v12 - 32) = result;
      *(_OWORD *)(v12 - 24) = v18;
      *(_QWORD *)(v12 - 8) = v17;
      v10 = v18;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2445C210C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v19 = &v4[48 * v11];
      v31 = v19;
      v33 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        v20 = (char *)(a3 - 48);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 48;
          v23 = *((_QWORD *)v21 - 6);
          v24 = *((_QWORD *)v21 - 5);
          v21 -= 48;
          v25 = *((_QWORD *)v19 - 6) == v23 && *((_QWORD *)v19 - 5) == v24;
          if (v25 || (sub_2445C45B8() & 1) == 0)
          {
            v31 = v19 - 48;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
            {
              v28 = *((_OWORD *)v19 - 3);
              v29 = *((_OWORD *)v19 - 1);
              *((_OWORD *)v20 + 1) = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 2) = v29;
              *(_OWORD *)v20 = v28;
            }
            v21 = v6;
            v19 -= 48;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
            {
              v26 = *(_OWORD *)v21;
              v27 = *((_OWORD *)v21 + 2);
              *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
              *((_OWORD *)v20 + 2) = v27;
              *(_OWORD *)v20 = v26;
            }
            v33 = v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          v20 -= 48;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v12 = &v4[48 * v9];
    v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      do
      {
        v13 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v13 || (sub_2445C45B8() & 1) == 0)
        {
          if (v7 != v4)
          {
            v17 = *(_OWORD *)v4;
            v18 = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = v18;
            *(_OWORD *)v7 = v17;
          }
          v4 += 48;
          v32 = v4;
          v14 = v6;
        }
        else
        {
          v14 = v6 + 48;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            v15 = *(_OWORD *)v6;
            v16 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v7 + 2) = v16;
            *(_OWORD *)v7 = v15;
          }
        }
        v7 += 48;
        if (v4 >= v12)
          break;
        v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      v33 = v7;
    }
LABEL_46:
    sub_2445BC108((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  result = sub_2445C457C();
  __break(1u);
  return result;
}

uint64_t sub_2445C23E0(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v20;
  _QWORD v21[4];
  _OWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v20 = v2;
    v24 = MEMORY[0x24BEE4AF8];
    sub_2445A1834(0, v3, 0);
    v4 = v24;
    for (i = (uint64_t *)(a1 + 40); ; i += 6)
    {
      v7 = *(i - 1);
      v8 = *i;
      v9 = i[2];
      v10 = i[3];
      v11 = i[4];
      v21[0] = i[1];
      v21[1] = v9;
      v21[2] = v10;
      v21[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v9, v10);
      swift_bridgeObjectRetain();
      a2(v22, v7, v8, v21);
      if (v20)
        break;
      v20 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v9, v10);
      swift_bridgeObjectRelease();
      v24 = v4;
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2445A1834(v12 > 1, v13 + 1, 1);
        v4 = v24;
      }
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = v4 + 56 * v13;
      v15 = v22[0];
      v16 = v22[1];
      v17 = v22[2];
      *(_QWORD *)(v14 + 80) = v23;
      *(_OWORD *)(v14 + 48) = v16;
      *(_OWORD *)(v14 + 64) = v17;
      *(_OWORD *)(v14 + 32) = v15;
      if (!--v3)
        return v4;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v9, v10);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_2445C2598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_244582944(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_2445C25D0(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v20;
  _QWORD v21[4];
  _OWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v20 = v2;
    v24 = MEMORY[0x24BEE4AF8];
    sub_2445A1834(0, v3, 0);
    v4 = v24;
    v6 = (unint64_t *)(a1 + 72);
    while (1)
    {
      v7 = *(v6 - 5);
      v8 = *(v6 - 4);
      v9 = *(v6 - 2);
      v10 = *(v6 - 1);
      v11 = *v6;
      v21[0] = *(v6 - 3);
      v21[1] = v9;
      v21[2] = v10;
      v21[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24457475C(v10, v11);
      a2(v22, v7, v8, v21);
      if (v20)
        break;
      v20 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445747E8(v10, v11);
      v24 = v4;
      v13 = *(_QWORD *)(v4 + 16);
      v12 = *(_QWORD *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2445A1834(v12 > 1, v13 + 1, 1);
        v4 = v24;
      }
      v6 += 6;
      *(_QWORD *)(v4 + 16) = v13 + 1;
      v14 = v4 + 56 * v13;
      v15 = v22[0];
      v16 = v22[1];
      v17 = v22[2];
      *(_QWORD *)(v14 + 80) = v23;
      *(_OWORD *)(v14 + 48) = v16;
      *(_OWORD *)(v14 + 64) = v17;
      *(_OWORD *)(v14 + 32) = v15;
      if (!--v3)
        return v4;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2445747E8(v10, v11);
    swift_release();
  }
  return v4;
}

double TypeSchemaDescription.asPublic()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_24457403C(v1, (uint64_t)&v13);
  if (!v17)
  {
    sub_24457466C(&v13, (uint64_t)v10);
    v5 = v11;
    v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    EnumSchemaDescribing.asPublic()(v5, v6, (uint64_t *)a1);
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_5;
  }
  if (v17 == 1)
  {
    sub_24457466C(&v13, (uint64_t)v10);
    v3 = v11;
    v4 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    MessageSchemaDescribing.asPublic()(v3, v4, (uint64_t *)a1);
    *(_BYTE *)(a1 + 40) = 1;
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return result;
  }
  if (v15 | v16 | (unint64_t)v13 | v14 | *((_QWORD *)&v13 + 1))
  {
    v8 = v15 | v16 | v14 | *((_QWORD *)&v13 + 1);
    if ((_QWORD)v13 != 1 || v8)
    {
      if ((_QWORD)v13 == 2 && !v8)
      {
        *(_QWORD *)a1 = 2;
        result = 0.0;
        *(_OWORD *)(a1 + 8) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_BYTE *)(a1 + 40) = 2;
        return result;
      }
      if ((_QWORD)v13 != 3 || v8)
      {
        if ((_QWORD)v13 != 4 || v8)
        {
          if ((_QWORD)v13 != 5 || v8)
          {
            if ((_QWORD)v13 != 6 || v8)
            {
              if ((_QWORD)v13 != 7 || v8)
              {
                if ((_QWORD)v13 != 8 || v8)
                {
                  if ((_QWORD)v13 != 9 || v8)
                  {
                    if ((_QWORD)v13 != 10 || v8)
                    {
                      if ((_QWORD)v13 != 11 || v8)
                      {
                        if ((_QWORD)v13 != 12 || v8)
                        {
                          if ((_QWORD)v13 != 13 || v8)
                            v9 = 14;
                          else
                            v9 = 13;
                        }
                        else
                        {
                          v9 = 12;
                        }
                      }
                      else
                      {
                        v9 = 11;
                      }
                    }
                    else
                    {
                      v9 = 10;
                    }
                  }
                  else
                  {
                    v9 = 9;
                  }
                }
                else
                {
                  v9 = 8;
                }
              }
              else
              {
                v9 = 7;
              }
            }
            else
            {
              v9 = 6;
            }
          }
          else
          {
            v9 = 5;
          }
        }
        else
        {
          v9 = 4;
        }
      }
      else
      {
        v9 = 3;
      }
    }
    else
    {
      v9 = 1;
    }
    *(_QWORD *)a1 = v9;
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(_BYTE *)(a1 + 40) = 2;
  return result;
}

void TypeSchemaDescription.init(manifest:typeName:store:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2445C2A0C()
{
  uint64_t v0;
  uint64_t result;

  swift_unknownObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v0 = 10;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_BYTE *)(v0 + 40) = 2;
  return result;
}

uint64_t TypeSchema.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  sub_24457333C(v0, (uint64_t)&v15);
  if (v18)
  {
    if (v18 == 1)
    {
      v12 = v15;
      v13 = v16;
      v14 = v17;
      sub_2445C44D4();
      swift_bridgeObjectRelease();
      v1 = *((_QWORD *)&v13 + 1);
      v2 = v14;
      __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 8))(v1);
      sub_2445C42D0();
      swift_bridgeObjectRelease();
      sub_2445C42D0();
      v3 = 0x206567617373656DLL;
      sub_244578644((uint64_t)&v12);
    }
    else
    {
      v3 = 0xD000000000000011;
      if (*((_QWORD *)&v16 + 1) | v17 | (unint64_t)v15 | (unint64_t)v16 | *((_QWORD *)&v15 + 1))
      {
        v9 = *((_QWORD *)&v16 + 1) | v17 | v16 | *((_QWORD *)&v15 + 1);
        if ((_QWORD)v15 != 1 || v9)
        {
          if ((_QWORD)v15 != 2 || v9)
          {
            if ((_QWORD)v15 != 3 || v9)
            {
              if ((_QWORD)v15 != 4 || v9)
              {
                if ((_QWORD)v15 != 5 || v9)
                {
                  if ((_QWORD)v15 != 6 || v9)
                  {
                    if ((_QWORD)v15 != 7 || v9)
                    {
                      if ((_QWORD)v15 != 8 || v9)
                      {
                        if ((_QWORD)v15 != 9 || v9)
                        {
                          if ((_QWORD)v15 != 10 || v9)
                          {
                            if ((_QWORD)v15 != 11 || v9)
                            {
                              if ((_QWORD)v15 != 12 || v9)
                              {
                                if ((_QWORD)v15 == 13 && v9 == 0)
                                  return 0x7274732074786574;
                                else
                                  return 0x64207972616E6962;
                              }
                              else
                              {
                                return 0x6E61656C6F6F62;
                              }
                            }
                            else
                            {
                              return 0x676E6974616F6C66;
                            }
                          }
                          else
                          {
                            return 0xD000000000000015;
                          }
                        }
                        else
                        {
                          return 0xD000000000000017;
                        }
                      }
                      else
                      {
                        return 0xD000000000000019;
                      }
                    }
                    else
                    {
                      return 0xD000000000000020;
                    }
                  }
                  else
                  {
                    return 0xD000000000000013;
                  }
                }
              }
              else
              {
                return 0xD000000000000017;
              }
            }
            else
            {
              return 0xD000000000000019;
            }
          }
          else
          {
            return 0xD000000000000020;
          }
        }
        else
        {
          return 0xD000000000000013;
        }
      }
    }
  }
  else
  {
    v12 = v15;
    v13 = v16;
    v14 = v17;
    sub_2445C44D4();
    v5 = *((_QWORD *)&v13 + 1);
    v4 = v14;
    __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v5);
    swift_bridgeObjectRelease();
    v11 = v6;
    sub_2445C42D0();
    v7 = *((_QWORD *)&v13 + 1);
    v8 = v14;
    __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
    sub_2445C42D0();
    swift_bridgeObjectRelease();
    sub_2445C42D0();
    v3 = v11;
    sub_2445786B8((uint64_t)&v12);
  }
  return v3;
}

uint64_t _s17PoirotSchematizer10TypeSchemaO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v23;
  int8x16_t v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _BYTE v41[40];
  char v42;

  sub_24457333C(a1, (uint64_t)&v35);
  sub_24457333C(a2, (uint64_t)v41);
  if (!v40)
  {
    sub_24457333C((uint64_t)&v35, (uint64_t)&v32);
    if (!v42)
    {
      v29 = v32;
      v30 = v33;
      v14 = v34;
      v31 = v34;
      v26 = *(_OWORD *)v41;
      v27 = *(_OWORD *)&v41[16];
      v28 = *(_QWORD *)&v41[32];
      v15 = *((_QWORD *)&v33 + 1);
      __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v33 + 1));
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(v15);
      v18 = v17;
      v20 = *((_QWORD *)&v27 + 1);
      v19 = v28;
      __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
      if (v16 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v20) && v18 == v21)
        v12 = 1;
      else
        v12 = sub_2445C45B8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2445786B8((uint64_t)&v26);
      sub_2445786B8((uint64_t)&v29);
      goto LABEL_35;
    }
    sub_2445786B8((uint64_t)&v32);
    goto LABEL_95;
  }
  if (v40 != 1)
  {
    if (!(v38 | v39 | v35 | v37 | v36))
    {
      if (v42 != 2)
        goto LABEL_95;
      v23 = vorrq_s8(*(int8x16_t *)&v41[8], *(int8x16_t *)&v41[24]);
      if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)) | *(_QWORD *)v41)
        goto LABEL_95;
      goto LABEL_94;
    }
    v13 = v38 | v39 | v37 | v36;
    if (v35 != 1 || v13)
    {
      if (v35 != 2 || v13)
      {
        if (v35 != 3 || v13)
        {
          if (v35 != 4 || v13)
          {
            if (v35 != 5 || v13)
            {
              if (v35 != 6 || v13)
              {
                if (v35 != 7 || v13)
                {
                  if (v35 != 8 || v13)
                  {
                    if (v35 != 9 || v13)
                    {
                      if (v35 != 10 || v13)
                      {
                        if (v35 != 11 || v13)
                        {
                          if (v35 != 12 || v13)
                          {
                            if (v35 != 13 || v13)
                            {
                              if (v42 != 2 || *(_QWORD *)v41 != 14)
                                goto LABEL_95;
                            }
                            else if (v42 != 2 || *(_QWORD *)v41 != 13)
                            {
                              goto LABEL_95;
                            }
                          }
                          else if (v42 != 2 || *(_QWORD *)v41 != 12)
                          {
                            goto LABEL_95;
                          }
                        }
                        else if (v42 != 2 || *(_QWORD *)v41 != 11)
                        {
                          goto LABEL_95;
                        }
                      }
                      else if (v42 != 2 || *(_QWORD *)v41 != 10)
                      {
                        goto LABEL_95;
                      }
                    }
                    else if (v42 != 2 || *(_QWORD *)v41 != 9)
                    {
                      goto LABEL_95;
                    }
                  }
                  else if (v42 != 2 || *(_QWORD *)v41 != 8)
                  {
                    goto LABEL_95;
                  }
                }
                else if (v42 != 2 || *(_QWORD *)v41 != 7)
                {
                  goto LABEL_95;
                }
              }
              else if (v42 != 2 || *(_QWORD *)v41 != 6)
              {
                goto LABEL_95;
              }
            }
            else if (v42 != 2 || *(_QWORD *)v41 != 5)
            {
              goto LABEL_95;
            }
          }
          else if (v42 != 2 || *(_QWORD *)v41 != 4)
          {
            goto LABEL_95;
          }
        }
        else if (v42 != 2 || *(_QWORD *)v41 != 3)
        {
          goto LABEL_95;
        }
      }
      else if (v42 != 2 || *(_QWORD *)v41 != 2)
      {
        goto LABEL_95;
      }
    }
    else if (v42 != 2 || *(_QWORD *)v41 != 1)
    {
      goto LABEL_95;
    }
    v24 = vorrq_s8(*(int8x16_t *)&v41[8], *(int8x16_t *)&v41[24]);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)))
    {
LABEL_94:
      sub_24458E974((uint64_t)&v35);
      v12 = 1;
      return v12 & 1;
    }
LABEL_95:
    sub_2445C3810((uint64_t)&v35);
    v12 = 0;
    return v12 & 1;
  }
  sub_24457333C((uint64_t)&v35, (uint64_t)&v32);
  if (v42 != 1)
  {
    sub_244578644((uint64_t)&v32);
    goto LABEL_95;
  }
  v29 = v32;
  v30 = v33;
  v3 = v34;
  v31 = v34;
  v26 = *(_OWORD *)v41;
  v27 = *(_OWORD *)&v41[16];
  v28 = *(_QWORD *)&v41[32];
  v4 = *((_QWORD *)&v33 + 1);
  __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v33 + 1));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v4);
  v7 = v6;
  v9 = *((_QWORD *)&v27 + 1);
  v8 = v28;
  __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
  if (v5 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v9) && v7 == v10)
    v12 = 1;
  else
    v12 = sub_2445C45B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_244578644((uint64_t)&v26);
  sub_244578644((uint64_t)&v29);
LABEL_35:
  sub_24458E974((uint64_t)&v35);
  return v12 & 1;
}

uint64_t sub_2445C35CC(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t _s17PoirotSchematizer21TypeSchemaDescriptionOwca_0(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 <= 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v8 = *a2;
      v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t _s17PoirotSchematizer21TypeSchemaDescriptionOwta_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 <= 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t _s17PoirotSchematizer21TypeSchemaDescriptionOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t _s17PoirotSchematizer21TypeSchemaDescriptionOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeSchemaDescription()
{
  return &type metadata for TypeSchemaDescription;
}

uint64_t sub_2445C3810(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573726C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UnsafeRawBufferPointer.safeData()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x24BEE0F88];
  v8[4] = MEMORY[0x24BDCFB90];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x24BEE0F88]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_2445C3A30(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_2445C3B70((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_2445C3AF0((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_2445C3910()
{
  _QWORD *v0;

  if (*v0)
    return v0[1] - *v0;
  else
    return 0;
}

uint64_t sub_2445C392C()
{
  uint64_t *v0;

  return UnsafeRawBufferPointer.safeData()(*v0, v0[1]);
}

uint64_t sub_2445C3934()
{
  return sub_2445C4384();
}

uint64_t Data.safeData()(uint64_t a1, unint64_t a2)
{
  sub_244574770(a1, a2);
  return a1;
}

uint64_t sub_2445C397C()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_2445C3990 + dword_2445C39D4[*(_QWORD *)(v0 + 8) >> 62]))(0);
}

uint64_t sub_2445C39A0()
{
  uint64_t v0;

  return BYTE6(v0);
}

uint64_t sub_2445C39E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_244574770(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_2445C3A14()
{
  return sub_2445C3D54();
}

uint64_t sub_2445C3A30(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_2445C3AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2445C3CF4();
  swift_allocObject();
  result = sub_2445C3CB8();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_2445C3B70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_2445C3CF4();
  swift_allocObject();
  result = sub_2445C3CB8();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2445C3D30();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t dispatch thunk of DataValueDescribing.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DataValueDescribing.safeData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DataValueDescribing.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t sub_2445C3C10()
{
  return MEMORY[0x24BDCB288]();
}

uint64_t sub_2445C3C1C()
{
  return MEMORY[0x24BDCB290]();
}

uint64_t sub_2445C3C28()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t sub_2445C3C34()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t sub_2445C3C40()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_2445C3C4C()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_2445C3C58()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_2445C3C64()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t sub_2445C3C70()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t sub_2445C3C7C()
{
  return MEMORY[0x24BDCB648]();
}

uint64_t sub_2445C3C88()
{
  return MEMORY[0x24BDCB6D8]();
}

uint64_t sub_2445C3C94()
{
  return MEMORY[0x24BDCB700]();
}

uint64_t sub_2445C3CA0()
{
  return MEMORY[0x24BDCB710]();
}

uint64_t sub_2445C3CAC()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_2445C3CB8()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_2445C3CC4()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_2445C3CD0()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_2445C3CDC()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_2445C3CE8()
{
  return MEMORY[0x24BDCBBF8]();
}

uint64_t sub_2445C3CF4()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_2445C3D00()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_2445C3D0C()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t sub_2445C3D18()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_2445C3D24()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_2445C3D30()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_2445C3D3C()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_2445C3D48()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_2445C3D54()
{
  return MEMORY[0x24BDCDC80]();
}

uint64_t sub_2445C3D60()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_2445C3D6C()
{
  return MEMORY[0x24BDCF320]();
}

uint64_t sub_2445C3D78()
{
  return MEMORY[0x24BDCF3B0]();
}

uint64_t sub_2445C3D84()
{
  return MEMORY[0x24BDCF3D8]();
}

uint64_t sub_2445C3D90()
{
  return MEMORY[0x24BDCF420]();
}

uint64_t sub_2445C3D9C()
{
  return MEMORY[0x24BDCF428]();
}

uint64_t sub_2445C3DA8()
{
  return MEMORY[0x24BE741B8]();
}

uint64_t sub_2445C3DB4()
{
  return MEMORY[0x24BE5BA00]();
}

uint64_t sub_2445C3DC0()
{
  return MEMORY[0x24BE5BA80]();
}

uint64_t sub_2445C3DCC()
{
  return MEMORY[0x24BE5BA90]();
}

uint64_t sub_2445C3DD8()
{
  return MEMORY[0x24BE5BAA0]();
}

uint64_t sub_2445C3DE4()
{
  return MEMORY[0x24BE5BAA8]();
}

uint64_t sub_2445C3DF0()
{
  return MEMORY[0x24BE5BAB0]();
}

uint64_t sub_2445C3DFC()
{
  return MEMORY[0x24BE5BAB8]();
}

uint64_t sub_2445C3E08()
{
  return MEMORY[0x24BE5BAC0]();
}

uint64_t sub_2445C3E14()
{
  return MEMORY[0x24BE5BAC8]();
}

uint64_t sub_2445C3E20()
{
  return MEMORY[0x24BE5BAD0]();
}

uint64_t sub_2445C3E2C()
{
  return MEMORY[0x24BE5BAD8]();
}

uint64_t sub_2445C3E38()
{
  return MEMORY[0x24BE5BAE0]();
}

uint64_t sub_2445C3E44()
{
  return MEMORY[0x24BE5BAE8]();
}

uint64_t sub_2445C3E50()
{
  return MEMORY[0x24BE5BAF0]();
}

uint64_t sub_2445C3E5C()
{
  return MEMORY[0x24BE5BAF8]();
}

uint64_t sub_2445C3E68()
{
  return MEMORY[0x24BE5BB00]();
}

uint64_t sub_2445C3E74()
{
  return MEMORY[0x24BE5BB08]();
}

uint64_t sub_2445C3E80()
{
  return MEMORY[0x24BE5BB20]();
}

uint64_t sub_2445C3E8C()
{
  return MEMORY[0x24BE5BB28]();
}

uint64_t sub_2445C3E98()
{
  return MEMORY[0x24BE5BB30]();
}

uint64_t sub_2445C3EA4()
{
  return MEMORY[0x24BE5BB40]();
}

uint64_t sub_2445C3EB0()
{
  return MEMORY[0x24BE5BB48]();
}

uint64_t sub_2445C3EBC()
{
  return MEMORY[0x24BE5BB50]();
}

uint64_t sub_2445C3EC8()
{
  return MEMORY[0x24BE5BB58]();
}

uint64_t sub_2445C3ED4()
{
  return MEMORY[0x24BE5BB60]();
}

uint64_t sub_2445C3EE0()
{
  return MEMORY[0x24BE5BB68]();
}

uint64_t sub_2445C3EEC()
{
  return MEMORY[0x24BE5BB70]();
}

uint64_t sub_2445C3EF8()
{
  return MEMORY[0x24BE5BB78]();
}

uint64_t sub_2445C3F04()
{
  return MEMORY[0x24BE5BB80]();
}

uint64_t sub_2445C3F10()
{
  return MEMORY[0x24BE5BB88]();
}

uint64_t sub_2445C3F1C()
{
  return MEMORY[0x24BE5BB98]();
}

uint64_t sub_2445C3F28()
{
  return MEMORY[0x24BE5BBA0]();
}

uint64_t sub_2445C3F34()
{
  return MEMORY[0x24BE5BBA8]();
}

uint64_t sub_2445C3F40()
{
  return MEMORY[0x24BE5BBB0]();
}

uint64_t sub_2445C3F4C()
{
  return MEMORY[0x24BE5BBB8]();
}

uint64_t sub_2445C3F58()
{
  return MEMORY[0x24BE5BBC0]();
}

uint64_t sub_2445C3F64()
{
  return MEMORY[0x24BE5BBC8]();
}

uint64_t sub_2445C3F70()
{
  return MEMORY[0x24BE5BBD0]();
}

uint64_t sub_2445C3F7C()
{
  return MEMORY[0x24BE5BBE0]();
}

uint64_t sub_2445C3F88()
{
  return MEMORY[0x24BE5BBE8]();
}

uint64_t sub_2445C3F94()
{
  return MEMORY[0x24BE5BBF0]();
}

uint64_t sub_2445C3FA0()
{
  return MEMORY[0x24BE5BBF8]();
}

uint64_t sub_2445C3FAC()
{
  return MEMORY[0x24BE5BC00]();
}

uint64_t sub_2445C3FB8()
{
  return MEMORY[0x24BE5BC08]();
}

uint64_t sub_2445C3FC4()
{
  return MEMORY[0x24BE5BC10]();
}

uint64_t sub_2445C3FD0()
{
  return MEMORY[0x24BE5BC20]();
}

uint64_t sub_2445C3FDC()
{
  return MEMORY[0x24BE5BC30]();
}

uint64_t sub_2445C3FE8()
{
  return MEMORY[0x24BE5BC40]();
}

uint64_t sub_2445C3FF4()
{
  return MEMORY[0x24BE5BC48]();
}

uint64_t sub_2445C4000()
{
  return MEMORY[0x24BE5BC50]();
}

uint64_t sub_2445C400C()
{
  return MEMORY[0x24BE5BC58]();
}

uint64_t sub_2445C4018()
{
  return MEMORY[0x24BE5BC60]();
}

uint64_t sub_2445C4024()
{
  return MEMORY[0x24BE5BC68]();
}

uint64_t sub_2445C4030()
{
  return MEMORY[0x24BE5BCF0]();
}

uint64_t sub_2445C403C()
{
  return MEMORY[0x24BE5BD08]();
}

uint64_t sub_2445C4048()
{
  return MEMORY[0x24BE5BD10]();
}

uint64_t sub_2445C4054()
{
  return MEMORY[0x24BE5BD18]();
}

uint64_t sub_2445C4060()
{
  return MEMORY[0x24BE5BD20]();
}

uint64_t sub_2445C406C()
{
  return MEMORY[0x24BE5BD28]();
}

uint64_t sub_2445C4078()
{
  return MEMORY[0x24BE5BD30]();
}

uint64_t sub_2445C4084()
{
  return MEMORY[0x24BE5BD40]();
}

uint64_t sub_2445C4090()
{
  return MEMORY[0x24BE5BD48]();
}

uint64_t sub_2445C409C()
{
  return MEMORY[0x24BE5BD50]();
}

uint64_t sub_2445C40A8()
{
  return MEMORY[0x24BE5BD58]();
}

uint64_t sub_2445C40B4()
{
  return MEMORY[0x24BE5BD60]();
}

uint64_t sub_2445C40C0()
{
  return MEMORY[0x24BE5BD68]();
}

uint64_t sub_2445C40CC()
{
  return MEMORY[0x24BE5BD78]();
}

uint64_t sub_2445C40D8()
{
  return MEMORY[0x24BE5BD80]();
}

uint64_t sub_2445C40E4()
{
  return MEMORY[0x24BE5BD88]();
}

uint64_t sub_2445C40F0()
{
  return MEMORY[0x24BE5BD90]();
}

uint64_t sub_2445C40FC()
{
  return MEMORY[0x24BE5BD98]();
}

uint64_t sub_2445C4108()
{
  return MEMORY[0x24BE5BDA0]();
}

uint64_t sub_2445C4114()
{
  return MEMORY[0x24BE5BDA8]();
}

uint64_t sub_2445C4120()
{
  return MEMORY[0x24BE5BDB0]();
}

uint64_t sub_2445C412C()
{
  return MEMORY[0x24BE5BF90]();
}

uint64_t sub_2445C4138()
{
  return MEMORY[0x24BE5BF98]();
}

uint64_t sub_2445C4144()
{
  return MEMORY[0x24BE5BFA8]();
}

uint64_t sub_2445C4150()
{
  return MEMORY[0x24BE5BFB0]();
}

uint64_t sub_2445C415C()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t sub_2445C4168()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t sub_2445C4174()
{
  return MEMORY[0x24BE5C188]();
}

uint64_t sub_2445C4180()
{
  return MEMORY[0x24BE5C190]();
}

uint64_t sub_2445C418C()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t sub_2445C4198()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t sub_2445C41A4()
{
  return MEMORY[0x24BE5C1C8]();
}

uint64_t sub_2445C41B0()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_2445C41BC()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_2445C41C8()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_2445C41D4()
{
  return MEMORY[0x24BEE0290]();
}

uint64_t sub_2445C41E0()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_2445C41EC()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_2445C41F8()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_2445C4204()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_2445C4210()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_2445C421C()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_2445C4228()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_2445C4234()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_2445C4240()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_2445C424C()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_2445C4258()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_2445C4264()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_2445C4270()
{
  return MEMORY[0x24BE74490]();
}

uint64_t sub_2445C427C()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_2445C4288()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_2445C4294()
{
  return MEMORY[0x24BEE0B00]();
}

uint64_t sub_2445C42A0()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_2445C42AC()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_2445C42B8()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_2445C42C4()
{
  return MEMORY[0x24BEE0B88]();
}

uint64_t sub_2445C42D0()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_2445C42DC()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_2445C42E8()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_2445C42F4()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_2445C4300()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_2445C430C()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_2445C4318()
{
  return MEMORY[0x24BEE0C60]();
}

uint64_t sub_2445C4324()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_2445C4330()
{
  return MEMORY[0x24BEE0CE8]();
}

uint64_t sub_2445C433C()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_2445C4348()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_2445C4354()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_2445C4360()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_2445C436C()
{
  return MEMORY[0x24BEE0EB8]();
}

uint64_t sub_2445C4378()
{
  return MEMORY[0x24BEE0EC0]();
}

uint64_t sub_2445C4384()
{
  return MEMORY[0x24BDCFB98]();
}

uint64_t sub_2445C4390()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_2445C439C()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_2445C43A8()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_2445C43B4()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_2445C43C0()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_2445C43CC()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_2445C43D8()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_2445C43E4()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_2445C43F0()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_2445C43FC()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_2445C4408()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_2445C4414()
{
  return MEMORY[0x24BDD0420]();
}

uint64_t sub_2445C4420()
{
  return MEMORY[0x24BDD0428]();
}

uint64_t sub_2445C442C()
{
  return MEMORY[0x24BDD0438]();
}

uint64_t sub_2445C4438()
{
  return MEMORY[0x24BDD0460]();
}

uint64_t sub_2445C4444()
{
  return MEMORY[0x24BDD0468]();
}

uint64_t sub_2445C4450()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_2445C445C()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_2445C4468()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_2445C4474()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_2445C4480()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t sub_2445C448C()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_2445C4498()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_2445C44A4()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_2445C44B0()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_2445C44BC()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_2445C44C8()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_2445C44D4()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_2445C44E0()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_2445C44EC()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_2445C44F8()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t sub_2445C4504()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_2445C4510()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_2445C451C()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_2445C4528()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_2445C4534()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_2445C4540()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_2445C454C()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_2445C4558()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_2445C4564()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_2445C4570()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_2445C457C()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_2445C4588()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_2445C4594()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_2445C45A0()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_2445C45AC()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_2445C45B8()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_2445C45C4()
{
  return MEMORY[0x24BEE3AF0]();
}

uint64_t sub_2445C45D0()
{
  return MEMORY[0x24BEE3AF8]();
}

uint64_t sub_2445C45DC()
{
  return MEMORY[0x24BEE3B00]();
}

uint64_t sub_2445C45E8()
{
  return MEMORY[0x24BEE3B08]();
}

uint64_t sub_2445C45F4()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t sub_2445C4600()
{
  return MEMORY[0x24BEE3B38]();
}

uint64_t sub_2445C460C()
{
  return MEMORY[0x24BEE3B40]();
}

uint64_t sub_2445C4618()
{
  return MEMORY[0x24BEE3B58]();
}

uint64_t sub_2445C4624()
{
  return MEMORY[0x24BEE3B60]();
}

uint64_t sub_2445C4630()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_2445C463C()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_2445C4648()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_2445C4654()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_2445C4660()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_2445C466C()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_2445C4678()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_2445C4684()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_2445C4690()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_2445C469C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_2445C46A8()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_2445C46B4()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_2445C46C0()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_2445C46CC()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_2445C46D8()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_2445C46E4()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_2445C46F0()
{
  return MEMORY[0x24BEE4A98]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x24BEDD460](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x24BEE4FB8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x24BEE4FC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x24BEE4FE0]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x24BEE4FE8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x24BEE5018]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x24BEE5020]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x24BEE5040]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x24BEE5048]();
}

